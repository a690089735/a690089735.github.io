var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: sceneAssembly/assemblyReference.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'scene_assembly_2assembly_reference_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: sceneAssembly/assemblyReference.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">sceneAssembly/assemblyReference.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#include &quot;assemblyReference.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;sceneAssemblyStrings.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;assemblyReferenceInitialRep.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxRepresentation.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAssembly.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCompoundAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnContainerNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileIO.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MNamespace.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MExternalContentInfoTable.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MExternalContentLocationTable.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span>             <span class=\"comment\">// For CHECK_MSTATUS_AND_RETURN_IT.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>std;            <span class=\"comment\">// For CHECK_MSTATUS macros.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL DECLARATIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*----- constants -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keyword\">const</span> ICON_NAME = <span class=\"stringliteral\">&quot;out_assemblyReference.png&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> DEFINITION_FILE_ATTR_UINAME( <span class=\"stringliteral\">&quot;definition&quot;</span> );</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> DEFINITION_FILE_ATTR_SHORTNAME( <span class=\"stringliteral\">&quot;def&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL FUNCTIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> isAssemblyDefinition(<a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Require exact type match for assembly definition.  Precludes</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// having a class derived from AssemblyDefinition to be used as an</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// assembly definition, but this is an acceptable restriction.</span></div>\n\
<div class=\"line\">   <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fn(obj);</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> fn.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a1d0bbd4d50dae591f8e003c0aedc8135\">typeId</a>() == AssemblyDefinition::id;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AssemblyReference</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> AssemblyReference::id(0x580000b1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyReference::typeName(<span class=\"stringliteral\">&quot;assemblyReference&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aDefnFile;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aRepNamespace;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aRepresentations;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aRepName;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aRepLabel;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aRepType;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aRepData;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyReference::aInitialRep;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* AssemblyReference::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> AssemblyReference;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyReference::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// We are not using the inheritAttributesFrom(BaseNode::typeName)</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// because we need to set them &quot;not storable&quot;.  Representation</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// attributes are not stored because they are obtained from the</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// assembly definition.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = initRepresentations(</div>\n\
<div class=\"line\">      kNotStorable, aRepresentations, aRepName, aRepLabel, aRepType, aRepData);</div>\n\
<div class=\"line\">   <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> defnFileAttrFn;</div>\n\
<div class=\"line\">   aDefnFile = defnFileAttrFn.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(</div>\n\
<div class=\"line\">      DEFINITION_FILE_ATTR_UINAME, DEFINITION_FILE_ATTR_SHORTNAME,</div>\n\
<div class=\"line\">      <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>);</div>\n\
<div class=\"line\">   <span class=\"comment\">// Set the attribute as &quot;internal&quot; not to store it ourselves, but</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// to get setInternalValue() to be called.</span></div>\n\
<div class=\"line\">   <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>(defnFileAttrFn.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>(defnFileAttrFn.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab8fc03c313bed1f43387ad04e31bc87d\">setUsedAsFilename</a>(<span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">   stat = <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aDefnFile);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// Namespace for assembly representations.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> repNamespaceAttrFn;</div>\n\
<div class=\"line\">   aRepNamespace = repNamespaceAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;repNamespace&quot;</span>, <span class=\"stringliteral\">&quot;rns&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>(repNamespaceAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">   stat = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aRepNamespace);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// Initial configuration (may be empty, only used for top level assemblies) </span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> initialRepAttrFn;</div>\n\
<div class=\"line\">   aInitialRep = initialRepAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;initialRep&quot;</span>, <span class=\"stringliteral\">&quot;irp&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>);</div>\n\
<div class=\"line\">   stat = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aInitialRep);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyReference::uninitialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">AssemblyReference::AssemblyReference() </div>\n\
<div class=\"line\">    : BaseNode()</div>\n\
<div class=\"line\">    , fDefnFile()</div>\n\
<div class=\"line\">    , fUseDefnFileAttrib(true)</div>\n\
<div class=\"line\">    , fInitialRep(NULL)</div>\n\
<div class=\"line\">    , fUpdatingRepNamespace(false)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">AssemblyReference::~AssemblyReference()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// TODO: MAYA-15544 - either restructure to remove the need for this member </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// variable, or make it an unique_ptr. </span></div>\n\
<div class=\"line\">    assert(NULL == fInitialRep);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyReference::createRepresentation(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; <span class=\"comment\">/* input */</span>,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; <span class=\"comment\">/* type */</span>,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; <span class=\"comment\">/* representation */</span>,</div>\n\
<div class=\"line\">   <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a>*  <span class=\"comment\">/* undoRedo */</span>,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>*       status</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Can&#39;t create a representation through an assembly reference.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != NULL) {</div>\n\
<div class=\"line\">        *status = <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyReference::getExternalContent(</div>\n\
<div class=\"line\">   <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html\">MExternalContentInfoTable</a>&amp; table</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Not invoking the base class version of the method: AssemblyReference</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// exposes representations from the definition it points at, but these are</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// not direct dependencies of the reference.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   table.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html#a02b066d0faa24f55563c607f883d47de\">addUnresolvedEntry</a>( DEFINITION_FILE_ATTR_UINAME, getDefinitionFile(), name() );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyReference::setExternalContent(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html\">MExternalContentLocationTable</a>&amp; table</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Could call the default implementation in MPxNode, but this will end up</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// looking up the attribute by name in order to set its value.  Here, since</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// we already have the aDefnFile attribute, it will be slightly more</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// efficient to use it, thus bypassing the search altogether.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> location;</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> ( !table.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html#afaca888acb17d3160255da4f65ac5b7f\">getLocation</a>( DEFINITION_FILE_ATTR_UINAME, location ) ) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> defnPlug(thisMObject(), aDefnFile);</div>\n\
<div class=\"line\">   defnPlug.setValue(location);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> AssemblyReference::repTypes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"comment\">// This is the representation creation query for existing assembly</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// references.  </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// An assembly reference cannot create new representations, only use</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// those provided by its assembly definition, so return an empty</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// array.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyReference::copyInternalData(<a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* srcNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(dynamic_cast&lt;AssemblyReference*&gt;(srcNode) != 0);</div>\n\
<div class=\"line\">    AssemblyReference* srcAssembly = <span class=\"keyword\">static_cast&lt;</span>AssemblyReference*<span class=\"keyword\">&gt;</span>(srcNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fDefnFile           = srcAssembly-&gt;fDefnFile;</div>\n\
<div class=\"line\">    fUseDefnFileAttrib  = srcAssembly-&gt;fUseDefnFileAttrib;</div>\n\
<div class=\"line\">    fDefnFileCacheEntry = srcAssembly-&gt;fDefnFileCacheEntry;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AssemblyReference::setInternalValue(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;       plug,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> &amp; handle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug == aDefnFile ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Skip any setAttrs done as part of file IO. If we call</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// postLoad() when we import the assembly definition </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// container into our own container while it&#39;s not fully-defined</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// yet, it can cause havoc</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#a30bf5678402012d5607a6b0f22d2c2a5\">MFileIO::isOpeningFile</a>() || <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#accbcaffc37fcbee9f7974aae80c8014b\">MFileIO::isReadingFile</a>() ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// At this point the plug value has not been set yet, and we</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// can&#39;t set it here, so save a transient copy from the data handle.</span></div>\n\
<div class=\"line\">        fDefnFile = handle.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>();</div>\n\
<div class=\"line\">        fUseDefnFileAttrib = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Call the MFn version of postLoad so that it goes through</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Maya&#39;s virtual function calls rather than calling</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// AssemblyReference::postLoad directly</span></div>\n\
<div class=\"line\">        <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_assembly.html\">MFnAssembly</a> aFn(thisMObject());</div>\n\
<div class=\"line\">        aFn.postLoad();    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fUseDefnFileAttrib = <span class=\"keyword\">true</span>;      </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( plug == aRepNamespace &amp;&amp; !fUpdatingRepNamespace) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Rename the Maya namespace associated to the assembly with the new repNamespace.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Correct the repNamespace if needed.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// To rename the Maya namespace, there are 2 cases to get the oldNS to rename:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// 1- If the assembly NS attribute is changed directly (i.e. someone</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// did a setAttr directly, or modified it via the AE), we get the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// oldNS (namespace to be renamed) using the plug value, which has</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// not been set yet.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// So query the old NS name from current state of the datablock, and </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the new one from the the data handle that is passed into this method.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// 2- If we are in IO, the plug value has already been set, but the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// namespace still has the default value given by MPxAssembly::getRepNamespace().</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> oldNS;</div>\n\
<div class=\"line\">        plug.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(oldNS);</div>\n\
<div class=\"line\">        <span class=\"comment\">// Early-out if the plug value is empty: the namespace has not been created yet.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (0 == oldNS.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the default namespace to rename.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#a30bf5678402012d5607a6b0f22d2c2a5\">MFileIO::isOpeningFile</a>() || <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#accbcaffc37fcbee9f7974aae80c8014b\">MFileIO::isReadingFile</a>() ) {</div>\n\
<div class=\"line\">            oldNS = <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_assembly.html#a02d592bb931ae1052701478cea052740\">MPxAssembly::getRepNamespace</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> newNS = handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>();</div>\n\
<div class=\"line\">        <span class=\"comment\">// Validate the name and only use it if valid (not &quot;&quot;).</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If the name is not valid, or if the user entered &quot;&quot; as repNamespace,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// use the default name (assembly name +  &quot;_NS&quot;).</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> validNewNS = <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_namespace.html#a43a85d2eaf4ef2bf701cff29349a0c57\">MNamespace::validateName</a>(newNS, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( validNewNS.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() == 0 ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// defaults to the MPxAssembly implementation</span></div>\n\
<div class=\"line\">            validNewNS = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_assembly.html#a02d592bb931ae1052701478cea052740\">MPxAssembly::getRepNamespace</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (validNewNS != newNS)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// update the value of newNS and of the data-handle</span></div>\n\
<div class=\"line\">            newNS = validNewNS;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>* nonConstHandle  = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>*) &amp;handle;</div>\n\
<div class=\"line\">            nonConstHandle-&gt;<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(newNS);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Finally, tell Maya to rename namespaces.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( oldNS.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() &gt; 0 &amp;&amp; newNS.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() &gt; 0 &amp;&amp; oldNS != newNS) {</div>\n\
<div class=\"line\">            status = <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_namespace.html#aa52081accd048c81ef04ab837df2aac4\">MNamespace::renameNamespace</a>(oldNS, newNS);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Rename failed. Set back old value.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Note: if rename failed, it is probably because the namespace</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// newNS already existed. But it is the responsibility of</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the user to provide a name that does not exist.</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>* nonConstHandle  = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>*) &amp;handle;</div>\n\
<div class=\"line\">                nonConstHandle-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(oldNS);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Handle required processing before file save </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya will call this on top level assemblies only. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyReference::beforeSave()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// Invoke assemblyReferenceInitialRep to store the initialRep configuration</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// onto the top level assembly. </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// TODO: MAYA-15544 reorganize assemblyReferenceInitialRep wrapper class</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// into more a more polished interface, e.g. given its current use, </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// writer() could be a static method. </span></div>\n\
<div class=\"line\">   assemblyReferenceInitialRep saveRep;</div>\n\
<div class=\"line\">   saveRep.writer(thisMObject()); </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Determine the intial representation to use for the given assembly</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya guarantees this will be called on top level references only. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// If an initial configuration cannot be determined, an empty string</span></div>\n\
<div class=\"line\"><span class=\"comment\">// is returned.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyReference::getInitialRep(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;assembly, <span class=\"keywordtype\">bool</span>&amp; hasInitialRep, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>* status)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If we have an initial representation object to query, use it to </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// try and get the initial value.     </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fInitialRep)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fInitialRep-&gt;getInitialRep(assembly, hasInitialRep);</div>\n\
<div class=\"line\">    }  </div>\n\
<div class=\"line\">    <span class=\"comment\">// Otherwise, we simply return an empty string.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyReference::postLoad()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Clear out our representations.</span></div>\n\
<div class=\"line\">   clearRepresentationList();</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_assembly.html\">MFnAssembly</a> aFn(thisMObject());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// If no definition file is provided, we can stop here.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> defnFile = getDefinitionFile();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (defnFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() == 0) {</div>\n\
<div class=\"line\">      <span class=\"comment\">// Activate to &quot;none&quot; or else, on reload, the new active representation </span></div>\n\
<div class=\"line\">      <span class=\"comment\">// will be the same as the old one and we won&#39;t load it.</span></div>\n\
<div class=\"line\">      aFn.activate(<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// Have we previously read that assembly definition file ? Can we</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// simply reuse its content ?</span></div>\n\
<div class=\"line\">   <span class=\"comment\">//</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// Note that we have to take a non-const reference since the get()</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// member function is non-const!</span></div>\n\
<div class=\"line\">   AssemblyDefinitionFileCache&amp; cache =</div>\n\
<div class=\"line\">       AssemblyDefinitionFileCache::getInstance();</div>\n\
<div class=\"line\">   fDefnFileCacheEntry = cache.get(defnFile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (!fDefnFileCacheEntry) {</div>\n\
<div class=\"line\">       <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> fileIgnoreVersion =</div>\n\
<div class=\"line\">           <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(<span class=\"stringliteral\">&quot;fileIgnoreVersion&quot;</span>) == 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       <span class=\"comment\">// Next, import the file into the container.  </span></div>\n\
<div class=\"line\">       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = aFn.importFile(</div>\n\
<div class=\"line\">           defnFile, NULL <span class=\"comment\">/*type*/</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/*preserveReferences*/</span>,</div>\n\
<div class=\"line\">           NULL <span class=\"comment\">/*nameSpace*/</span>, fileIgnoreVersion);</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">           definitionError(rAssemblyDefnImportError);</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       <span class=\"comment\">// Clear out our representations some more.  This should be</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// completely unnecessary, since we&#39;ve already cleared out the</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// representation list, which covers the case where we set the</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// definition file to the empty string and therefore exit before</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// performing the import.  Inexplicably, the representation array</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// is somehow resized back to its initial size by the call to</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// import, though it is left empty.  Entered as JIRA-10452.</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// PPT, 3-Feb-2012.</span></div>\n\
<div class=\"line\">       clearRepresentationList();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       <span class=\"comment\">// Loop through the imported nodes and try to find an assembly</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// definition node.  The supported workflow is to have a single</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// assembly definition node in the file.</span></div>\n\
<div class=\"line\">       <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_container_node.html\">MFnContainerNode</a> contFn(thisMObject());</div>\n\
<div class=\"line\">       <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> members;</div>\n\
<div class=\"line\">       status = contFn.getMembers(members);</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">           definitionError(rAssemblyDefnNotFoundError);</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       <span class=\"comment\">// Prefer safety over performance and keep looking even if we&#39;ve</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// found an assembly definition node, to make sure there isn&#39;t</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// another one in the file.  Otherwise, can stop at found!=nbMembers.</span></div>\n\
<div class=\"line\">       <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> nbMembers = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(members.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>());</div>\n\
<div class=\"line\">       <span class=\"keywordtype\">int</span> found = nbMembers;</div>\n\
<div class=\"line\">       <span class=\"keywordtype\">int</span> nbFound = 0;</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;nbMembers; ++i) {</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">if</span> (isAssemblyDefinition(members[i])) {</div>\n\
<div class=\"line\">               found = i;</div>\n\
<div class=\"line\">               ++nbFound;</div>\n\
<div class=\"line\">           }</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (found==nbMembers) {</div>\n\
<div class=\"line\">           definitionError(rAssemblyDefnNotFoundError);</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nbFound &gt; 1) {</div>\n\
<div class=\"line\">           definitionError(rMultAssemblyDefnFoundError);</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       <span class=\"comment\">// Found an assembly definition.  Copy over its attributes, which</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// at time of writing (3-May-2012) is its list of representations.</span></div>\n\
<div class=\"line\">       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_assembly.html\">MFnAssembly</a> defnFn(members[found]);</div>\n\
<div class=\"line\">       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> defnRepresentations = defnFn.getRepresentations(&amp;status);</div>\n\
<div class=\"line\">       <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> nbReps = defnRepresentations.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (status == MS::kSuccess) {</div>\n\
<div class=\"line\">           <span class=\"keyword\">const</span> AssemblyDefinition* defn =</div>\n\
<div class=\"line\">               <span class=\"keyword\">dynamic_cast&lt;</span>AssemblyDefinition*<span class=\"keyword\">&gt;</span>(defnFn.userNode());</div>\n\
<div class=\"line\">           <span class=\"comment\">// Will succeed because of isAssemblyDefinition().</span></div>\n\
<div class=\"line\">           assert(defn != 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">           AssemblyDefinitionFileCache::RepCreationArgsList repCreationArgsList;</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;nbReps; ++i) {</div>\n\
<div class=\"line\">               <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> repName = defnRepresentations[i];</div>\n\
<div class=\"line\">               repCreationArgsList.push_back(</div>\n\
<div class=\"line\">                   AssemblyDefinitionFileCache::RepresentationCreationArgs(</div>\n\
<div class=\"line\">                       repName,</div>\n\
<div class=\"line\">                       defn-&gt;getRepType(repName),</div>\n\
<div class=\"line\">                       defn-&gt;getRepLabel(repName),</div>\n\
<div class=\"line\">                       defn-&gt;getRepData(repName)));</div>\n\
<div class=\"line\">           }</div>\n\
<div class=\"line\">           fDefnFileCacheEntry = cache.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a3db31367f989449bb9b121cd734dc0df\">insert</a>(defnFile, repCreationArgsList);</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">       <span class=\"comment\">// Get rid of imported asset definition.</span></div>\n\
<div class=\"line\">       status = contFn.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">   <span class=\"comment\">// Found an assembly definition.  Copy over its attributes, which</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// at time of writing (3-May-2012) is its list of representations.</span></div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> AssemblyDefinitionFileCache::RepCreationArgsList&amp; repCreationArgslist =</div>\n\
<div class=\"line\">       fDefnFileCacheEntry-&gt;getRepCreationArgsList();</div>\n\
<div class=\"line\">   {</div>\n\
<div class=\"line\">       AssemblyDefinitionFileCache::RepCreationArgsList::const_iterator it  =</div>\n\
<div class=\"line\">           repCreationArgslist.begin();</div>\n\
<div class=\"line\">       AssemblyDefinitionFileCache::RepCreationArgsList::const_iterator end =</div>\n\
<div class=\"line\">           repCreationArgslist.end();</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">for</span> (;it != end; ++it) {</div>\n\
<div class=\"line\">           performCreateRepresentation(</div>\n\
<div class=\"line\">               it-&gt;getName(), it-&gt;getType(), it-&gt;getLabel(), it-&gt;getData());</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">   <span class=\"comment\">// If this is not a top-level assembly, lock the repNamespace attrib.</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// User should not be able to change this attribute on nested assembly</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// because otherwise it won&#39;t match the info stored in nested file.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span>(!aFn.isTopLevel())</div>\n\
<div class=\"line\">   {</div>\n\
<div class=\"line\">       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> repNamespacePlug(thisMObject(), aRepNamespace);</div>\n\
<div class=\"line\">       repNamespacePlug.setLocked(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// If we can&#39;t activate a representation (because our parent assembly is</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// being called with activateNonRecursive()), stop now.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (!aFn.canActivate()) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// If this is a top level assembly, initialize the </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// initialRep configuration. This object is destroyed</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// on exit from this postLoad routine.</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// The initialRep configuration from this topLevel assembly</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// will be accessed by this assembly, and each nested subAssembly </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// as they are activated and call getInitialRep() from within their </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// own postLoad. </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// TODO: MAYA-15544 reorganize assemblyReferenceInitialRep wrapper class</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// to have a clearer interface (see other comments in this file and </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// in earlier code reviews on MAYA-15544). </span></div>\n\
<div class=\"line\">   assert(fInitialRep == NULL);</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (aFn.isTopLevel())</div>\n\
<div class=\"line\">   {</div>\n\
<div class=\"line\">       fInitialRep = <span class=\"keyword\">new</span> assemblyReferenceInitialRep();</div>\n\
<div class=\"line\">       fInitialRep-&gt;reader(thisMObject());</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// Activate the initial representation</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (!repCreationArgslist.empty()) {</div>\n\
<div class=\"line\">       </div>\n\
<div class=\"line\">       <span class=\"comment\">// Check if initial representation is specified</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// Use hasInitialRep to know if it has initial representation</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// since we can have an empty string representation. </span></div>\n\
<div class=\"line\">       <span class=\"keywordtype\">bool</span> hasInitialRep = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> initialRep = aFn.getInitialRep(hasInitialRep);       </div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (!hasInitialRep)</div>\n\
<div class=\"line\">       {</div>\n\
<div class=\"line\">           <span class=\"comment\">// No initial representation has been found, </span></div>\n\
<div class=\"line\">           <span class=\"comment\">// use the default (which is the first one).</span></div>\n\
<div class=\"line\">           initialRep = repCreationArgslist.front().getName();</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\">       <span class=\"comment\">// MFnAssembly::activate() must be called to benefit from scene</span></div>\n\
<div class=\"line\">       <span class=\"comment\">// assembly infrastructure activation services.</span></div>\n\
<div class=\"line\">       aFn.activate(initialRep);</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// We no longer need the initial representation information. </span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (fInitialRep)</div>\n\
<div class=\"line\">   {</div>\n\
<div class=\"line\">       fInitialRep-&gt;<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>(thisMObject());</div>\n\
<div class=\"line\">       <span class=\"keyword\">delete</span> fInitialRep;</div>\n\
<div class=\"line\">       fInitialRep = NULL;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyReference::getDefaultIcon()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(ICON_NAME);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyReference::getDefinitionFile()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> defnFile = fDefnFile;</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (fUseDefnFileAttrib) {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> defnPlug(thisMObject(), aDefnFile);</div>\n\
<div class=\"line\">      defnPlug.getValue(defnFile);</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> defnFile;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyReference::definitionError(<span class=\"keyword\">const</span> <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource_id.html\">MStringResourceId</a>&amp; <span class=\"keywordtype\">id</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// The following relies on the error message being formatted with</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// URI first, assembly reference name second.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> defnFile = getDefinitionFile();</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_container_node.html\">MFnContainerNode</a> contFn(thisMObject());</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorString = <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(<span class=\"keywordtype\">id</span>, status);</div>\n\
<div class=\"line\">   errorString.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(errorString, defnFile, contFn.name());</div>\n\
<div class=\"line\">   <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorString);</div>\n\
<div class=\"line\">   contFn.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyReference::deleteRepresentation(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName)</div>\n\
<div class=\"line\">{    </div>\n\
<div class=\"line\">   <span class=\"comment\">// can&#39;t delete representations through an assembly reference.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyReference::deleteAllRepresentations()</div>\n\
<div class=\"line\">{  </div>\n\
<div class=\"line\">   <span class=\"comment\">// can&#39;t delete representations through an assembly reference.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyReference::getRepNamespace()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> repNamespaceStr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> repNamespacePlug(thisMObject(), aRepNamespace);</div>\n\
<div class=\"line\">    repNamespacePlug.getValue(repNamespaceStr);</div>\n\
<div class=\"line\">       </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !repNamespaceStr.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// defaults to the MPxAssembly implementation</span></div>\n\
<div class=\"line\">        repNamespaceStr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_assembly.html#a02d592bb931ae1052701478cea052740\">MPxAssembly::getRepNamespace</a>();</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"comment\">// update attribute if we&#39;re reading from it</span></div>\n\
<div class=\"line\">        repNamespacePlug.setValue(repNamespaceStr);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// This assembly does not support nodes in the </span></div>\n\
<div class=\"line\">   <span class=\"comment\">// rootNS. So we should never set the repNamespace</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// attribute to an empty string</span></div>\n\
<div class=\"line\">   assert ( repNamespaceStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> repNamespaceStr;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyReference::updateRepNamespace( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repNamespace )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> repNamespacePlug(thisMObject(), aRepNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> repCurrentNamespaceStr;</div>\n\
<div class=\"line\">   repNamespacePlug.getValue(repCurrentNamespaceStr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordtype\">bool</span> prevVal = fUpdatingRepNamespace;</div>\n\
<div class=\"line\">   fUpdatingRepNamespace = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// update attribute </span></div>\n\
<div class=\"line\">   repNamespacePlug.setValue(repNamespace);</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">   fUpdatingRepNamespace = prevVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AssemblyReference::supportsEdits()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Opt into Maya&#39;s edit tracking system</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";