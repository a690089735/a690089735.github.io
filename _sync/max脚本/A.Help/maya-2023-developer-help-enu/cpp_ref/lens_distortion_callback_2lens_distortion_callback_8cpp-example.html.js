var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: lensDistortionCallback/lensDistortionCallback.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'lens_distortion_callback_2lens_distortion_callback_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: lensDistortionCallback/lensDistortionCallback.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">lensDistortionCallback/lensDistortionCallback.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the command &quot;lensDistortionCallback&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in demonstrates how to enable multiple draw-passes with the M3dView</span></div>\n\
<div class=\"line\"><span class=\"comment\">// class and add the pre and post rendering callbacks to each pass by the MUiMessage class.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// A distortion effect is added to the model view for previewing lens distortion</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that uses decomposed radial and tangential distortion coefficient.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Some essential attributes must first be added to the camera node. The following is</span></div>\n\
<div class=\"line\"><span class=\"comment\">// a sample MEL script that adds essential attributes to a perspective camera and sets</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the example values to attributes that affect the lens distortion result.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  select perspShape;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  //  Add extra attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at bool -ln &quot;previewLensDistortion&quot; -sn &quot;pld&quot; -dv 1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at long -ln &quot;previewResolutionX&quot; -sn &quot;prx&quot; -dv 40 -min 1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at long -ln &quot;previewResolutionY&quot; -sn &quot;pry&quot; -dv 30 -min 1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at long -ln &quot;renderResolutionX&quot; -sn &quot;rrx&quot; -dv 1920 -min 1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at long -ln &quot;renderResolutionY&quot; -sn &quot;rry&quot; -dv 1080 -min 1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at double -ln &quot;principalPointX&quot; -sn &quot;ppx&quot; -dv 963.893;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at double -ln &quot;principalPointY&quot; -sn &quot;ppy&quot; -dv 541.666;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at double -ln &quot;radialDistortionCoef1&quot; -sn &quot;rdc1&quot; -dv 0.00677651;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at double -ln &quot;radialDistortionCoef2&quot; -sn &quot;rdc2&quot; -dv -0.000162221;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at double -ln &quot;tangentialDistortionCoef1&quot; -sn &quot;tdc1&quot; -dv -0.0005091;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at double -ln &quot;tangentialDistortionCoef2&quot; -sn &quot;tdc2&quot; -dv -5.55102e-005;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at double -ln &quot;scaleFactor&quot; -sn &quot;sf&quot; -dv 1.0;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  addAttr -at bool -ln &quot;drawWireframe&quot; -sn &quot;sdw&quot; -dv 1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Setup camera focal/film attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .focalLength 4.674975;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .horizontalFilmAperture 0.3774;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .verticalFilmAperture 0.2122;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .horizontalFilmOffset -0.00132157;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .verticalFilmOffset 0.000327253;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .filmFit 2;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Setup camera display attributes.(Additional)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .displayResolution 1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr .overscan 1.5;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Setup rendering resolution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr defaultResolution.width 1920;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr defaultResolution.height 1080;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr defaultResolution.deviceAspectRatio 1.777778;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The following is a sample MEL command for using this plug-in once it is loaded:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  lensDistortionCallback `getPanel -withFocus`;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Note that the screen does not refresh right after the plug-in executes. You must refresh the screen with a tumbling camera.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;lensDistortionCallback.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCamera.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MColor.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGLdefinitions.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kFloatEpsilon       1.0e-10</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kRemoveFlag         &quot;-r&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kRemoveFlagLong     &quot;-remove&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kExistFlag          &quot;-ex&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kExistFlagLong      &quot;-exists&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListFlag           &quot;-l&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListFlagLong       &quot;-list&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">lensDistortionCompute* lensDistortionCompute::currentLensDistortionCompute[MAX_MODEL_PANEL];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// lensDistortionCallback implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">lensDistortionCallback::lensDistortionCallback()</div>\n\
<div class=\"line\">:</div>\n\
<div class=\"line\">    mRemoveOperation( false )</div>\n\
<div class=\"line\">,   mExistOperation( false )</div>\n\
<div class=\"line\">,   mListOperation( false )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mPanelName = <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">lensDistortionCallback::~lensDistortionCallback()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* lensDistortionCallback::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">void</span> *) (<span class=\"keyword\">new</span> lensDistortionCallback);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> lensDistortionCallback::newSyntax()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> syntax;</div>\n\
<div class=\"line\">    syntax.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kRemoveFlag,    kRemoveFlagLong,    <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kExistFlag,     kExistFlagLong,     <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kListFlag,      kListFlagLong );</div>\n\
<div class=\"line\">    syntax.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a1d306e0ce61954dd7cbdcd0e74a905a6\">addArg</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> syntax;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> lensDistortionCallback::parseArgs(<span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         status;</div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html\">MArgDatabase</a>    argDatabase( syntax(), args, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( status != MS::kSuccess ) <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( args.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() == 1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> thisArg = args.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#ad24ff3826e4df513b55e1a0ecb0a665b\">asString</a>( 0, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( thisArg == kListFlag || thisArg == kListFlagLong )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mListOperation = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Adding callback to given panel </span></div>\n\
<div class=\"line\">            mRemoveOperation = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            mExistOperation  = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            mPanelName = argDatabase.commandArgumentString( 0, &amp;status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() == 2 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> thisArg = args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#ad24ff3826e4df513b55e1a0ecb0a665b\">asString</a>( 0, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( thisArg == kRemoveFlag || thisArg == kRemoveFlagLong )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Removing callback from given panel </span></div>\n\
<div class=\"line\">            mRemoveOperation = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            mPanelName = argDatabase.flagArgumentString( kRemoveFlag, 0, &amp;status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( thisArg == kExistFlag || thisArg == kExistFlagLong )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mExistOperation = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            mPanelName = argDatabase.flagArgumentString( kExistFlag, 0, &amp;status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> lensDistortionCallback::doIt(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Parse argument</span></div>\n\
<div class=\"line\">    status = parseArgs(args);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess){    </div>\n\
<div class=\"line\">        displayError( <span class=\"stringliteral\">&quot;Argument should have a panel name and proper option&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Process list operation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mListOperation )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> panelNames;</div>\n\
<div class=\"line\">        status =  lensDistortionCompute::listCallback( panelNames );</div>\n\
<div class=\"line\">        setResult ( panelNames );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if the given model panel name is valid or invalid.</span></div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view;</div>\n\
<div class=\"line\">    status = <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a> ( mPanelName,  view );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess){    </div>\n\
<div class=\"line\">        displayError( <span class=\"stringliteral\">&quot;Specified model panel is not valid!&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Process add/remove/query existence operation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mExistOperation )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Query existence of callback</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( lensDistortionCompute::panelHasCallback( mPanelName ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Callback is found</span></div>\n\
<div class=\"line\">            setResult( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Callback is not found</span></div>\n\
<div class=\"line\">            setResult( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( mRemoveOperation )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove an instance of lensDistortionCompute</span></div>\n\
<div class=\"line\">        status = lensDistortionCompute::removeCallbackFromPanel( mPanelName );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>  </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Add an instance of lensDistortionCompute</span></div>\n\
<div class=\"line\">        status = lensDistortionCompute::addCallbackToPanel( mPanelName );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status == MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setResult( mPanelName );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// lensDistortionCompute implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">lensDistortionCompute::lensDistortionCompute(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;panelName)</div>\n\
<div class=\"line\">:</div>\n\
<div class=\"line\">    mTextureIndex( 0 )</div>\n\
<div class=\"line\">,   mTextureWidth( 0 )</div>\n\
<div class=\"line\">,   mTextureHeight( 0 )</div>\n\
<div class=\"line\">,   mMultipleDrawPassCount( 1 )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set panel name and operator for post rendering</span></div>\n\
<div class=\"line\">    mPanelName = panelName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the callbacks</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    mDeleteId</div>\n\
<div class=\"line\">        = <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#af55a37b0bf511201f58c91b5f64ebea7\">MUiMessage::add3dViewDestroyMsgCallback</a>(panelName,</div>\n\
<div class=\"line\">                                           &amp;lensDistortionCompute::deleteCB,</div>\n\
<div class=\"line\">                                           (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mDeleteId == 0)</div>\n\
<div class=\"line\">        <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view deletion callback to panel &quot;</span>) + panelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mPreRenderId</div>\n\
<div class=\"line\">        = <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#a896e7f0af2318e5a7145e189cb235912\">MUiMessage::add3dViewPreRenderMsgCallback</a>(panelName,</div>\n\
<div class=\"line\">                                          &amp;lensDistortionCompute::preRenderCB,</div>\n\
<div class=\"line\">                                          (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPreRenderId == 0)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view prerender callback to panel &quot;</span>) + panelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mPostRenderId</div>\n\
<div class=\"line\">        = <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#af33879a7a29a0853f35ede9de091beb1\">MUiMessage::add3dViewPostRenderMsgCallback</a>(panelName,</div>\n\
<div class=\"line\">                                           &amp;lensDistortionCompute::postRenderCB,</div>\n\
<div class=\"line\">                                           (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPostRenderId == 0)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view postrender callback to panel &quot;</span>) + panelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mPreMultipleDrawPassId  </div>\n\
<div class=\"line\">        = <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#a92d313b3f24215cac37a1a746fbe8dd1\">MUiMessage::add3dViewPreMultipleDrawPassMsgCallback</a>(panelName,    </div>\n\
<div class=\"line\">                                        &amp;lensDistortionCompute::preMultipleDrawPassCB,  (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPreMultipleDrawPassId == 0)    </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view pre-multiple draw pass callback to panel &quot;</span>) + panelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mPostMultipleDrawPassId </div>\n\
<div class=\"line\">        = <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#ad2f007e72a3ede2e25d4b956629a6fa7\">MUiMessage::add3dViewPostMultipleDrawPassMsgCallback</a>(panelName, </div>\n\
<div class=\"line\">                                        &amp;lensDistortionCompute::postMultipleDrawPassCB, (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPostMultipleDrawPassId == 0)   </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view post-multiple draw pass callback to panel &quot;</span>) + panelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">lensDistortionCompute::~lensDistortionCompute()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear all callback that associated with this model panel.</span></div>\n\
<div class=\"line\">    clearCallbacks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Reset any global pointer pointing to this compute</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;MAX_MODEL_PANEL; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (currentLensDistortionCompute[i] &amp;&amp; </div>\n\
<div class=\"line\">            (currentLensDistortionCompute[i])-&gt;getPanelName() == mPanelName)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentLensDistortionCompute[i] = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Delete GL texture if it is created.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mTextureIndex )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Make rendering context current.</span></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html\">MHardwareRenderer</a> *pRenderer = <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html#a93fef222f7278c123e8df750f7f0ea5b\">MHardwareRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pRenderer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; backEnd = pRenderer-&gt;backEndString();</div>\n\
<div class=\"line\">            pRenderer-&gt;makeResourceContextCurrent( backEnd );</div>\n\
<div class=\"line\">            _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glDeleteTextures( 1, &amp;mTextureIndex );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;Rendering context is not current! Memory leak will occurs.&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Add an instance of lensDistortionCompute to given panal </span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> lensDistortionCompute::addCallbackToPanel( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; pPanelName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if the panel is already created.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if callback list has an empty entry.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>    found       = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>     emptyIndex  = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; MAX_MODEL_PANEL; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( currentLensDistortionCompute[i] )</div>\n\
<div class=\"line\">        { </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( currentLensDistortionCompute[i]-&gt;getPanelName() == pPanelName )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                found = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            emptyIndex = i;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( found )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// The panel already has a callback</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Specified model panel already has a callback!&quot;</span>);</div>\n\
<div class=\"line\">        status = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( emptyIndex == -1 ) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Callback list doesn&#39;t have empty entry.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Any panel will not be added.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Maximum number of callbacks are registered. Delete another callback&quot;</span>);</div>\n\
<div class=\"line\">        status = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// The panel doesn&#39;t has a callback and callback list has empty entry.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add an instance of lensDistortionCompute.</span></div>\n\
<div class=\"line\">        currentLensDistortionCompute[emptyIndex] = <span class=\"keyword\">new</span> lensDistortionCompute( pPanelName );</div>\n\
<div class=\"line\">        status = MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Remove an instance of lensDistortionCompute from panel</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> </div>\n\
<div class=\"line\">lensDistortionCompute::removeCallbackFromPanel( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; pPanelName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if the callback which associated with given panel is already created.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; MAX_MODEL_PANEL; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( currentLensDistortionCompute[i] &amp;&amp; </div>\n\
<div class=\"line\">             currentLensDistortionCompute[i]-&gt;getPanelName() == pPanelName )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">// Remove an instance of lensDistortionCompute</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> currentLensDistortionCompute[i];</div>\n\
<div class=\"line\">            currentLensDistortionCompute[i] = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The panel doesn&#39;t have a callback.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Specified model panel doesn&#39;t have a callback!&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Query existence of instance of lensDistortionCompute for panel</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> </div>\n\
<div class=\"line\">lensDistortionCompute::panelHasCallback( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; pPanelName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Does this panel have the callback?</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; MAX_MODEL_PANEL; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( currentLensDistortionCompute[i] &amp;&amp; </div>\n\
<div class=\"line\">            (currentLensDistortionCompute[i])-&gt;getPanelName() == pPanelName )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Panel is found.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Panel is not found</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// List names of the panels which have a callback attached</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     </div>\n\
<div class=\"line\">lensDistortionCompute::listCallback( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; pPanelNames )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    pPanelNames.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; MAX_MODEL_PANEL; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( currentLensDistortionCompute[i])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            pPanelNames.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( (currentLensDistortionCompute[i])-&gt;getPanelName() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lensDistortionCompute::clearCallbacks()</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mDeleteId)</div>\n\
<div class=\"line\">        <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mDeleteId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPreRenderId)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mPreRenderId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPostRenderId)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mPostRenderId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPreMultipleDrawPassId)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( mPreMultipleDrawPassId );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPostMultipleDrawPassId)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( mPostMultipleDrawPassId );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Called when associated model panel deleted</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lensDistortionCompute::deleteCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    lensDistortionCompute *thisCompute = (lensDistortionCompute *) data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if this panel name is renamed.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( panelName != thisCompute-&gt;mPanelName )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;lensDistortionCallback does not support renaming of panels. Callback removed.&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// Delete callback.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> thisCompute;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lensDistortionCompute::preRenderCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get a pointer to current callback</span></div>\n\
<div class=\"line\">    lensDistortionCompute *thisCompute = (lensDistortionCompute *) data;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!thisCompute)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(panelName, thisCompute-&gt;mCurrentView );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Store current object display status and multiple draw pass count.</span></div>\n\
<div class=\"line\">    thisCompute-&gt;mObjectDisplayState = thisCompute-&gt;mCurrentView.objectDisplay();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    thisCompute-&gt;mMultipleDrawPassCount = thisCompute-&gt;mCurrentView.multipleDrawPassCount();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Enable multi pass draw;</span></div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.setMultipleDrawEnable( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.setMultipleDrawPassCount( 2 );</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lensDistortionCompute::postRenderCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">    lensDistortionCompute *thisCompute = (lensDistortionCompute *) data;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!thisCompute)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw </span></div>\n\
<div class=\"line\">    thisCompute-&gt;draw();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    <span class=\"comment\">// Disable multi pass draw.</span></div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.setMultipleDrawEnable( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore object display state and multiple draw pass count.</span></div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.setObjectDisplay( thisCompute-&gt;mObjectDisplayState );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.setMultipleDrawPassCount( thisCompute-&gt;mMultipleDrawPassCount );</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">lensDistortionCompute::preMultipleDrawPassCB( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; pPanelName, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passIndex, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    lensDistortionCompute *thisCompute = (lensDistortionCompute *) data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    <span class=\"comment\">// Update view</span></div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.beginGL();</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> currentBackgroundColor = thisCompute-&gt;mCurrentView.backgroundColor();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( passIndex == 0 <span class=\"comment\">/*Drawing other than image plane pass*/</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  Clear background with alpha = 0.0 for blending.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Since a specific blending function is used to blend the lens distorted models with image plane, </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  transparent objects are not blend with properly. </span></div>\n\
<div class=\"line\">        glClearColor( currentBackgroundColor.r, currentBackgroundColor.g, currentBackgroundColor.b, 0.0 ); </div>\n\
<div class=\"line\">        glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Hide image plane.</span></div>\n\
<div class=\"line\">        thisCompute-&gt;mCurrentView.setObjectDisplay( thisCompute-&gt;mObjectDisplayState &amp; ~<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a169efed3046f92a7f5159d4e67207c31a30b228c407444d40373bb769d7b856e1\">M3dView::kDisplayImagePlane</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"comment\">/* Drawing image plane pass */</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Restore clear color.</span></div>\n\
<div class=\"line\">        glClearColor( currentBackgroundColor.r, currentBackgroundColor.g, currentBackgroundColor.b,  currentBackgroundColor.a );</div>\n\
<div class=\"line\">        glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Hide other than image plane.</span></div>\n\
<div class=\"line\">        thisCompute-&gt;mCurrentView.setObjectDisplay( <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a169efed3046f92a7f5159d4e67207c31a4b3d0e34ff5537f07f17cec6d600c983\">M3dView::kDisplayCameras</a> | <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a169efed3046f92a7f5159d4e67207c31a30b228c407444d40373bb769d7b856e1\">M3dView::kDisplayImagePlane</a> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.endGL();</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">lensDistortionCompute::postMultipleDrawPassCB( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; pPanelName, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passIndex, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    lensDistortionCompute *thisCompute = (lensDistortionCompute *) data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.beginGL();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( passIndex == 0 <span class=\"comment\">/*Drawing other than image plane pass*/</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Store rendering result to mPrimaryBuffer for post-render callback.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = thisCompute-&gt;mCurrentView.readColorBuffer( thisCompute-&gt;mPrimaryBuffer, <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status != MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Storing rendering result to buffer failed because of memory shortage. Please delete unused callbacks or decrease panel size.&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"comment\">/* Drawing image plane pass */</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    thisCompute-&gt;mCurrentView.endGL();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">lensDistortionCompute::textureUpdate()</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, height;</div>\n\
<div class=\"line\">    mPrimaryBuffer.getSize( width, height );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Rebuild gl texture if model panel size is changed.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mTextureWidth != width || mTextureHeight != height )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( mTextureIndex )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            glDeleteTextures( 1, &amp;mTextureIndex );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        mTextureIndex = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!mTextureIndex ){</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        glGenTextures( 1, &amp;mTextureIndex );</div>\n\
<div class=\"line\">        glBindTexture( GL_TEXTURE_2D, mTextureIndex );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glTexParameteri ( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, MGL_CLAMP_TO_EDGE );    <span class=\"comment\">// Refreshed texture should not be wrapped.</span></div>\n\
<div class=\"line\">        glTexParameteri ( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, MGL_CLAMP_TO_EDGE );    <span class=\"comment\">// Refreshed texture should not be wrapped.</span></div>\n\
<div class=\"line\">        glTexParameteri ( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );</div>\n\
<div class=\"line\">        glTexParameteri ( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glTexImage2D( </div>\n\
<div class=\"line\">            GL_TEXTURE_2D   <span class=\"comment\">// Target</span></div>\n\
<div class=\"line\">            , 0             <span class=\"comment\">// Level</span></div>\n\
<div class=\"line\">            , GL_RGBA       <span class=\"comment\">// Inernal Format</span></div>\n\
<div class=\"line\">            , width         <span class=\"comment\">// Width</span></div>\n\
<div class=\"line\">            , height        <span class=\"comment\">// Height</span></div>\n\
<div class=\"line\">            , 0             <span class=\"comment\">// Border</span></div>\n\
<div class=\"line\">            , GL_RGBA       <span class=\"comment\">// Format</span></div>\n\
<div class=\"line\">            , GL_UNSIGNED_BYTE <span class=\"comment\">// Type</span></div>\n\
<div class=\"line\">            , mPrimaryBuffer.pixels() <span class=\"comment\">// Data</span></div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Save texture size to check model panel size change.</span></div>\n\
<div class=\"line\">        mTextureWidth  = width;</div>\n\
<div class=\"line\">        mTextureHeight = height;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Copy color buffer to generated texture object.</span></div>\n\
<div class=\"line\">        glBindTexture( GL_TEXTURE_2D, mTextureIndex );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glTexSubImage2D(</div>\n\
<div class=\"line\">            GL_TEXTURE_2D   <span class=\"comment\">// Target</span></div>\n\
<div class=\"line\">            , 0             <span class=\"comment\">// Level</span></div>\n\
<div class=\"line\">            , 0         <span class=\"comment\">// X offset</span></div>\n\
<div class=\"line\">            , 0         <span class=\"comment\">// Y offset</span></div>\n\
<div class=\"line\">            , width         <span class=\"comment\">// Width</span></div>\n\
<div class=\"line\">            , height    <span class=\"comment\">// Height</span></div>\n\
<div class=\"line\">            , GL_RGBA       <span class=\"comment\">// Format</span></div>\n\
<div class=\"line\">            , GL_UNSIGNED_BYTE <span class=\"comment\">// Type</span></div>\n\
<div class=\"line\">            , mPrimaryBuffer.pixels() <span class=\"comment\">// Data</span></div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">lensDistortionCompute::draw()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    textureUpdate();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!mTextureIndex)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Texture is not initialized correctly. retunr.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;Texture is not initialized correctly&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get lens distortion related param</span></div>\n\
<div class=\"line\">    <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> camera;</div>\n\
<div class=\"line\">    mCurrentView.getCamera( camera );</div>\n\
<div class=\"line\">    <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> cameraNode = camera.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> width = mCurrentView.portWidth();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> height = mCurrentView.portHeight();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>    previewResolutionX       = getIntValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;previewResolutionX&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>    previewResolutionY       = getIntValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;previewResolutionY&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> renderResolutionX        = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;renderResolutionX&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> renderResolutionY        = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;renderResolutionY&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> principalPointX          = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;principalPointX&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> principalPointY          = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;principalPointY&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> kc1                      = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;radialDistortionCoef1&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> kc2                      = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;radialDistortionCoef2&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> kc3                      = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;tangentialDistortionCoef1&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> kc4                      = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;tangentialDistortionCoef2&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> horizontalFilmAperture   = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;horizontalFilmAperture&quot;</span> )  * 25.4;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> verticalFilmAperture     = getDoubleValueFromCameraAttr( cameraNode,<span class=\"stringliteral\">&quot;verticalFilmAperture&quot;</span> ) * 25.4;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>   drawWireframe            = getBoolValueFromCameraAttr( cameraNode, <span class=\"stringliteral\">&quot;drawWireframe&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Begin OpenGL </span></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    mCurrentView.beginGL();</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Push current matrix and load inverse projection matrix</span></div>\n\
<div class=\"line\">    <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> projMatrix;</div>\n\
<div class=\"line\">    mCurrentView.projectionMatrix(projMatrix);</div>\n\
<div class=\"line\">    glPushMatrix();</div>\n\
<div class=\"line\">    glLoadMatrixd( (<span class=\"keyword\">const</span> GLdouble *)projMatrix.inverse().matrix );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Store all OpenGL state</span></div>\n\
<div class=\"line\">    glPushAttrib( GL_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw lens distortion plane with blending</span></div>\n\
<div class=\"line\">    glEnable( GL_BLEND );</div>\n\
<div class=\"line\">    glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );</div>\n\
<div class=\"line\">    glEnable( GL_TEXTURE_2D );</div>\n\
<div class=\"line\">    glTexEnvf( GL_TEXTURE_ENV,  GL_TEXTURE_ENV_MODE, GL_REPLACE );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Enable polygon offset fill when wireframe is on.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( drawWireframe )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glEnable( GL_POLYGON_OFFSET_FILL );</div>\n\
<div class=\"line\">        glPolygonOffset( 0.95f, 1.0f ); </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    drawLensDistortionPlane( </div>\n\
<div class=\"line\">        GL_QUADS</div>\n\
<div class=\"line\">        ,renderResolutionX, renderResolutionY</div>\n\
<div class=\"line\">        ,previewResolutionX, previewResolutionY </div>\n\
<div class=\"line\">        , width, height</div>\n\
<div class=\"line\">        , principalPointX, principalPointY</div>\n\
<div class=\"line\">        , kc1, kc2, kc3, kc4</div>\n\
<div class=\"line\">        , horizontalFilmAperture, verticalFilmAperture</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glDisable( GL_TEXTURE_2D );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw lens distortion plane with wireframe</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( drawWireframe )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glDisable( GL_POLYGON_OFFSET_FILL );</div>\n\
<div class=\"line\">        glColor3f( 0.0f, 0.0f, 0.0f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        drawLensDistortionPlane( </div>\n\
<div class=\"line\">            GL_LINE_LOOP</div>\n\
<div class=\"line\">            , renderResolutionX, renderResolutionY</div>\n\
<div class=\"line\">            , previewResolutionX, previewResolutionY</div>\n\
<div class=\"line\">            , width, height</div>\n\
<div class=\"line\">            , principalPointX, principalPointY</div>\n\
<div class=\"line\">            , kc1, kc2, kc3, kc4</div>\n\
<div class=\"line\">            , horizontalFilmAperture, verticalFilmAperture</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore OpenGL state</span></div>\n\
<div class=\"line\">    glPopAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore matrix</span></div>\n\
<div class=\"line\">    glPopMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// End OpenGL </span></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    mCurrentView.endGL();</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">lensDistortionCompute::drawLensDistortionPlane(</div>\n\
<div class=\"line\">    GLenum drawMethod</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> renderResolutionX</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> renderResolutionY</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">int</span>    previewResolutionX</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">int</span>    previewResolutionY</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> width</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> height</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> principalPointX</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> principalPointY</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> kc1, <span class=\"keywordtype\">double</span> kc2, <span class=\"keywordtype\">double</span> kc3, <span class=\"keywordtype\">double</span> kc4</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> horizontalFilmAperture</div>\n\
<div class=\"line\">    , <span class=\"keywordtype\">double</span> verticalFilmAperture)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( previewResolutionX &lt; 1 || previewResolutionY &lt; 1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;The previewResolutionX and previewResolutionY has to be more than 1.&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xSub                     = 1.0 / (double)previewResolutionX;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> ySub                     = 1.0 / (double)previewResolutionY;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; previewResolutionX ; i ++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> j = 0; j &lt; previewResolutionY; j++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Draw rectangle with applying lens distortion</span></div>\n\
<div class=\"line\">            glBegin( drawMethod );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> x, y;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> u, v;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">// P0 </span></div>\n\
<div class=\"line\">            x = u =  i * xSub;</div>\n\
<div class=\"line\">            y = v =  j * ySub;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            applyLensDistortion( </div>\n\
<div class=\"line\">                x, y </div>\n\
<div class=\"line\">                ,renderResolutionX, renderResolutionY</div>\n\
<div class=\"line\">                , width, height</div>\n\
<div class=\"line\">                , principalPointX, principalPointY</div>\n\
<div class=\"line\">                , kc1, kc2, kc3, kc4</div>\n\
<div class=\"line\">                , horizontalFilmAperture, verticalFilmAperture </div>\n\
<div class=\"line\">                );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glTexCoord2d(  u, v );</div>\n\
<div class=\"line\">            glVertex2d(  x, y );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// P1 </span></div>\n\
<div class=\"line\">            x = u =  i * xSub;</div>\n\
<div class=\"line\">            y = v =  (j + 1) * ySub;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            applyLensDistortion( </div>\n\
<div class=\"line\">                x, y </div>\n\
<div class=\"line\">                ,renderResolutionX, renderResolutionY</div>\n\
<div class=\"line\">                , width, height</div>\n\
<div class=\"line\">                , principalPointX, principalPointY</div>\n\
<div class=\"line\">                , kc1, kc2, kc3, kc4</div>\n\
<div class=\"line\">                , horizontalFilmAperture, verticalFilmAperture </div>\n\
<div class=\"line\">                );      </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glTexCoord2d(  u, v );</div>\n\
<div class=\"line\">            glVertex2d(  x, y );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// P2</span></div>\n\
<div class=\"line\">            x = u =  (i + 1) * xSub;</div>\n\
<div class=\"line\">            y = v =  (j + 1) * ySub;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            applyLensDistortion( </div>\n\
<div class=\"line\">                x, y </div>\n\
<div class=\"line\">                ,renderResolutionX, renderResolutionY</div>\n\
<div class=\"line\">                , width, height</div>\n\
<div class=\"line\">                , principalPointX, principalPointY</div>\n\
<div class=\"line\">                , kc1, kc2, kc3, kc4</div>\n\
<div class=\"line\">                , horizontalFilmAperture, verticalFilmAperture </div>\n\
<div class=\"line\">                );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glTexCoord2d(  u, v );</div>\n\
<div class=\"line\">            glVertex2d(  x, y );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// P3</span></div>\n\
<div class=\"line\">            x = u =  (i + 1) * xSub;</div>\n\
<div class=\"line\">            y = v =  j * ySub;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            applyLensDistortion( </div>\n\
<div class=\"line\">                x, y </div>\n\
<div class=\"line\">                ,renderResolutionX, renderResolutionY</div>\n\
<div class=\"line\">                , width, height</div>\n\
<div class=\"line\">                , principalPointX, principalPointY</div>\n\
<div class=\"line\">                , kc1, kc2, kc3, kc4</div>\n\
<div class=\"line\">                , horizontalFilmAperture, verticalFilmAperture </div>\n\
<div class=\"line\">                );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">            glTexCoord2d(  u, v );</div>\n\
<div class=\"line\">            glVertex2d(  x, y );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Apply lens distortion to given x/y positions which are normalized in screen space</span></div>\n\
<div class=\"line\"><span class=\"comment\">// with most commonly used lens distortion technique which uses decomposed radial</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and tangential distortion coefficient.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Since this using lens model uses radial and tangential distortion coeffs which </span></div>\n\
<div class=\"line\"><span class=\"comment\">// are calibrated in millimeter unit space, positions must be converted from normalized </span></div>\n\
<div class=\"line\"><span class=\"comment\">// screen space to physical millimeter space to get correct result.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// See &quot;Manual of Photogrammetry, fourth ed., C.C. Slama, ed., </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Falls Church, Va.: Am. Soc. Photogramettry, 1980&quot; for more details on using lens model.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  [Apply lens distortion]</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Xn, Yn  :   Current position                    ( in normalized screen space )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Xd, Yd  :   Lens distortion applied posittion   ( in normalized screen space )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  X0, Y0  :   Center of image                     ( in pixel space )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rW, rH  :   Resolution width/ height of image   ( in pixel space )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              Used for offsetting center of image </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  fH, fV  :   Horizontal/vertical film aperture   ( in millimeter )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              Used for converting from normalized screen space to millimeter space</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  kc1     :   Radial Distortion coeff 1           ( in millimeter * 10^-2 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  kc2     :   Radial Distortion coeff 2           ( in millimeter * 10^-4 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  kc3     :   Tangential Distortion coeff 1       ( in millimeter * 10^-1 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  kc4     :   Tangential Distortion coeff 2       ( in millimeter * 10^-1 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              These coeffs should be calibrated in millimeter unit space</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Offset center </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Xn&#39; = Xn - X0/rW    Yn&#39; = Yn - Y0/rH</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Convert from normlized screen space to physical space ( millimeter )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Xn&#39;&#39;, Yn&#39;&#39; : Current position in physical space ( millimeter )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Xn&#39;&#39; = Xn&#39; * fH     Yn&#39;&#39; = Yn&#39; * fW</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Apply lens distortion model</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  RR = Xn&#39;&#39;^2 + Yn&#39;&#39;^2 </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Q = 1 / (4*kc1*RR + 6*kc2*rn^4 + 8*kc3*Yn&#39;&#39; + 8*kc4*Xn&#39;&#39; + 1 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Xd&#39;&#39;= Xn&#39;&#39; - Q * ( Xn&#39;&#39; *( kc1 * RR + kc2 * RR^2) + 2*kc3 * Xn&#39;&#39; * Yn&#39;&#39; + kc4 * ( RR + 2*Xn&#39;&#39;^2) )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Yd&#39;&#39;= Yn&#39;&#39; - Q * ( Yn&#39;&#39; *( kc1 * RR + kc2 * RR^2) + kc3 * ( RR+ 2*Yn&#39;&#39;^2) + 2 * kc4 * Xn&#39;&#39; * Yn&#39;&#39; ) </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Convert from physical space ( millimeter ) to normalized screen space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Xd&#39; = Xd&#39;&#39; / fH     Yd&#39; = Yd&#39;&#39; / hW</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Restore center offset</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Xd =  Xd&#39; + X0/rW   Yd = Yd&#39; + Y0/rH</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">lensDistortionCompute::applyLensDistortion( </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>&amp; Xd</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span>&amp; Yd</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> renderResolutionX</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> renderResolutionY</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> width</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> height</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> principalPointX</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> principalPointY</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> kc1, <span class=\"keywordtype\">double</span> kc2, <span class=\"keywordtype\">double</span> kc3, <span class=\"keywordtype\">double</span> kc4</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> horizontalFilmAperture</div>\n\
<div class=\"line\">        , <span class=\"keywordtype\">double</span> verticalFilmAperture</div>\n\
<div class=\"line\">        )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Xn = Xd ;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Yn = ( 1.0 - Yd ) ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Determine center offset by given principal point and normalize position.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Principal point is calibrated &quot;center of lens&quot;.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> centerOffsetX = principalPointX / renderResolutionX;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> centerOffsetY = principalPointY / renderResolutionY;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Convert physical space (millimeter).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Assume image and film are fitted perfectly. </span></div>\n\
<div class=\"line\">    Xn = (Xn - centerOffsetX ) * (horizontalFilmAperture );</div>\n\
<div class=\"line\">    Yn = (Yn - centerOffsetY ) * (verticalFilmAperture) ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Apply generic pinhole camera model </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fabs( kc1 ) &lt; kFloatEpsilon &amp;&amp;</div>\n\
<div class=\"line\">        fabs( kc2 )  &lt; kFloatEpsilon &amp;&amp;</div>\n\
<div class=\"line\">        fabs( kc3 )  &lt; kFloatEpsilon &amp;&amp;</div>\n\
<div class=\"line\">        fabs( kc4 )  &lt; kFloatEpsilon </div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Normalize it </span></div>\n\
<div class=\"line\">        Xd = Xd * 2.0 - 1.0;</div>\n\
<div class=\"line\">        Yd  = Yd * 2.0 - 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Apply lens distortion formula</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> RR = (Xn * Xn) + (Yn * Yn);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Q = 1 / ( (4 * kc1 * RR) + (6 * kc2 * RR*RR) + (8 * kc3 * Yn) + (8 * kc4 * Xn) + 1 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Xd = Xn - Q * ( Xn * ( kc1 * RR + kc2 * RR * RR )   + 2 * kc3 * Xn * Yn +   kc4 * ( RR + 2 * Xn * Xn) );</div>\n\
<div class=\"line\">    Yd = Yn - Q * ( Yn * ( kc1 * RR + kc2 * RR * RR )   +kc3 * ( RR + 2 * Yn * Yn) +2 * kc4 * Xn * Yn );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Convert to normalized space</span></div>\n\
<div class=\"line\">    Xd = Xd / horizontalFilmAperture + centerOffsetX;</div>\n\
<div class=\"line\">    Yd = Yd / verticalFilmAperture + centerOffsetY ;</div>\n\
<div class=\"line\">    Yd = 1.0 - Yd;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Normalize it </span></div>\n\
<div class=\"line\">    Xd  = Xd * 2.0 - 1.0;</div>\n\
<div class=\"line\">    Yd  = Yd * 2.0 - 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get an int attribute value from associated node;</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> </div>\n\
<div class=\"line\">lensDistortionCompute::getIntValueFromCameraAttr( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> nodeFn ( node );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = nodeFn.findPlug( attrName, status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status == MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> plug.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;Please add :&quot;</span> + attrName + <span class=\"stringliteral\">&quot; attribute to &quot;</span> + nodeFn.name() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get a double attribute value from given node;</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> </div>\n\
<div class=\"line\">lensDistortionCompute::getDoubleValueFromCameraAttr(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> nodeFn ( node );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = nodeFn.findPlug( attrName, status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status == MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> plug.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;Please add :&quot;</span> + attrName + <span class=\"stringliteral\">&quot; attribute to &quot;</span> + nodeFn.name() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0.0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get a bool attribute value from given node;</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> </div>\n\
<div class=\"line\">lensDistortionCompute::getBoolValueFromCameraAttr(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> nodeFn ( node );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = nodeFn.findPlug( attrName, status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status == MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> plug.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;Please add :&quot;</span> + attrName + <span class=\"stringliteral\">&quot; attribute to &quot;</span> + nodeFn.name() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, <span class=\"stringliteral\">&quot;Autodesk&quot;</span>, <span class=\"stringliteral\">&quot;1.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register the command so we can actually do some work</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;MAX_MODEL_PANEL; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        lensDistortionCompute::currentLensDistortionCompute[i] = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerCommand(<span class=\"stringliteral\">&quot;lensDistortionCallback&quot;</span>,</div>\n\
<div class=\"line\">                                    lensDistortionCallback::creator,</div>\n\
<div class=\"line\">                                    lensDistortionCallback::newSyntax);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;registerCommand&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove all computation class + callbacks</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;MAX_MODEL_PANEL; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( lensDistortionCompute::currentLensDistortionCompute[i] )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> lensDistortionCompute::currentLensDistortionCompute[i];</div>\n\
<div class=\"line\">            lensDistortionCompute::currentLensDistortionCompute[i] = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Deregister the command</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plugin.deregisterCommand(<span class=\"stringliteral\">&quot;lensDistortionCallback&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;deregisterCommand&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";