var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheCmd.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_cmd_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheCmd.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheCmd.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _gpuCacheCmd_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _gpuCacheCmd_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgDatabase.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTime.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;set&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// gpuCache MEL command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Creates one or more cache files on disk to store attribute data for</span></div>\n\
<div class=\"line\"><span class=\"comment\">// a span of frames. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// FIXME: What is the proper way to document this command so that the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// documentation appears in the Maya On-line Help Documentation ?</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>Command : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> cmdSyntax();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>* creator();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Command();</div>\n\
<div class=\"line\">    ~Command() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> doIt( <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isUndoable() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasSyntax() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- types and enumerations ----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> Mode {</div>\n\
<div class=\"line\">        kCreate = 1,</div>\n\
<div class=\"line\">        kEdit   = 2,</div>\n\
<div class=\"line\">        kQuery  = 4</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- classes -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Helper class for holding command-line flags with one flag.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T, Mode Val<span class=\"keywordtype\">id</span>Modes&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>OptFlag</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        OptFlag() : fIsSet(<span class=\"keyword\">false</span>), fArg() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> parse(<span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html\">MArgDatabase</a>&amp; argDb, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name)</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Return Value:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Used to count number of flags set.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  1, if flag was set</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  0, otherwise</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">            fIsSet = argDb.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_parser.html#aa38abc6623182dacee0fcb4136e403b8\">isFlagSet</a>(name, &amp;status);</div>\n\
<div class=\"line\">            assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            status = argDb.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html#aa1c9ea1e3dfcbc32469b4a158b236337\">getFlagArgument</a>(name, 0, fArg);</div>\n\
<div class=\"line\">            fIsArgValid = status == MS::kSuccess;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fIsSet ? 1 : 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isModeValid(<span class=\"keyword\">const</span> Mode currentMode)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> !fIsSet || ((currentMode &amp; ValidModes) != 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isSet()<span class=\"keyword\">        const </span>{ <span class=\"keywordflow\">return</span> fIsSet; }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isArgValid()<span class=\"keyword\">   const </span>{ <span class=\"keywordflow\">return</span> fIsArgValid; }</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> T&amp; arg()<span class=\"keyword\">      const </span>{ <span class=\"keywordflow\">return</span> fArg; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> T&amp; arg(<span class=\"keyword\">const</span> T&amp; defValue)<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isSet()) {</div>\n\
<div class=\"line\">                assert(isArgValid());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> fArg;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> defValue;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>        fIsSet;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>        fIsArgValid;</div>\n\
<div class=\"line\">        T           fArg;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Specialization for flags with no argument.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span> &lt;Mode Val<span class=\"keywordtype\">id</span>Modes&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>OptFlag&lt;void, ValidModes&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        OptFlag() : fIsSet(<span class=\"keyword\">false</span>) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> parse(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html\">MArgDatabase</a>&amp; argDb, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name)</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Return Value:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Used to count number of flags set.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  1, if flag was set</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  0, otherwise</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">            fIsSet = argDb.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_parser.html#aa38abc6623182dacee0fcb4136e403b8\">isFlagSet</a>(name, &amp;status);</div>\n\
<div class=\"line\">            assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fIsSet ? 1 : 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isModeValid(<span class=\"keyword\">const</span> Mode currentMode)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> !fIsSet || ((currentMode &amp; ValidModes) != 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isSet()<span class=\"keyword\">        const </span>{ <span class=\"keywordflow\">return</span> fIsSet; }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>        fIsSet;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Structure for keeping xform bakers</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>SourceAndXformNode;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt;SourceAndXformNode&gt; SourceAndXformMapping;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> AddHierarchy(<span class=\"keyword\">const</span> <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp;                      dagPath,</div>\n\
<div class=\"line\">                      std::map&lt;std::string, int&gt;*          idMap,</div>\n\
<div class=\"line\">                      std::vector&lt;MObject&gt;*                sourceNodes,</div>\n\
<div class=\"line\">                      std::vector&lt;std::vector&lt;MDagPath&gt; &gt;* sourcePaths,</div>\n\
<div class=\"line\">                      std::vector&lt;MObject&gt;*                gpuCacheNodes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> AddSelected(<span class=\"keyword\">const</span> <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp;                objects,</div>\n\
<div class=\"line\">                     std::vector&lt;MObject&gt;*                sourceNodes,</div>\n\
<div class=\"line\">                     std::vector&lt;std::vector&lt;MDagPath&gt; &gt;* sourcePaths,</div>\n\
<div class=\"line\">                     std::vector&lt;MObject&gt;*                gpuCacheNodes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> doCreate(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp;                sourceNodes,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> std::vector&lt;std::vector&lt;MDagPath&gt; &gt;&amp; sourcePaths,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp; objects);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> doQuery( <span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> doEdit(  <span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> doBaking(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp;                sourceNodes,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> std::vector&lt;std::vector&lt;MDagPath&gt; &gt;&amp; sourcePaths,</div>\n\
<div class=\"line\">                     <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>                       startTime,</div>\n\
<div class=\"line\">                     <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>                       endTime,</div>\n\
<div class=\"line\">                     <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>                       simulationRate,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">int</span>                         samplingRate);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> showStats(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">                   <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> showGlobalStats(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> dumpHierarchy(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> dumpHierarchyToFile(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> showAnimTimeRange(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">                           <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a>&amp; result) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> refresh(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> refreshAll();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> refreshSettings();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> listFileEntries();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> listShapeEntries();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Command line arguments</span></div>\n\
<div class=\"line\">    Mode                                    fMode;</div>\n\
<div class=\"line\">    OptFlag&lt;MString, Mode(kCreate)&gt;         fDirectoryFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MString, Mode(kCreate)&gt;         fFileNameFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;bool,    Mode(kCreate)&gt;         fSaveMultipleFilesFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MString, Mode(kCreate)&gt;         fFilePrefixFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MString, Mode(kCreate)&gt;         fClashOptionFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fOptimizeFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;unsigned,Mode(kCreate)&gt;         fOptimizationThresholdFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MTime,   Mode(kCreate)&gt;         fStartTimeFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MTime,   Mode(kCreate)&gt;         fEndTimeFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MTime,   Mode(kCreate)&gt;         fSimulationRateFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;int,     Mode(kCreate)&gt;         fSampleMultiplierFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;int,     Mode(kCreate)&gt;         fCompressLevelFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MString, Mode(kCreate)&gt;         fDataFormatFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;MString, Mode(kCreate|kQuery)&gt;  fShowFailedFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fShowStats;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fShowGlobalStats;</div>\n\
<div class=\"line\">    OptFlag&lt;MString, Mode(kQuery)&gt;          fDumpHierarchy;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fAnimTimeRangeFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fGpuManufacturerFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fGpuModelFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fGpuDriverVersion;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fGpuMemorySize;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fAllDagObjectsFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kEdit)&gt;           fRefreshFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fRefreshAllFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fListFileEntriesFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fListShapeEntriesFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kEdit)&gt;           fRefreshSettingsFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kQuery)&gt;          fWaitForBackgroundReadingFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fWriteMaterials;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fUVsFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fOptimizeAnimationsForMotionBlurFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate)&gt;         fUseBaseTessellationFlag;</div>\n\
<div class=\"line\">    OptFlag&lt;void,    Mode(kCreate|kEdit)&gt;   fPromptFlag;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";