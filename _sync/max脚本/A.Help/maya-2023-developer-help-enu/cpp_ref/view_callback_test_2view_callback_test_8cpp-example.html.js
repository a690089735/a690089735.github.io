var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: viewCallbackTest/viewCallbackTest.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'view_callback_test_2view_callback_test_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: viewCallbackTest/viewCallbackTest.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">viewCallbackTest/viewCallbackTest.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the command &quot;viewCallbackTest&quot;. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in installs the pre and post rendering callbacks of MUiMessage.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// As a simple demonstration, a modelling view can be inverted or shaded based on depth.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In the depth shaded mode, the closer objects are lighter in color. Below is some</span></div>\n\
<div class=\"line\"><span class=\"comment\">// sample MEL for using this plug-in once it is loaded.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Invert mode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  viewCallbackTest -bo &quot;invert&quot; `getPanel -withFocus`;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // Depth mode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  viewCallbackTest -bo &quot;showDepth&quot; `getPanel -withFocus`;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Note that the screen does not refresh right after the plug-in execution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEventMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUiMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSyntax.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgDatabase.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/M3dView.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Static pointer to the current refreshCompute per panel so we can delete</span></div>\n\
<div class=\"line\"><span class=\"comment\">// it if the plug-in is unloaded.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>refreshCompute;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> refreshCompute* currentRefreshCompute[4] = { 0, 0, 0, 0 };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Possible buffer operations supported</span></div>\n\
<div class=\"line\"><span class=\"keyword\">enum</span> MbufferOperation {</div>\n\
<div class=\"line\">    kInvertColorBuffer,</div>\n\
<div class=\"line\">    kDrawDepthBuffer</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Command class declaration</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"keyword\">class </span>viewCallbackTest : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    viewCallbackTest();</div>\n\
<div class=\"line\">                    ~viewCallbackTest() <span class=\"keyword\">override</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#ade7d0a873cbe811d6eab464e695390a9\">doIt</a>( <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a>          newSyntax();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>*            creator();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 parseArgs( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Name of panel to monitor</span></div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                 mPanelName;</div>\n\
<div class=\"line\">    MbufferOperation        mBufferOperation;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Refresh computation class implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"keyword\">class </span>refreshCompute</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    refreshCompute(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;panelName, MbufferOperation bufferOperation);</div>\n\
<div class=\"line\">    ~refreshCompute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;panelName()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> mPanelName; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setPanelName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;panelName) { mPanelName = panelName; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MbufferOperation bufferOperation()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> mBufferOperation; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setBufferOperation(<span class=\"keyword\">const</span> MbufferOperation operation) { mBufferOperation = operation; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> clearCallbacks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>             deleteCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>             preRenderCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>             postRenderCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MCallbackId             mDeleteId;</div>\n\
<div class=\"line\">    MCallbackId             mPreRenderId;</div>\n\
<div class=\"line\">    MCallbackId             mPostRenderId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                 mPanelName;</div>\n\
<div class=\"line\">    MbufferOperation        mBufferOperation;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Command class implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">// Constructor</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">viewCallbackTest::viewCallbackTest()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mPanelName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\">    mBufferOperation = kInvertColorBuffer;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Destructor</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">viewCallbackTest::~viewCallbackTest()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Do nothing</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// creator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* viewCallbackTest::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">void</span> *) (<span class=\"keyword\">new</span> viewCallbackTest);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// newSyntax</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Buffer operation = -bo/-bufferOperation &lt;string&gt; = (invert | showDepth)</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *bufferOperationShortName = <span class=\"stringliteral\">&quot;-bo&quot;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *bufferOperationLongName = <span class=\"stringliteral\">&quot;-bufferOperation&quot;</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _NUMBER_BUFFER_OPERATIONS_ 2</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> bufferOperationStrings[_NUMBER_BUFFER_OPERATIONS_ ] = </div>\n\
<div class=\"line\">        { <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;invert&quot;</span>), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;showDepth&quot;</span>) };</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> MbufferOperation bufferOperations[_NUMBER_BUFFER_OPERATIONS_] = </div>\n\
<div class=\"line\">        { kInvertColorBuffer, kDrawDepthBuffer };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> viewCallbackTest::newSyntax()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> syntax;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(bufferOperationShortName, bufferOperationLongName, <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Name of model panel to monitor</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    syntax.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a1d306e0ce61954dd7cbdcd0e74a905a6\">addArg</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> syntax;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// parseArgs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> viewCallbackTest::parseArgs(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         status;</div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html\">MArgDatabase</a>    argData(syntax(), args);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Buffer operation argument variables</span></div>\n\
<div class=\"line\">    mBufferOperation = kInvertColorBuffer;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> operationString;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         arg;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; args.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>(); i++ ) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        arg = args.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#ad24ff3826e4df513b55e1a0ecb0a665b\">asString</a>( i, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status)              </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( arg == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(bufferOperationShortName) || arg == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(bufferOperationLongName) ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (i == args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>()-1) {</div>\n\
<div class=\"line\">                arg += <span class=\"stringliteral\">&quot;: must specify a buffer operation.&quot;</span>;</div>\n\
<div class=\"line\">                displayError(arg);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            i++;</div>\n\
<div class=\"line\">            args.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>(i, operationString );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> validOperation = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k=0; k&lt;_NUMBER_BUFFER_OPERATIONS_; k++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (bufferOperationStrings[i] == operationString)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mBufferOperation = bufferOperations[k];</div>\n\
<div class=\"line\">                    validOperation = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!validOperation)</div>\n\
<div class=\"line\">                status.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;Invalid operation specified. Using invert by default.&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Read off the panel name</span></div>\n\
<div class=\"line\">    status = argData.getCommandArgument(0, mPanelName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;No panel name specified as command argument&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// doIt</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> viewCallbackTest::doIt(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = parseArgs(args);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Only allow one computation per panel at this time.</span></div>\n\
<div class=\"line\">        refreshCompute *foundComputePtr = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i=0; i&lt;4; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (currentRefreshCompute[i] &amp;&amp; </div>\n\
<div class=\"line\">                (currentRefreshCompute[i])-&gt;panelName() == mPanelName)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                foundComputePtr = currentRefreshCompute[i];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If alread exists, just change the operator if it differs.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (foundComputePtr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            foundComputePtr-&gt;setBufferOperation( mBufferOperation);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i=0; i&lt;4; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!currentRefreshCompute[i])</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentRefreshCompute[i] = <span class=\"keyword\">new</span> refreshCompute(mPanelName, mBufferOperation);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span>(...)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// refreshCompute implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>refreshCompute::refreshCompute(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;panelName, </div>\n\
<div class=\"line\">                               MbufferOperation postBufferOperation)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set panel name and operator for post rendering</span></div>\n\
<div class=\"line\">    mPanelName = panelName;</div>\n\
<div class=\"line\">    mBufferOperation = postBufferOperation;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the callbacks</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    mDeleteId</div>\n\
<div class=\"line\">        = <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#af55a37b0bf511201f58c91b5f64ebea7\">MUiMessage::add3dViewDestroyMsgCallback</a>(panelName,</div>\n\
<div class=\"line\">                                           &amp;refreshCompute::deleteCB,</div>\n\
<div class=\"line\">                                           (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mDeleteId == 0)</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view deletion callback to panel &quot;</span>) +</div>\n\
<div class=\"line\">                      panelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mPreRenderId</div>\n\
<div class=\"line\">        = <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#a896e7f0af2318e5a7145e189cb235912\">MUiMessage::add3dViewPreRenderMsgCallback</a>(panelName,</div>\n\
<div class=\"line\">                                          &amp;refreshCompute::preRenderCB,</div>\n\
<div class=\"line\">                                          (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPreRenderId == 0)</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view prerender callback to panel &quot;</span>) +</div>\n\
<div class=\"line\">                panelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mPostRenderId</div>\n\
<div class=\"line\">        = <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ui_message.html#af33879a7a29a0853f35ede9de091beb1\">MUiMessage::add3dViewPostRenderMsgCallback</a>(panelName,</div>\n\
<div class=\"line\">                                           &amp;refreshCompute::postRenderCB,</div>\n\
<div class=\"line\">                                           (<span class=\"keywordtype\">void</span> *) <span class=\"keyword\">this</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPostRenderId == 0)</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Could not attach view postrender callback to panel &quot;</span>) +</div>\n\
<div class=\"line\">                      panelName);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Clear all callbacks for this compute</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> refreshCompute::clearCallbacks()</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mDeleteId)</div>\n\
<div class=\"line\">        <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mDeleteId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPreRenderId)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mPreRenderId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPostRenderId)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mPostRenderId);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">refreshCompute::~refreshCompute()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    clearCallbacks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Reset any global pointer pointing to this compute</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;4; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (currentRefreshCompute[i] &amp;&amp; </div>\n\
<div class=\"line\">            (currentRefreshCompute[i])-&gt;panelName() == mPanelName)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentRefreshCompute[i] = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Delete callback</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> refreshCompute::deleteCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    refreshCompute *pf = (refreshCompute *) data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cout&lt;&lt;<span class=\"stringliteral\">&quot;In delete view callback for view &quot;</span>&lt;&lt;panelName.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()</div>\n\
<div class=\"line\">        &lt;&lt;<span class=\"stringliteral\">&quot;. Remove all callbacks.&quot;</span>&lt;&lt;endl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Delete callback.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> pf;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Pre-render callback</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> refreshCompute::preRenderCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    refreshCompute *thisCompute = (refreshCompute *) data;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!thisCompute)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(panelName, view);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> width = 0, height = 0;</div>\n\
<div class=\"line\">    width = view.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a09f01ebd9a52d4e74196c90fd3c1316c\">portWidth</a>( &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess || (width &lt; 2))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    height = view.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a419e60769b8303476d6d25853b3b5f6f\">portHeight</a>( &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess || (height &lt; 2))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vx,vy,vwidth,vheight;</div>\n\
<div class=\"line\">    vx = 0;</div>\n\
<div class=\"line\">    vy = 0;</div>\n\
<div class=\"line\">    vwidth = width / 2;</div>\n\
<div class=\"line\">    vheight = height / 2;</div>\n\
<div class=\"line\">    status = view.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a4043cdd4c78b1c6ceafe8ae9f496763c\">pushViewport</a> (vx, vy, vwidth, vheight);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (thisCompute-&gt;mBufferOperation != kDrawDepthBuffer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(panelName, view);</div>\n\
<div class=\"line\">        <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> origin;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        status = view.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1d533091a31a590ee4599fde04fa65d7\">drawText</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Pre render callback: &quot;</span>) + panelName, origin );</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a59c2e5dd7b3333946848be138928482b\">popViewport</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Post-render callback</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> refreshCompute::postRenderCB(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; panelName, <span class=\"keywordtype\">void</span> * data)</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">    refreshCompute *thisCompute = (refreshCompute *) data;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!thisCompute)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the view if any for the panel</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(panelName, view);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (thisCompute-&gt;mBufferOperation == kDrawDepthBuffer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> width = 0, height = 0;</div>\n\
<div class=\"line\">        width = view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a09f01ebd9a52d4e74196c90fd3c1316c\">portWidth</a>( &amp;status ) / 2 ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess || (width &lt; 2))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        height = view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a419e60769b8303476d6d25853b3b5f6f\">portHeight</a>( &amp;status ) / 2 ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess || (height &lt; 2))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPixels = width * height;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> *depthPixels = <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numPixels];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!depthPixels)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *colorPixels = <span class=\"keyword\">new</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>[numPixels * 4];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!colorPixels)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] depthPixels;</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] colorPixels;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        <span class=\"comment\">// Read into a float buffer</span></div>\n\
<div class=\"line\">        status = view.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a9dd85add630aeee817d42c1018261fa8\">readDepthMap</a>( 0,0, width, height, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *)depthPixels, <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ad56b45f8cc57c6a124a10b503fc2e4c0abe791237370d665961491053ac27285f\">M3dView::kDepth_Float</a> );</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] depthPixels;</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] colorPixels;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Find depth range and remap normalized depth range (-1 to 1) into 0...255</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// for color.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> *dPtr = depthPixels;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> zmin = 100.0f; <span class=\"comment\">// *dPtr;</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> zmax = -100.0f; <span class=\"comment\">// *dPtr;</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(i=0; i&lt;numPixels; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> val = *dPtr; <span class=\"comment\">// * 2.0f - 1.0f;</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(val &lt; zmin) {</div>\n\
<div class=\"line\">                zmin = *dPtr;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(val &gt; zmax) {</div>\n\
<div class=\"line\">                zmax = *dPtr;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            dPtr++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> zrange = zmax - zmin;</div>\n\
<div class=\"line\">        <span class=\"comment\">//printf(&quot;depth values = (%g, %g). Range = %g\\n&quot;, zmin, zmax, zrange);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *cPtr = colorPixels;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        dPtr = depthPixels;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(i=0; i &lt; numPixels; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> val = *dPtr; <span class=\"comment\">// * 2.0f - 1.0f;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//unsigned char depth = (unsigned char)(255.0f * (( (*dPtr)-zmin) / zrange) + zmin );</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> depth = (<span class=\"keywordtype\">unsigned</span> char)(255.0f * (( (val)-zmin) / zrange) );</div>\n\
<div class=\"line\">            <span class=\"comment\">//unsigned char depth = (unsigned char)(255.0f * val);</span></div>\n\
<div class=\"line\">            *cPtr = depth; cPtr++;</div>\n\
<div class=\"line\">            *cPtr = depth; cPtr++;</div>\n\
<div class=\"line\">            *cPtr = depth; cPtr++;</div>\n\
<div class=\"line\">            *cPtr = 0xff;   </div>\n\
<div class=\"line\">            cPtr++;</div>\n\
<div class=\"line\">            dPtr++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> image;</div>\n\
<div class=\"line\">        image.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a41d909431057599c48be86e57440bcec\">setPixels</a>( colorPixels, width, height );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Uncomment next line to test writing buffer to file.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//image.writeToFile( &quot;C:\\\\temp\\\\dumpDepth.iff&quot; );</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        <span class=\"comment\">// Write all pixels back. The origin of the image (lower left)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// is used </span></div>\n\
<div class=\"line\">        status = view.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1a329cac7ac49083ab198cc78c38fa1f\">writeColorBuffer</a>( image, 5, 5 );</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (depthPixels)</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] depthPixels;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (colorPixels)</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] colorPixels;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Do a simple color invert operation on all pixels</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (thisCompute-&gt;mBufferOperation == kInvertColorBuffer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Optional to read as RGBA. Note that this will be slower</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// since we must swizzle the bytes around from the default</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// BGRA format.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> readAsRGBA = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Read the RGB values from the color buffer</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> image;</div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        status = view.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a02ea5cc758421097ddafe883c64e30ee\">readColorBuffer</a>( image, readAsRGBA );</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        status = view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1a329cac7ac49083ab198cc78c38fa1f\">writeColorBuffer</a>( image, 5, 5 );</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *pixelPtr = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>*)image.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#aba6def80dd70f1c9af3dbd348fe270ac\">pixels</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pixelPtr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, height;</div>\n\
<div class=\"line\">            image.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#acab1f6acf34fc74e4d717322fa35241a\">getSize</a>( width, height );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> image2;</div>\n\
<div class=\"line\">            image2.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a903ff4fa0918f6c6438c4889025b7c91\">create</a>( width, height );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *pixelPtr2 = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>*)image2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#aba6def80dd70f1c9af3dbd348fe270ac\">pixels</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPixels = width * height;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i &lt; numPixels; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                *pixelPtr2 = (255 - *pixelPtr); </div>\n\
<div class=\"line\">                pixelPtr2++; pixelPtr++;</div>\n\
<div class=\"line\">                *pixelPtr2 = (255 - *pixelPtr); </div>\n\
<div class=\"line\">                pixelPtr2++; pixelPtr++;</div>\n\
<div class=\"line\">                *pixelPtr2 = (255 - *pixelPtr); </div>\n\
<div class=\"line\">                pixelPtr2++; pixelPtr++;</div>\n\
<div class=\"line\">                *pixelPtr2 = 255;   </div>\n\
<div class=\"line\">                pixelPtr2++; pixelPtr++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">            <span class=\"comment\">// Write all pixels back. The origin of the image (lower left)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// is used </span></div>\n\
<div class=\"line\">            status = view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1a329cac7ac49083ab198cc78c38fa1f\">writeColorBuffer</a>( image2, 5, <span class=\"keywordtype\">short</span>(5+height/2) );</div>\n\
<div class=\"line\">            _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Plug-in functions</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;6.5&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register the command so we can actually do some work</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plugin.registerCommand(<span class=\"stringliteral\">&quot;viewCallbackTest&quot;</span>,</div>\n\
<div class=\"line\">                                    viewCallbackTest::creator,</div>\n\
<div class=\"line\">                                    viewCallbackTest::newSyntax);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerCommand&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove all computation class + callbacks</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;4; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> currentRefreshCompute[i];</div>\n\
<div class=\"line\">        currentRefreshCompute[i] = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Deregister the command</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plugin.deregisterCommand(<span class=\"stringliteral\">&quot;viewCallbackTest&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterCommand&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";