var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheVBOProxy.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_v_b_o_proxy_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheVBOProxy.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheVBOProxy.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVBOProxy.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheConfig.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheGLFT.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheUnitBoundingBox.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVramQuery.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSceneMessage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_set&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;random&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;thread&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;mutex&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL FUNCTIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> assertNoVertexArray() </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_COLOR_ARRAY));</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_EDGE_FLAG_ARRAY));</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_FOG_COORDINATE_ARRAY_EXT));</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_INDEX_ARRAY));</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_NORMAL_ARRAY));</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_SECONDARY_COLOR_ARRAY_EXT));</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_TEXTURE_COORD_ARRAY));</div>\n\
<div class=\"line\">    assert(!gGLFT-&gt;glIsEnabled(MGL_VERTEX_ARRAY));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> assertNoVBOs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG</span></div>\n\
<div class=\"line\">    MGLint buffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    gGLFT-&gt;glGetIntegerv(MGL_ARRAY_BUFFER_BINDING_ARB, &amp;buffer);</div>\n\
<div class=\"line\">    assert(buffer == 0);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    gGLFT-&gt;glGetIntegerv(MGL_ELEMENT_ARRAY_BUFFER_BINDING_ARB, &amp;buffer);</div>\n\
<div class=\"line\">    assert(buffer == 0);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> BeginTransformFeedback(MGLenum primitiveMode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glBeginTransformFeedbackNV(primitiveMode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glBeginTransformFeedbackEXT(primitiveMode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> EndTransformFeedback()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glEndTransformFeedbackNV();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glEndTransformFeedbackEXT();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> EnableRasterizerDiscard()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glEnable(MGL_RASTERIZER_DISCARD_NV);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glEnable(MGL_RASTERIZER_DISCARD_EXT);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DisableRasterizerDiscard()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glDisable(MGL_RASTERIZER_DISCARD_NV);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glDisable(MGL_RASTERIZER_DISCARD_EXT);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> BindBufferBase(MGLuint index, MGLuint buffer)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glBindBufferBaseNV(MGL_TRANSFORM_FEEDBACK_BUFFER_NV, index, buffer);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glBindBufferBaseEXT(MGL_TRANSFORM_FEEDBACK_BUFFER_EXT, index, buffer);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL CLASSES</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS FlipNormalsProgram</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Compute the flipped normals by transform feedback</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>FlipNormalsProgram</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;FlipNormalsProgram&gt; getInstance();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> resetInstance();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~FlipNormalsProgram();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> use();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> beginQuery();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> endQuery();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">    FlipNormalsProgram(<span class=\"keyword\">const</span> FlipNormalsProgram&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FlipNormalsProgram&amp; operator=(<span class=\"keyword\">const</span> FlipNormalsProgram&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FlipNormalsProgram();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> validate();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MGLhandleARB fProgramObj;</div>\n\
<div class=\"line\">    MGLuint      fQuery;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;FlipNormalsProgram&gt; fsFlipNormalsProgram;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* fsFlipNormalsProgramText;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* FlipNormalsProgram::fsFlipNormalsProgramText = <span class=\"stringliteral\">&quot;#version 120\\n&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;varying vec3 outNormal;\\n&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;void main()\\n&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;{\\n&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;    outNormal = -gl_Vertex.xyz;\\n&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;    gl_Position = gl_Vertex;\\n&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;}\\n\\n&quot;</span> ;</div>\n\
<div class=\"line\">std::shared_ptr&lt;FlipNormalsProgram&gt; FlipNormalsProgram::fsFlipNormalsProgram;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">std::shared_ptr&lt;FlipNormalsProgram&gt; FlipNormalsProgram::getInstance()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// return the transform feedback program cached in weak pointer</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fsFlipNormalsProgram) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fsFlipNormalsProgram;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// check transform feedback extension</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback) &amp;&amp;</div>\n\
<div class=\"line\">        !gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::shared_ptr&lt;FlipNormalsProgram&gt;();;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// create a new transform feedback program</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;FlipNormalsProgram&gt; prog(<span class=\"keyword\">new</span> FlipNormalsProgram());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!prog-&gt;validate()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::shared_ptr&lt;FlipNormalsProgram&gt;();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fsFlipNormalsProgram = prog;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fsFlipNormalsProgram;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FlipNormalsProgram::resetInstance()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fsFlipNormalsProgram.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">FlipNormalsProgram::~FlipNormalsProgram()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// delete the program and query</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fProgramObj != 0) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glDeleteObjectARB(fProgramObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fQuery != 0) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glDeleteQueriesARB(1, &amp;fQuery);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FlipNormalsProgram::use()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fProgramObj != 0);</div>\n\
<div class=\"line\">    gGLFT-&gt;glUseProgramObjectARB(fProgramObj);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FlipNormalsProgram::beginQuery()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glBeginQueryARB(MGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV, fQuery);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glBeginQueryARB(MGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT, fQuery);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FlipNormalsProgram::endQuery()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glEndQueryARB(MGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glEndQueryARB(MGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">FlipNormalsProgram::FlipNormalsProgram()</div>\n\
<div class=\"line\">    : fProgramObj(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>  success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    MGLint status  = MGL_TRUE;</div>\n\
<div class=\"line\">    MGLhandleARB vertShaderObj = 0;</div>\n\
<div class=\"line\">    MGLhandleARB prog = 0;</div>\n\
<div class=\"line\">    MGLuint      query = 0;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// create vertex shader</span></div>\n\
<div class=\"line\">    vertShaderObj = gGLFT-&gt;glCreateShaderObjectARB(MGL_VERTEX_SHADER_ARB);</div>\n\
<div class=\"line\">    assert(vertShaderObj != 0);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (vertShaderObj == 0) {</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// compile vertex shader</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (success) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glShaderSourceARB(vertShaderObj, 1, &amp;fsFlipNormalsProgramText, NULL);</div>\n\
<div class=\"line\">        gGLFT-&gt;glCompileShaderARB(vertShaderObj);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"comment\">// check the compile result</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glGetObjectParameterivARB(vertShaderObj, MGL_OBJECT_COMPILE_STATUS_ARB, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MGL_TRUE) {</div>\n\
<div class=\"line\">            success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span> buffer[4096];</div>\n\
<div class=\"line\">            MGLsizei count = 0;</div>\n\
<div class=\"line\">            gGLFT-&gt;glGetInfoLogARB(vertShaderObj, 4096, &amp;count, buffer);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;gpuCache: Failed to compile vertex shader.\\nReason: %s\\n&quot;</span>, buffer);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// create transform feedback program</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (success) {</div>\n\
<div class=\"line\">        prog = gGLFT-&gt;glCreateProgramObjectARB();</div>\n\
<div class=\"line\">        assert(prog != 0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (prog == 0) {</div>\n\
<div class=\"line\">            success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// set up and link program</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (success) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glAttachObjectARB(prog, vertShaderObj);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// do nothing. set NV_transform_feedback state post-link</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_EXT_transform_feedback)) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* outputs = <span class=\"stringliteral\">&quot;outNormal&quot;</span>;</div>\n\
<div class=\"line\">            gGLFT-&gt;glTransformFeedbackVaryingsEXT((MGLuint)(<span class=\"keywordtype\">size_t</span>)prog, 1, &amp;outputs, MGL_SEPARATE_ATTRIBS_EXT);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        gGLFT-&gt;glLinkProgramARB(prog);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (gGLFT-&gt;extensionExists(kMGLext_NV_transform_feedback)) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MGLint output = gGLFT-&gt;glGetVaryingLocationNV((MGLuint)(<span class=\"keywordtype\">size_t</span>)prog, <span class=\"stringliteral\">&quot;outNormal&quot;</span>);</div>\n\
<div class=\"line\">            gGLFT-&gt;glTransformFeedbackVaryingsNV((MGLuint)(<span class=\"keywordtype\">size_t</span>)prog, 1, &amp;output, MGL_SEPARATE_ATTRIBS_NV);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"comment\">// check the link result</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glGetObjectParameterivARB(prog, MGL_OBJECT_LINK_STATUS_ARB, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MGL_TRUE) {</div>\n\
<div class=\"line\">            success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span> buffer[4096];</div>\n\
<div class=\"line\">            MGLsizei count = 0;</div>\n\
<div class=\"line\">            gGLFT-&gt;glGetInfoLogARB(prog, 4096, &amp;count, buffer);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;gpuCache: Failed to link program.\\nReason: %s\\n&quot;</span>, buffer);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// the vertex should be deleted along with the program</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (vertShaderObj != 0) {</div>\n\
<div class=\"line\">        gGLFT-&gt;glDeleteObjectARB(vertShaderObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// generate the query object</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glGenQueriesARB(1, &amp;query);</div>\n\
<div class=\"line\">    assert(query != 0);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (query == 0) {</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (success) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// success, we have the program to flip normals now</span></div>\n\
<div class=\"line\">        fProgramObj = prog;</div>\n\
<div class=\"line\">        fQuery      = query;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// failure, delete the program and query</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (prog != 0) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glDeleteObjectARB(prog);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (query != 0) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glDeleteQueriesARB(1, &amp;query);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> FlipNormalsProgram::validate()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (fProgramObj != 0 &amp;&amp; fQuery != 0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS FlipNormals</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>FlipNormals</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    FlipNormals(<span class=\"keywordtype\">size_t</span> numVerts, MGLuint normalName)</div>\n\
<div class=\"line\">        : fNumVerts(numVerts), fNormalName(normalName)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MGLuint compute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">    FlipNormals(<span class=\"keyword\">const</span> FlipNormals&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FlipNormals&amp; operator=(<span class=\"keyword\">const</span> FlipNormals&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>  fNumVerts;</div>\n\
<div class=\"line\">    MGLuint  fNormalName;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">MGLuint FlipNormals::compute()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;FlipNormalsProgram&gt; prog = FlipNormalsProgram::getInstance();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!prog) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// generate an empty buffer for flipped normals</span></div>\n\
<div class=\"line\">    MGLuint flippedNormalName = 0;</div>\n\
<div class=\"line\">    gGLFT-&gt;glGenBuffersARB(1, &amp;flippedNormalName);</div>\n\
<div class=\"line\">    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, flippedNormalName);</div>\n\
<div class=\"line\">    gGLFT-&gt;glBufferDataARB(MGL_ARRAY_BUFFER_ARB, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>) * 3 * fNumVerts,</div>\n\
<div class=\"line\">                           NULL, MGL_STATIC_DRAW_ARB);</div>\n\
<div class=\"line\">    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// disable rasterization</span></div>\n\
<div class=\"line\">    EnableRasterizerDiscard();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// use flip normal program</span></div>\n\
<div class=\"line\">    prog-&gt;use();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// bind empty flipped normals buffer (#0:outNormal)</span></div>\n\
<div class=\"line\">    BindBufferBase(0, flippedNormalName);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// bind normals buffer</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, fNormalName);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// normals buffer is bounded to gl_Vertex</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glEnableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">    gGLFT-&gt;glVertexPointer(3, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// begin transform feedback</span></div>\n\
<div class=\"line\">    prog-&gt;beginQuery();</div>\n\
<div class=\"line\">    BeginTransformFeedback(MGL_POINTS);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// push the normals</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glDrawArrays(MGL_POINTS, 0, MGLsizei(fNumVerts));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// end transform feedback</span></div>\n\
<div class=\"line\">    EndTransformFeedback();</div>\n\
<div class=\"line\">    prog-&gt;endQuery();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// clean up</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glDisableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">    BindBufferBase(0, 0);</div>\n\
<div class=\"line\">    gGLFT-&gt;glUseProgramObjectARB(0);</div>\n\
<div class=\"line\">    DisableRasterizerDiscard();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> flippedNormalName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS VBOBufferRegistry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// VBO buffer registry is used to cache VBOs to keep them as much as</span></div>\n\
<div class=\"line\"><span class=\"comment\">// possible on the graphic card from frame to frame. </span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>VBOBufferRegistry {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- typedefs and enumerations -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VBOBuffer::BufferType BufferType;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VBOBuffer::Key        Key;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VBOBuffer::KeyHash    KeyHash;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VBOBuffer::KeyEqualTo KeyEqualTo;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> arrayDestructionCb(<span class=\"keyword\">const</span> Key&amp; key);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    VBOBufferRegistry();</div>\n\
<div class=\"line\">    ~VBOBufferRegistry();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns the buffer matchng the given key if it exists. Returns</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a null pointer otherwise.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; find(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> BufferType&amp; bufferType, <span class=\"keyword\">const</span> Key&amp; key)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Map::const_iterator it = fActiveBuffers[bufferType].find(key);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != fActiveBuffers[bufferType].end()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> it-&gt;second;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Map::iterator it = fPreviousFrameBuffers[bufferType].find(key);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != fPreviousFrameBuffers[bufferType].end()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// The VBO was used while drawing the previous</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// frame. Moving it to the active list.</span></div>\n\
<div class=\"line\">                std::shared_ptr&lt;const VBOBuffer&gt; result = it-&gt;second;</div>\n\
<div class=\"line\">                fActiveBuffers[bufferType].insert(*it);</div>\n\
<div class=\"line\">                fPreviousFrameBuffers[bufferType].erase(it);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::shared_ptr&lt;const VBOBuffer&gt;();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Insert the given buffer in the registry.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> insert(std::shared_ptr&lt;const VBOBuffer&gt;&amp; buffer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fActiveBuffers[buffer-&gt;bufferType()].insert(</div>\n\
<div class=\"line\">            std::make_pair(buffer-&gt;key(), buffer));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> erase(<span class=\"keyword\">const</span> Key&amp; key)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; VBOBuffer::kNbBufferType; ++i) {</div>\n\
<div class=\"line\">            fActiveBuffers[i].erase(key);</div>\n\
<div class=\"line\">            fPreviousFrameBuffers[i].erase(key);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> delayedErase(<span class=\"keyword\">const</span> Key&amp; key)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; lock(fBuffersToDeleteMutex);</div>\n\
<div class=\"line\">        fBuffersToDelete.insert(key);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> doDelayedErase()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fBuffersToDelete.empty()) {</div>\n\
<div class=\"line\">            std::lock_guard&lt;std::mutex&gt; lock(fBuffersToDeleteMutex);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Key&amp; key : fBuffersToDelete) {</div>\n\
<div class=\"line\">                erase(key);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            fBuffersToDelete.clear();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Randomly selects a random buffer from the previous frame and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// erases it. Returns false if all allocated buffers are active. </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> eraseRandomBuffer() </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> nbCandidateBuffers = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; VBOBuffer::kNbBufferType; ++i) {</div>\n\
<div class=\"line\">            nbCandidateBuffers += fPreviousFrameBuffers[i].size();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nbCandidateBuffers == 0) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> candidate = fRandomEvictionIndex() % nbCandidateBuffers;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; VBOBuffer::kNbBufferType; ++i) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (candidate &lt; fPreviousFrameBuffers[i].size()) {</div>\n\
<div class=\"line\">                fPreviousFrameBuffers[i].erase(</div>\n\
<div class=\"line\">                    fPreviousFrameBuffers[i].begin());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            candidate -= fPreviousFrameBuffers[i].size();</div>\n\
<div class=\"line\">            assert(candidate &gt;= 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Should never get here...</span></div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tell the registry that we are about to start drawing a new</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// frame. This is used as hint to mark some VBOs as potential</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// candidates for eviction. </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> nextRefresh()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; VBOBuffer::kNbBufferType; ++i) {</div>\n\
<div class=\"line\">            fPreviousFrameBuffers[i].insert(</div>\n\
<div class=\"line\">                fActiveBuffers[i].begin(), fActiveBuffers[i].end());</div>\n\
<div class=\"line\">            fActiveBuffers[i].clear();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Flush all VBO buffers.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> clear()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; VBOBuffer::kNbBufferType; ++i) {</div>\n\
<div class=\"line\">            fActiveBuffers[i].clear();</div>\n\
<div class=\"line\">            fPreviousFrameBuffers[i].clear();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        FlipNormalsProgram::resetInstance();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        assert(VBOBuffer::nbAllocatedBytes() == 0);</div>\n\
<div class=\"line\">        assert(VBOBuffer::nbAllocated()      == 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Reserve spaces by deleting VBOs</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> reserve(<span class=\"keywordtype\">size_t</span> bytesNeeded, <span class=\"keywordtype\">size_t</span> buffersNeeded);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Total size of all the index VBOs currently allocated</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbIndexAllocatedBytes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> bytes = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v :</div>\n\
<div class=\"line\">                      fActiveBuffers[VBOBuffer::kIndexBufferType]) {</div>\n\
<div class=\"line\">            bytes += v.second-&gt;key().fBytes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v :</div>\n\
<div class=\"line\">                      fPreviousFrameBuffers[VBOBuffer::kIndexBufferType]) {</div>\n\
<div class=\"line\">            bytes += v.second-&gt;key().fBytes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> bytes;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Total size of all the vertex VBOs currently allocated</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbVertexAllocatedBytes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> bytes = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v :</div>\n\
<div class=\"line\">                      fActiveBuffers[VBOBuffer::kVertexBufferType]) {</div>\n\
<div class=\"line\">            bytes += v.second-&gt;key().fBytes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v :</div>\n\
<div class=\"line\">                      fPreviousFrameBuffers[VBOBuffer::kVertexBufferType]) {</div>\n\
<div class=\"line\">            bytes += v.second-&gt;key().fBytes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v :</div>\n\
<div class=\"line\">                      fActiveBuffers[VBOBuffer::kFlippedNormalBufferType]) {</div>\n\
<div class=\"line\">            bytes += v.second-&gt;key().fBytes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v :</div>\n\
<div class=\"line\">                      fPreviousFrameBuffers[VBOBuffer::kFlippedNormalBufferType]) {</div>\n\
<div class=\"line\">            bytes += v.second-&gt;key().fBytes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> bytes;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Number of index VBOs currently allocated</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbIndexAllocated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span></div>\n\
<div class=\"line\">            fActiveBuffers[        VBOBuffer::kIndexBufferType ].size() +</div>\n\
<div class=\"line\">            fPreviousFrameBuffers[ VBOBuffer::kIndexBufferType ].size();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Number of vertex VBOs currently allocated</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbVertexAllocated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span></div>\n\
<div class=\"line\">            fActiveBuffers[        VBOBuffer::kVertexBufferType        ].size() +</div>\n\
<div class=\"line\">            fPreviousFrameBuffers[ VBOBuffer::kVertexBufferType        ].size() +</div>\n\
<div class=\"line\">            fActiveBuffers[        VBOBuffer::kFlippedNormalBufferType ].size() +</div>\n\
<div class=\"line\">            fPreviousFrameBuffers[ VBOBuffer::kFlippedNormalBufferType ].size();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> mayaExitCallback(<span class=\"keywordtype\">void</span>* clientData);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> MCallbackId fsMayaExitCallbackId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;</div>\n\
<div class=\"line\">        Key,</div>\n\
<div class=\"line\">        std::shared_ptr&lt;const VBOBuffer&gt;,</div>\n\
<div class=\"line\">        KeyHash,</div>\n\
<div class=\"line\">        KeyEqualTo</div>\n\
<div class=\"line\">        &gt; Map; </div>\n\
<div class=\"line\">    Map fActiveBuffers[VBOBuffer::kNbBufferType];</div>\n\
<div class=\"line\">    Map fPreviousFrameBuffers[VBOBuffer::kNbBufferType];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This allow deleting a VBO from a non-main thread.</span></div>\n\
<div class=\"line\">    std::mutex fBuffersToDeleteMutex;</div>\n\
<div class=\"line\">    std::unordered_set&lt;Key, KeyHash, KeyEqualTo&gt; fBuffersToDelete;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mt19937_64 fRandomEvictionIndex;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MCallbackId VBOBufferRegistry::fsMayaExitCallbackId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOBufferRegistry&amp; theBufferRegistry()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> VBOBufferRegistry sRegistry;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sRegistry;</div>\n\
<div class=\"line\">} </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">std::thread::id gsMainThreadId = std::this_thread::get_id();</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOBufferRegistry::arrayDestructionCb(<span class=\"keyword\">const</span> Key&amp; key)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Array d&#39;tor Callback might be called from a worker thread (background reading)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (std::this_thread::get_id() == gsMainThreadId) {</div>\n\
<div class=\"line\">        theBufferRegistry().erase(key);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        theBufferRegistry().delayedErase(key);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOBufferRegistry::mayaExitCallback(<span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(clientData);</div>\n\
<div class=\"line\">    VBOBufferRegistry* registry = <span class=\"keyword\">static_cast&lt;</span>VBOBufferRegistry*<span class=\"keyword\">&gt;</span>(clientData);</div>\n\
<div class=\"line\">    registry-&gt;clear();</div>\n\
<div class=\"line\">    UnitBoundingBox::clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOBufferRegistry::VBOBufferRegistry()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// hook Maya exit callback to free VBOs</span></div>\n\
<div class=\"line\">    fsMayaExitCallbackId = <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(</div>\n\
<div class=\"line\">        <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa1efff7ad75eeef5a2ac9e3c0e890dbd0\">MSceneMessage::kMayaExiting</a>, mayaExitCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get rid of the associated VBO as soon as possible</span></div>\n\
<div class=\"line\">    ArrayBase::registerDestructionCallback(arrayDestructionCb);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set hashmap load factor to 0.7 to decrease collision</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; VBOBuffer::kNbBufferType; ++i) {</div>\n\
<div class=\"line\">        fActiveBuffers[i].max_load_factor(0.7f);</div>\n\
<div class=\"line\">        fPreviousFrameBuffers[i].max_load_factor(0.7f);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOBufferRegistry::~VBOBufferRegistry()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>(fsMayaExitCallbackId);</div>\n\
<div class=\"line\">    ArrayBase::unregisterDestructionCallback(arrayDestructionCb);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> VBOBufferRegistry::reserve(</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> bytesNeeded, <span class=\"keywordtype\">size_t</span> buffersNeeded)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (Config::maxVBOSize()  &lt; bytesNeeded ||</div>\n\
<div class=\"line\">        Config::maxVBOCount() &lt; buffersNeeded)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> targetBytes  = Config::maxVBOSize()  - bytesNeeded;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> targetNumber = Config::maxVBOCount() - buffersNeeded;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (</div>\n\
<div class=\"line\">        VBOBuffer::nbAllocatedBytes() &gt; targetBytes ||</div>\n\
<div class=\"line\">        VBOBuffer::nbAllocated()      &gt; targetNumber</div>\n\
<div class=\"line\">    ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// keep deleting VBOs</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!eraseRandomBuffer()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// no more VBOs to delete, fail</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// unnamed namespace</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS VBOBuffer</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::fsTotalVBOSize = 0;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::fsNbAllocated  = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::fsNbUploaded = 0;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::fsNbUploadedBytes = 0;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::fsNbEvicted = 0;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::fsNbEvictedBytes = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// When switching from vp2 SubSceneOverride mode to the default viewport, we may</span></div>\n\
<div class=\"line\"><span class=\"comment\">// want to convert the Maya buffers back into software buffers to free up the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// gpu memory.  However we don&#39;t have a clean way to delete the SubSceneOverride</span></div>\n\
<div class=\"line\"><span class=\"comment\">// nodes from the vp2 scene since we can only update the MSubSceneContainer when</span></div>\n\
<div class=\"line\"><span class=\"comment\">// vp2 renders.  Having switched viewport modes, vp2 doesn&#39;t render again.  This</span></div>\n\
<div class=\"line\"><span class=\"comment\">// would take some extra gymnastics to avoid.  So the vp2 buffers will live on</span></div>\n\
<div class=\"line\"><span class=\"comment\">// regardless.  In that case, we can just leave the data there.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//#define DOWNCONVERT_VP2SSO_TO_SOFTWARE</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>VBOBuffer::MakeSharedEnabler : <span class=\"keyword\">public</span> VBOBuffer {</div>\n\
<div class=\"line\">    MakeSharedEnabler(BufferType bufferType, <span class=\"keyword\">const</span> Key &amp;key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span> *buffer) :</div>\n\
<div class=\"line\">            VBOBuffer(bufferType, key, buffer) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MakeSharedEnabler(BufferType bufferType, <span class=\"keyword\">const</span> Key &amp;key, MGLuint vboName) :</div>\n\
<div class=\"line\">            VBOBuffer(bufferType, key, vboName) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const VBOBuffer&gt;</div>\n\
<div class=\"line\">VBOBuffer::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const IndexBuffer&gt;&amp; buffer,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> isTemporary)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; result =</div>\n\
<div class=\"line\">        theBufferRegistry().find(kIndexBufferType, buffer-&gt;array()-&gt;key());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!result) {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef DOWNCONVERT_SSO_TO_SOFTWARE</span></div>\n\
<div class=\"line\">        std::shared_ptr&lt;ReadableArray&lt;unsigned int&gt; &gt; readable = buffer-&gt;array()-&gt;getReadableArray();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!buffer-&gt;array()-&gt;isReadable()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We are converting from viewport 2.0 SubSceneOverride non-readable arrays back to VBOBuffers.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// So graft the SharedArray copy of the data back into the VertexBuffer.  This happens when changing</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the viewport mode from vp2.0 to the default viewport and allows the vp2.0 buffer to be freed.</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;Array&lt;unsigned int&gt; &gt; array(readable);</div>\n\
<div class=\"line\">            buffer-&gt;ReplaceArrayInstance(array);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else </span></div>\n\
<div class=\"line\">        IndexBuffer::ReadInterfacePtr readable = buffer-&gt;array()-&gt;getReadable();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> BufferType bufferType = kIndexBufferType;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>*      bufferData = readable-&gt;get();</div>\n\
<div class=\"line\">        result = std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">            bufferType, buffer-&gt;array()-&gt;key(), bufferData);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isTemporary)</div>\n\
<div class=\"line\">            theBufferRegistry().insert(result);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">std::shared_ptr&lt;const VBOBuffer&gt;</div>\n\
<div class=\"line\">VBOBuffer::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt;&amp; buffer,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> isTemporary)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; result =</div>\n\
<div class=\"line\">        theBufferRegistry().find(kVertexBufferType, buffer-&gt;array()-&gt;key());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!result) {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef DOWNCONVERT_SSO_TO_SOFTWARE</span></div>\n\
<div class=\"line\">        std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt; readable = buffer-&gt;array()-&gt;getReadableArray();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!buffer-&gt;array()-&gt;isReadable()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We are converting from viewport 2.0 SubSceneOverride non-readable arrays back to VBOBuffers.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// So graft the SharedArray copy of the data back into the VertexBuffer.  This happens when changing</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the viewport mode from vp2.0 to the default viewport and allows the vp2.0 buffer to be freed.</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;Array&lt;float&gt; &gt; array(readableArray);</div>\n\
<div class=\"line\">            buffer-&gt;ReplaceArrayInstance(array);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else </span></div>\n\
<div class=\"line\">        VertexBuffer::ReadInterfacePtr readable = buffer-&gt;array()-&gt;getReadable();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> BufferType bufferType = kVertexBufferType;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>*      bufferData = readable-&gt;get();</div>\n\
<div class=\"line\">        result = std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">            bufferType, buffer-&gt;array()-&gt;key(), bufferData);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isTemporary)</div>\n\
<div class=\"line\">            theBufferRegistry().insert(result);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">std::shared_ptr&lt;const VBOBuffer&gt;</div>\n\
<div class=\"line\">VBOBuffer::createFlippedNormals(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt;&amp; buffer,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> isTemporary)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; flippedVBO =</div>\n\
<div class=\"line\">        theBufferRegistry().find(kFlippedNormalBufferType, buffer-&gt;array()-&gt;key());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!flippedVBO) {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;const VBOBuffer&gt; unflippedVBO = create(buffer, isTemporary);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MGLuint flippedNormalName =</div>\n\
<div class=\"line\">            FlipNormals(buffer-&gt;numVerts(), unflippedVBO-&gt;name()).compute();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (flippedNormalName !=0 ) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> BufferType bufferType = kFlippedNormalBufferType;</div>\n\
<div class=\"line\">            flippedVBO = std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">                bufferType, buffer-&gt;array()-&gt;key(), flippedNormalName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isTemporary)</div>\n\
<div class=\"line\">                theBufferRegistry().insert(flippedVBO);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> flippedVBO;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">std::shared_ptr&lt;const VBOBuffer&gt;</div>\n\
<div class=\"line\">VBOBuffer::lookup(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const IndexBuffer&gt;&amp; buffer)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().find(</div>\n\
<div class=\"line\">        kIndexBufferType, buffer-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">std::shared_ptr&lt;const VBOBuffer&gt;</div>\n\
<div class=\"line\">VBOBuffer::lookup(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt;&amp; buffer)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().find(</div>\n\
<div class=\"line\">        kVertexBufferType, buffer-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">std::shared_ptr&lt;const VBOBuffer&gt;</div>\n\
<div class=\"line\">VBOBuffer::lookupFlippedNormals(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt;&amp; buffer)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().find(</div>\n\
<div class=\"line\">        kFlippedNormalBufferType, buffer-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbAllocatedBytes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fsTotalVBOSize;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbAllocated()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fsNbAllocated;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbIndexAllocatedBytes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().nbIndexAllocatedBytes();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbIndexAllocated()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().nbIndexAllocated();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbVertexAllocatedBytes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().nbVertexAllocatedBytes();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbVertexAllocated()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().nbVertexAllocated();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbUploaded()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fsNbUploaded;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbUploadedBytes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fsNbUploadedBytes;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbEvicted()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fsNbEvicted;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VBOBuffer::nbEvictedBytes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fsNbEvictedBytes;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOBuffer::clear()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> theBufferRegistry().clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOBuffer::nextRefresh()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    theBufferRegistry().nextRefresh();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOBuffer::VBOBuffer(BufferType bufferType, <span class=\"keyword\">const</span> Key&amp; key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* buffer)</div>\n\
<div class=\"line\">    : fKey(key), fBufferType(bufferType), fVBOName(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Create an VBO and copy data to it.</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glGenBuffersARB(1, &amp;fVBOName);</div>\n\
<div class=\"line\">    assert(fVBOName != 0);</div>\n\
<div class=\"line\">    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, fVBOName);</div>\n\
<div class=\"line\">    gGLFT-&gt;glBufferDataARB(MGL_ARRAY_BUFFER_ARB, fKey.fBytes, buffer, MGL_STATIC_DRAW_ARB);</div>\n\
<div class=\"line\">    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// accumulate VBO size counter</span></div>\n\
<div class=\"line\">    fsTotalVBOSize += fKey.fBytes;</div>\n\
<div class=\"line\">    ++fsNbAllocated;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fsNbUploadedBytes += fKey.fBytes;</div>\n\
<div class=\"line\">    ++fsNbUploaded;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOBuffer::VBOBuffer(BufferType bufferType, <span class=\"keyword\">const</span> Key&amp; key, MGLuint vboName)</div>\n\
<div class=\"line\">    : fKey(key), fBufferType(bufferType), fVBOName(vboName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fVBOName != 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// accumulate VBO size counter</span></div>\n\
<div class=\"line\">    fsTotalVBOSize += fKey.fBytes;</div>\n\
<div class=\"line\">    ++fsNbAllocated;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fsNbUploadedBytes += fKey.fBytes;</div>\n\
<div class=\"line\">    ++fsNbUploaded;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOBuffer::~VBOBuffer()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// free the VBO</span></div>\n\
<div class=\"line\">    assert(gGLFT-&gt;glIsBufferARB(fVBOName));</div>\n\
<div class=\"line\">    gGLFT-&gt;glDeleteBuffersARB(1, &amp;fVBOName);</div>\n\
<div class=\"line\">    fVBOName = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// reduce VBO size counter</span></div>\n\
<div class=\"line\">    fsTotalVBOSize -= fKey.fBytes;</div>\n\
<div class=\"line\">    --fsNbAllocated;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    assert(fsTotalVBOSize &gt;= 0);</div>\n\
<div class=\"line\">    assert(fsNbAllocated  &gt;= 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fsNbEvictedBytes += fKey.fBytes;</div>\n\
<div class=\"line\">    ++fsNbEvicted;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS VBOProxy</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOProxy::VBOProxy()</div>\n\
<div class=\"line\">    : fLastBindingType(kPrimitives),</div>\n\
<div class=\"line\">      fAreNormalsFlipped(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Just double check that no vertex array or VBO is in use when</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the VBOProxy object takes control of the OpenGL client state.</span></div>\n\
<div class=\"line\">    assertNoVertexArray();</div>\n\
<div class=\"line\">    assertNoVBOs();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For extra safety...</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glTexCoord2f(0.0f, 0.0f);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOProxy::~VBOProxy()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (fLastBindingType) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPrimitives: {</div>\n\
<div class=\"line\">            fIndices.reset();</div>\n\
<div class=\"line\">            fPositions.reset();</div>\n\
<div class=\"line\">            fNormals.reset();</div>\n\
<div class=\"line\">            fUVs.reset();</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVertexArrays: {</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// We should always have indices</span></div>\n\
<div class=\"line\">                assert(fIndices);</div>\n\
<div class=\"line\">                fIndices.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// We should always have positions!</span></div>\n\
<div class=\"line\">                assert(fPositions);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                gGLFT-&gt;glDisableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">                fPositions.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fNormals) {</div>\n\
<div class=\"line\">                gGLFT-&gt;glDisableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                fNormals.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">                gGLFT-&gt;glDisableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                fUVs.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVBOs: {</div>\n\
<div class=\"line\">            gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">            gGLFT-&gt;glBindBufferARB(MGL_ELEMENT_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// We should always have indices</span></div>\n\
<div class=\"line\">                assert(fIndices);</div>\n\
<div class=\"line\">                assert(fVBOIndices);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                fIndices.reset();</div>\n\
<div class=\"line\">                fVBOIndices.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// We should always have positions!</span></div>\n\
<div class=\"line\">                assert(fPositions);</div>\n\
<div class=\"line\">                assert(fVBOPositions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glDisableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                fPositions.reset();</div>\n\
<div class=\"line\">                fVBOPositions.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fVBONormals) {</div>\n\
<div class=\"line\">                assert(fNormals);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glDisableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                fNormals.reset();</div>\n\
<div class=\"line\">                fVBONormals.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fVBOUVs) {</div>\n\
<div class=\"line\">                assert(fUVs);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                gGLFT-&gt;glDisableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                fUVs.reset();</div>\n\
<div class=\"line\">                fVBOUVs.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>: {</div>\n\
<div class=\"line\">            assert(0);</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    assertNoVertexArray();</div>\n\
<div class=\"line\">    assertNoVBOs();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VBOProxy::BindingType VBOProxy::updateBuffers(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const IndexBuffer&gt;&amp;  indices,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt;&amp; normals,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt;&amp; uvs,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>                                   areNormalsFlipped,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> VBOMode                                vboMode,</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr&amp;              positionsRead,</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr&amp;              normalsRead,</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr&amp;              uvsRead</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(indices);</div>\n\
<div class=\"line\">    assert(positions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    theBufferRegistry().doDelayedErase();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; vboIndices;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; vboPositions;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; vboNormals;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;const VBOBuffer&gt; vboUVs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attempt to use VBOs as much as possible since this is the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// highest performance API.</span></div>\n\
<div class=\"line\">    BindingType bindingType = kVBOs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (vboMode == kDontUseVBO || positions-&gt;numVerts() &lt; Config::minVertsForVBOs()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// We only use VBOs for elements above a certain threshold to</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// avoid using too many VBOs.</span></div>\n\
<div class=\"line\">        bindingType = kVertexArrays;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Estimate the VBO buffer size to allocate. </span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> bytesNeeded = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> buffersNeeded = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (indices == fIndices) {</div>\n\
<div class=\"line\">            vboIndices = fVBOIndices;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            vboIndices = theBufferRegistry().find(</div>\n\
<div class=\"line\">                VBOBuffer::kIndexBufferType, indices-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!vboIndices) {</div>\n\
<div class=\"line\">                bytesNeeded += indices-&gt;array()-&gt;bytes();</div>\n\
<div class=\"line\">                ++buffersNeeded;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positions == fPositions) {</div>\n\
<div class=\"line\">            vboPositions = fVBOPositions;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            vboPositions = theBufferRegistry().find(</div>\n\
<div class=\"line\">                VBOBuffer::kVertexBufferType, positions-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!vboPositions) {</div>\n\
<div class=\"line\">                bytesNeeded += positions-&gt;array()-&gt;bytes();</div>\n\
<div class=\"line\">                ++buffersNeeded;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (normals == fNormals &amp;&amp; areNormalsFlipped == fAreNormalsFlipped) {</div>\n\
<div class=\"line\">            vboNormals = fVBONormals;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (areNormalsFlipped) {</div>\n\
<div class=\"line\">                vboNormals = theBufferRegistry().find(</div>\n\
<div class=\"line\">                    VBOBuffer::kFlippedNormalBufferType, normals-&gt;array()-&gt;key());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!vboNormals) {</div>\n\
<div class=\"line\">                    bytesNeeded += normals-&gt;array()-&gt;bytes();</div>\n\
<div class=\"line\">                    ++buffersNeeded;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// The unflipped normals buffer will also be</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// necessary to compute the flipped buffer ones..</span></div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const VBOBuffer&gt; unflippedNormals =</div>\n\
<div class=\"line\">                        theBufferRegistry().find(</div>\n\
<div class=\"line\">                            VBOBuffer::kVertexBufferType, normals-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!unflippedNormals) {</div>\n\
<div class=\"line\">                        bytesNeeded += normals-&gt;array()-&gt;bytes();</div>\n\
<div class=\"line\">                        ++buffersNeeded;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                vboNormals = theBufferRegistry().find(</div>\n\
<div class=\"line\">                    VBOBuffer::kVertexBufferType, normals-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!vboNormals) {</div>\n\
<div class=\"line\">                    bytesNeeded += normals-&gt;array()-&gt;bytes();</div>\n\
<div class=\"line\">                    ++buffersNeeded;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uvs == fUVs) {</div>\n\
<div class=\"line\">            vboUVs = fVBOUVs;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            vboUVs = theBufferRegistry().find(</div>\n\
<div class=\"line\">                VBOBuffer::kVertexBufferType, uvs-&gt;array()-&gt;key());</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!vboUVs) {</div>\n\
<div class=\"line\">                bytesNeeded += uvs-&gt;array()-&gt;bytes();</div>\n\
<div class=\"line\">                ++buffersNeeded;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Stop using VBOs if we have exceeded the limit</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (theBufferRegistry().reserve(bytesNeeded, buffersNeeded)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!vboIndices) {</div>\n\
<div class=\"line\">                vboIndices = VBOBuffer::create(indices);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!vboPositions) {</div>\n\
<div class=\"line\">                vboPositions = VBOBuffer::create(positions);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (normals &amp;&amp; !vboNormals) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (areNormalsFlipped) {</div>\n\
<div class=\"line\">                    vboNormals = VBOBuffer::createFlippedNormals(normals);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    vboNormals = VBOBuffer::create(normals);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (uvs &amp;&amp; !vboUVs) {</div>\n\
<div class=\"line\">                vboUVs = VBOBuffer::create(uvs);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (Config::useVertexArrayWhenVRAMIsLow()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// All VBOs are in use, no more space for new VBOs. Use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// vertex arrays instead.</span></div>\n\
<div class=\"line\">                bindingType = kVertexArrays;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">                vboIndices.reset();</div>\n\
<div class=\"line\">                vboPositions.reset();</div>\n\
<div class=\"line\">                vboNormals.reset();</div>\n\
<div class=\"line\">                vboUVs.reset();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// There is not enough VRAM available to keep VBOs around</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// from frame to frame. Draw using temporary VBOs instead.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!vboIndices) {</div>\n\
<div class=\"line\">                    vboIndices = VBOBuffer::create(indices, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!vboPositions) {</div>\n\
<div class=\"line\">                    vboPositions = VBOBuffer::create(positions, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (normals &amp;&amp; !vboNormals) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (areNormalsFlipped) {</div>\n\
<div class=\"line\">                        vboNormals = VBOBuffer::createFlippedNormals(normals, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        vboNormals = VBOBuffer::create(normals, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uvs &amp;&amp; !vboUVs) {</div>\n\
<div class=\"line\">                    vboUVs = VBOBuffer::create(uvs, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Extra checks to see if vertex arrays can be safely used.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (bindingType == kVertexArrays) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (Config::useGLPrimitivesInsteadOfVA()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// For some reason, using vertex arrays on Windows/nVidia</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Quadro gfx leads to memory corruption. Using primitive</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// OpenGL calls instead as a workaround.</span></div>\n\
<div class=\"line\">            bindingType = kPrimitives;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (areNormalsFlipped) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// FIXME: We should probably implement a faster way to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// flip normals than reverting to glBegin()/glEnd()</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// primitives...</span></div>\n\
<div class=\"line\">            bindingType = kPrimitives;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">     </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (fLastBindingType) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPrimitives: </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (bindingType) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kPrimitives:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kVertexArrays:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glEnableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">                        positionsRead = positions-&gt;readableInterface();</div>\n\
<div class=\"line\">                        gGLFT-&gt;glVertexPointer(3, MGL_FLOAT, 0, positionsRead-&gt;get());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (normals) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glEnableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                        normalsRead = normals-&gt;readableInterface();</div>\n\
<div class=\"line\">                        gGLFT-&gt;glNormalPointer(MGL_FLOAT, 0, normalsRead-&gt;get());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glEnableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                        uvsRead = uvs-&gt;readableInterface();</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoordPointer(2, MGL_FLOAT, 0, uvsRead-&gt;get());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kVBOs:</div>\n\
<div class=\"line\">                    gGLFT-&gt;glEnableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboPositions-&gt;name());</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertexPointer(3, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboNormals) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glEnableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboNormals-&gt;name());</div>\n\
<div class=\"line\">                        gGLFT-&gt;glNormalPointer(MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboUVs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glEnableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboUVs-&gt;name());</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoordPointer(2, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ELEMENT_ARRAY_BUFFER_ARB, vboIndices-&gt;name());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVertexArrays: </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (bindingType) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kPrimitives:</div>\n\
<div class=\"line\">                    gGLFT-&gt;glDisableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fNormals) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kVertexArrays:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (positions != fPositions || !positions-&gt;array()-&gt;isReadable()) {</div>\n\
<div class=\"line\">                        positionsRead = positions-&gt;readableInterface();</div>\n\
<div class=\"line\">                        gGLFT-&gt;glVertexPointer(3, MGL_FLOAT, 0, positionsRead-&gt;get());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (normals) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fNormals)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (normals != fNormals || !normals-&gt;array()-&gt;isReadable()) {</div>\n\
<div class=\"line\">                            normalsRead = normals-&gt;readableInterface();</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormalPointer(MGL_FLOAT, 0, normalsRead-&gt;get());</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fNormals) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fUVs)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (uvs != fUVs || !uvs-&gt;array()-&gt;isReadable()) {</div>\n\
<div class=\"line\">                            uvsRead = uvs-&gt;readableInterface();</div>\n\
<div class=\"line\">                            gGLFT-&gt;glTexCoordPointer(2, MGL_FLOAT, 0, uvsRead-&gt;get());</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kVBOs:</div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboPositions-&gt;name());</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertexPointer(3, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboNormals) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fNormals)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboNormals-&gt;name());</div>\n\
<div class=\"line\">                        gGLFT-&gt;glNormalPointer(MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboUVs) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fUVs)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboUVs-&gt;name());</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoordPointer(2, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ELEMENT_ARRAY_BUFFER_ARB, vboIndices-&gt;name());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVBOs: </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (bindingType) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kPrimitives:</div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ELEMENT_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    gGLFT-&gt;glDisableClientState(MGL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fVBONormals) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fVBOUVs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kVertexArrays:</div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ELEMENT_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        positionsRead = positions-&gt;readableInterface();</div>\n\
<div class=\"line\">                        gGLFT-&gt;glVertexPointer(3, MGL_FLOAT, 0, positionsRead-&gt;get());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (normals) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fVBONormals)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                        normalsRead = normals-&gt;readableInterface();</div>\n\
<div class=\"line\">                        gGLFT-&gt;glNormalPointer(MGL_FLOAT, 0, normalsRead-&gt;get());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fVBONormals) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fVBOUVs)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                        uvsRead = uvs-&gt;readableInterface();</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoordPointer(2, MGL_FLOAT, 0, uvsRead-&gt;get());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kVBOs:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboPositions != fVBOPositions) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboPositions-&gt;name());</div>\n\
<div class=\"line\">                        gGLFT-&gt;glVertexPointer(3, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboNormals) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fVBONormals)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (vboNormals != fVBONormals) {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboNormals-&gt;name());</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormalPointer(MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fVBONormals) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glNormalPointer(MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboUVs) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!fVBOUVs)</div>\n\
<div class=\"line\">                            gGLFT-&gt;glEnableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (vboUVs != fVBOUVs) {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, vboUVs-&gt;name());</div>\n\
<div class=\"line\">                            gGLFT-&gt;glTexCoordPointer(2, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glDisableClientState(MGL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glBindBufferARB(MGL_ARRAY_BUFFER_ARB, 0);</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoordPointer(2, MGL_FLOAT, 0, 0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    gGLFT-&gt;glBindBufferARB(MGL_ELEMENT_ARRAY_BUFFER_ARB, vboIndices-&gt;name());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fIndices           = indices;</div>\n\
<div class=\"line\">    fPositions         = positions;</div>\n\
<div class=\"line\">    fNormals           = normals;</div>\n\
<div class=\"line\">    fUVs               = uvs;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fVBOIndices        = vboIndices;</div>\n\
<div class=\"line\">    fVBOPositions      = vboPositions;</div>\n\
<div class=\"line\">    fVBONormals        = vboNormals;</div>\n\
<div class=\"line\">    fVBOUVs            = vboUVs;</div>\n\
<div class=\"line\">    fAreNormalsFlipped = areNormalsFlipped;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fLastBindingType = bindingType;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fLastBindingType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOProxy::drawVertices(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> VBOMode                               vboMode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We may need to read from the buffers in this function and also in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// updateBuffers.  So to avoid possibly converting the buffers twice, we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// put the ReadInterfacePtrs in this scope and share them with updateBuffers.</span></div>\n\
<div class=\"line\">    IndexBuffer::ReadInterfacePtr indicesRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr positionsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr normalsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr uvsRead;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This draws some vertices multiple times. Unfortunately, there</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is no easy way to draw each vertices only once without</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// generating a sorted list of the vertices. This is therefore</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// probably the most efficient way to draw the wireframe vertices</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// on the fly.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// A more efficient solution would be to store an index array of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the wireframe vertices in the ShapeSample object. We might</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// implement this at a later time if it proved necessary.</span></div>\n\
<div class=\"line\">    BindingType bindingType = updateBuffers(</div>\n\
<div class=\"line\">        sample-&gt;wireVertIndices(),</div>\n\
<div class=\"line\">        sample-&gt;positions(),</div>\n\
<div class=\"line\">        std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">        vboMode,</div>\n\
<div class=\"line\">        positionsRead,</div>\n\
<div class=\"line\">        normalsRead,</div>\n\
<div class=\"line\">        uvsRead</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (bindingType) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPrimitives:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numPoints = fIndices-&gt;numIndices();</div>\n\
<div class=\"line\">                indicesRead = fIndices-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* <span class=\"keyword\">const</span> indices = indicesRead-&gt;get();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!positionsRead)</div>\n\
<div class=\"line\">                    positionsRead = fPositions-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* <span class=\"keyword\">const</span> verts = positionsRead-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glBegin(MGL_POINTS);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numPoints; ++i) {</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertex3f(verts[indices[i]*3 + 0],</div>\n\
<div class=\"line\">                                      verts[indices[i]*3 + 1],</div>\n\
<div class=\"line\">                                      verts[indices[i]*3 + 2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                gGLFT-&gt;glEnd();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVertexArrays:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                indicesRead = fIndices-&gt;readableInterface();</div>\n\
<div class=\"line\">                gGLFT-&gt;glDrawElements(</div>\n\
<div class=\"line\">                    MGL_POINTS,</div>\n\
<div class=\"line\">                    MGLsizei(fIndices-&gt;numIndices()),</div>\n\
<div class=\"line\">                    MGL_UNSIGNED_INT,</div>\n\
<div class=\"line\">                    indicesRead-&gt;get());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVBOs:</div>\n\
<div class=\"line\">            gGLFT-&gt;glDrawElements(</div>\n\
<div class=\"line\">                MGL_POINTS,</div>\n\
<div class=\"line\">                MGLsizei(fIndices-&gt;numIndices()),</div>\n\
<div class=\"line\">                MGL_UNSIGNED_INT,</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">void</span>*)(fIndices-&gt;beginIdx() * <span class=\"keyword\">sizeof</span>(index_t)));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOProxy::drawWireframe(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> VBOMode                               vboMode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We may need to read from the buffers in this function and also in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// updateBuffers.  So to avoid possibly converting the buffers twice, we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// put the ReadInterfacePtrs in this scope and share them with updateBuffers.</span></div>\n\
<div class=\"line\">    IndexBuffer::ReadInterfacePtr indicesRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr positionsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr normalsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr uvsRead;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    BindingType bindingType = updateBuffers(</div>\n\
<div class=\"line\">        sample-&gt;wireVertIndices(),</div>\n\
<div class=\"line\">        sample-&gt;positions(),</div>\n\
<div class=\"line\">        std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">        vboMode,</div>\n\
<div class=\"line\">        positionsRead,</div>\n\
<div class=\"line\">        normalsRead,</div>\n\
<div class=\"line\">        uvsRead</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (bindingType) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPrimitives:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numWires = fIndices-&gt;numIndices() / 2;</div>\n\
<div class=\"line\">                indicesRead = fIndices-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* <span class=\"keyword\">const</span> indices = indicesRead-&gt;get();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!positionsRead)</div>\n\
<div class=\"line\">                    positionsRead = fPositions-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* <span class=\"keyword\">const</span> verts = positionsRead-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glBegin(MGL_LINES);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numWires; ++i) {</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertex3f(verts[indices[2*i + 0]*3 + 0],</div>\n\
<div class=\"line\">                                      verts[indices[2*i + 0]*3 + 1],</div>\n\
<div class=\"line\">                                      verts[indices[2*i + 0]*3 + 2]);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertex3f(verts[indices[2*i + 1]*3 + 0],</div>\n\
<div class=\"line\">                                      verts[indices[2*i + 1]*3 + 1],</div>\n\
<div class=\"line\">                                      verts[indices[2*i + 1]*3 + 2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                gGLFT-&gt;glEnd();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVertexArrays:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                indicesRead = fIndices-&gt;readableInterface();</div>\n\
<div class=\"line\">                gGLFT-&gt;glDrawElements(</div>\n\
<div class=\"line\">                    MGL_LINES,</div>\n\
<div class=\"line\">                    MGLsizei(fIndices-&gt;numIndices()),</div>\n\
<div class=\"line\">                    MGL_UNSIGNED_INT,</div>\n\
<div class=\"line\">                    indicesRead-&gt;get());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVBOs:</div>\n\
<div class=\"line\">            gGLFT-&gt;glDrawElements(</div>\n\
<div class=\"line\">                MGL_LINES,</div>\n\
<div class=\"line\">                MGLsizei(fIndices-&gt;numIndices()),</div>\n\
<div class=\"line\">                MGL_UNSIGNED_INT,</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">void</span>*)(fIndices-&gt;beginIdx() * <span class=\"keyword\">sizeof</span>(index_t)));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOProxy::drawTriangles(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span>                                groupId,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> NormalsMode                           normalsMode,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> UVsMode                               uvsMode,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> VBOMode                               vboMode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We may need to read from the buffers in this function and also in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// updateBuffers.  So to avoid possibly converting the buffers twice, we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// put the ReadInterfacePtrs in this scope and share them with updateBuffers.</span></div>\n\
<div class=\"line\">    IndexBuffer::ReadInterfacePtr indicesRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr positionsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr normalsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr uvsRead;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    BindingType bindingType = updateBuffers(</div>\n\
<div class=\"line\">        sample-&gt;triangleVertIndices(groupId),</div>\n\
<div class=\"line\">        sample-&gt;positions(),</div>\n\
<div class=\"line\">        normalsMode != kNoNormals ? sample-&gt;normals() : std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        uvsMode != kNoUVs         ? sample-&gt;uvs()     : std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        normalsMode == kBackNormals,</div>\n\
<div class=\"line\">        vboMode,</div>\n\
<div class=\"line\">        positionsRead,</div>\n\
<div class=\"line\">        normalsRead,</div>\n\
<div class=\"line\">        uvsRead</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (bindingType) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPrimitives:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numTriangles = fIndices-&gt;numIndices() / 3;</div>\n\
<div class=\"line\">                indicesRead = fIndices-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* <span class=\"keyword\">const</span> indices = indicesRead-&gt;get();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!positionsRead)</div>\n\
<div class=\"line\">                    positionsRead = fPositions-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* <span class=\"keyword\">const</span> verts = positionsRead-&gt;get();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* norms = NULL;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fNormals) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!normalsRead)</div>\n\
<div class=\"line\">                        normalsRead = fNormals-&gt;readableInterface();</div>\n\
<div class=\"line\">                    norms = normalsRead-&gt;get();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* uvs = NULL;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!uvsRead)</div>\n\
<div class=\"line\">                        uvsRead = fUVs-&gt;readableInterface();</div>\n\
<div class=\"line\">                    uvs = uvsRead-&gt;get();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> areNormalsFlipped = fAreNormalsFlipped;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">                gGLFT-&gt;glBegin(MGL_TRIANGLES);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numTriangles; ++i) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> index_t idx0 = indices[3*i + 0]*3;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> index_t idx1 = indices[3*i + 1]*3;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> index_t idx2 = indices[3*i + 2]*3;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                    <span class=\"comment\">// Index 0</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (norms) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (areNormalsFlipped) {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormal3f(</div>\n\
<div class=\"line\">                                -norms[idx0 + 0], -norms[idx0 + 1], -norms[idx0 + 2]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormal3f(</div>\n\
<div class=\"line\">                                +norms[idx0 + 0], +norms[idx0 + 1], +norms[idx0 + 2]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoord2f(</div>\n\
<div class=\"line\">                            uvs[idx0 + 0], uvs[idx0 + 1]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertex3f(</div>\n\
<div class=\"line\">                        verts[idx0 + 0], verts[idx0 + 1], verts[idx0 + 2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Index 1</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (norms) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (areNormalsFlipped) {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormal3f(</div>\n\
<div class=\"line\">                                -norms[idx1 + 0], -norms[idx1 + 1], -norms[idx1 + 2]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormal3f(</div>\n\
<div class=\"line\">                                +norms[idx1 + 0], +norms[idx1 + 1], +norms[idx1 + 2]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoord2f(</div>\n\
<div class=\"line\">                            uvs[idx1 + 0], uvs[idx1 + 1]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertex3f(</div>\n\
<div class=\"line\">                        verts[idx1 + 0], verts[idx1 + 1], verts[idx1 + 2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Index 2</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (norms) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (areNormalsFlipped) {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormal3f(</div>\n\
<div class=\"line\">                                -norms[idx2 + 0], -norms[idx2 + 1], -norms[idx2 + 2]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                            gGLFT-&gt;glNormal3f(</div>\n\
<div class=\"line\">                                +norms[idx2 + 0], +norms[idx2 + 1], +norms[idx2 + 2]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                        gGLFT-&gt;glTexCoord2f(</div>\n\
<div class=\"line\">                            uvs[idx2 + 0], uvs[idx2 + 1]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    gGLFT-&gt;glVertex3f(</div>\n\
<div class=\"line\">                        verts[idx2 + 0], verts[idx2 + 1], verts[idx2 + 2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                gGLFT-&gt;glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// For safety...</span></div>\n\
<div class=\"line\">                gGLFT-&gt;glTexCoord2f(0.0f, 0.0f);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVertexArrays:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                indicesRead = fIndices-&gt;readableInterface();</div>\n\
<div class=\"line\">                gGLFT-&gt;glDrawElements(</div>\n\
<div class=\"line\">                    MGL_TRIANGLES,</div>\n\
<div class=\"line\">                    MGLsizei(fIndices-&gt;numIndices()),</div>\n\
<div class=\"line\">                    MGL_UNSIGNED_INT,</div>\n\
<div class=\"line\">                    indicesRead-&gt;get());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVBOs:</div>\n\
<div class=\"line\">            gGLFT-&gt;glDrawElements(</div>\n\
<div class=\"line\">                MGL_TRIANGLES,</div>\n\
<div class=\"line\">                MGLsizei(fIndices-&gt;numIndices()),</div>\n\
<div class=\"line\">                MGL_UNSIGNED_INT,</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">void</span>*)(fIndices-&gt;beginIdx() * <span class=\"keyword\">sizeof</span>(index_t)));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOProxy::drawBoundingBox(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> overrideShadedState  <span class=\"comment\">/* = false */</span></div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    drawBoundingBox(sample-&gt;boundingBox(), overrideShadedState);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VBOProxy::drawBoundingBox(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> overrideShadedState  <span class=\"comment\">/* = false */</span></div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We may need to read from the buffers in this function and also in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// updateBuffers.  So to avoid possibly converting the buffers twice, we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// put the ReadInterfacePtrs in this scope and share them with updateBuffers.</span></div>\n\
<div class=\"line\">    IndexBuffer::ReadInterfacePtr indicesRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr positionsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr normalsRead;</div>\n\
<div class=\"line\">    VertexBuffer::ReadInterfacePtr uvsRead;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    BindingType bindingType = updateBuffers(</div>\n\
<div class=\"line\">        UnitBoundingBox::indices(),</div>\n\
<div class=\"line\">        UnitBoundingBox::positions(),</div>\n\
<div class=\"line\">        std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">        <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">        kDontUseVBO,</div>\n\
<div class=\"line\">        positionsRead,</div>\n\
<div class=\"line\">        normalsRead,</div>\n\
<div class=\"line\">        uvsRead</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// A little hack. We have to draw bounding box in shaded mode.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Override OpenGL Shaded state for bounding box drawing</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> lightingWasOn = <span class=\"keyword\">false</span>, depthMaskWasOn = <span class=\"keyword\">false</span>, stippleWasOn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> prevColor[4];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (overrideShadedState) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Turn off lighting</span></div>\n\
<div class=\"line\">        lightingWasOn = gGLFT-&gt;glIsEnabled(MGL_LIGHTING) == MGL_TRUE;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (lightingWasOn) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glDisable(MGL_LIGHTING);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Turn on depth write</span></div>\n\
<div class=\"line\">        MGLboolean depthWriteMask = MGL_TRUE;</div>\n\
<div class=\"line\">        gGLFT-&gt;glGetBooleanv(MGL_DEPTH_WRITEMASK, &amp;depthWriteMask);</div>\n\
<div class=\"line\">        depthMaskWasOn = depthWriteMask == MGL_TRUE;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!depthMaskWasOn) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glDepthMask(MGL_TRUE);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Turn on line stipple</span></div>\n\
<div class=\"line\">        stippleWasOn = gGLFT-&gt;glIsEnabled(MGL_LINE_STIPPLE) == MGL_TRUE;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stippleWasOn) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glEnable(MGL_LINE_STIPPLE);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set default wireframe color</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glGetFloatv(MGL_CURRENT_COLOR, prevColor);</div>\n\
<div class=\"line\">        gGLFT-&gt;glColor4f(0.0f, 0.016f, 0.376f, 1.0f);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (bindingType) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kPrimitives:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We are using primitives</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> w = (float) boundingBox.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a6cddcbf72c80144aa2e6501abb150c30\">width</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> h = (float) boundingBox.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afa7750092d5dcf402c83fb5adba91453\">height</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> d = (float) boundingBox.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a65c72a51aba9fc4233b58751dd712e43\">depth</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Below we just two sides and then connect</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the edges together</span></div>\n\
<div class=\"line\">            <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> minVertex = boundingBox.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Draw first side</span></div>\n\
<div class=\"line\">            gGLFT-&gt;glBegin( MGL_LINE_LOOP );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> vertex = minVertex;</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0],   (<span class=\"keywordtype\">float</span>)vertex[1],   (<span class=\"keywordtype\">float</span>)vertex[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0]+w, (<span class=\"keywordtype\">float</span>)vertex[1],   (<span class=\"keywordtype\">float</span>)vertex[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0]+w, (<span class=\"keywordtype\">float</span>)vertex[1]+h, (<span class=\"keywordtype\">float</span>)vertex[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0],   (<span class=\"keywordtype\">float</span>)vertex[1]+h, (<span class=\"keywordtype\">float</span>)vertex[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0],   (<span class=\"keywordtype\">float</span>)vertex[1],   (<span class=\"keywordtype\">float</span>)vertex[2] );</div>\n\
<div class=\"line\">            gGLFT-&gt;glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Draw second side</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> sideFactor(0,0,d);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> vertex2 = minVertex + sideFactor;</div>\n\
<div class=\"line\">            gGLFT-&gt;glBegin( MGL_LINE_LOOP );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0],   (<span class=\"keywordtype\">float</span>)vertex2[1],   (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0]+w, (<span class=\"keywordtype\">float</span>)vertex2[1],   (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0]+w, (<span class=\"keywordtype\">float</span>)vertex2[1]+h, (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0],   (<span class=\"keywordtype\">float</span>)vertex2[1]+h, (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0],   (<span class=\"keywordtype\">float</span>)vertex2[1],   (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">            gGLFT-&gt;glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Connect the edges together</span></div>\n\
<div class=\"line\">            gGLFT-&gt;glBegin( MGL_LINES );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0],  (<span class=\"keywordtype\">float</span>)vertex2[1],  (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0],   (<span class=\"keywordtype\">float</span>)vertex[1],   (<span class=\"keywordtype\">float</span>)vertex[2]  );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0]+w,  (<span class=\"keywordtype\">float</span>)vertex2[1],  (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0]+w,   (<span class=\"keywordtype\">float</span>)vertex[1],   (<span class=\"keywordtype\">float</span>)vertex[2]  );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0]+w,  (<span class=\"keywordtype\">float</span>)vertex2[1]+h,  (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0]+w,   (<span class=\"keywordtype\">float</span>)vertex[1]+h,   (<span class=\"keywordtype\">float</span>)vertex[2]  );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex2[0],  (<span class=\"keywordtype\">float</span>)vertex2[1]+h,  (<span class=\"keywordtype\">float</span>)vertex2[2] );</div>\n\
<div class=\"line\">                gGLFT-&gt;glVertex3f( (<span class=\"keywordtype\">float</span>)vertex[0],   (<span class=\"keywordtype\">float</span>)vertex[1]+h,   (<span class=\"keywordtype\">float</span>)vertex[2]  );</div>\n\
<div class=\"line\">            gGLFT-&gt;glEnd();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kVertexArrays:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We are using vertex arrays</span></div>\n\
<div class=\"line\">            gGLFT-&gt;glPushMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Prepare the matrix for the unit bounding box</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> boundingBoxMatrix = </div>\n\
<div class=\"line\">                UnitBoundingBox::boundingBoxMatrix(boundingBox);</div>\n\
<div class=\"line\">            gGLFT-&gt;glMultMatrixd(boundingBoxMatrix.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Draw the bounding box</span></div>\n\
<div class=\"line\">            indicesRead = fIndices-&gt;readableInterface();</div>\n\
<div class=\"line\">            gGLFT-&gt;glDrawElements(MGL_LINES, 24, MGL_UNSIGNED_INT, indicesRead-&gt;get());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Restore the matrix</span></div>\n\
<div class=\"line\">            gGLFT-&gt;glPopMatrix();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kVBOs:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// should not get here</span></div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore the OpenGL state to draw shaded</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (overrideShadedState) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Lighting</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (lightingWasOn) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glEnable(MGL_LIGHTING);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Depth write</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!depthMaskWasOn) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glDepthMask(MGL_FALSE);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Line stipple</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stippleWasOn) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glDisable(MGL_LINE_STIPPLE);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Color</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glColor4fv(prevColor);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";