var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: simpleNoiseShader/simpleNoiseShaderOverride.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'simple_noise_shader_2simple_noise_shader_override_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: simpleNoiseShader/simpleNoiseShaderOverride.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">simpleNoiseShader/simpleNoiseShaderOverride.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the implementation of MPxShadingNodeOverride that tells Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">// how to build and manage a VP2 shading fragment for the simpleNoiseShader node</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the DG.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In addition to registering fragments and associating a fragment graph with</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the node, this override also manages some additional parameters on the final</span></div>\n\
<div class=\"line\"><span class=\"comment\">// shading effect. Specifically, the fragment defines a texture and sampler</span></div>\n\
<div class=\"line\"><span class=\"comment\">// parameter pair for the noise lookup table. Those parameters are not</span></div>\n\
<div class=\"line\"><span class=\"comment\">// associated with any attributes on the Maya node and thus must be handled</span></div>\n\
<div class=\"line\"><span class=\"comment\">// manually.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The noise lookup table is a complete copy of Maya&#39;s noise table accessed</span></div>\n\
<div class=\"line\"><span class=\"comment\">// through MRenderUtil::valueInNoiseTable(). This is packed into a 3D texture</span></div>\n\
<div class=\"line\"><span class=\"comment\">// which the pixel shader can sample to get noise values to produce a result</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that is consistent with the compute() method of the simpleNoiseShader node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A static method handles the definition and registration of the actual</span></div>\n\
<div class=\"line\"><span class=\"comment\">// shading fragments and the final fragment graph. Please see the comments in</span></div>\n\
<div class=\"line\"><span class=\"comment\">// registerFragments() for more details.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;simpleNoiseShaderOverride.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFragmentManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTextureManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MShaderManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderUtil.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation-specific data and helper functions</span></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sFinalFragmentGraphName(<span class=\"stringliteral\">&quot;simpleNoise&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sNoiseLookupTextureName(<span class=\"stringliteral\">&quot;simpleNoiseLookupTexture&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;float&gt;&amp; GetMayaNoiseTable()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Static so as to only pull the noise data once (it&#39;s constant)</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> std::vector&lt;float&gt; sNoiseData;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sNoiseData.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Pack entire noise table into an array, remapping from</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the [-1,1] range to the [0,1] range. The pixel shader</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// will do the inverse operation to extract the real</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// data from the texture.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dataSize = <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_util.html#a8d8f6680130403e05c24da486597b82c\">MRenderUtil::noiseTableSize</a>();</div>\n\
<div class=\"line\">            sNoiseData.resize(dataSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;dataSize; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                sNoiseData[i] = (<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_util.html#a9af45a5223ef6b235a67e607e30e7f84\">MRenderUtil::valueInNoiseTable</a>(i) + 1.0f)/2.0f;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        assert(sNoiseData.size() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_util.html#a8d8f6680130403e05c24da486597b82c\">MRenderUtil::noiseTableSize</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sNoiseData;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shading_node_override.html\">MHWRender::MPxShadingNodeOverride</a>* simpleNoiseShaderOverride::creator(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> simpleNoiseShaderOverride(obj);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">simpleNoiseShaderOverride::simpleNoiseShaderOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">: MPxShadingNodeOverride(obj)</div>\n\
<div class=\"line\">, fObject(obj)</div>\n\
<div class=\"line\">, fNoiseTexture(NULL)</div>\n\
<div class=\"line\">, fNoiseSamplerState(NULL)</div>\n\
<div class=\"line\">, fResolvedNoiseMapName(<span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\">, fResolvedNoiseSamplerName(<span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">simpleNoiseShaderOverride::~simpleNoiseShaderOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Release texture</span></div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureMgr =</div>\n\
<div class=\"line\">            renderer-&gt;<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (textureMgr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            textureMgr-&gt;<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(fNoiseTexture);</div>\n\
<div class=\"line\">            fNoiseTexture = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release sampler state</span></div>\n\
<div class=\"line\">    <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1024724a856ce82cecfaf79bc0c6d6c4\">MHWRender::MStateManager::releaseSamplerState</a>(fNoiseSamplerState);</div>\n\
<div class=\"line\">    fNoiseSamplerState = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MHWRender::DrawAPI simpleNoiseShaderOverride::supportedDrawAPIs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Support all available draw APIs (all fragments have an implementation for</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// each).</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span></div>\n\
<div class=\"line\">        MHWRender::kOpenGL |</div>\n\
<div class=\"line\">        MHWRender::kDirectX11 |</div>\n\
<div class=\"line\">        MHWRender::kOpenGLCoreProfile;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> simpleNoiseShaderOverride::fragmentName()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Reset cached parameter names since the effect is being rebuilt</span></div>\n\
<div class=\"line\">    fResolvedNoiseMapName = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    fResolvedNoiseSamplerName = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the name of the full fragment graph</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sFinalFragmentGraphName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> simpleNoiseShaderOverride::getCustomMappings(</div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping_list.html\">MHWRender::MAttributeParameterMappingList</a>&amp; mappings)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set up some mappings for the noise map parameters on fragment, as there</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is no correspondence to attributes on the node for them.</span></div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping.html\">MHWRender::MAttributeParameterMapping</a> mapMapping(</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;noiseLookupMap&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mappings.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping_list.html#a651f7db3e2e91cdb1914be13ff70bffa\">append</a>(mapMapping);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping.html\">MHWRender::MAttributeParameterMapping</a> textureSamplerMapping(</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;noiseLookupMapSampler&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mappings.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping_list.html#a651f7db3e2e91cdb1914be13ff70bffa\">append</a>(textureSamplerMapping);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> simpleNoiseShaderOverride::updateShader(</div>\n\
<div class=\"line\">    <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>&amp; shader,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping_list.html\">MHWRender::MAttributeParameterMappingList</a>&amp; mappings)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Handle resolved name caching</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fResolvedNoiseMapName.length() == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping.html\">MHWRender::MAttributeParameterMapping</a>* mapping =</div>\n\
<div class=\"line\">            mappings.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping_list.html#ad6a8e8b308830e3ee064dedfda768104\">findByParameterName</a>(<span class=\"stringliteral\">&quot;noiseLookupMap&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mapping)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fResolvedNoiseMapName = mapping-&gt;<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping.html#ad6ede1f5fccb9110ca5a4a0efa3c94f4\">resolvedParameterName</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fResolvedNoiseSamplerName.length() == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping.html\">MHWRender::MAttributeParameterMapping</a>* mapping =</div>\n\
<div class=\"line\">            mappings.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping_list.html#ad6a8e8b308830e3ee064dedfda768104\">findByParameterName</a>(<span class=\"stringliteral\">&quot;noiseLookupMapSampler&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mapping)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fResolvedNoiseSamplerName = mapping-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_attribute_parameter_mapping.html#ad6ede1f5fccb9110ca5a4a0efa3c94f4\">resolvedParameterName</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the parameters on the shader</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fResolvedNoiseMapName.length() &gt; 0 &amp;&amp;</div>\n\
<div class=\"line\">        fResolvedNoiseSamplerName.length() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Set a point-clamp sampler to the shader</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fNoiseSamplerState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html\">MHWRender::MSamplerStateDesc</a> desc;</div>\n\
<div class=\"line\">            desc.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html#a0280d6ae8821c595d0300d0e65ca5adf\">filter</a> = <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac4b92e6b8c820ded95490092f8bfff74a52e14aff9dd4572590cdbfe29c0b79a9\">MHWRender::MSamplerState::kMinMagMipPoint</a>;</div>\n\
<div class=\"line\">            desc.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html#ac29858bdb9a4bcfb0bc83f6ba10bf77e\">addressU</a> = desc.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html#a84050ce870bec08011b645ee249aa845\">addressV</a> = desc.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html#a7644f0579397d01aaf922218f129983f\">addressW</a> =</div>\n\
<div class=\"line\">                <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac06d679b414bf6ad84118e6e9712fd58a6f6620cda8602399b533161e40c15fc3\">MHWRender::MSamplerState::kTexClamp</a>;</div>\n\
<div class=\"line\">            desc.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html#a3fac86a5d9783d090e70a4053380dfac\">minLOD</a> = 0;</div>\n\
<div class=\"line\">            desc.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html#ad63b1a492e238f91644a11ab2808c416\">maxLOD</a> = 0;</div>\n\
<div class=\"line\">            fNoiseSamplerState =</div>\n\
<div class=\"line\">                <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a6277961291d22bd82a852c0b9c905570\">MHWRender::MStateManager::acquireSamplerState</a>(desc);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNoiseSamplerState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            shader.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(fResolvedNoiseSamplerName, *fNoiseSamplerState);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Generate the noise lookup table texture if necessary</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fNoiseTexture)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer =</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureMgr =</div>\n\
<div class=\"line\">                renderer ? renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>() : NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (textureMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// First, search the texture cache to see if another instance of</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// this override has already generated the texture. We can reuse</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// it to save GPU memory since the noise data is constant.</span></div>\n\
<div class=\"line\">                fNoiseTexture =</div>\n\
<div class=\"line\">                    textureMgr-&gt;<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a3d56d3a0cf7e5930142ae742b43c64b4\">findTexture</a>(sNoiseLookupTextureName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Not in cache, so we need to actually build the texture</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!fNoiseTexture)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get Maya&#39;s noise table</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::vector&lt;float&gt;&amp; noiseData = GetMayaNoiseTable();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create a 3D texture containing the data</span></div>\n\
<div class=\"line\">                    <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html\">MHWRender::MTextureDescription</a> desc;</div>\n\
<div class=\"line\">                    desc.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#ad1381bd49c9b737ad9e4755ba31fc9fb\">setToDefault2DTexture</a>();</div>\n\
<div class=\"line\">                    desc.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#a2582291699b63f6ddc938c371b54344e\">fWidth</a> = desc.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#aa3b84951e55674788c9ae0f404a8ee17\">fHeight</a> = desc.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#accfe55705bc42a1e0375259fdfb5ab15\">fDepth</a> =</div>\n\
<div class=\"line\">                        <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_util.html#a8dff67c019e1716dd29b8cf4af2d8f2c\">MRenderUtil::noiseTableCubeSide</a>();</div>\n\
<div class=\"line\">                    desc.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#a970a52e15a6db4682fede9dead7982cc\">fFormat</a> = MHWRender::kR32_FLOAT;</div>\n\
<div class=\"line\">                    desc.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#ad905f7a59df4f73faa690967c4d48bdd\">fTextureType</a> = MHWRender::kVolumeTexture;</div>\n\
<div class=\"line\">                    desc.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#a943c843873579cb41682ad4befe52a4c\">fMipmaps</a> = 1;</div>\n\
<div class=\"line\">                    fNoiseTexture = textureMgr-&gt;<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a04aa3cfef217948abc8edd0f19565f95\">acquireTexture</a>(</div>\n\
<div class=\"line\">                        sNoiseLookupTextureName,</div>\n\
<div class=\"line\">                        desc,</div>\n\
<div class=\"line\">                        (<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>*)&amp;(noiseData[0]),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the texture to the shader instance</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNoiseTexture)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> textureAssignment;</div>\n\
<div class=\"line\">            textureAssignment.<a name=\"a40\"></a>texture = fNoiseTexture;</div>\n\
<div class=\"line\">            shader.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(fResolvedNoiseMapName, textureAssignment);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Static fragment registration/deregistration methods called from plugin</span></div>\n\
<div class=\"line\"><span class=\"comment\">// init/unint functions. Only need to be called once.</span></div>\n\
<div class=\"line\"><a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> simpleNoiseShaderOverride::registerFragments()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get fragment manager for registration</span></div>\n\
<div class=\"line\">    <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html\">MHWRender::MFragmentManager</a>* fragmentMgr =</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()</div>\n\
<div class=\"line\">            ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a0f42783e8eee6f472d6bbb2acb6b2f2d\">getFragmentManager</a>()</div>\n\
<div class=\"line\">            : NULL;</div>\n\
<div class=\"line\">    <span class=\"comment\">// No fragment manager, fail</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fragmentMgr) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Fragments are already registered, return success</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fragmentMgr-&gt;<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#af82d71b3a71c8752d51d0a9cb6081877\">hasFragment</a>(sFinalFragmentGraphName)) <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fragmentName;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* fragmentBody = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// ------------------------------------------------------------------------</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Struct declaration fragment. This fragment provides the declaration of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the output structure of the simple noise fragment graph giving support</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for multiple outputs. The struct fragment must be a part of the final</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// fragment graph in order to ensure that the fragment system includes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the declaration of the struct in the final effect.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fragmentName = <span class=\"stringliteral\">&quot;simpleNoiseOutput&quot;</span>;</div>\n\
<div class=\"line\">    fragmentBody =</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;&lt;fragment uiName=\\&quot;simpleNoiseOutput\\&quot; name=\\&quot;simpleNoiseOutput\\&quot; type=\\&quot;structure\\&quot; class=\\&quot;ShadeFragment\\&quot; version=\\&quot;1.0\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;description&gt;&lt;![CDATA[Struct output for simple noise shader]]&gt;&lt;/description&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;properties&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;struct name=\\&quot;simpleNoiseOutput\\&quot; struct_name=\\&quot;simpleNoiseOutput\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/properties&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;values&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/values&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;outputs&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;alias name=\\&quot;simpleNoiseOutput\\&quot; struct_name=\\&quot;simpleNoiseOutput\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float3 name=\\&quot;outColor\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;outAlpha\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/outputs&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation render=\\&quot;OGSRenderer\\&quot; language=\\&quot;Cg\\&quot; lang_version=\\&quot;2.1\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;function_name val=\\&quot;\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;declaration name=\\&quot;simpleNoiseOutput\\&quot;&gt;&lt;![CDATA[ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;struct simpleNoiseOutput \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float3 outColor; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float outAlpha; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;}; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ]]&gt;&lt;/declaration&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation render=\\&quot;OGSRenderer\\&quot; language=\\&quot;HLSL\\&quot; lang_version=\\&quot;11.0\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;function_name val=\\&quot;\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;declaration name=\\&quot;simpleNoiseOutput\\&quot;&gt;&lt;![CDATA[ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;struct simpleNoiseOutput \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float3 outColor; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float outAlpha; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;}; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ]]&gt;&lt;/declaration&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation render=\\&quot;OGSRenderer\\&quot; language=\\&quot;GLSL\\&quot; lang_version=\\&quot;3.0\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;function_name val=\\&quot;\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;declaration name=\\&quot;simpleNoiseOutput\\&quot;&gt;&lt;![CDATA[ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;struct simpleNoiseOutput \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   vec3 outColor; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float outAlpha; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;}; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ]]&gt;&lt;/declaration&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;&lt;/fragment&gt; \\r\\n&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fragmentName != fragmentMgr-&gt;<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a221c1b902178b12d827dcae51fdca4c8\">addShadeFragmentFromBuffer</a>(fragmentBody, <span class=\"keyword\">false</span>)) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// ------------------------------------------------------------------------</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Actual noise computation fragment. Based on Maya&#39;s &quot;wave&quot; noise type</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// from the 2d procedural noise texture node. Computes a struct output</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// containing both color and alpha to match the outputs of the DG node.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Uses a 3D texture loaded with the entire Maya noise table for generating</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// results consistent with the compute() method of the associated node.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fragmentName = <span class=\"stringliteral\">&quot;simpleNoiseBase&quot;</span>;</div>\n\
<div class=\"line\">    fragmentBody =</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;&lt;fragment uiName=\\&quot;simpleNoiseBase\\&quot; name=\\&quot;simpleNoiseBase\\&quot; type=\\&quot;plumbing\\&quot; class=\\&quot;ShadeFragment\\&quot; version=\\&quot;1.0\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;description&gt;&lt;![CDATA[Computes simple 2D procedural noise]]&gt;&lt;/description&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;properties&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float2 name=\\&quot;uvCoord\\&quot; semantic=\\&quot;mayaUvCoordSemantic\\&quot; flags=\\&quot;varyingInputParam\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;texture3 name=\\&quot;noiseLookupMap\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;sampler name=\\&quot;noiseLookupMapSampler\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;amplitude\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;ratio\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;depthMax\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequency\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequencyRatio\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;time\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;numWaves\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/properties&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;values&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;amplitude\\&quot; value=\\&quot;1.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;ratio\\&quot; value=\\&quot;0.707000\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;depthMax\\&quot; value=\\&quot;3\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequency\\&quot; value=\\&quot;8.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequencyRatio\\&quot; value=\\&quot;2.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;time\\&quot; value=\\&quot;0.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;numWaves\\&quot; value=\\&quot;5\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/values&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;outputs&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;struct name=\\&quot;simpleNoiseBase\\&quot; struct_name=\\&quot;simpleNoiseOutput\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/outputs&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation render=\\&quot;OGSRenderer\\&quot; language=\\&quot;Cg\\&quot; lang_version=\\&quot;2.1\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;function_name val=\\&quot;simpleNoise\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;source&gt;&lt;![CDATA[ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;float simpleNoise_RawNoiseLookup( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int index, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   texture3D noiseLookupMap, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   sampler3D noiseLookupMapSampler) \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int3 index3; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.x = index; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.y = (index&gt;&gt; 5); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.z = (index&gt;&gt; 10); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3 &amp;= 31; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float3 uvw = float3(index3) / 32.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   return (tex3D(noiseLookupMapSampler, uvw).r * 2.0f) - 1.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;} \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;simpleNoiseOutput simpleNoise( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float2 uv, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   texture3D noiseLookupMap, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   sampler3D noiseLookupMapSampler, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float amplitude, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float ratio, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int depthMax, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float frequency, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float frequencyRatio, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float time, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int numWaves) \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   const float M_PI = 3.1415926535897f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   const float M_2PI = 2.0f*M_PI; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   simpleNoiseOutput finalResult; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float timeRatio = sqrt(frequencyRatio); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   uv *= frequency; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float cosine = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float noise = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int depthId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int waveId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int seedOffset = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   while (depthId&lt;depthMax &amp;&amp; waveId&lt;numWaves) { \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       int step = depthId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       int seed = 50*step; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       float2 dir = float2( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;           simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMap, noiseLookupMapSampler), \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;           simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMap, noiseLookupMapSampler)); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       float norm = length(dir); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       if (norm &lt;= 0.0f) continue; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       dir /= norm; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise += cos(dir.x*uv.x*M_2PI + dir.y*uv.y*M_2PI + M_PI*simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMap, noiseLookupMapSampler) + time*M_PI); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ++waveId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       if (waveId &lt; numWaves) continue; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise /= float(numWaves); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       uv *= frequencyRatio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       time *= timeRatio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       cosine += amplitude * noise; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       amplitude *= ratio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       waveId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       seedOffset = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ++depthId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   } \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   cosine = 0.5f*cosine + 0.5f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float noiseVal = (cosine&gt; 1.0f) ? 1.0f : cosine; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   finalResult.outColor = float3(noiseVal, noiseVal, noiseVal); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   finalResult.outAlpha = noiseVal; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   return finalResult; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;} \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ]]&gt;&lt;/source&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation render=\\&quot;OGSRenderer\\&quot; language=\\&quot;HLSL\\&quot; lang_version=\\&quot;11.0\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;function_name val=\\&quot;simpleNoise\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;source&gt;&lt;![CDATA[ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;float simpleNoise_RawNoiseLookup( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int index, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   Texture3D noiseLookupMap, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   sampler noiseLookupMapSampler) \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int3 index3; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.x = index; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.y = (index&gt;&gt; 5); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.z = (index&gt;&gt; 10); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3 &amp;= 31; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float3 uvw = float3(index3) / 32.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   return (noiseLookupMap.SampleLevel(noiseLookupMapSampler, uvw, 0).r * 2.0f) - 1.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;} \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;simpleNoiseOutput simpleNoise( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float2 uv, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   Texture3D noiseLookupMap, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   sampler noiseLookupMapSampler, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float amplitude, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float ratio, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int depthMax, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float frequency, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float frequencyRatio, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float time, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int numWaves) \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   const float M_PI = 3.1415926535897f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   const float M_2PI = 2.0f*M_PI; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   simpleNoiseOutput finalResult; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float timeRatio = sqrt(frequencyRatio); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   uv *= frequency; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float cosine = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float noise = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int depthId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int waveId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int seedOffset = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   while (depthId&lt;depthMax &amp;&amp; waveId&lt;numWaves) { \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       int step = depthId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       int seed = 50*step; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       float2 dir = float2( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;           simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMap, noiseLookupMapSampler), \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;           simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMap, noiseLookupMapSampler)); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       float norm = length(dir); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       if (norm &lt;= 0.0f) continue; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       dir /= norm; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise += cos(dir.x*uv.x*M_2PI + dir.y*uv.y*M_2PI + M_PI*simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMap, noiseLookupMapSampler) + time*M_PI); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ++waveId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       if (waveId &lt; numWaves) continue; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise /= float(numWaves); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       uv *= frequencyRatio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       time *= timeRatio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       cosine += amplitude * noise; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       amplitude *= ratio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       waveId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       seedOffset = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ++depthId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   } \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   cosine = 0.5f*cosine + 0.5f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float noiseVal = (cosine&gt; 1.0f) ? 1.0f : cosine; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   finalResult.outColor = float3(noiseVal, noiseVal, noiseVal); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   finalResult.outAlpha = noiseVal; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   return finalResult; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;} \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ]]&gt;&lt;/source&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;implementation render=\\&quot;OGSRenderer\\&quot; language=\\&quot;GLSL\\&quot; lang_version=\\&quot;3.0\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;function_name val=\\&quot;simpleNoise\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;source&gt;&lt;![CDATA[ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;float simpleNoise_RawNoiseLookup( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int index, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   sampler3D noiseLookupMapSampler) \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   ivec3 index3; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.x = index; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.y = (index &gt;&gt; 5); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3.z = (index &gt;&gt; 10); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   index3 &amp;= 31; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   vec3 uvw = vec3(index3) / 32.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   return (texture(noiseLookupMapSampler, uvw).r * 2.0f) - 1.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;} \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;simpleNoiseOutput simpleNoise( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   vec2 uv, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   sampler3D noiseLookupMapSampler, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float amplitude, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float ratio, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int depthMax, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float frequency, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float frequencyRatio, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float time, \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int numWaves) \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;{ \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   const float M_PI = 3.1415926535897f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   const float M_2PI = 2.0f*M_PI; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   simpleNoiseOutput finalResult; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float timeRatio = sqrt(frequencyRatio); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   uv *= frequency; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float cosine = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float noise = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int depthId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int waveId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   int seedOffset = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   while (depthId&lt;depthMax &amp;&amp; waveId&lt;numWaves) { \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       int step = depthId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       int seed = 50*step; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       vec2 dir = vec2( \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;           simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMapSampler), \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;           simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMapSampler)); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       float norm = length(dir); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       if (norm &lt;= 0.0f) continue; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       dir /= norm; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise += cos(dir.x*uv.x*M_2PI + dir.y*uv.y*M_2PI + M_PI*simpleNoise_RawNoiseLookup(seed + seedOffset++, noiseLookupMapSampler) + time*M_PI); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ++waveId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       if (waveId &lt; numWaves) continue; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise /= float(numWaves); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       uv *= frequencyRatio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       time *= timeRatio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       cosine += amplitude * noise; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       amplitude *= ratio; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       noise = 0.0f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       waveId = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       seedOffset = 0; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ++depthId; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   } \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   cosine = 0.5f*cosine + 0.5f; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   float noiseVal = (cosine &gt; 1.0f) ? 1.0f : cosine; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   finalResult.outColor = vec3(noiseVal, noiseVal, noiseVal); \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   finalResult.outAlpha = noiseVal; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   return finalResult; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;} \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       ]]&gt;&lt;/source&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/implementation&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;&lt;/fragment&gt; \\r\\n&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fragmentName != fragmentMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a221c1b902178b12d827dcae51fdca4c8\">addShadeFragmentFromBuffer</a>(fragmentBody, <span class=\"keyword\">false</span>)) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// ------------------------------------------------------------------------</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Full, final graph made up of previously registered fragments. A picture</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// which flows from top to bottom.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                         simpleNoiseBase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                                |</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                        simpleNoiseOutput</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                                |</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                          &lt;FINAL RESULT&gt;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya&#39;s shader translation system will take this graph and connect UV</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// information where appropriate.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// From Maya&#39;s point of view, this graph is fully representative of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// associated shading node in the DG. All inputs and outputs on this graph</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// are matched to inputs and outputs on the DG node. Connections to other</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// nodes (input or output) will be mirrored by connections to other</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// fragments using the matching parameters.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fragmentName = sFinalFragmentGraphName;</div>\n\
<div class=\"line\">    fragmentBody =</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;&lt;fragment_graph name=\\&quot;simpleNoise\\&quot; ref=\\&quot;simpleNoise\\&quot; class=\\&quot;FragmentGraph\\&quot; version=\\&quot;1.0\\&quot;&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;fragments&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;fragment_ref name=\\&quot;simpleNoiseBase\\&quot; ref=\\&quot;simpleNoiseBase\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;fragment_ref name=\\&quot;simpleNoiseOutput\\&quot; ref=\\&quot;simpleNoiseOutput\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/fragments&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;connections&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;connect from=\\&quot;simpleNoiseBase.simpleNoiseBase\\&quot; to=\\&quot;simpleNoiseOutput.simpleNoiseOutput\\&quot; name=\\&quot;simpleNoiseOutput\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/connections&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;properties&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float2 name=\\&quot;uvCoord\\&quot; ref=\\&quot;simpleNoiseBase.uvCoord\\&quot; semantic=\\&quot;mayaUvCoordSemantic\\&quot; flags=\\&quot;varyingInputParam\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;texture3 name=\\&quot;noiseLookupMap\\&quot; ref=\\&quot;simpleNoiseBase.noiseLookupMap\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;sampler name=\\&quot;noiseLookupMapSampler\\&quot; ref=\\&quot;simpleNoiseBase.noiseLookupMapSampler\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;amplitude\\&quot; ref=\\&quot;simpleNoiseBase.amplitude\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;ratio\\&quot; ref=\\&quot;simpleNoiseBase.ratio\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;depthMax\\&quot; ref=\\&quot;simpleNoiseBase.depthMax\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequency\\&quot; ref=\\&quot;simpleNoiseBase.frequency\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequencyRatio\\&quot; ref=\\&quot;simpleNoiseBase.frequencyRatio\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;time\\&quot; ref=\\&quot;simpleNoiseBase.time\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;numWaves\\&quot; ref=\\&quot;simpleNoiseBase.numWaves\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/properties&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;values&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;amplitude\\&quot; value=\\&quot;1.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;ratio\\&quot; value=\\&quot;0.707000\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;depthMax\\&quot; value=\\&quot;3\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequency\\&quot; value=\\&quot;8.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;frequencyRatio\\&quot; value=\\&quot;2.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;float name=\\&quot;time\\&quot; value=\\&quot;0.0\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;int name=\\&quot;numWaves\\&quot; value=\\&quot;5\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/values&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;outputs&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;       &lt;struct name=\\&quot;simpleNoiseOutput\\&quot; ref=\\&quot;simpleNoiseOutput.simpleNoiseOutput\\&quot; /&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;   &lt;/outputs&gt; \\r\\n&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;&lt;/fragment_graph&gt; \\r\\n&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fragmentName != fragmentMgr-&gt;<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a2264caab6f1d9736fe2e7ccc195e8340\">addFragmentGraphFromBuffer</a>(fragmentBody)) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> simpleNoiseShaderOverride::deregisterFragments()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get fragment manager for deregistration</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html\">MHWRender::MFragmentManager</a>* fragmentMgr =</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()</div>\n\
<div class=\"line\">            ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a0f42783e8eee6f472d6bbb2acb6b2f2d\">getFragmentManager</a>()</div>\n\
<div class=\"line\">            : NULL;</div>\n\
<div class=\"line\">    <span class=\"comment\">// No fragment manager, fail</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fragmentMgr) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove fragments from library on plugin unload</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fragmentMgr-&gt;<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a0986b6896f4fad94fc61ff750583187f\">removeFragment</a>(<span class=\"stringliteral\">&quot;simpleNoiseOutput&quot;</span>)) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fragmentMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a0986b6896f4fad94fc61ff750583187f\">removeFragment</a>(<span class=\"stringliteral\">&quot;simpleNoiseBase&quot;</span>)) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fragmentMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a0986b6896f4fad94fc61ff750583187f\">removeFragment</a>(sFinalFragmentGraphName)) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";