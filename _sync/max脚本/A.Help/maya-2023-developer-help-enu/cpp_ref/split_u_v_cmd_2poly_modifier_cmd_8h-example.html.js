var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: splitUVCmd/polyModifierCmd.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'split_u_v_cmd_2poly_modifier_cmd_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: splitUVCmd/polyModifierCmd.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">splitUVCmd/polyModifierCmd.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef _polyModifierCmd</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _polyModifierCmd</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// File: polyModifierCmd.h</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MEL Command: polyModifierCmd</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Author: Lonnie Li</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Overview:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      polyModifierCmd is a generic base class designed to aid in modifying</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      polygonal meshes. All polys in Maya possess two features: construction</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      history and tweaks. Both of these have a large impact on the structure</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of the object as well as how it can be further manipulated. However,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      they cannot be easily implemented, which is the why we need this abstracted</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      class. polyModifierCmd will automatically handle the DG maintenance of</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      construction history and tweaks on a polygonal mesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      To understand what effect both construction history and tweaks have on</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      a mesh, we need to understand the states of a node. There are three things</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      which will affect the state of a node regarding construction history and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      tweaks. That is:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (1) Does construction history exist?</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (2) Do tweaks exist?</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (3) Is construction history turned on?</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The answer to each of these questions changes how the mesh is interpreted,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      which in turn affects how the mesh can be accessed/modified. Under each</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      circumstance, new modifications on the mesh go through a standard series</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of events. To further illustrate how these affect the interpretation of</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      a mesh, we&#39;ll delve into each case separately looking at the problems</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      that we face in each case.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      In the case where construction history exists, the existence of construction</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      history informs us that there is a single linear DG chain of nodes upstream</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      from the mesh node. That chain is the history chain. At the top of the chain</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      we have the &quot;original&quot; mesh and at the bottom we have the &quot;final&quot; mesh,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      where &quot;original&quot; and &quot;final&quot; represent the respective state of the node with</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      regards to mesh&#39;s history. Each of these nodes are adjoined via the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      inMesh/outMesh attributes, where in and out designate the dataflow into</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      and out of the node. Now, with that aside, attempting to modify a node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      via mutator methods will always write the information onto the inMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      attribute (except in the case of tweaks, where it writes to the cachedInMesh).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This presents a problem if history exists since a DG evaluation will overwrite</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the inMesh of the mesh node, due to the connection from the outMesh of the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      node directly upstream from the mesh. This will discard any modifications</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      made to the mesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      So obviously modifying a mesh directly isn&#39;t possible when history exists.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      To properly modify a mesh with history, we introduce the concept of a modifier</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      node. This polyModifierNode will encapsulate the operations on the mesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      and behave similarly to the other nodes in the history chain. The node will</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      then be inserted into the history chain so that on each DG evaluation, it</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      is always accounted for. The diagram below shows the before and after</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of modifying a mesh with history.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Before modification:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        ____                   ____</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       /    \\                 /    \\</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      | Hist | O --------&gt; O | mesh | O</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       \\____/  |           |  \\____/  |</span></div>\n\
<div class=\"line\"><span class=\"comment\">//            outMesh      inMesh    outMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      After modification:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        ____                   ________                   ____</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       /    \\                 /        \\                 /    \\</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      | Hist | O --------&gt; O | modifier | O --------&gt; O | mesh | O</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       \\____/  |           |  \\________/  |           |  \\____/  |</span></div>\n\
<div class=\"line\"><span class=\"comment\">//            outMesh      inMesh        outMesh      inMesh    outMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (Figure 1. Nodes with History)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      In the case of tweaks: Tweaks are stored on a hidden attribute on the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      mesh. Tweaks are manual component modifications on a mesh (eg. repositioning</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      a vertex). During a DG evaluation, the DG takes the inMesh attribute of</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the node and adds the tweak values onto it to get the final value. From this</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      knowledge we can see that inserting a modifier node ahead of the mesh node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      reverses the order of operations which can be crucial to the structure of the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      resulting mesh if the modification is a topological change. To avoid this</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      problem, we retrieve the tweaks off of the mesh, remove it from the mesh and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      place the tweaks into a polyTweak node. The tweak node is then inserted ahead</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of the modifier node to preserve the order of operations:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Before modification:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                               Tweak</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        ____                   __O__</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       /    \\                 /     \\</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      | Hist | O --------&gt; O | mesh  | O</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       \\____/  |           |  \\_____/  |</span></div>\n\
<div class=\"line\"><span class=\"comment\">//            outMesh      inMesh     outMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      After modification:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                                                      Empty Tweak</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        ____                _____                ________                __O__</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       /    \\              /     \\              /        \\              /     \\</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      | Hist | O -----&gt; O | Tweak | O -----&gt; O | modifier | O -----&gt; O | mesh  | O</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       \\____/  |        |  \\_____/  |        |  \\________/  |        |  \\_____/  |</span></div>\n\
<div class=\"line\"><span class=\"comment\">//            outMesh   inMesh     outMesh   inMesh        outMesh   inMesh     outMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (Figure 2. Node with Tweaks)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The last of the questions deals with whether or not the user has construction</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      history turned on or off. This will change how the node should be modified</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      as well as what the node will look like in the DG following the operation. With</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      history turned on, the user has selected that they would like to keep a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      history chain. So in that case, the resulting mesh would look like the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      diagrams following the operation. On the other hand, with history turned off,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the user has selected that they would not like to see a history chain. From here</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      there are two possible choices to modify the mesh:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (1) Operate on the mesh directly</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (2) Use the DG, like in the above diagrams, then collapse the nodes down into the mesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The only exception to note out of this case is that if the node already possesses</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      history (as would be answered by the first question), this preference is ignored.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      If a node has history, we continue to use history. The user is imposed with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      task of deleting the history on the object first if they would not like to continue</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      using history.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      With History:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        ____                   ____</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       /    \\                 /    \\</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      | Hist | O --------&gt; O | mesh | O</span></div>\n\
<div class=\"line\"><span class=\"comment\">//       \\____/  |           |  \\____/  |</span></div>\n\
<div class=\"line\"><span class=\"comment\">//            outMesh      inMesh    outMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Without History:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//            ____</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           /    \\</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        O | mesh | O     (All history compressed onto the inMesh attribute)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        |  \\____/  |</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      inMesh    outMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (Figure 3. Node with History preference)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This section has described the &quot;why&quot; part of the question regarding this command.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Following sections will provide a more in depth look at &quot;how&quot; this command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      treats each of these situations and what it really does behind the scenes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      to handle the above cases.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// How it works:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This command approaches the various node state cases similarly to the way</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Maya works with construction history and tweaks in polygons. It is important</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      to note that history and tweaks are independent states having no effect on</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      each other (in terms of their state). Thus this section will describe each</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      case independently:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      1) History</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          For history, there are 4 cases that need to be considered:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          (a) History (yes)   -   RecordHistory (yes)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          (b) History (yes)   -   RecordHistory (no)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          (c) History (no)    -   RecordHistory (yes)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          (d) History (no)    -   RecordHistory (no)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          For (a) and (b), this command treats the node identically. Regardless of</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          whether recording history is turned on or off, if history already exists</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          on the node, we treat the node as though recording history is on. As such</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          the command performs the following steps:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (i)     Create a modifier node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (ii)    Find the node directly upstream to the mesh node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (iii)   Disconnect the upstream node and the mesh node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (iv)    Connect the upstream node to the modifier node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (v)     Connect the modifier node to the mesh node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (vi)    Done!</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          For (c), polyModifierCmd needs to generate an input mesh to drive the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          modifier node. To do this, the mesh node is duplicated and connected</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          like the upstream node in the previous two cases:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (i)     Create a modifier node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (ii)    Duplicate the mesh node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (iii)   Connect the duplicate mesh node to the modifier node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (iv)    Connect the modifier node to the mesh node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (v)     Done!</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          For (d), this command is a bit more complicated. There are two approaches</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          that can be done to respect the fact that no history is desired. The first</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          involves using the approach in case (c) and simply &quot;baking&quot; or &quot;flattening&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          the nodes down into the mesh node. Unfortunately, this presents some</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          serious problems with undo, as the Maya API in its current state does not</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          support construction history manipulation. Resorting to the MEL command:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          &quot;delete -ch&quot; would be possible, however undoing the operation would not be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          trivial as calling an undo from within an undo could destabilize the undo</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          queue.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          The second alternative and one that is currently implemented by this class</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          is to respect the &quot;No Construction History&quot; preference strictly by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          not modifying the history chain at all and simply operating directly on the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          mesh. In order to do this and maintain generality, a hook is provided for</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          derived classes to override and place in the code used to directly modify the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          mesh. polyModifierCmd will only call this method under the circumstances</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          of case (d). To prevent code duplication between the operations done in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          modifierNode and the command&#39;s directModifier implementation, the concept of</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          a factory is used. It is recommended that an instance of such a factory is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          stored locally on the command much like it will be on the node. See</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          polyModifierNode.h and polyModifierFty.h for more details.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      2) Tweaks</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          Tweaks are handled as noted above in the description section. However, how</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          they are treated is dependent on the state of history. Using the four cases</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          above:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          For (a), (b) and (c), it is as described in the description section:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (i)     Create a tweak node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (ii)    Extract the tweaks from the mesh node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (iii)   Copy the tweaks onto the tweak node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (iv)    Clear the tweaks from the mesh node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              (v)     Clear the tweaks from the duplicate mesh node (for case (c) only!)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          For (d), we have yet another limitation. Tweaks are not handled in this case</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          because of the same circumstances which give rise to the limitation in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          history section. As such, topological changes may result in some odd behaviour</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          unless the workaround provided in the limitations section is used.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// How to use:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      To use this command there are several things that are required based on the needs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of the command:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Step 1: polyModifierFty</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      1) Create a factory derived from polyModifierFty</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      2) Find and assign any inputs that your modifier will need onto the factory.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      3) Override the polyModifierFty::doIt() method of the factory</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      4) Place your modifier code into the doIt() method of the factory</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Step 2: polyModifierNode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      1) Create a node derived from polyModifierNode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      2) Add any additional input attributes onto the node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      3) Associate the attributes (ie. inMesh --&gt; affects --&gt; outMesh)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      4) Add an instance of your polyModifierFty to the node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      5) Override the MPxNode::compute() method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      6) Retrieve inputs from attributes, setup the factory and call its doIt() in compute()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Step 3: polyModifierCmd</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      1) Create a command derived from polyModifierCmd</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      ---</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      2) Override the polyModifierCmd::initModifierNode() method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      3) Place your node setup code inside the initModifierNode()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      ---</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      4) Add an instance of your polyModifierFty to the command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      5) Cache any input parameters for the factory on the command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      6) Override the polyModifierCmd::directModifier() method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      7) Place your factory setup code and call its doIt() in directModifier()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      ---</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      8) Override the MPxCommand::doIt() method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      9) Place your setup code inside the doIt()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      10) Place the polyModifierCmd setup code inside the doIt()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          (ie. setMeshNode(), setModifierNodeType())</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      11) Call polyModifierCmd::doModifyPoly() inside the doIt()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      ---</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      12) Override the MPxCommand::redoIt() method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      13) Call polyModifierCmd::redoModifyPoly() in redoIt()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      ---</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      14) Override the MPxCommand::undoIt() method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      15) Call polyModifierCmd::undoModifyPoly() in undoIt()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      For more details on each of these steps, please visit the associated method/class</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      headers.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Limitations:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      There is one limitation in polyModifierCmd:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (1) Duplicate mesh created under the &quot;No History / History turned on&quot; case not undoable</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Case (1):</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          Under the &quot;No History / History turned on&quot; case, history is allowed so the DG</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          is used to perform the operation. However, every polyModifierNode requires</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          an input mesh and without any prior history, a mesh input needs to be created.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          polyModifierCmd compensates for this by duplicating the meshNode and marking</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          it as an intermediate object.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          The problem with this duplication is that the only duplicate method in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          Maya API resides in MFnDagNode, which does not have an associated undo/redo</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          mechanism. Attempting to manually delete the node by use of a DGmodifier or</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          the MEL delete command will break the undo/redo mechanism for the entire</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          command. As a result, this duplicate mesh is a remnant of each instance of the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          command excluding undo/redo.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          To work past this limitation, a manual delete from the MEL command line is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          required.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// General Includes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVectorArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Proxies</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>polyModifierCmd : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            polyModifierCmd();</div>\n\
<div class=\"line\">                        ~polyModifierCmd() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Restrict access to derived classes only</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// polyModifierCmd Initialization //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Target polyMesh to modify</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>                            setMeshNode( <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> mesh );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>                        getMeshNode() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Modifier Node Type</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>                            setModifierNodeType( <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> type );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>                            setModifierNodeName( <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>                         getModifierNodeType() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         getModifierNodeName() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// polyModifierCmd Execution //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\">    <span class=\"comment\">// initModifierNode - Derived classes should override this method if</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                    they wish to initialize input attributes on the </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                    modifierNode</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 initModifierNode( <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// directModifier - Derived classes should override this method to provide</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  direct modifications on the meshNode in the case where</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  no history exists and construction history is turned off.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  (ie. no DG operations desired)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  This method is called only if history does not exist and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  history is turned off. At this point, a handle to the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  meshNode is passed in so a derived class may directly</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  modify the mesh.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 directModifier( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> mesh );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                         doModifyPoly();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                         redoModifyPoly();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                         undoModifyPoly();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// polyModifierCmd Internal Processing Data //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This structure is used to maintain the data vital to the modifyPoly method.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It is necessary to simplify parameter passing between the methods used inside</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// modifyPoly (specifically inside connectNodes()). The diagram below dictates</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the naming style used:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// NOTE: modifierNode is intentionally left out of this structure since it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//       is given protected access to derived classes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Before:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (upstreamNode) *src -&gt; dest* (meshNode)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// After:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (upstreamNode) *src -&gt; dest* (modifierNode) *src -&gt; dest* (meshNode)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>modifyPolyData</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNodeTransform;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNodeShape;</div>\n\
<div class=\"line\">        <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   meshNodeDestPlug;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNodeDestAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> upstreamNodeTransform;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> upstreamNodeShape;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   upstreamNodeSrcPlug;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> upstreamNodeSrcAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNodeSrcAttr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNodeDestAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tweakNode;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tweakNodeSrcAttr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tweakNodeDestAttr;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// polyModifierCmd Internal Methods //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                    isCommandDataValid();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>                    collectNodeState();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Modifier node methods</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 createModifierNode( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; modifierNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Node processing methods (need to be executed in this order)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 processMeshNode( modifyPolyData&amp; data );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 processUpstreamNode( modifyPolyData&amp; data );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 processModifierNode( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNode,</div>\n\
<div class=\"line\">                                                 modifyPolyData&amp; data );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 processTweaks( modifyPolyData&amp; data );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Node connection method</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 connectNodes( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mesh caching methods - Only used in the directModifier case</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 cacheMeshData();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 cacheMeshTweaks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Undo methods</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 undoCachedMesh();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 undoTweakProcessing();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 undoDirectModifier();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// polyModifierCmd Utility Methods //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 getFloat3PlugValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug, <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>&amp; value );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>                 getFloat3asMObject( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> value, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// polyModifierCmd Data //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\">    <span class=\"comment\">// polyMesh</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                fDagPathInitialized;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>            fDagPath;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>            fDuplicateDagPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Modifier Node Type</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                fModifierNodeTypeInitialized;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                fModifierNodeNameInitialized;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>             fModifierNodeType;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>             fModifierNodeName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Node State Information</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                fHasHistory;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                fHasTweaks;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                fHasRecordHistory;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Cached Tweak Data (for undo)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>           fTweakIndexArray;</div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector_array.html\">MFloatVectorArray</a>   fTweakVectorArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Cached Mesh Data (for undo in the &#39;No History&#39;/&#39;History turned off&#39; case)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             fMeshData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// DG and DAG Modifier</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    - We need both DAG and DG modifiers since the MDagModifier::createNode()</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      method is overridden and specific to DAG nodes. So to keep</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      the operations consistent we will only use the fDagModifier</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      when dealing with the DAG.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    - There is a limitation between the reparentNode() and deleteNode()</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      methods on the MDagModifier. The deleteNode() method does some</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      preparation work before it enqueues itself in the MDagModifier list</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      of operations, namely, it looks at it&#39;s parents and children and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      deletes them as well if they are the only parent/child of the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      scheduled to be deleted.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      This conflicts with our call to MDagModifier::reparentNode(),</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      since we want to reparent the shape of a duplicated node under</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      another node and then delete the transform of that node. Now you </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      can see that since the reparentNode() doesn&#39;t execute until after</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      the MDagModifier::doIt() call, the scheduled deleteNode() call</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      still sees the child and marks it for delete. The subsequent</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      doIt() call reparents the shape and then deletes both it and the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      transform.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      To avoid this conflict, we separate the calls individually and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      perform the reparenting (by calling a doIt()) before the deleteNode()</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      method is enqueued on the modifier.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>         fDGModifier;</div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a>        fDagModifier;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Inlines</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// polyMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> polyModifierCmd::setMeshNode( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> mesh )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDagPath = mesh;</div>\n\
<div class=\"line\">    fDagPathInitialized = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> polyModifierCmd::getMeshNode()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fDagPath;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Modifier Node Type</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> polyModifierCmd::setModifierNodeType( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> type )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fModifierNodeType = type;</div>\n\
<div class=\"line\">    fModifierNodeTypeInitialized = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> polyModifierCmd::setModifierNodeName( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fModifierNodeName = name;</div>\n\
<div class=\"line\">    fModifierNodeNameInitialized = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> polyModifierCmd::getModifierNodeType()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fModifierNodeType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> polyModifierCmd::getModifierNodeName()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fModifierNodeName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";