var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: cgFx/cgfxTextureCache.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2cgfx_texture_cache_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: cgFx/cgfxTextureCache.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/cgfxTextureCache.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxTextureCache.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxFindImage.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxProfile.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderCommon.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;nv_dds.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Helper functions</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> textureInitPowerOfTwo(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> val, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp; retval)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> res = 0;               <span class=\"comment\">// May be we should return 1 when val == 0</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (val)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Muliply all values by 2, to simplify the testing:</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// 3*(res/2) &lt; val*2 &lt;= 3*res</span></div>\n\
<div class=\"line\">            val &lt;&lt;= 1;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> low = 3;</div>\n\
<div class=\"line\">            res = 1;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> (val &gt; low)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                low &lt;&lt;= 1;</div>\n\
<div class=\"line\">                res &lt;&lt;= 1;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        retval = res;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (res == (val&gt;&gt;1)) ? 1 : 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> computeTextureFilePath(</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     texFileName,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     shaderFxFile</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (texFileName.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> path = cgfxFindFile(texFileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If that failed, try and resolve the texture path relative to the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// effect</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> effectFile;</div>\n\
<div class=\"line\">            effectFile.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(shaderFxFile);</div>\n\
<div class=\"line\">            path = cgfxFindFile(effectFile.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a2c2258275416a1df772a23a569d84e78\">expandedPath</a>() + texFileName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> path;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> allocateAndReadTexture(</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     path,</div>\n\
<div class=\"line\">        <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>                     textureNode,</div>\n\
<div class=\"line\">        cgfxAttrDef::cgfxAttrType   attrType,</div>\n\
<div class=\"line\">        GLuint&amp;                     textureId</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        GLuint val;</div>\n\
<div class=\"line\">        glGenTextures(1, &amp;val);</div>\n\
<div class=\"line\">        textureId = val;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        nv_dds::CDDSImage image;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (attrType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeEnvTexture:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeCubeTexture:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalizationTexture:</div>\n\
<div class=\"line\">                    <span class=\"comment\">// we don&#39;t want to flip cube maps...</span></div>\n\
<div class=\"line\">                    image.load(path.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Only flip 2D textures if we&#39;re using right-handed texture</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// coordinates. Most of the time, we want to do the flipping</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// on the UV coordinates rather than the texture so that procedural</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// texture coordinates generated inside the shader work as well</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// (and if we just flip the texture to compensate for Maya&#39;s UV</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// coordinate system, these will get inverted)</span></div>\n\
<div class=\"line\">                    image.load(</div>\n\
<div class=\"line\">                        path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        cgfxProfile::getTexCoordOrientation() == cgfxProfile::TEXCOORD_OPENGL);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Our common stand-in &quot;texture&quot;</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The code below creates a separate stand-in GL texture</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// for every attribute without a value (rather than sharing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the default across all node/attributes of a given type.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// This is done because the current design does not support</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// GL texture id sharing across nodes/attributes AND because</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// we want to avoid checking disk every frame for missing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// textures. Once this plugin is re-factored to support a</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// shared texture cache, we should revisit this to share</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// default textures too</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> whitePixel[ 4] = { 255, 255, 255, 255};</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> imageLoaded = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (attrType)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor1DTexture:</div>\n\
<div class=\"line\">                glBindTexture(GL_TEXTURE_1D,textureId);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( image.is_valid())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Load the image</span></div>\n\
<div class=\"line\">                    glTexParameteri(</div>\n\
<div class=\"line\">                        GL_TEXTURE_1D, GL_GENERATE_MIPMAP_SGIS, image.get_num_mipmaps() == 0);</div>\n\
<div class=\"line\">                    image.upload_texture1D();</div>\n\
<div class=\"line\">                    imageLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create a dummy stand-in texture</span></div>\n\
<div class=\"line\">                    glTexImage1D(</div>\n\
<div class=\"line\">                        GL_TEXTURE_1D, 0, GL_RGBA, 1, 0,</div>\n\
<div class=\"line\">                        GL_RGBA, GL_UNSIGNED_BYTE, whitePixel);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeBumpTexture:</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if !defined(WIN32) &amp;&amp; !defined(__linux__)</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                glBindTexture(GL_TEXTURE_2D,textureId);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( image.is_valid())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Load the image</span></div>\n\
<div class=\"line\">                    glTexParameteri(</div>\n\
<div class=\"line\">                        GL_TEXTURE_2D, GL_GENERATE_MIPMAP_SGIS, image.get_num_mipmaps() == 0);</div>\n\
<div class=\"line\">                    image.upload_texture2D();</div>\n\
<div class=\"line\">                    imageLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Try to use Maya&#39;s default file texture loading,</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// if the DDS loader failed. For now all that</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// we can support is 2D textures.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (textureNode != <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> img;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, height;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (MS::kSuccess == img.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a3e3e6e8e454d2335a2206ea7fc6075d9\">readFromTextureNode</a>(textureNode))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// If we&#39;re using left handed texture coordinates, flip it upside down</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// (to undo the automatic flip it receives being read in by Maya)</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (cgfxProfile::getTexCoordOrientation() ==</div>\n\
<div class=\"line\">                                cgfxProfile::TEXCOORD_DIRECTX)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                img.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#ac84d6f0011d9b722d845eaa97042bca1\">verticalFlip</a>();</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = img.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#acab1f6acf34fc74e4d717322fa35241a\">getSize</a>( width, height);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (width &gt; 0 &amp;&amp; height &gt; 0 &amp;&amp; (status != <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>) )</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// If not power of two and NPOT is not supported, then we need</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// to resize the original system pixmap before binding.</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (width &gt; 2 &amp;&amp; height &gt; 2)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> p2Width, p2Height;</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> widthPowerOfTwo  = textureInitPowerOfTwo(width,  p2Width);</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> heightPowerOfTwo = textureInitPowerOfTwo(height, p2Height);</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">if</span>(!widthPowerOfTwo || !heightPowerOfTwo)</div>\n\
<div class=\"line\">                                    {</div>\n\
<div class=\"line\">                                        width = p2Width;</div>\n\
<div class=\"line\">                                        height = p2Height;</div>\n\
<div class=\"line\">                                        img.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#aa099a65eabd0fe2c81af181d5f96b71a\">resize</a>( p2Width, p2Height, <span class=\"keyword\">false</span> <span class=\"comment\">/* preserverAspectRatio */</span>);</div>\n\
<div class=\"line\">                                    }</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP_SGIS, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                                glTexImage2D(</div>\n\
<div class=\"line\">                                    GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0,</div>\n\
<div class=\"line\">                                    GL_RGBA, GL_UNSIGNED_BYTE, img.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#aba6def80dd70f1c9af3dbd348fe270ac\">pixels</a>());</div>\n\
<div class=\"line\">                                imageLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!imageLoaded) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create a dummy stand-in texture</span></div>\n\
<div class=\"line\">                    glTexImage2D(</div>\n\
<div class=\"line\">                        GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0,</div>\n\
<div class=\"line\">                        GL_RGBA, GL_UNSIGNED_BYTE, whitePixel);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeEnvTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeCubeTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalizationTexture:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    glBindTexture(GL_TEXTURE_CUBE_MAP_ARB, textureId);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( image.is_valid()) {</div>\n\
<div class=\"line\">                        glTexParameteri(</div>\n\
<div class=\"line\">                            GL_TEXTURE_CUBE_MAP_ARB, GL_GENERATE_MIPMAP_SGIS,</div>\n\
<div class=\"line\">                            image.get_num_mipmaps() == 0);</div>\n\
<div class=\"line\">                        <span class=\"comment\">// loop through cubemap faces and load them as 2D textures</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> n = 0; n &lt; 6; ++n)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// specify cubemap face</span></div>\n\
<div class=\"line\">                            GLenum target = GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB+n;</div>\n\
<div class=\"line\">                            image.upload_texture2D(image.is_cubemap() ? n : 0, target);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        imageLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Loop through cubemap faces and</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// load a dummy stand-in texture</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> n = 0; n &lt; 6; ++n)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// specify cubemap face</span></div>\n\
<div class=\"line\">                            GLenum target = GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB+n;</div>\n\
<div class=\"line\">                            glTexImage2D(</div>\n\
<div class=\"line\">                                target, 0, GL_RGBA, 1, 1, 0,</div>\n\
<div class=\"line\">                                GL_RGBA, GL_UNSIGNED_BYTE, whitePixel);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor3DTexture:</div>\n\
<div class=\"line\">                glBindTexture(GL_TEXTURE_3D,textureId);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( image.is_valid())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    image.upload_texture3D();</div>\n\
<div class=\"line\">                    imageLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create a dummy stand-in texture</span></div>\n\
<div class=\"line\">                    glTexImage3D(</div>\n\
<div class=\"line\">                        GL_TEXTURE_3D, 0, GL_RGBA, 1, 1, 1, 0,</div>\n\
<div class=\"line\">                        GL_RGBA, GL_UNSIGNED_BYTE, whitePixel);</div>\n\
<div class=\"line\">                                 </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// No such thing as NV texture rectangle</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// on Mac.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\">                glBindTexture(GL_TEXTURE_RECTANGLE_NV, textureId);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( image.is_valid())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Load the image</span></div>\n\
<div class=\"line\">                    image.upload_textureRectangle();</div>\n\
<div class=\"line\">                    imageLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create a dummy stand-in texture</span></div>\n\
<div class=\"line\">                    glTexImage2D(</div>\n\
<div class=\"line\">                        GL_TEXTURE_RECTANGLE_NV, 0, GL_RGBA, 1, 1, 0,</div>\n\
<div class=\"line\">                        GL_RGBA, GL_UNSIGNED_BYTE, whitePixel);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                assert(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> imageLoaded;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Class EntryKey</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>EntryKey </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        EntryKey(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::string&amp;        textureFilePath,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::string&amp;        shaderFxFile,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::string&amp;        attrName,</div>\n\
<div class=\"line\">            cgfxAttrDef::cgfxAttrType attrType</div>\n\
<div class=\"line\">        )</div>\n\
<div class=\"line\">            : fTextureFilePath(textureFilePath),</div>\n\
<div class=\"line\">              fShaderFxFile(shaderFxFile),</div>\n\
<div class=\"line\">              fAttrName(attrName),</div>\n\
<div class=\"line\">              fAttrType(attrType)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        EntryKey(<span class=\"keyword\">const</span> EntryKey&amp; rhs)</div>\n\
<div class=\"line\">            : fTextureFilePath(rhs.fTextureFilePath),</div>\n\
<div class=\"line\">              fShaderFxFile(rhs.fShaderFxFile),</div>\n\
<div class=\"line\">              fAttrName(rhs. fAttrName),</div>\n\
<div class=\"line\">              fAttrType(rhs.fAttrType)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string                 fTextureFilePath;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string                 fShaderFxFile;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string                 fAttrName;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxAttrDef::cgfxAttrType   fAttrType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> EntryKey&amp; operator=(<span class=\"keyword\">const</span> EntryKey&amp; rhs);</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>EntryKeyLessThan</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> operator()(<span class=\"keyword\">const</span> EntryKey&amp; lhs, <span class=\"keyword\">const</span> EntryKey&amp; rhs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lhs.fTextureFilePath &lt; rhs.fTextureFilePath) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lhs.fTextureFilePath &gt; rhs.fTextureFilePath) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lhs.fShaderFxFile &lt; rhs.fShaderFxFile) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lhs.fShaderFxFile &gt; rhs.fShaderFxFile) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lhs.fAttrName &lt; rhs.fAttrName) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lhs.fAttrName &gt; rhs.fAttrName) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lhs.fAttrType &lt; rhs.fAttrType) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of the cache hash map.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxTextureCache::Imp : <span class=\"keyword\">public</span> cgfxTextureCache </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> Imp* sTheTextureCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Imp();</div>\n\
<div class=\"line\">    ~Imp() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the texture cache entry matching the parameters. If the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// texture is present in the cache, an entry will be created and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// an attempt to load the texture data from the texture file will</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// be made.</span></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxTextureCacheEntry&gt; getTexture(</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     texFileName,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>                     textureNode,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     shaderFxFile,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     attrName,</div>\n\
<div class=\"line\">        cgfxAttrDef::cgfxAttrType   attrType</div>\n\
<div class=\"line\">    ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> dump()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        fprintf(stderr, <span class=\"stringliteral\">&quot;*** Dumping texture cache ***\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Map::const_iterator end = fEntries.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (Map::const_iterator it = fEntries.begin(); it != end; ++it) {</div>\n\
<div class=\"line\">            fprintf(stderr, <span class=\"stringliteral\">&quot;   entry = 0x%p, refCount = %d\\n&quot;</span>,</div>\n\
<div class=\"line\">                    it-&gt;second.operator-&gt;(),</div>\n\
<div class=\"line\">                    it-&gt;second-&gt;getRefCount());</div>\n\
<div class=\"line\">            fprintf(stderr, <span class=\"stringliteral\">&quot;   tex file = \\&quot;%s\\&quot;\\n&quot;</span>,</div>\n\
<div class=\"line\">                    it-&gt;first.fTextureFilePath.c_str());</div>\n\
<div class=\"line\">            fprintf(stderr, <span class=\"stringliteral\">&quot;   fx  file = \\&quot;%s\\&quot;\\n&quot;</span>,</div>\n\
<div class=\"line\">                    it-&gt;first.fShaderFxFile.c_str());</div>\n\
<div class=\"line\">            fprintf(stderr, <span class=\"stringliteral\">&quot;   attrName = %s, attrType = %s\\n\\n&quot;</span>,</div>\n\
<div class=\"line\">                    it-&gt;first.fAttrName.c_str(),</div>\n\
<div class=\"line\">                    cgfxAttrDef::typeName(it-&gt;first.fAttrType));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> flushEntry(<span class=\"keyword\">const</span> EntryKey&amp; key)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        sTheTextureCache-&gt;fEntries.erase(key);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;EntryKey, cgfxRCPtr&lt;cgfxTextureCacheEntry&gt;, EntryKeyLessThan&gt; Map;</div>\n\
<div class=\"line\">    Map fEntries;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTextureCache::Imp* cgfxTextureCache::Imp::sTheTextureCache = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTextureCache::Imp::Imp()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTextureCache::Imp::~Imp()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Return the texture cache entry matching the parameters. If the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// texture is present in the cache, an entry will be created and</span></div>\n\
<div class=\"line\"><span class=\"comment\">// an attempt to load the texture data from the texture file will</span></div>\n\
<div class=\"line\"><span class=\"comment\">// be made.</span></div>\n\
<div class=\"line\">cgfxRCPtr&lt;cgfxTextureCacheEntry&gt; cgfxTextureCache::Imp::getTexture(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     texFileName,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>                     textureNode,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     shaderFxFile,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                     attrName,</div>\n\
<div class=\"line\">    cgfxAttrDef::cgfxAttrType   attrType</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> textureFilePath =</div>\n\
<div class=\"line\">        computeTextureFilePath(texFileName, shaderFxFile).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that the texture node is not part of the key. We assume</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// that all texture nodes with the same filename attribute are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// actually referencing the file... </span></div>\n\
<div class=\"line\">    EntryKey key(textureFilePath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), shaderFxFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), attrName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), attrType);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Map::const_iterator entryIt = fEntries.find(key);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (entryIt != fEntries.end()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> entryIt-&gt;second;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GLuint textureId;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid = allocateAndReadTexture(</div>\n\
<div class=\"line\">        textureFilePath, textureNode, attrType, textureId);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxTextureCacheEntry&gt; entry(</div>\n\
<div class=\"line\">        <span class=\"keyword\">new</span> cgfxTextureCacheEntry(</div>\n\
<div class=\"line\">            key.fTextureFilePath, key.fShaderFxFile, key.fAttrName, key.fAttrType,</div>\n\
<div class=\"line\">            textureId, valid));</div>\n\
<div class=\"line\">    fEntries.insert(std::make_pair(key,entry));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> entry;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Class cgfxTextureCacheEntry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTextureCacheEntry::~cgfxTextureCacheEntry()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    glDeleteTextures(1, &amp;fTextureId);</div>\n\
<div class=\"line\">    fTextureId = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxTextureCacheEntry::markAsStaled()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fStaled = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// During the flushEntry from the cache, it happens that the entry got deleted while still in use.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Make sure do add 1 more ref and release it right after the flushEntry is done, so it can be deleted properly.</span></div>\n\
<div class=\"line\">    addRef();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This texture entry has been marked as staled. We remove it from</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the texture cache so that it is relaoded from the texture file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the next time a cgfxShader needs it. This is necessary to allow</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the user to update the content of the texture file and to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// manually force a relaod of the texture.</span></div>\n\
<div class=\"line\">    cgfxTextureCache::Imp::flushEntry(</div>\n\
<div class=\"line\">        EntryKey(fTextureFilePath, fShaderFxFile, fAttrName, fAttrType));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    release();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxTextureCacheEntry::addRef()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ++fRefCount;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxTextureCacheEntry::release()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    -- fRefCount;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fRefCount == 1) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If the refCount is one, only 2 cases are possible. Either</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the last reference comes for the texture cache and we can</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// safely remove it from the texture cache to save memory. Or,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the last reference is for a staled texture cache entry and</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// it is no longer referenced by the texture cache anyway.  </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        cgfxTextureCache::Imp::flushEntry(</div>\n\
<div class=\"line\">            EntryKey(fTextureFilePath, fShaderFxFile, fAttrName, fAttrType));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fRefCount == 0) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Class cgfxTextureCache</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxTextureCache::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Imp::sTheTextureCache = <span class=\"keyword\">new</span> cgfxTextureCache::Imp;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxTextureCache::uninitialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> Imp::sTheTextureCache;</div>\n\
<div class=\"line\">    Imp::sTheTextureCache = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTextureCache&amp; cgfxTextureCache::instance()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *Imp::sTheTextureCache;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTextureCache::cgfxTextureCache()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTextureCache::~cgfxTextureCache()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";