var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcImport/XformHelper.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_import_2_xform_helper_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcImport/XformHelper.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcImport/XformHelper.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2011,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks, Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;util.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;XformHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;NodeIteratorVisitorHelper.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/IXform.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEulerRotation.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MQuaternion.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagModifier.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// I&#39;m not sure why kPreTransform works and kTransform does not for all</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cases except when the transform is complicated and we need to use the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// matrix.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8\">MSpace::Space</a> gSpace = <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8afbe61c6bfc6e41f61ce5151adb33aa90\">MSpace::kPreTransform</a>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> gBalance = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// complex matrix doesn&#39;t map to Maya directly, so get the matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and then try to break it down into Maya parts</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> readComplex(<span class=\"keywordtype\">double</span> iFrame, Alembic::AbcGeom::IXform &amp; iNode,</div>\n\
<div class=\"line\">    std::vector&lt;double&gt; &amp; oSampleList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame,</div>\n\
<div class=\"line\">        iNode.getSchema().getTimeSampling(),</div>\n\
<div class=\"line\">        iNode.getSchema().getNumSamples(),</div>\n\
<div class=\"line\">        index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::M44d m; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformSample samp;</div>\n\
<div class=\"line\">        iNode.getSchema().get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">        Alembic::Abc::M44d mlo = samp.getMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        iNode.getSchema().get(samp, Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">        Alembic::Abc::M44d mhi = samp.getMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m = ((1 - alpha) * mlo) + (alpha * mhi);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformSample samp;</div>\n\
<div class=\"line\">         iNode.getSchema().get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">        m = samp.getMatrix();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a> mmat(<a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>(m.x));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Everywhere else we use kPreTransform, but this doesn&#39;t work</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// when we pass in the matrix for some reason</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8\">MSpace::Space</a> tSpace = <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// push the results into sampleList</span></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec = mmat.getTranslation(tSpace);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    vec = mmat.rotatePivotTranslation(tSpace);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt = mmat.rotatePivot(tSpace);</div>\n\
<div class=\"line\">    oSampleList.push_back(pt.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(pt.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(pt.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> rot[3];</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bc\">MTransformationMatrix::RotationOrder</a> order;</div>\n\
<div class=\"line\">    mmat.getRotation(rot, order);</div>\n\
<div class=\"line\">    oSampleList.push_back(Alembic::AbcGeom::RadiansToDegrees(rot[0]));</div>\n\
<div class=\"line\">    oSampleList.push_back(Alembic::AbcGeom::RadiansToDegrees(rot[1]));</div>\n\
<div class=\"line\">    oSampleList.push_back(Alembic::AbcGeom::RadiansToDegrees(rot[2]));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> quat = mmat.rotationOrientation();</div>\n\
<div class=\"line\">    vec = quat.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html#ae176620c277883354c8c8d830c961d7d\">asEulerRotation</a>().<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#a93c2f2912f981bc5a58a27af7d3ba6b9\">asVector</a>();</div>\n\
<div class=\"line\">    oSampleList.push_back(Alembic::AbcGeom::RadiansToDegrees(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>));</div>\n\
<div class=\"line\">    oSampleList.push_back(Alembic::AbcGeom::RadiansToDegrees(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>));</div>\n\
<div class=\"line\">    oSampleList.push_back(Alembic::AbcGeom::RadiansToDegrees(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    pt = mmat.scalePivotTranslation(tSpace);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    vec = mmat.scalePivot(tSpace);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>);</div>\n\
<div class=\"line\">    oSampleList.push_back(vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> shear[3];</div>\n\
<div class=\"line\">    mmat.getShear(shear, tSpace);</div>\n\
<div class=\"line\">    oSampleList.push_back(shear[0]);</div>\n\
<div class=\"line\">    oSampleList.push_back(shear[1]);</div>\n\
<div class=\"line\">    oSampleList.push_back(shear[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> scale[3];</div>\n\
<div class=\"line\">    mmat.getScale(scale, tSpace);</div>\n\
<div class=\"line\">    oSampleList.push_back(scale[0]);</div>\n\
<div class=\"line\">    oSampleList.push_back(scale[1]);</div>\n\
<div class=\"line\">    oSampleList.push_back(scale[2]);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> read(<span class=\"keywordtype\">double</span> iFrame, Alembic::AbcGeom::IXform &amp; iNode,</div>\n\
<div class=\"line\">    std::vector&lt;double&gt; &amp; oSampleList,</div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformSample &amp; oSamp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame,</div>\n\
<div class=\"line\">        iNode.getSchema().getTimeSampling(),</div>\n\
<div class=\"line\">        iNode.getSchema().getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (alpha != 0 &amp;&amp; index != ceilIndex &amp;&amp;</div>\n\
<div class=\"line\">        !iNode.getSchema().isConstant())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        iNode.getSchema().<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#a08da0aae32e87c8a252152d1597b908e\">get</a>(oSamp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformSample hiSamp;</div>\n\
<div class=\"line\">            iNode.getSchema().get(hiSamp,</div>\n\
<div class=\"line\">                Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// loop over the operations and channels and add only the animated</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// values</span></div>\n\
<div class=\"line\">        std::vector&lt;double&gt; loVec, hiVec;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numOps = oSamp.getNumOps();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numOps; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::XformOp loOp = oSamp[i];</div>\n\
<div class=\"line\">            Alembic::AbcGeom::XformOp hiOp = hiSamp[i];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numChannels = loOp.getNumChannels();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numChannels; ++j)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (loOp.isChannelAnimated(j))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    loVec.push_back(loOp.getChannelValue(j));</div>\n\
<div class=\"line\">                    hiVec.push_back(hiOp.getChannelValue(j));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numAnim = loVec.size();</div>\n\
<div class=\"line\">        oSampleList.resize(numAnim);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numAnim; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oSampleList[i] = simpleLerp&lt;double&gt;(alpha,loVec[i], hiVec[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        iNode.getSchema().get(oSamp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        oSampleList.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">        <span class=\"comment\">// add only animated values</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numOps = oSamp.getNumOps();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numOps; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::XformOp op = oSamp[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numChannels = op.getNumChannels();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numChannels; ++j)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isChannelAnimated(j))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oSampleList.push_back(op.getChannelValue(j));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> isComplex(<span class=\"keyword\">const</span> Alembic::AbcGeom::XformSample &amp; iSamp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> state = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> scPivot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> roPivot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> xAxis = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> yAxis = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> zAxis = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numOps = iSamp.getNumOps();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numOps; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformOp op = iSamp[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (op.getType())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kScaleOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (state &lt; 12)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    state = 12;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kTranslateOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (op.getHint())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kTranslateHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (state &lt; 1)</div>\n\
<div class=\"line\">                            state = 1;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kScalePivotPointHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (state &lt; 10 &amp;&amp; !scPivot)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            scPivot = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                            state = 10;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have encounted this pivot before,</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// this one undoes the first one</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (state &lt; 13 &amp;&amp; scPivot)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            scPivot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                            state = 13;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kScalePivotTranslationHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (state &lt; 9)</div>\n\
<div class=\"line\">                            state = 9;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotatePivotPointHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (state &lt; 3 &amp;&amp; !roPivot)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            roPivot = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                            state = 3;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have encounted this pivot before,</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// this one undoes the first one</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (state &lt; 8 &amp;&amp; roPivot)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            roPivot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                            state = 8;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotatePivotTranslationHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (state &lt; 2)</div>\n\
<div class=\"line\">                            state = 2;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateXOperation:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateYOperation:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateZOperation:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// if any axis is animated, we have a complex xform</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isXAnimated() || op.isYAnimated() || op.isZAnimated())</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Alembic::Abc::V3d v = op.getAxis();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (op.getHint())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (v.x == 1 &amp;&amp; v.y == 0 &amp;&amp; v.z == 0 &amp;&amp;</div>\n\
<div class=\"line\">                            !xAxis &amp;&amp; state &lt;= 4)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            state = 4;</div>\n\
<div class=\"line\">                            xAxis = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (v.x == 0 &amp;&amp; v.y == 1 &amp;&amp; v.z == 0 &amp;&amp; !yAxis &amp;&amp; </div>\n\
<div class=\"line\">                            state &lt;= 4)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            state = 4;</div>\n\
<div class=\"line\">                            yAxis = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (v.x == 0 &amp;&amp; v.y == 0 &amp;&amp; v.z == 1 &amp;&amp; !zAxis &amp;&amp; </div>\n\
<div class=\"line\">                            state &lt;= 4)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            state = 4;</div>\n\
<div class=\"line\">                            zAxis = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateOrientationHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (v.x == 1 &amp;&amp; v.y == 0 &amp;&amp; v.z == 0 &amp;&amp; state &lt; 7)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            state = 7;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (v.x == 0 &amp;&amp; v.y == 1 &amp;&amp; v.z == 0 &amp;&amp; state &lt; 6)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            state = 6;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (v.x == 0 &amp;&amp; v.y == 0 &amp;&amp; v.z == 1 &amp;&amp; state &lt; 5)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            state = 5;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kMatrixOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.getHint() == Alembic::AbcGeom::kMayaShearHint &amp;&amp;</div>\n\
<div class=\"line\">                    state &lt; 11)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    state = 11;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        } <span class=\"comment\">// switch</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    } <span class=\"comment\">// for i</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if we encounter a scale or rotate pivot point,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// it needs to be inverted again otherwise the matrix is complex</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> scPivot || roPivot;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> connectToXform(<span class=\"keyword\">const</span> Alembic::AbcGeom::XformSample &amp; iSamp,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant,</div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iObject,</div>\n\
<div class=\"line\">    std::vector&lt;std::string&gt; &amp; oSampledTransOpNameList,</div>\n\
<div class=\"line\">    std::vector&lt;Prop&gt; &amp; iSampledPropList,</div>\n\
<div class=\"line\">    std::size_t iFirstProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> trans;</div>\n\
<div class=\"line\">    trans.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>(iObject);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// disconnect and reset all the native attributes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>   vec(0, 0, 0);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>    point(0, 0, 0);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>    zero[3] = {0, 0, 0};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dstPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scalePivotX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scalePivotY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scalePivotZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    trans.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#ac2f2184120b5c14c81b60ac8b5eb3d4c\">setScalePivot</a>(point, gSpace, gBalance);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scaleX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scaleY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scaleZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> scale[3] = {1, 1, 1};</div>\n\
<div class=\"line\">    trans.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a8eefc6c1f7607db69f236aafc0bfc92e\">setScale</a>(scale);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;shearXY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;shearXZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;shearYZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    trans.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a3e246f75d525e4c34d6e04f396a599cb\">setShear</a>(zero);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scalePivotTranslateX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scalePivotTranslateY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;scalePivotTranslateZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    trans.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a3492225fd9a199a54d79ac75d61231b1\">setScalePivotTranslation</a>(vec, gSpace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotatePivotX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotatePivotY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotatePivotZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    trans.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a937754c0af798e092f6291009661d040\">setRotatePivot</a>(point, gSpace, gBalance);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotateAxisX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotateAxisY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotateAxisZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> quat;</div>\n\
<div class=\"line\">    trans.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aad867131616f5bd6c7006d9b3e73a623\">setRotateOrientation</a>(quat, gSpace, gBalance);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bc\">MTransformationMatrix::RotationOrder</a> order =</div>\n\
<div class=\"line\">        <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bcacfa82ee0eaf4075f3cda4152dd020d99\">MTransformationMatrix::kXYZ</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotateOrder&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> reorder = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    trans.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a2cf585d08073642912ef1c61b7230811\">setRotationOrder</a>(order, reorder);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotateX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotateY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotateZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    trans.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aa047349032f56768d2f6ded541b24e63\">setRotation</a>(zero, order);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotatePivotTranslateX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotatePivotTranslateY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;rotatePivotTranslateZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    trans.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#acf88ea8228158b505aa878a61ea405ad\">setRotatePivotTranslation</a>(vec, gSpace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;translateX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;translateY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;translateZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    trans.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a891031d10d39d22cd80f849136ef2542\">setTranslation</a>(vec, gSpace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dstPlug = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;inheritsTransform&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">    dstPlug.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a7ca6fc59c06e16950cdc9db4c7f5f1bf\">setBool</a>(iSamp.getInheritsXforms());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// disconnect connections to animated props</span></div>\n\
<div class=\"line\">    disconnectProps(trans, iSampledPropList, iFirstProp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isComplex(iSamp))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;translateX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;translateY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;translateZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotatePivotTranslateX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotatePivotTranslateY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotatePivotTranslateZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotatePivotX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotatePivotY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotatePivotZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateAxisX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateAxisY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateAxisZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scalePivotTranslateX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scalePivotTranslateY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scalePivotTranslateZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scalePivotX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scalePivotY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scalePivotZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;shearXY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;shearXZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;shearYZ&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scaleX&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scaleY&quot;</span>);</div>\n\
<div class=\"line\">            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scaleZ&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::M44d m = iSamp.getMatrix();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a> mmat(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>(m.x));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Everywhere else we use kPreTransform, but this doesn&#39;t work</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// when we pass in the matrix for some reason</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8\">MSpace::Space</a> tSpace = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a891031d10d39d22cd80f849136ef2542\">setTranslation</a>(mmat.getTranslation(tSpace), tSpace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#acf88ea8228158b505aa878a61ea405ad\">setRotatePivotTranslation</a>(</div>\n\
<div class=\"line\">            mmat.rotatePivotTranslation(tSpace), tSpace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a937754c0af798e092f6291009661d040\">setRotatePivot</a>(</div>\n\
<div class=\"line\">            mmat.rotatePivot(tSpace), tSpace, gBalance);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aa047349032f56768d2f6ded541b24e63\">setRotation</a>(mmat.eulerRotation());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aad867131616f5bd6c7006d9b3e73a623\">setRotateOrientation</a>(</div>\n\
<div class=\"line\">            mmat.rotationOrientation(), tSpace, gBalance);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a3492225fd9a199a54d79ac75d61231b1\">setScalePivotTranslation</a>(</div>\n\
<div class=\"line\">            mmat.scalePivotTranslation(tSpace), tSpace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#ac2f2184120b5c14c81b60ac8b5eb3d4c\">setScalePivot</a>(</div>\n\
<div class=\"line\">            mmat.scalePivot(tSpace), tSpace, gBalance);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> shear[3];</div>\n\
<div class=\"line\">        mmat.getShear(shear, tSpace);</div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a3e246f75d525e4c34d6e04f396a599cb\">setShear</a>(shear);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> scale[3];</div>\n\
<div class=\"line\">        mmat.getScale(scale, tSpace);</div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a8eefc6c1f7607db69f236aafc0bfc92e\">setScale</a>(scale);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> scPivot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> roPivot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bc\">MTransformationMatrix::RotationOrder</a> rotOrder[2];</div>\n\
<div class=\"line\">    rotOrder[0] = <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>;</div>\n\
<div class=\"line\">    rotOrder[1] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numOps = iSamp.getNumOps();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numOps; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformOp op = iSamp[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (op.getType())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kScaleOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> scale[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isXAnimated())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scaleX&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                scale[0] = op.getChannelValue(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isYAnimated())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scaleY&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                scale[1] = op.getChannelValue(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isZAnimated())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;scaleZ&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                scale[2] = op.getChannelValue(2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a8eefc6c1f7607db69f236aafc0bfc92e\">setScale</a>(scale);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateXOperation:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateYOperation:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateZOperation:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotateOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Abc::V3d axis = op.getAxis();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> x = axis.x;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> y = axis.y;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> z = axis.z;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> angle = 0.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> rot;</div>\n\
<div class=\"line\">                trans.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a6d884792b7cfaca1cd56bec70f5042d6\">getRotation</a>(rot);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.getHint() == Alembic::AbcGeom::kRotateHint)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (x == 1 &amp;&amp; y == 0 &amp;&amp; z == 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isAngleAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateX&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        angle = op.getAngle();</div>\n\
<div class=\"line\">                        rot.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = Alembic::AbcGeom::DegreesToRadians(angle);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have encountered the first rotation, set it</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// to the 2 X possibilities</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (rotOrder[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            rotOrder[0] = <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca87ec3a6c693801d56c5ce902cea31877\">MTransformationMatrix::kYZX</a>;</div>\n\
<div class=\"line\">                            rotOrder[1] = <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca0ede29653f0c0e677e80ddd6f6bd84d4\">MTransformationMatrix::kZYX</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have filled in the two possibilities, now choose</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// which one we should use</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (rotOrder[1] != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (rotOrder[1] == <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca23214e1b520c135ffa06f3fcd5030d92\">MTransformationMatrix::kYXZ</a>)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                rotOrder[0] = rotOrder[1];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            rotOrder[1] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (x == 0 &amp;&amp; y == 1 &amp;&amp; z == 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isAngleAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateY&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        angle = op.getAngle();</div>\n\
<div class=\"line\">                        rot.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#ab927965981178aa1fba979a37168db2a\">y</a> = Alembic::AbcGeom::DegreesToRadians(angle);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have encountered the first rotation, set it</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// to the 2 X possibilities</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (rotOrder[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            rotOrder[0] = <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca07c45baf7aa32873fe3c8238424ebfa1\">MTransformationMatrix::kZXY</a>;</div>\n\
<div class=\"line\">                            rotOrder[1] = <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca0982bd58c3430b5f521f4c180aec001d\">MTransformationMatrix::kXZY</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have filled in the two possibilities, now choose</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// which one we should use</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (rotOrder[1] != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (rotOrder[1] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca0ede29653f0c0e677e80ddd6f6bd84d4\">MTransformationMatrix::kZYX</a>)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                rotOrder[0] = rotOrder[1];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            rotOrder[1] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (x == 0 &amp;&amp; y == 0 &amp;&amp; z == 1)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isAngleAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateZ&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        angle = op.getAngle();</div>\n\
<div class=\"line\">                        rot.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = Alembic::AbcGeom::DegreesToRadians(angle);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have encountered the first rotation, set it</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// to the 2 X possibilities</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (rotOrder[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            rotOrder[0] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bcacfa82ee0eaf4075f3cda4152dd020d99\">MTransformationMatrix::kXYZ</a>;</div>\n\
<div class=\"line\">                            rotOrder[1] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca23214e1b520c135ffa06f3fcd5030d92\">MTransformationMatrix::kYXZ</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"comment\">// we have filled in the two possibilities, now choose</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// which one we should use</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (rotOrder[1] != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (rotOrder[1] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca0982bd58c3430b5f521f4c180aec001d\">MTransformationMatrix::kXZY</a>)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                rotOrder[0] = rotOrder[1];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            rotOrder[1] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aa047349032f56768d2f6ded541b24e63\">setRotation</a>(rot);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">// kRotateOrientationHint</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> quat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (x == 1 &amp;&amp; y == 0 &amp;&amp; z == 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isAngleAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateAxisX&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        angle = op.getAngle();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        quat.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html#a5528153a2165b66b22fe88ddf666707e\">setToXAxis</a>(</div>\n\
<div class=\"line\">                            Alembic::AbcGeom::DegreesToRadians(angle));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (x == 0 &amp;&amp; y == 1 &amp;&amp; z == 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isAngleAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateAxisY&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        angle = op.getAngle();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        quat.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html#a2d9304a6614bc55ba53c3798538a8f68\">setToYAxis</a>(</div>\n\
<div class=\"line\">                            Alembic::AbcGeom::DegreesToRadians(angle));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (x == 0 &amp;&amp; y == 0 &amp;&amp; z == 1)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isAngleAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;rotateAxisZ&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        angle = op.getAngle();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        quat.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html#a2d9e0adc1f0090f8fd1d01159dbec08d\">setToZAxis</a>(</div>\n\
<div class=\"line\">                            Alembic::AbcGeom::DegreesToRadians(angle));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> curq = trans.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#afc1cb5e455ffe968fe90196edf0082ee\">rotateOrientation</a>(gSpace);</div>\n\
<div class=\"line\">                    trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aad867131616f5bd6c7006d9b3e73a623\">setRotateOrientation</a>(curq*quat, gSpace, gBalance);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// shear</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kMatrixOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> shear[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// we only care about shearXY, shearXZ, and shearYZ here</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isChannelAnimated(4))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;shearXY&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                shear[0] = op.getChannelValue(4);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isChannelAnimated(8))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;shearXZ&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                shear[1] = op.getChannelValue(8);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (op.isChannelAnimated(9))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;shearYZ&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                shear[2] = op.getChannelValue(9);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a3e246f75d525e4c34d6e04f396a599cb\">setShear</a>(shear);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kTranslateOperation:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::uint8_t hint = op.getHint();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (hint)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kTranslateHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isXAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;translateX&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = op.getChannelValue(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isYAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;translateY&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = op.getChannelValue(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isZAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(<span class=\"stringliteral\">&quot;translateZ&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = op.getChannelValue(2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a891031d10d39d22cd80f849136ef2542\">setTranslation</a>(vec, gSpace);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kScalePivotPointHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point;</div>\n\
<div class=\"line\">                        point.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#afb3248bab1c7ee0ad97e9d4c275b4c67\">w</a> = 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isXAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (!scPivot)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;scalePivotX&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;scalePivotXInv&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = op.getChannelValue(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isYAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (!scPivot)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;scalePivotY&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;scalePivotYInv&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = op.getChannelValue(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isZAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (!scPivot)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;scalePivotZ&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;scalePivotZInv&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = op.getChannelValue(2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// we only want to apply this to the first one</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// the second one is the inverse</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!scPivot)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#ac2f2184120b5c14c81b60ac8b5eb3d4c\">setScalePivot</a>(point, gSpace, gBalance);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        scPivot = !scPivot;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kScalePivotTranslationHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isXAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                <span class=\"stringliteral\">&quot;scalePivotTranslateX&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = op.getChannelValue(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isYAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                <span class=\"stringliteral\">&quot;scalePivotTranslateY&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = op.getChannelValue(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isZAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                <span class=\"stringliteral\">&quot;scalePivotTranslateZ&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = op.getChannelValue(2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a3492225fd9a199a54d79ac75d61231b1\">setScalePivotTranslation</a>(vec, gSpace);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotatePivotPointHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point;</div>\n\
<div class=\"line\">                        point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#afb3248bab1c7ee0ad97e9d4c275b4c67\">w</a> = 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isXAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (!roPivot)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;rotatePivotX&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;rotatePivotXInv&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = op.getChannelValue(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isYAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (!roPivot)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;rotatePivotY&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;rotatePivotYInv&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = op.getChannelValue(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isZAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (!roPivot)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;rotatePivotZ&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                    <span class=\"stringliteral\">&quot;rotatePivotZInv&quot;</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = op.getChannelValue(2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// only set rotate pivot on the first one, the second</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// one is just the inverse</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!roPivot)</div>\n\
<div class=\"line\">                            trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a937754c0af798e092f6291009661d040\">setRotatePivot</a>(point, gSpace, gBalance);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        roPivot = !roPivot;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> Alembic::AbcGeom::kRotatePivotTranslationHint:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isXAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                <span class=\"stringliteral\">&quot;rotatePivotTranslateX&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = op.getChannelValue(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isYAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                <span class=\"stringliteral\">&quot;rotatePivotTranslateY&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = op.getChannelValue(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (op.isZAnimated())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oSampledTransOpNameList.push_back(</div>\n\
<div class=\"line\">                                <span class=\"stringliteral\">&quot;rotatePivotTranslateZ&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = op.getChannelValue(2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#acf88ea8228158b505aa878a61ea405ad\">setRotatePivotTranslation</a>(vec, gSpace);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// no rotates were found so default to XYZ</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (rotOrder[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca94dd08feda7b2cf0ff8262312c4fcc09\">MTransformationMatrix::kInvalid</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        rotOrder[0] =  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bcacfa82ee0eaf4075f3cda4152dd020d99\">MTransformationMatrix::kXYZ</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a2cf585d08073642912ef1c61b7230811\">setRotationOrder</a>(rotOrder[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";