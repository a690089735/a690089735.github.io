var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: cgFx/cgfxEffectDef.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2cgfx_effect_def_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: cgFx/cgfxEffectDef.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/cgfxEffectDef.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Utilities for dealing with varying attribute on CgFX shaders</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef _cgfxEffectDef_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _cgfxEffectDef_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class holds the definition of a CG effect, including the </span></div>\n\
<div class=\"line\"><span class=\"comment\">// techniques, passes and varying parameters that it includes. Uniform</span></div>\n\
<div class=\"line\"><span class=\"comment\">// parameters (which apply to all techniques and all passes) are </span></div>\n\
<div class=\"line\"><span class=\"comment\">// handled in cgfxAttrDef.h/cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderCommon.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxProfile.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxRCPtr.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxEffect;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxAttrDefList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectHandle.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A vertex attribute on the shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This describes both the cgfx varying parameter and where the data</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for that parameter is coming from in Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxVertexAttribute</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    cgfxVertexAttribute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addRef()<span class=\"keyword\"> const </span>{ ++refcount; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> release() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// What is the CG varying parameter?</span></div>\n\
<div class=\"line\">    <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fSemantic;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fUIName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Where is the data coming from in Maya?</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fSourceName;</div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> SourceType</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        kNone,</div>\n\
<div class=\"line\">        kPosition,</div>\n\
<div class=\"line\">        kNormal,</div>\n\
<div class=\"line\">        kUV,</div>\n\
<div class=\"line\">        kTangent,</div>\n\
<div class=\"line\">        kBinormal,</div>\n\
<div class=\"line\">        kColor,</div>\n\
<div class=\"line\">        kBlindData,</div>\n\
<div class=\"line\">        kUnknown</div>\n\
<div class=\"line\">    }               fSourceType;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             fSourceIndex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The next vertex attribute in the list</span></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; fNext;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keywordtype\">int</span> refcount;    <span class=\"comment\">// The ref count</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// source streams that the cgfx vertex attribute can be bound to </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>sourceStreamInfo</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    cgfxVertexAttribute::SourceType fSourceType;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fSourceName; <span class=\"comment\">// Use this instead of source index</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fOffset;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fStride;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fDimension;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fElementSize;  <span class=\"comment\">//size in bytes of each element in the stream</span></div>\n\
<div class=\"line\">    GLuint fDataBufferId;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A vertex attribute structure (e.g. pack uvSet1 and uvSet2 into a single float4)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MAX_STRUCTURE_ELEMENTS 16</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxVaryingParameterStructure</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// How many elements are in this structure</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             fLength;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// How many bytes are in the structure</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             fSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>cgfxVaryingParameterElement</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxRCPtr&lt;cgfxVertexAttribute&gt; fVertexAttribute;    <span class=\"comment\">// Which vertex attribute controls this parameter?</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>                 fSize;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Our list of elements</span></div>\n\
<div class=\"line\">    cgfxVaryingParameterElement fElements[ MAX_STRUCTURE_ELEMENTS];</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A trivial data cache for feeding packed structures</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxStructureCache</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    cgfxStructureCache();</div>\n\
<div class=\"line\">    ~cgfxStructureCache();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find an entry in the cache. Return the allocated data block, or</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// null if the entry is not found.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* findEntry(<span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add an entry in the cache. Return the allocated data block.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* addEntry(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keywordtype\">int</span> stride, <span class=\"keywordtype\">int</span> count);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> flush();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> flush(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    cgfxStructureCache(<span class=\"keyword\">const</span> cgfxStructureCache&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxStructureCache&amp; operator=(<span class=\"keyword\">const</span> cgfxStructureCache&amp;);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Entry</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keywordtype\">int</span> stride, <span class=\"keywordtype\">int</span> count);</div>\n\
<div class=\"line\">        ~Entry();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_handle.html\">MObjectHandle</a>   fShape;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fName;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>*           fData;</div>\n\
<div class=\"line\">        Entry*          fNext;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Entry* fEntries;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A varying parameter to a pass</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxVaryingParameter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Only cgfxPass is allowed to create and destroy</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cgfxVaryingParameter&#39;s.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>cgfxPass;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> addRecursive(</div>\n\
<div class=\"line\">        CGparameter parameter,</div>\n\
<div class=\"line\">        cgfxVaryingParameter**&amp; nextParameter</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    cgfxVaryingParameter( CGparameter parameter);</div>\n\
<div class=\"line\">    ~cgfxVaryingParameter();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    cgfxVaryingParameter(<span class=\"keyword\">const</span> cgfxVaryingParameter&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxVaryingParameter&amp; operator=(<span class=\"keyword\">const</span> cgfxVaryingParameter&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setupAttributes(</div>\n\
<div class=\"line\">        cgfxRCPtr&lt;cgfxVertexAttribute&gt;&amp; vertexAttributes,</div>\n\
<div class=\"line\">        CGprogram program</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; setupAttribute(</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                 name,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;          semantic,</div>\n\
<div class=\"line\">        CGparameter             parameter,</div>\n\
<div class=\"line\">        cgfxRCPtr&lt;cgfxVertexAttribute&gt;&amp;   vertexAttributes</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            null() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            bind( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, cgfxStructureCache* cache,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> vertexCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * vertexArray,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> normalsPerVertex, <span class=\"keywordtype\">int</span> normalCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** normalArrays,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> colorCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** colorArrays,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> texCoordCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** texCoordArrays) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            bind( <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* data, <span class=\"keywordtype\">int</span> stride) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//viewport 2.0 implementation</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> bind(<span class=\"keyword\">const</span> sourceStreamInfo&amp; source) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// The cg parameter</span></div>\n\
<div class=\"line\">    CGparameter                     fParameter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The name of the parameter</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// GL parameter type and index (e.g. TEXCOORD*7*) used to bind this parameter.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                             fGLType;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                             fGLIndex;           </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Which vertex attribute controls this parameter? (not used if a structure is present)</span></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt;            fVertexAttribute; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The structure of elements feeding this parameter (not used if an attribute is present)</span></div>\n\
<div class=\"line\">    cgfxVaryingParameterStructure*  fVertexStructure;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// The next parameter in this pass</span></div>\n\
<div class=\"line\">    cgfxVaryingParameter*           fNext;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A pass in a technique</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxPass</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Only cgfxTechnique is allowed to create and destroy</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cgfxPass&#39;s.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>cgfxTechnique;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxPass(CGpass                  pass,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> cgfxProfile*      profile);</div>\n\
<div class=\"line\">    ~cgfxPass();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    cgfxPass(<span class=\"keyword\">const</span> cgfxPass&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxPass&amp; operator=(<span class=\"keyword\">const</span> cgfxPass&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setupAttributes( cgfxRCPtr&lt;cgfxVertexAttribute&gt;&amp; vertexAttributes) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Specify the Cg profile to use when compiling the shader. If</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profile is NULL, the default Cg profile is used, i.e. the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profile specified in the .cgfx file.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setProfile(<span class=\"keyword\">const</span> cgfxProfile* profile) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setCgState()<span class=\"keyword\"> const </span>{ cgSetPassState(fPass); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> resetCgState()<span class=\"keyword\"> const </span>{ cgResetPassState(fPass); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateCgParameters()<span class=\"keyword\"> const </span>{ cgUpdatePassParameters(fPass); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGpass getCgPass()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fPass; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxPass* getNext()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fNext; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> bind(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, cgfxStructureCache* cache,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> vertexCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * vertexArray,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> normalsPerVertex, <span class=\"keywordtype\">int</span> normalCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** normalArrays,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> colorCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** colorArrays,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> texCoordCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** texCoordArrays) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//viewport 2.0 implementation</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> bind(<span class=\"keyword\">const</span> sourceStreamInfo dataSources[], <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> sourceCount) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    CGpass          fPass;              <span class=\"comment\">// The cg pass</span></div>\n\
<div class=\"line\">    CGprogram       fProgram;           <span class=\"comment\">// The vertex program</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fName;              <span class=\"comment\">// The name of the pass</span></div>\n\
<div class=\"line\">    cgfxVaryingParameter* fParameters;  <span class=\"comment\">// The list of parameters in this pass</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxProfile     fDefaultProfile;    <span class=\"comment\">// The default profile of this pass.</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    cgfxPass*       fNext;              <span class=\"comment\">// The next pass in this technique</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A technique in an effect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxTechnique</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Only cgfxEffect is allowed to create and destroy</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cgfxTechnique&#39;s.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>cgfxEffect;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxTechnique( CGtechnique technique, <span class=\"keyword\">const</span> cgfxProfile* profile);</div>\n\
<div class=\"line\">    ~cgfxTechnique();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    cgfxTechnique(<span class=\"keyword\">const</span> cgfxTechnique&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique&amp; operator=(<span class=\"keyword\">const</span> cgfxTechnique&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Specify the Cg profile to use when compiling the shader. If</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profile is NULL, the default Cg profile is used, i.e. the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profile specified in the .cgfx file.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setProfile(<span class=\"keyword\">const</span> cgfxProfile* profile) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> validate() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxProfile* getSupportedProfile(<span class=\"keyword\">const</span> cgfxProfile* profile) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> hasBlending(CGtechnique technique);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> getName()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fName; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isValid()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fValid; }</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> getCompilationErrors()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fErrorString; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasBlending()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fHasBlending; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxPass* getFirstPass()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fPasses; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* getNext()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fNext; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> getNumPasses()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fNumPasses; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The caller is the owner of the returned list!</span></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; getVertexAttributes() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                 fName;              <span class=\"comment\">// The name of this technique</span></div>\n\
<div class=\"line\">    CGtechnique             fTechnique;         <span class=\"comment\">// The cg technique</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keywordtype\">bool</span>            fValid;             <span class=\"comment\">// The cg technique is valid for the current profile</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         fErrorString;       <span class=\"comment\">// Compilation errors for this technique</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                    fHasBlending;       <span class=\"comment\">// The technique uses blending</span></div>\n\
<div class=\"line\">    cgfxPass*               fPasses;            <span class=\"comment\">// The list of passes in this technique</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                     fNumPasses;         <span class=\"comment\">// Number of passes</span></div>\n\
<div class=\"line\">    cgfxTechnique*          fNext;              <span class=\"comment\">// The next technique in the effect</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// An effect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>cgfxEffect</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> cgfxRCPtr&lt;const cgfxEffect&gt; loadEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isValid()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fEffect != NULL &amp;&amp; fTechniques != 0; }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* getFirstTechnique()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fTechniques; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* getTechnique(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> techniqueName) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxAttrDefList&gt; attrsFromEffect() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// Specify the Cg profile to use when compiling the shader. If</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profile is NULL, the default Cg profile is used, i.e. the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profile specified in the .cgfx file.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setProfile(<span class=\"keyword\">const</span> cgfxProfile* profile) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>cgfxRCPtr&lt;const cgfxEffect&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a CGeffect with the proper Cg compilation flags.</span></div>\n\
<div class=\"line\">    cgfxEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~cgfxEffect();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addRef()<span class=\"keyword\"> const </span>{ ++refcount; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> release() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    cgfxEffect(<span class=\"keyword\">const</span> cgfxEffect&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxEffect&amp; operator=(<span class=\"keyword\">const</span> cgfxEffect&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keywordtype\">int</span>                       refcount;    <span class=\"comment\">// The ref count</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    CGeffect                          fEffect;      <span class=\"comment\">// The cg effect</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique*              fTechniques;  <span class=\"comment\">// The list of techniques in this effect</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keyword\">const</span> cgfxProfile*        fProfile;     <span class=\"comment\">// The current profile</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef VALID</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* _cgfxAttrDef_h_ */</span><span class=\"preprocessor\"></span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";