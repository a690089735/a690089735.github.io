var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcExport/MayaNurbsSurfaceWriter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_export_2_maya_nurbs_surface_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcExport/MayaNurbsSurfaceWriter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcExport/MayaNurbsSurfaceWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2012,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaNurbsSurfaceWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaNurbsSurfaceWriter::MayaNurbsSurfaceWriter(<a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; iDag,</div>\n\
<div class=\"line\">    Alembic::Abc::OObject &amp; iParent, Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> JobArgs &amp; iArgs) :</div>\n\
<div class=\"line\">    mIsSurfaceAnimated(false), mDagPath(iDag)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> surface = iDag.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html\">MFnNurbsSurface</a> nurbs(mDagPath, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;MFnNurbsSurface() failed for MayaNurbsSurfaceWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = nurbs.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">    name = util::stripNamespaces(name, iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::ONuPatch obj(iParent, name.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), iTimeIndex);</div>\n\
<div class=\"line\">    mSchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">    Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(nurbs, iArgs))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cp = mSchema.getArbGeomParams();</div>\n\
<div class=\"line\">        up = mSchema.getUserProperties();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, nurbs,</div>\n\
<div class=\"line\">        iTimeIndex, iArgs, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// for now if it a trim surface, treat it like it&#39;s animated</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( iTimeIndex != 0 &amp;&amp; (nurbs.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#aedd888d3d915646cbe38bb3e7ba3904e\">isTrimmedSurface</a>() ||</div>\n\
<div class=\"line\">        util::isAnimated(surface)) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mIsSurfaceAnimated = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        iTimeIndex = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!mIsSurfaceAnimated || iArgs.setFirstAnimShape)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        write();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MayaNurbsSurfaceWriter::isAnimated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>  mIsSurfaceAnimated ||</div>\n\
<div class=\"line\">            (mAttrs != NULL &amp;&amp; mAttrs-&gt;isAnimated());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> MayaNurbsSurfaceWriter::getNumCVs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html\">MFnNurbsSurface</a> nurbs(mDagPath);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> nurbs.numCVsInU() * nurbs.numCVsInV();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// the arrays being passed in are assumed to be empty</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaNurbsSurfaceWriter::write()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html\">MFnNurbsSurface</a> nurbs(mDagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> startU, endU, startV, endV;</div>\n\
<div class=\"line\">    nurbs.getKnotDomain(startU, endU, startV, endV);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::ONuPatchSchema::Sample samp;</div>\n\
<div class=\"line\">    samp.setUOrder(nurbs.degreeU() + 1);</div>\n\
<div class=\"line\">    samp.setVOrder(nurbs.degreeV() + 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numKnotsInU = nurbs.numKnotsInU();</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; sampKnotsInU;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// guard against a degenerative case</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numKnotsInU &gt; 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> knotsInU;</div>\n\
<div class=\"line\">        nurbs.getKnotsInU(knotsInU);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// pad the start and end with a knot on each side, since thats what</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// most apps, like Houdini and Renderman want these two extra knots</span></div>\n\
<div class=\"line\">        sampKnotsInU.reserve(numKnotsInU+2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// push_back a dummy value, we will set it below</span></div>\n\
<div class=\"line\">        sampKnotsInU.push_back(0.0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numKnotsInU; i++)</div>\n\
<div class=\"line\">            sampKnotsInU.push_back( static_cast&lt;float&gt;(knotsInU[i]));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> k1 = sampKnotsInU[1];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> k2 = sampKnotsInU[2];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> klast_1 = sampKnotsInU[numKnotsInU];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> klast_2 = sampKnotsInU[numKnotsInU-1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        sampKnotsInU[0] = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">float</span><span class=\"keyword\">&gt;</span>(2.0 * k1 - k2);</div>\n\
<div class=\"line\">        sampKnotsInU.push_back(static_cast&lt;float&gt;(2.0 * klast_1 - klast_2));</div>\n\
<div class=\"line\">        samp.setUKnot(Alembic::Abc::FloatArraySample(sampKnotsInU));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numKnotsInV = nurbs.numKnotsInV();</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; sampKnotsInV;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// do it for V</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numKnotsInV &gt; 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> knotsInV;</div>\n\
<div class=\"line\">        nurbs.getKnotsInV(knotsInV);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// pad the start and end with a knot on each side, since thats what</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// most apps, like Houdini and Renderman want these two extra knots</span></div>\n\
<div class=\"line\">        sampKnotsInV.reserve(numKnotsInV+2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// push_back a dummy value, we will set it below</span></div>\n\
<div class=\"line\">        sampKnotsInV.push_back(0.0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numKnotsInV; i++)</div>\n\
<div class=\"line\">            sampKnotsInV.push_back(static_cast&lt;float&gt;(knotsInV[i]));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> k1 = sampKnotsInV[1];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> k2 = sampKnotsInV[2];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> klast_1 = sampKnotsInV[numKnotsInV];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> klast_2 = sampKnotsInV[numKnotsInV-1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        sampKnotsInV[0] = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">float</span><span class=\"keyword\">&gt;</span>(2.0 * k1 - k2);</div>\n\
<div class=\"line\">        sampKnotsInV.push_back(static_cast&lt;float&gt;(2.0 * klast_1 - klast_2));</div>\n\
<div class=\"line\">        samp.setVKnot(Alembic::Abc::FloatArraySample(sampKnotsInV));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// for closed and periodic we are saving duplicate information</span></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> cvArray;</div>\n\
<div class=\"line\">    nurbs.getCVs(cvArray);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCVs = cvArray.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numCVsInU = nurbs.numCVsInU();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numCVsInV = nurbs.numCVsInV();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    samp.setNu(numCVsInU);</div>\n\
<div class=\"line\">    samp.setNv(numCVsInV);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Abc::V3f&gt; sampPos;</div>\n\
<div class=\"line\">    sampPos.reserve(numCVs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;float&gt; sampPosWeights;</div>\n\
<div class=\"line\">    sampPosWeights.reserve(numCVs);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> weightsOne = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya stores the data where v varies the fastest (v,u order)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// so we need to pack the data differently u,v order</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (v reversed to make clockwise???)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> v = numCVsInV - 1; v &gt; -1; v--)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> u = 0; u &lt; numCVsInU; u++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> index = u * numCVsInV + v;</div>\n\
<div class=\"line\">            sampPos.push_back(Alembic::Abc::V3f(</div>\n\
<div class=\"line\">                static_cast&lt;float&gt;(cvArray[index].x),</div>\n\
<div class=\"line\">                static_cast&lt;float&gt;(cvArray[index].y),</div>\n\
<div class=\"line\">                static_cast&lt;float&gt;(cvArray[index].z) ));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fabs(cvArray[index].w - 1.0) &gt; 1e-12)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                weightsOne = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            sampPosWeights.push_back(static_cast&lt;float&gt;(cvArray[index].w));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    samp.setPositions(Alembic::Abc::V3fArraySample(sampPos));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!weightsOne)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        samp.setPositionWeights(Alembic::Abc::FloatArraySample(sampPosWeights));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!nurbs.isTrimmedSurface())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mSchema.set(samp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numRegions = nurbs.numRegions();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// each boundary is a curvegroup, it can have multiple trim curve segments</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// A Maya&#39;s trimmed NURBS surface has multiple regions.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Inside a region, there are multiple boundaries.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// There are one CCW outer boundary and optional CW inner boundaries.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Each boundary is a closed boundary and consists of multiple curves.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Alembic has the same semantic as RenderMan.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// RenderMan&#39;s doc says: &quot;The curves of a loop connect</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   in head-to-tail fashion and must be explicitly closed. &quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// A Maya boundary is equivalent to an Alembic/RenderMan loop</span></div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; trimNumCurves;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; trimNumPos;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; trimOrder;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; trimKnot;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; trimMin;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; trimMax;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; trimU;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; trimV;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; trimW;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Util::int32_t numLoops = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numRegions; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html\">MTrimBoundaryArray</a> result;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// if the 3rd argument is set to be true, return the 2D curve</span></div>\n\
<div class=\"line\">        nurbs.getTrimBoundaries(result, i, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numBoundaries = result.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; numBoundaries; j++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> boundary = result[j];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTrimCurve = boundary.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            trimNumCurves.push_back(static_cast&lt;Alembic::Util::int32_t&gt;(numTrimCurve));</div>\n\
<div class=\"line\">            numLoops++;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; numTrimCurve; k++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curveObj = boundary[k];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (curveObj.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a9366a44db1c93f593f8e65fcbec6a1b9\">MFn::kNurbsCurve</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html\">MFnNurbsCurve</a> mFnCurve(curveObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    Alembic::Util::int32_t numCVs = mFnCurve.numCVs();</div>\n\
<div class=\"line\">                    trimNumPos.push_back(numCVs);</div>\n\
<div class=\"line\">                    trimOrder.push_back(mFnCurve.degree()+1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> start, end;</div>\n\
<div class=\"line\">                    mFnCurve.getKnotDomain(start, end);</div>\n\
<div class=\"line\">                    trimMin.push_back(static_cast&lt;float&gt;(start));</div>\n\
<div class=\"line\">                    trimMax.push_back(static_cast&lt;float&gt;(end));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> cvArray;</div>\n\
<div class=\"line\">                    mFnCurve.getCVs(cvArray);</div>\n\
<div class=\"line\">                    <span class=\"comment\">//append to curveGrp.cv vector</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> offsetV = startV+endV;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::int32_t l = 0; l &lt; numCVs; l++)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        trimU.push_back(static_cast&lt;float&gt;(cvArray[l].x));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// v&#39; = maxV + minV - v</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// this is because we flipped v on the surface</span></div>\n\
<div class=\"line\">                        trimV.push_back(</div>\n\
<div class=\"line\">                            static_cast&lt;float&gt;(offsetV-cvArray[l].y));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        trimW.push_back(static_cast&lt;float&gt;(cvArray[l].w));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> knot;</div>\n\
<div class=\"line\">                    mFnCurve.getKnots(knot);</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numKnots = knot.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// push_back a dummy value, we will set it below</span></div>\n\
<div class=\"line\">                    std::size_t totalNumKnots = trimKnot.size();</div>\n\
<div class=\"line\">                    trimKnot.push_back(0.0);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> l = 0; l &lt; numKnots; l++)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        trimKnot.push_back(static_cast&lt;float&gt;(knot[l]));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// for a knot sequence with multiple end knots, duplicate</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the existing first and last knots once more.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// for a knot sequence with uniform end knots, create their</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the new knots offset at an interval equal to the existing</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// first and last knot intervals</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> k1 = trimKnot[totalNumKnots+1];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> k2 = trimKnot[totalNumKnots+2];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> klast_1 = trimKnot[trimKnot.size()-1];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> klast_2 = trimKnot[trimKnot.size()-2];</div>\n\
<div class=\"line\">                    trimKnot[totalNumKnots] = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">float</span><span class=\"keyword\">&gt;</span>(2.0 * k1 - k2);</div>\n\
<div class=\"line\">                    trimKnot.push_back(</div>\n\
<div class=\"line\">                        static_cast&lt;float&gt;(2.0 * klast_1 - klast_2));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            } <span class=\"comment\">// for k</span></div>\n\
<div class=\"line\">        } <span class=\"comment\">// for j</span></div>\n\
<div class=\"line\">    } <span class=\"comment\">// for i</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    samp.setTrimCurve(numLoops,</div>\n\
<div class=\"line\">        Alembic::Abc::Int32ArraySample(trimNumCurves),</div>\n\
<div class=\"line\">        Alembic::Abc::Int32ArraySample(trimNumPos),</div>\n\
<div class=\"line\">        Alembic::Abc::Int32ArraySample(trimOrder),</div>\n\
<div class=\"line\">        Alembic::Abc::FloatArraySample(trimKnot),</div>\n\
<div class=\"line\">        Alembic::Abc::FloatArraySample(trimMin),</div>\n\
<div class=\"line\">        Alembic::Abc::FloatArraySample(trimMax),</div>\n\
<div class=\"line\">        Alembic::Abc::FloatArraySample(trimU),</div>\n\
<div class=\"line\">        Alembic::Abc::FloatArraySample(trimV),</div>\n\
<div class=\"line\">        Alembic::Abc::FloatArraySample(trimW));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mSchema.set(samp);</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";