var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheMaterial.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_material_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheMaterial.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheMaterial.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _gpuCacheMaterial_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _gpuCacheMaterial_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;functional&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MColor.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheConfig.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Hash object for MString</span></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MStringHash</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::size_t operator()(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; key)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = key.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* begin = key.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> GPUCache::hash_range(begin, begin + length);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialProperty</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A typed material property with connections and animated values.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The property has 3 states:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   1) Default Value (fValues.size() == 0): A brand new property with no samples.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   2) Static Value  (fValues.size() == 1): A static property with only 1 sample.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   3) Animated Value(fValues.size() &gt;= 2): An animated property (rare case?).</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MaterialProperty = Maya MPlug = Alembic (I|O)ScalarProperty</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialProperty</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Const, Weak and Mutable pointers</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const MaterialProperty&gt; Ptr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::weak_ptr&lt;const MaterialProperty&gt;   WPtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;MaterialProperty&gt;       MPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// MaterialNode class has not been declared.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Declare the shared pointers for MaterialNode class.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const MaterialNode&gt; NodePtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::weak_ptr&lt;const MaterialNode&gt;   NodeWPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The value type of this property.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> Type {</div>\n\
<div class=\"line\">        kBool,</div>\n\
<div class=\"line\">        kInt32,</div>\n\
<div class=\"line\">        kFloat,</div>\n\
<div class=\"line\">        kFloat2,</div>\n\
<div class=\"line\">        kFloat3,</div>\n\
<div class=\"line\">        kRGB,</div>\n\
<div class=\"line\">        kString,</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The internal structures to store the property values.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>PropertyData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;PropertyData&gt; PropertyDataPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Map: timeInSeconds -&gt; propertyData</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;double,PropertyDataPtr&gt; SampleMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a property with the given type.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> MPtr create(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, Type type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Constructor and Destructor</span></div>\n\
<div class=\"line\">    MaterialProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, Type type);</div>\n\
<div class=\"line\">    ~MaterialProperty();</div>\n\
<div class=\"line\">    MaterialProperty(<span class=\"keyword\">const</span> MaterialProperty&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    MaterialProperty&amp; operator=(<span class=\"keyword\">const</span> MaterialProperty&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Name and Type methods</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fName; }</div>\n\
<div class=\"line\">    Type           type()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fType; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get and Set methods</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> asBool(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setBool(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">bool</span> value);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> asInt32(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setInt32(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">int</span> value);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> asFloat(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setFloat(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span> value);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> asFloat2(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setFloat2(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> asFloat3(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y, <span class=\"keywordtype\">float</span>&amp; z) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setFloat3(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y, <span class=\"keywordtype\">float</span> z);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; asColor(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setColor(<span class=\"keywordtype\">double</span> seconds, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; value);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; asString(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setString(<span class=\"keywordtype\">double</span> seconds, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Default value methods</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDefault(<span class=\"keywordtype\">bool</span> value);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDefault(<span class=\"keywordtype\">int</span> value);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDefault(<span class=\"keywordtype\">float</span> value);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDefault(<span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDefault(<span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y, <span class=\"keywordtype\">float</span> z);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDefault(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; value);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDefault(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>           getDefaultAsBool() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>            getDefaultAsInt32() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>          getDefaultAsFloat() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>           getDefaultAsFloat2(<span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>           getDefaultAsFloat3(<span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y, <span class=\"keywordtype\">float</span>&amp; z) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;  getDefaultAsColor() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; getDefaultAsString() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isDefault()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fValues.empty(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Animated value methods </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isAnimated()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fValues.size() &gt; 1; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SampleMap&amp; getSamples()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fValues; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Connection methods</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> connect(<span class=\"keyword\">const</span> NodePtr&amp; node, <span class=\"keyword\">const</span> Ptr&amp; prop)</div>\n\
<div class=\"line\">    { assert(node &amp;&amp; prop); fSourceNode = node; fSourceProp = prop; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> NodePtr srcNode()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fSourceNode.lock(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Ptr srcProp()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fSourceProp.lock(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>BoolPropertyData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Int32PropertyData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>FloatPropertyData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Float2PropertyData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Float3PropertyData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>ColorPropertyData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>StringPropertyData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a property data by type.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PropertyDataPtr createData(Type type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the pointer to the value at the given time.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> T* findValue(<span class=\"keywordtype\">double</span> seconds)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isAnimated()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Animated</span></div>\n\
<div class=\"line\">            SampleMap::const_iterator it = fValues.upper_bound(seconds);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != fValues.begin()) --it;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>T*<span class=\"keyword\">&gt;</span>((*it).second.get());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fValues.size() == 1) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>T*<span class=\"keyword\">&gt;</span>((*fValues.begin()).second.get());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>T*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the value at the given time.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setValue(<span class=\"keywordtype\">double</span> seconds, <span class=\"keyword\">const</span> PropertyDataPtr&amp; data)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        assert(fValues.find(seconds) == fValues.end());</div>\n\
<div class=\"line\">        fValues.insert(std::make_pair(seconds, data));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>   fName;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Type      fType;</div>\n\
<div class=\"line\">    PropertyDataPtr fDefaultValue;</div>\n\
<div class=\"line\">    SampleMap       fValues;</div>\n\
<div class=\"line\">    NodeWPtr        fSourceNode;</div>\n\
<div class=\"line\">    WPtr            fSourceProp;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialPropertyRef</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"comment\">// A reference to the real property pointer.</span></div>\n\
<div class=\"line\"> <span class=\"comment\">// We don&#39;t need to find the hash map for the known properties.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialPropertyRef</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MaterialPropertyRef()  {}</div>\n\
<div class=\"line\">    ~MaterialPropertyRef() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MaterialPropertyRef(<span class=\"keyword\">const</span> MaterialPropertyRef&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    MaterialPropertyRef&amp; operator=(<span class=\"keyword\">const</span> MaterialPropertyRef&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MaterialProperty::Ptr operator-&gt;()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ assert(fProp); <span class=\"keywordflow\">return</span> fProp; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    MaterialProperty::MPtr operator-&gt;()</div>\n\
<div class=\"line\">    { assert(fProp); <span class=\"keywordflow\">return</span> fProp; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">operator</span> MaterialProperty::MPtr&amp; ()</div>\n\
<div class=\"line\">    { assert(fProp); <span class=\"keywordflow\">return</span> fProp;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"keyword\">const</span> MaterialProperty::Ptr ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ assert(fProp); <span class=\"keywordflow\">return</span> fProp;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator== (<span class=\"keyword\">const</span> MaterialProperty::Ptr&amp; rv)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ assert(fProp); <span class=\"keywordflow\">return</span> fProp == rv; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>MaterialNode;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> initialize(MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">    { fProp = prop; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MaterialProperty::MPtr fProp;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialNodeVisitor</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is a degenerated visitor class that follows acyclic visitor pattern.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialNodeVisitor</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MaterialNodeVisitor() {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~MaterialNodeVisitor() {}</div>\n\
<div class=\"line\">    MaterialNodeVisitor(<span class=\"keyword\">const</span> MaterialNodeVisitor&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    MaterialNodeVisitor&amp; operator=(<span class=\"keyword\">const</span> MaterialNodeVisitor&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialNode</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A material node with a set of properties.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MaterialNode = Maya shadingNode = Alembic (I|O)MaterialSchema::NetworkNode</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialNode</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Const, Weak and Mutable pointers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const MaterialNode&gt; Ptr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::weak_ptr&lt;const MaterialNode&gt;   WPtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;MaterialNode&gt;       MPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Map: MString -&gt; Property</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;MString,MaterialProperty::Ptr,MStringHash&gt; PropertyMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> MaterialNode::MPtr create(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; nodeType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Constructor and Destructor</span></div>\n\
<div class=\"line\">    MaterialNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">        : fName(name), fType(type)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~MaterialNode() {}</div>\n\
<div class=\"line\">    MaterialNode(<span class=\"keyword\">const</span> MaterialNode&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    MaterialNode&amp; operator=(<span class=\"keyword\">const</span> MaterialNode&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Name and Type methods</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fName; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fType; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Properties methods</span></div>\n\
<div class=\"line\">    MaterialProperty::MPtr createProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, MaterialProperty::Type type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MaterialProperty::MPtr findProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MaterialProperty::Ptr findProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> PropertyMap&amp; properties()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fProperties; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Visitor</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> accept(MaterialNodeVisitor&amp; visitor) <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Called by derived class only.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a known property and initialize its property reference.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> createProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, MaterialProperty::Type type, MaterialPropertyRef&amp; ref);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fName;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fType;</div>\n\
<div class=\"line\">    PropertyMap   fProperties;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialGraph</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class holds all the shading nodes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MaterialGraph = Maya shading nodes connected to a surface material = Alembic (I|O)MaterialSchema</span></div>\n\
<div class=\"line\"><span class=\"comment\">// These nodes can be listed by MEL command: listHistory -pruneDagObjects surfaceMaterial</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialGraph</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Const and Mutable pointers</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const MaterialGraph&gt; Ptr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;MaterialGraph&gt;       MPtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::weak_ptr&lt;const MaterialGraph&gt;   WPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Map: MString -&gt; MaterialNode</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;MString, MaterialNode::Ptr, MStringHash &gt; NamedMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Constructor and Destructor</span></div>\n\
<div class=\"line\">    MaterialGraph(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)</div>\n\
<div class=\"line\">        : fName(name)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~MaterialGraph() {}</div>\n\
<div class=\"line\">    MaterialGraph(<span class=\"keyword\">const</span> MaterialGraph&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    MaterialGraph&amp; operator=(<span class=\"keyword\">const</span> MaterialGraph&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Name methods</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name()<span class=\"keyword\">const </span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fName; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Node Management</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addNode(<span class=\"keyword\">const</span> MaterialNode::Ptr&amp; node)</div>\n\
<div class=\"line\">    { assert(node); fMaterialNodeMap.insert(std::make_pair(node-&gt;name(), node)); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> NamedMap&amp; getNodes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fMaterialNodeMap; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Root (Terminal) Node</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setRootNode(<span class=\"keyword\">const</span> MaterialNode::Ptr&amp; node)</div>\n\
<div class=\"line\">    { assert(node); fRootNode = node; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MaterialNode::Ptr&amp; rootNode()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fRootNode; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isAnimated() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>     fName;</div>\n\
<div class=\"line\">    NamedMap          fMaterialNodeMap;</div>\n\
<div class=\"line\">    MaterialNode::Ptr fRootNode;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialGraphMap</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class contains all materials for a gpuCache node.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialGraphMap</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Const and Mutable pointers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const MaterialGraphMap&gt; Ptr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;MaterialGraphMap&gt;       MPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Map: MString -&gt; MaterialGraph</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;MString, MaterialGraph::Ptr, MStringHash &gt; NamedMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Constructor and Destructor</span></div>\n\
<div class=\"line\">    MaterialGraphMap() {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~MaterialGraphMap() {}</div>\n\
<div class=\"line\">    MaterialGraphMap(<span class=\"keyword\">const</span> MaterialGraphMap&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    MaterialGraphMap&amp; operator=(<span class=\"keyword\">const</span> MaterialGraphMap&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the material graph to this map.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addMaterialGraph(<span class=\"keyword\">const</span> MaterialGraph::Ptr&amp; graph);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get all material graphs.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> NamedMap&amp; getGraphs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fMaterialGraphMap; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the material graph by name.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MaterialGraph::Ptr find(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    NamedMap fMaterialGraphMap;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";