var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: dx11Shader/dx11ShaderCmd.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'dx11_shader_2dx11_shader_cmd_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: dx11Shader/dx11ShaderCmd.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">dx11Shader/dx11ShaderCmd.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &gt;= 1700</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable: 4005 )</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderCmd.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11Shader.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderStrings.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgDatabase.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MCommandResult.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFeedbackLine.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSyntax.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgParser.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// hlslShaderCmd</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Forces all dx11Shader nodes that share the same effect name to reload the effect.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kReloadFlag                             &quot;-r&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kReloadFlagLong                         &quot;-reload&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Retrives the effect file name. Functionnally equivalent to &quot;getAttr dx11Shader1.shader&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -q -fx;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: MayaUberShader.fxo // </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kFXFileFlag                             &quot;-fx&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kFXFileFlagLong                         &quot;-fxFile&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Retrieves a string array containing all techniques supported by the shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -q -lt;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: TessellationOFF TessellationON WireFrame // </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListTechniquesFlag                     &quot;-lt&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListTechniquesFlagLong                 &quot;-listTechniques&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Clears all parameters of the dx11Shader node</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kClearParametersFlag                    &quot;-c&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kClearParametersFlagLong                &quot;-clearParameters&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns a string array containing a pair (Light Group Name, Light Group Type) for</span></div>\n\
<div class=\"line\"><span class=\"comment\">// all logical light groups found in the effect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -q -li;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: Light 0 undefined Light 1 undefined Light 2 undefined // </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListLightInformationFlag               &quot;-li&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListLightInformationFlagLong           &quot;-listLightInformation&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Lists all the parameter names that are member of a logical light. The</span></div>\n\
<div class=\"line\"><span class=\"comment\">// light group name must be provided:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -lp &quot;Light 0&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: Enable_Light_0 Light_0_Position Light_0_Color Light_0_Intensity... </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListLightParametersFlag                &quot;-lp&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListLightParametersFlagLong            &quot;-listLightParameters&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Used together with the -listLightParameters flag, this returns the semantics</span></div>\n\
<div class=\"line\"><span class=\"comment\">// of each light parameter:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -lp &quot;Light 0&quot; -sem;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: Enable_Light_0 LightEnable Light_0_Position Position Light_0_Color LightColor...</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListLightParameterSemanticsFlag        &quot;-sem&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListLightParameterSemanticsFlagLong    &quot;-semantics&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// List all UI groups names:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -q -lg;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: Lighting Light 0 Light 1 Light 2 Ambient and Emissive Diffuse Opacity...</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListUIGroupInformationFlag             &quot;-lg&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListUIGroupInformationFlagLong         &quot;-listUIGroupInformation&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Lists all the parameter names that are member of a UI group. The</span></div>\n\
<div class=\"line\"><span class=\"comment\">// group name must be provided:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -lgp &quot;Diffuse&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: Diffuse_Map Diffuse_Map_Alpha Diffuse_Map_1 Diffuse_Color Lightmap_Map...</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListUIGroupParametersFlag              &quot;-lgp&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kListUIGroupParametersFlagLong          &quot;-listUIGroupParameters&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Connects a scene light to a logical light:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -cl Light_0 pointLight1;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kConnectLightFlag                       &quot;-cl&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kConnectLightFlagLong                   &quot;-connectLight&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns the scene light that is currently driving a light group:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -lcs Light_0;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Result: pointLight1</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -lcs Light_1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      &lt;No result&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kLightConnectionStatusFlag              &quot;-lcs&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kLightConnectionStatusFlagLong          &quot;-lightConnectionStatus&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Explicitly disconnect a scene light from a light group. This will put the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// light into the &quot;Use Shader Settings&quot; mode. To go back to &quot;Automatic Bind&quot;,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// you must also set the value of the implicit bind attribute:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  example:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dx11Shader dx11Shader1 -d Light_0;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      setAttr dx11Shader1.Light_0_use_implicit_lighting 1;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kDisconnectLightFlag                    &quot;-d&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kDisconnectLightFlagLong                &quot;-disconnectLight&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">dx11ShaderCmd::dx11ShaderCmd()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">dx11ShaderCmd::~dx11ShaderCmd()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> dx11ShaderCmd::doIt( <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Parse the shader node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_parser.html\">MArgParser</a> parser( syntax(), args );</div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeName;</div>\n\
<div class=\"line\">    parser.getCommandArgument( 0, nodeName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> list;</div>\n\
<div class=\"line\">    status = list.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>( nodeName );</div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> shaderNode;</div>\n\
<div class=\"line\">    status = list.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a>( 0, shaderNode );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status != MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">        args.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(nodeName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kInvalidDx11ShaderNode, args );</div>\n\
<div class=\"line\">        displayError( msg );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html\">MArgDatabase</a> argData( syntax(), args, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fIsQuery = argData.isQuery();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depFn( shaderNode );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( depFn.typeId() != dx11ShaderNode::typeId() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kInvalidDx11ShaderNode, nodeName );</div>\n\
<div class=\"line\">        displayError( msg );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dx11ShaderNode* shader = (dx11ShaderNode*) depFn.userNode();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !shader )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kInvalidDx11ShaderNode, nodeName );</div>\n\
<div class=\"line\">        displayError( msg );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fIsQuery ) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( parser.isFlagSet(kFXFileFlag) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> path = shader-&gt;effectName();</div>\n\
<div class=\"line\">            setResult( path );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( parser.isFlagSet( kListTechniquesFlag ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setResult( shader-&gt;techniques() );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( parser.isFlagSet( kListLightInformationFlag ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setResult( shader-&gt;lightInfoDescription() );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( parser.isFlagSet( kListUIGroupInformationFlag ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setResult( shader-&gt;getUIGroups() );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Process flag arguments</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( parser.isFlagSet(kReloadFlag) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            dx11ShaderNode::reloadAll( shader-&gt;effectName() );</div>\n\
<div class=\"line\">            <span class=\"comment\">//shader-&gt;reload( );</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( parser.isFlagSet(kClearParametersFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            shader-&gt;clearParameters();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( parser.isFlagSet(kConnectLightFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> connectableLightName;</div>\n\
<div class=\"line\">            argData.getFlagArgument(kConnectLightFlag, 0, connectableLightName);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lightIndex = shader-&gt;getIndexForLightName(connectableLightName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lightIndex &lt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kUnknownConnectableLight, connectableLightName );</div>\n\
<div class=\"line\">                displayError( msg );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> lightName;</div>\n\
<div class=\"line\">            argData.getFlagArgument(kConnectLightFlag, 1, lightName);</div>\n\
<div class=\"line\">            <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> lightPath;</div>\n\
<div class=\"line\">            list.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">            list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>( lightName );</div>\n\
<div class=\"line\">            status = list.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(0, lightPath);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( status != MS::kSuccess )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kUnknownSceneObject, lightName );</div>\n\
<div class=\"line\">                displayError( msg );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// Make sure it is a light:</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> lightShapeDagPath;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numShapes = 0;</div>\n\
<div class=\"line\">            lightPath.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#adacb5cbae84c7500c276c9ec3f79b759\">numberOfShapesDirectlyBelow</a>(numShapes);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numShapes; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> shapePath(lightPath);</div>\n\
<div class=\"line\">                status = shapePath.extendToShapeDirectlyBelow(i);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( status == MS::kSuccess &amp;&amp; shapePath.hasFn(<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a4b1026889ac8a8c906a6f3a53301bbbc\">MFn::kLight</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    lightShapeDagPath = shapePath;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!lightShapeDagPath.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kNotALight, lightName );</div>\n\
<div class=\"line\">                displayError( msg );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            shader-&gt;disconnectLight(lightIndex);</div>\n\
<div class=\"line\">            shader-&gt;connectLight(lightIndex,lightShapeDagPath);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( parser.isFlagSet(kLightConnectionStatusFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> connectableLightName;</div>\n\
<div class=\"line\">            argData.getFlagArgument(kLightConnectionStatusFlag, 0, connectableLightName);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lightIndex = shader-&gt;getIndexForLightName(connectableLightName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lightIndex &lt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kUnknownConnectableLight, connectableLightName );</div>\n\
<div class=\"line\">                displayError( msg );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            setResult( shader-&gt;getLightConnectionInfo(lightIndex));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(parser.isFlagSet(kListLightParametersFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> connectableLightName;</div>\n\
<div class=\"line\">            argData.getFlagArgument(kListLightParametersFlag, 0, connectableLightName);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lightIndex = shader-&gt;getIndexForLightName(connectableLightName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lightIndex &lt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kUnknownConnectableLight, connectableLightName );</div>\n\
<div class=\"line\">                displayError( msg );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            setResult( shader-&gt;getLightableParameters(lightIndex, parser.isFlagSet(kListLightParameterSemanticsFlag) ));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(parser.isFlagSet(kListUIGroupParametersFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> connectableUIGroupName;</div>\n\
<div class=\"line\">            argData.getFlagArgument(kListUIGroupParametersFlag, 0, connectableUIGroupName);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> uiGroupIndex = shader-&gt;getIndexForUIGroupName(connectableUIGroupName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (uiGroupIndex &lt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kUnknownUIGroup, connectableUIGroupName );</div>\n\
<div class=\"line\">                displayError( msg );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            setResult( shader-&gt;getUIGroupParameters(uiGroupIndex) );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( parser.isFlagSet(kDisconnectLightFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> lightName;</div>\n\
<div class=\"line\">            argData.getFlagArgument(kDisconnectLightFlag, 0, lightName);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lightIndex = shader-&gt;getIndexForLightName(lightName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lightIndex &lt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kUnknownConnectableLight, lightName );</div>\n\
<div class=\"line\">                displayError( msg );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            shader-&gt;disconnectLight(lightIndex);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> dx11ShaderCmd::newSyntax()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> syntax;</div>\n\
<div class=\"line\">    syntax.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a414088ac458bc323845634fcf7663e69\">enableQuery</a>();</div>\n\
<div class=\"line\">    syntax.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kReloadFlag, kReloadFlagLong);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kFXFileFlag, kFXFileFlagLong, <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a> );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kListTechniquesFlag, kListTechniquesFlagLong);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kClearParametersFlag, kClearParametersFlagLong);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kListLightInformationFlag, kListLightInformationFlagLong);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kConnectLightFlag, kConnectLightFlagLong, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a> );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kLightConnectionStatusFlag, kLightConnectionStatusFlagLong, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a> );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kListLightParametersFlag, kListLightParametersFlagLong, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a> );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kListLightParameterSemanticsFlag, kListLightParameterSemanticsFlagLong );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kListUIGroupInformationFlag, kListUIGroupInformationFlagLong);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kListUIGroupParametersFlag, kListUIGroupParametersFlagLong, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a> );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kDisconnectLightFlag, kDisconnectLightFlagLong, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>);</div>\n\
<div class=\"line\">    syntax.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a1d306e0ce61954dd7cbdcd0e74a905a6\">addArg</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a> );  </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> syntax;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* dx11ShaderCmd::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> dx11ShaderCmd;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";