var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: apiMeshShape/apiMeshShape.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'api_mesh_shape_2api_mesh_shape_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: apiMeshShape/apiMeshShape.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">apiMeshShape/apiMeshShape.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2019 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in produces the shape node &quot;apiMesh&quot; and &quot;apiMeshSubscene&quot; dependency graph node &quot;apiMeshCreator&quot;, and data type &quot;apiMeshData&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The shape node &quot;apiMesh&quot; performs the draw with a MPxGeometryOverride and the apiMeshSubscene with a MPxSubsceneOverride </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// It demonstrates how to create a polygonal mesh shape with vertices that can be selected, moved, animated, and deformed.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This shape also supports OpenGL display of materials.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in also registers a new kind of geometry data called &quot;apiMeshData&quot;, and demonstrates how to pass this data between nodes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// The &quot;apiMeshCreator&quot; node can create two types of &quot;apiMeshData&quot;: cube and sphere.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The &quot;shapeType&quot; attribute is used to specify the type of shape to create.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This node also takes normal mesh data as an input and converts it to &quot;apiMeshData&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// If there is no input mesh, the output is based on the shapeType attribute.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To create an &quot;apiMesh&quot; shape, you must first create the &quot;apiMesh&quot; node, then create an &quot;apiMeshCreator&quot; node, and connect the two nodes as follows:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// createNode apiMesh -n m1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// createNode apiMeshCreator -n c1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// connectAttr c1.outputSurface m1.inputSurface;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Similarly, to create the &quot;apiMeshSubscene&quot; shape, you create the &quot;apiMeshSubscene&quot; node and a &quot;apiMeshCreatorNode&quot; and connect the two nodes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// createNode apiMeshSubscene -n m1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// createNode apiMeshCreator -n c1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// connectAttr c1.outputSurface m1.inputSurface;</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;apiMeshShape.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;apiMeshGeometryOverride.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;apiMeshSubSceneOverride.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;apiMeshCreator.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;apiMeshData.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;api_macros.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPluginData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAttributeSpecArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAttributeSpec.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAttributeIndex.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSingleIndexedComponent.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlane.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArrayDataBuilder.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEvaluationNode.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> debug = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* sPlugConnection = <span class=\"stringliteral\">&quot;-&gt;-&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// If there is any connection change to the shading group, we should mark the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// material dirty in order to tell the subscene override to bind the shader again.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialDirtyCb(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7\">MNodeMessage::AttributeMessage</a> msg,</div>\n\
<div class=\"line\">                     <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;plug,</div>\n\
<div class=\"line\">                     <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;otherPlug,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">void</span> *clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    apiMesh *pMesh = <span class=\"keyword\">static_cast&lt;</span>apiMesh *<span class=\"keyword\">&gt;</span>(clientData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pMesh &amp;&amp; (msg &amp; (<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7ac6e3b13a568648320a5874a5a3426c6f\">MNodeMessage::kConnectionMade</a>|<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7a03593b1898a65ccdeb57195bedf5fc20\">MNodeMessage::kConnectionBroken</a>)))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        pMesh-&gt;setMaterialDirty(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Shape implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::inputSurface;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::outputSurface;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::cachedSurface;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::worldSurface;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::bboxCorner1;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::bboxCorner2;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::useWeightedTransformUsingFunction;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::useWeightedTweakUsingFunction;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::enableNumericDisplay;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMesh::apiMesh() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMesh::~apiMesh()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(std::map&lt;std::string, MCallbackId&gt;::const_iterator i = fMaterialDirtyCbIds.begin();</div>\n\
<div class=\"line\">        i != fMaterialDirtyCbIds.end(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(i-&gt;second);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Overrides</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::postConstructor()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    When instances of this node are created internally, the MObject associated</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    with the instance is not created until after the constructor of this class</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    is called. This means that no member functions of MPxSurfaceShape can</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    be called in the constructor.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The postConstructor solves this problem. Maya will call this function</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    after the internal object has been created.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    As a general rule do all of your initialization in the postConstructor.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// This call allows the shape to have shading groups assigned</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    setRenderable( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Is there input history to this node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fHasHistoryOnCreate = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Used by VP2.0 sub-scene evaluator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fShapeDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    fMaterialDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::compute( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    When input attributes are dirty this method will be called to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    recompute the output attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    plug      - the attribute that triggered the compute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    datablock - the nodes data</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    kSuccess          - this method could compute the dirty attribute,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    kUnknownParameter - the dirty attribute can not be handled at this level</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (debug)</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;apiMesh::compute : plug &quot;</span> &lt;&lt; plug.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a48239c20d47c65e16603fe70dba736bc\">info</a>() &lt;&lt; endl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( plug == outputSurface ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> computeOutputSurface( plug, datablock );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == cachedSurface ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> computeOutputSurface( plug, datablock );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == worldSurface ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> computeWorldSurface( plug, datablock );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kUnknownParameter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Pre evaluate will mark the shape as dirty</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    PreEvaluate will be called before each evaluation of this node </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    context        - Evaluation context in which the compute happen</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    evaluationNode - contains information about the dirtyness of plugs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    kSuccess          - PreEvaluation successful,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::preEvaluation(<span class=\"keyword\">const</span> <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a>&amp; context, <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (context.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((evaluationNode.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#abc632b073f3b3abeb4ca052f20573dd6\">dirtyPlugExists</a>(inputSurface, &amp;status) &amp;&amp; status) ||</div>\n\
<div class=\"line\">            (evaluationNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#abc632b073f3b3abeb4ca052f20573dd6\">dirtyPlugExists</a>(mControlPoints, &amp;status) &amp;&amp; status) ||</div>\n\
<div class=\"line\">            (evaluationNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#abc632b073f3b3abeb4ca052f20573dd6\">dirtyPlugExists</a>(enableNumericDisplay, &amp;status) &amp;&amp; status)</div>\n\
<div class=\"line\">            )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setShapeDirty();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Post evaluate will signal viewport dirty so that renderer can pick it up</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    PostEvaluate will be called after each evaluation of this node </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    context        - Evaluation context in which the compute happen</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    evaluationNode - contains information about the dirtyness of plugs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    evalType       - type of evaluation that was performed</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    kSuccess          - PostEvaluation successful,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::postEvaluation(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, PostEvaluationType evalType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>() &amp;&amp; evalType != kLeaveDirty)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((evaluationNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#abc632b073f3b3abeb4ca052f20573dd6\">dirtyPlugExists</a>(inputSurface, &amp;status) &amp;&amp; status) ||</div>\n\
<div class=\"line\">            (evaluationNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#abc632b073f3b3abeb4ca052f20573dd6\">dirtyPlugExists</a>(mControlPoints, &amp;status) &amp;&amp; status) ||</div>\n\
<div class=\"line\">            (evaluationNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#abc632b073f3b3abeb4ca052f20573dd6\">dirtyPlugExists</a>(enableNumericDisplay, &amp;status) &amp;&amp; status)</div>\n\
<div class=\"line\">            )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            notifyViewport();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Horribly abuse the purpose of this method to notify the Viewport 2.0</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  renderer that something about this shape has changed and that it should</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  be retranslated.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::setDependentsDirty( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>&amp; plugArray)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// if the dirty attribute is the output mesh then we need to signal the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the renderer that it needs to update the object</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( plug == inputSurface ||</div>\n\
<div class=\"line\">         plug == mControlPoints ||</div>\n\
<div class=\"line\">         plug == mControlValueX ||</div>\n\
<div class=\"line\">         plug == mControlValueY ||</div>\n\
<div class=\"line\">         plug == mControlValueZ ||</div>\n\
<div class=\"line\">         plug == enableNumericDisplay )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        signalDirtyToViewport();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Handle internal attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Attributes that require special storage, bounds checking,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    or other non-standard behavior can be marked as &quot;Internal&quot; by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    using the &quot;MFnAttribute::setInternal&quot; method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The get/setInternalValue methods will get called for internal</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    attributes whenever the attribute values are stored or retrieved</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    using getAttr/setAttr or MPlug getValue/setValue.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The inherited attribute mControlPoints is internal and we want</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    its values to get stored only if there is input history. Otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    any changes to the vertices are stored in the cachedMesh and outputMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    directly.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    If values are retrieved then we want the controlPoints value</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    returned if there is history, this will be the offset or tweak.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    In the case of no history, the vertex position of the cached mesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    is returned.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::getInternalValue( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; result )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isOk = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( (plug == mControlPoints) ||</div>\n\
<div class=\"line\">        (plug == mControlValueX) ||</div>\n\
<div class=\"line\">        (plug == mControlValueY) ||</div>\n\
<div class=\"line\">        (plug == mControlValueZ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If there is input history then the control point value is</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// directly returned. This is the tweak or offset that</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// was applied to the vertex.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If there is no input history then return the actual vertex</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// position and ignore the controlPoints attribute.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( hasHistory() ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa88f4dd4cfd3e964e0806d6e5b253347\">MPxNode::getInternalValue</a>( plug, result );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> val = 0.0;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> datablock = result.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aa20de0e6d105f6e91e1a553a5ce2c20c\">datablock</a>(&amp;status);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">                datablock = forceCache();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( (plug == mControlPoints) &amp;&amp; !plug.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>() ) {</div>\n\
<div class=\"line\">                <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pnt;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = plug.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                value( datablock, index, pnt );</div>\n\
<div class=\"line\">                result.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( pnt[0], pnt[1], pnt[2] );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == mControlValueX ) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = plug.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = parentPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                value( datablock, index, 0, val );</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( val );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == mControlValueY ) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = parentPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                value( datablock, index, 1, val );</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( val );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == mControlValueZ ) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = parentPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                value( datablock, index, 2, val );</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( val );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// This inherited attribute is used to specify whether or</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// not this shape has history. During a file read, the shape</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is created before any input history can get connected.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This attribute, also called &quot;tweaks&quot;, provides a way to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for the shape to determine if there is input history</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// during file reads.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == mHasHistoryOnCreate ) {</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( fHasHistoryOnCreate );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        isOk = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa88f4dd4cfd3e964e0806d6e5b253347\">MPxSurfaceShape::getInternalValue</a>( plug, result );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> isOk;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Handle internal attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Attributes that require special storage, bounds checking,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    or other non-standard behavior can be marked as &quot;Internal&quot; by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    using the &quot;MFnAttribute::setInternal&quot; method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The get/setInternalValue methods will get called for internal</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    attributes whenever the attribute values are stored or retrieved</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    using getAttr/setAttr or MPlug getValue/setValue.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The inherited attribute mControlPoints is internal and we want</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    its values to get stored only if there is input history. Otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    any changes to the vertices are stored in the cachedMesh and outputMesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    directly.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    If values are retrieved then we want the controlPoints value</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    returned if there is history, this will be the offset or tweak.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    In the case of no history, the vertex position of the cached mesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    is returned.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::setInternalValue( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isOk = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> datablock = handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aa20de0e6d105f6e91e1a553a5ce2c20c\">datablock</a>(&amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        datablock = forceCache();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( (plug == mControlPoints) ||</div>\n\
<div class=\"line\">        (plug == mControlValueX) ||</div>\n\
<div class=\"line\">        (plug == mControlValueY) ||</div>\n\
<div class=\"line\">        (plug == mControlValueZ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If there is input history then set the control points value</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// using the normal mechanism. In this case we are setting</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the tweak or offset that will get applied to the input</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// history.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If there is no input history then ignore the controlPoints</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// attribute and set the vertex position directly in the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// cachedMesh.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( hasHistory() ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (datablock.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a70e639ef09764e601a782b8e16ff6dc3\">context</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                verticesUpdated();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a6caab4434e836748680958883564af35\">MPxNode::setInternalValue</a>( plug, handle );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( plug == mControlPoints &amp;&amp; !plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>()) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point;</div>\n\
<div class=\"line\">                double3&amp; ptData = handle.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">                point.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = ptData[0];</div>\n\
<div class=\"line\">                point.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = ptData[1];</div>\n\
<div class=\"line\">                point.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = ptData[2];</div>\n\
<div class=\"line\">                setValue( datablock, index, point );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( plug == mControlValueX ) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = parentPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                setValue( datablock, index, 0, handle.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ac1983b7d41a8dae60dc5b1eb9f44a53c\">asDouble</a>() );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( plug == mControlValueY ) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = parentPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                setValue( datablock, index, 1, handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ac1983b7d41a8dae60dc5b1eb9f44a53c\">asDouble</a>() );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( plug == mControlValueZ ) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = parentPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\">                setValue( datablock, index, 2, handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ac1983b7d41a8dae60dc5b1eb9f44a53c\">asDouble</a>() );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// This inherited attribute is used to specify whether or</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// not this shape has history. During a file read, the shape</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is created before any input history can get connected.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This attribute, also called &quot;tweaks&quot;, provides a way to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for the shape to determine if there is input history</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// during file reads.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == mHasHistoryOnCreate ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a70e639ef09764e601a782b8e16ff6dc3\">context</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fHasHistoryOnCreate = handle.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a69fdebf4dcdf33c1b313eb4a426e0d45\">asBool</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// This should never happen.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        isOk = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a6caab4434e836748680958883564af35\">MPxSurfaceShape::setInternalValue</a>( plug, handle );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> isOk;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::connectionMade( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                                 <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; otherPlug,</div>\n\
<div class=\"line\">                                 <span class=\"keywordtype\">bool</span> asSrc )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Whenever a connection is made to this node, this method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    will get called.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( plug == inputSurface )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisObj = thisMObject();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> historyPlug( thisObj, mHasHistoryOnCreate );</div>\n\
<div class=\"line\">        stat = historyPlug.setValue( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        MCHECKERROR( stat, <span class=\"stringliteral\">&quot;connectionMade: setValue(mHasHistoryOnCreate)&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( asSrc )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> otherNode = otherPlug.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (otherNode.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1fe410ba33fcc24e08a319ee3db38896\">MFn::kShadingEngine</a>) &amp;&amp;</div>\n\
<div class=\"line\">            (plug.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == instObjGroups || plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == objectGroups) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setMaterialDirty(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat; </div>\n\
<div class=\"line\">            MCallbackId cbId = <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#add4ee645b2cea6f0da5b872e8f011a6a\">MNodeMessage::addAttributeChangedCallback</a>(</div>\n\
<div class=\"line\">                otherNode, MaterialDirtyCb, <span class=\"keyword\">this</span>, &amp;stat);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string k = plug.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a58e7cf126b4fe51e9705cee4faaf59fc\">name</a>().<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">                k += sPlugConnection;</div>\n\
<div class=\"line\">                k += otherPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a58e7cf126b4fe51e9705cee4faaf59fc\">name</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG</span></div>\n\
<div class=\"line\">                cout &lt;&lt; <span class=\"stringliteral\">&quot;apiMesh::connectionMade: &quot;</span> &lt;&lt; k &lt;&lt; endl;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                fMaterialDirtyCbIds[k] = cbId;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a82d0d0e95d46b8f41c4fd4bea409c1b3\">MPxNode::connectionMade</a>( plug, otherPlug, asSrc );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::connectionBroken( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; otherPlug,</div>\n\
<div class=\"line\">                                   <span class=\"keywordtype\">bool</span> asSrc )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Whenever a connection to this node is broken, this method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    will get called.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( plug == inputSurface )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisObj = thisMObject();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> historyPlug( thisObj, mHasHistoryOnCreate );</div>\n\
<div class=\"line\">        stat = historyPlug.setValue( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        MCHECKERROR( stat, <span class=\"stringliteral\">&quot;connectionBroken: setValue(mHasHistoryOnCreate)&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (asSrc &amp;&amp; otherPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1fe410ba33fcc24e08a319ee3db38896\">MFn::kShadingEngine</a>) &amp;&amp;</div>\n\
<div class=\"line\">             (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == instObjGroups || plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == objectGroups))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setMaterialDirty(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string k = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a58e7cf126b4fe51e9705cee4faaf59fc\">name</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">        k += sPlugConnection;</div>\n\
<div class=\"line\">        k += otherPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a58e7cf126b4fe51e9705cee4faaf59fc\">name</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG</span></div>\n\
<div class=\"line\">        cout &lt;&lt; <span class=\"stringliteral\">&quot;apiMesh::connectionBroken: &quot;</span> &lt;&lt; k &lt;&lt; endl;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fMaterialDirtyCbIds.find(k) != fMaterialDirtyCbIds.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fMaterialDirtyCbIds[k]);</div>\n\
<div class=\"line\">            fMaterialDirtyCbIds.erase(k);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#ac2493af8700f32f6bc164414ac2b906d\">MPxNode::connectionBroken</a>( plug, otherPlug, asSrc );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::shouldSave( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keywordtype\">bool</span>&amp; result )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    During file save this method is called to determine which</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    attributes of this node should get written. The default behavior</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    is to only save attributes whose values differ from the default.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( plug == mControlPoints || plug == mControlValueX ||</div>\n\
<div class=\"line\">        plug == mControlValueY || plug == mControlValueZ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( hasHistory() ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Calling this will only write tweaks if they are</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// different than the default value.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            status = <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#ac354fc704a7e79728b99e0570b4b51bf\">MPxNode::shouldSave</a>( plug, result );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == cachedSurface ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( hasHistory() ) {</div>\n\
<div class=\"line\">            result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> data;</div>\n\
<div class=\"line\">            status = plug.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( data );</div>\n\
<div class=\"line\">            MCHECKERROR( status, <span class=\"stringliteral\">&quot;shouldSave: MPlug::getValue&quot;</span> );</div>\n\
<div class=\"line\">            result = ( ! data.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#ac354fc704a7e79728b99e0570b4b51bf\">MPxNode::shouldSave</a>( plug, result );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::getCacheSetup( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evalNode,</div>\n\
<div class=\"line\">                             <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_disabling_info.html\">MNodeCacheDisablingInfo</a>&amp; disablingInfo,</div>\n\
<div class=\"line\">                             <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_setup_info.html\">MNodeCacheSetupInfo</a>&amp; cacheSetupInfo,</div>\n\
<div class=\"line\">                             <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp; monitoredAttributes )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a6f70ff175ac7ba65cb65aa3b5592f05b\">MPxSurfaceShape::getCacheSetup</a>(evalNode, disablingInfo, cacheSetupInfo, monitoredAttributes);</div>\n\
<div class=\"line\">    assert(!disablingInfo.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_disabling_info.html#a7a82d4f610253dd0b96d95e59153a429\">getCacheDisabled</a>());</div>\n\
<div class=\"line\">    cacheSetupInfo.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_setup_info.html#aa8e8aa3d550475221be89a27e48df13e\">setPreference</a>(<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_setup_info.html#a6860ea2ce3c2eaa8de289c1638d288eba6039051d3a71594da68a931e5dcf7179\">MNodeCacheSetupInfo::kWantToCacheByDefault</a>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::componentToPlugs( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; component,</div>\n\
<div class=\"line\">                                <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> &amp; list ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Converts the given component values into a selection list of plugs.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This method is used to map components to attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    component - the component to be translated to a plug/attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    list      - a list of plugs representing the passed in component</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( component.hasFn(<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aea2131a2c31c27566ba5ec99ada19fe6\">MFn::kSingleIndexedComponent</a>) ) {</div>\n\
<div class=\"line\">        apiMesh* nonConstPtr = (apiMesh*)<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> vtxComp = nonConstPtr-&gt;convertToVertexComponent(component);</div>\n\
<div class=\"line\">        <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnVtxComp( vtxComp );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode = thisMObject();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug( thisNode, mControlPoints );</div>\n\
<div class=\"line\">        <span class=\"comment\">// If this node is connected to a tweak node, reset the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// plug to point at the tweak node.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        convertToTweakNodePlug(plug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> len = fnVtxComp.elementCount();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; len; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            plug.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a732963807cfd727b7e90eb1342121ce9\">selectAncestorLogicalIndex</a>(fnVtxComp.element(i),</div>\n\
<div class=\"line\">                                            plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>());</div>\n\
<div class=\"line\">            list.add(plug);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#aff52e9d9ee5dc357de01943832391b2c\">MPxSurfaceShape::MatchResult</a></div>\n\
<div class=\"line\">apiMesh::matchComponent( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp; item,</div>\n\
<div class=\"line\">                      <span class=\"keyword\">const</span> <a name=\"_a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_spec_array.html\">MAttributeSpecArray</a>&amp; spec,</div>\n\
<div class=\"line\">                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp; list )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Component/attribute matching method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This method validates component names and indices which are</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    specified as a string and adds the corresponding component</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    to the passed in selection list.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    For instance, select commands such as &quot;select shape1.vtx[0:7]&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    or &quot;select shape1.f[2]&quot; are validated with this method and the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    corresponding component is added to the selection list.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    item - DAG selection item for the object being matched</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    spec - attribute specification object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    list - list to add components to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    the result of the match</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#aff52e9d9ee5dc357de01943832391b2c\">MPxSurfaceShape::MatchResult</a> result = <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#aff52e9d9ee5dc357de01943832391b2ca023cdc99dda44caa5412f12a5b117d62\">MPxSurfaceShape::kMatchOk</a>;</div>\n\
<div class=\"line\">    <a name=\"_a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_spec.html\">MAttributeSpec</a> attrSpec = spec[0];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> dim = attrSpec.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_spec.html#abdbc6a0efd0a3c187df67a0895c2e115\">dimensions</a>();</div>\n\
<div class=\"line\">    <a name=\"_a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = attrSpec.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_spec.html#a2e8d4c38a60806df8c2ffd6d09e70b96\">name</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Look for attributes specifications of the form :</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     vtx[ index ]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     vtx[ lower:upper ]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     f[ index ]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     f[ lower:upper ]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( (1 == spec.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_spec_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) &amp;&amp; (dim &gt; 0) &amp;&amp; ((name == <span class=\"stringliteral\">&quot;vtx&quot;</span>) || (name == <span class=\"stringliteral\">&quot;f&quot;</span>)) ) {</div>\n\
<div class=\"line\">        <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_index.html\">MAttributeIndex</a> attrIndex = attrSpec[0];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numComp;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFn::Type</a> typeComp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (name == <span class=\"stringliteral\">&quot;f&quot;</span>) {</div>\n\
<div class=\"line\">            numComp = meshGeomToUse()-&gt;faceCount;</div>\n\
<div class=\"line\">            typeComp = <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a5ddabf9726f89e07cff62014221fe6fb\">MFn::kMeshPolygonComponent</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            numComp = meshGeomToUse()-&gt;vertices.length();</div>\n\
<div class=\"line\">            typeComp = <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> upper = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> lower = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( attrIndex.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_index.html#a6ccae4069bed342bc3099a27e95f1fbb\">hasLowerBound</a>() ) {</div>\n\
<div class=\"line\">            attrIndex.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_index.html#a424c59dc5963c79877ba071026f703d8\">getLower</a>( lower );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( attrIndex.<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_index.html#a91fe8323a865ca2f0789be32ede111b3\">hasUpperBound</a>() ) {</div>\n\
<div class=\"line\">            attrIndex.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_attribute_index.html#a318bbe3400f72a3007b2d875dd7f8167\">getUpper</a>( upper );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Check the attribute index range is valid</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( (lower &gt; upper) || (upper &gt;= numComp) ) {</div>\n\
<div class=\"line\">            result = <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#aff52e9d9ee5dc357de01943832391b2ca3948a336c42780f6083fcebec4656f25\">MPxSurfaceShape::kMatchInvalidAttributeRange</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <a name=\"_a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">            item.<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>( 0, path );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> objComp = fnComp.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae3b7a9c926f9770f786893bbea825d6b\">create</a>( typeComp );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=lower; i&lt;=upper; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fnComp.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ac611414173082c0660277269ea6a4671\">addElement</a>( i );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            list.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>( path, objComp );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Pass this to the parent class</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#a19499831f6a63ee7b57c942a23764abe\">MPxSurfaceShape::matchComponent</a>( item, spec, list );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::match( <span class=\"keyword\">const</span> <a name=\"_a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a> &amp; mask,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp; componentList ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Check for matches between selection type / component list, and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the type of this shape / or it&#39;s components</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This is used by sets and deformers to make sure that the selected</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      components fall into the &quot;vertex only&quot; category.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      mask          - selection type mask</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      componentList - possible component list</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      true if matched any</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( componentList.length() == 0 ) {</div>\n\
<div class=\"line\">        result = mask.intersects( <a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879da4e61eacbb5f904df37be9e14d36286b1\">MSelectionMask::kSelectMeshes</a> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;(int)componentList.length(); i++ ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( (componentList[i].apiType() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>) &amp;&amp;</div>\n\
<div class=\"line\">                 (mask.intersects(<a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879da705847d327f5166f435cb6ed017ead15\">MSelectionMask::kSelectMeshVerts</a>))</div>\n\
<div class=\"line\">            ) {</div>\n\
<div class=\"line\">                result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a> apiMesh::getShapeSelectionMask() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     This method is overriden to support interactive object selection in Viewport 2.0</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The selection mask of the shape</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879d\">MSelectionMask::SelectionType</a> selType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879da4e61eacbb5f904df37be9e14d36286b1\">MSelectionMask::kSelectMeshes</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a>( selType );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a> apiMesh::getComponentSelectionMask() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     This method is overriden to support interactive component selection in Viewport 2.0</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The selection mask of the shape components</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a> retVal(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879da705847d327f5166f435cb6ed017ead15\">MSelectionMask::kSelectMeshVerts</a>);</div>\n\
<div class=\"line\">    retVal.addMask(<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879da865581859e2396d43e835facc4807ebc\">MSelectionMask::kSelectMeshEdges</a>);</div>\n\
<div class=\"line\">    retVal.addMask(<a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879da22bda3732b520fcd2aa70d5d422f10fa\">MSelectionMask::kSelectMeshFaces</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::createFullVertexGroup() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     This method is used by maya when it needs to create a component</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     containing every vertex (or control point) in the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     This will get called if you apply some deformer to the whole</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     shape, i.e. select the shape in object mode and add a deformer to it.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    A &quot;complete&quot; component representing all vertices in the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a vertex component</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComponent;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> fullComponent = fnComponent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae3b7a9c926f9770f786893bbea825d6b\">create</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the component to be complete, i.e. the elements in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the component will be [0:numVertices-1]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numVertices = ((apiMesh*)<span class=\"keyword\">this</span>)-&gt;meshGeomToUse()-&gt;vertices.length();</div>\n\
<div class=\"line\">    fnComponent.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae4dcbac2a79082a32f18c613803a1c3f\">setCompleteData</a>( numVertices );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fullComponent;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::localShapeInAttr() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns the input attribute of the shape. This is used by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    maya to establish input connections for deformers etc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This attribute must be data of type kGeometryData.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    input attribute for the shape</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> inputSurface;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::localShapeOutAttr() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns the output attribute of the shape. This is used by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    maya to establish out connections for deformers etc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This attribute must be data of tye kGeometryData.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    output attribute for the shape</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> outputSurface;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::worldShapeOutAttr() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns the world space output &quot;array&quot; attribute of the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This is used by maya to establish out connections for deformers etc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This attribute must be an array attribute, each element representing</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    a particular instance of the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This attribute must be data of type kGeometryData.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    world space &quot;array&quot; attribute for the shape</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> worldSurface;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::cachedShapeAttr() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns the cached shape attribute of the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This attribute must be data of type kGeometryData.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    cached shape attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> cachedSurface;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::geometryData() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns the data object for the surface. This gets</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    called internally for grouping (set) information.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    apiMesh* nonConstThis = (apiMesh*)<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> datablock = nonConstThis-&gt;forceCache();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> handle = datablock.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( inputSurface );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> handle.<a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh:: closestPoint ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> &amp; toThisPoint, \\</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> &amp; theClosestPoint, <span class=\"keywordtype\">double</span> tolerance ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Returns the closest point to the given point in space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Used for rigid bind of skin.  Currently returns wrong results;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      override it by implementing a closest point calculation.</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Iterate through the geometry to find the closest point within</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the given tolerance.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = ((apiMesh*)<span class=\"keyword\">this</span>)-&gt;meshGeomToUse();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numVertices = geomPtr-&gt;vertices.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ii=0; ii&lt;numVertices; ii++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> tryThisOne = geomPtr-&gt;vertices[ii];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the output point to the result (hardcode for debug just now)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    theClosestPoint = geomPtr-&gt;vertices[0];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::transformUsing( <span class=\"keyword\">const</span> <a name=\"_a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp; mat,</div>\n\
<div class=\"line\">                              <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp; componentList )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Transforms by the matrix the given components, or the entire shape</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    if the componentList is empty. This method is used by the freezeTransforms command.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    mat           - matrix to tranform the components by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    componentList - list of components to be transformed,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    or an empty list to indicate the whole surface</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Let the other version of transformUsing do the work for us.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    transformUsing( mat,</div>\n\
<div class=\"line\">                    componentList,</div>\n\
<div class=\"line\">                    <a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540a06197a5a5b86b633bb5e473d9385c8a7\">MPxSurfaceShape::kNoPointCaching</a>,</div>\n\
<div class=\"line\">                    NULL);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Transforms the given components. This method is used by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    the move, rotate, and scale tools in component mode.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The bounding box has to be updated here, so do the normals and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    any other attributes that depend on vertex positions.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    mat           - matrix to tranform the components by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    componentList - list of components to be transformed,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    or an empty list to indicate the whole surface</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    cachingMode   - how to use the supplied pointCache (kSavePoints, kRestorePoints)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    pointCache    - if non-null, save or restore points from this list base</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    on the cachingMode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::transformUsing( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp; mat,</div>\n\
<div class=\"line\">                              <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp; componentList,</div>\n\
<div class=\"line\">                              MVertexCachingMode cachingMode,</div>\n\
<div class=\"line\">                              <a name=\"_a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a>* pointCache)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = meshGeomToUse();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create cachingMode boolean values for clearer reading of conditional code below</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> savePoints    = (cachingMode == <a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540a7880e840faa9de43057b0b41a1e84639\">MPxSurfaceShape::kSavePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> restorePoints = (cachingMode == <a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540af7320699eeaf840fd0bc89aee27c91fc\">MPxSurfaceShape::kRestorePoints</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0,j=0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = componentList.<a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( restorePoints ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// restore the points based on the data provided in the pointCache attribute</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cacheLen = pointCache-&gt;<a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (len &gt; 0) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// traverse the component list</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i = 0; i &lt; len &amp;&amp; j &lt; cacheLen; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> elemCount = fnComp.<a name=\"a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount &amp;&amp; j &lt; cacheLen; idx++, ++j ) {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">                    geomPtr-&gt;vertices[elemIndex] = (*pointCache)[j];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// if the component list is of zero-length, it indicates that we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// should transform the entire surface</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            len = geomPtr-&gt;vertices.length();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> idx = 0; idx &lt; len &amp;&amp; j &lt; cacheLen; ++idx, ++j ) {</div>\n\
<div class=\"line\">                geomPtr-&gt;vertices[idx] = (*pointCache)[j];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Transform the surface vertices with the matrix.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If savePoints is true, save the points to the pointCache.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (len &gt; 0) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Traverse the componentList</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i=0; i&lt;len; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> elemCount = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (savePoints &amp;&amp; 0 == i) {</div>\n\
<div class=\"line\">                    pointCache-&gt;<a name=\"a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#ab463a783d0657af39ca2fa7294287662\">setSizeIncrement</a>(elemCount);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount; idx++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                        pointCache-&gt;<a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(geomPtr-&gt;vertices[elemIndex]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    geomPtr-&gt;vertices[elemIndex] *= mat;</div>\n\
<div class=\"line\">                    geomPtr-&gt;normals[idx] =</div>\n\
<div class=\"line\">                        geomPtr-&gt;normals[idx].transformAsNormal( mat );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// If the component list is of zero-length, it indicates that we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// should transform the entire surface</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            len = geomPtr-&gt;vertices.length();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#ab463a783d0657af39ca2fa7294287662\">setSizeIncrement</a>(len);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> idx = 0; idx &lt; len; ++idx ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                    pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(geomPtr-&gt;vertices[idx]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                geomPtr-&gt;vertices[idx] *= mat;</div>\n\
<div class=\"line\">                geomPtr-&gt;normals[idx] =</div>\n\
<div class=\"line\">                    geomPtr-&gt;normals[idx].transformAsNormal( mat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the surface</span></div>\n\
<div class=\"line\">    updateCachedSurface( geomPtr, componentList );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Update the cached surface attribute, handle the tweak history as appropriate,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    and trigger a bounding box change calculation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    geomPtr       - the modified geometry to apply to the cached surface attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::updateCachedSurface( <span class=\"keyword\">const</span> apiMeshGeom* geomPtr, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp; componentList )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = componentList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the value of the cached surface attribute.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We will set the new geometry data into the cached surface attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Access the datablock directly. This code has to be efficient</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and so we bypass the compute mechanism completely.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// NOTE: In general we should always go though compute for getting</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and setting attributes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> datablock = forceCache();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> cachedHandle = datablock.<a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( cachedSurface, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERRORNORET( stat, <span class=\"stringliteral\">&quot;computeInputSurface error getting cachedSurface&quot;</span>)</div>\n\
<div class=\"line\">    apiMeshData* cached = (apiMeshData*) cachedHandle.asPluginData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> dHandle = datablock.outputValue( mControlPoints, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERRORNORET( stat, &quot;updateCachedSurface get dHandle&quot; )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If there is history then calculate the tweaks necessary for</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// setting the final positions of the vertices.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    if ( hasHistory() &amp;&amp; (NULL != cached) ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Since the shape has history, we need to store the tweaks (deltas)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// between the input shape and the tweaked shape in the control points</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// attribute.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        stat = buildControlPoints( datablock, geomPtr-&gt;vertices.length() );</div>\n\
<div class=\"line\">        MCHECKERRORNORET( stat, <span class=\"stringliteral\">&quot;updateCachedSurface buildControlPoints&quot;</span> )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> cpHandle( dHandle, &amp;stat );</div>\n\
<div class=\"line\">        MCHECKERRORNORET( stat, &quot;updateCachedSurface get cpHandle&quot; )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Loop through the component list and transform each vertex.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        for ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;len; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> elemCount = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount; idx++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">                cpHandle.jumpToElement( elemIndex );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> pntHandle = cpHandle.outputValue();</div>\n\
<div class=\"line\">                double3&amp; pnt = pntHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> oldPnt = cached-&gt;fGeometry-&gt;vertices[elemIndex];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> newPnt = geomPtr-&gt;vertices[elemIndex];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> offset = newPnt - oldPnt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                pnt[0] += offset[0];</div>\n\
<div class=\"line\">                pnt[1] += offset[1];</div>\n\
<div class=\"line\">                pnt[2] += offset[2];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Copy outputSurface to cachedSurface</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL == cached ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;NULL cachedSurface data found\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        *(cached-&gt;fGeometry) = *geomPtr;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> pCPs(thisMObject(),mControlPoints);</div>\n\
<div class=\"line\">    pCPs.setValue(dHandle);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Moving vertices will likely change the bounding box.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    computeBoundingBox( datablock );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a70e639ef09764e601a782b8e16ff6dc3\">context</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Tell maya the bounding box for this object has changed</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and thus &quot;boundingBox()&quot; needs to be called.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        childChanged( <a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ae6e3d315c5dd375e845a29ffeb5f8727a3cf2a789a428c68c537cf3ba6b9ad743\">MPxSurfaceShape::kBoundingBoxChanged</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Signal to the viewport that it needs to update the object</span></div>\n\
<div class=\"line\">        signalDirtyToViewport();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Transforms the given components. This method is used by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    the move, rotate, and scale tools in component mode when the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    tweaks for the shape are stored on a separate tweak node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The bounding box has to be updated here, so do the normals and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    any other attributes that depend on vertex positions.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    mat           - matrix to tranform the components by</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    componentList - list of components to be transformed,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    or an empty list to indicate the whole surface</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    cachingMode   - how to use the supplied pointCache (kSavePoints, kRestorePoints, kUpdatePoints)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    pointCache    - if non-null, save or restore points from this list base</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    on the cachingMode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    handle        - handle to the attribute on the tweak node where the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    tweaks should be stored</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">apiMesh::tweakUsing( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp; mat,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp; componentList,</div>\n\
<div class=\"line\">                     MVertexCachingMode cachingMode,</div>\n\
<div class=\"line\">                     <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a>* pointCache,</div>\n\
<div class=\"line\">                     <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a>&amp; handle )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = meshGeomToUse();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create cachingMode boolean values for clearer reading of conditional code below</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> savePoints    = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540a7880e840faa9de43057b0b41a1e84639\">MPxSurfaceShape::kSavePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updatePoints  = (cachingMode == <a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540ab169f7f366f434196216f2bfaaa05017\">MPxSurfaceShape::kUpdatePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> restorePoints = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540af7320699eeaf840fd0bc89aee27c91fc\">MPxSurfaceShape::kRestorePoints</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// It&#39;s safe to reuse the builder here rather than construct a new one because it has been initialized</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// before calling this method.</span></div>\n\
<div class=\"line\">    <a name=\"_a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html\">MArrayDataBuilder</a> builder = handle.<a name=\"a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a48b34beab40fa4ae60cfe40e556f591a\">builder</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> delta, currPt, newPt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = componentList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cacheIndex = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cacheLen = (NULL != pointCache) ? pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() : 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( restorePoints ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// restore points from the pointCache</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (len &gt; 0) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// traverse the component list</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i=0; i&lt;len; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> elemCount = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount &amp;&amp; cacheIndex &lt; cacheLen; idx++, cacheIndex++) {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">                    double3 &amp; pt = builder.<a name=\"a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html#a6d195a24b9624f2e38079e1ce412c9bb\">addElement</a>( elemIndex ).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; cachePt = (*pointCache)[cacheIndex];</div>\n\
<div class=\"line\">                    pt[0] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                    pt[1] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                    pt[2] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// if the component list is of zero-length, it indicates that we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// should transform the entire surface</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            len = geomPtr-&gt;vertices.length();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> idx = 0; idx &lt; len &amp;&amp; idx &lt; cacheLen; ++idx ) {</div>\n\
<div class=\"line\">                double3 &amp; pt = builder.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html#a6d195a24b9624f2e38079e1ce412c9bb\">addElement</a>( idx ).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; cachePt = (*pointCache)[cacheIndex];</div>\n\
<div class=\"line\">                pt[0] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                pt[1] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                pt[2] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Tweak the points. If savePoints is true, also save the tweaks in the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// pointCache. If updatePoints is true, add the new tweaks to the existing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// data in the pointCache.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (len &gt; 0) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i=0; i&lt;len; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> elemCount = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                    pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#ab463a783d0657af39ca2fa7294287662\">setSizeIncrement</a>(elemCount);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount; idx++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">                    double3 &amp; pt = builder.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html#a6d195a24b9624f2e38079e1ce412c9bb\">addElement</a>( elemIndex ).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">                    currPt = newPt = geomPtr-&gt;vertices[elemIndex];</div>\n\
<div class=\"line\">                    newPt *= mat;</div>\n\
<div class=\"line\">                    delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                    delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                    delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                    pt[0] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                    pt[1] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                    pt[2] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// store the points in the pointCache for undo</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(delta*(-1.0));</div>\n\
<div class=\"line\">                    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (updatePoints &amp;&amp; cacheIndex &lt; cacheLen) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; cachePt = (*pointCache)[cacheIndex];</div>\n\
<div class=\"line\">                        cachePt[0] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                        cachePt[1] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                        cachePt[2] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                        cacheIndex++;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// if the component list is of zero-length, it indicates that we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// should transform the entire surface</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            len = geomPtr-&gt;vertices.length();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#ab463a783d0657af39ca2fa7294287662\">setSizeIncrement</a>(len);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> idx = 0; idx &lt; len; ++idx ) {</div>\n\
<div class=\"line\">                double3 &amp; pt = builder.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html#a6d195a24b9624f2e38079e1ce412c9bb\">addElement</a>( idx ).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">                currPt = newPt = geomPtr-&gt;vertices[idx];</div>\n\
<div class=\"line\">                newPt *= mat;</div>\n\
<div class=\"line\">                delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                pt[0] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                pt[1] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                pt[2] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// store the points in the pointCache for undo</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(delta*-1.0);</div>\n\
<div class=\"line\">                } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (updatePoints &amp;&amp; idx &lt; cacheLen) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; cachePt = (*pointCache)[idx];</div>\n\
<div class=\"line\">                    cachePt[0] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                    cachePt[1] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                    cachePt[2] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the builder into the handle.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    handle.<a name=\"a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a575cf7adebfd8e3c29e588d2cd1c47a6\">set</a>(builder);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tell maya the bounding box for this object has changed</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and thus &quot;boundingBox()&quot; needs to be called.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    childChanged( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ae6e3d315c5dd375e845a29ffeb5f8727a3cf2a789a428c68c537cf3ba6b9ad743\">MPxSurfaceShape::kBoundingBoxChanged</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Signal to the viewport that it needs to update the object</span></div>\n\
<div class=\"line\">    signalDirtyToViewport();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Transforms the given soft-selected components interpolated using the specified weights.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This method is used by the move, rotate, and scale tools in component mode.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The bounding box has to be updated here, so do the normals and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    any other attributes that depend on vertex positions.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    It is similar to the transformUsing() virtual function.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    xform           the matrix representing the transformation that is to be applied to the components</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    space           the matrix representing the transformation space to perform the interpolated transformation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    A value of NULL indicates it should be ignored.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    componentList   a list of components to be transformed and their weights.  This list will not be empty.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    cachingMode     whether the points should be added/updated in the pointCache, or restored from</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    the pointCache, or transform using the original values in the pointCache.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    pointCache      used to store for undo and restore points during undo</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    freezePlane     used for symmetric transformation of components.  A value of NULL indicates</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    it is not used and there is no symmetric transformation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::weightedTransformUsing(   <span class=\"keyword\">const</span> <a name=\"_a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a>&amp; xform,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>* space,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp; componentList,</div>\n\
<div class=\"line\">                                        MVertexCachingMode cachingMode,</div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a>* pointCache,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <a name=\"_a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html\">MPlane</a>* freezePlane )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// For example purposes only, use the default MPxSurfaceShape::weightedTransformUsing() if the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// useWeightedTransformUsingFunction is false</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plg_useWeightedTransformUsingFunction( thisMObject(), useWeightedTransformUsingFunction );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> val_useWeightedTransformUsingFunction = plg_useWeightedTransformUsingFunction.asBool();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!val_useWeightedTransformUsingFunction)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#a66ccd127d36b5dc896459eddff2b7587\">MPxSurfaceShape::weightedTransformUsing</a>(xform, space, componentList, cachingMode, pointCache, freezePlane);</div>\n\
<div class=\"line\">        signalDirtyToViewport();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create cachingMode boolean values for clearer reading of conditional code below</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> savePoints    = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540a7880e840faa9de43057b0b41a1e84639\">MPxSurfaceShape::kSavePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updatePoints  = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540ab169f7f366f434196216f2bfaaa05017\">MPxSurfaceShape::kUpdatePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> restorePoints  = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540af7320699eeaf840fd0bc89aee27c91fc\">MPxSurfaceShape::kRestorePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> transformOrigPoints  = (cachingMode == <a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540a1681e97d030f79b2cd45f3bb33644934\">MPxSurfaceShape::kTransformOriginalPoints</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Pre-calculate parameters</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> spaceInv;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (space) {</div>\n\
<div class=\"line\">        spaceInv = space-&gt;<a name=\"a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Traverse the componentList and modify the control points</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = meshGeomToUse();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> almostZero = 1.0e-5f; <span class=\"comment\">// Hardcoded tolerance</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> pointCacheIndex = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = componentList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;len; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> elemCount = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasWeights = fnComp.<a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a167255d70b17aa49ebd60a982d3e7624\">hasWeights</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasSeam = (NULL != freezePlane);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (savePoints &amp;&amp; (0 == i) ) {</div>\n\
<div class=\"line\">            pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#ab463a783d0657af39ca2fa7294287662\">setSizeIncrement</a>(elemCount);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount; idx++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> perc = (hasWeights) ? fnComp.<a name=\"a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a1ad693c92af89f76873cab0e325afea5\">weight</a>(idx).<a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_weight.html#a387cb47fefb3e2efef6e08de098d83cc\">influence</a>() : 1.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Only act upon points (store in pointCache, transform, etc) that have a non-zero weight</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (perc &gt; almostZero) { <span class=\"comment\">// if the point has enough weight to be transformed</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (restorePoints) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// restore the original point from the point cache</span></div>\n\
<div class=\"line\">                    geomPtr-&gt;vertices[elemIndex] = <a name=\"_a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>( (*pointCache)[pointCacheIndex] );</div>\n\
<div class=\"line\">                    pointCacheIndex++;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> { <span class=\"comment\">// perform point transformation</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Update the pointCache with the original value</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                        pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>( geomPtr-&gt;vertices[elemIndex] );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( transformOrigPoints ) { <span class=\"comment\">// start by reverting points back to their original values stored in the pointCache for the transformation</span></div>\n\
<div class=\"line\">                        geomPtr-&gt;vertices[elemIndex] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>( (*pointCache)[pointCacheIndex] );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( updatePoints ) { <span class=\"comment\">// update the pointCache with the current values</span></div>\n\
<div class=\"line\">                        (*pointCache)[pointCacheIndex] = geomPtr-&gt;vertices[elemIndex];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Compute interpolated transformation matrix</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (perc == 1.0) {</div>\n\
<div class=\"line\">                        mat = xform.<a name=\"a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a8e2933c5f73e8cfb7409366582caa596\">asMatrix</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        mat = (space) ? (*space) * xform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a8e2933c5f73e8cfb7409366582caa596\">asMatrix</a>(perc) * (spaceInv) : xform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a8e2933c5f73e8cfb7409366582caa596\">asMatrix</a>(perc) ;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// transform to new position</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt = geomPtr-&gt;vertices[elemIndex];  <span class=\"comment\">// convert from MVector to MPoint</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> newp(pt);</div>\n\
<div class=\"line\">                    newp *= mat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// handle symmetry and reflection</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( hasSeam &amp;&amp; fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a1ad693c92af89f76873cab0e325afea5\">weight</a>(idx).<a name=\"a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_weight.html#a5921aa0814dfcd975a70cc0a08f48840\">seam</a>() &gt; 0.0f)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        newp += freezePlane-&gt;<a name=\"a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html#ae4e3074eb251d7f127ac9ccd2bbac916\">normal</a>() * (fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a1ad693c92af89f76873cab0e325afea5\">weight</a>(idx).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_weight.html#a5921aa0814dfcd975a70cc0a08f48840\">seam</a>() * (freezePlane-&gt;<a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html#ab9c91d6dfd555a8afc3614baed180ce6\">directedDistance</a>(pt) - freezePlane-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html#ab9c91d6dfd555a8afc3614baed180ce6\">directedDistance</a>( newp)));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Update the geomPtr with the new point</span></div>\n\
<div class=\"line\">                    geomPtr-&gt;vertices[elemIndex] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>( newp );</div>\n\
<div class=\"line\">                    pointCacheIndex++;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the surface</span></div>\n\
<div class=\"line\">    updateCachedSurface( geomPtr, componentList );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Transforms the given soft-selected components interpolated using the specified weights.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This method is used by the move, rotate, and scale tools in component mode when the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    tweaks for the shape are stored on a separate tweak node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    The bounding box has to be updated here, so do the normals and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    any other attributes that depend on vertex positions.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    It is similar to the tweakUsing() virtual function and is based on apiMesh::tweakUsing().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    xform           the matrix representing the transformation that is to be applied to the components</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    space           the matrix representing the transformation space to perform the interpolated transformation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    A value of NULL indicates it should be ignored.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    componentList   a list of components to be transformed and their weights.  This list will not be empty.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    cachingMode     whether the points should be added/updated in the pointCache, or restored from</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    the pointCache, or transform using use the original values in the pointCache.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    pointCache      used to store for undo and restore points during undo</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    freezePlane     used for symmetric transformation of components.  A value of NULL indicates</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    it is not used and there is no symmetric transformation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    handle        - handle to the attribute on the tweak node where the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                    tweaks should be stored</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::weightedTweakUsing(</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a>&amp; xform,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>* space,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp; componentList,</div>\n\
<div class=\"line\">                            MVertexCachingMode cachingMode,</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a>* pointCache,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html\">MPlane</a>* freezePlane,</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a>&amp; handle )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// For example purposes only, use the default MPxSurfaceShape::weightedTransformUsing() if the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// useWeightedTweakUsingFunction is false</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plg_useWeightedTweakUsingFunction( thisMObject(), useWeightedTweakUsingFunction );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> val_useWeightedTweakUsingFunction = plg_useWeightedTweakUsingFunction.asBool();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!val_useWeightedTweakUsingFunction) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#aa704affe596b61074b4eb2bf087e8092\">MPxSurfaceShape::weightedTweakUsing</a>(xform, space, componentList, cachingMode, pointCache, freezePlane, handle);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = meshGeomToUse();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create cachingMode boolean values for clearer reading of conditional code below</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> savePoints    = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540a7880e840faa9de43057b0b41a1e84639\">MPxSurfaceShape::kSavePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updatePoints  = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540ab169f7f366f434196216f2bfaaa05017\">MPxSurfaceShape::kUpdatePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> restorePoints = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540af7320699eeaf840fd0bc89aee27c91fc\">MPxSurfaceShape::kRestorePoints</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> transformOrigPoints  = (cachingMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ac725bb831745e05294cf2bc255514540a1681e97d030f79b2cd45f3bb33644934\">MPxSurfaceShape::kTransformOriginalPoints</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// It&#39;s safe to reuse the builder here rather than construct a new one because it has been initialized</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// before calling this method.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html\">MArrayDataBuilder</a> builder = handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a48b34beab40fa4ae60cfe40e556f591a\">builder</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> delta, currPt, newPt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = componentList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cacheIndex = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cacheLen = (NULL != pointCache) ? pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() : 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( restorePoints ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// restore points from the pointCache</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// traverse the component list</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i=0; i&lt;len; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> elemCount = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount &amp;&amp; cacheIndex &lt; cacheLen; idx++, cacheIndex++) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">                double3 &amp; pt = builder.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html#a6d195a24b9624f2e38079e1ce412c9bb\">addElement</a>( elemIndex ).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; cachePt = (*pointCache)[cacheIndex];</div>\n\
<div class=\"line\">                pt[0] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                pt[1] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                pt[2] += cachePt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Tweak the points. If savePoints is true, also save the tweaks in the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// pointCache. If updatePoints is true, add the new tweaks to the existing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// data in the pointCache.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Specify a few parameters (for weighted transformation)</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> almostZero = 1.0e-5f; <span class=\"comment\">// Hardcoded tolerance</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> spaceInv;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (space) {</div>\n\
<div class=\"line\">            spaceInv = space-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i=0; i&lt;len; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = convertToVertexComponent(componentList[i]);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( comp );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> elemCount = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> hasWeights = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a167255d70b17aa49ebd60a982d3e7624\">hasWeights</a>(); <span class=\"comment\">// (for weighted transformation)</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> hasSeam = (NULL != freezePlane);  <span class=\"comment\">// (for weighted transformation)</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#ab463a783d0657af39ca2fa7294287662\">setSizeIncrement</a>(elemCount);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount; idx++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> elemIndex = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>( idx );</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> perc = (hasWeights) ? fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a1ad693c92af89f76873cab0e325afea5\">weight</a>(idx).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_weight.html#a387cb47fefb3e2efef6e08de098d83cc\">influence</a>() : 1.0f; <span class=\"comment\">// get the weight for the component</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Only act upon points (store in pointCache, transform, etc) that have a non-zero weight</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (perc &gt; almostZero) { <span class=\"comment\">// if the point has enough weight to be transformed (for weighted transformation)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Compute interpolated transformation matrix (for weighted transformation)</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (perc == 1.0) {</div>\n\
<div class=\"line\">                        mat = xform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a8e2933c5f73e8cfb7409366582caa596\">asMatrix</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        mat = (space) ? (*space) * xform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a8e2933c5f73e8cfb7409366582caa596\">asMatrix</a>(perc) * (spaceInv) : xform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a8e2933c5f73e8cfb7409366582caa596\">asMatrix</a>(perc) ;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Start by reverting points back to their original values stored in</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the pointCache for the transformation</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( transformOrigPoints ) {</div>\n\
<div class=\"line\">                        geomPtr-&gt;vertices[elemIndex] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>( (*pointCache)[cacheIndex] );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Perform transformation of the point</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    double3 &amp; pt = builder.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html#a6d195a24b9624f2e38079e1ce412c9bb\">addElement</a>( elemIndex ).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">                    currPt = newPt = geomPtr-&gt;vertices[elemIndex];</div>\n\
<div class=\"line\">                    newPt *= mat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Handle symmetry and reflection (for weighted transformation)</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( hasSeam &amp;&amp; fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a1ad693c92af89f76873cab0e325afea5\">weight</a>(idx).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_weight.html#a5921aa0814dfcd975a70cc0a08f48840\">seam</a>() &gt; 0.0f)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        newPt += freezePlane-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html#ae4e3074eb251d7f127ac9ccd2bbac916\">normal</a>() * (fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#a1ad693c92af89f76873cab0e325afea5\">weight</a>(idx).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_weight.html#a5921aa0814dfcd975a70cc0a08f48840\">seam</a>() * (freezePlane-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html#ab9c91d6dfd555a8afc3614baed180ce6\">directedDistance</a>(currPt) - freezePlane-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plane.html#ab9c91d6dfd555a8afc3614baed180ce6\">directedDistance</a>( newPt)));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Calculate deltas and final positions</span></div>\n\
<div class=\"line\">                    delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                    delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                    delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = newPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> - currPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                    pt[0] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                    pt[1] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                    pt[2] += delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (savePoints) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// store the points in the pointCache for undo</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        pointCache-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(delta*(-1.0));</div>\n\
<div class=\"line\">                    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (updatePoints &amp;&amp; cacheIndex &lt; cacheLen) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; cachePt = (*pointCache)[cacheIndex];</div>\n\
<div class=\"line\">                        cachePt[0] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                        cachePt[1] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                        cachePt[2] -= delta.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">                        cacheIndex++;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the builder into the handle.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a575cf7adebfd8e3c29e588d2cd1c47a6\">set</a>(builder);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tell maya the bounding box for this object has changed</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and thus &quot;boundingBox()&quot; needs to be called.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    childChanged( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ae6e3d315c5dd375e845a29ffeb5f8727a3cf2a789a428c68c537cf3ba6b9ad743\">MPxSurfaceShape::kBoundingBoxChanged</a> );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns offsets for the given components to be used my the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    move tool in normal/u/v mode.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    component - components to calculate offsets for</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    direction - array of offsets to be filled</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    mode      - the type of offset to be calculated</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    normalize - specifies whether the offsets should be normalized</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    true if the offsets could be calculated, false otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::vertexOffsetDirection( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; component,</div>\n\
<div class=\"line\">                                     <a name=\"_a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp; direction,</div>\n\
<div class=\"line\">                                     MVertexOffsetMode mode,</div>\n\
<div class=\"line\">                                     <span class=\"keywordtype\">bool</span> normalize )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> offsetOkay = false ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> vtxComp = convertToVertexComponent(component);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComp( vtxComp, &amp;stat );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !stat || (component.<a name=\"a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>() != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    offsetOkay = true ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMeshGeom * geomPtr = meshGeomToUse();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL == geomPtr ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For each vertex add the appropriate offset</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> count = fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component.html#aa81e9bf4f15db5943ec188dd5b105d0b\">elementCount</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;count; idx++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> normal = geomPtr-&gt;normals[ fnComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a2fbba8697608ebb821117318f39e491e\">element</a>(idx) ];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( mode == <a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ad259dc95ef1fc8497f892abae4f4011aa227e8416235cd3b43077ca91504a463f\">MPxSurfaceShape::kNormal</a> ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( normalize ) normal.<a name=\"a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab66b0c7697d96a278da9bca810f4dee1\">normalize</a>() ;</div>\n\
<div class=\"line\">            direction.<a name=\"a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( normal );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Construct an orthonormal basis from the normal</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// uAxis, and vAxis are the new vectors.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> uAxis, vAxis ;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span>    i, j, k;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> a;</div>\n\
<div class=\"line\">            normal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab66b0c7697d96a278da9bca810f4dee1\">normalize</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            i = 0;  a = fabs( normal[0] );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( a &lt; fabs(normal[1]) ) { i = 1; a = fabs(normal[1]); }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( a &lt; fabs(normal[2]) ) i = 2;</div>\n\
<div class=\"line\">            j = (i+1)%3;  k = (j+1)%3;</div>\n\
<div class=\"line\">            a = sqrt(normal[i]*normal[i] + normal[j]*normal[j]);</div>\n\
<div class=\"line\">            uAxis[i] = -normal[j]/a; uAxis[j] = normal[i]/a; uAxis[k] = 0.0;</div>\n\
<div class=\"line\">            vAxis = normal^uAxis;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( mode == <a name=\"a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ad259dc95ef1fc8497f892abae4f4011aadfff66fea897672bdd592274b932a9f8\">MPxSurfaceShape::kUTangent</a> ||</div>\n\
<div class=\"line\">                 mode == <a name=\"a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ad259dc95ef1fc8497f892abae4f4011aab595fe9b8dffcc6e9c50a6d2bd1645c0\">MPxSurfaceShape::kUVNTriad</a> )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( normalize ) uAxis.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab66b0c7697d96a278da9bca810f4dee1\">normalize</a>() ;</div>\n\
<div class=\"line\">                direction.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( uAxis );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( mode == <a name=\"a122\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ad259dc95ef1fc8497f892abae4f4011aa811abdab0088108bccc954d7234bfe58\">MPxSurfaceShape::kVTangent</a> ||</div>\n\
<div class=\"line\">                 mode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ad259dc95ef1fc8497f892abae4f4011aab595fe9b8dffcc6e9c50a6d2bd1645c0\">MPxSurfaceShape::kUVNTriad</a> )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( normalize ) vAxis.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab66b0c7697d96a278da9bca810f4dee1\">normalize</a>() ;</div>\n\
<div class=\"line\">                direction.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( vAxis );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( mode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ad259dc95ef1fc8497f892abae4f4011aab595fe9b8dffcc6e9c50a6d2bd1645c0\">MPxSurfaceShape::kUVNTriad</a> ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( normalize ) normal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab66b0c7697d96a278da9bca810f4dee1\">normalize</a>() ;</div>\n\
<div class=\"line\">                direction.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( normal );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> offsetOkay ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::isBounded() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Specifies that this object has a boundingBox.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a name=\"_a123\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> apiMesh::boundingBox() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns the bounding box for this object.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    It is a good idea not to recompute here as this funcion is called often.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Cast away the constant</span></div>\n\
<div class=\"line\">    apiMesh *msPtr = <span class=\"keyword\">const_cast&lt;</span>apiMesh *<span class=\"keyword\">&gt;</span>(<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is called from the normal context.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> datablock = msPtr-&gt;forceCache();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fShapeDirty )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Force update</span></div>\n\
<div class=\"line\">        msPtr-&gt;meshDataRef(datablock);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode = thisMObject();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   c1Plug( thisNode, bboxCorner1 );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   c2Plug( thisNode, bboxCorner2 );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> corner1Object;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> corner2Object;</div>\n\
<div class=\"line\">    c1Plug.getValue( corner1Object );</div>\n\
<div class=\"line\">    c2Plug.getValue( corner2Object );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    double3 corner1, corner2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a124\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> fnData;</div>\n\
<div class=\"line\">    fnData.<a name=\"a125\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( corner1Object );</div>\n\
<div class=\"line\">    fnData.<a name=\"a126\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6b776208995f972692845a9f2809ff2f\">getData</a>( corner1[0], corner1[1], corner1[2] );</div>\n\
<div class=\"line\">    fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( corner2Object );</div>\n\
<div class=\"line\">    fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6b776208995f972692845a9f2809ff2f\">getData</a>( corner2[0], corner2[1], corner2[2] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> corner1Point( corner1[0], corner1[1], corner1[2] );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> corner2Point( corner2[0], corner2[1], corner2[2] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>( corner1Point, corner2Point );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::convertToVertexComponent(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; components)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> retVal = components;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (components.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>() != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Convert:</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> srcComponent(components);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFn::Type</a> srcComponentType = srcComponent.componentType();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::set&lt;int&gt; srcIndices;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;srcComponent.elementCount(); ++i)</div>\n\
<div class=\"line\">            srcIndices.insert( srcComponent.element(i) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        retVal = srcComponent.create(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> vtxComponent(retVal);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> apiMeshGeom* geomPtr = meshGeomToUse();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> base = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> edgeId = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceIdx=0; faceIdx&lt;geomPtr-&gt;faceCount; faceIdx++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// ignore degenerate faces</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numVerts = geomPtr-&gt;face_counts[faceIdx];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numVerts &gt; 2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> v=0; v&lt;numVerts; v++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (srcComponentType == <a name=\"a127\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a18f788d50a75ca81a0dc5a2538f364ae\">MFn::kMeshEdgeComponent</a>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (srcIndices.count(edgeId))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vindex1 = base + (v % numVerts);</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vindex2 = base + ((v+1) % numVerts);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> vertexId1 = geomPtr-&gt;face_connects[vindex1];</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> vertexId2 = geomPtr-&gt;face_connects[vindex2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            vtxComponent.addElement(vertexId1);</div>\n\
<div class=\"line\">                            vtxComponent.addElement(vertexId2);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        ++edgeId;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Face component:</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (srcIndices.count(faceIdx))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vindex = base + (v % numVerts);</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> vertexId = geomPtr-&gt;face_connects[vindex];</div>\n\
<div class=\"line\">                            vtxComponent.addElement(vertexId);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                base += numVerts;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a name=\"_a128\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_iterator.html\">MPxGeometryIterator</a>* apiMesh::geometryIteratorSetup(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp; componentList,</div>\n\
<div class=\"line\">                                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; components,</div>\n\
<div class=\"line\">                                                    <span class=\"keywordtype\">bool</span> forReadOnly )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Creates a geometry iterator compatible with his shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    componentList - list of components to be iterated</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    components    - component to be iterator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    forReadOnly   -</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    An iterator for the components</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    apiMeshGeomIterator * result = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( components.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> vtxComponents;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;(int)componentList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++ ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            vtxComponents.<a name=\"a129\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a3694392863ba632bca5d76cbbf190ef5\">append</a>(convertToVertexComponent(componentList[i]));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        result = <span class=\"keyword\">new</span> apiMeshGeomIterator( meshGeomToUse(), vtxComponents );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> vtxComponent = convertToVertexComponent(components);</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">new</span> apiMeshGeomIterator( meshGeomToUse(), vtxComponent );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::acceptsGeometryIterator( <span class=\"keywordtype\">bool</span> writeable )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Specifies that this shape can provide an iterator for getting/setting</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    control point values.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    writable - maya asks for an iterator that can set points if this is true</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::acceptsGeometryIterator( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;, <span class=\"keywordtype\">bool</span> writeable,</div>\n\
<div class=\"line\">                                       <span class=\"keywordtype\">bool</span> forReadOnly )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Specifies that this shape can provide an iterator for getting/setting</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    control point values.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    writable   - maya asks for an iterator that can set points if this is true</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    forReadOnly - maya asking for an iterator for querying only</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Helper functions</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::hasHistory()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns true if the shape has input history, false otherwise.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fHasHistoryOnCreate;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::shapeDirty()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns true if the input surface of the shape has been dirtied since</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    the last reset of the flag</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fShapeDirty;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::resetShapeDirty()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Reset the shape dirty state of the node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fShapeDirty = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::materialDirty() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns true if the shading group of the shape has been changed since</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    the last reset of the flag</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fMaterialDirty;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::setMaterialDirty(<span class=\"keywordtype\">bool</span> dirty)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Reset the material dirty state of the node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fMaterialDirty = dirty;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::computeBoundingBox( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Use the larges/smallest vertex positions to set the corners</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    of the bounding box.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update bounding box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> lowerHandle = datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( bboxCorner1 );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> upperHandle = datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( bboxCorner2 );</div>\n\
<div class=\"line\">    double3 &amp;lower = lowerHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">    double3 &amp;upper = upperHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = meshGeom( datablock );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> cnt = geomPtr-&gt;vertices.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( cnt == 0 ) <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This clears any old bbox values</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> tmppnt = geomPtr-&gt;vertices[0];</div>\n\
<div class=\"line\">    lower[0] = tmppnt[0]; lower[1] = tmppnt[1]; lower[2] = tmppnt[2];</div>\n\
<div class=\"line\">    upper[0] = tmppnt[0]; upper[1] = tmppnt[1]; upper[2] = tmppnt[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;cnt; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pnt = geomPtr-&gt;vertices[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pnt[0] &lt; lower[0] ) lower[0] = pnt[0];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pnt[1] &lt; lower[1] ) lower[1] = pnt[1];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pnt[2] &gt; lower[2] ) lower[2] = pnt[2];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pnt[0] &gt; upper[0] ) upper[0] = pnt[0];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pnt[1] &gt; upper[1] ) upper[1] = pnt[1];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pnt[2] &lt; upper[2] ) upper[2] = pnt[2];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    lowerHandle.<a name=\"a130\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\">    upperHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Signal that the bounding box has changed.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a70e639ef09764e601a782b8e16ff6dc3\">context</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        childChanged( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ae6e3d315c5dd375e845a29ffeb5f8727a3cf2a789a428c68c537cf3ba6b9ad743\">MPxSurfaceShape::kBoundingBoxChanged</a> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::computeInputSurface( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    If there is input history, evaluate the input attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the input surface if there is history</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( hasHistory() ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> inputHandle = datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( inputSurface, &amp;stat );</div>\n\
<div class=\"line\">        MCHECKERROR( stat, <span class=\"stringliteral\">&quot;computeInputSurface error getting inputSurface&quot;</span>)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            apiMeshData* surf = (apiMeshData*) inputHandle.asPluginData();</div>\n\
<div class=\"line\">        if ( NULL == surf ) {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;NULL inputSurface data found\\n&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        apiMeshGeom* geomPtr = surf-&gt;fGeometry;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the cachedSurface and copy the input surface into it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a131\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html\">MFnPluginData</a> fnDataCreator;</div>\n\
<div class=\"line\">        <a name=\"_a132\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> tmpid( apiMeshData::id );</div>\n\
<div class=\"line\">        fnDataCreator.<a name=\"a133\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html#a7f9c5cbd4b1f86d66d0f5ec3c221b9e4\">create</a>( tmpid, &amp;stat );</div>\n\
<div class=\"line\">        MCHECKERROR( stat, <span class=\"stringliteral\">&quot;compute : error creating Cached apiMeshData&quot;</span>)</div>\n\
<div class=\"line\">            apiMeshData * newCachedData = (apiMeshData*)fnDataCreator.data( &amp;stat );</div>\n\
<div class=\"line\">        MCHECKERROR( stat, &quot; error gettin proxy cached apiMeshData <span class=\"keywordtype\">object</span>&quot;)</div>\n\
<div class=\"line\">            *(newCachedData-&gt;fGeometry) = *geomPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> cachedHandle = datablock.outputValue( cachedSurface,&amp;stat );</div>\n\
<div class=\"line\">        MCHECKERROR( stat, &quot;computeInputSurface error getting cachedSurface&quot;)</div>\n\
<div class=\"line\">            cachedHandle.set( newCachedData );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    return stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::computeOutputSurface( const <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Compute the outputSurface attribute.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    If there is no history, use cachedSurface as the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    input surface. All tweaks will get written directly</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    to it. Output is just a copy of the cached surface</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    that can be connected etc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check for an input surface. The input surface, if it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// exists, is copied to the cached surface.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! computeInputSurface( plug, datablock ) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get a handle to the cached data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> cachedHandle = datablock.outputValue( cachedSurface, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, <span class=\"stringliteral\">&quot;computeInputSurface error getting cachedSurface&quot;</span>)</div>\n\
<div class=\"line\">    apiMeshData* cached = (apiMeshData*) cachedHandle.asPluginData();</div>\n\
<div class=\"line\">    if ( NULL == cached ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;NULL cachedSurface data found\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>( plug );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Apply any vertex offsets.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( hasHistory() ) {</div>\n\
<div class=\"line\">        applyTweaks( datablock, cached-&gt;fGeometry );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> cpHandle = datablock.<a name=\"a134\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a2cee08084f8de2a3394fffe7356e2002\">inputArrayValue</a>( mControlPoints,</div>\n\
<div class=\"line\">                                                           &amp;stat );</div>\n\
<div class=\"line\">        cpHandle.<a name=\"a135\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#aff40e8c8c255448d5d19a05148b83058\">setAllClean</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create some output data</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html\">MFnPluginData</a> fnDataCreator;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> tmpid( apiMeshData::id );</div>\n\
<div class=\"line\">    fnDataCreator.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html#a7f9c5cbd4b1f86d66d0f5ec3c221b9e4\">create</a>( tmpid, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, <span class=\"stringliteral\">&quot;compute : error creating apiMeshData&quot;</span>)</div>\n\
<div class=\"line\">    apiMeshData * newData = (apiMeshData*)fnDataCreator.data( &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;compute : error gettin at proxy apiMeshData <span class=\"keywordtype\">object</span>&quot;)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Copy the data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    if ( NULL != cached ) {</div>\n\
<div class=\"line\">        *(newData-&gt;fGeometry) = *(cached-&gt;fGeometry);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;computeOutputSurface: NULL cachedSurface data\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Assign the new data to the outputSurface handle</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outHandle = datablock.outputValue( outputSurface );</div>\n\
<div class=\"line\">    outHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( newData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the bounding box attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = computeBoundingBox( datablock );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, <span class=\"stringliteral\">&quot;computeBoundingBox&quot;</span> )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    return stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::computeWorldSurface( const <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Compute the worldSurface attribute.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    computeOutputSurface( plug, datablock );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> inHandle = datablock.outputValue( outputSurface );</div>\n\
<div class=\"line\">    apiMeshData* outSurf = (apiMeshData*)inHandle.<a name=\"a136\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ab5d7bebbf1c087c1ff803b1c41ad4c00\">asPluginData</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL == outSurf ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;computeWorldSurface: outSurf NULL\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create some output data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html\">MFnPluginData</a> fnDataCreator;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> tmpid( apiMeshData::id );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fnDataCreator.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html#a7f9c5cbd4b1f86d66d0f5ec3c221b9e4\">create</a>( tmpid, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, <span class=\"stringliteral\">&quot;compute : error creating apiMeshData&quot;</span>)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMeshData * newData = (apiMeshData*)fnDataCreator.data( &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;compute : error gettin at proxy apiMeshData <span class=\"keywordtype\">object</span>&quot;)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get worldMatrix from MPxSurfaceShape and set it to MPxGeometryData</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> worldMat = getWorldMatrix(datablock, 0);</div>\n\
<div class=\"line\">    newData-&gt;setMatrix( worldMat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Copy the data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    *(newData-&gt;fGeometry) = *(outSurf-&gt;fGeometry);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Assign the new data to the outputSurface handle</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> arrayIndex = plug.logicalIndex( &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;computeWorldSurface : logicalIndex&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> worldHandle = datablock.outputArrayValue( worldSurface, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;computeWorldSurface : outputArrayValue&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The builder is reused here rather than constructing a new one because the data at other</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// index values needs to be preserved.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html\">MArrayDataBuilder</a> builder = worldHandle.builder( &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;computeWorldSurface : builder&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outHandle = builder.addElement( arrayIndex, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;computeWorldSurface : addElement&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    outHandle.set( newData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    return stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::applyTweaks( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock, apiMeshGeom* geomPtr )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    If the shape has history, apply any tweaks (offsets) made</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    to the control points.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> cpHandle = datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a2cee08084f8de2a3394fffe7356e2002\">inputArrayValue</a>( mControlPoints,</div>\n\
<div class=\"line\">                                                           &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, <span class=\"stringliteral\">&quot;applyTweaks get cpHandle&quot;</span> )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Loop through the component list and transform each vertex.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    int elemCount = cpHandle.elementCount();</div>\n\
<div class=\"line\">    for ( <span class=\"keywordtype\">int</span> idx=0; idx&lt;elemCount; idx++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> elemIndex = cpHandle.<a name=\"a137\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a2ca3c3d60cf2f3ac005b651379f26143\">elementIndex</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> pntHandle = cpHandle.<a name=\"a138\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#ae7d0b57302500d19b7a3f57f8aef45df\">outputValue</a>();</div>\n\
<div class=\"line\">        double3&amp; pnt = pntHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> offset( pnt[0], pnt[1], pnt[2] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Apply the tweaks to the output surface</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (elemIndex &lt; (<span class=\"keywordtype\">int</span>)geomPtr-&gt;vertices.length())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; oldPnt = geomPtr-&gt;vertices[elemIndex];</div>\n\
<div class=\"line\">            oldPnt = oldPnt + offset;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        cpHandle.<a name=\"a139\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a73616f002814b8abe6d921db72d7a496\">next</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::value( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock, <span class=\"keywordtype\">int</span> pntInd, <span class=\"keywordtype\">int</span> vlInd, <span class=\"keywordtype\">double</span> &amp; val ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Helper function to return the value of a given vertex</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    from the cachedMesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMesh* nonConstThis = (apiMesh*)<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = nonConstThis-&gt;cachedGeom(datablock);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != geomPtr ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point = geomPtr-&gt;vertices[ pntInd ];</div>\n\
<div class=\"line\">        val = point[ vlInd ];</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::value( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock, <span class=\"keywordtype\">int</span> pntInd, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> &amp; val ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Helper function to return the value of a given vertex</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    from the cachedMesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMesh* nonConstThis = (apiMesh*)<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = nonConstThis-&gt;cachedGeom(datablock);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != geomPtr ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point = geomPtr-&gt;vertices[ pntInd ];</div>\n\
<div class=\"line\">        val = point;</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock, <span class=\"keywordtype\">int</span> pntInd, <span class=\"keywordtype\">int</span> vlInd, <span class=\"keywordtype\">double</span> val )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Helper function to set the value of a given vertex</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    in the cachedMesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMesh* nonConstThis = (apiMesh*)<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = nonConstThis-&gt;cachedGeom(datablock);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != geomPtr ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; point = geomPtr-&gt;vertices[ pntInd ];</div>\n\
<div class=\"line\">        point[ vlInd ] = val;</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a70e639ef09764e601a782b8e16ff6dc3\">context</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        verticesUpdated();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMesh::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock, <span class=\"keywordtype\">int</span> pntInd, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> &amp; val )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Helper function to set the value of a given vertex</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    in the cachedMesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    apiMesh* nonConstThis = (apiMesh*)<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    apiMeshGeom* geomPtr = nonConstThis-&gt;cachedGeom(datablock);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != geomPtr ) {</div>\n\
<div class=\"line\">        geomPtr-&gt;vertices[ pntInd ] = val;</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a70e639ef09764e601a782b8e16ff6dc3\">context</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a761a03ae58bbf2942f90578a0e61ada7\">isNormal</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        verticesUpdated();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::meshDataRef( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Get a reference to the mesh data (outputSurface)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    from the datablock. If dirty then an evaluation is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    triggered.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Calling inputValue will force a recompute if the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// connection is dirty. This means the most up-to-date</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// mesh data will be returned by this method.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> handle = datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( outputSurface );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshGeom* apiMesh::meshGeom( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns a pointer to the apiMeshGeom underlying the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    apiMeshGeom * result = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tmpObj = meshDataRef(datablock);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html\">MFnPluginData</a> fnData( tmpObj );</div>\n\
<div class=\"line\">    apiMeshData * data = (apiMeshData*)fnData.data( &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERRORNORET( stat, <span class=\"stringliteral\">&quot;meshGeom : Failed to get apiMeshData&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != data ) {</div>\n\
<div class=\"line\">        result = data-&gt;fGeometry;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshGeom* apiMesh::meshGeomToUse( )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns a pointer to the apiMeshGeom underlying the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    It is a convenience function to get the surface for the normal context.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> datablock = forceCache();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> meshGeom(datablock);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> apiMesh::cachedDataRef( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Get a reference to the mesh data (cachedSurface)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    from the datablock. No evaluation is triggered.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> handle = datablock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( cachedSurface );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshGeom* apiMesh::cachedGeom( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Returns a pointer to the apiMeshGeom underlying the shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    apiMeshGeom * result = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tmpObj = cachedDataRef(datablock);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html\">MFnPluginData</a> fnData( tmpObj );</div>\n\
<div class=\"line\">    apiMeshData * data = (apiMeshData*)fnData.data( &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERRORNORET( stat, <span class=\"stringliteral\">&quot;cachedGeom : Failed to get apiMeshData&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != data ) {</div>\n\
<div class=\"line\">        result = data-&gt;fGeometry;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::buildControlPoints( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; datablock, <span class=\"keywordtype\">int</span> count )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Check the controlPoints array. If there is input history</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    then we will use this array to store tweaks (vertex movements).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> cpH = datablock.<a name=\"a140\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a11fd41c7d97d656a2bffdc23015f1496\">outputArrayValue</a>( mControlPoints, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, <span class=\"stringliteral\">&quot;compute get cpH&quot;</span> )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Assume that if the count is correct then the builder is up to date, otherwise</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// repopulate it with the complete set of vertex data.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html\">MArrayDataBuilder</a> oldBuilder = cpH.builder();</div>\n\
<div class=\"line\">    if ( count != (<span class=\"keywordtype\">int</span>)oldBuilder.elementCount() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Make and set the new builder based on the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// info from the old builder.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html\">MArrayDataBuilder</a> builder( oldBuilder );</div>\n\
<div class=\"line\">        MCHECKERROR( stat, <span class=\"stringliteral\">&quot;compute - create builder&quot;</span> )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        for ( <span class=\"keywordtype\">int</span> vtx=0; vtx&lt;count; vtx++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">          <span class=\"comment\">/* double3 &amp; pt = */</span> builder.addElement( vtx ).asDouble3();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cpH.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a575cf7adebfd8e3c29e588d2cd1c47a6\">set</a>( builder );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cpH.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#aff40e8c8c255448d5d19a05148b83058\">setAllClean</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::verticesUpdated()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Helper function to tell maya that this shape&#39;s</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    vertices have updated and that the bbox needs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    to be recalculated and the shape redrawn.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    childChanged( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ae6e3d315c5dd375e845a29ffeb5f8727a3cf2a789a428c68c537cf3ba6b9ad743\">MPxSurfaceShape::kBoundingBoxChanged</a> );</div>\n\
<div class=\"line\">    childChanged( <a name=\"a141\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_surface_shape.html#ae6e3d315c5dd375e845a29ffeb5f8727a33e6468f044ba0e80a5e0b34fe856d42\">MPxSurfaceShape::kObjectChanged</a> );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::setShapeDirty()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fShapeDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::notifyViewport()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a142\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ab2843a350b76cdcbf16dd70d884f9766\">MHWRender::MRenderer::setGeometryDrawDirty</a>(thisMObject());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMesh::signalDirtyToViewport()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    setShapeDirty();</div>\n\
<div class=\"line\">    notifyViewport();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMesh::initialize()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Attribute (static) initialization.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    See api_macros.h.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             stat;</div>\n\
<div class=\"line\">    <a name=\"_a143\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a>   typedAttr;</div>\n\
<div class=\"line\">    <a name=\"_a144\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numericAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// ----------------------- INPUTS --------------------------</span></div>\n\
<div class=\"line\">    inputSurface = typedAttr.<a name=\"a145\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>( <span class=\"stringliteral\">&quot;inputSurface&quot;</span>, <span class=\"stringliteral\">&quot;is&quot;</span>,</div>\n\
<div class=\"line\">                                      apiMeshData::id,</div>\n\
<div class=\"line\">                                      <a name=\"a146\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, <span class=\"stringliteral\">&quot;create inputSurface attribute&quot;</span> )</div>\n\
<div class=\"line\">    typedAttr.setStorable( false );</div>\n\
<div class=\"line\">    ADD_ATTRIBUTE( inputSurface );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    useWeightedTransformUsingFunction = numericAttr.create( &quot;useWeightedTransformUsingFunction&quot;, &quot;utru&quot;, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>::kBoolean, true, &amp;stat);</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;create useWeightedTransformUsingFunction attribute&quot; )</div>\n\
<div class=\"line\">    numericAttr.setKeyable(true);</div>\n\
<div class=\"line\">    ADD_ATTRIBUTE( useWeightedTransformUsingFunction );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    useWeightedTweakUsingFunction = numericAttr.create( &quot;useWeightedTweakUsingFunction&quot;, &quot;utwu&quot;, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>::kBoolean, true, &amp;stat);</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;create useWeightedTweakUsingFunction attribute&quot; )</div>\n\
<div class=\"line\">    numericAttr.setKeyable(true);</div>\n\
<div class=\"line\">    ADD_ATTRIBUTE( useWeightedTweakUsingFunction );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    enableNumericDisplay = numericAttr.create(&quot;enableNumericDisplay&quot;, &quot;end&quot;, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>::kBoolean, true, &amp;stat);</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;create enableNumericDisplay attribute&quot; )</div>\n\
<div class=\"line\">    numericAttr.setKeyable(true);</div>\n\
<div class=\"line\">    ADD_ATTRIBUTE( enableNumericDisplay );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// ----------------------- OUTPUTS -------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// bbox attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    MAKE_NUMERIC_ATTR(  bboxCorner1, &quot;bboxCorner1&quot;, &quot;bb1&quot;,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>::k3Double, 0,</div>\n\
<div class=\"line\">                        false, false, false );</div>\n\
<div class=\"line\">    MAKE_NUMERIC_ATTR(  bboxCorner2, &quot;bboxCorner2&quot;, &quot;bb2&quot;,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>::k3Double, 0,</div>\n\
<div class=\"line\">                        false, false, false );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// local/world output surface attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    outputSurface = typedAttr.create( &quot;outputSurface&quot;, &quot;os&quot;,</div>\n\
<div class=\"line\">                                      apiMeshData::<span class=\"keywordtype\">id</span>,</div>\n\
<div class=\"line\">                                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>::kNullObj, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;create outputSurface attribute&quot; )</div>\n\
<div class=\"line\">    ADD_ATTRIBUTE( outputSurface );</div>\n\
<div class=\"line\">    typedAttr.setWritable( false );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    worldSurface = typedAttr.create( &quot;worldSurface&quot;, &quot;ws&quot;,</div>\n\
<div class=\"line\">                                      apiMeshData::<span class=\"keywordtype\">id</span>,</div>\n\
<div class=\"line\">                                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>::kNullObj, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;create worldSurface attribute&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    typedAttr.setCached( false );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    typedAttr.setWritable( false );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = typedAttr.setArray( true );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;set array&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = typedAttr.setUsesArrayDataBuilder( true );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;set uses array data builder&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = typedAttr.setDisconnectBehavior( <a name=\"_a147\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a>::kDelete );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;set disconnect behavior data builder&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = typedAttr.setWorldSpace( true );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;set world space&quot; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ADD_ATTRIBUTE( worldSurface );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Cached surface used for file IO</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    cachedSurface = typedAttr.create( &quot;cachedSurface&quot;, &quot;cs&quot;,</div>\n\
<div class=\"line\">                                      apiMeshData::<span class=\"keywordtype\">id</span>,</div>\n\
<div class=\"line\">                                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>::kNullObj, &amp;stat );</div>\n\
<div class=\"line\">    MCHECKERROR( stat, &quot;create cachedSurface attribute&quot; )</div>\n\
<div class=\"line\">    typedAttr.setReadable( true );</div>\n\
<div class=\"line\">    typedAttr.setWritable( true );</div>\n\
<div class=\"line\">    typedAttr.setStorable( true );</div>\n\
<div class=\"line\">    ADD_ATTRIBUTE( cachedSurface );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// ---------- Specify what inputs affect the outputs ----------</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( enableNumericDisplay, outputSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( inputSurface, outputSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( inputSurface, worldSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( outputSurface, worldSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( inputSurface, bboxCorner1 );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( inputSurface, bboxCorner2 );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( cachedSurface, outputSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( cachedSurface, worldSurface );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlPoints, outputSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueX, outputSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueY, outputSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueZ, outputSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlPoints, cachedSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueX, cachedSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueY, cachedSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueZ, cachedSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlPoints, worldSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueX, worldSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueY, worldSurface );</div>\n\
<div class=\"line\">    ATTRIBUTE_AFFECTS( mControlValueZ, worldSurface );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    return MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> apiMeshGeometryShape::<span class=\"keywordtype\">id</span>( 0x80099 );</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> apiMeshSubsceneShape::<span class=\"keywordtype\">id</span>( 0x8009A );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshGeometryShape::apiMeshGeometryShape() : apiMesh() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshGeometryShape::~apiMeshGeometryShape() { }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* apiMeshGeometryShape::creator() {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> apiMeshGeometryShape();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshGeometryShape::initialize() {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> apiMesh::initialize();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshSubsceneShape::apiMeshSubsceneShape() : apiMesh() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshSubsceneShape::~apiMeshSubsceneShape() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* apiMeshSubsceneShape::creator() {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> apiMeshSubsceneShape();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshSubsceneShape::initialize() {</div>\n\
<div class=\"line\">    inheritAttributesFrom(apiMesh::sNodeName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Node registry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Registers/Deregisters apiMeshData geometry data,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// apiMeshCreator DG node, and apiMeshShape user defined shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Strings for registering vp2 draw overrides. Plugin includes implementations</span></div>\n\
<div class=\"line\"><span class=\"comment\">// of MPxSubSceneOverride and MPxGeometryOverride, set the boolean flag below</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to choose which is used.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sDrawRegistrantId(<span class=\"stringliteral\">&quot;apiMeshPlugin&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> apiMesh::sNodeName = <span class=\"stringliteral\">&quot;apiMesh&quot;</span>;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMeshGeometryShape::sMakeGeometryOverridePointLight = (getenv(<span class=\"stringliteral\">&quot;MAYA_APIMESHSHAPE_AS_POINTLIGHT&quot;</span>) != NULL);</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> apiMeshGeometryShape::sDrawDbClassification = <span class=\"stringliteral\">&quot;drawdb/geometry/apiMesh&quot;</span>;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> apiMeshSubsceneShape::sDrawDbClassification = <span class=\"stringliteral\">&quot;drawdb/subscene/apiMesh&quot;</span>;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> apiMeshGeometryShape::sLightClass = <span class=\"stringliteral\">&quot;light:&quot;</span> + apiMeshGeometryShape::sDrawDbClassification + <span class=\"stringliteral\">&quot;:drawdb/light/pointLight&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a148\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat1, stat2, stat3, stat4;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat1 = plugin.registerData( <span class=\"stringliteral\">&quot;apiMeshData&quot;</span>, apiMeshData::id,</div>\n\
<div class=\"line\">                                  &amp;apiMeshData::creator,</div>\n\
<div class=\"line\">                                  <a name=\"a149\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#a1d1cfd8ffb84e947f82999c682b666a7aa76b89a7cf1b1a256b49d1a64e4cffe3\">MPxData::kGeometryData</a> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat1 ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register geometry data : apiMeshData \\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat2 = plugin.registerShape( <span class=\"stringliteral\">&quot;apiMesh&quot;</span>, apiMeshGeometryShape::id,</div>\n\
<div class=\"line\">                                    &amp;apiMeshGeometryShape::creator,</div>\n\
<div class=\"line\">                                    &amp;apiMeshGeometryShape::initialize,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">nullptr</span>,</div>\n\
<div class=\"line\">                                    apiMeshGeometryShape::sMakeGeometryOverridePointLight ? &amp;apiMeshGeometryShape::sLightClass : &amp;apiMeshGeometryShape::sDrawDbClassification ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat2 ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register shape\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( stat1) plugin.deregisterData( apiMeshData::id );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat2 = plugin.registerShape( <span class=\"stringliteral\">&quot;apiMeshSubscene&quot;</span>, apiMeshSubsceneShape::id,</div>\n\
<div class=\"line\">                                    &amp;apiMeshSubsceneShape::creator,</div>\n\
<div class=\"line\">                                    &amp;apiMeshSubsceneShape::initialize,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">nullptr</span>,</div>\n\
<div class=\"line\">                                    &amp;apiMeshSubsceneShape::sDrawDbClassification ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat2 ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register shape\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( stat1) plugin.deregisterData( apiMeshData::id );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat3 = plugin.registerNode( <span class=\"stringliteral\">&quot;apiMeshCreator&quot;</span>, apiMeshCreator::id,</div>\n\
<div class=\"line\">                                 &amp;apiMeshCreator::creator,</div>\n\
<div class=\"line\">                                 &amp;apiMeshCreator::initialize  );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat3 ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register creator\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( stat2 ) {</div>\n\
<div class=\"line\">            plugin.deregisterNode( apiMeshGeometryShape::id );</div>\n\
<div class=\"line\">            plugin.deregisterNode( apiMeshSubsceneShape::id );</div>\n\
<div class=\"line\">            plugin.deregisterData( apiMeshData::id );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat4 = <a name=\"a150\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a36f6ac92077e5064d897187608c9e548\">MHWRender::MDrawRegistry::registerGeometryOverrideCreator</a>(</div>\n\
<div class=\"line\">                apiMeshGeometryShape::sDrawDbClassification,</div>\n\
<div class=\"line\">                sDrawRegistrantId,</div>\n\
<div class=\"line\">                apiMeshGeometryOverride::Creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat4)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register Viewport 2.0 geometry override\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        stat4 = apiMeshGeometryOverride::registerComponentConverters();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stat4)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register component converters\\n&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat4 = <a name=\"a151\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#af075a48779d4514f296c42034f9298cb\">MHWRender::MDrawRegistry::registerSubSceneOverrideCreator</a>(</div>\n\
<div class=\"line\">                apiMeshSubsceneShape::sDrawDbClassification,</div>\n\
<div class=\"line\">                sDrawRegistrantId,</div>\n\
<div class=\"line\">                apiMeshSubSceneOverride::Creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat4)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register Viewport 2.0 sub-scene override\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        stat4 = apiMeshSubSceneOverride::registerComponentConverters();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stat4)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register component converters\\n&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = apiMeshGeometryOverride::deregisterComponentConverters();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister component converters \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = apiMeshSubSceneOverride::deregisterComponentConverters();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister component converters \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = <a name=\"a152\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a24f600902d1e1a22ccd8985f9eee39a1\">MHWRender::MDrawRegistry::deregisterGeometryOverrideCreator</a>(</div>\n\
<div class=\"line\">                apiMeshGeometryShape::sDrawDbClassification,</div>\n\
<div class=\"line\">                sDrawRegistrantId);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister geometry override : apiMeshGeometryOverride \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = <a name=\"a153\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#aecdb63d6aa8b938e81dc3ce56ca42bcd\">MHWRender::MDrawRegistry::deregisterSubSceneOverrideCreator</a>(</div>\n\
<div class=\"line\">                apiMeshSubsceneShape::sDrawDbClassification,</div>\n\
<div class=\"line\">                sDrawRegistrantId);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister sub-scene override : apiMeshSubSceneOverride \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = plugin.deregisterNode( apiMeshSubsceneShape::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister shape : apiMeshSubsceneShape \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = plugin.deregisterNode( apiMeshGeometryShape::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister shape : apiMeshGeometryShape \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = plugin.deregisterData( apiMeshData::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister geometry data : apiMeshData \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = plugin.deregisterNode( apiMeshCreator::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! stat ) {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister node : apiMeshCreator \\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";