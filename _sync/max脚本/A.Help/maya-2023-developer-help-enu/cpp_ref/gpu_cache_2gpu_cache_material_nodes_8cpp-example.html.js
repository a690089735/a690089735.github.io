var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheMaterialNodes.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_material_nodes_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheMaterialNodes.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheMaterialNodes.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheMaterialNodes.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS SurfaceMaterial</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SurfaceMaterial::SurfaceMaterial(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : MaterialNode(name, type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;outColor&quot;</span>,        MaterialProperty::kRGB, OutColor);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;outTransparency&quot;</span>, MaterialProperty::kRGB, OutTransparency);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SurfaceMaterial::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    SurfaceMaterialVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>SurfaceMaterialVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS LambertMaterial</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">LambertMaterial::LambertMaterial(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : SurfaceMaterial(name, type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;color&quot;</span>,             MaterialProperty::kRGB,   Color);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;transparency&quot;</span>,      MaterialProperty::kRGB,   Transparency);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;ambientColor&quot;</span>,      MaterialProperty::kRGB,   AmbientColor);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;incandescence&quot;</span>,     MaterialProperty::kRGB,   Incandescence);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;diffuse&quot;</span>,           MaterialProperty::kFloat, Diffuse);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;translucence&quot;</span>,      MaterialProperty::kFloat, Translucence);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;translucenceDepth&quot;</span>, MaterialProperty::kFloat, TranslucenceDepth);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;translucenceFocus&quot;</span>, MaterialProperty::kFloat, TranslucenceFocus);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;hideSource&quot;</span>,        MaterialProperty::kBool,  HideSource);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;glowIntensity&quot;</span>,     MaterialProperty::kFloat, GlowIntensity);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Color-&gt;setDefault(<a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.5f, 0.5f, 0.5f));</div>\n\
<div class=\"line\">    Diffuse-&gt;setDefault(0.8f);</div>\n\
<div class=\"line\">    TranslucenceDepth-&gt;setDefault(0.5f);</div>\n\
<div class=\"line\">    TranslucenceFocus-&gt;setDefault(0.5f);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> LambertMaterial::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    LambertMaterialVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>LambertMaterialVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS PhongMaterial</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PhongMaterial::PhongMaterial(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : LambertMaterial(name, type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;cosinePower&quot;</span>,    MaterialProperty::kFloat, CosinePower);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;specularColor&quot;</span>,  MaterialProperty::kRGB,   SpecularColor);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;reflectivity&quot;</span>,   MaterialProperty::kFloat, Reflectivity);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;reflectedColor&quot;</span>, MaterialProperty::kRGB,   ReflectedColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CosinePower-&gt;setDefault(20.0f);</div>\n\
<div class=\"line\">    SpecularColor-&gt;setDefault(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.5f, 0.5f, 0.5f));</div>\n\
<div class=\"line\">    Reflectivity-&gt;setDefault(0.5f);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PhongMaterial::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    PhongMaterialVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>PhongMaterialVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS BlinnMaterial</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">BlinnMaterial::BlinnMaterial(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : LambertMaterial(name, type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;eccentricity&quot;</span>,   MaterialProperty::kFloat, Eccentricity);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;specularRollOff&quot;</span>,MaterialProperty::kFloat, SpecularRollOff);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;specularColor&quot;</span>,  MaterialProperty::kRGB,   SpecularColor);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;reflectivity&quot;</span>,   MaterialProperty::kFloat, Reflectivity);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;reflectedColor&quot;</span>, MaterialProperty::kRGB,   ReflectedColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Eccentricity-&gt;setDefault(0.3f);</div>\n\
<div class=\"line\">    SpecularRollOff-&gt;setDefault(0.7f);</div>\n\
<div class=\"line\">    SpecularColor-&gt;setDefault(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.5f, 0.5f, 0.5f));</div>\n\
<div class=\"line\">    Reflectivity-&gt;setDefault(0.5f);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> BlinnMaterial::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    BlinnMaterialVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>BlinnMaterialVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS Texture2d</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Texture2d::Texture2d(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : MaterialNode(name, type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;defaultColor&quot;</span>, MaterialProperty::kRGB,   DefaultColor);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;outColor&quot;</span>,     MaterialProperty::kRGB,   OutColor);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;outAlpha&quot;</span>,     MaterialProperty::kFloat, OutAlpha);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    DefaultColor-&gt;setDefault(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.5f, 0.5f, 0.5f));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Texture2d::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    Texture2dVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>Texture2dVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS FileTexture</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">FileTexture::FileTexture(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : Texture2d(name, type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;outTransparency&quot;</span>, MaterialProperty::kRGB, OutTransparency);</div>\n\
<div class=\"line\">    createProperty(<span class=\"stringliteral\">&quot;fileTextureName&quot;</span>, MaterialProperty::kString, FileTextureName);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FileTexture::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    FileTextureVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>FileTextureVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS UnknownMaterialNode</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">UnknownMaterialNode::UnknownMaterialNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : MaterialNode(name, type)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> UnknownMaterialNode::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    UnknownMaterialNodeVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>UnknownMaterialNodeVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS UnknownTexture2d</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">UnknownTexture2d::UnknownTexture2d(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type)</div>\n\
<div class=\"line\">    : Texture2d(name, type)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> UnknownTexture2d::accept(MaterialNodeVisitor&amp; visitor)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    UnknownTexture2dVisitor* v = <span class=\"keyword\">dynamic_cast&lt;</span>UnknownTexture2dVisitor*<span class=\"keyword\">&gt;</span>(&amp;visitor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v) {</div>\n\
<div class=\"line\">        v-&gt;visit(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialNode</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Create a concrete material node by type name.</span></div>\n\
<div class=\"line\">MaterialNode::MPtr MaterialNode::create(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; nodeType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nodeType == <span class=\"stringliteral\">&quot;surfaceShader&quot;</span>) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;SurfaceMaterial&gt;(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nodeType == <span class=\"stringliteral\">&quot;lambert&quot;</span>) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;LambertMaterial&gt;(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nodeType == <span class=\"stringliteral\">&quot;phong&quot;</span>) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;PhongMaterial&gt;(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nodeType == <span class=\"stringliteral\">&quot;blinn&quot;</span>) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;BlinnMaterial&gt;(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nodeType == <span class=\"stringliteral\">&quot;file&quot;</span>) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;FileTexture&gt;(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nodeType == <span class=\"stringliteral\">&quot;unknownTexture2d&quot;</span>) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;UnknownTexture2d&gt;(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;UnknownMaterialNode&gt;(name, nodeType);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";