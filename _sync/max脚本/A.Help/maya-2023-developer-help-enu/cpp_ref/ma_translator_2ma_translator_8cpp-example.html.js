var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: maTranslator/maTranslator.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'ma_translator_2ma_translator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: maTranslator/maTranslator.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">maTranslator/maTranslator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the file translator Maya ASCII (via plug-in).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plugin is an example of a file translator.  Although, this is not</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the actual code used by Maya when it creates files in MayaAscii format,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// it nonetheless produces a very close approximation of the of that same</span></div>\n\
<div class=\"line\"><span class=\"comment\">// format.  Close enough that Maya can load the resulting files as if they</span></div>\n\
<div class=\"line\"><span class=\"comment\">// were MayaAscii.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Currently, the plugin does not support the following:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   o  Export Selection.  The plugin will only export entire scenes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   o  Referencing files into the default namespace, or using a renaming</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      prefix.  It only supports referencing files into a separate</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      namespace.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   o  MEL reference files.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   o  Size hints for multi plugs.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To use this plug-in, load it and then invoke it through the Export All menu item.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPathArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileIO.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCompoundAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyNodes.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxFileTranslator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ctype.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;time.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ios&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>maTranslator : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html\">MPxFileTranslator</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>        <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a5bdde07c444bcc490367efe4f3424ade\">haveReadMethod</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>        <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#ab58322cfe1d3437d3fc627be3a49121c\">haveWriteMethod</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>     <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a48074cfa41f4caf87bfa0bc533ea6f25\">defaultExtension</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MFileKind   <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a109c18b551ef7c162399326799ab67e6\">identifyFile</a>(</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer,</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">short</span> size</div>\n\
<div class=\"line\">                ) <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#ab66b1f5adee9fb511e49f5f6730a7c42\">reader</a>(</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                    FileAccessMode mode</div>\n\
<div class=\"line\">                ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a7d2e676fd6823e199ba4fe1da95098ac\">writer</a>(</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                    FileAccessMode mode</div>\n\
<div class=\"line\">                ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>*    creator();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>     setPluginName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  translatorName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    getAddAttrCmds(<span class=\"keyword\">const</span> <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; cmds);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    getSetAttrCmds(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; cmds);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeBrokenRefConnections(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeConnections(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeCreateNode(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeCreateNode(</div>\n\
<div class=\"line\">                std::fstream&amp; f, <span class=\"keyword\">const</span> <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; nodePath, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; parentPath</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeDagNodes(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeDefaultNodes(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeFileInfo(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeFooter(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeHeader(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeInstances(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeLockNode(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeNodeAttrs(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <span class=\"keywordtype\">bool</span> isSelected);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeNodeConnections(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeNonDagNodes(std::fstream&amp; f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeParent(</div>\n\
<div class=\"line\">                std::fstream&amp; f,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; parent,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; child,</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> addIt</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writePlugSizeHint(std::fstream&amp; f, <span class=\"keyword\">const</span> <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeReferences(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeReferenceNodes(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeRefNodeParenting(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeRequirements(std::fstream&amp; f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeSelectNode(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>    writeUnits(std::fstream&amp; f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  comment(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; text);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  quote(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; text);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  fExtension;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  fFileVersion;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  fPluginName;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  fTranslatorName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// These are used to keep track of connections which were made within</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a referenced file but then broken by main scene file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>      fBrokenConnSrcs;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>      fBrokenConnDests;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is used to keep track of default nodes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>    fDefaultNodes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// These are used to keep track of those DAG nodes which have multiple</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// instances.  &#39;fInstanceParents&#39; holds the first parent, which is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// usually set up when the child is created.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path_array.html\">MDagPathArray</a>   fInstanceChildren;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path_array.html\">MDagPathArray</a>   fInstanceParents;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is used to keep track of non-reference nodes with referenced</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// parents and referenced nodes with non-referenced parents, as their</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// parenting requires special handling.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path_array.html\">MDagPathArray</a>   fParentingRequired;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// These are used to store the IDs of the temporary node flags used by </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the translator.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    fAttrFlag;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    fCreateFlag;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    fConnectionFlag;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Note that this translator writes out 4.5ff01 version Maya ASCII</span></div>\n\
<div class=\"line\"><span class=\"comment\">// files, regardless of the current Maya version.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::fFileVersion = <span class=\"stringliteral\">&quot;4.5ff01&quot;</span>;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::fExtension = <span class=\"stringliteral\">&quot;pma&quot;</span>;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::fPluginName = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::fTranslatorName = <span class=\"stringliteral\">&quot;Maya ASCII (via plugin)&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::defaultExtension()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{   <span class=\"keywordflow\">return</span> fExtension;      }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> maTranslator::haveReadMethod()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{   <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;           }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> maTranslator::haveWriteMethod()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{   <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> maTranslator::setPluginName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)</div>\n\
<div class=\"line\">{   fPluginName = name;     }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::translatorName()</div>\n\
<div class=\"line\">{   <span class=\"keywordflow\">return</span> fTranslatorName; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* maTranslator::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> maTranslator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya calls this method to find out if this translator is capable of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// handling the given file.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a8966f27c569f8ef7182b63f0a66e79dd\">MPxFileTranslator::MFileKind</a> maTranslator::identifyFile(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer, <span class=\"keywordtype\">short</span> bufferLen</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tagStr = comment(fTranslatorName);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>     tagLen = tagStr.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the buffer contains enough info to positively identify the file,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// then use it.  Otherwise we&#39;ll base the identification on the file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// extension.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (bufferLen &gt;= tagLen)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> initialContents(buffer, bufferLen);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    initialLines;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        initialContents.split(<span class=\"charliteral\">&#39;\\n&#39;</span>, initialLines);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (initialLines.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (((<span class=\"keywordtype\">int</span>)initialLines[0].length() &gt;= tagLen)</div>\n\
<div class=\"line\">            &amp;&amp;  (initialLines[0].substring(0, tagLen-1) == tagStr))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> kIsMyFileType;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName(file.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a614484d9028d9d09418b5e337c39b7a0\">resolvedName</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>     fileNameLen = fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>     startOfExtension = fileName.rindex(<span class=\"charliteral\">&#39;.&#39;</span>) + 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((startOfExtension &gt; 0)</div>\n\
<div class=\"line\">        &amp;&amp;  (startOfExtension &lt; fileNameLen)</div>\n\
<div class=\"line\">        &amp;&amp;  (fileName.substring(startOfExtension, fileNameLen) == fExtension))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> kIsMyFileType;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> kNotMyFileType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya calls this method to have the translator write out a file.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> maTranslator::writer(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; <span class=\"comment\">/* options */</span>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417\">MPxFileTranslator::FileAccessMode</a> mode</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For simplicity, we only do full saves/exports.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((mode != kSaveAccessMode) &amp;&amp; (mode != kExportAccessMode))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kNotImplemented;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Let&#39;s see if we can open the output file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    std::fstream output(file.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>().<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), std::ios::out | std::ios::trunc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!output.good()) <span class=\"keywordflow\">return</span> MS::kNotFound;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get some node flags to keep track of those nodes for which we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// have already done various stages of processing.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fCreateFlag = <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#abae04fb2cd53d336a7ba30a26e4eb2af\">MFnDependencyNode::allocateFlag</a>(fPluginName, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status)</div>\n\
<div class=\"line\">        fAttrFlag = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#abae04fb2cd53d336a7ba30a26e4eb2af\">MFnDependencyNode::allocateFlag</a>(fPluginName, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status)</div>\n\
<div class=\"line\">        fConnectionFlag = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#abae04fb2cd53d336a7ba30a26e4eb2af\">MFnDependencyNode::allocateFlag</a>(fPluginName, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;Could not allocate three free node flags.&quot;</span></div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;  Try unloading some other plugins.&quot;</span></div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Run through all of the nodes in the scene and clear their flags.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html\">MItDependencyNodes</a>  nodesIter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !nodesIter.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); nodesIter.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             node = nodesIter.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#ad4c0bca65bccc7451dd91a88d443e5a8\">thisNode</a>();</div>\n\
<div class=\"line\">        <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        nodeFn.setFlag(fCreateFlag, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        nodeFn.setFlag(fAttrFlag, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        nodeFn.setFlag(fConnectionFlag, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the various sections of the file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    writeHeader(output, file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a614484d9028d9d09418b5e337c39b7a0\">resolvedName</a>());</div>\n\
<div class=\"line\">    writeFileInfo(output);</div>\n\
<div class=\"line\">    writeReferences(output);</div>\n\
<div class=\"line\">    writeRequirements(output);</div>\n\
<div class=\"line\">    writeUnits(output);</div>\n\
<div class=\"line\">    writeDagNodes(output);</div>\n\
<div class=\"line\">    writeNonDagNodes(output);</div>\n\
<div class=\"line\">    writeDefaultNodes(output);</div>\n\
<div class=\"line\">    writeReferenceNodes(output);</div>\n\
<div class=\"line\">    writeConnections(output);</div>\n\
<div class=\"line\">    writeFooter(output, file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a614484d9028d9d09418b5e337c39b7a0\">resolvedName</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    output.close();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a7115d9ec3e4bba10a0b04eef2655b379\">MFnDependencyNode::deallocateFlag</a>(fPluginName, fCreateFlag);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeHeader(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the current time into the same format as used by Maya ASCII</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// files.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    time_t      tempTime = time(NULL);</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>tm*  curTime = localtime(&amp;tempTime);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>        formattedTime[100];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    strftime(</div>\n\
<div class=\"line\">        formattedTime, <span class=\"keyword\">sizeof</span>(formattedTime), <span class=\"stringliteral\">&quot;%a, %b %e, %Y %r&quot;</span>, curTime</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the header information.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    f &lt;&lt; comment(fTranslatorName).asChar() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span></div>\n\
<div class=\"line\">        &lt;&lt; fFileVersion.asChar() &lt;&lt; <span class=\"stringliteral\">&quot; scene&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    f &lt;&lt; comment(<span class=\"stringliteral\">&quot;Name: &quot;</span>).asChar() &lt;&lt; fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    f &lt;&lt; comment(<span class=\"stringliteral\">&quot;Last modified: &quot;</span>).asChar() &lt;&lt; formattedTime &lt;&lt; std::endl;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out the &quot;fileInfo&quot; command for the freeform information associated</span></div>\n\
<div class=\"line\"><span class=\"comment\">// with the scene.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeFileInfo(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// There&#39;s no direct access to the scene&#39;s fileInfo from within the API,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// so we have to call MEL&#39;s &#39;fileInfo&#39; command.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    fileInfo;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;fileInfo -q&quot;</span>, fileInfo))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span>    numEntries = fileInfo.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span>    i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i = 0; i &lt; numEntries; i += 2)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            f &lt;&lt; <span class=\"stringliteral\">&quot;fileInfo &quot;</span> &lt;&lt; quote(fileInfo[i]).asChar() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; quote(fileInfo[i+1]).asChar() &lt;&lt; <span class=\"stringliteral\">&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Could not get scene&#39;s fileInfo.&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out the &quot;file&quot; commands which specify the reference files used by</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the scene.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeReferences(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    files;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#a863d52b0f9e690c0a165cb7faf085cce\">MFileIO::getReferences</a>(files);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span>    numRefs = files.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span>    i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numRefs; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> refCmd = <span class=\"stringliteral\">&quot;file -r&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName = files[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nsName = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// For simplicity, we assume that namespaces are always used when</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// referencing.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tempCmd = <span class=\"stringliteral\">&quot;file -q -ns \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        tempCmd += fileName + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(tempCmd, nsName))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            refCmd += <span class=\"stringliteral\">&quot; -ns \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            refCmd += nsName + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Could not get namespace name.&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Is this a deferred reference?</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        tempCmd = <span class=\"stringliteral\">&quot;file -q -dr \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        tempCmd += fileName + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> isDeferred;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(tempCmd, isDeferred))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isDeferred) refCmd += <span class=\"stringliteral\">&quot; -dr 1&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Could not get deferred reference info.&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the file&#39;s reference node, if it has one.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        tempCmd = <span class=\"stringliteral\">&quot;file -q -rfn \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        tempCmd += fileName + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> refNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(tempCmd, refNode))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (refNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                refCmd += <span class=\"stringliteral\">&quot; -rfn \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                refCmd += refNode + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(<span class=\"stringliteral\">&quot;Could not query reference node name.&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Write out the reference command.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        f &lt;&lt; refCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot; \\&quot;&quot;</span> &lt;&lt; fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out the &quot;requires&quot; lines which specify the plugins needed by the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// scene.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeRequirements(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Every scene requires Maya itself.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;requires maya \\&quot;&quot;</span> &lt;&lt; fFileVersion.asChar() &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out requirements for each plugin.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    pluginsUsed;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;pluginInfo -q -pluginsInUse&quot;</span>, pluginsUsed))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span>    numPlugins = pluginsUsed.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span>    i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i = 0; i &lt; numPlugins; i += 2)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            f &lt;&lt; <span class=\"stringliteral\">&quot;requires &quot;</span> &lt;&lt; quote(pluginsUsed[i]).asChar() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; quote(pluginsUsed[i+1]).asChar() &lt;&lt; <span class=\"stringliteral\">&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;Could not get list of plugins currently in use.&quot;</span></div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out the units of measurement currently being used by the scene.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeUnits(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> args = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> result;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Linear units.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;currentUnit -q -fullName -linear&quot;</span>, result))</div>\n\
<div class=\"line\">        args += <span class=\"stringliteral\">&quot; -l &quot;</span> + result;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Could not get current linear units.&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Angular units.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;currentUnit -q -fullName -angle&quot;</span>, result))</div>\n\
<div class=\"line\">        args += <span class=\"stringliteral\">&quot; -a &quot;</span> + result;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Could not get current linear units.&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Time units.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;currentUnit -q -fullName -time&quot;</span>, result))</div>\n\
<div class=\"line\">        args += <span class=\"stringliteral\">&quot; -t &quot;</span> + result;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Could not get current linear units.&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (args != <span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        f &lt;&lt; <span class=\"stringliteral\">&quot;currentUnit&quot;</span> &lt;&lt; args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeDagNodes(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fParentingRequired.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a>      dagIter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dagIter.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#ab03fb8910cc00a1bdf9be18c920dc3d2\">traverseUnderWorld</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>    worldPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    dagIter.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#adfb40b1f56af23ad94c4ca77c9a147b5\">getPath</a>(worldPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We step over the world node before starting the loop, because it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// doesn&#39;t get written out.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (dagIter.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a73616f002814b8abe6d921db72d7a496\">next</a>(); !dagIter.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>    path;</div>\n\
<div class=\"line\">        dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#adfb40b1f56af23ad94c4ca77c9a147b5\">getPath</a>(path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If the node has already been written, then all of its descendants</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// must have been written, or at least checked, as well, so prune</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this branch of the tree from the iteration.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  dagNodeFn(path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNodeFn.isFlagSet(fCreateFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            dagIter.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a007b98a707c775eca689e864d483bd22\">prune</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If this is a default node, it will be written out later, so skip</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// it.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNodeFn.isDefaultNode()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If this node is not writable, and is not a shared node, then mark</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// it as having been written, and skip it.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!dagNodeFn.canBeWritten() &amp;&amp; !dagNodeFn.isShared())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            dagNodeFn.setFlag(fCreateFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numParents = dagNodeFn.parentCount();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNodeFn.isFromReferencedFile())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// We don&#39;t issue &#39;creatNode&#39; commands for nodes from referenced</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// files, but if the node has any parents which are not from</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// referenced files, other than the world, then make a note that</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// we&#39;ll need to issue extra &#39;parent&#39; commands for it later on.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; numParents; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     altParent = dagNodeFn.parent(i);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  altParentFn(altParent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!altParentFn.isFromReferencedFile()</div>\n\
<div class=\"line\">                &amp;&amp;  (altParentFn.object() != worldPath.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>()))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fParentingRequired.append(path);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the node&#39;s parent.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>    parentPath = worldPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (path.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#af321be336f1f2d96ac2273a87cb3c8ab\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Get the parent&#39;s path.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                parentPath = path;</div>\n\
<div class=\"line\">                parentPath.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// If the parent is in the underworld, then find the closest</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// ancestor which is not.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (parentPath.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a8f653e0d5b6dca7a9d4ae9a635f3cd92\">pathCount</a>() &gt; 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// The first segment of the path contains whatever</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// portion of the path exists in the world.  So the closest</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// worldly ancestor is simply the one at the end of that</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// first path segment.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    path.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a45d0e6118fefc8c6e0b86b50234da810\">getPath</a>(parentPath, 0);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  parentNodeFn(parentPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (parentNodeFn.isFromReferencedFile())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// We prefer to parent to a non-referenced node.  So if this</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// node has any other parents, which are not from referenced</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// files and have not already been processed, then we&#39;ll</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// skip this instance and wait for an instance through one</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// of those parents.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (i = 0; i &lt; numParents; i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (dagNodeFn.parent(i) != parentNodeFn.object())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     altParent = dagNodeFn.parent(i);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  altParentFn(altParent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!altParentFn.isFromReferencedFile()</div>\n\
<div class=\"line\">                        &amp;&amp;  !altParentFn.isFlagSet(fCreateFlag))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i &lt; numParents) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// This node only has parents within referenced files, so</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// create it without a parent and note that we need to issue</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// &#39;parent&#39; commands for it later on.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                writeCreateNode(f, path, worldPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fParentingRequired.append(path);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                writeCreateNode(f, path, parentPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Let&#39;s see if this node has any parents from referenced</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// files, or any parents other than this one which are not</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// from referenced files.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span>    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span>        hasRefParents = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span>        hasOtherNonRefParents = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (i = 0; i &lt; numParents; i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (dagNodeFn.parent(i) != parentNodeFn.object())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     altParent = dagNodeFn.parent(i);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  altParentFn(altParent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (altParentFn.isFromReferencedFile())</div>\n\
<div class=\"line\">                            hasRefParents = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            hasOtherNonRefParents = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// If we&#39;ve already got positives for both tests,</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// then there&#39;s no need in continuing.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (hasRefParents &amp;&amp; hasOtherNonRefParents) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// If this node has parents from referenced files, then</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// make note that we will have to issue &#39;parent&#39; commands</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// later on.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (hasRefParents) fParentingRequired.append(path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// If this node has parents other than this one which are</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// not from referenced files, then make note that the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// parenting for the other instances still has to be done.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (hasOtherNonRefParents)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fInstanceChildren.append(path);</div>\n\
<div class=\"line\">                    fInstanceParents.append(parentPath);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Write out the node&#39;s &#39;addAttr&#39;, &#39;setAttr&#39; and &#39;lockNode&#39;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// commands.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            writeNodeAttrs(f, path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            writeLockNode(f, path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Mark the node as having been written.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        dagNodeFn.setFlag(fCreateFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the parenting for instances.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    writeInstances(f);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// If a DAG node is instanced (i.e. has multiple parents), this method</span></div>\n\
<div class=\"line\"><span class=\"comment\">// will put it under its remaining parents.  It will already have been put</span></div>\n\
<div class=\"line\"><span class=\"comment\">// under its first parent when it was created.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeInstances(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numInstancedNodes = fInstanceChildren.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numInstancedNodes; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  nodeFn(fInstanceChildren[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numParents = nodeFn.parentCount();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> p;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (p = 0; p &lt; numParents; p++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// We don&#39;t want to issue a &#39;parent&#39; command for the node&#39;s</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// existing parent.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (nodeFn.parent(i) != fInstanceParents[i].node())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     parent = nodeFn.parent(i);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  parentFn(parent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!parentFn.isFromReferencedFile())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get the first path to the parent node.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>    parentPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>(parentFn.object(), parentPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    writeParent(f, parentPath, fInstanceChildren[i], <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We don&#39;t need this any more, so free up the space.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fInstanceChildren.clear();</div>\n\
<div class=\"line\">    fInstanceParents.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out a &#39;parent&#39; command to parent one DAG node under another.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeParent(</div>\n\
<div class=\"line\">        std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; parent, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; child, <span class=\"keywordtype\">bool</span> addIt</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;parent -s -nc -r &quot;</span>;</div>\n\
<div class=\"line\"> </div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If this is not the first parent then we have to include the &quot;-a/add&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// flag.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (addIt) f &lt;&lt; <span class=\"stringliteral\">&quot;-a &quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the parent is the world, then we must include the &quot;-w/world&quot; flag.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (parent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#af321be336f1f2d96ac2273a87cb3c8ab\">length</a>() == 0) f &lt;&lt; <span class=\"stringliteral\">&quot;-w &quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span> &lt;&lt; child.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the parent is NOT the world, then give the parent&#39;s name.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (parent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#af321be336f1f2d96ac2273a87cb3c8ab\">length</a>() != 0)</div>\n\
<div class=\"line\">        f &lt;&lt; <span class=\"stringliteral\">&quot; \\&quot;&quot;</span> &lt;&lt; parent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeNonDagNodes(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html\">MItDependencyNodes</a>  nodeIter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             node = nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#ad4c0bca65bccc7451dd91a88d443e5a8\">thisNode</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Save default nodes for later processing.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nodeFn.isDefaultNode())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fDefaultNodes.append(node);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!nodeFn.isFromReferencedFile()</div>\n\
<div class=\"line\">        &amp;&amp;  !nodeFn.isFlagSet(fCreateFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// If this node is either writable or shared, then write it out.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Otherwise don&#39;t, but still mark it as having been written so</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// that we don&#39;t end up processing it again at some later time.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (nodeFn.canBeWritten() || nodeFn.isShared())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                writeCreateNode(f, node);</div>\n\
<div class=\"line\">                writeNodeAttrs(f, node, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                writeLockNode(f, node);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            nodeFn.setFlag(fCreateFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            nodeFn.setFlag(fAttrFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeDefaultNodes(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For default nodes we don&#39;t write out a createNode statement, but we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// still write added attributes and changed attribute values.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numNodes = fDefaultNodes.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numNodes; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        writeNodeAttrs(f, fDefaultNodes[i], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(fDefaultNodes[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        nodeFn.setFlag(fAttrFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out the &#39;addAttr&#39; and &#39;setAttr&#39; commands for a node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeNodeAttrs(</div>\n\
<div class=\"line\">        std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <span class=\"keywordtype\">bool</span> isSelected</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nodeFn.canBeWritten())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    addAttrCmds;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    setAttrCmds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        getAddAttrCmds(node, addAttrCmds);</div>\n\
<div class=\"line\">        getSetAttrCmds(node, setAttrCmds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numAddAttrCmds = addAttrCmds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numSetAttrCmds = setAttrCmds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numAddAttrCmds + numSetAttrCmds &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the node is not already selected, then issue a command to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// select it.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isSelected) writeSelectNode(f, node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; numAddAttrCmds; i++)</div>\n\
<div class=\"line\">                f &lt;&lt; addAttrCmds[i].asChar() &lt;&lt; std::endl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; numSetAttrCmds; i++)</div>\n\
<div class=\"line\">                f &lt;&lt; setAttrCmds[i].asChar() &lt;&lt; std::endl;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeReferenceNodes(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We don&#39;t write out createNode commands for reference nodes, but</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we do write out parenting between them and non-reference nodes,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// as well as attributes added and attribute values changed after the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// referenced file was loaded</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    writeRefNodeParenting(f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Output the commands for DAG nodes first.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a>  dagIter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a73616f002814b8abe6d921db72d7a496\">next</a>(); !dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             node = dagIter.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#afc1c0d71245e763fc566fc1d67ab06ae\">currentItem</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nodeFn.isFromReferencedFile()</div>\n\
<div class=\"line\">        &amp;&amp;  !nodeFn.isFlagSet(fAttrFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            writeNodeAttrs(f, node, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Make note of any connections to this node which have been</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// broken by the main scene.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#aae77febd503627e6bcd57c31fd516abc\">MFileIO::getReferenceConnectionsBroken</a>(</div>\n\
<div class=\"line\">                node, fBrokenConnSrcs, fBrokenConnDests, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span></div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            nodeFn.setFlag(fAttrFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now do the remaining, non-DAG nodes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html\">MItDependencyNodes</a>  nodeIter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             node = nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#ad4c0bca65bccc7451dd91a88d443e5a8\">thisNode</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nodeFn.isFromReferencedFile()</div>\n\
<div class=\"line\">        &amp;&amp;  !nodeFn.isFlagSet(fAttrFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            writeNodeAttrs(f, node, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Make note of any connections to this node which have been</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// broken by the main scene.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#aae77febd503627e6bcd57c31fd516abc\">MFileIO::getReferenceConnectionsBroken</a>(</div>\n\
<div class=\"line\">                node, fBrokenConnSrcs, fBrokenConnDests, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span></div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            nodeFn.setFlag(fAttrFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out all of the connections in the scene.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeConnections(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the scene has broken any connections which were made in referenced</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// files, handle those first so that the attributes are free for any new</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// connections which may come along.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    writeBrokenRefConnections(f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We&#39;re about to write out the scene&#39;s connections in three parts: DAG</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// nodes, non-DAG non-default nodes, then default nodes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It&#39;s really not necessary that we group them like this and would in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// fact be more efficient to do them all in one MItDependencyNodes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// traversal.  However, this is the order in which the normal MayaAscii</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// translator does them, so this makes it easier to compare the output</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of this translator to Maya&#39;s output.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out connections for the DAG nodes first.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a>  dagIter;</div>\n\
<div class=\"line\">    dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#ab03fb8910cc00a1bdf9be18c920dc3d2\">traverseUnderWorld</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a73616f002814b8abe6d921db72d7a496\">next</a>(); !dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     node = dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#afc1c0d71245e763fc566fc1d67ab06ae\">currentItem</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  dagNodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!dagNodeFn.isFlagSet(fConnectionFlag)</div>\n\
<div class=\"line\">        &amp;&amp;  dagNodeFn.canBeWritten()</div>\n\
<div class=\"line\">        &amp;&amp;  !dagNodeFn.isDefaultNode())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            writeNodeConnections(f, dagIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#afc1c0d71245e763fc566fc1d67ab06ae\">currentItem</a>());</div>\n\
<div class=\"line\">            dagNodeFn.setFlag(fConnectionFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now do the non-DAG, non-default nodes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html\">MItDependencyNodes</a>  nodeIter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#ad4c0bca65bccc7451dd91a88d443e5a8\">thisNode</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!nodeFn.isFlagSet(fConnectionFlag)</div>\n\
<div class=\"line\">        &amp;&amp;  nodeFn.canBeWritten()</div>\n\
<div class=\"line\">        &amp;&amp;  !nodeFn.isDefaultNode())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            writeNodeConnections(f, nodeIter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#ad4c0bca65bccc7451dd91a88d443e5a8\">thisNode</a>());</div>\n\
<div class=\"line\">            nodeFn.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#acad856458f6209f89f472217669d2f41\">setFlag</a>(fConnectionFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// And finish up with the default nodes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numNodes = fDefaultNodes.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numNodes; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(fDefaultNodes[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!nodeFn.isFlagSet(fConnectionFlag)</div>\n\
<div class=\"line\">        &amp;&amp;  nodeFn.canBeWritten()</div>\n\
<div class=\"line\">        &amp;&amp;  nodeFn.isDefaultNode())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            writeNodeConnections(f, fDefaultNodes[i]);</div>\n\
<div class=\"line\">            nodeFn.setFlag(fConnectionFlag, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write the &#39;disconnectAttr&#39; statements for those connections which were</span></div>\n\
<div class=\"line\"><span class=\"comment\">// made in referenced files, but broken in the main scene.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeBrokenRefConnections(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numBrokenConnections = fBrokenConnSrcs.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numBrokenConnections; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        f &lt;&lt; <span class=\"stringliteral\">&quot;disconnectAttr \\&quot;&quot;</span></div>\n\
<div class=\"line\">          &lt;&lt; fBrokenConnSrcs[i].partialName(<span class=\"keyword\">true</span>).asChar()</div>\n\
<div class=\"line\">          &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot; \\&quot;&quot;</span></div>\n\
<div class=\"line\">          &lt;&lt; fBrokenConnDests[i].partialName(<span class=\"keyword\">true</span>).asChar()</div>\n\
<div class=\"line\">          &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If the destination plug is a multi for which index does not</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// matter, then we must add a &quot;-na/nextAvailable&quot; flag to the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// command.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>         attr = fBrokenConnDests[i].attribute();</div>\n\
<div class=\"line\">        <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a>    attrFn(attr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!attrFn.indexMatters()) f &lt;&lt; <span class=\"stringliteral\">&quot; -na&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        f &lt;&lt; <span class=\"stringliteral\">&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write the &#39;connectAttr&#39; commands for all of a node&#39;s incoming</span></div>\n\
<div class=\"line\"><span class=\"comment\">// connections.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeNodeConnections(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>          plugs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    nodeFn.getConnections(plugs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>        numBrokenConns = fBrokenConnSrcs.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>        numPlugs = plugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>        i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numPlugs; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// We only care about connections where we are the destination.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>       destPlug = plugs[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>  srcPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        destPlug.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(srcPlug, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (srcPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             srcNode = srcPlug[0].node();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   srcNodeFn(srcNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Don&#39;t write the connection if the source is not writable...</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!srcNodeFn.canBeWritten()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// or the connection was made in a referenced file...</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (destPlug.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a184574e6fc35f1b5ae786f393bb45d6e\">isFromReferencedFile</a>()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// or the plug is procedural...</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (destPlug.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a1455d6cbab9a74ce0aebe55e7935f811\">isProcedural</a>()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// or it is a connection between a default node and a shared</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// node (because those will get set up automatically).</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcNodeFn.isDefaultNode() &amp;&amp; nodeFn.isShared()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            f &lt;&lt; <span class=\"stringliteral\">&quot;connectAttr \\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Default nodes get a colon at the start of their names.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcNodeFn.isDefaultNode()) f &lt;&lt; <span class=\"stringliteral\">&quot;:&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            f &lt;&lt; srcPlug[0].partialName(<span class=\"keyword\">true</span>).asChar()</div>\n\
<div class=\"line\">              &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot; \\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (nodeFn.isDefaultNode()) f &lt;&lt; <span class=\"stringliteral\">&quot;:&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            f &lt;&lt; destPlug.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(<span class=\"keyword\">true</span>).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()</div>\n\
<div class=\"line\">              &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the src plug is also one from which a broken</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// connection originated, then add the &quot;-rd/referenceDest&quot; flag</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// to the command.  That will help Maya to better adjust if the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// referenced file has changed the next time it is loaded.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcNodeFn.isFromReferencedFile())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (j = 0; j &lt; numBrokenConns; j++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fBrokenConnSrcs[j] == srcPlug[0])</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        f &lt;&lt; <span class=\"stringliteral\">&quot; -rd \\&quot;&quot;</span></div>\n\
<div class=\"line\">                          &lt;&lt; fBrokenConnDests[j].partialName(<span class=\"keyword\">true</span>).asChar()</div>\n\
<div class=\"line\">                          &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the plug is locked, then add a &quot;-l/lock&quot; flag to the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// command.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (destPlug.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aebf9fad788d648b60d13fd09d0379ee3\">isLocked</a>()) f &lt;&lt; <span class=\"stringliteral\">&quot; -l on&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the destination attribute is a multi for which index</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// does not matter, then we must add the &quot;-na/nextAvailable&quot;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// flag to the command.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>         attr = destPlug.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a>    attrFn(attr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!attrFn.indexMatters()) f &lt;&lt; <span class=\"stringliteral\">&quot; -na&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            f &lt;&lt; <span class=\"stringliteral\">&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out a &#39;createNode&#39; command for a DAG node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeCreateNode(</div>\n\
<div class=\"line\">        std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; nodePath, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; parentPath</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     node(nodePath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the &#39;createNode&#39; command for this node.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;createNode &quot;</span> &lt;&lt; nodeFn.typeName().asChar();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the node is shared, then add a &quot;-s/shared&quot; flag to the command.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nodeFn.isShared()) f &lt;&lt; <span class=\"stringliteral\">&quot; -s&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot; -n \\&quot;&quot;</span> &lt;&lt; nodeFn.name().asChar() &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If this is not a top-level node, then include its first parent in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// command.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (parentPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#af321be336f1f2d96ac2273a87cb3c8ab\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        f &lt;&lt; <span class=\"stringliteral\">&quot; -p \\&quot;&quot;</span> &lt;&lt; parentPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out a &#39;createNode&#39; command for a non-DAG node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeCreateNode(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the &#39;createNode&#39; command for this node.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;createNode &quot;</span> &lt;&lt; nodeFn.typeName().asChar();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the node is shared, then add a &quot;-s/shared&quot; flag to the command.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nodeFn.isShared()) f &lt;&lt; <span class=\"stringliteral\">&quot; -s&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot; -n \\&quot;&quot;</span> &lt;&lt; nodeFn.name().asChar() &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out a &quot;lockNode&quot; command.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeLockNode(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// By default, nodes are not locked, so we only have to issue a</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// &quot;lockNode&quot; command if the node is locked.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nodeFn.isLocked()) f &lt;&lt; <span class=\"stringliteral\">&quot;lockNode;&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Write out a &quot;select&quot; command.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeSelectNode(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>             nodeName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the node has a unique name, then we can just go ahead and use</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// that.  Otherwise we will have to use part of its DAG path to to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// distinguish it from the others with the same name.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nodeFn.hasUniqueName())</div>\n\
<div class=\"line\">        nodeName = nodeFn.name();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Only DAG nodes are allowed to have duplicate names.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  dagNodeFn(node, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Node &#39;&quot;</span>) + nodeFn.name()</div>\n\
<div class=\"line\">                + <span class=\"stringliteral\">&quot;&#39; has a non-unique name but claimes to not be a DAG node.\\n&quot;</span></div>\n\
<div class=\"line\">                + <span class=\"stringliteral\">&quot;Using non-unique name.&quot;</span></div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            nodeName = nodeFn.name();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            nodeName = dagNodeFn.partialPathName();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We use the &quot;-ne/noExpand&quot; flag so that if the node is a set, we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// actually select the set itself, rather than its members.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    f &lt;&lt; <span class=\"stringliteral\">&quot;select -ne &quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Default nodes get a colon slapped onto the start of their names.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nodeFn.isDefaultNode()) f &lt;&lt; <span class=\"stringliteral\">&quot;:&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    f &lt;&lt; nodeName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot;;\\n&quot;</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Deal with nodes whose parenting is between referenced and non-referenced</span></div>\n\
<div class=\"line\"><span class=\"comment\">// nodes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeRefNodeParenting(std::fstream&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numNodes = fParentingRequired.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numNodes; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  nodeFn(fParentingRequired[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Find out if this node has any parents from referenced or</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// non-referenced files.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>            hasRefParents = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>            hasNonRefParents = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numParents = nodeFn.parentCount();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    p;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (p = 0; p &lt; numParents; p++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     parent = nodeFn.parent(p);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  parentFn(parent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (parentFn.isFromReferencedFile())</div>\n\
<div class=\"line\">                hasRefParents = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                hasNonRefParents = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hasRefParents &amp;&amp; hasNonRefParents) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If this node is from a referenced file and it has parents which</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// are also from a referenced file, then it already has its first</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// parent and all others are added instances.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Similarly if the node is not from a referenced file and has</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// parents which are also not from referenced files.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>    alreadyHasFirstParent =</div>\n\
<div class=\"line\">            (nodeFn.isFromReferencedFile() ? hasRefParents : hasNonRefParents);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Now run through the parents again and output any parenting</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// which involves a non-referenced node, either as parent or child.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (p = 0; p &lt; numParents; p++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     parent = nodeFn.parent(p);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  parentFn(parent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (parentFn.isFromReferencedFile() != nodeFn.isFromReferencedFile())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Get the first path to the parent.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>    parentPath;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>(parentFn.object(), parentPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                writeParent(</div>\n\
<div class=\"line\">                    f, parentPath, fParentingRequired[i], alreadyHasFirstParent</div>\n\
<div class=\"line\">                );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// If it didn&#39;t have its first parent before, it does now.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                alreadyHasFirstParent = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::writeFooter(std::fstream&amp; f, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    f &lt;&lt; comment(<span class=\"stringliteral\">&quot; End of &quot;</span>).asChar() &lt;&lt; fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; std::endl;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::getAddAttrCmds(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; cmds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Run through the node&#39;s attributes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>        numAttrs = nodeFn.attributeCount();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>        i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numAttrs; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Use the attribute ordering which Maya uses when doing I/O.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attr = nodeFn.reorderedAttribute(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If this attribute has been added since the node was created,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// then we may want to write out an addAttr statement for it.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nodeFn.isNewAttribute(attr))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a>    attrFn(attr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the attribute has a parent then ignore it because it will</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// be processed when we process the parent.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            attrFn.parent(&amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status == MS::kNotFound)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// If the attribute is a compound, then we can do its entire</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// tree at once.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a name=\"_a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html\">MFnCompoundAttribute</a>    cAttrFn(attr, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    newCmds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    cAttrFn.getAddAttrCmds(newCmds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numCommands = newCmds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    c;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (c = 0; c &lt; numCommands; c++)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (newCmds[c] != <span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\">                            cmds.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(newCmds[c]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> newCmd = attrFn.getAddAttrCmd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (newCmd != <span class=\"stringliteral\">&quot;&quot;</span>) cmds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(newCmd);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> maTranslator::getSetAttrCmds(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; cmds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get rid of any garbage already in the array.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    cmds.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Run through the node&#39;s attributes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(node);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>        numAttrs = nodeFn.attributeCount();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>        i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numAttrs; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Use the attribute ordering which Maya uses when doing I/O.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>         attr = nodeFn.reorderedAttribute(i);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a>    attrFn(attr);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        attrFn.parent(&amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>            isChild = (status != MS::kNotFound);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// We don&#39;t want attributes which are children of other attributes</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// because they will be processed when we process the parent.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// And we only want storable attributes which accept inputs.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isChild &amp;&amp; attrFn.isStorable() &amp;&amp; attrFn.isWritable())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Get a plug for the attribute.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   plug(node, attr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Get setAttr commands for this attribute, and any of its</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// children, which have had their values changed by the scene.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    newCmds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            plug.getSetAttrCmds(newCmds, <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a798ed05c6d4f99941863739772b16e21a59b6e90764ca9aa343f99c0664410110\">MPlug::kChanged</a>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    numCommands = newCmds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    c;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (c = 0; c &lt; numCommands; c++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (newCmds[c] != <span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\">                    cmds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(newCmds[c]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> maTranslator::reader(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; <span class=\"comment\">/* file */</span>,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; <span class=\"comment\">/* options */</span>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417\">MPxFileTranslator::FileAccessMode</a> <span class=\"comment\">/* mode */</span></div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kNotImplemented;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::comment(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; text)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> result(<span class=\"stringliteral\">&quot;//&quot;</span>);</div>\n\
<div class=\"line\">    result += text;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Convert a string into a quoted, printable string.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maTranslator::quote(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; str)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* cstr = str.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> strLen = str.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> result(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; strLen; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> c = cstr[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isprint(c))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Because backslash and double-quote have special meaning</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// within a printable string, we have to turn those into escape</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// sequences.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (c)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;&quot;&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\\\&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\\\\\&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    result += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>((<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)&amp;c, 1);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Convert non-printable characters into escape sequences.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (c)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\n&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\n&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\t&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\t&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\b&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\b&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\r&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\r&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\f&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\f&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\v&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\v&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;\\007&#39;</span>:</div>\n\
<div class=\"line\">                    result += <span class=\"stringliteral\">&quot;\\\\a&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Encode it as an octal escape sequence.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">char</span> buff[5];</div>\n\
<div class=\"line\">                    sprintf(buff, <span class=\"stringliteral\">&quot;\\\\%.3o&quot;</span>, c);</div>\n\
<div class=\"line\">                    result += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(buff, 4);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add closing quote.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    result += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ****************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;1.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    maTranslator::setPluginName(plugin.name());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    plugin.registerFileTranslator(</div>\n\
<div class=\"line\">        maTranslator::translatorName(),</div>\n\
<div class=\"line\">        NULL,</div>\n\
<div class=\"line\">        maTranslator::creator,</div>\n\
<div class=\"line\">        NULL,</div>\n\
<div class=\"line\">        NULL,</div>\n\
<div class=\"line\">        <span class=\"keyword\">false</span></div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    plugin.deregisterFileTranslator(maTranslator::translatorName());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";