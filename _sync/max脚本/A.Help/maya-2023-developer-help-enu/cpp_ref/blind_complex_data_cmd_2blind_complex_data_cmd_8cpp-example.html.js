var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: blindComplexDataCmd/blindComplexDataCmd.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'blind_complex_data_cmd_2blind_complex_data_cmd_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: blindComplexDataCmd/blindComplexDataCmd.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">blindComplexDataCmd/blindComplexDataCmd.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in produces the MEL command &quot;blindComplexData&quot; and user defined data type &quot;blindComplexData&quot;. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It demonstrates how to create blind data (dynamic attributes) based on user defined data types.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The plug-in uses an array of structures in which each element contains both a double and an int as the user data type.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// The use of the &quot;MPlug&quot; class to set and retrieve the value of the attribute is demonstrated.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Moreover, it demonstrates the read and write routines that implement the storage and retrieval of the data in both Maya ASCII and Maya Binary file formats.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// To use this plug-in, select a dependency node and then issue the command &quot;blindComplexData&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A dynamic attribute containing a five element array is attached to each selected dependency node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// If the scene is saved in Maya ASCII format, you will see the MEL commands that save the value of the dynamic attribute.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// If the scene is reloaded, the dynamic attribute will be reattached to the applicable nodes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTypeId.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span>  </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPluginData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsCurve.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>CVData {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> readASCII( <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp;, <span class=\"keywordtype\">unsigned</span>&amp; );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> writeASCII( ostream&amp; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> readBinary( istream&amp; in );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> writeBinary( ostream&amp; out );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>  _doubleData;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>     _intData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> CVData empty;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CVData CVData::empty;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Proxy data class declaration</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>blindComplexData : <span class=\"keyword\">public</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html\">MPxData</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    blindComplexData();</div>\n\
<div class=\"line\">    blindComplexData( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> );</div>\n\
<div class=\"line\">    ~blindComplexData() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Override methods in MPxData.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#ab650a0a1d1aa282718e7b682bc2b369e\">readASCII</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp;, <span class=\"keywordtype\">unsigned</span>&amp; lastElement ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#a11f898e681493639e70fe41f53b30a7c\">readBinary</a>( istream&amp; in, <span class=\"keywordtype\">unsigned</span> length ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#a710ce8f845213b90126e20c9813533b5\">writeASCII</a>( ostream&amp; out ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#a0741811ec0ab4fc1baa5b1b3b1767ed6\">writeBinary</a>( ostream&amp; out ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Custom methods.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#afccc9147b0a7228dd1ec9a2de04be6da\">copy</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html\">MPxData</a>&amp; ) <span class=\"keyword\">override</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>                 <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#a66a89524cc5959cbdcbeae519286c224\">typeId</a>() <span class=\"keyword\">const override</span>; </div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                 <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#a785434431aa2e040991a56ed32d324ec\">name</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                setLength( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCVs,</div>\n\
<div class=\"line\">                                       <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> copyOldData = <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> CVData &amp;operator [] ( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    CVData &amp;operator [] ( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>                    length() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// static methods and data.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>    typeName;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>    id;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>*            creator();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> indexOk( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// any customized data can be declared here, in this case, an array of </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CVData that is associated with the CVs. </span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    CVData*                 _CVDataArrayPtr;    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>                    _length;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> blindComplexData::id( 0x80002 );</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> blindComplexData::typeName( <span class=\"stringliteral\">&quot;blindComplexData&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>blindComplexDataCmd : <span class=\"keyword\">public</span> <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">                        blindComplexDataCmd();</div>\n\
<div class=\"line\">                    ~blindComplexDataCmd() <span class=\"keyword\">override</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#ade7d0a873cbe811d6eab464e695390a9\">doIt</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a3b583cbc082553f11853db459b2f7795\">redoIt</a>() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a0789a8d51244cad0495abb2b811c39db\">undoIt</a>() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a2f6c567cc02d575ab14006d9c5e37761\">isUndoable</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>*        creator();</div>\n\
<div class=\"line\">    <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a>*   iter;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Proxy data class implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* blindComplexData::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> blindComplexData;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">blindComplexData::blindComplexData()</div>\n\
<div class=\"line\">    :_CVDataArrayPtr( NULL ),</div>\n\
<div class=\"line\">     _length(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">blindComplexData::~blindComplexData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] _CVDataArrayPtr;</div>\n\
<div class=\"line\">    _length = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">blindComplexData::blindComplexData( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cvNum )</div>\n\
<div class=\"line\">    : _length(0),</div>\n\
<div class=\"line\">      _CVDataArrayPtr( NULL )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    setLength( cvNum );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Set the length of the array  </span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> blindComplexData::setLength ( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cvNum, </div>\n\
<div class=\"line\">                                         <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> copyOldData ) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> ret = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( _length != cvNum || _CVDataArrayPtr == NULL ) {</div>\n\
<div class=\"line\">        CVData* ptr;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( _length != 0 &amp;&amp; ! copyOldData ) {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;warning: might be erasing previous data.&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ptr = <span class=\"keyword\">new</span> CVData[cvNum];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( ptr == NULL ) {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;out of memory, setLength() failed&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">            ret = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( copyOldData ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( cvNum &lt; _length ) {</div>\n\
<div class=\"line\">                    cerr &lt;&lt; <span class=\"stringliteral\">&quot;warning: new size not big enough for old data.&quot;</span> </div>\n\
<div class=\"line\">                         &lt;&lt; endl;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; cvNum; i++ ) {</div>\n\
<div class=\"line\">                    ptr[i] = _CVDataArrayPtr[i];  </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] _CVDataArrayPtr;</div>\n\
<div class=\"line\">            _CVDataArrayPtr = ptr;</div>\n\
<div class=\"line\">            _length = cvNum;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;warning: setLength() o.k., same length, no change.&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> blindComplexData::length ( )<span class=\"keyword\"> const </span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> _length;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> </div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> blindComplexData::indexOk( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index )<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ( index &lt; _length );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> CVData&amp; blindComplexData::operator [] ( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index )<span class=\"keyword\"> const </span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( indexOk( index  ) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> _CVDataArrayPtr[index];</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;indexing error.  operator [] failed, returning invalid object&quot;</span></div>\n\
<div class=\"line\">             &lt;&lt; endl;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> CVData::empty;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CVData &amp;blindComplexData::operator [] ( <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index ) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( indexOk( index  ) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> _CVDataArrayPtr[index];</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;indexing error.  operator [] failed, returning invalid object&quot;</span></div>\n\
<div class=\"line\">             &lt;&lt; endl;</div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to get away a compiler warning.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> CVData::empty; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> blindComplexData::copy( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html\">MPxData</a>&amp; other )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Deescription:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Perform a copy or a conversion</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( other.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html#a66a89524cc5959cbdcbeae519286c224\">typeId</a>() == blindComplexData::id ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> blindComplexData* otherData =</div>\n\
<div class=\"line\">                                        (<span class=\"keyword\">const</span> blindComplexData*)&amp;other;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( _length != otherData-&gt;_length ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( ! setLength( otherData-&gt;_length ) ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; _length; i++ ) {</div>\n\
<div class=\"line\">            _CVDataArrayPtr[i] = (*otherData)[i];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  we need to convert to the other type based on its iff Tag</span></div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;wrong data format!&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> blindComplexData::typeId()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> blindComplexData::id;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> blindComplexData::name()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> blindComplexData::typeName; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindComplexData::readASCII(  <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args,</div>\n\
<div class=\"line\">                                        <span class=\"keywordtype\">unsigned</span>&amp; lastParsedElement )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> argLength = args.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( argLength &gt; 0 ) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numDataRecord = (argLength - lastParsedElement); </div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Note: a better solution to determine the number of records is to</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// write out the number of records in the writeASCII() routine.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( numDataRecord % 2 != 0 ) {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;warning: corrupted data for blindComplexData&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// 2 numbers per record.</span></div>\n\
<div class=\"line\">        numDataRecord /= 2;</div>\n\
<div class=\"line\">        setLength(numDataRecord); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i &lt; _length; i++ ) {</div>\n\
<div class=\"line\">            status = _CVDataArrayPtr[i].readASCII(args, lastParsedElement);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( status != MS::kSuccess ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CVData::readASCII ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span>&amp; lastParsedElement ) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    _intData = args.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a54e9c6d91b7b999624b2384bc52f12a2\">asInt</a>( lastParsedElement++, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( status == MS::kSuccess ) {</div>\n\
<div class=\"line\">        _doubleData = args.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a15a33f5705d13873ab7f003bb64f0741\">asDouble</a>( lastParsedElement++, &amp;status );</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CVData::writeASCII ( ostream&amp; out )  </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    out &lt;&lt; _intData &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; _doubleData &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> out.fail() ? MS::kFailure : MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindComplexData::writeASCII( ostream&amp; out )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i &lt; _length; i++ ) {</div>\n\
<div class=\"line\">        status = _CVDataArrayPtr[i].writeASCII(out);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status != MS::kSuccess ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindComplexData::readBinary( istream&amp; in, <span class=\"keywordtype\">unsigned</span> length )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( length &gt; 0 ) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> recNum;</div>\n\
<div class=\"line\">        in.read( (<span class=\"keywordtype\">char</span>*) &amp;recNum, <span class=\"keyword\">sizeof</span>(recNum) );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( ! in.fail() &amp;&amp; recNum &gt; 0 ) {</div>\n\
<div class=\"line\">            setLength(recNum); </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i &lt; _length; i++ ) {</div>\n\
<div class=\"line\">                status = _CVDataArrayPtr[i].readBinary(in);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( status != MS::kSuccess ) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindComplexData::writeBinary( ostream&amp; out )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    out.write( (<span class=\"keywordtype\">char</span>*) &amp;_length, <span class=\"keyword\">sizeof</span>(_length) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! out.fail() ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i &lt; _length; i++ ) {</div>\n\
<div class=\"line\">            status = _CVDataArrayPtr[i].writeBinary(out);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( status != MS::kSuccess ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> status; </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CVData::readBinary ( istream&amp; in )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    in.read( (<span class=\"keywordtype\">char</span>*) &amp;_intData, <span class=\"keyword\">sizeof</span>(_intData) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !in.fail() ) {</div>\n\
<div class=\"line\">        in.read( (<span class=\"keywordtype\">char</span>*) &amp;_doubleData, <span class=\"keyword\">sizeof</span>(_doubleData) );</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> in.fail() ? MS::kFailure : MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CVData::writeBinary ( ostream&amp; out )  </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    out.write( (<span class=\"keywordtype\">char</span>*) &amp;_intData, <span class=\"keyword\">sizeof</span>(_intData) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !out.fail() ) {</div>\n\
<div class=\"line\">        out.write( (<span class=\"keywordtype\">char</span>*) &amp;_doubleData, <span class=\"keyword\">sizeof</span>(_doubleData) );</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> out.fail() ? MS::kFailure : MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Command class implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* blindComplexDataCmd::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> blindComplexDataCmd;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">blindComplexDataCmd::~blindComplexDataCmd()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">blindComplexDataCmd::blindComplexDataCmd()</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a>()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindComplexDataCmd::doIt( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a selection list iterator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> list;</div>\n\
<div class=\"line\">    <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( list );</div>\n\
<div class=\"line\">    iter = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a>( list,  <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a>, &amp;stat    );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( MS::kSuccess == stat )</div>\n\
<div class=\"line\">        stat = redoIt();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindComplexDataCmd::redoIt()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     stat;               <span class=\"comment\">// Status code</span></div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     dependNode;     <span class=\"comment\">// Selected dependency node</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Iterate over all selected dependency nodes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !iter-&gt;isDone(); iter-&gt;next() ) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the selected dependency node and create</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// a function set for it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != iter-&gt;getDependNode( dependNode ) ) {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error getting the dependency node&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDN( dependNode, &amp;stat );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat ) {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error creating MFnDependencyNode&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a new attribute for our blind data</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;Creating attr...&quot; &lt;&lt; endl;</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> fnAttr;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fullName( <span class=\"stringliteral\">&quot;blindComplexData&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> briefName( <span class=\"stringliteral\">&quot;BCD&quot;</span> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> newAttr = fnAttr.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>( fullName, briefName,</div>\n\
<div class=\"line\">                                         blindComplexData::id );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Now add the new attribute to the current dependency node</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;Adding attr...&quot; &lt;&lt; endl;</span></div>\n\
<div class=\"line\">        fnDN.addAttribute( newAttr);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// now we will demonstrate setting the value by using a plug.</span></div>\n\
<div class=\"line\">        <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug( dependNode, newAttr );  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// create an instance of the blind data with an initial array size of</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// 5.</span></div>\n\
<div class=\"line\">        blindComplexData * newData = <span class=\"keyword\">new</span> blindComplexData( 5 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// initialized </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;setting data values...&quot; &lt;&lt; endl;</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i= 0; i &lt; newData-&gt;length(); i++ ) {</div>\n\
<div class=\"line\">            (*newData)[i]._intData = 10 + i;</div>\n\
<div class=\"line\">            (*newData)[i]._doubleData = 20.02 + i;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// setting the value for the plug.</span></div>\n\
<div class=\"line\">        stat = plug.setValue( newData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The following code demonstrates the retrieving of data from the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// plug.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sData;</div>\n\
<div class=\"line\">        stat = plug.getValue( sData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( stat != MS::kSuccess ) {</div>\n\
<div class=\"line\">            cerr &lt;&lt; <span class=\"stringliteral\">&quot;error getting value off plug&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Convert the data from an MObject back to a pointer to MPxData, then</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// cast it back to a pointer to blindComplexData.</span></div>\n\
<div class=\"line\">        <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin_data.html\">MFnPluginData</a> pdFn( sData ); </div>\n\
<div class=\"line\">        blindComplexData* data =</div>\n\
<div class=\"line\">                            ( blindComplexData* ) pdFn.constData( &amp;stat );</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// read the data, and set the result to the values set.</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        clearResult();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( NULL != data ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// cout &lt;&lt; &quot;retrieving data values...&quot; &lt;&lt; endl;</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i = 0; i &lt; data-&gt;length(); i++ ) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// cout &lt;&lt; &quot;rec #&quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; (*data)[i]._intData &lt;&lt; &quot;, &quot;; </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// cout &lt;&lt; (*data)[i]._doubleData &lt;&lt; endl;</span></div>\n\
<div class=\"line\">                appendToResult((<span class=\"keywordtype\">double</span>) ((*data)[i]._intData));</div>\n\
<div class=\"line\">                appendToResult((*data)[i]._doubleData);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// cout &lt;&lt; &quot;Null data&quot; &lt;&lt; endl;</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindComplexDataCmd::undoIt()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> blindComplexDataCmd::isUndoable()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The following routines are used to register/unregister</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the command we are creating within Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerData( <span class=\"stringliteral\">&quot;blindComplexData&quot;</span>,</div>\n\
<div class=\"line\">                          blindComplexData::id,</div>\n\
<div class=\"line\">                          blindComplexData::creator );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerData&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerCommand(  <span class=\"stringliteral\">&quot;blindComplexData&quot;</span>,</div>\n\
<div class=\"line\">                             blindComplexDataCmd::creator );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        plugin.deregisterData( blindComplexData::id );</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerCommand&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status1, status2;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status1 = plugin.deregisterCommand( <span class=\"stringliteral\">&quot;blindComplexData&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status1) {</div>\n\
<div class=\"line\">        status1.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterCommand&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    status2 = plugin.deregisterData( blindComplexData::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status2) {</div>\n\
<div class=\"line\">        status2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterData&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status1 )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status2;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";