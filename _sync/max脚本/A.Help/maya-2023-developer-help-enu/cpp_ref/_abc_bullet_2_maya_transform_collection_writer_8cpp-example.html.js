var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcBullet/MayaTransformCollectionWriter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_bullet_2_maya_transform_collection_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcBullet/MayaTransformCollectionWriter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcBullet/MayaTransformCollectionWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy</span></div>\n\
<div class=\"line\"><span class=\"comment\">// form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AbcBulletStringTable.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaTransformCollectionWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPluginData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MQuaternion.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringResource.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaTransformCollectionItem::sample(<span class=\"keywordtype\">double</span> iFrame, <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; wmat)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mXform = wmat * mInvMat;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _DEBUG</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mVerbose)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> strItem, strInfo;</div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args(10,<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// translation</span></div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> pos = xform().translation(<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>);</div>\n\
<div class=\"line\">        <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> euler = xform().eulerRotation();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        i=0;</div>\n\
<div class=\"line\">        args[i++] = name();</div>\n\
<div class=\"line\">        args[i++].<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(iFrame);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        strItem.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;sample=^1s, node=^2s&quot;</span>,args);</div>\n\
<div class=\"line\">        strInfo += strItem;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        i=0;</div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(pos[0]);</div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(pos[1]);</div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(pos[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(euler[0]);</div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(euler[1]);</div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(euler[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(Alembic::AbcGeom::RadiansToDegrees(euler[0]));</div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(Alembic::AbcGeom::RadiansToDegrees(euler[1]));</div>\n\
<div class=\"line\">        args[i++].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(Alembic::AbcGeom::RadiansToDegrees(euler[2]));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        strItem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;translation=[^1s, ^2s, ^3s], eulerRot=[^4s, ^5s, ^6s] degreesRot=[^7s, ^8s, ^9s]&quot;</span>, args);</div>\n\
<div class=\"line\">        strInfo += <span class=\"stringliteral\">&quot;, &quot;</span>;</div>\n\
<div class=\"line\">        strInfo += strItem;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>( strInfo );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> MayaTransformCollectionItem::asDouble(Alembic::AbcGeom::XformOperationType channelOp, Alembic::Util::uint32_t channelNum)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> result = 0.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isTranslationChannel(channelOp,channelNum))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        result = mXform.getTranslation(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>)[channelNum];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (isRotationChannel(channelOp,channelNum)) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> index = (channelOp==Alembic::AbcGeom::kRotateXOperation) ? 0 : (channelOp==Alembic::AbcGeom::kRotateYOperation) ? 1 : 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        result = mXform.eulerRotation()[index];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaTransformCollectionWriter::MayaTransformCollectionWriter</div>\n\
<div class=\"line\">    (</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OObject &amp; iParent,</div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; iDag, </div>\n\
<div class=\"line\">    Alembic::Util::uint32_t iTimeIndex, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> JobArgs &amp; iArgs</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    : mVerbose(iArgs.verbose)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get SolvedState state from iDag </span></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depSolvedState(iDag.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(&amp;stat));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the outCollisionObjects plug from the solvedState</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we&#39;ll use this to ensure the solver data is upto date each time we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// change frames, even though we don&#39;t need to the output mesh</span></div>\n\
<div class=\"line\">    mCollisionObjectsPlug = depSolvedState.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;outCollisionObjects&quot;</span>, <span class=\"keyword\">true</span>, &amp;stat);</div>\n\
<div class=\"line\">    assert(stat == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add node to transform write list</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fullpath, name;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// call evaluateNumElements to pull the latest solution</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> i=0, m = mCollisionObjectsPlug.evaluateNumElements(); i &lt; m &amp;&amp; mCollisionObjectsPlug.isArray(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// add leaf node</span></div>\n\
<div class=\"line\">        <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> elementPlug = mCollisionObjectsPlug[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dagPathPlug = elementPlug.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        stat = dagPathPlug.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(fullpath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        name = fullpath.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>(fullpath.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a2f0c58e22c8c209d0ea924de9913993a\">rindex</a>(<span class=\"charliteral\">&#39;|&#39;</span>) + 1, fullpath.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()-1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> sList;</div>\n\
<div class=\"line\">        stat = sList.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(fullpath);</div>\n\
<div class=\"line\">        assert(stat == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        sList.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(0, dagPath);</div>\n\
<div class=\"line\">        assert(stat == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> invMat; <span class=\"comment\">// by default its the identity;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we have atleast 1 ancestor</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagPath.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#af321be336f1f2d96ac2273a87cb3c8ab\">length</a>()&gt;1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> parentDagPath(dagPath);</div>\n\
<div class=\"line\">            parentDagPath.pop();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            invMat = parentDagPath.inclusiveMatrixInverse();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MayaTransformCollectionItemPtr sampler = </div>\n\
<div class=\"line\">            MayaTransformCollectionItemPtr(<span class=\"keyword\">new</span> MayaTransformCollectionItem(name, invMat, i, iArgs.verbose));</div>\n\
<div class=\"line\">        mSamplerList.push_back(sampler);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// sample first frame</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> wmatPlug = elementPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> dhMatrix;</div>\n\
<div class=\"line\">            stat = wmatPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(dhMatrix);</div>\n\
<div class=\"line\">            assert(stat == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sampler-&gt;sample(iTimeIndex, dhMatrix.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aaa25e9866d30fc06edc510817e32a8f2\">asMatrix</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MayaTransformWriterPtr trans;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Copy the dag path because we&#39;ll be popping from it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dag(dagPath);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"comment\">// precondition: iParent will already be at the root of the tree</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">        Alembic::Abc::OObject iRoot = iParent;</div>\n\
<div class=\"line\">        Alembic::Abc::OObject iCurrent = iRoot;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the non-animation-based transforms (if any)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> j;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numPaths = dag.length();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numPaths&gt;1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; MDagPath &gt; dagList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (j = numPaths - 1; j &gt; -1; j--, dag.pop())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                dagList.push_back(dag);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::vector&lt; MDagPath &gt;::iterator iStart = dagList.begin();</div>\n\
<div class=\"line\">            std::vector&lt; MDagPath &gt;::iterator iCur = dagList.end();</div>\n\
<div class=\"line\">            iCur--;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// now loop backwards over our DAG path list so we push ancestor nodes</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// first, all the way down to the current node</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// This essentially reads the DAG paths left to right (or top down)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// and checks to see if their components already exist in Alembic;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// if a DAG path component is missing, it&#39;ll be added.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; iCur != iStart; iCur--)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> currentDagPathName = (*iCur).fullPathName();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> pathArray;</div>\n\
<div class=\"line\">                currentDagPathName.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;|&#39;</span>, pathArray);</div>\n\
<div class=\"line\">                iCurrent = iRoot;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; pathArray.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// make sure you strip the namespace off the path before you</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// try to look up the alembic node.</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> step = util::stripNamespaces(pathArray[i], iArgs.stripNamespace);</div>\n\
<div class=\"line\">                    Alembic::Abc::OObject iPriorCurrent = iCurrent;</div>\n\
<div class=\"line\">                    iCurrent = iCurrent.getChild(step.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!iCurrent.valid()) {</div>\n\
<div class=\"line\">                        iCurrent = iPriorCurrent;</div>\n\
<div class=\"line\">                        trans = MayaTransformWriterPtr(<span class=\"keyword\">new</span> MayaTransformWriter(iCurrent, *iCur, iTimeIndex, iArgs));</div>\n\
<div class=\"line\">                        iCurrent = iCurrent.getChild(step.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        assert(iCurrent.valid());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remember to continue the hierarchy - to include the animation-based transform</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// It is assumed that a leaf entry won&#39;t exist in Alembic due to the uniqueness of a full transform path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the animation-based transform</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        trans = MayaTransformWriterPtr(<span class=\"keyword\">new</span> MayaTransformWriter(</div>\n\
<div class=\"line\">            iCurrent, *sampler, iTimeIndex, iArgs));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//TODO: Remove</span></div>\n\
<div class=\"line\">        mTransList.push_back(trans);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        AttributesWriterPtr attrs = trans-&gt;getAttrs();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (attrs)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iTimeIndex != 0 &amp;&amp; attrs-&gt;isAnimated())</div>\n\
<div class=\"line\">                mTransAttrList.push_back(attrs);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaTransformCollectionWriter::~MayaTransformCollectionWriter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaTransformCollectionWriter::write(<span class=\"keywordtype\">double</span> iFrame)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write out transforms </span></div>\n\
<div class=\"line\">    std::vector&lt; MayaTransformWriterPtr &gt;::iterator tcur =</div>\n\
<div class=\"line\">        mTransList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; MayaTransformCollectionItemPtr &gt;::iterator scur =</div>\n\
<div class=\"line\">        mSamplerList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; MayaTransformWriterPtr &gt;::iterator tend =</div>\n\
<div class=\"line\">        mTransList.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; MayaTransformCollectionItemPtr &gt;::iterator send =</div>\n\
<div class=\"line\">        mSamplerList.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    assert( mSamplerList.size() == mTransList.size() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0, m = mCollisionObjectsPlug.evaluateNumElements(); tcur != tend &amp;&amp; scur != send &amp;&amp; i &lt; m; tcur++, scur++, i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> elementPlug = mCollisionObjectsPlug[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> wmatPlug = elementPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> dhMatrix;</div>\n\
<div class=\"line\">        stat = wmatPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(dhMatrix);</div>\n\
<div class=\"line\">        assert(stat == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// sample result</span></div>\n\
<div class=\"line\">        (*scur)-&gt;sample(iFrame, dhMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aaa25e9866d30fc06edc510817e32a8f2\">asMatrix</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        (*tcur)-&gt;write();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; AttributesWriterPtr &gt;::iterator tattrCur =</div>\n\
<div class=\"line\">        mTransAttrList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; AttributesWriterPtr &gt;::iterator tattrEnd =</div>\n\
<div class=\"line\">        mTransAttrList.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(; tattrCur != tattrEnd; tattrCur++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        (*tattrCur)-&gt;write();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MayaTransformCollectionWriter::isAnimated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";