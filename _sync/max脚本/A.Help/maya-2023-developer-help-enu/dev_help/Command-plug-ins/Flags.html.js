var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n\
<script type=\"text/javascript\" src=\"../../scripts/prettify.js\"></script><script src=\"../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /><meta name=\"generator\" content=\"pandoc\" /><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><script type=\"text/javascript\" src=\"../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Flags and arguments</title>\n\
   </head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script></script><script></script><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Flags and arguments</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"flags-and-arguments\"></a></div>\n\
<p>Flags and arguments can be passed to your command when it is called from the script editor.</p>\n\
<p>To use flags and arguments with your command, you will need to create a syntax object, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSyntax\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_syntax.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_syntax.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSyntax</a></span>, that defines your flags, and you will need to parse the flags and arguments from the command line by creating an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgDatabase\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_database.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_database.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MArgDatabase</a></span> object from which you can extract them.</p>\n\
<p>Flags are named options to a command. They can take arguments as passed parameters. For example, in the <span class=\'code\'>polyCube</span> command, &#39;<span class=\'code\'>sx</span>&#39;, &#39;<span class=\'code\'>sy</span>&#39;, &#39;<span class=\'code\'>sz</span>&#39;, and &#39;<span class=\'code\'>h</span>&#39; are command flags, and 10, 15, 5, and 20 are their respective arguments:</p>\n\
<p><span class=\'code\'>polyCube -sx 10 -sy 15 -sz 5 -h 20;</span></p>\n\
<p>Arguments that do not require a named flag can also be passed to commands. For example, <span class=\'code\'>circle1</span> and <span class=\'code\'>sphere1</span> are arguments passed to this <span class=\'code\'>group</span> command:</p>\n\
<p><span class=\'code\'>group -n group1 circle1 sphere1;</span></p>\n\
<p>Flags and their arguments are added to a syntax object using the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSyntax::addFlag()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_syntax.html#a71360d659ff4cb19f3f1bdc1d577a422&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSyntax::addFlag()</a></span> method. Implement a <span class=\'code\'>newSyntax()</span> function, and set the flag long name, short name, and argument type:</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint lang-cpp\"><a href=\"javascript:void(0)\" data-symbol=\"MSyntax\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_syntax.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_syntax.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSyntax</a> myCommand::newSyntax()\n\
{\n\
    <a href=\"javascript:void(0)\" data-symbol=\"MSyntax\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_syntax.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_syntax.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSyntax</a> syntax;\n\
    syntax.addFlag(&quot;-f&quot;, &quot;-firstFlagLongName&quot;, kUnsigned);\n\
    syntax.addFlag(&quot;-s&quot;, &quot;-secondFlagLongName&quot;, kString);\n\
    return syntax;\n\
}\n\
</pre></div><p>The third parameter to <span class=\'code\'>addFlag()</span> defines the argument type of the flag. If it is omitted, the flag takes no arguments. To pass an argument type as a parameter, set the type to <span class=\'code\'>kSelectionItem</span>.</p>\n\
<p>To add an argument that does not need a named flag, use <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSyntax::addArg()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_syntax.html#a1d306e0ce61954dd7cbdcd0e74a905a6&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_syntax.html#ad9b8c499fe50944cb64d6e48d3fef504&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSyntax::addArg()</a></span>.</p>\n\
<p>The syntax object is passed to <span class=\'code\'>registerCommand()</span> in <span class=\'code\'>initializePlugin()</span>:</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint lang-cpp\"><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> initializePlugin( <a href=\"javascript:void(0)\" data-symbol=\"MObject\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObject</a> obj )\n\
{ \n\
    <a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> status;\n\
    <a href=\"javascript:void(0)\" data-symbol=\"MFnPlugin\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_plugin.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnPlugin</a> plugin(obj, &quot;Autodesk - Example&quot;, &quot;2.0&quot;, &quot;Any&quot;);\n\
    status = plugin.registerCommand(&quot;myCommand&quot;, myCommand::creator, myCommand::newSyntax); \n\
    return status;\n\
}\n\
</pre></div><p>The arguments and flags are parsed in <span class=\'code\'>doIt()</span>. By convention, parsing is done in the <span class=\'code\'>parseArgs()</span> function that is then called by <span class=\'code\'>doIt()</span>. You will need to implement <span class=\'code\'>parseArgs()</span> in your command code.</p>\n\
<p>Parsing is done by creating an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgDatabase\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_database.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_database.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MArgDatabase</a></span> object.<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgDatabase\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_database.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_database.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MArgDatabase</a></span> has member method that parse the flags and arguments passed to the command in its <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgList\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_list.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_list.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MArgList</a></span> using the information in the syntax object.</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint lang-cpp\"><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> myCommand::parseArgs(const <a href=\"javascript:void(0)\" data-symbol=\"MArgList\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_list.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_list.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MArgList</a>&amp; args)\n\
{\n\
    unsigned firstFlagArg;\n\
    <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a> secondFlagArg;\n\
    <a href=\"javascript:void(0)\" data-symbol=\"MArgDatabase\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_database.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_database.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MArgDatabase</a> argData(syntax(), args);\n\
    [...]\n\
    if (argData.isFlagSet(&quot;-f&quot;)) \n\
        argData.getFlagArgument(&quot;-f&quot;, 0, firstFlagArg);\n\
    if (argData.isFlagSet(&quot;-s&quot;))\n\
        argData.getFlagArgument(&quot;-s&quot;, 0, secondFlagArg);\n\
    [...]\n\
}\n\
</pre></div><p>You can reuse the same flag in the same command. For example:</p>\n\
<p><span class=\'code\'>myCommand -f 3 -s &quot;hello&quot; -s &quot;there&quot;</span></p>\n\
<p>To do so, you will need to declare the flag to be multi-use using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSyntax::makeFlagMultiUse()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_syntax.html#aba59748fbad866c9f753ccb043db4ee5&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_syntax.html#ad72abeb07b65e58b6b00320171a532d9&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSyntax::makeFlagMultiUse()</a></span>. You will then need to use the <span class=\'code\'>MArgDatabase::numberOfFlagUses()</span> to find the number of times a flag has been used, and then <span class=\'code\'>MArgDatabase::getFlagArgumentPosition()</span> to get the position of the argument for each specific use of the flag, before using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgDatabase::getFlagArgument()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_database.html#aa1c9ea1e3dfcbc32469b4a158b236337&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MArgDatabase::getFlagArgument()</a></span> to extract the argument.</p>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";