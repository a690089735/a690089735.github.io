var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/CacheReaderAlembic.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2_cache_reader_alembic_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/CacheReaderAlembic.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/CacheReaderAlembic.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _CacheReaderAlembic_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _CacheReaderAlembic_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Includes</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/cxx17_enter_legacy_scope.hpp&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcCoreAbstract/TimeSampling.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/Abc/IArchive.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/INuPatch.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/IPolyMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/ISubD.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/IXform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcMaterial/IMaterial.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcMaterial/MaterialAssignment.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/cxx17_exit_legacy_scope.hpp&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheReader.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTime.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMeshData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsSurface.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsSurfaceData.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"><span class=\"comment\">// Forward Declarations</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheReader;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>CacheReaderAlembicPrivate {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Forward Declarations</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheMeshReader;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> Alembic::Abc::index_t           index_t; </div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> Alembic::Abc::chrono_t          chrono_t;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> Alembic::AbcGeom::IXformSchema  IXformSchema;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> Alembic::AbcGeom::XformSample   XformSample;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> Alembic::AbcGeom::XformOp       XformOp;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> Alembic::AbcCoreAbstract::TimeSamplingPtr TimeSamplingPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS BaseTypeOfElem</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> ElemType&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>BaseTypeOfElem</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// When the element type is already a POD...</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> ElemType value_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kDimensions = 1;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Alembic stores index buffer as signed integers, while this</span></div>\n\
<div class=\"line\"><span class=\"comment\">// plug-in handles them as unsigned integers...</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>BaseTypeOfElem&lt;int32_t&gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// When the element type is already a POD...</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> uint32_t value_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kDimensions = 1;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>BaseTypeOfElem&lt;Imath::Vec2&lt;T&gt; &gt; </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> T value_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kDimensions = 2;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>BaseTypeOfElem&lt;Imath::Vec3&lt;T&gt; &gt; </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> T value_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kDimensions = 3;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicArray</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A wrapper around alembic sample arrays</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> ArrayProperty&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicArray :</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span> ReadableArray&lt;</div>\n\
<div class=\"line\">    typename BaseTypeOfElem&lt;</div>\n\
<div class=\"line\">        typename ArrayProperty::traits_type::value_type</div>\n\
<div class=\"line\">        &gt;::value_type</div>\n\
<div class=\"line\">    &gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> ArrayProperty::sample_ptr_type ArraySamplePtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> ArrayProperty::traits_type traits_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseTypeOfElem&lt;typename traits_type::value_type&gt;::value_type T;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Array&lt;T&gt;::Digest Digest;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kDimensions =</div>\n\
<div class=\"line\">        BaseTypeOfElem&lt;typename traits_type::value_type&gt;::kDimensions;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns a pointer to an Array that has the same content as the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// buffer passed-in as determined by the computed digest hash-key.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ArraySamplePtr&amp; arraySamplePtr, <span class=\"keyword\">const</span> Digest&amp; digest );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~AlembicArray() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> T* <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span> <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The constructor is declare private to force user to go through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the create() factory member function.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\"> </div>\n\
<div class=\"line\">    AlembicArray(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ArraySamplePtr&amp; arraySamplePtr, <span class=\"keyword\">const</span> Digest&amp; digest</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">        : ReadableArray&lt;T&gt;(</div>\n\
<div class=\"line\">            arraySamplePtr-&gt;size() * kDimensions, digest),</div>\n\
<div class=\"line\">          fArraySamplePtr(arraySamplePtr)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        assert(traits_type::dataType().getExtent() == kDimensions);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"> </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ArraySamplePtr    fArraySamplePtr;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS PropertyCache</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PROPERTY, <span class=\"keyword\">typename</span> KEY, <span class=\"keyword\">typename</span> VALUE, <span class=\"keyword\">typename</span> DERIVED&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PropertyCache </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> PROPERTY    Property;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> KEY         Key;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VALUE       Value;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> DERIVED     Derived;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PropertyCache()</div>\n\
<div class=\"line\">        : fValidityInterval(TimeInterval::kInvalid)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> reset()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fProperty = Property();</div>\n\
<div class=\"line\">        fValidityInterval = TimeInterval(TimeInterval::kInvalid);</div>\n\
<div class=\"line\">        fValue = Value();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fProperty.valid();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> init(<span class=\"keyword\">const</span> Property&amp; property)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        this-&gt;fProperty = property;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> index_t numSamples       = this-&gt;fProperty.getNumSamples();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> TimeSamplingPtr sampling = this-&gt;fProperty.getTimeSampling();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (this-&gt;fProperty.isConstant()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Delay the read of constant properties until the first call to setTime()</span></div>\n\
<div class=\"line\">            fValidityInterval = TimeInterval(TimeInterval::kInvalid);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We need to read-in all the sample keys in</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// sequential order to determine which keys are</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// truly unique. This has to be done at init time</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// because later on, it is possible that the samples</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// be asked in random order and it will be difficult</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// to determine the validity interval of the returned</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// sample.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// There is always a sample at index 0!</span></div>\n\
<div class=\"line\">            this-&gt;fUniqueSampleIndexes.push_back(0);</div>\n\
<div class=\"line\">            this-&gt;fTimeBoundaries.push_back(-std::numeric_limits&lt;chrono_t&gt;::infinity());</div>\n\
<div class=\"line\">            Key prevKey;</div>\n\
<div class=\"line\">            <span class=\"keyword\">static_cast&lt;</span>Derived*<span class=\"keyword\">&gt;</span>(<span class=\"keyword\">this</span>)-&gt;getKey(prevKey, 0);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (index_t i=1; i&lt;numSamples; ++i) {</div>\n\
<div class=\"line\">                Key key;</div>\n\
<div class=\"line\">                <span class=\"keyword\">static_cast&lt;</span>Derived*<span class=\"keyword\">&gt;</span>(<span class=\"keyword\">this</span>)-&gt;getKey(key, i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (key != prevKey) {</div>\n\
<div class=\"line\">                    this-&gt;fUniqueSampleIndexes.push_back(i);</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We store the time at which a sample stop being</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// valid. This is reprented by the mid-way point</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// between 2 samples.</span></div>\n\
<div class=\"line\">                    this-&gt;fTimeBoundaries.push_back(</div>\n\
<div class=\"line\">                        0.5 * (sampling-&gt;getSampleTime(i-1) + sampling-&gt;getSampleTime(i))</div>\n\
<div class=\"line\">                    );</div>\n\
<div class=\"line\">                    prevKey = key;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            this-&gt;fTimeBoundaries.push_back(+std::numeric_limits&lt;chrono_t&gt;::infinity());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> setTime(chrono_t time)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fProperty.isConstant())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Delayed read of constant properties.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!fValidityInterval.valid()) {</div>\n\
<div class=\"line\">                <span class=\"keyword\">static_cast&lt;</span>Derived*<span class=\"keyword\">&gt;</span>(<span class=\"keyword\">this</span>)-&gt;readValue(0);</div>\n\
<div class=\"line\">                <span class=\"comment\">// If an IXform node is constant identity, getNumSamples() returns 0</span></div>\n\
<div class=\"line\">                fValidityInterval = TimeInterval(TimeInterval::kInfinite);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fValidityInterval.contains(time)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt;chrono_t&gt;::const_iterator bgn = fTimeBoundaries.begin();</div>\n\
<div class=\"line\">        std::vector&lt;chrono_t&gt;::const_iterator end = fTimeBoundaries.end();</div>\n\
<div class=\"line\">        std::vector&lt;chrono_t&gt;::const_iterator it = std::upper_bound(</div>\n\
<div class=\"line\">            bgn, end, time);</div>\n\
<div class=\"line\">        assert(it != bgn);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        index_t idx = fUniqueSampleIndexes[std::distance(bgn, it) - 1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Do this first for exception safety.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static_cast&lt;</span>Derived*<span class=\"keyword\">&gt;</span>(<span class=\"keyword\">this</span>)-&gt;readValue(idx);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"comment\">// Ok, we have successfully read the value. We can</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// now update the time information.</span></div>\n\
<div class=\"line\">        fValidityInterval = TimeInterval(*(it-1), *it);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Value&amp; getValue()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fValue;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    TimeInterval getValidityInterval()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fValidityInterval;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    Property              fProperty;</div>\n\
<div class=\"line\">    std::vector&lt;index_t&gt;  fUniqueSampleIndexes;</div>\n\
<div class=\"line\">    std::vector&lt;chrono_t&gt; fTimeBoundaries;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    TimeInterval          fValidityInterval;</div>\n\
<div class=\"line\">    Value                 fValue;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ScalarPropertyCache</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PROPERTY&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ScalarPropertyCache </div>\n\
<div class=\"line\">    : <span class=\"keyword\">public</span> PropertyCache&lt;</div>\n\
<div class=\"line\">        PROPERTY,</div>\n\
<div class=\"line\">        typename PROPERTY::value_type,</div>\n\
<div class=\"line\">        typename PROPERTY::value_type,</div>\n\
<div class=\"line\">        ScalarPropertyCache&lt;PROPERTY&gt;</div>\n\
<div class=\"line\">    &gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> PropertyCache&lt;</div>\n\
<div class=\"line\">        PROPERTY,</div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> PROPERTY::value_type,</div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> PROPERTY::value_type,</div>\n\
<div class=\"line\">        ScalarPropertyCache&lt;PROPERTY&gt;</div>\n\
<div class=\"line\">    &gt; BaseClass;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseClass::Key Key;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readValue(index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// For scalar properties, the value is the key...</span></div>\n\
<div class=\"line\">        getKey(this-&gt;fValue, idx);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> getKey(Key&amp; key, index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        this-&gt;fProperty.get(key, idx);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS XformPropertyCache</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>XformPropertyCache </div>\n\
<div class=\"line\">    : <span class=\"keyword\">public</span> PropertyCache&lt;</div>\n\
<div class=\"line\">        IXformSchema,</div>\n\
<div class=\"line\">        MMatrix,</div>\n\
<div class=\"line\">        MMatrix,</div>\n\
<div class=\"line\">        XformPropertyCache</div>\n\
<div class=\"line\">    &gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readValue(index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// For xform properties, the value is the key...</span></div>\n\
<div class=\"line\">        getKey(fValue, idx);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> getKey(Key&amp; key, index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        XformSample sample;</div>\n\
<div class=\"line\">        fProperty.get(sample, idx);</div>\n\
<div class=\"line\">        key = toMatrix(sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Helper function to extract the transformation matrix out of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// an XformSample.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> toMatrix(<span class=\"keyword\">const</span> XformSample&amp; sample)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::M44d matrix = sample.getMatrix();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>(matrix.x);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ArrayPropertyCache</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PROPERTY&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ArrayPropertyCache </div>\n\
<div class=\"line\">    : <span class=\"keyword\">public</span> PropertyCache&lt;</div>\n\
<div class=\"line\">        PROPERTY,</div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::ArraySampleKey,</div>\n\
<div class=\"line\">        std::shared_ptr&lt;</div>\n\
<div class=\"line\">            ReadableArray&lt;</div>\n\
<div class=\"line\">                typename BaseTypeOfElem&lt;</div>\n\
<div class=\"line\">                    typename PROPERTY::traits_type::value_type</div>\n\
<div class=\"line\">                    &gt;::value_type&gt; &gt;,</div>\n\
<div class=\"line\">        ArrayPropertyCache&lt;PROPERTY&gt;</div>\n\
<div class=\"line\">    &gt;</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> PropertyCache&lt;</div>\n\
<div class=\"line\">        PROPERTY,</div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::ArraySampleKey,</div>\n\
<div class=\"line\">        std::shared_ptr&lt;</div>\n\
<div class=\"line\">            ReadableArray&lt;</div>\n\
<div class=\"line\">                <span class=\"keyword\">typename</span> BaseTypeOfElem&lt;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">typename</span> PROPERTY::traits_type::value_type</div>\n\
<div class=\"line\">                    &gt;::value_type&gt; &gt;,</div>\n\
<div class=\"line\">        ArrayPropertyCache&lt;PROPERTY&gt;</div>\n\
<div class=\"line\">    &gt; BaseClass;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseClass::Property Property;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseClass::Key Key;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseClass::Value Value;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Property::sample_ptr_type ArraySamplePtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Property::traits_type traits_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseTypeOfElem&lt;typename traits_type::value_type&gt;::value_type BaseType;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kDimensions =</div>\n\
<div class=\"line\">        BaseTypeOfElem&lt;typename traits_type::value_type&gt;::kDimensions;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readValue(index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Key key;</div>\n\
<div class=\"line\">        getKey(key, idx);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Can&#39;t figure out how this can differs... It seems like a</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// provision for a future feature. Unfortunately, I can&#39;t</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// figure out if the key digest would be relative the read</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// or the orig POD!</span></div>\n\
<div class=\"line\">        assert(key.origPOD == key.readPOD);</div>\n\
<div class=\"line\">        assert(key.origPOD == traits_type::dataType().getPod());</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(BaseType) == PODNumBytes(traits_type::dataType().getPod()));</div>\n\
<div class=\"line\">        assert(kDimensions == traits_type::dataType().getExtent());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> size = size_t(key.numBytes / <span class=\"keyword\">sizeof</span>(BaseType));</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"comment\">// First, let&#39;s try to an array out of the global</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// registry.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Important, we first have to get rid of the previously</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// referenced value outside of the lock or else we are</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// risking a dead-lock on Linux and Mac (std::mutex is</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// non-recursive on these platforms).</span></div>\n\
<div class=\"line\">        this-&gt;fValue = Value();</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::lock_guard&lt;std::mutex&gt; lock(ArrayRegistry&lt;BaseType&gt;::mutex());</div>\n\
<div class=\"line\">            this-&gt;fValue = ArrayRegistry&lt;BaseType&gt;::lookupReadable(key.digest, size);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (this-&gt;fValue) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }            </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample not found. Read it.</span></div>\n\
<div class=\"line\">        ArraySamplePtr sample;</div>\n\
<div class=\"line\">        this-&gt;fProperty.get(sample, idx);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\">        Key key2 = sample-&gt;getKey();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> size2 = (sample-&gt;size() *</div>\n\
<div class=\"line\">                             Property::traits_type::dataType().getExtent());</div>\n\
<div class=\"line\">        assert(key == key2);</div>\n\
<div class=\"line\">        assert(size == size2);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Insert the read sample into the cache.</span></div>\n\
<div class=\"line\">        this-&gt;fValue = AlembicArray&lt;Property&gt;::create(sample, key.digest);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> getKey(Key&amp; key, index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> result =</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif                </span></div>\n\
<div class=\"line\">            this-&gt;fProperty.getKey(key, idx);</div>\n\
<div class=\"line\">        <span class=\"comment\">// There should always be a key...</span></div>\n\
<div class=\"line\">        assert(result);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PROPERTY&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ArrayPropertyCacheWithConverter</div>\n\
<div class=\"line\">    : <span class=\"keyword\">public</span> PropertyCache&lt;</div>\n\
<div class=\"line\">        PROPERTY,</div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::ArraySampleKey,</div>\n\
<div class=\"line\">        std::shared_ptr&lt;</div>\n\
<div class=\"line\">            ReadableArray&lt;</div>\n\
<div class=\"line\">                typename BaseTypeOfElem&lt;</div>\n\
<div class=\"line\">                    typename PROPERTY::traits_type::value_type</div>\n\
<div class=\"line\">                    &gt;::value_type&gt; &gt;,</div>\n\
<div class=\"line\">        ArrayPropertyCacheWithConverter&lt;PROPERTY&gt;</div>\n\
<div class=\"line\">    &gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> PropertyCache&lt;</div>\n\
<div class=\"line\">        PROPERTY,</div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::ArraySampleKey,</div>\n\
<div class=\"line\">        std::shared_ptr&lt;</div>\n\
<div class=\"line\">            ReadableArray&lt;</div>\n\
<div class=\"line\">                <span class=\"keyword\">typename</span> BaseTypeOfElem&lt;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">typename</span> PROPERTY::traits_type::value_type</div>\n\
<div class=\"line\">                    &gt;::value_type&gt; &gt;,</div>\n\
<div class=\"line\">        ArrayPropertyCacheWithConverter&lt;PROPERTY&gt;</div>\n\
<div class=\"line\">    &gt; BaseClass;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseClass::Property Property;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseClass::Key Key;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseClass::Value Value;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Property::sample_ptr_type ArraySamplePtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Property::traits_type traits_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> BaseTypeOfElem&lt;typename traits_type::value_type&gt;::value_type BaseType;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> Alembic::Util::Digest Digest;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;ReadableArray&lt;BaseType&gt; &gt;</div>\n\
<div class=\"line\">    (*Converter)(<span class=\"keyword\">const</span> <span class=\"keyword\">typename</span> PROPERTY::sample_ptr_type&amp; sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kDimensions =</div>\n\
<div class=\"line\">        BaseTypeOfElem&lt;typename traits_type::value_type&gt;::kDimensions;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ArrayPropertyCacheWithConverter(Converter converter) </div>\n\
<div class=\"line\">        : fConverter(converter)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readValue(index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Key key;</div>\n\
<div class=\"line\">        getKey(key, idx);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Can&#39;t figure out how this can differs... It seems like a</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// provision for a future feature. Unfortunately, I can&#39;t</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// figure out if the key digest would be relative the read</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// or the orig POD!</span></div>\n\
<div class=\"line\">        assert(key.origPOD == key.readPOD);</div>\n\
<div class=\"line\">        assert(key.origPOD == traits_type::dataType().getPod());</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(BaseType) == PODNumBytes(traits_type::dataType().getPod()));</div>\n\
<div class=\"line\">        assert(kDimensions == traits_type::dataType().getExtent());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> size = size_t(key.numBytes / <span class=\"keyword\">sizeof</span>(BaseType));</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"comment\">// First, let&#39;s try to an array out of the global</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// registry.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Important, we first have to get rid of the previously</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// referenced value outside of the lock or else we are</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// risking a dead-lock on Linux and Mac (std::mutex is</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// non-recursive on these platforms).</span></div>\n\
<div class=\"line\">        this-&gt;fValue = Value();</div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> ConvertionMap::const_iterator it = fsConvertionMap.find(key.digest);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != fsConvertionMap.end()) {</div>\n\
<div class=\"line\">            std::lock_guard&lt;std::mutex&gt; lock(ArrayRegistry&lt;BaseType&gt;::mutex());</div>\n\
<div class=\"line\">            this-&gt;fValue = ArrayRegistry&lt;BaseType&gt;::lookupReadable(it-&gt;second, size);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (this-&gt;fValue) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }            </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample not found. Read it.</span></div>\n\
<div class=\"line\">        ArraySamplePtr sample;</div>\n\
<div class=\"line\">        this-&gt;fProperty.get(sample, idx);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG        </span></div>\n\
<div class=\"line\">        Key key2 = sample-&gt;getKey();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> size2 = (sample-&gt;size() *</div>\n\
<div class=\"line\">                             Property::traits_type::dataType().getExtent());</div>\n\
<div class=\"line\">        assert(key == key2);</div>\n\
<div class=\"line\">        assert(size == size2);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Insert the read sample into the cache.</span></div>\n\
<div class=\"line\">        this-&gt;fValue = fConverter(sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fsConvertionMap[key.digest] = this-&gt;fValue-&gt;digest();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> getKey(Key&amp; key, index_t idx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> result =</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif                </span></div>\n\
<div class=\"line\">            this-&gt;fProperty.getKey(key, idx);</div>\n\
<div class=\"line\">        <span class=\"comment\">// There should always be a key...</span></div>\n\
<div class=\"line\">        assert(result);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>DigestHash</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::size_t operator()(Digest <span class=\"keyword\">const</span>&amp; v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::size_t seed = 0;</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, v.words[0]);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, v.words[1]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> seed;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;Digest, Digest, DigestHash&gt; ConvertionMap;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> ConvertionMap fsConvertionMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Converter fConverter;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS DataProvider</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// An abstract class to wrap the details of different data sources.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Currently, we have four kinds of Alembic geometries:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     1) IPolyMesh from gpuCache command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     2) IPolyMesh from arbitrary Alembic exporter such as AbcExport</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     3) INuPatch  from arbitrary Alembic exporter such as AbcExport</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     4) ISubD     from arbitrary Alembic exporter such as AbcExport</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Of course, 1) is much faster than 2).</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Caller is responsible for locking.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>DataProvider</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~DataProvider();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if all the properties are valid</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The following two methods are used when reading hierarchy.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill minimal property caches that will display a bounding box place holder</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillBBoxAndVisSample(chrono_t time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the validity interval of a bounding box place holder sample</span></div>\n\
<div class=\"line\">    TimeInterval getBBoxAndVisValidityInterval()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fBBoxAndVisValidityInterval; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// The following two methods are used when reading shapes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill property caches with the data at the specified index</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillTopoAndAttrSample(chrono_t time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the combined validity interval of the the property</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// caches for the last updated index.</span></div>\n\
<div class=\"line\">    TimeInterval getValidityInterval()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fValidityInterval; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check for the visibility</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isVisible() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the current bounding box proxy sample from property cache</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const ShapeSample&gt;</div>\n\
<div class=\"line\">    getBBoxPlaceHolderSample(<span class=\"keywordtype\">double</span> seconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the current sample from property cache</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> std::shared_ptr&lt;const ShapeSample&gt;</div>\n\
<div class=\"line\">    getSample(<span class=\"keywordtype\">double</span> seconds) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the bounding box and validity interval for the current</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// sample, i.e. the time of the last call to sample.</span></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> getBoundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Imath::Box&lt;Imath::V3d&gt; boundingBox =</div>\n\
<div class=\"line\">            fBoundingBoxCache.getValue();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (boundingBox.isEmpty()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(         </div>\n\
<div class=\"line\">            <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(boundingBox.min.x, boundingBox.min.y, boundingBox.min.z),</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(boundingBox.max.x, boundingBox.max.y, boundingBox.max.z));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval getBoundingBoxValidityInterval()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fBoundingBoxCache.getValidityInterval(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval getAnimTimeRange()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fAnimTimeRange; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    DataProvider(<span class=\"keyword\">const</span> DataProvider&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> DataProvider&amp; operator= (<span class=\"keyword\">const</span> DataProvider&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> INFO&gt;</div>\n\
<div class=\"line\">    DataProvider(Alembic::AbcGeom::IGeomBaseSchema&lt;INFO&gt;&amp; abcGeom,</div>\n\
<div class=\"line\">                 Alembic::Abc::TimeSamplingPtr            timeSampling,</div>\n\
<div class=\"line\">                 <span class=\"keywordtype\">size_t</span> numSamples,</div>\n\
<div class=\"line\">                 <span class=\"keywordtype\">bool</span>   needUVs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update Bounding Box and Visibility property caches</span></div>\n\
<div class=\"line\">    TimeInterval updateBBoxAndVisCache(chrono_t time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the property caches</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> TimeInterval updateCache(chrono_t time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Whether UV coordinates should be read or generated.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> fNeedUVs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Exact animation time range</span></div>\n\
<div class=\"line\">    TimeInterval fAnimTimeRange;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The valid range of bbox and visibility in property caches</span></div>\n\
<div class=\"line\">    TimeInterval fBBoxAndVisValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The valid range of the current data in property caches</span></div>\n\
<div class=\"line\">    TimeInterval fValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Shape Visibility</span></div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::ICharProperty&gt;  fVisibilityCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bounding Box</span></div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::IBox3dProperty&gt; fBoundingBoxCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Parent Visibility</span></div>\n\
<div class=\"line\">    std::vector&lt;ScalarPropertyCache&lt;Alembic::Abc::ICharProperty&gt; &gt; fParentVisibilityCache;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS PolyDataProvider</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Base class for all polygon data sources.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PolyDataProvider : <span class=\"keyword\">public</span> DataProvider</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    ~PolyDataProvider() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if all the properties are valid</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    PolyDataProvider(<span class=\"keyword\">const</span> PolyDataProvider&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> PolyDataProvider&amp; operator= (<span class=\"keyword\">const</span> PolyDataProvider&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> SCHEMA&gt;</div>\n\
<div class=\"line\">    PolyDataProvider(SCHEMA&amp;                         abcMesh,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">bool</span>                            needUVs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the property caches</span></div>\n\
<div class=\"line\">    TimeInterval updateCache(chrono_t time) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Polygons</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fFaceCountsCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IP3fArrayProperty&gt;   fPositionsCache;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS RawDataProvider</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class reads mesh data that is written by gpuCache command.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>RawDataProvider : <span class=\"keyword\">public</span> PolyDataProvider</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    RawDataProvider(Alembic::AbcGeom::IPolyMeshSchema&amp; abcMesh,</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\">    ~RawDataProvider() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if all the properties are valid</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the current sample from property cache</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const ShapeSample&gt;</div>\n\
<div class=\"line\">    getSample(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    RawDataProvider(<span class=\"keyword\">const</span> RawDataProvider&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> RawDataProvider&amp; operator= (<span class=\"keyword\">const</span> RawDataProvider&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Convert triangles winding from CW to CCW</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt;</div>\n\
<div class=\"line\">    correctPolygonWinding(<span class=\"keyword\">const</span> Alembic::Abc::Int32ArraySamplePtr&amp; indices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the property caches</span></div>\n\
<div class=\"line\">    TimeInterval updateCache(chrono_t time) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ArrayPropertyCacheWithConverter&lt;Alembic::Abc::IInt32ArrayProperty&gt; fFaceIndicesCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fWireIndicesCache;  <span class=\"comment\">// required</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fGroupSizesCache;   <span class=\"comment\">// optional</span></div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::IC4fProperty&gt;       fDiffuseColorCache; <span class=\"comment\">// required</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IN3fArrayProperty&gt;   fNormalsCache;      <span class=\"comment\">// currently, required</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IV2fArrayProperty&gt;   fUVsCache;          </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS Triangulator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class reads mesh data that is written by an arbitrary Alembic exporter.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Triangulate a polygon mesh and convert multi-indexed streams to single-indexed streams.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>Triangulator : <span class=\"keyword\">public</span> PolyDataProvider</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    Triangulator(Alembic::AbcGeom::IPolyMeshSchema&amp; abcMesh,</div>\n\
<div class=\"line\">                 <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\">    ~Triangulator() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if all the properties are valid</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the current sample from property cache</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const ShapeSample&gt;</div>\n\
<div class=\"line\">    getSample(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    Triangulator(<span class=\"keyword\">const</span> Triangulator&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Triangulator&amp; operator= (<span class=\"keyword\">const</span> Triangulator&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the property caches</span></div>\n\
<div class=\"line\">    TimeInterval updateCache(chrono_t time) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Polygon Indices</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fFaceIndicesCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Normals</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope                        fNormalsScope;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IN3fArrayProperty&gt;    fNormalsCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IUInt32ArrayProperty&gt; fNormalIndicesCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// UVs</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope                        fUVsScope;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IV2fArrayProperty&gt;    fUVsCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IUInt32ArrayProperty&gt; fUVIndicesCache;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keywordtype\">size_t</span> SIZE&gt;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt; convertMultiIndexedStream(</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt; attribArray,</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; indexArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> check();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> computeNormals();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> convertMultiIndexedStreams();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> remapVertAttribs();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> computeWireIndices();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> triangulate();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in check();</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope                 fCheckedNormalsScope;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fCheckedNormals;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fCheckedNormalIndices;</div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope                 fCheckedUVsScope;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fCheckedUVs;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fCheckedUVIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in computeNormals()</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope                 fComputedNormalsScope;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fComputedNormals;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fComputedNormalIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in convertMultiIndexedStreams()</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                                          fNumVertices;</div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;unsigned int&gt;               fVertAttribsIndices;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fMappedFaceIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in remapVertAttribs()</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fMappedPositions;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fMappedNormals;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fMappedUVs;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in computeWireIndices()</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fWireIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in triangulate()</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fTriangleIndices;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS NurbsTessellator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class reads NURBS data that is written by an arbitrary Alembic exporter.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// NURBS with trimmed curves are tessellated by MFnNurbsSurface</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>NurbsTessellator : <span class=\"keyword\">public</span> DataProvider</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    NurbsTessellator(Alembic::AbcGeom::INuPatchSchema&amp; abcNurbs,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    ~NurbsTessellator() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if all the properties are valid</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the current sample from property cache</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const ShapeSample&gt;</div>\n\
<div class=\"line\">    getSample(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    NurbsTessellator(<span class=\"keyword\">const</span> NurbsTessellator&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> NurbsTessellator&amp; operator= (<span class=\"keyword\">const</span> NurbsTessellator&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the property caches</span></div>\n\
<div class=\"line\">    TimeInterval updateCache(chrono_t time) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// NURBS required properties</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IP3fArrayProperty&gt;       fPositionsCache;</div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::IInt32Property&gt;         fNumUCache;</div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::IInt32Property&gt;         fNumVCache;</div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::IInt32Property&gt;         fUOrderCache;</div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::IInt32Property&gt;         fVOrderCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::AbcGeom::IFloatArrayProperty&gt; fUKnotCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::AbcGeom::IFloatArrayProperty&gt; fVKnotCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// NURBS optional properties</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   Currently, normals and UVs are ignored..</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::AbcGeom::IFloatArrayProperty&gt; fPositionWeightsCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Optional trim curves</span></div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::IInt32Property&gt;         fTrimNumLoopsCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt;     fTrimNumCurvesCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt;     fTrimNumVerticesCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt;     fTrimOrderCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::AbcGeom::IFloatArrayProperty&gt; fTrimKnotCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::AbcGeom::IFloatArrayProperty&gt; fTrimUCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::AbcGeom::IFloatArrayProperty&gt; fTrimVCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::AbcGeom::IFloatArrayProperty&gt; fTrimWCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> check();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setNurbs(<span class=\"keywordtype\">bool</span> rebuild, <span class=\"keywordtype\">bool</span> positionsChanged);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> tessellate();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> convertToPoly();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in check()</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fSurfaceValid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in setNubs()</span></div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface_data.html\">MFnNurbsSurfaceData</a> fNurbsData;</div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html\">MFnNurbsSurface</a>     fNurbs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in tessellate()</span></div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html\">MFnMeshData</a> fPolyMeshData;</div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>     fPolyMesh;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in convertToPoly()</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fTriangleIndices;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fWireIndices;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fPositions;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fNormals;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fUVs;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS SubDSmoother</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class reads SubD data that is written by an arbitrary Alembic exporter.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>SubDSmoother : <span class=\"keyword\">public</span> PolyDataProvider</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    SubDSmoother(Alembic::AbcGeom::ISubDSchema&amp;     abcSubd,</div>\n\
<div class=\"line\">                 <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>                         needUVs);</div>\n\
<div class=\"line\">    ~SubDSmoother() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if all the properties are valid</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the current sample from property cache</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const ShapeSample&gt;</div>\n\
<div class=\"line\">    getSample(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    SubDSmoother(<span class=\"keyword\">const</span> SubDSmoother&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubDSmoother&amp; operator= (<span class=\"keyword\">const</span> SubDSmoother&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the property caches</span></div>\n\
<div class=\"line\">    TimeInterval updateCache(chrono_t time) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Polygon Indices</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fFaceIndicesCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Crease Edges</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fCreaseIndicesCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fCreaseLengthsCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IFloatArrayProperty&gt; fCreaseSharpnessesCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Crease Vertices</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fCornerIndicesCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IFloatArrayProperty&gt; fCornerSharpnessesCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Invisible Faces</span></div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IInt32ArrayProperty&gt; fHolesCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// UVs</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope                        fUVsScope{Alembic::AbcGeom::kUnknownScope};</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IV2fArrayProperty&gt;    fUVsCache;</div>\n\
<div class=\"line\">    ArrayPropertyCache&lt;Alembic::Abc::IUInt32ArrayProperty&gt; fUVIndicesCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> check();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> rebuildSubD();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setPositions();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setCreaseEdges();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setCreaseVertices();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setInvisibleFaces();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setUVs();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> convertToPoly();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in check()</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope                 fCheckedUVsScope;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fCheckedUVs;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fCheckedUVIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in rebuildSubD()</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html\">MFnMeshData</a> fSubDData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>     fSubD;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute in convertToPoly()</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fTriangleIndices;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; fWireIndices;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fPositions;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fNormals;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt;                fUVs;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheObjectReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Abstract reader interface for reading an Alembic object along with</span></div>\n\
<div class=\"line\"><span class=\"comment\">// all of its children.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheObjectReader</div>\n\
<div class=\"line\">    : <span class=\"keyword\">public</span> std::enable_shared_from_this&lt;AlembicCacheObjectReader&gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span>  std::shared_ptr&lt;AlembicCacheObjectReader&gt; Ptr;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> Ptr create(Alembic::Abc::IObject&amp; abcObj, <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AlembicCacheObjectReader() {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~AlembicCacheObjectReader() = 0;</div>\n\
<div class=\"line\">    AlembicCacheObjectReader(<span class=\"keyword\">const</span> AlembicCacheObjectReader&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    AlembicCacheObjectReader&amp; operator=(<span class=\"keyword\">const</span> AlembicCacheObjectReader&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Read and append a sample of the given mesh at the given time</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and sample index value.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This method only reads hierarchy information:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// xform, bounding box, visibility, ...</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> TimeInterval sampleHierarchy(<span class=\"keywordtype\">double</span> seconds,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; rootMatrix, TimeInterval rootMatrixInterval) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Read and append a sample of the given mesh at the given time</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and sample index value.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This method reads the mesh buffers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> TimeInterval sampleShape(<span class=\"keywordtype\">double</span> seconds) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the read hierarchy.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> SubNode::MPtr <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the bounding box and validity interval for the current</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// sample, i.e. the time of the last call to sample.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The bounding box is in the axis of root sub-node.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> getBoundingBox() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> TimeInterval getBoundingBoxValidityInterval() <span class=\"keyword\">const</span> = 0;  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the exact animation time range.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> TimeInterval getAnimTimeRange() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Save this object reader and reset its content for reuse.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> saveAndReset(AlembicCacheReader&amp; cacheReader) = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheTopReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheTopReader : <span class=\"keyword\">public</span> AlembicCacheObjectReader</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    AlembicCacheTopReader(Alembic::Abc::IObject <span class=\"keywordtype\">object</span>, <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\">    ~AlembicCacheTopReader() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    TimeInterval sampleHierarchy(<span class=\"keywordtype\">double</span> seconds, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; rootMatrix, TimeInterval rootMatrixInterval) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    TimeInterval sampleShape(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    SubNode::MPtr <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span> <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> getBoundingBox() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    TimeInterval getBoundingBoxValidityInterval() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval getAnimTimeRange() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> saveAndReset(AlembicCacheReader&amp; cacheReader) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bounding box and its interval</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> fBoundingBox;</div>\n\
<div class=\"line\">    TimeInterval fBoundingBoxValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The sub node data currently being filled-in.</span></div>\n\
<div class=\"line\">    XformData::MPtr fXformData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Readers of children nodes.</span></div>\n\
<div class=\"line\">    std::vector&lt;AlembicCacheObjectReader::Ptr&gt; fChildren;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheXformReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheXformReader : <span class=\"keyword\">public</span> AlembicCacheObjectReader</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    AlembicCacheXformReader(Alembic::Abc::IObject <span class=\"keywordtype\">object</span>, <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\">    ~AlembicCacheXformReader() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    TimeInterval sampleHierarchy(<span class=\"keywordtype\">double</span> seconds, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; rootMatrix, TimeInterval rootMatrixInterval) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    TimeInterval sampleShape(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    SubNode::MPtr <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span> <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> getBoundingBox() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    TimeInterval getBoundingBoxValidityInterval() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval getAnimTimeRange() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> saveAndReset(AlembicCacheReader&amp; cacheReader) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillTopoAndAttrSample(chrono_t time);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isVisible() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Alembic readers</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::string                 fName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The valid range of the current data in property caches</span></div>\n\
<div class=\"line\">    TimeInterval fValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Transform</span></div>\n\
<div class=\"line\">    XformPropertyCache fXformCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Transform Visibility</span></div>\n\
<div class=\"line\">    ScalarPropertyCache&lt;Alembic::Abc::ICharProperty&gt;  fVisibilityCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bounding box and its interval</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> fBoundingBox;</div>\n\
<div class=\"line\">    TimeInterval fBoundingBoxValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The sub node data currently being filled-in.</span></div>\n\
<div class=\"line\">    XformData::MPtr fXformData;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Readers of children nodes.</span></div>\n\
<div class=\"line\">    std::vector&lt;AlembicCacheObjectReader::Ptr&gt; fChildren;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheMeshReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheMeshReader : <span class=\"keyword\">public</span> AlembicCacheObjectReader</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    AlembicCacheMeshReader(Alembic::Abc::IObject <span class=\"keywordtype\">object</span>, <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\">    ~AlembicCacheMeshReader() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    TimeInterval sampleHierarchy(<span class=\"keywordtype\">double</span> seconds, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; rootMatrix, TimeInterval rootMatrixInterval) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    TimeInterval sampleShape(<span class=\"keywordtype\">double</span> seconds) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    SubNode::MPtr <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span> <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> getBoundingBox() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    TimeInterval getBoundingBoxValidityInterval() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval getAnimTimeRange() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> saveAndReset(AlembicCacheReader&amp; cacheReader) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Alembic readers</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::string                 fName;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::string                 fFullName;</div>\n\
<div class=\"line\">    std::unique_ptr&lt;DataProvider&gt;     fDataProvider;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bounding box and its interval</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> fBoundingBox;</div>\n\
<div class=\"line\">    TimeInterval fBoundingBoxValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The sub node data currently being filled-in.</span></div>\n\
<div class=\"line\">    ShapeData::MPtr fShapeData;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>          fNumTransparentSample;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheMaterialReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheMaterialReader</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    AlembicCacheMaterialReader(Alembic::Abc::IObject abcObj);</div>\n\
<div class=\"line\">    ~AlembicCacheMaterialReader();</div>\n\
<div class=\"line\">    AlembicCacheMaterialReader(<span class=\"keyword\">const</span> AlembicCacheMaterialReader&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    AlembicCacheMaterialReader&amp; operator=(<span class=\"keyword\">const</span> AlembicCacheMaterialReader&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval sampleMaterial(<span class=\"keywordtype\">double</span> seconds);</div>\n\
<div class=\"line\">    MaterialGraph::MPtr <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Alembic readers</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::string fName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Templated classes to translate Alembic properties.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ABC_PROP&gt; </div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ScalarMaterialProp</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ScalarMaterialProp(Alembic::Abc::ICompoundProperty&amp; parent,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> std::string&amp; name,</div>\n\
<div class=\"line\">                           MaterialNode::MPtr&amp; node)</div>\n\
<div class=\"line\">            : fName(name)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Create Alembic input property</span></div>\n\
<div class=\"line\">            ABC_PROP abcProp(parent, name);</div>\n\
<div class=\"line\">            assert(abcProp.valid());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create reader cache</span></div>\n\
<div class=\"line\">            fCache.reset(<span class=\"keyword\">new</span> ScalarPropertyCache&lt;ABC_PROP&gt;());</div>\n\
<div class=\"line\">            fCache-&gt;init(abcProp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find existing property.</span></div>\n\
<div class=\"line\">            fProp = node-&gt;findProperty(name.c_str());</div>\n\
<div class=\"line\">            assert(!fProp || fProp-&gt;type() == propertyType&lt;ABC_PROP&gt;());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fProp &amp;&amp; fProp-&gt;type() != propertyType&lt;ABC_PROP&gt;()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Something goes wrong..</span></div>\n\
<div class=\"line\">                fCache.reset();</div>\n\
<div class=\"line\">                fProp.reset();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// This is not a known property.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!fProp) {</div>\n\
<div class=\"line\">                fProp = node-&gt;createProperty(name.c_str(), propertyType&lt;ABC_PROP&gt;());</div>\n\
<div class=\"line\">                assert(fProp-&gt;type() == propertyType&lt;ABC_PROP&gt;());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        TimeInterval sample(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            TimeInterval validityInterval(TimeInterval::kInfinite);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fCache &amp;&amp; fCache-&gt;valid()) {</div>\n\
<div class=\"line\">                fCache-&gt;setTime(seconds);</div>\n\
<div class=\"line\">                validityInterval &amp;= fCache-&gt;getValidityInterval();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (seconds == validityInterval.startTime()) {</div>\n\
<div class=\"line\">                    setMaterialProperty&lt;ABC_PROP&gt;(fCache, fProp, seconds);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        std::string                                       fName;</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ScalarPropertyCache&lt;ABC_PROP&gt; &gt; fCache;</div>\n\
<div class=\"line\">        MaterialProperty::MPtr                            fProp;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">static</span> MaterialProperty::Type propertyType()</div>\n\
<div class=\"line\">    { assert(0); <span class=\"keywordflow\">return</span> MaterialProperty::kFloat; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> setMaterialProperty(</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ScalarPropertyCache&lt;T&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">        MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The list of animated property caches</span></div>\n\
<div class=\"line\">    std::vector&lt;ScalarMaterialProp&lt;Alembic::Abc::IBoolProperty&gt; &gt;    fBoolCaches;</div>\n\
<div class=\"line\">    std::vector&lt;ScalarMaterialProp&lt;Alembic::Abc::IInt32Property&gt; &gt;   fInt32Caches;</div>\n\
<div class=\"line\">    std::vector&lt;ScalarMaterialProp&lt;Alembic::Abc::IFloatProperty&gt; &gt;   fFloatCaches;</div>\n\
<div class=\"line\">    std::vector&lt;ScalarMaterialProp&lt;Alembic::Abc::IV2fProperty&gt; &gt;     fFloat2Caches;</div>\n\
<div class=\"line\">    std::vector&lt;ScalarMaterialProp&lt;Alembic::Abc::IV3fProperty&gt; &gt;     fFloat3Caches;</div>\n\
<div class=\"line\">    std::vector&lt;ScalarMaterialProp&lt;Alembic::Abc::IC3fProperty&gt; &gt;     fRGBCaches;</div>\n\
<div class=\"line\">    std::vector&lt;ScalarMaterialProp&lt;Alembic::Abc::IWstringProperty&gt; &gt; fStringCaches;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The valid range of the current data in property caches</span></div>\n\
<div class=\"line\">    TimeInterval fValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The material graph currently being filled-in.</span></div>\n\
<div class=\"line\">    MaterialGraph::MPtr fMaterialGraph;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Template explicit specialization must be in namespace scope.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> MaterialProperty::Type AlembicCacheMaterialReader::propertyType&lt;Alembic::Abc::IBoolProperty&gt;()</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> MaterialProperty::kBool; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> MaterialProperty::Type AlembicCacheMaterialReader::propertyType&lt;Alembic::Abc::IInt32Property&gt;()</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> MaterialProperty::kInt32; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> MaterialProperty::Type AlembicCacheMaterialReader::propertyType&lt;Alembic::Abc::IFloatProperty&gt;()</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> MaterialProperty::kFloat; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> MaterialProperty::Type AlembicCacheMaterialReader::propertyType&lt;Alembic::Abc::IV2fProperty&gt;()</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> MaterialProperty::kFloat2; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> MaterialProperty::Type AlembicCacheMaterialReader::propertyType&lt;Alembic::Abc::IV3fProperty&gt;()</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> MaterialProperty::kFloat3; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> MaterialProperty::Type AlembicCacheMaterialReader::propertyType&lt;Alembic::Abc::IC3fProperty&gt;()</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> MaterialProperty::kRGB; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> MaterialProperty::Type AlembicCacheMaterialReader::propertyType&lt;Alembic::Abc::IWstringProperty&gt;()</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> MaterialProperty::kString; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> AlembicCacheMaterialReader::setMaterialProperty&lt;Alembic::Abc::IBoolProperty&gt;(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ScalarPropertyCache&lt;Alembic::Abc::IBoolProperty&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    prop-&gt;setBool(seconds, cache-&gt;getValue());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> AlembicCacheMaterialReader::setMaterialProperty&lt;Alembic::Abc::IInt32Property&gt;(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ScalarPropertyCache&lt;Alembic::Abc::IInt32Property&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    prop-&gt;setInt32(seconds, cache-&gt;getValue());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> AlembicCacheMaterialReader::setMaterialProperty&lt;Alembic::Abc::IFloatProperty&gt;(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ScalarPropertyCache&lt;Alembic::Abc::IFloatProperty&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    prop-&gt;setFloat(seconds, cache-&gt;getValue());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> AlembicCacheMaterialReader::setMaterialProperty&lt;Alembic::Abc::IV2fProperty&gt;(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ScalarPropertyCache&lt;Alembic::Abc::IV2fProperty&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::V2f value = cache-&gt;getValue();</div>\n\
<div class=\"line\">    prop-&gt;setFloat2(seconds, value.x, value.y);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> AlembicCacheMaterialReader::setMaterialProperty&lt;Alembic::Abc::IV3fProperty&gt;(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ScalarPropertyCache&lt;Alembic::Abc::IV3fProperty&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::V3f value = cache-&gt;getValue();</div>\n\
<div class=\"line\">    prop-&gt;setFloat3(seconds, value.x, value.y, value.z);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> AlembicCacheMaterialReader::setMaterialProperty&lt;Alembic::Abc::IC3fProperty&gt;(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ScalarPropertyCache&lt;Alembic::Abc::IC3fProperty&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::C3f value = cache-&gt;getValue();</div>\n\
<div class=\"line\">    prop-&gt;setColor(seconds, <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(value.x, value.y, value.z));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> AlembicCacheMaterialReader::setMaterialProperty&lt;Alembic::Abc::IWstringProperty&gt;(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ScalarPropertyCache&lt;Alembic::Abc::IWstringProperty&gt; &gt;&amp; cache,</div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::wstring value = cache-&gt;getValue();</div>\n\
<div class=\"line\">    prop-&gt;setString(seconds, value.c_str());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace CacheReaderAlembicPrivate</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheReader : <span class=\"keyword\">public</span> CacheReader</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;CacheReader&gt; create(<span class=\"keyword\">const</span> <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~AlembicCacheReader() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> validateGeomPath(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; validatedGeomPath) <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    SubNode::Ptr readScene(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <span class=\"keywordtype\">bool</span> needUVs) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    SubNode::Ptr readHierarchy(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <span class=\"keywordtype\">bool</span> needUVs) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    SubNode::Ptr readShape(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <span class=\"keywordtype\">bool</span> needUVs) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MaterialGraphMap::Ptr readMaterials() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> readAnimTimeRange(TimeInterval&amp; range) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> saveReader(<span class=\"keyword\">const</span> std::string&amp; fullName, </div>\n\
<div class=\"line\">                    CacheReaderAlembicPrivate::AlembicCacheObjectReader::Ptr&amp; reader);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>AlembicCacheMeshReader;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AlembicCacheReader(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> fFile;</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> Alembic::Abc::IArchive fAbcArchive;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;std::string,CacheReaderAlembicPrivate::AlembicCacheObjectReader::Ptr&gt; ObjectReaderMap;</div>\n\
<div class=\"line\">    ObjectReaderMap fSavedReaders;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";