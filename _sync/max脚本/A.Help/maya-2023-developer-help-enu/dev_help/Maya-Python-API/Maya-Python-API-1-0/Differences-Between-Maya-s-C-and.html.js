var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n\
<script type=\"text/javascript\" src=\"../../../scripts/prettify.js\"></script><script src=\"../../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /><meta name=\"generator\" content=\"pandoc\" /><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><script type=\"text/javascript\" src=\"../../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Differences Between Maya&#39;s C++ and Python APIs</title>\n\
   </head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script></script><script></script><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Differences Between Maya&#39;s C++ and Python APIs</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"differences-between-mayas-c-and-python-apis\"></a></div>\n\
<p>The Maya Python API is not an exact copy of the C++ Maya API. We have made changes to the Python bindings for integration purposes.</p>\n\
<div class=\'section\'><a id=\"no-mstring-and-mstringarray-classes\"></a><h2 id=\"no-mstring-and-mstringarray-classes\">No MString and MStringArray classes</h2></div>\n\
<p>We have removed the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MString</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStringArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MStringArray</a></span> classes from the Maya Python API. Python already has a very robust string implementation which makes ours unnecessary.</p>\n\
<p>When you pass a python object to an API method which expects an MString, the internal conversion to MString behaves the same as the python call <span class=\'code\'>unicode(param)</span>. This means if <em>param</em> is of type <em>str</em>, it will be decoded using the default codec. In general, if you use non-ascii characters, it is safer to pass <em>unicode</em> objects.</p>\n\
<div class=\'section\'><a id=\"no-mstatus-class\"></a><h2 id=\"no-mstatus-class\">No MStatus class</h2></div>\n\
<p>We have removed the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MStatus</a></span> class. Python exceptions must be used instead of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MStatus</a></span>. See <a href=\'#!/url=./dev_help/Maya-Python-API/Maya-Python-API-1-0/Using-the-Maya-Python-API.html#error-conditions\' title=\'\'>Error Conditions</a> and <a href=\'#!/url=./dev_help/Maya-Python-API/Maya-Python-API-1-0/Using-the-Maya-Python-API.html#exceptions-versus-mstatus\' title=\'\'>Exceptions versus MStatus</a> for more information.</p>\n\
<div class=\'section\'><a id=\"void-pointers\"></a><h2 id=\"void-pointers\">Void* Pointers</h2></div>\n\
<p>The Maya API makes use of void *pointers in several places including messages. In the Maya Python API, any Python object can be passed in place of a void* pointer.</p>\n\
<div class=\'section\'><a id=\"proxy-classes-and-object-ownership\"></a><h2 id=\"proxy-classes-and-object-ownership\">Proxy Classes and Object Ownership</h2></div>\n\
<p>When creating a proxy class in a <span class=\'code\'>creator()</span> function or any other function that returns the class to Maya, you must call <span class=\'code\'>OpenMayaMPx.asMPxPtr()</span> on the new object. This call transfers ownership of the object to Maya. If this call is not made, then Python retains ownership and can dereference the object and destroy it even though Maya may have a pointer to it.</p>\n\
<div class=\'section\'><a id=\"commands-with-flags-must-use-an-msyntax\"></a><h2 id=\"commands-with-flags-must-use-an-msyntax\">Commands with Flags must use an MSyntax</h2></div>\n\
<p>If a command tries to parse its flags directly from the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgList\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_list.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_list.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MArgList</a></span> passed to its <span class=\'code\'>doIt()</span> method, those flags will not be available for use when the command is used from Python. This is true regardless of whether the command was written in Python or C++.</p>\n\
<p>To make flags available for use from Python the command must specify its syntax using an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSyntax\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_syntax.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_syntax.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MSyntax</a></span> object and parse the flags using the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgParser\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_parser.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_parser.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MArgParser</a></span> or <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MArgDatabase\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_arg_database.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_arg_database.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MArgDatabase</a></span> classes.</p>\n\
<div class=\'section\'><a id=\"undo\"></a><h2 id=\"undo\">Undo</h2></div>\n\
<p>It is possible to mix Maya Python API calls along with Maya command calls in the same script. Undoing the operations of such a script will not be correct if the Maya Python API calls modify the model and do not properly support undo using the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxCommand\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_command.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_px_command.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxCommand</a></span> class.</p>\n\
<div class=\'section\'><a id=\"modules-versus-shared-libraries\"></a><h2 id=\"modules-versus-shared-libraries\">Modules versus Shared Libraries</h2></div>\n\
<p>When comparing these interfaces to the shared libraries we ship for the C++ Maya API, the only difference is a new <span class=\'code\'>OpenMayaMPx</span> module. This module contains the bindings for any proxy or <span class=\'code\'>MPx</span> class we provide.</p>\n\
<div class=\'section\'><a id=\"include-files\"></a><h2 id=\"include-files\">Include files</h2></div>\n\
<p>The Maya API C++ include files are used to generate the bindings for the Maya Python API. These files are not required when programming with the Maya Python API but are useful to see what is included or excluded in the bindings, since not all items in the C++ API are scriptable.</p>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";