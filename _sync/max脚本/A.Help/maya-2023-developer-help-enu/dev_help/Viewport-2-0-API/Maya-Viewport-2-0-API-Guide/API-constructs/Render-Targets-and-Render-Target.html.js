var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n\
<script type=\"text/javascript\" src=\"../../../../scripts/prettify.js\"></script><script src=\"../../../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /><meta name=\"generator\" content=\"pandoc\" /><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><script type=\"text/javascript\" src=\"../../../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Render Targets and Render Target Manager</title>\n\
   </head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script></script><script></script><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Render Targets and Render Target Manager</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"render-targets-and-render-target-manager\"></a></div>\n\
<p>A unified mechanism for hardware (GPU) <strong>render target</strong> creation and management is exposed in the API. All render targets are managed by the resource manager and are cached for reuse. Any kind of resource management for resizing targets is also handled by the resource manager. As with other GPU resources, the interface can encapsu­late the resource in a draw API agnostic manner.</p>\n\
<p>A render target can be described as a target block of pixels (buffer) into which rendering will occur.</p>\n\
<p>A render target should not be thought of as an onscreen output buffer such as DirectX SwapChain, nor an Open frame buffer or an OpenGL context. This goes back to the notion that the renderer is not necessarily a viewport, which assumes that rendering into a viewport is the same as rendering into an OpenGL context.</p>\n\
<p>In the API a render target is represented by an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTarget\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;}]\">MRenderTarget</a></span>.</p>\n\
<p>It is possible to have a target which:</p>\n\
<ol>\n\
<li>Holds color values. This is called a color target.</li>\n\
<li>Holds depth values. This is called a depth target.</li>\n\
<li>Holds depth and stencil values. This is called a depth+stencil target.</li>\n\
</ol>\n\
<p>The most accurate description of a colour and depth target is that it’s a texture that can be rendered into. One or more color targets and/or a depth target can be set to indicate where rendering is actively being sent to.</p>\n\
<p>In legacy interfaces, only one format was supported for color and one for depth. This was fixed RGBA 24-bit color and fixed 24-bit depth. The stencil format support remains single channel 8-bit fixed point. The current possible variations are described using an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetDescription\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_description.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target_description.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;}]\">MRenderTargetDescription</a></span>. This descriptor includes options for:</p>\n\
<ul>\n\
<li><em>Name</em>: A name which uniquely identifies the resource. It is possible to have multiple targets with the same format but having a different name.</li>\n\
<li><em>Dimensions</em>: Width and height.</li>\n\
<li><em>Hardware multisampling parameters</em>: MSAA.</li>\n\
<li><em>Raster format</em>: Indicates whether this is a color or depth target, the number of channels, the channel ordering, and the bit precision per channel.</li>\n\
</ul>\n\
<p>The process to acquire a render target is as follows:</p>\n\
<ol>\n\
<li>Create and fill in a descriptor (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetDescription\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_description.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target_description.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;}]\">MRenderTargetDescription</a></span>) for a render target.</li>\n\
<li>Attempt to acquire a target from the target manager (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target_manager.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;}]\">MRenderTargetManager</a></span>)</li>\n\
<li>It is possible that this acquire can fail and is dependent on the video card, the card driver and the currently available resources. For instance render targets can use up a fair amount of GPU memory and it is possible to fail trying to create a target with large dimensions, high bit depth and a multisampling parameter value.</li>\n\
</ol>\n\
<p>To avoid the complications of target management, a convenient method has been provided on the target to allow a new descriptor to be set. Whenever this method is invoked, a format change or a resize is attempted. As with an initial acquire, it is possible that the resize may fail.</p>\n\
<div class=\'figure\'><img src=\'dev_help/images/aa0f8cb3.jpg\' title=\'\' /></div>\n\
<p>Figure 32: On the left are 2 possible render targets. The target with the name “MyColorTarget” is a color target with an R16G16_Float. The second target named “MyDepthTarget” is a 32 bit floating point depth target. The names are used to reference the actual render targets on the GPU. On the right is the layout for acquisition and update. The “Update Description” action attempts to update the GPU resource via another acquire</p>\n\
<p>It is possible to access the resource handle for color and depth render targets but not necessarily a depth+stencil target. For DirectX11, color and depth targets are returned as a reference to a view (ID3D11RenderTargetView) of a target. Depth+stencil targets are returned as depth stencil (ID3D11DepthStencilView) views. For OpenGL, color and depth targets are returned as references to textures (integer texture identifier). Depth+stencil targets are not accessible. It is possible to modify the contents of the target directly but is generally not recommended. Plug-ins should never delete the underlying resource.</p>\n\
<p>To avoid confusion, the legacy interface, which is also called <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTarget\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;}]\">MRenderTarget</a></span> differs from the construct discussed here which is in the <span class=\'code\'>MHWRender</span> namespace (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MRenderTarget\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../../&quot;}]\">MHWRender::MRenderTarget</a></span>). The previous definition is simply a wrapper around a viewport OpenGL context and has no relation to this framework.</p>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";