var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: splitUVCmd/polyModifierCmd.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'split_u_v_cmd_2poly_modifier_cmd_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: splitUVCmd/polyModifierCmd.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">splitUVCmd/polyModifierCmd.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// File: polyModifierCmd.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MEL Command: polyModifierCmd</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Author: Lonnie Li</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* Includes */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;polyModifierCmd.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// General Includes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Function Sets</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericData.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* Macros */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// MCheckStatus (Debugging tool)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define MCheckStatus(status,message)         \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        if( MS::kSuccess != status ) {          \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            MString error(&quot;Status failed: &quot;);   \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            error += message;                   \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            MGlobal::displayError(error);       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            return status;                      \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        }</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define MCheckStatus(status,message)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// MAssert (Debugging tool)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define MAssert(state,message)                   \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        if( !state ) {                              \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            MString error(&quot;Assertion failed: &quot;);    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            error += message;                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            MGlobal::displayError(error);           \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            return;                                 \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        }</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define MAssert(state,message)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// MStatusAssert (Debugging tool)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define MStatusAssert(state,message)             \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        if( !state ) {                              \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            MString error(&quot;Assertion failed: &quot;);    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            error += message;                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            MGlobal::displayError(error);           \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            return MS::kFailure;                    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        }</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define MStatusAssert(state,message)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* polyModifierCmd Implementation */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">polyModifierCmd::polyModifierCmd()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDagPathInitialized = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    fModifierNodeTypeInitialized = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    fModifierNodeNameInitialized = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">polyModifierCmd::~polyModifierCmd()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Protected Methods //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::initModifierNode( <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"comment\">/* modifierNode */</span> )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Override this method in a derived class to set input attributes on the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      modifier node. If not overidden, the modifier node will remain in it&#39;s</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      default state upon construction.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The argument &#39;MObject modifierNode&#39;, is not used by this base class</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      implementation. However, it may be used by derived classes. To avoid</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      compiler warnings of unreferenced parameters, we comment out the parameter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      name.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::directModifier( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"comment\">/* mesh */</span> )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Override this method in a derived class to provide an implementation for</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      directly modifying the mesh (writing on the mesh itself). This method is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      only called in the case where history does not exist and history is turned</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      off (ie. DG operations are not desirable).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The argument &#39;MObject mesh&#39;, is not used by this base class implementation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      However, it may be used by derived classes. To avoid compiler warnings</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of unreferenced parameters, we comment out the parameter name.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::doModifyPoly()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( isCommandDataValid() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the state of the polyMesh</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        collectNodeState();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !fHasHistory &amp;&amp; !fHasRecordHistory )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNode = fDagPath.node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Pre-process the mesh - Cache old mesh (including tweaks, if applicable)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            cacheMeshData();</div>\n\
<div class=\"line\">            cacheMeshTweaks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Call the directModifier</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            status = directModifier( meshNode );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNode;</div>\n\
<div class=\"line\">            createModifierNode( modifierNode );</div>\n\
<div class=\"line\">            initModifierNode( modifierNode );</div>\n\
<div class=\"line\">            status = connectNodes( modifierNode );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::redoModifyPoly()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !fHasHistory &amp;&amp; !fHasRecordHistory )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNode = fDagPath.node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Call the directModifier - No need to pre-process the mesh data again</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//                           since we already have it.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = directModifier( meshNode );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Call the redo on the DG and DAG modifiers</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !fHasHistory )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fDagModifier.doIt();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        status = fDGModifier.doIt();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::undoModifyPoly()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !fHasHistory &amp;&amp; !fHasRecordHistory )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status = undoDirectModifier();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fDGModifier.undoIt();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// undoCachedMesh must be called before undoTweakProcessing because </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// undoCachedMesh copies the original mesh *without* tweaks back onto</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the existing mesh. Any changes done before the copy will be lost.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !fHasHistory )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = undoCachedMesh();</div>\n\
<div class=\"line\">            MCheckStatus( status, <span class=\"stringliteral\">&quot;undoCachedMesh&quot;</span> );</div>\n\
<div class=\"line\">            fDagModifier.undoIt();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        status = undoTweakProcessing();</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;undoTweakProcessing&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Private Methods //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> polyModifierCmd::isCommandDataValid()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> valid = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check the validity of the DAG path</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fDagPathInitialized )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fDagPath.extendToShape();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !fDagPath.isValid() || fDagPath.apiType() != <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a> )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            valid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        valid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check the validity of the Modifier node type/name</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !fModifierNodeTypeInitialized &amp;&amp; !fModifierNodeNameInitialized )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        valid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> valid;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyModifierCmd::collectNodeState()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Collect node state information on the given polyMeshShape</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// - HasHistory (Construction History exists)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// - HasTweaks</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// - HasRecordHistory (Construction History is turned on)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fDagPath.extendToShape();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNodeShape = fDagPath.node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn;</div>\n\
<div class=\"line\">    depNodeFn.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( meshNodeShape );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> inMeshPlug = depNodeFn.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;inMesh&quot;</span> , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    fHasHistory = inMeshPlug.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tweaks exist only if the multi &quot;pnts&quot; attribute contains plugs</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// which contain non-zero tweak values. Use false, until proven true</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// search algorithm.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fHasTweaks = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> tweakPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;pnts&quot;</span> , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !tweakPlug.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// ASSERT: tweakPlug should be an array plug!</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        MAssert( (tweakPlug.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>()),</div>\n\
<div class=\"line\">                 <span class=\"stringliteral\">&quot;tweakPlug.isArray() -- tweakPlug is not an array plug&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> tweak;</div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> tweakData;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numElements = tweakPlug.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; numElements; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            tweak = tweakPlug.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a468f76143ddee02de717f75b2fc0de9d\">elementByPhysicalIndex</a>( i, &amp;status );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( status == MS::kSuccess &amp;&amp; !tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                getFloat3PlugValue( tweak, tweakData );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( 0 != tweakData.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a> ||</div>\n\
<div class=\"line\">                    0 != tweakData.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a> ||</div>\n\
<div class=\"line\">                    0 != tweakData.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a> )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fHasTweaks = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> result;</div>\n\
<div class=\"line\">    <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>( <span class=\"stringliteral\">&quot;constructionHistory -q -tgl&quot;</span>, result );</div>\n\
<div class=\"line\">    fHasRecordHistory = (0 != result);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::createModifierNode( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; modifierNode )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fModifierNodeTypeInitialized || fModifierNodeNameInitialized )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fModifierNodeTypeInitialized )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            modifierNode = fDGModifier.createNode( fModifierNodeType, &amp;status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( fModifierNodeNameInitialized )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            modifierNode = fDGModifier.createNode( fModifierNodeName, &amp;status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Check to make sure that we have a modifier node of the appropriate type.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Requires an inMesh and outMesh attribute.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn( modifierNode );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> inMeshAttr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> outMeshAttr;</div>\n\
<div class=\"line\">        inMeshAttr = depNodeFn.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;inMesh&quot;</span> );</div>\n\
<div class=\"line\">        outMeshAttr = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( inMeshAttr.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() || outMeshAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            displayError( <span class=\"stringliteral\">&quot;Invalid Modifier Node: inMesh and outMesh attributes are required.&quot;</span> );</div>\n\
<div class=\"line\">            status = MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::processMeshNode( modifyPolyData&amp; data )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Declare our function sets. Use MFnDagNode here so</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we can retrieve the parent transform.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the DAG path to retrieve our mesh shape node. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    data.meshNodeShape = fDagPath.node();</div>\n\
<div class=\"line\">    dagNodeFn.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>( data.meshNodeShape );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// ASSERT: meshNodeShape node should have a parent transform!</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    MStatusAssert( (0 &lt; dagNodeFn.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a36d4f04f316d615a7d0af771a91016b9\">parentCount</a>()),</div>\n\
<div class=\"line\">                   <span class=\"stringliteral\">&quot;0 &lt; dagNodeFn.parentCount() -- meshNodeshape has no parent transform&quot;</span> );</div>\n\
<div class=\"line\">    data.meshNodeTransform = dagNodeFn.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a7ad7d0a5ce859ac89e4bdfcc3148eb94\">parent</a>(0);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    data.meshNodeDestPlug = dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;inMesh&quot;</span> , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    data.meshNodeDestAttr = data.meshNodeDestPlug.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::processUpstreamNode( modifyPolyData&amp; data )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Declare our function sets - Although dagNodeFn derives from depNodeFn, we need</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                             both since dagNodeFn can only refer to DAG objects.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                             We will use depNodeFn for all times other when dealing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                             with the DAG.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   depNodeFn;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>          dagNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the selected node&#39;s plug connections to find the upstream plug.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Since we are looking at the selected node&#39;s inMesh attribute, it will</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// always have only one connection coming in if it has history, and none</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// otherwise.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If there is no history, copy the selected node and place it ahead of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// modifierNode as the new upstream node so that the modifierNode has an</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// input mesh to operate on.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> tempPlugArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fHasHistory )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Since we have history, look for what connections exist on the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// meshNode &quot;inMesh&quot; plug. &quot;inMesh&quot; plugs should only ever have one</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// connection.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        data.meshNodeDestPlug.connectedTo( tempPlugArray, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// ASSERT: Only one connection should exist on meshNodeShape.inMesh!</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        MStatusAssert( (tempPlugArray.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1),</div>\n\
<div class=\"line\">                       <span class=\"stringliteral\">&quot;tempPlugArray.length() == 1 -- 0 or &gt;1 connections on meshNodeShape.inMesh&quot;</span> );</div>\n\
<div class=\"line\">        data.upstreamNodeSrcPlug = tempPlugArray[0];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Construction history only deals with shapes, so we can grab the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// upstreamNodeShape off of the source plug.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        data.upstreamNodeShape = data.upstreamNodeSrcPlug.node();</div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( data.upstreamNodeShape );</div>\n\
<div class=\"line\">        data.upstreamNodeSrcAttr = data.upstreamNodeSrcPlug.attribute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Disconnect the upstream node and the selected node, so we can</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// replace them with our own connections below.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        fDGModifier.disconnect( data.upstreamNodeSrcPlug,</div>\n\
<div class=\"line\">                                data.meshNodeDestPlug );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>    <span class=\"comment\">// No History (!fHasHistory)</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Use the DAG node function set to duplicate the shape of the meshNode.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The duplicate method will return an MObject handle to the transform</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// of the duplicated shape, so traverse the dag to locate the shape. Store</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this duplicate shape as our &quot;upstream&quot; node to drive the input for the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// modifierNode.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>( data.meshNodeShape );</div>\n\
<div class=\"line\">        data.upstreamNodeTransform = dagNodeFn.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#ac1abc89bd329c4b2d1794cc8b971ea7b\">duplicate</a>( <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>( data.upstreamNodeTransform );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Ensure that our upstreamNode is pointing to a shape.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        MStatusAssert( (0 &lt; dagNodeFn.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a7c6cdc0f5380b205fcf6e524e307b47f\">childCount</a>()),</div>\n\
<div class=\"line\">                       <span class=\"stringliteral\">&quot;0 &lt; dagNodeFn.childCount() -- Duplicate meshNode transform has no shape.&quot;</span> );</div>\n\
<div class=\"line\">        data.upstreamNodeShape = dagNodeFn.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#aaba05ce0a6791c69b8c850afaeb3bf67\">child</a>(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Re-parent the upstreamNodeShape under our original transform</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = fDagModifier.reparentNode( data.upstreamNodeShape, data.meshNodeTransform );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;reparentNode&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Perform the DAG re-parenting</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Note: This reparent must be performed before the deleteNode() is called.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//       See polyModifierCmd.h (see definition of fDagModifier) for more details.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = fDagModifier.doIt();</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;fDagModifier.doIt()&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Mark the upstreamNodeShape (the original shape) as an intermediate object</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// (making it invisible to the user)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>( data.upstreamNodeShape );</div>\n\
<div class=\"line\">        dagNodeFn.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a80b189c417a52f8ce696b0aa978a72a6\">setIntermediateObject</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the upstream node source attribute</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        data.upstreamNodeSrcAttr = dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span> );</div>\n\
<div class=\"line\">        data.upstreamNodeSrcPlug = dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove the duplicated transform node (clean up)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = fDagModifier.deleteNode( data.upstreamNodeTransform );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;deleteNode&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Perform the DAG delete node</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Note: This deleteNode must be performed after the reparentNode() method is</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//       completed. See polyModifierCmd.h (see definition of fDagModifier) for</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//       details.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = fDagModifier.doIt();</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;fDagModifier.doIt()&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Cache the DAG path to the duplicate shape</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        dagNodeFn.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#adfb40b1f56af23ad94c4ca77c9a147b5\">getPath</a>( fDuplicateDagPath );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::processModifierNode( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNode,</div>\n\
<div class=\"line\">                                              modifyPolyData&amp; data )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn ( modifierNode );</div>\n\
<div class=\"line\">    data.modifierNodeSrcAttr = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span> );</div>\n\
<div class=\"line\">    data.modifierNodeDestAttr = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;inMesh&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::processTweaks( modifyPolyData&amp; data )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear tweak undo information (to be rebuilt)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fTweakIndexArray.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    fTweakVectorArray.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Extract the tweaks and place them into a polyTweak node. This polyTweak node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// will be placed ahead of the modifier node to maintain the order of operations.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Special care must be taken into recreating the tweaks:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      1) Copy tweak info (including connections!)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      2) Remove tweak info from both meshNode and a duplicate meshNode (if applicable)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      3) Cache tweak info for undo operations</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fHasTweaks )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Declare our function sets</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Declare our attributes and plugs</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   meshTweakPlug;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   upstreamTweakPlug;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tweakNodeTweakAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Declare our tweak processing variables</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>               tweak;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>               tweakChild;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             tweakData;</div>\n\
<div class=\"line\">        <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>        tweakDataArray;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>        tweakVector;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>           tweakSrcConnectionCountArray;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>          tweakSrcConnectionPlugArray;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>           tweakDstConnectionCountArray;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>          tweakDstConnectionPlugArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>          tempPlugArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> i;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> j;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> k;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the tweak node and get its attributes</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        data.tweakNode = fDGModifier.createNode( <span class=\"stringliteral\">&quot;polyTweak&quot;</span> );</div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( data.tweakNode );</div>\n\
<div class=\"line\">        data.tweakNodeSrcAttr = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;output&quot;</span> );</div>\n\
<div class=\"line\">        data.tweakNodeDestAttr = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;inputPolymesh&quot;</span> );</div>\n\
<div class=\"line\">        tweakNodeTweakAttr = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( <span class=\"stringliteral\">&quot;tweak&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( data.meshNodeShape );</div>\n\
<div class=\"line\">        meshTweakPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;pnts&quot;</span> , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// ASSERT: meshTweakPlug should be an array plug!</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        MStatusAssert( (meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>()),</div>\n\
<div class=\"line\">                       <span class=\"stringliteral\">&quot;meshTweakPlug.isArray() -- meshTweakPlug is not an array plug&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> numElements = meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Gather meshTweakPlug data</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; numElements; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// MPlug::numElements() only returns the number of physical elements</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// in the array plug. Thus we must use elementByPhysical index when using</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the index i.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            tweak = meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a468f76143ddee02de717f75b2fc0de9d\">elementByPhysicalIndex</a>(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the method fails, the element is NULL. Only append the index</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// if it is a valid plug.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Cache the logical index of this element plug</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> logicalIndex = tweak.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Collect tweak data and cache the indices and float vectors</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                tweak.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( tweakData );</div>\n\
<div class=\"line\">                tweakDataArray.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a3694392863ba632bca5d76cbbf190ef5\">append</a>( tweakData );</div>\n\
<div class=\"line\">                getFloat3PlugValue( tweak, tweakVector );</div>\n\
<div class=\"line\">                fTweakIndexArray.append( logicalIndex );</div>\n\
<div class=\"line\">                fTweakVectorArray.append( tweakVector );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Collect tweak connection data</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Parse down to the deepest level of the plug tree and check</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// for connections - look at the child nodes of the element plugs.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// If any connections are found, record the connection and disconnect</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// it.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// ASSERT: The element plug should be compound!</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                MStatusAssert( (tweak.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a403059f865d94140dff6a37d11d6cb7a\">isCompound</a>()),</div>\n\
<div class=\"line\">                               <span class=\"stringliteral\">&quot;tweak.isCompound() -- Element tweak plug is not compound&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> numChildren = tweak.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a551981a427bd12471416599084791113\">numChildren</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>( j = 0; j &lt; numChildren; j++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    tweakChild = tweak.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(j);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( tweakChild.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>() )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Get all connections with this plug as source, if they exist</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        tempPlugArray.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( tweakChild.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>( tempPlugArray, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span> ) )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span> numSrcConnections = tempPlugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                            tweakSrcConnectionCountArray.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( numSrcConnections );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span>( k = 0; k &lt; numSrcConnections; k++ )</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                tweakSrcConnectionPlugArray.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a12338b7a1987007e931b031646c9b4be\">append</a>( tempPlugArray[k] );</div>\n\
<div class=\"line\">                                fDGModifier.disconnect( tweakChild, tempPlugArray[k] );</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            tweakSrcConnectionCountArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(0);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Get the connection with this plug as destination, if it exists</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        tempPlugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( tweakChild.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>( tempPlugArray, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span> ) )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// ASSERT: tweakChild should only have one connection as destination!</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                            MStatusAssert( (tempPlugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1),</div>\n\
<div class=\"line\">                                           <span class=\"stringliteral\">&quot;tempPlugArray.length() == 1 -- 0 or &gt;1 connections on tweakChild&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            tweakDstConnectionCountArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(1);</div>\n\
<div class=\"line\">                            tweakDstConnectionPlugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a12338b7a1987007e931b031646c9b4be\">append</a>( tempPlugArray[0] );</div>\n\
<div class=\"line\">                            fDGModifier.disconnect( tempPlugArray[0], tweakChild );</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            tweakDstConnectionCountArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(0);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        tweakSrcConnectionCountArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(0);</div>\n\
<div class=\"line\">                        tweakDstConnectionCountArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Apply meshTweakPlug data to our polyTweak node</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> polyTweakPlug( data.tweakNode, tweakNodeTweakAttr );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> numTweaks = fTweakIndexArray.length();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> srcOffset = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> dstOffset = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; numTweaks; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Apply tweak data</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            tweak = polyTweakPlug.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>( fTweakIndexArray[i] );</div>\n\
<div class=\"line\">            tweak.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( tweakDataArray[i] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// ASSERT: Element plug should be compound!</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            MStatusAssert( (tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a403059f865d94140dff6a37d11d6cb7a\">isCompound</a>()),</div>\n\
<div class=\"line\">                           <span class=\"stringliteral\">&quot;tweak.isCompound() -- Element plug, &#39;tweak&#39;, is not compound&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> numChildren = tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a551981a427bd12471416599084791113\">numChildren</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( j = 0; j &lt; numChildren; j++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                tweakChild = tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(j);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply tweak source connection data</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( 0 &lt; tweakSrcConnectionCountArray[i*numChildren + j] )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>( k = 0;</div>\n\
<div class=\"line\">                         k &lt; (unsigned) tweakSrcConnectionCountArray[i*numChildren + j];</div>\n\
<div class=\"line\">                         k++ )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        fDGModifier.connect( tweakChild,</div>\n\
<div class=\"line\">                                             tweakSrcConnectionPlugArray[srcOffset] );</div>\n\
<div class=\"line\">                        srcOffset++;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                        </div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply tweak destination connection data</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( 0 &lt; tweakDstConnectionCountArray[i*numChildren + j] )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fDGModifier.connect( tweakDstConnectionPlugArray[dstOffset],</div>\n\
<div class=\"line\">                                         tweakChild );</div>\n\
<div class=\"line\">                    dstOffset++;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Now, set the tweak values on the meshNode(s) to zero (History dependent)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numDataFn;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> nullVector;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a NULL vector (0,0,0) using MFnNumericData to pass into the plug</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        numDataFn.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>( <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a> );</div>\n\
<div class=\"line\">        numDataFn.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a5a8685975c5472876e8e3558911a7b7b\">setData</a>( 0, 0, 0 );</div>\n\
<div class=\"line\">        nullVector = numDataFn.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; numTweaks; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Access using logical indices since they are the only plugs guaranteed</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// to hold tweak data.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            tweak = meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>( fTweakIndexArray[i] );</div>\n\
<div class=\"line\">            tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( nullVector );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Only have to clear the tweaks off the duplicate mesh if we do not have history</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and we want history.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !fHasHistory &amp;&amp; fHasRecordHistory )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( data.upstreamNodeShape );</div>\n\
<div class=\"line\">            upstreamTweakPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;pnts&quot;</span> , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !upstreamTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>( i = 0; i &lt; numTweaks; i++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    tweak = meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>( fTweakIndexArray[i] );</div>\n\
<div class=\"line\">                    tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( nullVector );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::connectNodes( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNode )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method connects up the modifier nodes, while accounting for DG factors</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      such as construction history and tweaks. The method has a series of steps which</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      it runs through to process nodes under varying circumstances:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      1) Gather meshNode connection data (ie. attributes and plugs)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      2) Gather upstreamNode data - This is history-dependent. If the node has history,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    an actual upstreamNode exists and that is used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    drive the input of our modifierNode.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    Otherwise, if the node does not have history, the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    meshNode is duplicated, set as an intermediate object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    and regarded as our new upstreamNode which will drive</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    the input of our modifierNode. The case with history</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    already has this duplicate meshNode at the top, driving</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    all other history nodes and serving as a reference</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    to the &quot;original state&quot; of the node before any</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    modifications.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      3) Gather modifierNode connection data</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      4) Process tweak data (if it exists) - This is history-dependent. If there is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             history, the tweak data is extracted and deleted</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             from the meshNode and encapsulated inside a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             polyTweak node. The polyTweak node is then</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             inserted ahead of the modifier node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             If there is no history, the same is done as</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             in the history case, except the tweaks are</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             deleted from the duplicate meshNode in addition</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                             to the actual meshNode.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      5) Connect the nodes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      6) Collapse/Bake nodes into the actual meshNode if the meshNode had no previous</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         construction history and construction history recording is turned off.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         (ie. (!fHasHistory &amp;&amp; !fHasRecordHistory) == true )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Declare our internal processing data structure (see polyModifierCmd.h for definition)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    modifyPolyData data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the mesh node, plugs and attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = processMeshNode( data );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;processMeshNode&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get upstream node, plugs and attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = processUpstreamNode( data );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;processUpstreamNode&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the modifierNode attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = processModifierNode( modifierNode,</div>\n\
<div class=\"line\">                         data );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;processModifierNode&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Process tweaks on the meshNode</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = processTweaks( data );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;processTweaks&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Connect the nodes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fHasTweaks )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> tweakDestPlug( data.tweakNode, data.tweakNodeDestAttr );</div>\n\
<div class=\"line\">        status = fDGModifier.connect( data.upstreamNodeSrcPlug, tweakDestPlug );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;upstream-tweak connect failed&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> tweakSrcPlug( data.tweakNode, data.tweakNodeSrcAttr );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> modifierDestPlug( modifierNode, data.modifierNodeDestAttr );</div>\n\
<div class=\"line\">        status = fDGModifier.connect( tweakSrcPlug, modifierDestPlug );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;tweak-modifier connect failed&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> modifierDestPlug( modifierNode, data.modifierNodeDestAttr );</div>\n\
<div class=\"line\">        status = fDGModifier.connect( data.upstreamNodeSrcPlug, modifierDestPlug );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;upstream-modifier connect failed&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> modifierSrcPlug( modifierNode, data.modifierNodeSrcAttr );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> meshDestAttr( data.meshNodeShape, data.meshNodeDestAttr );</div>\n\
<div class=\"line\">    status = fDGModifier.connect( modifierSrcPlug, meshDestAttr );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;modifier-mesh connect failed&quot;</span> );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    status = fDGModifier.doIt();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::cacheMeshData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNode = fDagPath.node();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dupMeshNode;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dupMeshNodeOutMeshPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Duplicate the mesh</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>( meshNode );</div>\n\
<div class=\"line\">    dupMeshNode = dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#ac1abc89bd329c4b2d1794cc8b971ea7b\">duplicate</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dupMeshDagPath;</div>\n\
<div class=\"line\">    <a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>( dupMeshNode, dupMeshDagPath );</div>\n\
<div class=\"line\">    dupMeshDagPath.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a658d9664035ff84ffefa217c0e45cc88\">extendToShape</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( dupMeshDagPath.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() );</div>\n\
<div class=\"line\">    dupMeshNodeOutMeshPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve outMesh&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the meshData</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = dupMeshNodeOutMeshPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( fMeshData );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve meshData&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Delete the duplicated node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d83d29ca400045849d777aecafda70c\">MGlobal::deleteNode</a>( dupMeshNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::cacheMeshTweaks()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear tweak undo information (to be rebuilt)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fTweakIndexArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    fTweakVectorArray.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Extract the tweaks and store them in our local tweak cache members</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fHasTweaks )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Declare our function sets</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNode = fDagPath.node();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   meshTweakPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Declare our tweak processing variables</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>               tweak;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>               tweakChild;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>             tweakData;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>        tweakDataArray;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>        tweakVector;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>          tempPlugArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( meshNode );</div>\n\
<div class=\"line\">        meshTweakPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;pnts&quot;</span> , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// ASSERT: meshTweakPlug should be an array plug!</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        MStatusAssert( (meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>()),</div>\n\
<div class=\"line\">                       <span class=\"stringliteral\">&quot;meshTweakPlug.isArray() -- meshTweakPlug is not an array plug&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> numElements = meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Gather meshTweakPlug data</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; numElements; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// MPlug::numElements() only returns the number of physical elements</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// in the array plug. Thus we must use elementByPhysical index when using</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the index i.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            tweak = meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a468f76143ddee02de717f75b2fc0de9d\">elementByPhysicalIndex</a>(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the method fails, the element is NULL. Only append the index</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// if it is a valid plug.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Cache the logical index of this element plug</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> logicalIndex = tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Collect tweak data and cache the indices and float vectors</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                getFloat3PlugValue( tweak, tweakVector );</div>\n\
<div class=\"line\">                fTweakIndexArray.append( logicalIndex );</div>\n\
<div class=\"line\">                fTweakVectorArray.append( tweakVector );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::undoCachedMesh()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Only need to restore the cached mesh if there was no history. Also</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// check to make sure that we are in the record history state.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    MStatusAssert( (fHasRecordHistory), <span class=\"stringliteral\">&quot;fHasRecordHistory == true&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !fHasHistory )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> meshNodeName;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNodeShape;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   meshNodeDestPlug;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   meshNodeOutMeshPlug;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dupMeshNodeShape;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   dupMeshNodeSrcPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        meshNodeShape = fDagPath.node();</div>\n\
<div class=\"line\">        dupMeshNodeShape = fDuplicateDagPath.node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( meshNodeShape );</div>\n\
<div class=\"line\">        meshNodeName = depNodeFn.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">        meshNodeDestPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;inMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve inMesh&quot;</span> );</div>\n\
<div class=\"line\">        meshNodeOutMeshPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve outMesh&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( dupMeshNodeShape );</div>\n\
<div class=\"line\">        dupMeshNodeSrcPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve outMesh&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// For the case with tweaks, we cannot write the mesh directly back onto</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the cachedInMesh, since the shape can have out of date information from the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// cachedInMesh, thus we temporarily connect the duplicate mesh shape to the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// mesh shape and force a DG evaluation.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// For the case without tweaks, we can simply write onto the outMesh, since</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the shape relies solely on an outMesh when there is no history nor tweaks.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fHasTweaks )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> dgModifier;</div>\n\
<div class=\"line\">            dgModifier.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( dupMeshNodeSrcPlug, meshNodeDestPlug );</div>\n\
<div class=\"line\">            status = dgModifier.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not connect dupMeshNode -&gt; meshNode&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Need to force a DG evaluation now that the input has been changed.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cmd( <span class=\"stringliteral\">&quot;dgeval -src &quot;</span> );</div>\n\
<div class=\"line\">            cmd += meshNodeName;</div>\n\
<div class=\"line\">            cmd += <span class=\"stringliteral\">&quot;.inMesh&quot;</span>;</div>\n\
<div class=\"line\">            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>( cmd, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">            MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not force DG eval&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Disconnect the duplicate meshNode now</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            dgModifier.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a0789a8d51244cad0495abb2b811c39db\">undoIt</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshData;</div>\n\
<div class=\"line\">            status = dupMeshNodeSrcPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( meshData );</div>\n\
<div class=\"line\">            MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve meshData&quot;</span> );</div>\n\
<div class=\"line\">            status = meshNodeOutMeshPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( meshData );</div>\n\
<div class=\"line\">            MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not set outMesh&quot;</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::undoTweakProcessing()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fHasTweaks )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNodeShape;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   meshTweakPlug;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   tweak;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tweakData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        meshNodeShape = fDagPath.node();</div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( meshNodeShape );</div>\n\
<div class=\"line\">        meshTweakPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;pnts&quot;</span> , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MStatusAssert( (meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>()),</div>\n\
<div class=\"line\">                       <span class=\"stringliteral\">&quot;meshTweakPlug.isArray() -- meshTweakPlug is not an array plug&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> i;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> numElements = fTweakIndexArray.length();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; numElements; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            tweak = meshTweakPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>( fTweakIndexArray[i] );</div>\n\
<div class=\"line\">            getFloat3asMObject( fTweakVectorArray[i], tweakData );</div>\n\
<div class=\"line\">            tweak.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( tweakData );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// In the case of no history, the duplicate node shape will be disconnected on undo</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so, there is no need to undo the tweak processing on it.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::undoDirectModifier()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNodeFn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshNode = fDagPath.node();</div>\n\
<div class=\"line\">    depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( meshNode );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// For the case with tweaks, we cannot write the mesh directly back onto</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the cachedInMesh, since the shape can have out of date information from the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cachedInMesh. Thus we temporarily create an duplicate mesh, place our</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// old mesh on the outMesh attribute of our duplicate mesh, connect the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// duplicate mesh shape to the mesh shape, and force a DG evaluation.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For the case without tweaks, we can simply write onto the outMesh, since</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the shape relies solely on an outMesh when there is no history nor tweaks.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fHasTweaks )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Retrieve the inMesh and name of our mesh node (for the DG eval)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( meshNode );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> meshNodeInMeshPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;inMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve inMesh&quot;</span> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> meshNodeName = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Duplicate our current mesh</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>( meshNode );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dupMeshNode = dagNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#ac1abc89bd329c4b2d1794cc8b971ea7b\">duplicate</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The dagNodeFn::duplicate() returns a transform, but we need a shape</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so retrieve the DAG path and extend it to the shape.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dupMeshDagPath;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>( dupMeshNode, dupMeshDagPath );</div>\n\
<div class=\"line\">        dupMeshDagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a658d9664035ff84ffefa217c0e45cc88\">extendToShape</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Retrieve the outMesh of the duplicate mesh and set our mesh data back</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// on it.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( dupMeshDagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dupMeshNodeOutMeshPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve outMesh&quot;</span> );</div>\n\
<div class=\"line\">        status = dupMeshNodeOutMeshPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( fMeshData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Temporarily connect the duplicate mesh node to our mesh node</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> dgModifier;</div>\n\
<div class=\"line\">        dgModifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( dupMeshNodeOutMeshPlug, meshNodeInMeshPlug );</div>\n\
<div class=\"line\">        status = dgModifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not connect dupMeshNode -&gt; meshNode&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Need to force a DG evaluation now that the input has been changed.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cmd(<span class=\"stringliteral\">&quot;dgeval -src &quot;</span>);</div>\n\
<div class=\"line\">        cmd += meshNodeName;</div>\n\
<div class=\"line\">        cmd += <span class=\"stringliteral\">&quot;.inMesh&quot;</span>;</div>\n\
<div class=\"line\">        status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>( cmd, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not force DG eval&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Disconnect and delete the duplicate mesh node now</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        dgModifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a0789a8d51244cad0495abb2b811c39db\">undoIt</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d83d29ca400045849d777aecafda70c\">MGlobal::deleteNode</a>( dupMeshNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Restore the tweaks on the mesh</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = undoTweakProcessing();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Restore the original mesh by writing the old mesh data (fMeshData) back</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// onto the outMesh of our meshNode</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( meshNode );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> meshNodeOutMeshPlug = depNodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( <span class=\"stringliteral\">&quot;outMesh&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not retrieve outMesh&quot;</span> );</div>\n\
<div class=\"line\">        status = meshNodeOutMeshPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( fMeshData );</div>\n\
<div class=\"line\">        MCheckStatus( status, <span class=\"stringliteral\">&quot;Could not set meshData&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::getFloat3PlugValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> &amp; value )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve the value as an MObject</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> object;</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( <span class=\"keywordtype\">object</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Convert the MObject to a float3</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numDataFn( <span class=\"keywordtype\">object</span> );</div>\n\
<div class=\"line\">    numDataFn.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6b776208995f972692845a9f2809ff2f\">getData</a>( value[0], value[1], value[2] );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyModifierCmd::getFloat3asMObject( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> value, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span> )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Convert the float value into an MObject</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numDataFn;</div>\n\
<div class=\"line\">    numDataFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a> );</div>\n\
<div class=\"line\">    numDataFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a5a8685975c5472876e8e3558911a7b7b\">setData</a>( value[0], value[1], value[2] );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">object</span> = numDataFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";