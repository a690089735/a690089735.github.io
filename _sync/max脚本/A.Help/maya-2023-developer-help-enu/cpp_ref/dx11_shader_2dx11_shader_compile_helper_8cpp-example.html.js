var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: dx11Shader/dx11ShaderCompileHelper.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'dx11_shader_2dx11_shader_compile_helper_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: dx11Shader/dx11ShaderCompileHelper.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">dx11Shader/dx11ShaderCompileHelper.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &gt;= 1700</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable: 4005 )</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSceneMessage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderCompileHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderStrings.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Includes for DX11</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define WIN32_LEAN_AND_MEAN</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3d11.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &lt; 1700</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3dx11.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3dx11effect.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if USE_DIRECTXSDK_D3DX11EFFECTS</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Build against the DX SDK header</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #ifndef USE_BOOL</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define USE_BOOL // use BOOL instead of bool</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3dcompiler.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sys/stat.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;set&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;list&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>CDX11EffectCompileHelper</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CFileReferenceHelper</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolveFileName(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* fileName) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> setReferencePath(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> findFile(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* fileName) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> getSearchPaths() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> referencePath;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> CFileReferenceHelper::resolveFileName(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* fileName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">//Check if filename exists</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> currFileName(fileName);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> file = findFile(currFileName.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> hasFile = file.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasFile == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// lets extract the filename and try it again...</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> idx = currFileName.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a2f0c58e22c8c209d0ea924de9913993a\">rindex</a>(<span class=\"charliteral\">&#39;/&#39;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (idx == -1)</div>\n\
<div class=\"line\">                idx = currFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a2f0c58e22c8c209d0ea924de9913993a\">rindex</a>(<span class=\"charliteral\">&#39;\\\\&#39;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (idx != -1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                currFileName = currFileName.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>(idx+1,currFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()-1);</div>\n\
<div class=\"line\">                file = findFile(currFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> expandedFileName(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(fileName).expandEnvironmentVariablesAndTilde());</div>\n\
<div class=\"line\">            file = findFile(expandedFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> file;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> CFileReferenceHelper::setReferencePath(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        referencePath.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">        <span class=\"comment\">// split file path in filename path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// lets extract the filename and try it again...</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> idx = fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a2f0c58e22c8c209d0ea924de9913993a\">rindex</a>(<span class=\"charliteral\">&#39;/&#39;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (idx == -1)</div>\n\
<div class=\"line\">            idx = fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a2f0c58e22c8c209d0ea924de9913993a\">rindex</a>(<span class=\"charliteral\">&#39;\\\\&#39;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (idx != -1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            referencePath  = fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>(0,idx);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> CFileReferenceHelper::findFile(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* fileName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>stat statBuf;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name (fileName);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> fullyQualified = name.index(<span class=\"charliteral\">&#39;/&#39;</span>) == 0 || name.index(<span class=\"charliteral\">&#39;\\\\&#39;</span>) == 0 || name.index(<span class=\"charliteral\">&#39;:&#39;</span>) == 1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fullyQualified &amp;&amp; stat(name.asChar(), &amp;statBuf) != -1) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> name;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> path[MAX_PATH];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> searchPaths = getSearchPaths();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * psearchpath = searchPaths.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// not been found using a fully qualified path.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedName;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(name.index(<span class=\"charliteral\">&#39;/&#39;</span>) == 0 || name.index(<span class=\"charliteral\">&#39;\\\\&#39;</span>) == 0)</div>\n\
<div class=\"line\">            resolvedName = name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>(1, name.length() - 1);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            resolvedName = name;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (psearchpath &lt; searchPaths.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() + searchPaths.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * endpath = strchr(psearchpath,<span class=\"charliteral\">&#39;;&#39;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (endpath)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                strncpy(path,psearchpath, endpath - psearchpath);</div>\n\
<div class=\"line\">                path[endpath - psearchpath] = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                strcpy(path,psearchpath);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            psearchpath += strlen(path)+1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> fullPath = (path[0] == <span class=\"charliteral\">&#39;/&#39;</span> || path[0] == <span class=\"charliteral\">&#39;\\\\&#39;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (strlen(path) &gt; 2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fullPath = fullPath ||</div>\n\
<div class=\"line\">                    (path[1] == <span class=\"charliteral\">&#39;:&#39;</span> &amp;&amp;</div>\n\
<div class=\"line\">                    (path[2] == <span class=\"charliteral\">&#39;/&#39;</span> ||</div>\n\
<div class=\"line\">                    path[2] == <span class=\"charliteral\">&#39;\\\\&#39;</span>));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Add the path and the filename together to get the full path</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> file;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(path[strlen(path) - 1] != <span class=\"charliteral\">&#39;/&#39;</span>)</div>\n\
<div class=\"line\">                file = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(path) + <span class=\"stringliteral\">&quot;/&quot;</span> + resolvedName;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                file = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(path) + resolvedName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat(file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), &amp;statBuf) != -1) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> file;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> CFileReferenceHelper::getSearchPaths()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// Build a list of places we&#39;ll look for textures</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> searchPaths;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the standard Maya project paths</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> workspace;</div>\n\
<div class=\"line\">        <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;workspace -q -rd;&quot;</span>),workspace);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status == MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            searchPaths += workspace;</div>\n\
<div class=\"line\">            searchPaths += <span class=\"stringliteral\">&quot;;&quot;</span>;</div>\n\
<div class=\"line\">            searchPaths += workspace;</div>\n\
<div class=\"line\">            searchPaths += <span class=\"stringliteral\">&quot;/renderData/shaders&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> shadersRelativePath;</div>\n\
<div class=\"line\">            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;workspace -fre shaders&quot;</span>),shadersRelativePath);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(status== MS::kSuccess)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                searchPaths += <span class=\"stringliteral\">&quot;;&quot;</span>;</div>\n\
<div class=\"line\">                searchPaths += workspace;</div>\n\
<div class=\"line\">                searchPaths += shadersRelativePath;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(referencePath.length() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(searchPaths.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                searchPaths += <span class=\"stringliteral\">&quot;;&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            searchPaths += referencePath;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">char</span> * dx11ShaderRoot = getenv(<span class=\"stringliteral\">&quot;DX11SHADER_ROOT&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dx11ShaderRoot)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(searchPaths.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                searchPaths += <span class=\"stringliteral\">&quot;;&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            searchPaths += dx11ShaderRoot;</div>\n\
<div class=\"line\">            searchPaths += <span class=\"stringliteral\">&quot;;&quot;</span>;</div>\n\
<div class=\"line\">            searchPaths += dx11ShaderRoot;</div>\n\
<div class=\"line\">            searchPaths += <span class=\"stringliteral\">&quot;/shaders&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        searchPaths += <span class=\"stringliteral\">&quot;;&quot;</span>;</div>\n\
<div class=\"line\">        searchPaths += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;${MAYA_LOCATION}/presets/HLSL11/examples&quot;</span>).<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#af44d9587972be235b7d5ed4ec887cf0b\">expandEnvironmentVariablesAndTilde</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> searchPaths;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CIncludeHelper: <span class=\"keyword\">public</span> ID3D10Include, <span class=\"keyword\">public</span> CFileReferenceHelper</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        STDMETHOD(Open)(D3D10_INCLUDE_TYPE IncludeType, LPCSTR pFileName, LPCVOID pParentData, LPCVOID *ppData, UINT *pBytes)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFileName = resolveFileName(pFileName);</div>\n\
<div class=\"line\">            <span class=\"comment\">// Read the file content</span></div>\n\
<div class=\"line\">            FILE* file = fopen(resolvedFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"stringliteral\">&quot;rb&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(file == NULL)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> E_FAIL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the file size</span></div>\n\
<div class=\"line\">            fseek(file, 0, SEEK_END);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">long</span> size = ftell(file);</div>\n\
<div class=\"line\">            fseek(file, 0, SEEK_SET);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the file content</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span> *buffer = <span class=\"keyword\">new</span> <span class=\"keywordtype\">char</span>[size];</div>\n\
<div class=\"line\">            fread(buffer, 1, size, file);</div>\n\
<div class=\"line\">            fclose(file);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Save the file data into ppData and the size into pBytes.</span></div>\n\
<div class=\"line\">            *ppData = buffer;</div>\n\
<div class=\"line\">            *pBytes = UINT(size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> S_OK;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        STDMETHOD(Close)(LPCVOID pData)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span>* pChar = (<span class=\"keywordtype\">char</span>*)pData;</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] pChar;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> S_OK;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    D3D10_SHADER_MACRO* getD3DMacros()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> D3D10_SHADER_MACRO macros[] = {  { <span class=\"stringliteral\">&quot;DIRECT3D_VERSION&quot;</span>, <span class=\"stringliteral\">&quot;0xb00&quot;</span> },</div>\n\
<div class=\"line\">                                                { <span class=\"stringliteral\">&quot;_MAYA_&quot;</span>, <span class=\"stringliteral\">&quot;1&quot;</span>},                   <span class=\"comment\">// similar to _3DSMAX_ and _XSI_ macros for other 3d apps</span></div>\n\
<div class=\"line\">                                                { <span class=\"stringliteral\">&quot;MAYA_DX11&quot;</span>, <span class=\"stringliteral\">&quot;1&quot;</span>},</div>\n\
<div class=\"line\">                                                { NULL, NULL } };</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> macros;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getShaderCompileFlags(<span class=\"keywordtype\">bool</span> useStrictness)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> flags = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Optionally enable debugging information to be stored, without reducing performance.</span></div>\n\
<div class=\"line\">        flags |= D3DCOMPILE_DEBUG;</div>\n\
<div class=\"line\">        flags |= D3DCOMPILE_SKIP_OPTIMIZATION;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(useStrictness)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Enable strictness</span></div>\n\
<div class=\"line\">            flags |= D3DCOMPILE_ENABLE_STRICTNESS;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Allow for backwards compatibility</span></div>\n\
<div class=\"line\">            flags |= D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> flags;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> effectHasHullShader(ID3DX11Effect* effect)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(effect)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            D3DX11_EFFECT_DESC effectDesc;</div>\n\
<div class=\"line\">            effect-&gt;GetDesc(&amp;effectDesc);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; effectDesc.Techniques; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ID3DX11EffectTechnique* technique = effect-&gt;GetTechniqueByIndex(i);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(technique &amp;&amp; technique-&gt;IsValid())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    D3DX11_TECHNIQUE_DESC techniqueDesc;</div>\n\
<div class=\"line\">                    technique-&gt;GetDesc(&amp;techniqueDesc);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0;j &lt; techniqueDesc.Passes;++j)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        ID3DX11EffectPass* pass = technique-&gt;GetPassByIndex(j); </div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(pass &amp;&amp; pass-&gt;IsValid())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            D3DX11_PASS_SHADER_DESC shaderDesc;</div>\n\
<div class=\"line\">                            memset(&amp;shaderDesc, 0, <span class=\"keyword\">sizeof</span>(D3DX11_PASS_SHADER_DESC));</div>\n\
<div class=\"line\">                            HRESULT hr = pass-&gt;GetHullShaderDesc(&amp;shaderDesc);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>(hr == S_OK &amp;&amp; shaderDesc.pShaderVariable &amp;&amp; shaderDesc.pShaderVariable-&gt;IsValid())</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// The most recent Effect11 library will return a pointer to an empty shader</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// so we need to make sure there is actual bytecode before we ask for the</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// shader itself.</span></div>\n\
<div class=\"line\">                                D3DX11_EFFECT_SHADER_DESC hullEffectDesc;</div>\n\
<div class=\"line\">                                memset(&amp;hullEffectDesc, 0, <span class=\"keyword\">sizeof</span>(D3DX11_EFFECT_SHADER_DESC));</div>\n\
<div class=\"line\">                                hr = shaderDesc.pShaderVariable-&gt;GetShaderDesc(shaderDesc.ShaderIndex, &amp;hullEffectDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (SUCCEEDED(hr) &amp;&amp; hullEffectDesc.BytecodeLength) <span class=\"comment\">// This will not work if Optimize() has been called.</span></div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    ID3D11HullShader* pHullShader = NULL;</div>\n\
<div class=\"line\">                                    shaderDesc.pShaderVariable-&gt;GetHullShader(shaderDesc.ShaderIndex, &amp;pHullShader);</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">if</span> (pHullShader)</div>\n\
<div class=\"line\">                                    {</div>\n\
<div class=\"line\">                                        <span class=\"comment\">//Found a hull shader</span></div>\n\
<div class=\"line\">                                        pHullShader-&gt;Release();</div>\n\
<div class=\"line\">                                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                                    }</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isValidEffectFile(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keywordtype\">bool</span>&amp; isCompiled)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> extension;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> idx = fileName.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(L<span class=\"charliteral\">&#39;.&#39;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(idx &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            extension = fileName.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>( idx+1, fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()-1 );</div>\n\
<div class=\"line\">            extension = extension.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        isCompiled = (extension == <span class=\"stringliteral\">&quot;fxo&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (extension == <span class=\"stringliteral\">&quot;fx&quot;</span> || extension == <span class=\"stringliteral\">&quot;fxo&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> pushError(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;errorLog, ID3DBlob* error)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* pMessage = (error &amp;&amp; error-&gt;GetBufferSize() &gt; 0) ? (<span class=\"keywordtype\">char</span>*) error-&gt;GetBufferPointer() : NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">        args.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fileName);</div>\n\
<div class=\"line\">        args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(pMessage));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kErrorEffectCompile, args );</div>\n\
<div class=\"line\">        errorLog += msg;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> pushError(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;errorLog, ID3DBlob* error)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* pMessage = (error &amp;&amp; error-&gt;GetBufferSize() &gt; 0) ? (<span class=\"keywordtype\">char</span>*) error-&gt;GetBufferPointer() : NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">        args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(pMessage));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kErrorEffectBuffer, args );</div>\n\
<div class=\"line\">        errorLog += msg;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    time_t fileTimeStamp(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>stat statBuf;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( stat(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), &amp;statBuf) != 0 )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> statBuf.st_mtime;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>EffectKey</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ID3D11Device* device;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName;</div>\n\
<div class=\"line\">        time_t timeStamp;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator&lt; (<span class=\"keyword\">const</span> EffectKey&amp; lhs, <span class=\"keyword\">const</span> EffectKey&amp; rhs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (lhs.device &lt;  rhs.device) ||</div>\n\
<div class=\"line\">               (lhs.device == rhs.device &amp;&amp; ( (lhs.timeStamp &lt;  rhs.timeStamp) ||</div>\n\
<div class=\"line\">                                              (lhs.timeStamp == rhs.timeStamp &amp;&amp; strcmp(lhs.fileName.asChar(), rhs.fileName.asChar()) &lt; 0) ) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MStringSorter {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> operator() (<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; lhs, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; rhs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> strcmp(lhs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), rhs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()) &lt; 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>EffectCollection</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ID3DX11Effect* acquire(dx11ShaderNode* node, ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName);</div>\n\
<div class=\"line\">        ID3DX11Effect* acquire(dx11ShaderNode* node, ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ID3DX11Effect* reference, ID3DX11Effect* source = NULL);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> release(dx11ShaderNode* node, ID3DX11Effect *effect, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> getNodesUsingEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ShaderNodeList &amp;nodes) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ID3DX11Effect* getReferenceEffectAndFileName(ID3DX11Effect *effect, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; EffectKey, ID3DX11Effect* &gt; Key2ReferenceEffectMap;</div>\n\
<div class=\"line\">        Key2ReferenceEffectMap key2ReferenceEffectMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::pair&lt; EffectKey, unsigned int &gt; EffectKeyCountPair;</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; ID3DX11Effect*, EffectKeyCountPair &gt; ReferenceCountMap;</div>\n\
<div class=\"line\">        ReferenceCountMap referenceCountMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; ID3DX11Effect*, ID3DX11Effect* &gt; Clone2ReferenceMap;</div>\n\
<div class=\"line\">        Clone2ReferenceMap clone2ReferenceMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We need to keep track of dx11ShaderNodes at all times,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// even when compilation failed and we have no ID3DX11Effect</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to deal with. This will allow the &quot;Reload&quot; button to work</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// after a shader file failed to compile.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::set&lt; dx11ShaderNode* &gt; NodeSet;</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; MString, NodeSet, MStringSorter &gt; Path2NodesMap;</div>\n\
<div class=\"line\">        Path2NodesMap path2NodesMap;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ID3DX11Effect* EffectCollection::acquire(dx11ShaderNode* node, ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ID3DX11Effect* effect = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        EffectKey key = { device, fileName, fileTimeStamp(fileName) } ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Find reference in cache</span></div>\n\
<div class=\"line\">        Key2ReferenceEffectMap::const_iterator it = key2ReferenceEffectMap.find(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(it != key2ReferenceEffectMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ID3DX11Effect* reference = it-&gt;second;</div>\n\
<div class=\"line\">            effect = acquire(node, device, fileName, reference);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ID3DX11Effect* EffectCollection::acquire(dx11ShaderNode* node, ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ID3DX11Effect* reference, ID3DX11Effect* source )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Keep track of fileName -&gt; node lookup, whenever the effect was loaded or not</span></div>\n\
<div class=\"line\">        path2NodesMap[fileName].insert(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( reference == NULL )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( source == NULL)</div>\n\
<div class=\"line\">            source = reference;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the reference in cache if not in yet.</span></div>\n\
<div class=\"line\">        EffectKey key = { device, fileName, fileTimeStamp(fileName) } ;</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Key2ReferenceEffectMap::const_iterator it = key2ReferenceEffectMap.find(key);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(it == key2ReferenceEffectMap.end()) {</div>\n\
<div class=\"line\">                key2ReferenceEffectMap.insert( std::make_pair(key, reference) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Clone effect</span></div>\n\
<div class=\"line\">        ID3DX11Effect* effect = NULL;</div>\n\
<div class=\"line\">        HRESULT hr = source-&gt;CloneEffect(0, &amp;effect);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( FAILED( hr ) || effect == NULL )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Increase the number of clone for this reference</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Equivalent to the number of time this effect is used</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ReferenceCountMap::iterator it = referenceCountMap.find(reference);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(it == referenceCountMap.end())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Not there yet, set count to 1 and register key</span></div>\n\
<div class=\"line\">                referenceCountMap.insert( std::make_pair(reference, std::make_pair(key, 1) ) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Already there add 1</span></div>\n\
<div class=\"line\">                ++(it-&gt;second.second);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Keep track of clone -&gt; reference lookup</span></div>\n\
<div class=\"line\">        clone2ReferenceMap.insert( std::make_pair(effect, reference) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> EffectCollection::release(dx11ShaderNode* node, ID3DX11Effect *effect, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (effect)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Clone2ReferenceMap::iterator it = clone2ReferenceMap.find(effect);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(it != clone2ReferenceMap.end())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ID3DX11Effect* reference = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                ReferenceCountMap::iterator it2 = referenceCountMap.find(reference);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(it2 != referenceCountMap.end())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// This was the last clone for this reference, we can release it</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(it2-&gt;second.second == 1)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        EffectKey &amp;key = it2-&gt;second.first;</div>\n\
<div class=\"line\">                        key2ReferenceEffectMap.erase(key);</div>\n\
<div class=\"line\">                        referenceCountMap.erase(it2);</div>\n\
<div class=\"line\">                        reference-&gt;Release();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        --(it2-&gt;second.second);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                clone2ReferenceMap.erase(it);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            effect-&gt;Release();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove this node from the fileName -&gt; nodes lookup</span></div>\n\
<div class=\"line\">        path2NodesMap[fileName].erase(node);</div>\n\
<div class=\"line\">        <span class=\"comment\">// No more not for this fileName, clear it</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (path2NodesMap[fileName].empty())</div>\n\
<div class=\"line\">            path2NodesMap.erase(fileName);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ID3DX11Effect* EffectCollection::getReferenceEffectAndFileName(ID3DX11Effect *effect, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        ID3DX11Effect* reference = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Clone2ReferenceMap::const_iterator it = clone2ReferenceMap.find(effect);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(it != clone2ReferenceMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            reference = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Key2ReferenceEffectMap::const_iterator it2 = key2ReferenceEffectMap.begin();</div>\n\
<div class=\"line\">            Key2ReferenceEffectMap::const_iterator it2End = key2ReferenceEffectMap.end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(; it2 != it2End; ++it2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(it2-&gt;second == reference)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fileName = it2-&gt;first.fileName;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> reference;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> EffectCollection::getNodesUsingEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ShaderNodeList &amp;nodes)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        Path2NodesMap::const_iterator itNodeSet = path2NodesMap.find(fileName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (itNodeSet != path2NodesMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> NodeSet&amp; nodeSet = itNodeSet-&gt;second;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (NodeSet::const_iterator itNode = nodeSet.begin(); itNode != nodeSet.end(); ++itNode)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                nodes.push_back(*itNode);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> EffectCollection gEffectCollection;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CompiledEffectCache {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Very basic LRU cache for effect files:</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        CompiledEffectCache();</div>\n\
<div class=\"line\">        ~CompiledEffectCache();</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> CompiledEffectCache* <span class=\"keyword\">get</span>();</div>\n\
<div class=\"line\">        ID3DX11Effect* find( ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> add(ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ID3DX11Effect* effect );</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>CacheData {</div>\n\
<div class=\"line\">            CacheData(ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ID3DX11Effect* effect, <span class=\"keywordtype\">int</span> firstAccess);</div>\n\
<div class=\"line\">            ~CacheData();</div>\n\
<div class=\"line\">            ID3D11Device* mDevice;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mFileName;</div>\n\
<div class=\"line\">            time_t mTimeStamp;</div>\n\
<div class=\"line\">            ID3DX11Effect* mEffect;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> mLastAccess;</div>\n\
<div class=\"line\">        <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">            CacheData(<span class=\"keyword\">const</span> CacheData&amp;);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> CacheData&amp; operator=(<span class=\"keyword\">const</span> CacheData&amp;);</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\">        std::list&lt;CacheData*&gt; mCached;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> mAccessClock;</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> kCacheSize = 8;</div>\n\
<div class=\"line\">        MCallbackId mExitCallback;</div>\n\
<div class=\"line\">        MCallbackId mFileNewCallback;</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> flushCache( <span class=\"keywordtype\">void</span> *data);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> CompiledEffectCache* sCachePtr;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CompiledEffectCache::CacheData::CacheData(ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ID3DX11Effect* effect, <span class=\"keywordtype\">int</span> firstAccess)</div>\n\
<div class=\"line\">        : mDevice(device)</div>\n\
<div class=\"line\">        , mFileName(fileName)</div>\n\
<div class=\"line\">        , mEffect(NULL)</div>\n\
<div class=\"line\">        , mLastAccess(firstAccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (effect)</div>\n\
<div class=\"line\">            effect-&gt;CloneEffect(0, &amp;mEffect);</div>\n\
<div class=\"line\">        mTimeStamp = fileTimeStamp(fileName);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CompiledEffectCache::CacheData::~CacheData()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mEffect)</div>\n\
<div class=\"line\">            mEffect-&gt;Release();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CompiledEffectCache::CompiledEffectCache() : mAccessClock(0) {</div>\n\
<div class=\"line\">        mExitCallback = <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa1efff7ad75eeef5a2ac9e3c0e890dbd0\">MSceneMessage::kMayaExiting</a>, CompiledEffectCache::flushCache );</div>\n\
<div class=\"line\">        mFileNewCallback = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaaf261bc0d5929af12c193ee3c6e451349\">MSceneMessage::kBeforeNew</a>, CompiledEffectCache::flushCache );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CompiledEffectCache::~CompiledEffectCache()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::list&lt;CacheData*&gt;::iterator itCache = mCached.begin();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; itCache != mCached.end(); ++itCache )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> *itCache;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>( mExitCallback );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>( mFileNewCallback );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> CompiledEffectCache::flushCache( <span class=\"keywordtype\">void</span> *data)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> sCachePtr;</div>\n\
<div class=\"line\">        sCachePtr = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CompiledEffectCache* CompiledEffectCache::get()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!sCachePtr)</div>\n\
<div class=\"line\">            sCachePtr = <span class=\"keyword\">new</span> CompiledEffectCache();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sCachePtr;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CompiledEffectCache* CompiledEffectCache::sCachePtr = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ID3DX11Effect* CompiledEffectCache::find( ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ID3DX11Effect* effect = NULL;</div>\n\
<div class=\"line\">        <span class=\"comment\">// For small caches, a linear search is fine.</span></div>\n\
<div class=\"line\">        std::list&lt;CacheData*&gt;::iterator itCache = mCached.begin();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; itCache != mCached.end(); ++itCache )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            CompiledEffectCache::CacheData *cacheItem(*itCache);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( cacheItem-&gt;mDevice == device &amp;&amp;</div>\n\
<div class=\"line\">                 cacheItem-&gt;mFileName == fileName &amp;&amp;</div>\n\
<div class=\"line\">                 cacheItem-&gt;mTimeStamp == fileTimeStamp(fileName) ) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                cacheItem-&gt;mLastAccess = ++mAccessClock;</div>\n\
<div class=\"line\">                cacheItem-&gt;mEffect-&gt;CloneEffect(0, &amp;effect);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> CompiledEffectCache::add(ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ID3DX11Effect* effect )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mCached.size() &gt; kCacheSize)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::list&lt;CacheData*&gt;::iterator itCache = mCached.begin();</div>\n\
<div class=\"line\">            std::list&lt;CacheData*&gt;::iterator oldestItem = itCache;</div>\n\
<div class=\"line\">            itCache++;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( ; itCache != mCached.end(); ++itCache )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( (*itCache)-&gt;mLastAccess &lt; (*oldestItem)-&gt;mLastAccess )</div>\n\
<div class=\"line\">                    oldestItem = itCache;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            CacheData* oldData(*oldestItem);</div>\n\
<div class=\"line\">            mCached.erase(oldestItem);</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> oldData;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        CacheData* newData(<span class=\"keyword\">new</span> CacheData(device, fileName, effect, ++mAccessClock));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (newData-&gt;mEffect)</div>\n\
<div class=\"line\">            mCached.push_back( newData );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> newData;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Remove effect from collection and also remove reference if it was the last effect corresponding to file path.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDX11EffectCompileHelper::releaseEffect(dx11ShaderNode* node, ID3DX11Effect* effect, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFileName = CDX11EffectCompileHelper::resolveShaderFileName(fileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    gEffectCollection.release(node, effect, resolvedFileName);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Get the absolute file path</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> CDX11EffectCompileHelper::resolveShaderFileName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keywordtype\">bool</span>* fileExists)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFileName = fileName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the fileName is absolute, no resolve needed, we keep the original full path</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#abe7742bc48c00e4bf3f7b3bbc7c468ae\">MFileObject::isAbsolutePath</a>(fileName) == <span class=\"keyword\">false</span> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        CIncludeHelper includeHelper;</div>\n\
<div class=\"line\">        resolvedFileName = includeHelper.resolveFileName(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fileExists != NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> file;</div>\n\
<div class=\"line\">        file.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>( resolvedFileName );</div>\n\
<div class=\"line\">        *fileExists = file.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#aa9100e4c626877b706ca9fc67a35c562\">exists</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> resolvedFileName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Load and compile a text shader file.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - The shader is first searched in the collection, if a match is found a clone is returned</span></div>\n\
<div class=\"line\"><span class=\"comment\">    and automatically added to the collection.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Else it&#39;s searched in the LRU, if found it will be cloned and added to the collection.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Finally if no match is found, the shader file is loaded and compiled, </span></div>\n\
<div class=\"line\"><span class=\"comment\">    and the effect is added to the collection as reference.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">ID3DX11Effect* CDX11EffectCompileHelper::build(dx11ShaderNode* node, ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;errorLog, <span class=\"keywordtype\">bool</span> useStrictness)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fileExits = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFileName = CDX11EffectCompileHelper::resolveShaderFileName(fileName, &amp;fileExits);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fileExits == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kErrorFileNotFound, resolvedFileName );</div>\n\
<div class=\"line\">        errorLog += msg;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> compiledEffect = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( isValidEffectFile(resolvedFileName, compiledEffect) == <span class=\"keyword\">false</span> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kErrorInvalidEffectFile, resolvedFileName );</div>\n\
<div class=\"line\">        errorLog += msg;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Acquire effect from collection if it was already loaded once and will return a clone</span></div>\n\
<div class=\"line\">    ID3DX11Effect *effect = gEffectCollection.acquire(node, device, resolvedFileName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( effect == NULL ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        effect = CompiledEffectCache::get()-&gt;find(device, resolvedFileName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( effect == NULL ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( resolvedFileName != fileName &amp;&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#abe7742bc48c00e4bf3f7b3bbc7c468ae\">MFileObject::isAbsolutePath</a>(fileName) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">                args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fileName);</div>\n\
<div class=\"line\">                args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(resolvedFileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = dx11ShaderStrings::getString( dx11ShaderStrings::kErrorAbsolutePathNotFound, args );</div>\n\
<div class=\"line\">                errorLog += msg;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            CIncludeHelper includeHelper;</div>\n\
<div class=\"line\">            includeHelper.setReferencePath(resolvedFileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ID3DBlob *shader = NULL;</div>\n\
<div class=\"line\">            ID3DBlob *error = NULL;</div>\n\
<div class=\"line\">            HRESULT hr = S_FALSE;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( compiledEffect )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                FILE* file = fopen(resolvedFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"stringliteral\">&quot;rb&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(file)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get the file size</span></div>\n\
<div class=\"line\">                    fseek(file, 0, SEEK_END);</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">long</span> size = ftell(file);</div>\n\
<div class=\"line\">                    fseek(file, 0, SEEK_SET);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get the file content</span></div>\n\
<div class=\"line\">                    hr = D3DCreateBlob(size, &amp;shader);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( SUCCEEDED( hr ) ) </div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        fread(shader-&gt;GetBufferPointer(), 1, size, file);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    fclose(file);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> compileFlags = getShaderCompileFlags(useStrictness);</div>\n\
<div class=\"line\">                D3D10_SHADER_MACRO* macros = getD3DMacros();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &lt; 1700</span></div>\n\
<div class=\"line\">                hr = D3DX11CompileFromFile(resolvedFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), macros, &amp;includeHelper, NULL, <span class=\"comment\">/*MSG0*/</span><span class=\"stringliteral\">&quot;fx_5_0&quot;</span>, compileFlags, 0, NULL, &amp;shader, &amp;error, NULL);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">                hr = D3DCompileFromFile(resolvedFileName.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ade6a9ba4bd9b9d2d0ae95b05a7f75522\">asWChar</a>(), macros, &amp;includeHelper, NULL, <span class=\"comment\">/*MSG0*/</span><span class=\"stringliteral\">&quot;fx_5_0&quot;</span>, compileFlags, 0, &amp;shader, &amp;error);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( FAILED( hr ) || shader == NULL )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                pushError(fileName, errorLog, error);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( shader )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                hr = D3DX11CreateEffectFromMemory(shader-&gt;GetBufferPointer(), shader-&gt;GetBufferSize(), 0, device, &amp;effect);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( FAILED( hr ) || effect == NULL )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    pushError(fileName, errorLog, error);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( shader ) {</div>\n\
<div class=\"line\">                shader-&gt;Release();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( compiledEffect == <span class=\"keyword\">false</span> &amp;&amp; useStrictness == <span class=\"keyword\">false</span> &amp;&amp; effect != NULL &amp;&amp; effectHasHullShader(effect) ) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// if the effect has a hull shader we need to recompile it</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// with strict flag otherwise it won&#39;t support the tesselation properly :</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// for example, the geometry may not be visible</span></div>\n\
<div class=\"line\">                effect-&gt;Release();</div>\n\
<div class=\"line\">                effect = CDX11EffectCompileHelper::build(node, device, fileName, errorLog, <span class=\"keyword\">true</span> <span class=\"comment\">/*useStrictness*/</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// return now, skip the add to cache, already done in build()</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Effect was compiled,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Add it to LRU cache</span></div>\n\
<div class=\"line\">            CompiledEffectCache::get()-&gt;add(device, resolvedFileName, effect);</div>\n\
<div class=\"line\">        }  <span class=\"comment\">// CompiledEffectCache::get()</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The effect was either found in the CompiledEffectCache or compiled,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Acquire effect from collection, will register the compiled effect as reference and will return a clone</span></div>\n\
<div class=\"line\">        effect = gEffectCollection.acquire(node, device, resolvedFileName, effect);</div>\n\
<div class=\"line\">    } <span class=\"comment\">// gEffectCollection.acquire()</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    During a duplicate, we already have an effect to use as reference.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    The source effect will be cloned, and the result added to the cache.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">ID3DX11Effect* CDX11EffectCompileHelper::build(dx11ShaderNode* node, ID3D11Device* device, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ID3DX11Effect* effectSource, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;errorLog)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFileName = CDX11EffectCompileHelper::resolveShaderFileName(fileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ID3DX11Effect *effect = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find effectSource in collection</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Will gives us the original reference effect for this effect and the resolved fileName.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> referenceResolvedFileName;</div>\n\
<div class=\"line\">    ID3DX11Effect *reference = gEffectCollection.getReferenceEffectAndFileName(effectSource, referenceResolvedFileName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(reference != NULL &amp;&amp; resolvedFileName == referenceResolvedFileName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Acquire effect from collection</span></div>\n\
<div class=\"line\">        effect = gEffectCollection.acquire(node, device, resolvedFileName, reference, effectSource);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Load a precompiled effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    The effect is not stored in any cache, as the loading of a compiled effect is already fast enough.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">ID3DX11Effect* CDX11EffectCompileHelper::build(dx11ShaderNode* node, ID3D11Device* device, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* buffer, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dataSize, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;errorLog, <span class=\"keywordtype\">bool</span> useStrictness)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> compileFlags = getShaderCompileFlags(useStrictness);</div>\n\
<div class=\"line\">    D3D10_SHADER_MACRO* macros = getD3DMacros();</div>\n\
<div class=\"line\">    CIncludeHelper includeHelper;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ID3DX11Effect *effect = NULL;</div>\n\
<div class=\"line\">    ID3DBlob *shader = NULL;</div>\n\
<div class=\"line\">    ID3DBlob *error = NULL;</div>\n\
<div class=\"line\">    HRESULT hr = S_FALSE;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &lt; 1700</span></div>\n\
<div class=\"line\">    hr = D3DX11CompileFromMemory((<span class=\"keywordtype\">char</span>*)buffer, dataSize, NULL, macros, &amp;includeHelper, <span class=\"stringliteral\">&quot;&quot;</span>, <span class=\"stringliteral\">&quot;fx_5_0&quot;</span>, compileFlags, 0, NULL, &amp;shader, &amp;error, NULL);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    hr = D3DCompile((<span class=\"keywordtype\">char</span>*)buffer, dataSize, NULL, macros, &amp;includeHelper, <span class=\"stringliteral\">&quot;&quot;</span>, <span class=\"stringliteral\">&quot;fx_5_0&quot;</span>, compileFlags, 0, &amp;shader, &amp;error);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( FAILED( hr ) || shader == NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        pushError(errorLog, error);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( shader )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hr = D3DX11CreateEffectFromMemory(shader-&gt;GetBufferPointer(), shader-&gt;GetBufferSize(), 0, device, &amp;effect);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( FAILED( hr ) || effect == NULL )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            pushError(errorLog, error);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( shader ) {</div>\n\
<div class=\"line\">        shader-&gt;Release();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( useStrictness == <span class=\"keyword\">false</span> &amp;&amp; effect != NULL &amp;&amp; effectHasHullShader(effect) ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// if the effect has a hull shader we need to recompile it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// with strict flag otherwise it won&#39;t support the tesselation properly :</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// for example, the geometry may not be visible</span></div>\n\
<div class=\"line\">        effect-&gt;Release();</div>\n\
<div class=\"line\">        effect = CDX11EffectCompileHelper::build(node, device, buffer, dataSize, errorLog, <span class=\"keyword\">true</span> <span class=\"comment\">/*useStrictness*/</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Get all the nodes that use the specified file shader.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    The collection keeps track of which shader is used by which nodes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDX11EffectCompileHelper::getNodesUsingEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, ShaderNodeList &amp;nodes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFileName = CDX11EffectCompileHelper::resolveShaderFileName(fileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    gEffectCollection.getNodesUsingEffect(resolvedFileName, nodes);</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";