var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcExport/MayaNurbsCurveWriter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_export_2_maya_nurbs_curve_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcExport/MayaNurbsCurveWriter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcExport/MayaNurbsCurveWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2014,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaNurbsCurveWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaTransformWriter.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// get all the nurbs curves from below the given dagpath.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the curve group is considered animated if at least one curve is animated</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> collectNurbsCurves(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;dagPath, <span class=\"keywordtype\">bool</span> iExcludeInvisible,</div>\n\
<div class=\"line\">        <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path_array.html\">MDagPathArray</a> &amp;dagPaths, <span class=\"keywordtype\">bool</span> &amp; oIsAnimated)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> itDag(<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>, <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a9366a44db1c93f593f8e65fcbec6a1b9\">MFn::kNurbsCurve</a>, &amp;stat);</div>\n\
<div class=\"line\">        stat = itDag.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#ac734f26ff1c92ecec3572a31f5e4435c\">reset</a>(dagPath, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a9366a44db1c93f593f8e65fcbec6a1b9\">MFn::kNurbsCurve</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stat == MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (;!itDag.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>();itDag.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> curvePath;</div>\n\
<div class=\"line\">                stat = itDag.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#adfb40b1f56af23ad94c4ca77c9a147b5\">getPath</a>(curvePath);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (stat == MS::kSuccess)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curve = curvePath.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( !util::isIntermediate(curve) &amp;&amp;</div>\n\
<div class=\"line\">                        curve.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a9366a44db1c93f593f8e65fcbec6a1b9\">MFn::kNurbsCurve</a>) &amp;&amp;</div>\n\
<div class=\"line\">                        (!iExcludeInvisible || util::isRenderable(curve)) )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        dagPaths.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path_array.html#abbf3846d2f5a5cfbf00043abce9408d9\">append</a>(curvePath);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"comment\">// don&#39;t bother checking the animated state if the curve</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// wasn&#39;t appended to the list</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// with the flag set to true, check the DagPath and its</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// parent.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Note since we&#39;re collecting a group of curves, and</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// if  even one is animated, the whole group will be,</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// so don&#39;t bother checking additional curves.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!oIsAnimated)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (util::isAnimated(curve, <span class=\"keyword\">true</span>))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oIsAnimated = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curveXform(curvePath.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a13f88add2c589379a22d5aaaa4a39fb4\">transform</a>());</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (util::isAnimated(curveXform, <span class=\"keyword\">true</span>))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            oIsAnimated = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }  <span class=\"comment\">// end of function collectNurbsCurves</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaNurbsCurveWriter::MayaNurbsCurveWriter(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; iDag,</div>\n\
<div class=\"line\">    Alembic::Abc::OObject &amp; iParent, Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iIsCurveGrp, <span class=\"keyword\">const</span> JobArgs &amp; iArgs) :</div>\n\
<div class=\"line\">    mIsAnimated(false), mRootDagPath(iDag), mIsCurveGrp(iIsCurveGrp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDepNode(iDag.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), &amp;stat);</div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = fnDepNode.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mIsCurveGrp)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        collectNurbsCurves(mRootDagPath, iArgs.excludeInvisible,</div>\n\
<div class=\"line\">            mNurbsCurves, mIsAnimated);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// if no curves were found bail early</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mNurbsCurves.length() == 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curve = iDag.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iTimeIndex != 0 &amp;&amp; util::isAnimated(curve))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mIsAnimated = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            iTimeIndex = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    name = util::stripNamespaces(name, iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OCurves obj(iParent, name.asChar(), iTimeIndex);</div>\n\
<div class=\"line\">    mSchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">    Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(fnDepNode, iArgs))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cp = mSchema.getArbGeomParams();</div>\n\
<div class=\"line\">        up = mSchema.getUserProperties();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, fnDepNode,</div>\n\
<div class=\"line\">        iTimeIndex, iArgs, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!mIsAnimated || iArgs.setFirstAnimShape)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        write();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> MayaNurbsCurveWriter::getNumCVs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mCVCount;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> MayaNurbsCurveWriter::getNumCurves()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mIsCurveGrp)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mNurbsCurves.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MayaNurbsCurveWriter::isAnimated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mIsAnimated;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaNurbsCurveWriter::write()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OCurvesSchema::Sample samp;</div>\n\
<div class=\"line\">    samp.setBasis(Alembic::AbcGeom::kBsplineBasis);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    mCVCount = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if inheritTransform is on and the curve group is animated,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// bake the cv positions in the world space</span></div>\n\
<div class=\"line\">    <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> exclusiveMatrixInv = mRootDagPath.exclusiveMatrixInverse(&amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t numCurves = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mIsCurveGrp)</div>\n\
<div class=\"line\">        numCurves = mNurbsCurves.length();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; nVertices(numCurves);</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; points;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; width;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; knots;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::uint8_t&gt; orders(numCurves);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> transformMatrix;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useConstWidth = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dep(mRootDagPath.transform());</div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> constWidthPlug = dep.findPlug(<span class=\"stringliteral\">&quot;width&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!constWidthPlug.isNull())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        useConstWidth = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        width.push_back(constWidthPlug.asFloat());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numCurves; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html\">MFnNurbsCurve</a> curve;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mIsCurveGrp)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            curve.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>(mNurbsCurves[i]);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> inclusiveMatrix = mNurbsCurves[i].inclusiveMatrix(&amp;stat);</div>\n\
<div class=\"line\">            transformMatrix = inclusiveMatrix*exclusiveMatrixInv;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            curve.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>(mRootDagPath.node());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (i == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (curve.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a6abb902d5598dcc3d6e1bea8f975ad7f\">form</a>() == <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsCurve::kOpen</a>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                samp.setWrap(Alembic::AbcGeom::kNonPeriodic);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                samp.setWrap(Alembic::AbcGeom::kPeriodic);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (curve.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a1bbe5d3f656061c027d19267402870ba\">degree</a>() == 3)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                samp.setType(Alembic::AbcGeom::kCubic);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (curve.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a1bbe5d3f656061c027d19267402870ba\">degree</a>() == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                samp.setType(Alembic::AbcGeom::kLinear);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                samp.setType(Alembic::AbcGeom::kVariableOrder);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (curve.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a6abb902d5598dcc3d6e1bea8f975ad7f\">form</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsCurve::kOpen</a>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                samp.setWrap(Alembic::AbcGeom::kNonPeriodic);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ((samp.getType() == Alembic::AbcGeom::kCubic &amp;&amp;</div>\n\
<div class=\"line\">                curve.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a1bbe5d3f656061c027d19267402870ba\">degree</a>() != 3) ||</div>\n\
<div class=\"line\">                (samp.getType() == Alembic::AbcGeom::kLinear &amp;&amp;</div>\n\
<div class=\"line\">                curve.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a1bbe5d3f656061c027d19267402870ba\">degree</a>() != 1))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                samp.setType(Alembic::AbcGeom::kVariableOrder);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        orders[i] = <span class=\"keyword\">static_cast&lt;</span>Alembic::Util::uint8_t<span class=\"keyword\">&gt;</span>(curve.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a1bbe5d3f656061c027d19267402870ba\">degree</a>() + 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Util::int32_t numCVs = curve.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#addc4a2b6312ad1c7265478f2680b7566\">numCVs</a>(&amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> cvArray;</div>\n\
<div class=\"line\">        stat = curve.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a99e74e29456de640e007aec19f631824\">getCVs</a>(cvArray, <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8ad74f4c7c6562dc3f8339a8bba2d28dd0\">MSpace::kObject</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mCVCount += numCVs;</div>\n\
<div class=\"line\">        nVertices[i] = numCVs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (Alembic::Util::int32_t j = 0; j &lt; numCVs; j++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> transformdPt;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mIsCurveGrp)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                transformdPt = cvArray[j]*transformMatrix;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                transformdPt = cvArray[j];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            points.push_back(static_cast&lt;float&gt;(transformdPt.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>));</div>\n\
<div class=\"line\">            points.push_back(static_cast&lt;float&gt;(transformdPt.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>));</div>\n\
<div class=\"line\">            points.push_back(static_cast&lt;float&gt;(transformdPt.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> knotsArray;</div>\n\
<div class=\"line\">        curve.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a4c5b40565f31fed59492f8abe5ceaba4\">getKnots</a>(knotsArray);</div>\n\
<div class=\"line\">        knots.reserve(knotsArray.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() + 2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// need to add a knot to the start and end (M + 2N + 1)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (knotsArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> knotsLength = knotsArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (knotsArray[0] == knotsArray[knotsLength - 1] ||</div>\n\
<div class=\"line\">                knotsArray[0] == knotsArray[1])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                knots.push_back(static_cast&lt;float&gt;(knotsArray[0]));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                knots.push_back(static_cast&lt;float&gt;(2 * knotsArray[0] - knotsArray[1]));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; knotsLength; ++j)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                knots.push_back(static_cast&lt;float&gt;(knotsArray[j]));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (knotsArray[0] == knotsArray[knotsLength - 1] ||</div>\n\
<div class=\"line\">                knotsArray[knotsLength - 1] == knotsArray[knotsLength - 2])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                knots.push_back(static_cast&lt;float&gt;((knotsArray[knotsLength - 1])));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                knots.push_back(static_cast&lt;float&gt;(2 * knotsArray[knotsLength - 1] -</div>\n\
<div class=\"line\">                                knotsArray[knotsLength - 2]));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// width</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> widthPlug = curve.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;width&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!useConstWidth &amp;&amp; !widthPlug.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> widthObj;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = widthPlug.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(widthObj);</div>\n\
<div class=\"line\">            <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html\">MFnDoubleArrayData</a> fnDoubleArrayData(widthObj, &amp;status);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> doubleArrayData = fnDoubleArrayData.array();</div>\n\
<div class=\"line\">            Alembic::Util::int32_t arraySum = doubleArrayData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (arraySum == numCVs)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (Alembic::Util::int32_t i = 0; i &lt; arraySum; i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    width.push_back(static_cast&lt;float&gt;(doubleArrayData[i]));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (status == MS::kSuccess)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;Curve &quot;</span>;</div>\n\
<div class=\"line\">                msg += curve.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6e9ba8c60415451d03d26e01accaca81\">partialPathName</a>();</div>\n\
<div class=\"line\">                msg += <span class=\"stringliteral\">&quot; has incorrect size for the width vector.&quot;</span>;</div>\n\
<div class=\"line\">                msg += <span class=\"stringliteral\">&quot;\\nUsing default constant width of 0.1.&quot;</span>;</div>\n\
<div class=\"line\">                <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                width.clear();</div>\n\
<div class=\"line\">                width.push_back(0.1f);</div>\n\
<div class=\"line\">                useConstWidth = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                width.push_back(widthPlug.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>());</div>\n\
<div class=\"line\">                useConstWidth = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!useConstWidth)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// pick a default value</span></div>\n\
<div class=\"line\">            width.clear();</div>\n\
<div class=\"line\">            width.push_back(0.1f);</div>\n\
<div class=\"line\">            useConstWidth = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::GeometryScope scope = Alembic::AbcGeom::kVertexScope;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (useConstWidth)</div>\n\
<div class=\"line\">        scope = Alembic::AbcGeom::kConstantScope;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    samp.setCurvesNumVertices(Alembic::Abc::Int32ArraySample(nVertices));</div>\n\
<div class=\"line\">    samp.setPositions(Alembic::Abc::V3fArraySample(</div>\n\
<div class=\"line\">        (<span class=\"keyword\">const</span> Imath::V3f *)&amp;points.front(), points.size() / 3 ));</div>\n\
<div class=\"line\">    samp.setWidths(Alembic::AbcGeom::OFloatGeomParam::Sample(</div>\n\
<div class=\"line\">        Alembic::Abc::FloatArraySample(width), scope) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (samp.getType() == Alembic::AbcGeom::kVariableOrder)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        samp.setOrders(Alembic::Abc::UcharArraySample(orders));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!knots.empty())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        samp.setKnots(Alembic::Abc::FloatArraySample(knots));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mSchema.set(samp);</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";