var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcImport/CreateSceneHelper.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_import_2_create_scene_helper_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcImport/CreateSceneHelper.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcImport/CreateSceneHelper.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2014,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks, Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;util.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CameraHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;LocatorHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MeshHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;NurbsCurveHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;NurbsSurfaceHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PointHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;XformHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CreateSceneHelper.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/Visibility.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDoubleArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCamera.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDoubleArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnIntArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsCurve.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsSurface.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSet.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSingleIndexedComponent.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyGraph.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;set&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> copyIndicesToNode(<a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; iIndices, <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iNode,</div>\n\
<div class=\"line\">                           <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iSet)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> mFnNode(iNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dpShape;</div>\n\
<div class=\"line\">        status = mFnNode.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#adfb40b1f56af23ad94c4ca77c9a147b5\">getPath</a>(dpShape);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// The mesh may be an intermediate object if it&#39;s deformed. We should</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// assign shading groups to the faces of the deformed mesh instead.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Because the deformed mesh is the mesh for shading.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mFnNode.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a7293b39df2aa5ccfe5ffa7f483fffcae\">isIntermediateObject</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Only non-intermediate shapes are used for shading. We call</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// extendToShape() to find the non-intermediate shape.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> shadedShape = dpShape;</div>\n\
<div class=\"line\">            shadedShape.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shadedShape.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a658d9664035ff84ffefa217c0e45cc88\">extendToShape</a>())</div>\n\
<div class=\"line\">                dpShape = shadedShape;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Empty the set</span></div>\n\
<div class=\"line\">        <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a>         fnSet( iSet );</div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selList;</div>\n\
<div class=\"line\">        fnSet.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#a4816acf44a8c21134cbe3d92a3f60925\">getMembers</a>   ( selList, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> iterSelList( selList );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( ; iterSelList.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#ac0f0d6fc806b11d246e05cb94e886b38\">isDone</a>()!=<span class=\"keyword\">true</span>; iterSelList.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#a73616f002814b8abe6d921db72d7a496\">next</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> curDag;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  curCompObj;</div>\n\
<div class=\"line\">            iterSelList.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#acea3f9b4576b874442d489458ac310c0\">getDagPath</a>(curDag, curCompObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ((curDag==dpShape) &amp;&amp; curCompObj.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">                fnSet.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#ae892f6fedd3b2afa60bde09c5049aa80\">removeMember</a>(curDag, curCompObj);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Feed the indexed component</span></div>\n\
<div class=\"line\">        <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnSComp;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = fnSComp.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae3b7a9c926f9770f786893bbea825d6b\">create</a>( <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a5ddabf9726f89e07cff62014221fe6fb\">MFn::kMeshPolygonComponent</a> );</div>\n\
<div class=\"line\">        fnSComp.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a23e786bfb118c070d054f078704fb3e2\">addElements</a>( iIndices );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove the elements from all other sets (exclusivity constraint)</span></div>\n\
<div class=\"line\">        <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>   connSGObjs( getOutConnectedSG(dpShape) );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> connSGObj;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> fnOtherSet;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> setList, otherSetList, xorList;</div>\n\
<div class=\"line\">        setList.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>( dpShape, comp );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> nSG = connSGObjs.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i=0; i&lt;nSG; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the current SG Object</span></div>\n\
<div class=\"line\">            connSGObj = connSGObjs[i];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( connSGObj != iSet )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Build the intersection list and remove it from the set</span></div>\n\
<div class=\"line\">                otherSetList.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">                fnOtherSet.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( connSGObj );</div>\n\
<div class=\"line\">                fnOtherSet.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#a4816acf44a8c21134cbe3d92a3f60925\">getMembers</a>( otherSetList, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// test if it&#39;s a full partition</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (otherSetList.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>()&gt;=1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> itSelList( otherSetList );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>( ; itSelList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#ac0f0d6fc806b11d246e05cb94e886b38\">isDone</a>()!=<span class=\"keyword\">true</span>; itSelList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#a73616f002814b8abe6d921db72d7a496\">next</a>() )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dp;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  compObj;</div>\n\
<div class=\"line\">                        itSelList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#acea3f9b4576b874442d489458ac310c0\">getDagPath</a>(dp, compObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!(dp==dpShape) || !compObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        fnOtherSet.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#ae892f6fedd3b2afa60bde09c5049aa80\">removeMember</a>( dp, compObj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// create a component with the full list</span></div>\n\
<div class=\"line\">                        <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh(dpShape);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnFullSComp;</div>\n\
<div class=\"line\">                        compObj = fnFullSComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae3b7a9c926f9770f786893bbea825d6b\">create</a>(</div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a5ddabf9726f89e07cff62014221fe6fb\">MFn::kMeshPolygonComponent</a> );</div>\n\
<div class=\"line\">                        fnFullSComp.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae4dcbac2a79082a32f18c613803a1c3f\">setCompleteData</a>(fnMesh.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// fill the sel list</span></div>\n\
<div class=\"line\">                        otherSetList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">                        otherSetList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>( dpShape, compObj );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                xorList = otherSetList;</div>\n\
<div class=\"line\">                xorList.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a92c9d648de48c0e6535fc814d32bb72c\">merge</a>( setList, <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a2c76c3f8b54a741ba9fdbfe6b5e0ee5ca3a0570bd44a3245270b3e7b94934f3f1\">MSelectionList::kXORWithList</a> );</div>\n\
<div class=\"line\">                otherSetList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a92c9d648de48c0e6535fc814d32bb72c\">merge</a>( xorList, <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a2c76c3f8b54a741ba9fdbfe6b5e0ee5ca7cb7dd787f22a4dab08af6fe7c408534\">MSelectionList::kRemoveFromList</a>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( !otherSetList.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a8174b25717a6f860d40f2ca259442df5\">isEmpty</a>() )</div>\n\
<div class=\"line\">                    fnOtherSet.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#a44f8c32b5cf9a91161b4200d84a1d034\">removeMembers</a>( otherSetList );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Feed the set</span></div>\n\
<div class=\"line\">        fnSet.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#a34ccf147b7d1cb7d2f528b1ca79db5b8\">addMember</a>(dpShape, comp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addFaceSets(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iNode, Alembic::Abc::IObject &amp; iObj)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> mesh(iNode, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::size_t numChildren = iObj.getNumChildren();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( std::size_t i = 0 ; i &lt; numChildren; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Abc::IObject child = iObj.getChild(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IFaceSet::matches(child.getHeader()))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::AbcGeom::IFaceSet faceSet(child,</div>\n\
<div class=\"line\">                    Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// create a shading group for this faceset.</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> shadingGroup;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; faceSetName(faceSet.getName().c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// check if this SG already exists.</span></div>\n\
<div class=\"line\">                status = getObjectByName(faceSetName, shadingGroup);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (shadingGroup.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    shadingGroup = createShadingGroup(faceSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// set (and create if needed) &#39;AbcFacesetName&#39; string</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// attribute on the shadingGroup</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDepNode(shadingGroup);</div>\n\
<div class=\"line\">                <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> abcFacesetNamePlug = fnDepNode.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;AbcFacesetName&quot;</span>,</div>\n\
<div class=\"line\">                                                               <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (abcFacesetNamePlug.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html\">MFnStringData</a> fnStringData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName(<span class=\"stringliteral\">&quot;AbcFacesetName&quot;</span>);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> strAttrObject = fnStringData.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> attr;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = attr.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                                              <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, strAttrObject);</div>\n\
<div class=\"line\">                    fnDepNode.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a837094252166c0b365fafb53e4a0203b\">addAttribute</a>(attrObj);</div>\n\
<div class=\"line\">                    abcFacesetNamePlug = fnDepNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(attrObj, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                abcFacesetNamePlug.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(faceSetName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// retrive face indices.</span></div>\n\
<div class=\"line\">                Alembic::AbcGeom::IFaceSetSchema::Sample samp;</div>\n\
<div class=\"line\">                faceSet.getSchema().get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html\">MFnIntArrayData</a> fnData;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>* faceArray((<span class=\"keywordtype\">int</span> *)samp.getFaces()-&gt;getData());</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> size = samp.getFaces()-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> arr(faceArray, static_cast&lt;unsigned int&gt;(size));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// copy indices to the set</span></div>\n\
<div class=\"line\">                copyIndicesToNode(arr, iNode, shadingGroup);</div>\n\
<div class=\"line\">                Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">                    faceSet.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">                    faceSet.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                addProps(arbProp, shadingGroup, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                addProps(userProp, shadingGroup, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> removeDagNode(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; dagPath)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = deleteDagNode(dagPath);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status != MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError = dagPath.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; removal not successful&quot;</span>);</div>\n\
<div class=\"line\">            printError(theError);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::IScalarProperty getVisible(Alembic::Abc::IObject &amp; iNode,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isObjConstant,</div>\n\
<div class=\"line\">        std::vector&lt;Prop&gt; &amp; oPropList,</div>\n\
<div class=\"line\">        std::vector&lt;Alembic::AbcGeom::IObject&gt; &amp; oAnimVisStaticObj)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IVisibilityProperty visProp =</div>\n\
<div class=\"line\">            Alembic::AbcGeom::GetVisibilityProperty(iNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (visProp &amp;&amp; !visProp.isConstant())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Prop prop;</div>\n\
<div class=\"line\">            prop.mScalar = visProp;</div>\n\
<div class=\"line\">            oPropList.push_back(prop);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isObjConstant)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                oAnimVisStaticObj.push_back(iNode);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> visProp;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setConstantVisibility(Alembic::Abc::IScalarProperty iVisProp,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iVisProp.valid() &amp;&amp; iVisProp.isConstant())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Util::int8_t visVal;</div>\n\
<div class=\"line\">            iVisProp.get(&amp;visVal);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dep(iParent);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = dep.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;visibility&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                plug.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a7ca6fc59c06e16950cdc9db4c7f5f1bf\">setBool</a>(visVal != 0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> matchesNameWithRegex (<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; iName,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> <a name=\"_a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; iPatterns)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = iPatterns.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (length == 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;length; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// use &#39;match&#39; function provided in the maya mel script.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> scriptStr, result;</div>\n\
<div class=\"line\">            scriptStr.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;match \\&quot;^1s\\&quot; \\&quot;^2s\\&quot;;&quot;</span>, iPatterns[i], iName);</div>\n\
<div class=\"line\">            <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(scriptStr, result);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// found a match!</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (result.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> connectIntermediateMesh(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; ioFn, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; fn)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Maya doesn&#39;t allow to delete history on a referenced mesh. We</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// can&#39;t disconnect the history and change it via MFnMesh directly.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Instead, we could create an intermediate mesh and connect it to</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the inMesh plug of the referenced mesh.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// To avoid leaving orphan intermediate mesh in the scene, we</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// tag the intermediate mesh with a dynamic attribute so that</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// it can be deleted properly when imported again.</span></div>\n\
<div class=\"line\">        <a name=\"_a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> modifier;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the dynamic attribute to indicate that the mesh is an</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// intermediate mesh.</span></div>\n\
<div class=\"line\">        <a name=\"_a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numericAttr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> aioAttr = numericAttr.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;AlembicIntermediateObject&quot;</span>, <span class=\"stringliteral\">&quot;aio&quot;</span>, <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>);</div>\n\
<div class=\"line\">        modifier.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ad714eb6c2e6f51659e3e50f176c75a91\">addAttribute</a>(ioFn.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>(), aioAttr);</div>\n\
<div class=\"line\">        modifier.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the intermediate mesh as Maya intermediate object and</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// connect it to the inMesh plug</span></div>\n\
<div class=\"line\">        modifier.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a1cb9f22e0549ee47f1c8dd92fe7d515e\">renameNode</a>(ioFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>(), fn.<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>() + <span class=\"stringliteral\">&quot;Orig&quot;</span>);</div>\n\
<div class=\"line\">        modifier.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#aed4fcf3b0a07e7b20e94fa122905286d\">newPlugValueBool</a>(ioFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;intermediateObject&quot;</span>, <span class=\"keyword\">true</span>), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#aed4fcf3b0a07e7b20e94fa122905286d\">newPlugValueBool</a>(ioFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(aioAttr, <span class=\"keyword\">true</span>), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        modifier.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(ioFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;outMesh&quot;</span>, <span class=\"keyword\">true</span>), fn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;inMesh&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">        modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> deleteIntermediateMesh(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; fn)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// When merge with a referenced node with history, delete the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// previous intermediate mesh that is created by Alembic plug-in.</span></div>\n\
<div class=\"line\">        <a name=\"_a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> sources;</div>\n\
<div class=\"line\">        fn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;inMesh&quot;</span>, <span class=\"keyword\">true</span>).<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(sources, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sources.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> io = sources[0].node();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>(io).hasAttribute(<span class=\"stringliteral\">&quot;AlembicIntermediateObject&quot;</span>))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> modifier;</div>\n\
<div class=\"line\">                modifier.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a9e6962659554cd09e71b3d4ef2244404\">deleteNode</a>(io);</div>\n\
<div class=\"line\">                modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CreateSceneVisitor::CreateSceneVisitor(<span class=\"keywordtype\">double</span> iFrame,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iUnmarkedFaceVaryingColors, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent,</div>\n\
<div class=\"line\">    Action iAction, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> iRootNodes,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> iIncludeFilterString, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> iExcludeFilterString) :</div>\n\
<div class=\"line\">    mFrame(iFrame), mParent(iParent),</div>\n\
<div class=\"line\">    mUnmarkedFaceVaryingColors(iUnmarkedFaceVaryingColors), mAction(iAction)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mAnyRoots = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// parse the input string to extract the nodes that need (re)connection</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iRootNodes != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>() &amp;&amp; iRootNodes != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;/&quot;</span>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> theArray;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iRootNodes.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39; &#39;</span>, theArray) == MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = theArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; len; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = theArray[i];</div>\n\
<div class=\"line\">                <span class=\"comment\">// the name could be either a partial path or a full path</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( getDagPathByName( name, dagPath ) == MS::kSuccess )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    name = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">                    mRootNodes.insert(name.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                    mAnyRoots = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theWarning(<span class=\"stringliteral\">&quot;Could not find root: &quot;</span>);</div>\n\
<div class=\"line\">                    theWarning += name;</div>\n\
<div class=\"line\">                    theWarning += <span class=\"stringliteral\">&quot; in the scene.&quot;</span>;</div>\n\
<div class=\"line\">                    printWarning(theWarning);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iRootNodes == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;/&quot;</span>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mAnyRoots = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mOnlyPatterns.clear();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iIncludeFilterString != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>() &amp;&amp;</div>\n\
<div class=\"line\">        iIncludeFilterString != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;*&quot;</span>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        iIncludeFilterString.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39; &#39;</span>, mOnlyPatterns);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mExceptPatterns.<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iExcludeFilterString != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>() &amp;&amp;</div>\n\
<div class=\"line\">        iExcludeFilterString != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;*&quot;</span>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        iExcludeFilterString.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39; &#39;</span>, mExceptPatterns);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CreateSceneVisitor::~CreateSceneVisitor()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CreateSceneVisitor::getData(WriterData &amp; oData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    oData = mData;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CreateSceneVisitor::hasSampledData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Currently there&#39;s no support for bringing in particle system simulation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (mData.mPropList.size() &gt; 0</div>\n\
<div class=\"line\">        || mData.mXformList.size() &gt; 0</div>\n\
<div class=\"line\">        || mData.mSubDList.size() &gt; 0</div>\n\
<div class=\"line\">        || mData.mPolyMeshList.size() &gt; 0</div>\n\
<div class=\"line\">        || mData.mCameraList.size() &gt; 0</div>\n\
<div class=\"line\">        || mData.mNurbsList.size() &gt; 0</div>\n\
<div class=\"line\">        || mData.mCurvesList.size() &gt; 0</div>\n\
<div class=\"line\">        || mData.mLocList.size() &gt; 0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// re-add the selection back to the sets</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CreateSceneVisitor::applyShaderSelection()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::map &lt; MObject, MSelectionList, ltMObj &gt;::iterator i =</div>\n\
<div class=\"line\">        mShaderMeshMap.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::map &lt; MObject, MSelectionList, ltMObj &gt;::iterator end =</div>\n\
<div class=\"line\">        mShaderMeshMap.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; i != end; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> curSet(i-&gt;first);</div>\n\
<div class=\"line\">        curSet.addMembers(i-&gt;second);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    mShaderMeshMap.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// add face sets after connections are made</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CreateSceneVisitor::addFaceSetsAfterConnection()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::map &lt; MObject, Alembic::Abc::IObject, ltMObj &gt;::iterator i =</div>\n\
<div class=\"line\">        mAddFaceSetsMap.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::map &lt; MObject, Alembic::Abc::IObject, ltMObj &gt;::iterator end =</div>\n\
<div class=\"line\">        mAddFaceSetsMap.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; i != end; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dagNode = i-&gt;first;</div>\n\
<div class=\"line\">        addFaceSets(dagNode, i-&gt;second);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CreateSceneVisitor::addToPropList(std::size_t iFirst, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iObject)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::size_t last = mData.mPropList.size();</div>\n\
<div class=\"line\">    std::vector&lt;std::string&gt; attrList;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (std::size_t i = iFirst; i &lt; last; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mData.mPropList[i].mArray.valid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            attrList.push_back(mData.mPropList[i].mArray.getName());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            attrList.push_back(mData.mPropList[i].mScalar.getName());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    mData.mPropObjList.push_back(SampledPair(iObject, attrList));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// remembers what sets a mesh was part of, gets those sets as a selection</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and then clears the sets for reassignment later  this is only used when</span></div>\n\
<div class=\"line\"><span class=\"comment\">// hooking up an Alembic node to a previous hierarchy (swapping)</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CreateSceneVisitor::checkShaderSelection(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; iMesh,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iInst)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> sets;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> comps;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iMesh.<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#ae19de6f173f69f8753fdca910e208dc7\">getConnectedSetsAndMembers</a>(iInst, sets, comps, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> setsLength = sets.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; setsLength; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; curSetObj = sets[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mShaderMeshMap.find(curSetObj) == mShaderMeshMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> curSet(curSetObj);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> &amp; curSel = mShaderMeshMap[curSetObj];</div>\n\
<div class=\"line\">            curSet.getMembers(curSel, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// clear before hand so that when we add the selection to the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// set later, it will take.  This is to get around a problem where</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// shaders are assigned per face dont shade correctly</span></div>\n\
<div class=\"line\">            curSet.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CreateSceneVisitor::visit(AlembicObjectPtr iObject)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::IObject iObj = iObject-&gt;object();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( Alembic::AbcGeom::IXform::matches(iObj.getHeader()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IXform xform(iObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        (*this)(xform, iObject);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( Alembic::AbcGeom::ISubD::matches(iObj.getHeader()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ISubD mesh(iObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        (*this)(mesh);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( Alembic::AbcGeom::IPolyMesh::matches(iObj.getHeader()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IPolyMesh mesh(iObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        (*this)(mesh);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( Alembic::AbcGeom::ICamera::matches(iObj.getHeader()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ICamera cam(iObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        (*this)(cam);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( Alembic::AbcGeom::ICurves::matches(iObj.getHeader()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ICurves curves(iObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        (*this)(curves);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( Alembic::AbcGeom::INuPatch::matches(iObj.getHeader()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::INuPatch nurbs(iObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        (*this)(nurbs);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( Alembic::AbcGeom::IPoints::matches(iObj.getHeader()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IPoints pts(iObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        (*this)(pts);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( iObj.getHeader().getMetaData().get(<span class=\"stringliteral\">&quot;schema&quot;</span>) == <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        createEmptyObject(iObject);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theWarning(iObj.getName().c_str());</div>\n\
<div class=\"line\">        theWarning += <span class=\"stringliteral\">&quot; is an unsupported schema, skipping: &quot;</span>;</div>\n\
<div class=\"line\">        theWarning += iObj.getMetaData().get(<span class=\"stringliteral\">&quot;schema&quot;</span>).c_str();</div>\n\
<div class=\"line\">        printWarning(theWarning);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicObjectPtr CreateSceneVisitor::previsit(AlembicObjectPtr iParentObject)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::IObject parent = iParentObject-&gt;object();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = parent.getFullName().c_str();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numChildren = parent.getNumChildren();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Apply exclude filters first as a preorder traversal.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mExceptPatterns.length() &gt; 0 &amp;&amp;</div>\n\
<div class=\"line\">        matchesNameWithRegex(name, mExceptPatterns))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> AlembicObjectPtr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::IObject child = parent.getChild(i);</div>\n\
<div class=\"line\">        AlembicObjectPtr childObject =</div>\n\
<div class=\"line\">            previsit(AlembicObjectPtr(<span class=\"keyword\">new</span> AlembicObject(child)));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (childObject)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            iParentObject-&gt;addChild(childObject);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We traverse a tree in postorder. The invarient is that iParentObject</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// will have no child unless any descendent of it has the matching name.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iParentObject-&gt;getNumChildren() == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!matchesNameWithRegex(name, mOnlyPatterns))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> AlembicObjectPtr();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> iParentObject;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::string CreateSceneVisitor::searchRootNames(<span class=\"keyword\">const</span> std::string &amp; iName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// we can bail early</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mRootNodes.empty())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> iName;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// we can&#39;t do find because there could be a namespace mismatch</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// if things match exactly however, bail early</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::string strippedName = stripPathAndNamespace(iName);</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt;::iterator it = mRootNodes.begin();</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt;::iterator itEnd = mRootNodes.end();</div>\n\
<div class=\"line\">    std::string closeMatch;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; it != itEnd; ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*it == iName)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> iName;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*it == strippedName)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> strippedName;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string strippedRoot = stripPathAndNamespace(*it);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (strippedName == strippedRoot)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            closeMatch = *it;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> closeMatch;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"comment\">// root of file, no creation of DG node</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::walk(Alembic::Abc::IArchive &amp; iRoot)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> saveParent = mParent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!iRoot.valid()) <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// preload the cache hierarchy with an optional filtering.</span></div>\n\
<div class=\"line\">    AlembicObjectPtr topObject =</div>\n\
<div class=\"line\">        previsit(AlembicObjectPtr(<span class=\"keyword\">new</span> AlembicObject(iRoot.getTop())));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!topObject) <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numChildren = topObject-&gt;getNumChildren();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numChildren == 0) <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction == NONE)  <span class=\"comment\">// simple scene creation mode</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numChildren; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            this-&gt;visit(topObject-&gt;getChild(i));</div>\n\
<div class=\"line\">            mParent = saveParent;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::string rootName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// one root node? see if it matches any of the children</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mRootNodes.size() == 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        rootName = *mRootNodes.begin();</div>\n\
<div class=\"line\">        std::string rootBase = stripPathAndNamespace(rootName);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> foundRoot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string childName =</div>\n\
<div class=\"line\">                topObject-&gt;object().getChildHeader(i).getName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (rootBase == stripPathAndNamespace(childName))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                foundRoot = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// none of the direct children of the archive matches, so we&#39;ll inject</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the children of the specified root</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!foundRoot)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (getDagPathByName(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(rootName.c_str()), dagPath)</div>\n\
<div class=\"line\">                == MS::kSuccess)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildDags = dagPath.<a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412\">childCount</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (numChildDags &gt; 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mRootNodes.clear();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; numChildDags; ++j)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> child = dagPath.<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#acf3680f39b19e4b44fe459efa2b76219\">child</a>(j);</div>\n\
<div class=\"line\">                    dagPath.<a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a82ffa451bdebeba69b2c4c55f924980b\">push</a>(child);</div>\n\
<div class=\"line\">                    mRootNodes.insert(dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                    dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// doing connections</span></div>\n\
<div class=\"line\">    std::set&lt;std::string&gt; connectUpdateNodes;</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt; connectCurNodesInFile;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::set&lt;std::string&gt;::iterator fileEnd =</div>\n\
<div class=\"line\">        connectCurNodesInFile.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numChildren; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AlembicObjectPtr <span class=\"keywordtype\">object</span> = topObject-&gt;getChild(i);</div>\n\
<div class=\"line\">        std::string name = <span class=\"keywordtype\">object</span>-&gt;object().getName();</div>\n\
<div class=\"line\">        connectCurNodesInFile.insert(name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string rootPath = searchRootNames(name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// see if this name is part of the input to AlembicNode</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!rootPath.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Find out if this node exists in the current scene</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mAnyRoots &amp;&amp;</div>\n\
<div class=\"line\">                getDagPathByName(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(rootPath.c_str()), dagPath) ==</div>\n\
<div class=\"line\">                MS::kSuccess)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                connectUpdateNodes.insert(name);</div>\n\
<div class=\"line\">                mConnectDagNode = dagPath;</div>\n\
<div class=\"line\">                mConnectDagNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\">                this-&gt;visit(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\">                mParent = saveParent;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (mAction != CREATE &amp;&amp; mAction != CREATE_REMOVE)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theWarning(<span class=\"stringliteral\">&quot;Could not find: &quot;</span>);</div>\n\
<div class=\"line\">                theWarning += name.c_str();</div>\n\
<div class=\"line\">                theWarning += <span class=\"stringliteral\">&quot; in the scene.&quot;</span>;</div>\n\
<div class=\"line\">                theWarning += <span class=\"stringliteral\">&quot;  Skipping it and all descendants.&quot;</span>;</div>\n\
<div class=\"line\">                printWarning(theWarning);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mConnectDagNode = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>();</div>\n\
<div class=\"line\">                connectUpdateNodes.insert(name);</div>\n\
<div class=\"line\">                this-&gt;visit(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\">                mParent = saveParent;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theWarning(<span class=\"stringliteral\">&quot;Could not find a match for: &quot;</span>);</div>\n\
<div class=\"line\">            theWarning += name.c_str();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (rootName.empty())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                theWarning += <span class=\"stringliteral\">&quot; in the scene.&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                theWarning += <span class=\"stringliteral\">&quot; beneath parent: &quot;</span>;</div>\n\
<div class=\"line\">                theWarning += rootName.c_str();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printWarning(theWarning);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }  <span class=\"comment\">// for-loop</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mRootNodes.size() &gt; connectUpdateNodes.size() &amp;&amp;</div>\n\
<div class=\"line\">        (mAction == REMOVE || mAction == CREATE_REMOVE))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::set&lt;std::string&gt;::iterator iter =</div>\n\
<div class=\"line\">            mRootNodes.begin();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::set&lt;std::string&gt;::iterator fileEndIter =</div>\n\
<div class=\"line\">            connectCurNodesInFile.end();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; iter != mRootNodes.end(); iter++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string name = *iter;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> existInFile =</div>\n\
<div class=\"line\">                (connectCurNodesInFile.find(name) != fileEndIter);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> existInScene =</div>\n\
<div class=\"line\">                (getDagPathByName(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(name.c_str()), dagPath)</div>\n\
<div class=\"line\">                    == MS::kSuccess);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (existInScene &amp;&amp; !existInFile)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                removeDagNode(dagPath);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!existInScene &amp;&amp; !existInFile)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theWarning(name.c_str());</div>\n\
<div class=\"line\">                theWarning +=</div>\n\
<div class=\"line\">                    <span class=\"stringliteral\">&quot; exists neither in file nor in the scene&quot;</span>;</div>\n\
<div class=\"line\">                printWarning(theWarning);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::operator()(Alembic::AbcGeom::ICamera &amp; iNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> cameraObj = <a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant = iNode.getSchema().isConstant();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add animated camera to the list</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mData.mCameraList.push_back(iNode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t firstProp = mData.mPropList.size();</div>\n\
<div class=\"line\">    getAnimatedProps(arbProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    getAnimatedProps(userProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    Alembic::Abc::IScalarProperty visProp = getVisible(iNode, isConstant,</div>\n\
<div class=\"line\">        mData.mPropList, mData.mAnimVisStaticObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cameraObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mData.mCameraObjList.push_back(cameraObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction == CREATE || mAction == CREATE_REMOVE)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cameraObj = create(iNode, mParent);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mData.mCameraObjList.push_back(cameraObj);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cameraObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setConstantVisibility(visProp, cameraObj);</div>\n\
<div class=\"line\">        addProps(arbProp, cameraObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        addProps(userProp, cameraObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mAction &gt;= CONNECT )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_camera.html\">MFnCamera</a> fn(cameraObj, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// check that the data types are compatible, they might not be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if we have a weird hierarchy, where the node in the scene</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// differs from the node on disk</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status != MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;No connection done for node &#39;&quot;</span>);</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(iNode.getName().c_str());</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&#39; with &quot;</span>);</div>\n\
<div class=\"line\">            theError += mConnectDagNode.fullPathName();</div>\n\
<div class=\"line\">            printError(theError);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        addToPropList(firstProp, cameraObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::operator()(Alembic::AbcGeom::ICurves &amp; iNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curvesObj = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant = iNode.getSchema().isConstant();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// read sample 0 to determine and use it to set the number of total</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// curves.  We can&#39;t support changing the number of curves over time.</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::ICurvesSchema::Sample samp;</div>\n\
<div class=\"line\">    iNode.getSchema().get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IFloatGeomParam::Sample widthSamp;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iNode.getSchema().getWidthsParam())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        iNode.getSchema().getWidthsParam().getExpanded(widthSamp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    std::size_t numCurves = samp.getNumCurves();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numCurves == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theWarning(iNode.getName().c_str());</div>\n\
<div class=\"line\">        theWarning += <span class=\"stringliteral\">&quot; has no curves, skipping.&quot;</span>;</div>\n\
<div class=\"line\">        printWarning(theWarning);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// add animated curves to the list</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mData.mNumCurves.push_back(numCurves);</div>\n\
<div class=\"line\">        mData.mCurvesList.push_back(iNode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t firstProp = mData.mPropList.size();</div>\n\
<div class=\"line\">    getAnimatedProps(arbProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    getAnimatedProps(userProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    Alembic::Abc::IScalarProperty visProp = getVisible(iNode, isConstant,</div>\n\
<div class=\"line\">        mData.mPropList, mData.mAnimVisStaticObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            curvesObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (numCurves == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mData.mNurbsCurveObjList.push_back(curvesObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> childCurves = mConnectDagNode.childCount();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numCurves; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (i &lt; childCurves)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            mData.mNurbsCurveObjList.push_back(</div>\n\
<div class=\"line\">                                mConnectDagNode.child(i));</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// push a null object since we have more Alembic</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// curves than we have Maya curves</span></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj;</div>\n\
<div class=\"line\">                            mData.mNurbsCurveObjList.push_back(obj);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                } <span class=\"comment\">// else</span></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"comment\">// if hasDag</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        curvesObj = createCurves(iNode.getName(), samp, widthSamp, mParent,</div>\n\
<div class=\"line\">            mData.mNurbsCurveObjList, !isConstant);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (curvesObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setConstantVisibility(visProp, curvesObj);</div>\n\
<div class=\"line\">        addProps(arbProp, curvesObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        addProps(userProp, curvesObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction &gt;= CONNECT)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html\">MFnNurbsCurve</a> fncurve(curvesObj, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// not a single curve, try the transform for a group of curves</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> fntrans(curvesObj, &amp;status);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// check that the data types are compatible, they might not be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if we have a weird hierarchy, where the node in the scene</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// differs from the node on disk</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;No connection done for node &#39;&quot;</span>);</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(iNode.getName().c_str());</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&#39; with &quot;</span>);</div>\n\
<div class=\"line\">            theError += mConnectDagNode.fullPathName();</div>\n\
<div class=\"line\">            printError(theError);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fncurve.object().isNull())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dstPlug = fncurve.findPlug(<span class=\"stringliteral\">&quot;create&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">            disconnectProps(fncurve, mData.mPropList, firstProp);</div>\n\
<div class=\"line\">            addToPropList(firstProp, curvesObj);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mConnectDagNode.pop();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::operator()(Alembic::AbcGeom::IPoints&amp; iNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> particleObj = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant = iNode.getSchema().isConstant();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">        mData.mPointsList.push_back(iNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// since we don&#39;t really support animated points, don&#39;t bother</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// with the animated properties on it</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            particleObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        status = create(mFrame, iNode, mParent, particleObj);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mData.mPointsObjList.push_back(particleObj);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// don&#39;t currently care about anything animated on a particleObj</span></div>\n\
<div class=\"line\">    std::vector&lt;Prop&gt; fakePropList;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::AbcGeom::IObject&gt; fakeObjList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (particleObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::IScalarProperty visProp =</div>\n\
<div class=\"line\">            getVisible(iNode, <span class=\"keyword\">false</span>, fakePropList, fakeObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        setConstantVisibility(visProp, particleObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">            iNode.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\">        Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">            iNode.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        addProps(arbProp, particleObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        addProps(userProp, particleObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mConnectDagNode.pop();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::operator()(Alembic::AbcGeom::ISubD&amp; iNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> subDObj = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    SubDAndFriends subdAndFriends;</div>\n\
<div class=\"line\">    subdAndFriends.mMesh = iNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> colorAnim = getUVandColorAttrs(arbProp, subdAndFriends.mV2s,</div>\n\
<div class=\"line\">        subdAndFriends.mC3s, subdAndFriends.mC4s,</div>\n\
<div class=\"line\">        mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant = iNode.getSchema().isConstant();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add animated SubDs to the list</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isConstant || colorAnim)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mData.mSubDList.push_back(subdAndFriends);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t firstProp = mData.mPropList.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    getAnimatedProps(arbProp, mData.mPropList, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">    getAnimatedProps(userProp, mData.mPropList, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">    Alembic::Abc::IScalarProperty visProp = getVisible(iNode, isConstant,</div>\n\
<div class=\"line\">        mData.mPropList, mData.mAnimVisStaticObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            subDObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isConstant || colorAnim)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mData.mSubDObjList.push_back(subDObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        subDObj = createSubD(mFrame, subdAndFriends, mParent);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConstant || colorAnim)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mData.mSubDObjList.push_back(subDObj);</div>\n\
<div class=\"line\">            mAddFaceSetsMap[subDObj] = iNode;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (subDObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setConstantVisibility(visProp, subDObj);</div>\n\
<div class=\"line\">        addProps(arbProp, subDObj, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">        addProps(userProp, subDObj, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">        addFaceSets(subDObj, iNode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mAction &gt;= CONNECT )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fn(subDObj, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// check that the data types are compatible, they might not be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if we have a weird hierarchy, where the node in the scene</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// differs from the node on disk</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!subDObj.<a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;No connection done for node &#39;&quot;</span>);</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(iNode.getName().c_str());</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&#39; with &quot;</span>);</div>\n\
<div class=\"line\">            theError += mConnectDagNode.fullPathName();</div>\n\
<div class=\"line\">            printError(theError);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// the mesh from Alembic is static but the Maya mesh is referenced.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// direct changes to the Maya mesh will lost after unloading/loading</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the reference file. we create an intermediate mesh and connect</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// it to the Maya mesh.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> ioFn;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isConstant &amp;&amp; fn.isFromReferencedFile())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            deleteIntermediateMesh(fn);</div>\n\
<div class=\"line\">            ioFn.<a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>(createSubD(mFrame, subdAndFriends, mParent));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mConnectDagNode.isValid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            checkShaderSelection(fn, mConnectDagNode.instanceNumber());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        disconnectMesh(subDObj, mData.mPropList, firstProp);</div>\n\
<div class=\"line\">        fn.setObject(subDObj);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isConstant &amp;&amp; CONNECT == mAction)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (ioFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>))</div>\n\
<div class=\"line\">                connectIntermediateMesh(ioFn, fn);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                readSubD(mFrame, fn, subDObj, subdAndFriends, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        addToPropList(firstProp, subDObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mConnectDagNode.pop();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::operator()(Alembic::AbcGeom::IPolyMesh&amp; iNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> polyObj = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PolyMeshAndFriends meshAndFriends;</div>\n\
<div class=\"line\">    meshAndFriends.mMesh = iNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant = iNode.getSchema().isConstant();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> colorAnim = getUVandColorAttrs(arbProp, meshAndFriends.mV2s,</div>\n\
<div class=\"line\">        meshAndFriends.mC3s, meshAndFriends.mC4s,</div>\n\
<div class=\"line\">        mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add animated poly mesh to the list</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isConstant || colorAnim)</div>\n\
<div class=\"line\">        mData.mPolyMeshList.push_back(meshAndFriends);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t firstProp = mData.mPropList.size();</div>\n\
<div class=\"line\">    getAnimatedProps(arbProp, mData.mPropList, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">    getAnimatedProps(userProp, mData.mPropList, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">    Alembic::Abc::IScalarProperty visProp = getVisible(iNode, isConstant,</div>\n\
<div class=\"line\">        mData.mPropList, mData.mAnimVisStaticObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            polyObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isConstant || colorAnim)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mData.mPolyMeshObjList.push_back(polyObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        polyObj = createPoly(mFrame, meshAndFriends, mParent);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConstant || colorAnim)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mData.mPolyMeshObjList.push_back(polyObj);</div>\n\
<div class=\"line\">            mAddFaceSetsMap[polyObj] = iNode;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (polyObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setConstantVisibility(visProp, polyObj);</div>\n\
<div class=\"line\">        addProps(arbProp, polyObj, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">        addProps(userProp, polyObj, mUnmarkedFaceVaryingColors);</div>\n\
<div class=\"line\">        addFaceSets(polyObj, iNode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mAction &gt;= CONNECT )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fn(polyObj, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// check that the data types are compatible, they might not be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if we have a weird hierarchy, where the node in the scene</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// differs from the node on disk</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status != MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;No connection done for node &#39;&quot;</span>);</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(iNode.getName().c_str());</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&#39; with &quot;</span>);</div>\n\
<div class=\"line\">            theError += mConnectDagNode.fullPathName();</div>\n\
<div class=\"line\">            printError(theError);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// the mesh from Alembic is static but the Maya mesh is referenced.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// direct changes to the Maya mesh will lost after unloading/loading</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the reference file. we create an intermediate mesh and connect</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// it to the Maya mesh.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> ioFn;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isConstant &amp;&amp; fn.isFromReferencedFile())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            deleteIntermediateMesh(fn);</div>\n\
<div class=\"line\">            ioFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>(createPoly(mFrame, meshAndFriends, mParent));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mConnectDagNode.isValid())</div>\n\
<div class=\"line\">            checkShaderSelection(fn, mConnectDagNode.instanceNumber());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        disconnectMesh(polyObj, mData.mPropList, firstProp);</div>\n\
<div class=\"line\">        fn.setObject(polyObj);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isConstant &amp;&amp; CONNECT == mAction)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (ioFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>))</div>\n\
<div class=\"line\">                connectIntermediateMesh(ioFn, fn);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                readPoly(mFrame, fn, polyObj, meshAndFriends, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        addToPropList(firstProp, polyObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mConnectDagNode.pop();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::operator()(Alembic::AbcGeom::INuPatch&amp; iNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> nurbsObj = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant = iNode.getSchema().isConstant();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add animated poly mesh to the list</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">        mData.mNurbsList.push_back(iNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t firstProp = mData.mPropList.size();</div>\n\
<div class=\"line\">    getAnimatedProps(arbProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    getAnimatedProps(userProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    Alembic::Abc::IScalarProperty visProp = getVisible(iNode, isConstant,</div>\n\
<div class=\"line\">        mData.mPropList, mData.mAnimVisStaticObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            nurbsObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mData.mNurbsObjList.push_back(nurbsObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        nurbsObj = createNurbs(mFrame, iNode, mParent);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mData.mNurbsObjList.push_back(nurbsObj);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nurbsObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addProps(arbProp, nurbsObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        addProps(userProp, nurbsObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        setConstantVisibility(visProp, nurbsObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mAction &gt;= CONNECT )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html\">MFnNurbsSurface</a> fn(nurbsObj, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// check that the data types are compatible, they might not be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if we have a weird hierarchy, where the node in the scene</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// differs from the node on disk</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status != MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;No connection done for node &#39;&quot;</span>);</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(iNode.getName().c_str());</div>\n\
<div class=\"line\">            theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&#39; with &quot;</span>);</div>\n\
<div class=\"line\">            theError += mConnectDagNode.fullPathName();</div>\n\
<div class=\"line\">            printError(theError);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dstPlug = fn.findPlug(<span class=\"stringliteral\">&quot;create&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\">        disconnectProps(fn, mData.mPropList, firstProp);</div>\n\
<div class=\"line\">        addToPropList(firstProp, nurbsObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mConnectDagNode.pop();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::operator()(Alembic::AbcGeom::IXform &amp; iNode,</div>\n\
<div class=\"line\">                                       AlembicObjectPtr iNodeObject)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> xformObj = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty arbProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getArbGeomParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::ICompoundProperty userProp =</div>\n\
<div class=\"line\">        iNode.getSchema().getUserProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t firstProp = mData.mPropList.size();</div>\n\
<div class=\"line\">    getAnimatedProps(arbProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    getAnimatedProps(userProp, mData.mPropList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iNode.getProperties().getPropertyHeader(<span class=\"stringliteral\">&quot;locator&quot;</span>) != NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::ICompoundProperty props = iNode.getProperties();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::AbcCoreAbstract::PropertyHeader * locHead =</div>\n\
<div class=\"line\">            props.getPropertyHeader(<span class=\"stringliteral\">&quot;locator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (locHead != NULL &amp;&amp; locHead-&gt;isScalar() &amp;&amp;</div>\n\
<div class=\"line\">            locHead-&gt;getDataType().getPod() == Alembic::Util::kFloat64POD &amp;&amp;</div>\n\
<div class=\"line\">            locHead-&gt;getDataType().getExtent() == 6)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Abc::IScalarProperty locProp(props, <span class=\"stringliteral\">&quot;locator&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> isConstant = locProp.isConstant();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Alembic::Abc::IScalarProperty visProp = getVisible(iNode,</div>\n\
<div class=\"line\">                isConstant, mData.mPropList, mData.mAnimVisStaticObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// add animated locator to the list</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">                mData.mLocList.push_back(iNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                hasDag = getDagPathByChildName(mConnectDagNode,</div>\n\
<div class=\"line\">                    iNode.getName());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    xformObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        mData.mLocObjList.push_back(xformObj);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                xformObj = create(iNode, mParent, locProp);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mData.mLocObjList.push_back(xformObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (xformObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                addProps(arbProp, xformObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                addProps(userProp, xformObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                setConstantVisibility(visProp, xformObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( mAction &gt;= CONNECT )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!xformObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aaed482186e74e234db8ea7fc0c1bbfb1\">MFn::kLocator</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;No connection done for node &#39;&quot;</span>);</div>\n\
<div class=\"line\">                    theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(iNode.getName().c_str());</div>\n\
<div class=\"line\">                    theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&#39; with &quot;</span>);</div>\n\
<div class=\"line\">                    theError += mConnectDagNode.fullPathName();</div>\n\
<div class=\"line\">                    printError(theError);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                addToPropList(firstProp, xformObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mConnectDagNode.pop();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>    <span class=\"comment\">// transform node</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name(iNode.getName().c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numChildren = iNodeObject-&gt;getNumChildren();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isConstant = iNode.getSchema().isConstant();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::IScalarProperty visProp = getVisible(iNode,</div>\n\
<div class=\"line\">            isConstant, mData.mPropList, mData.mAnimVisStaticObjList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformSample samp;</div>\n\
<div class=\"line\">        iNode.getSchema().get(samp, 0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mData.mXformList.push_back(iNode);</div>\n\
<div class=\"line\">            mData.mIsComplexXform.push_back(isComplex(samp));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isConstant &amp;&amp; visProp.valid() &amp;&amp; !visProp.isConstant())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">             mData.mAnimVisStaticObjList.push_back(iNode);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                xformObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// There might be children under the current DAG node that</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// doesn&#39;t exist in the file.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove them if the -removeIfNoUpdate flag is set</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((mAction == REMOVE || mAction == CREATE_REMOVE) &amp;&amp; hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numDags = mConnectDagNode.childCount();</div>\n\
<div class=\"line\">            std::vector&lt;MDagPath&gt; dagToBeRemoved;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// get names of immediate children so we can compare with</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the hierarchy in the scene</span></div>\n\
<div class=\"line\">            std::set&lt; std::string &gt; childNodesInFile;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numChildren; ++j)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Abc::IObject child = iNodeObject-&gt;getChild(j)-&gt;object();</div>\n\
<div class=\"line\">                childNodesInFile.insert(child.getName());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numDags; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> child = mConnectDagNode.child(i);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> fn(child, &amp;status);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( status == MS::kSuccess )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::string childName = fn.fullPathName().asChar();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> found = childName.rfind(<span class=\"stringliteral\">&quot;|&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (found != std::string::npos)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        childName = childName.substr(</div>\n\
<div class=\"line\">                            found+1, childName.length() - found);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (childNodesInFile.find(childName)</div>\n\
<div class=\"line\">                            == childNodesInFile.end())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">                            getDagPathByName(fn.fullPathName(), dagPath);</div>\n\
<div class=\"line\">                            dagToBeRemoved.push_back(dagPath);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (dagToBeRemoved.size() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dagSize =</div>\n\
<div class=\"line\">                    <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(dagToBeRemoved.size());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; dagSize; i++ )</div>\n\
<div class=\"line\">                    removeDagNode(dagToBeRemoved[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// just create the node</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> trans;</div>\n\
<div class=\"line\">            xformObj = trans.<a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aadb18f8588670c77223658e8d921d483\">create</a>(mParent, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;Failed to create transform node &quot;</span>);</div>\n\
<div class=\"line\">                theError += name;</div>\n\
<div class=\"line\">                printError(theError);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            trans.<a name=\"a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a386bb83443e16a98e6fa10c683e76b6c\">setName</a>(name);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (xformObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setConstantVisibility(visProp, xformObj);</div>\n\
<div class=\"line\">            addProps(arbProp, xformObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            addProps(userProp, xformObj, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mAction &gt;= CONNECT)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (xformObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::vector&lt;std::string&gt; transopNameList;</div>\n\
<div class=\"line\">                connectToXform(samp, isConstant, xformObj, transopNameList,</div>\n\
<div class=\"line\">                    mData.mPropList, firstProp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!isConstant)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    SampledPair sampPair(xformObj, transopNameList);</div>\n\
<div class=\"line\">                    mData.mXformOpList.push_back(sampPair);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                addToPropList(firstProp, xformObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (xformObj != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError = mConnectDagNode.partialPathName();</div>\n\
<div class=\"line\">                theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; is not compatible as a transform node. &quot;</span>);</div>\n\
<div class=\"line\">                theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Connection failed.&quot;</span>);</div>\n\
<div class=\"line\">                printError(theError);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> saveParent = xformObj;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParent = saveParent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            this-&gt;visit(iNodeObject-&gt;getChild(i));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mConnectDagNode.pop();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> CreateSceneVisitor::createEmptyObject(AlembicObjectPtr iNodeObject)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::IObject iNode = iNodeObject-&gt;object();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> xformObj = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name(iNode.getName().c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numChildren = iNodeObject-&gt;getNumChildren();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasDag = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAction != NONE &amp;&amp; mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasDag = getDagPathByChildName(mConnectDagNode, iNode.getName());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            xformObj = mConnectDagNode.node();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// There might be children under the current DAG node that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// doesn&#39;t exist in the file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove them if the -removeIfNoUpdate flag is set</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((mAction == REMOVE || mAction == CREATE_REMOVE) &amp;&amp;</div>\n\
<div class=\"line\">        mConnectDagNode.isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numDags = mConnectDagNode.childCount();</div>\n\
<div class=\"line\">        std::vector&lt;MDagPath&gt; dagToBeRemoved;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get names of immediate children so we can compare with</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the hierarchy in the scene</span></div>\n\
<div class=\"line\">        std::set&lt; std::string &gt; childNodesInFile;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numChildren; ++j)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Abc::IObject child = iNodeObject-&gt;getChild(j)-&gt;object();</div>\n\
<div class=\"line\">            childNodesInFile.insert(child.getName());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numDags; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> child = mConnectDagNode.child(i);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> fn(child, &amp;status);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( status == MS::kSuccess )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string childName = fn.fullPathName().asChar();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> found = childName.rfind(<span class=\"stringliteral\">&quot;|&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (found != std::string::npos)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    childName = childName.substr(</div>\n\
<div class=\"line\">                        found+1, childName.length() - found);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (childNodesInFile.find(childName)</div>\n\
<div class=\"line\">                        == childNodesInFile.end())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">                        getDagPathByName(fn.fullPathName(), dagPath);</div>\n\
<div class=\"line\">                        dagToBeRemoved.push_back(dagPath);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagToBeRemoved.size() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dagSize =</div>\n\
<div class=\"line\">                <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(dagToBeRemoved.size());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; dagSize; i++ )</div>\n\
<div class=\"line\">                removeDagNode(dagToBeRemoved[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// just create the node</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!hasDag &amp;&amp; (mAction == CREATE || mAction == CREATE_REMOVE ))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> trans;</div>\n\
<div class=\"line\">        xformObj = trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#aadb18f8588670c77223658e8d921d483\">create</a>(mParent, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;Failed to create transform node &quot;</span>);</div>\n\
<div class=\"line\">            theError += name;</div>\n\
<div class=\"line\">            printError(theError);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a386bb83443e16a98e6fa10c683e76b6c\">setName</a>(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> saveParent = xformObj;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mParent = saveParent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        this-&gt;visit(iNodeObject-&gt;getChild(i));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (hasDag)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mConnectDagNode.pop();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";