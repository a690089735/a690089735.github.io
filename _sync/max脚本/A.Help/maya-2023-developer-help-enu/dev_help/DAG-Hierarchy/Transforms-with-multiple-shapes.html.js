var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n\
<script type=\"text/javascript\" src=\"../../scripts/prettify.js\"></script><script src=\"../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /><meta name=\"generator\" content=\"pandoc\" /><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><script type=\"text/javascript\" src=\"../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Transforms with multiple shapes</title>\n\
   </head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script></script><script></script><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Transforms with multiple shapes</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"transforms-with-multiple-shapes\"></a></div>\n\
<p>A transform node can have any number of transform nodes as children. In general, a transform node can only have a single shape node as a child, and when viewing the DAG through an interactive window this will always be the case. However when examining the DAG through the API you will find that transforms may have multiple shape nodes as children. This happens when the original shape under the transform has been modified by the dependency graph. To maintain the transformations on the result of the dependency graph, the result is placed under the same transform as the original node. The new node would have the same DAG transforms applied as the original, but would be modified in some way (for example, its CVs could have been moved). When this happens, only the final product is visible in an interactive window, and the original nodes are historical.</p>\n\
<div class=\'figure\'><img src=\'dev_help/images/comp_Transform04.png\' title=\'\' /></div>\n\
<p>|Transform1|Shape1 is the original historical object while |Transform1|Shape1a is the actual object visible in any interactive window. |Transform1|Shape1 is also called an intermediate object.This is important later when working with the dependency graph.</p>\n\
<p>Warning: If you use the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath::extendToShape()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html#a658d9664035ff84ffefa217c0e45cc88&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html#a6bbdc34b5bfd9747bfc59ad21771f7c6&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath::extendToShape()</a></span> method on a path whose last node is a transform that contains multiple shapes, the first child shape node will be the node that is added onto the end of the path. If this is not the desired node, it is recommended that you not use the <span class=\'code\'>extendToShape()</span> method. Instead, use the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath::child()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html#acf3680f39b19e4b44fe459efa2b76219&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html#ad2623788dfe214b4e010f22d8b5d6b6a&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath::child()</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath::childCount()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html#abc2e6e8bf06454a962d1c0b72b63eab0&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath::childCount()</a></span> methods to help examine and access the desired shape node.</p>\n\
<p>Additionally, there is an <span class=\'code\'>MDagPath::extendToShapeDirectlyBelow(unsigned int index)</span> method that can be used to extend to the correct child shape.</p>\n\
<div class=\'section\'><a id=\"the-underworld\"></a><h2 id=\"the-underworld\">The Underworld</h2></div>\n\
<p>The &quot;underworld&quot; is a name given to the parameter space of a shape node, such as the UV space of a NURBS surface. Nodes and whole subgraphs of nodes may be defined in this underworld space.</p>\n\
<p>For example, the transform and shape nodes that define a curve on a NURBS surface. The control points defining the curve are in the UV space of the surface. The paths that uniquely identify the nodes of an underworld are rooted inside the shape node which defines the parameter space of the underworld. The first node of an underworld path is the first node that is defined in the parameter space of the containing shape. Most likely this first node is a transform node.</p>\n\
<p>Underworld paths are specified in Maya like regular paths, using the &quot;|&quot; character to separate the node names in the path. The extra nomenclature is the use of the &quot;-&gt;&quot; characters to specify the transition between the shape node and the root node of the underworld path.</p>\n\
<p>For example, the complete specification of a path to a curve on surface node of a NURBS surface could be listed as |SurfaceTransform|NURBSSurface-&gt;UnderworldTransform|CurvesShape. Underworlds may be recursively defined on the shapes in the underworld as long as the shapes have some parameter space which defines them.</p>\n\
<p>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath</a></span> contains methods for accessing the different paths from a shape down through its underworld. The methods <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath::pathCount()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html#a8f653e0d5b6dca7a9d4ae9a635f3cd92&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html#a98605c367077c3a3f1dbeb00d01fab2a&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath::pathCount()</a></span> method returns the total number of paths represented by the given <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath</a></span> instance. In the above curve on surface example, if the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath</a></span> instance represents the path down to the curve shape in the underworld, the pathCount would be 2. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath::getPath()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html#a45d0e6118fefc8c6e0b86b50234da810&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html#a54df9190d589a6e0ac25740b139a0718&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath::getPath()</a></span> method returns a path, either in the underworld or in the 3D space. Path 0 always specifies the 3D path. Path 1 specifies the path in the underworld directly inside the shape at the end of path 0. Path 2 specifies the path in the underworld inside the shape at the end of path 1, and so forth.</p>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";