var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n\
<script type=\"text/javascript\" src=\"../../scripts/prettify.js\"></script><script src=\"../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /><meta name=\"generator\" content=\"pandoc\" /><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><script type=\"text/javascript\" src=\"../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Differences between the Maya .NET API and the Maya C++ API</title>\n\
   </head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script></script><script></script><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Differences between the Maya .NET API and the Maya C++ API</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"differences-between-the-maya-.net-api-and-the-maya-c-api\"></a></div>\n\
<p>The primary differences between the Maya .NET API and the Maya C++ API are:</p>\n\
<ul>\n\
<li><p><strong>Properties instead of getters and setters</strong> – Many of the getter and setter functions in the C++ API have been mapped to C# properties. For instance, the methods <span class=\'code\'>isInstanceable</span> and <span class=\'code\'>setInstanceable</span> of the class <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDagNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDagNode</a></span> are now exposed as a C# property called <span class=\'code\'>isInstanceable</span> (with get and set accessors).</p>\n\
<p>Getter functions are functions that return a value, have no arguments, and that have no observable effect on the state of the application. Getter function names start with the prefix get, is, has, or can; or are qualified as a “const” function in the C++ header files. Setter functions are void functions that have a single argument, start with the prefix set, and that have the same root name as a getter function. Getter functions with a corresponding setter function (same root name) are mapped to read-write properties; otherwise, they are mapped to read-only properties. Properties have the same name as the getter function but with the prefix removed.</p>\n\
<p>In certain cases, the names of the properties had to be changed because the new property name conflicted with an existing method name. The word <span class=\'code\'>Property</span> was added to the new property name. For example, <span class=\'code\'>index()</span> became <span class=\'code\'>indexProperty</span>.</p>\n\
<p>For more information regarding C# properties, see MSDN at <a href=\'http://msdn.microsoft.com/en-us/default.aspx\' title=\'\' target=\'_blank\'>http://msdn.microsoft.com/en-us/default.aspx</a> and <a href=\'http://msdn.microsoft.com/en-us/library/x9fsa0sw%28v=vs.100%29.aspx\' title=\'\' target=\'_blank\'>C# properties</a>.</p></li>\n\
<li><p><strong>Events instead of function pointers</strong> – The C# event pattern replaces the message registration mechanism of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_message.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMessage</a></span> derived classes (for example, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_scene_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_scene_message.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneMessage</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MNodeMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_node_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_node_message.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MNodeMessage</a></span>, and so forth). Therefore, you can register or unregister your callbacks by simply adding or removing them to/from the corresponding event handler of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_message.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMessage</a></span> derived class.</p>\n\
<p>For instance, do <span class=\'code\'>MDagMessage.ParentAddedEvent += callback</span> instead of <span class=\'code\'>MDagMessage::addParentAddedCallback(callback)</span>.</p>\n\
<p>For the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_scene_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_scene_message.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneMessage</a></span> class, each message identified by a value of the enum <span class=\'code\'>Message</span> now has an independent event handler; therefore, the enum is no longer meaningful. For instance, do <span class=\'code\'>MSceneMessage.SceneUpdate += callback</span> instead of <span class=\'code\'>MSceneMessage::addCallback( <a href=\"javascript:void(0)\" data-symbol=\"MSceneMessage::kSceneUpdate\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa3fed96219df72e729d0b7049c4754927&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneMessage::kSceneUpdate</a>, callback )</span>.</p>\n\
<p>For callbacks related to an instance of an object (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPlug\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_plug.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_plug.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPlug</a></span>, and so forth), the event handler can be found directly in the class of that object. For instance, do <span class=\'code\'>obj.NodeAddedToModel += callback</span> (with <span class=\'code\'>obj</span> of type <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MObject\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObject</a></span>) instead of <span class=\'code\'>MModelMessage::addNodeAddedToModelCallback(obj, callback)</span>.</p>\n\
<p>To avoid memory leaks, you must deregister your callbacks (by removing them from the corresponding event handler) when the callbacks are no longer needed. A new mechanism has been added to automatically deregister the callbacks when the plug-in is unloaded from Maya.</p>\n\
<p>To see how events are used, refer to the <span class=\'code\'>pluginCallbacks</span> example in the <span class=\'code\'>devkit\\dotnet\\examples</span> folder of your Developer Kit installation. For more information on C# events see <a href=\'http://msdn.microsoft.com/en-us/library/awbftdfh%28v=vs.100%29.aspx\' title=\'\' target=\'_blank\'>C# events</a> in MSDN.</p></li>\n\
<li><strong>Exceptions instead of MStatus failure codes</strong> – In case of failure or exceptional cases, a plug-in should raise an exception instead of returning an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a></span>. With this pattern adopted, most functions of the SDK return <span class=\'code\'>void</span> instead of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a></span>, which does not exist in the C# SDK. The only exceptions to this rule are those methods that must return information to Maya that did so via <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a></span> in C++. For more information, see <a href=\'#!/url=./dev_help/Maya-NET-API/Removal-of-MStatus-return-codes.html\' title=\'\'>Removal of MStatus return codes from .NET API</a>.</li>\n\
<li><p><strong>Usage of IEnumerable<t></t></strong> – Iterators support <span class=\'code\'>IEnumerable&lt;T&gt;</span>, which facilitates the usage of LINQ. For more information on <span class=\'code\'>IEnumerable</span>, see <a href=\'#!/url=./dev_help/Maya-NET-API/Using-IEnumerable-and-LINQ-with.html\' title=\'\'>Using IEnumerable and LINQ with the Maya .NET API</a> and <a href=\'http://msdn.microsoft.com/en-us/library/system.collections.ienumerable%28v=vs.100%29.aspx\' title=\'\' target=\'_blank\'>IEnumerable Interface</a> in MSDN.</p></li>\n\
<li><strong>Support for .NET collections</strong> – Specialized collection classes in the Maya API (such as <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPointArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_point_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_point_array.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPointArray</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MIntArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_int_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_int_array.html&quot;,&quot;title&quot;:&quot;Python 2.0 API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MIntArray</a></span>, and so forth) support the C# interfaces <span class=\'code\'>IEnumerable</span> and <span class=\'code\'>IList</span>. In addition, they have constructors that accept a C# array and a method that returns a C# array. For more information on C# arrays, see <a href=\'http://msdn.microsoft.com/en-us/library/9b9dty7d%28v=vs.100%29.aspx\' title=\'\' target=\'_blank\'>Arrays</a> in MSDN.</li>\n\
<li><strong>No OpenMayaFx classes</strong> – The classes from the OpenMayaFX module have not been ported to the .NET Maya API.</li>\n\
<li><p><strong>MDockStation</strong> – This is a new class defined to facilitate docking of WPF windows within the Maya UI. In addition, with <span class=\'code\'>MDockStation</span>, you can also embed any HWND in Maya (not only WPF&#39;s, but for example, a WF window). For more information on WPF controls, see <a href=\'http://msdn.microsoft.com/en-us/library/aa970268%28v=vs.100%29.aspx\' title=\'\' target=\'_blank\'>Introduction to WPF</a> in MSDN.</p></li>\n\
</ul>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";