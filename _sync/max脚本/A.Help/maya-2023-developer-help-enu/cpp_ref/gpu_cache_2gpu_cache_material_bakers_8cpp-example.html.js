var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheMaterialBakers.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_material_bakers_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheMaterialBakers.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheMaterialBakers.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheMaterialBakers.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheMaterialNodes.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheShapeNode.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheUtil.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;set&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;functional&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Bakers for concrete materials.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>MaterialBakers {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This class is the base class for all shading node bakers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>BaseMaterialNodeBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::shared_ptr&lt;BaseMaterialNodeBaker&gt; Ptr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a material baker for the given DG node.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> BaseMaterialNodeBaker::Ptr create(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;         node,</div>\n\
<div class=\"line\">            std::set&lt;std::string&gt;* traversedNodes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        BaseMaterialNodeBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : fNode(node), fTraversedNodes(NULL)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~BaseMaterialNodeBaker()</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        BaseMaterialNodeBaker(<span class=\"keyword\">const</span> BaseMaterialNodeBaker&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">        BaseMaterialNodeBaker&amp; operator=(<span class=\"keyword\">const</span> BaseMaterialNodeBaker&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the baked material node and collect the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// properties and plugs for sampling.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> setupNetwork()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// There are virtual function calls so we can&#39;t do this in c&#39;tor.</span></div>\n\
<div class=\"line\">            fBakedNode = createNode(fNode.name());</div>\n\
<div class=\"line\">            assert(fBakedNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            collectPlugsAndProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample the shading node at the given time.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sample(<span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            assert(fBakedNode); </div>\n\
<div class=\"line\">            <span class=\"comment\">// Loop over all channels.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(Channel&amp; channel : fChannels) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Sample the plug and add the sample to the property</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (channel.prop()-&gt;type()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> MaterialProperty::kBool:</div>\n\
<div class=\"line\">                    sampleBoolPlug(time, channel.plug(), channel.prop());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> MaterialProperty::kInt32:</div>\n\
<div class=\"line\">                    sampleInt32Plug(time, channel.plug(), channel.prop());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> MaterialProperty::kFloat:</div>\n\
<div class=\"line\">                    sampleFloatPlug(time, channel.plug(), channel.prop());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> MaterialProperty::kFloat2:</div>\n\
<div class=\"line\">                    sampleFloat2Plug(time, channel.plug(), channel.prop());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> MaterialProperty::kFloat3:</div>\n\
<div class=\"line\">                    sampleFloat3Plug(time, channel.plug(), channel.prop());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> MaterialProperty::kRGB:</div>\n\
<div class=\"line\">                    sampleFloat3PlugAsColor(time, channel.plug(), channel.prop());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> MaterialProperty::kString:</div>\n\
<div class=\"line\">                    sampleStringPlug(time, channel.plug(), channel.prop());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    assert(0); <span class=\"comment\">// the data type is not implemented!</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Recursively sample source nodes.</span></div>\n\
<div class=\"line\">                BaseMaterialNodeBaker::Ptr&amp; srcBaker = channel.srcBaker();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (srcBaker) {</div>\n\
<div class=\"line\">                    srcBaker-&gt;sample(time);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the shading node to the graph.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The graph will have the ownership of all the shading nodes.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addToGraph(MaterialGraph::MPtr&amp; graph)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            assert(fBakedNode);  <span class=\"comment\">// created by derived classes</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fBakedNode) {</div>\n\
<div class=\"line\">                graph-&gt;addNode(fBakedNode);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Recursively add the connected shading nodes</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(Channel&amp; channel : fChannels) {</div>\n\
<div class=\"line\">                BaseMaterialNodeBaker::Ptr&amp; srcBaker = channel.srcBaker();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (srcBaker) {</div>\n\
<div class=\"line\">                    srcBaker-&gt;addToGraph(graph);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Connect the shading nodes.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> connect()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Loop over all the channels and connect to its source node.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(Channel&amp; channel : fChannels) {</div>\n\
<div class=\"line\">                MaterialProperty::MPtr     dstProp  = channel.prop();</div>\n\
<div class=\"line\">                BaseMaterialNodeBaker::Ptr srcBaker = channel.srcBaker();</div>\n\
<div class=\"line\">                MaterialProperty::MPtr     srcProp  = channel.srcProp();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Connect to srcNode.srcProp</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dstProp &amp;&amp; srcBaker &amp;&amp; srcProp) {</div>\n\
<div class=\"line\">                    MaterialNode::Ptr srcNode = srcBaker-&gt;bakedNode();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (srcNode) {</div>\n\
<div class=\"line\">                        dstProp-&gt;connect(srcNode, srcProp);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Return the baked material node.</span></div>\n\
<div class=\"line\">        MaterialNode::MPtr bakedNode()</div>\n\
<div class=\"line\">        { assert(fBakedNode); <span class=\"keywordflow\">return</span> fBakedNode; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Override by derived classes.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name) = 0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span>               collectPlugsAndProperties() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample a Maya bool plug</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleBoolPlug(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time, <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds = time.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> value = plug.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isDefault() || prop-&gt;asBool(timeInSeconds) != value) {</div>\n\
<div class=\"line\">                prop-&gt;setBool(timeInSeconds, value);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample a Maya int plug</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleInt32Plug(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds = time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> value = plug.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isDefault() || prop-&gt;asInt32(timeInSeconds) != value) {</div>\n\
<div class=\"line\">                prop-&gt;setInt32(timeInSeconds, value);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample a Maya float plug</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleFloatPlug(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds = time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> value = plug.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isDefault() || prop-&gt;asFloat(timeInSeconds) != value) {</div>\n\
<div class=\"line\">                prop-&gt;setFloat(timeInSeconds, value);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample a Maya (float,float) plug</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleFloat2Plug(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds = time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> data = plug.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>();</div>\n\
<div class=\"line\">            assert(data.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a12074ae4ecdf28e10a09c28af61942c0\">MFn::kNumericData</a>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> value[2], prev[2];</div>\n\
<div class=\"line\">            <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>(data).<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6a9240f3a50508d68b447d21cfdb48e3\">getData2Float</a>(value[0], value[1]);</div>\n\
<div class=\"line\">            prop-&gt;asFloat2(timeInSeconds, prev[0], prev[1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isDefault() || value[0] != prev[0] || value[1] != prev[1]) {</div>\n\
<div class=\"line\">                prop-&gt;setFloat2(timeInSeconds, value[0], value[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample a Maya (float,float,float) plug</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleFloat3Plug(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds = time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> data = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>();</div>\n\
<div class=\"line\">            assert(data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a12074ae4ecdf28e10a09c28af61942c0\">MFn::kNumericData</a>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> value[3], prev[3];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>(data).<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1ed1d66504a91f683f126491d2f6ffc8\">getData3Float</a>(value[0], value[1], value[2]);</div>\n\
<div class=\"line\">            prop-&gt;asFloat3(timeInSeconds, prev[0], prev[1], prev[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isDefault() || value[0] != prev[0] || value[1] != prev[1] || value[2] != prev[2]) {</div>\n\
<div class=\"line\">                prop-&gt;setFloat3(timeInSeconds, value[0], value[1], value[2]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample a Maya (float,float,float) plug as MColor</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleFloat3PlugAsColor(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, MaterialProperty::MPtr prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds = time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> data = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>();</div>\n\
<div class=\"line\">            assert(data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a12074ae4ecdf28e10a09c28af61942c0\">MFn::kNumericData</a>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> value;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a>(data).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1ed1d66504a91f683f126491d2f6ffc8\">getData3Float</a>(value.r, value.g, value.b);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isDefault() || value != prop-&gt;asColor(timeInSeconds)) {</div>\n\
<div class=\"line\">                prop-&gt;setColor(timeInSeconds, value);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sample a Maya MString plug</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleStringPlug(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds = time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> value = plug.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isDefault() || value != prop-&gt;asString(timeInSeconds)) {</div>\n\
<div class=\"line\">                prop-&gt;setString(timeInSeconds, value);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Register the plug and its source plugs for sampling.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> sampleChannel(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, MaterialProperty::MPtr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the plug by its name</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = fNode.findPlug(name, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            assert(!plug.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\">            assert(prop);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() &amp;&amp; prop) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Track the connection to the source node.</span></div>\n\
<div class=\"line\">                BaseMaterialNodeBaker::Ptr srcBaker;</div>\n\
<div class=\"line\">                MaterialProperty::MPtr     srcProp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (plug.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a45b5260464fc2426b6d5806c9658e1e2\">isDestination</a>()) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Find the source node.</span></div>\n\
<div class=\"line\">                    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> plugArray;</div>\n\
<div class=\"line\">                    plug.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(plugArray, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                    assert(plugArray.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1);</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (plugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcPlug = plugArray[0];</div>\n\
<div class=\"line\">                        assert(!srcPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> srcNode = srcPlug.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">                        assert(!srcNode.isNull());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// If there is a circular connection, we stop tracking the</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// connection to the source node. Instead, we sample the</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// plug value directly.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!isTraversed(srcNode)) {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// Create the baker for the source node.</span></div>\n\
<div class=\"line\">                            srcBaker = BaseMaterialNodeBaker::create(srcNode, fTraversedNodes);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (srcBaker) {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// We recognize the node. Find the source property.</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">for</span>(Channel&amp; channel : srcBaker-&gt;fChannels) {</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">if</span> (channel.plug() == srcPlug) {</div>\n\
<div class=\"line\">                                        srcProp = channel.prop();</div>\n\
<div class=\"line\">                                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                    }</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// Can&#39;t find a source property.. give up.</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (!srcProp) {</div>\n\
<div class=\"line\">                                    srcBaker.reset();</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Add this channel to the list (with optional source baker)</span></div>\n\
<div class=\"line\">                fChannels.push_back(Channel(plug, prop, srcBaker, srcProp));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the traversed nodes to prevent infinite recursive.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> setTraversedNodes(std::set&lt;std::string&gt;* traversedNodes)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTraversedNodes = traversedNodes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Query if the node has been traversed.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isTraversed(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string name = <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>(node).<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>().<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            assert(!name.empty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fTraversedNodes &amp;&amp; (*fTraversedNodes).find(name) != (*fTraversedNodes).end()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the traversed state of the node.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> setTraversed(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string name = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>(node).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            assert(!name.empty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fTraversedNodes) {</div>\n\
<div class=\"line\">                (*fTraversedNodes).insert(name);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">class </span>Channel</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">            Channel(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp;                plug, </div>\n\
<div class=\"line\">                    MaterialProperty::MPtr&amp;     prop,</div>\n\
<div class=\"line\">                    BaseMaterialNodeBaker::Ptr&amp; srcBaker,</div>\n\
<div class=\"line\">                    MaterialProperty::MPtr&amp;     srcProp)</div>\n\
<div class=\"line\">                : fPlug(plug), </div>\n\
<div class=\"line\">                  fProp(prop), </div>\n\
<div class=\"line\">                  fSrcBaker(srcBaker), </div>\n\
<div class=\"line\">                  fSrcProp(srcProp)</div>\n\
<div class=\"line\">            {}</div>\n\
<div class=\"line\">            ~Channel() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp;                plug()     { <span class=\"keywordflow\">return</span> fPlug; }</div>\n\
<div class=\"line\">            MaterialProperty::MPtr&amp;     prop()     { <span class=\"keywordflow\">return</span> fProp; }</div>\n\
<div class=\"line\">            BaseMaterialNodeBaker::Ptr&amp; srcBaker() { <span class=\"keywordflow\">return</span> fSrcBaker; }</div>\n\
<div class=\"line\">            MaterialProperty::MPtr&amp;     srcProp()  { <span class=\"keywordflow\">return</span> fSrcProp; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>                      fPlug;</div>\n\
<div class=\"line\">            MaterialProperty::MPtr     fProp;</div>\n\
<div class=\"line\">            BaseMaterialNodeBaker::Ptr fSrcBaker;</div>\n\
<div class=\"line\">            MaterialProperty::MPtr     fSrcProp;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\">        std::vector&lt;Channel&gt; fChannels;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>      fNode;</div>\n\
<div class=\"line\">        MaterialNode::MPtr     fBakedNode;</div>\n\
<div class=\"line\">        std::set&lt;std::string&gt;* fTraversedNodes;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>SurfaceMaterialBaker : <span class=\"keyword\">public</span> BaseMaterialNodeBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        SurfaceMaterialBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : BaseMaterialNodeBaker(node) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;SurfaceMaterial&gt;(name);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> collectPlugsAndProperties()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::shared_ptr&lt;SurfaceMaterial&gt; surfaceMaterial = </div>\n\
<div class=\"line\">                std::dynamic_pointer_cast&lt;SurfaceMaterial&gt;(bakedNode());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;outColor&quot;</span>,        surfaceMaterial-&gt;OutColor);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;outTransparency&quot;</span>, surfaceMaterial-&gt;OutTransparency);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>LambertBaker : <span class=\"keyword\">public</span> SurfaceMaterialBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        LambertBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : SurfaceMaterialBaker(node) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;LambertMaterial&gt;(name);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> collectPlugsAndProperties()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            SurfaceMaterialBaker::collectPlugsAndProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::shared_ptr&lt;LambertMaterial&gt; lambert = </div>\n\
<div class=\"line\">                std::dynamic_pointer_cast&lt;LambertMaterial&gt;(bakedNode());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;color&quot;</span>,             lambert-&gt;Color);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;transparency&quot;</span>,      lambert-&gt;Transparency);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;ambientColor&quot;</span>,      lambert-&gt;AmbientColor);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;incandescence&quot;</span>,     lambert-&gt;Incandescence);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;diffuse&quot;</span>,           lambert-&gt;Diffuse);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;translucence&quot;</span>,      lambert-&gt;Translucence);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;translucenceDepth&quot;</span>, lambert-&gt;TranslucenceDepth);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;translucenceFocus&quot;</span>, lambert-&gt;TranslucenceFocus);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;hideSource&quot;</span>,        lambert-&gt;HideSource);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;glowIntensity&quot;</span>,     lambert-&gt;GlowIntensity);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>PhongBaker : <span class=\"keyword\">public</span> LambertBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        PhongBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : LambertBaker(node) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;PhongMaterial&gt;(name);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> collectPlugsAndProperties()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            LambertBaker::collectPlugsAndProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::shared_ptr&lt;PhongMaterial&gt; phong = </div>\n\
<div class=\"line\">                std::dynamic_pointer_cast&lt;PhongMaterial&gt;(bakedNode());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;cosinePower&quot;</span>,    phong-&gt;CosinePower);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;specularColor&quot;</span>,  phong-&gt;SpecularColor);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;reflectivity&quot;</span>,   phong-&gt;Reflectivity);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;reflectedColor&quot;</span>, phong-&gt;ReflectedColor);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>BlinnBaker : <span class=\"keyword\">public</span> LambertBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        BlinnBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : LambertBaker(node) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;BlinnMaterial&gt;(name);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> collectPlugsAndProperties()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            LambertBaker::collectPlugsAndProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::shared_ptr&lt;BlinnMaterial&gt; phong = </div>\n\
<div class=\"line\">                std::dynamic_pointer_cast&lt;BlinnMaterial&gt;(bakedNode());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;eccentricity&quot;</span>,   phong-&gt;Eccentricity);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;specularRollOff&quot;</span>,phong-&gt;SpecularRollOff);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;specularColor&quot;</span>,  phong-&gt;SpecularColor);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;reflectivity&quot;</span>,   phong-&gt;Reflectivity);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;reflectedColor&quot;</span>, phong-&gt;ReflectedColor);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Texture2dBaker : <span class=\"keyword\">public</span> BaseMaterialNodeBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        Texture2dBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : BaseMaterialNodeBaker(node) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name) <span class=\"keyword\">override</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> collectPlugsAndProperties()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::shared_ptr&lt;Texture2d&gt; texture2d = </div>\n\
<div class=\"line\">                std::dynamic_pointer_cast&lt;Texture2d&gt;(bakedNode());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;defaultColor&quot;</span>, texture2d-&gt;DefaultColor);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;outColor&quot;</span>, texture2d-&gt;OutColor);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;outAlpha&quot;</span>, texture2d-&gt;OutAlpha);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>FileTextureBaker : <span class=\"keyword\">public</span> Texture2dBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        FileTextureBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : Texture2dBaker(node) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;FileTexture&gt;(name);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> collectPlugsAndProperties()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            Texture2dBaker::collectPlugsAndProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::shared_ptr&lt;FileTexture&gt; file = </div>\n\
<div class=\"line\">                std::dynamic_pointer_cast&lt;FileTexture&gt;(bakedNode());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;outTransparency&quot;</span>, file-&gt;OutTransparency);</div>\n\
<div class=\"line\">            sampleChannel(<span class=\"stringliteral\">&quot;fileTextureName&quot;</span>, file-&gt;FileTextureName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>UnknownTexture2dBaker : <span class=\"keyword\">public</span> Texture2dBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        UnknownTexture2dBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">            : Texture2dBaker(node) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialNode::MPtr createNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;UnknownTexture2d&gt;(name);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> collectPlugsAndProperties()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            Texture2dBaker::collectPlugsAndProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    BaseMaterialNodeBaker::Ptr BaseMaterialNodeBaker::create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;         node,</div>\n\
<div class=\"line\">        std::set&lt;std::string&gt;* traversedNodes)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        BaseMaterialNodeBaker::Ptr baker;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ac63710c958c0b5ec88dbe5ea5b026b66\">MFn::kPhong</a>)) {</div>\n\
<div class=\"line\">            baker = std::make_shared&lt;PhongBaker&gt;(std::ref(node));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a704312c00695bbbc10315c7cf15738fd\">MFn::kBlinn</a>)) {</div>\n\
<div class=\"line\">            baker = std::make_shared&lt;BlinnBaker&gt;(std::ref(node));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2af9af308555c50cf68e2c14595b680b\">MFn::kLambert</a>)) {</div>\n\
<div class=\"line\">            baker = std::make_shared&lt;LambertBaker&gt;(std::ref(node));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ac3bee92500cdc3a4ccbec4cb35e91f2a\">MFn::kFileTexture</a>)) {</div>\n\
<div class=\"line\">            baker = std::make_shared&lt;FileTextureBaker&gt;(std::ref(node));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6c4cc284d93d1816f92a7386ebe8df94\">MFn::kTexture2d</a>)) {</div>\n\
<div class=\"line\">            baker = std::make_shared&lt;UnknownTexture2dBaker&gt;(std::ref(node));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Recursively create connected bakers.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (baker) {</div>\n\
<div class=\"line\">            baker-&gt;setTraversedNodes(traversedNodes);</div>\n\
<div class=\"line\">            baker-&gt;setTraversed(node);</div>\n\
<div class=\"line\">            baker-&gt;setupNetwork();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> baker;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>MaterialBakers;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialBaker</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This class bakes a material graph that has a surface material as its root.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialBaker::MaterialGraphBaker</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MaterialGraphBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fRootBaker = BaseMaterialNodeBaker::create(node, &amp;fTraversedNodes);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~MaterialGraphBaker() {}</div>\n\
<div class=\"line\">    MaterialGraphBaker(<span class=\"keyword\">const</span> MaterialGraphBaker&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    MaterialGraphBaker&amp; operator=(<span class=\"keyword\">const</span> MaterialGraphBaker&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> sample(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fRootBaker) {</div>\n\
<div class=\"line\">            fRootBaker-&gt;sample(time);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> buildGraph()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fRootBaker) {</div>\n\
<div class=\"line\">            MaterialNode::Ptr rootNode = fRootBaker-&gt;bakedNode();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (rootNode) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create the material graph.</span></div>\n\
<div class=\"line\">                MaterialGraph::MPtr graph = std::make_shared&lt;MaterialGraph&gt;(rootNode-&gt;name());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Add all shading nodes to the graph</span></div>\n\
<div class=\"line\">                fRootBaker-&gt;addToGraph(graph);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Connect the shading nodes</span></div>\n\
<div class=\"line\">                fRootBaker-&gt;connect();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the root node of the graph</span></div>\n\
<div class=\"line\">                graph-&gt;setRootNode(rootNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fGraph = graph;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// We are done with the bakers</span></div>\n\
<div class=\"line\">            fRootBaker.reset();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MaterialGraph::Ptr <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fGraph;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    BaseMaterialNodeBaker::Ptr fRootBaker;</div>\n\
<div class=\"line\">    MaterialGraph::MPtr        fGraph;</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt;      fTraversedNodes;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialBaker::MaterialBaker()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialBaker::~MaterialBaker()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> MaterialBaker::addShapePath(<span class=\"keyword\">const</span> <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Must be a shape.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!dagPath.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a750b5e8123336c2306a300249b57201d\">MFn::kShape</a>)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if we are recursively baking gpuCache nodes</span></div>\n\
<div class=\"line\">    <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dagPath);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (dagNode.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a1d0bbd4d50dae591f8e003c0aedc8135\">typeId</a>() == ShapeNode::id) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ShapeNode* node = (<span class=\"keyword\">const</span> ShapeNode*)dagNode.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a4f2c53c9d1dcf25a6462c70fb25aead1\">userNode</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (node) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialGraphMap::Ptr materials = node-&gt;getCachedMaterial();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (materials) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Grab the existing materials.</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MaterialGraphMap::NamedMap&amp; graphs = materials-&gt;getGraphs();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!graphs.empty()) {</div>\n\
<div class=\"line\">                    fExistingGraphs.insert(graphs.cbegin(), graphs.cend());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find all connected materials.</span></div>\n\
<div class=\"line\">    InstanceMaterialLookup lookup(dagPath);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lookup.hasWholeObjectMaterial()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Single material applied to the whole object.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> surfaceMaterial = lookup.findWholeObjectSurfaceMaterial();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// No material, silently ignored.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (surfaceMaterial.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the name of the surface material</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgNode(surfaceMaterial);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = dgNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a new material baker</span></div>\n\
<div class=\"line\">        MaterialGraphBakers::iterator iter = fMaterialGraphBakers.find(name);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iter == fMaterialGraphBakers.end()) {</div>\n\
<div class=\"line\">            MaterialGraphBakerPtr baker = </div>\n\
<div class=\"line\">                std::make_shared&lt;MaterialGraphBaker&gt;(surfaceMaterial);</div>\n\
<div class=\"line\">            fMaterialGraphBakers.insert(std::make_pair(name, baker));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (lookup.hasComponentMaterials()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiple materials applied to components.</span></div>\n\
<div class=\"line\">        std::vector&lt;MObject&gt; surfaceMaterials;</div>\n\
<div class=\"line\">        lookup.findSurfaceMaterials(surfaceMaterials);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; surfaceMaterial : surfaceMaterials) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (surfaceMaterial.isNull()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the name of the surface material</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgNode(surfaceMaterial);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = dgNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create a new material baker</span></div>\n\
<div class=\"line\">            MaterialGraphBakers::iterator iter = fMaterialGraphBakers.find(name);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iter == fMaterialGraphBakers.end()) {</div>\n\
<div class=\"line\">                MaterialGraphBakerPtr baker = </div>\n\
<div class=\"line\">                    std::make_shared&lt;MaterialGraphBaker&gt;(surfaceMaterial);</div>\n\
<div class=\"line\">                fMaterialGraphBakers.insert(std::make_pair(name, baker));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> MaterialBaker::sample(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(MaterialGraphBakers::value_type&amp; val : fMaterialGraphBakers) {</div>\n\
<div class=\"line\">        val.second-&gt;sample(time);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> MaterialBaker::buildGraph()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(MaterialGraphBakers::value_type&amp; val : fMaterialGraphBakers) {</div>\n\
<div class=\"line\">        val.second-&gt;buildGraph();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialGraphMap::Ptr MaterialBaker::get()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    MaterialGraphMap::MPtr graphMap = std::make_shared&lt;MaterialGraphMap&gt;();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add baked materials.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialGraphBakers::value_type&amp; val : fMaterialGraphBakers) {</div>\n\
<div class=\"line\">        MaterialGraph::Ptr graph = val.second-&gt;get();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (graph) {</div>\n\
<div class=\"line\">            graphMap-&gt;addMaterialGraph(graph);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add existing materials</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> NamedMaterialGraphs::value_type&amp; val : fExistingGraphs) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (val.second &amp;&amp; !graphMap-&gt;find(val.first)) {</div>\n\
<div class=\"line\">            graphMap-&gt;addMaterialGraph(val.second);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> !graphMap-&gt;getGraphs().empty() ? graphMap : MaterialGraphMap::Ptr();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";