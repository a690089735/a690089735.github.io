var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: apiMeshShape/apiMeshData.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'api_mesh_shape_2api_mesh_data_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: apiMeshShape/apiMeshData.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">apiMeshShape/apiMeshData.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// apiMeshData.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;apiMeshData.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;apiMeshIterator.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;api_macros.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSingleIndexedComponent.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Ascii file IO defines</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kDblQteChar             &quot;\\&quot;&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kSpaceChar              &quot;   &quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kWrapString             &quot;\\n\\t\\t&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kVertexKeyword          &quot;v&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kNormalKeyword          &quot;vn&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kTextureKeyword         &quot;vt&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kFaceKeyword            &quot;face&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kUVKeyword              &quot;uv&quot; </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> apiMeshData::id( 0x80777 );</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> apiMeshData::typeName( <span class=\"stringliteral\">&quot;apiMeshData&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshData::apiMeshData() : fGeometry( NULL )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fGeometry = <span class=\"keyword\">new</span> apiMeshGeom;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">apiMeshData::~apiMeshData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != fGeometry ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> fGeometry;</div>\n\
<div class=\"line\">        fGeometry = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::readASCII( <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; argList, <span class=\"keywordtype\">unsigned</span>&amp; index )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    ASCII file input method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! readVerticesASCII(argList,index) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( ! readNormalsASCII(argList,++index) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( ! readFacesASCII(argList,++index) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( ! readUVASCII(argList,index) ) { </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::readBinary( istream&amp; <span class=\"comment\">/*in*/</span>, <span class=\"keywordtype\">unsigned</span> <span class=\"comment\">/*length*/</span> )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     NOT IMPLEMENTED</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::writeASCII( ostream&amp; out )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    ASCII file output method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! writeVerticesASCII(out) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( ! writeNormalsASCII(out) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( ! writeFacesASCII(out) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    writeUVASCII(out); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::writeBinary( ostream&amp; <span class=\"comment\">/*out*/</span> )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    NOT IMPLEMENTED</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> apiMeshData::copy ( <span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_data.html\">MPxData</a>&amp; other )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    *fGeometry = *(((<span class=\"keyword\">const</span> apiMeshData &amp;)other).fGeometry);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> apiMeshData::typeId() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Binary tag used to identify this kind of data</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> apiMeshData::id;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> apiMeshData::name() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    String name used to identify this kind of data</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> apiMeshData::typeName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> * apiMeshData::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> apiMeshData;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_iterator.html\">MPxGeometryIterator</a>* apiMeshData::iterator( <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp; componentList,</div>\n\
<div class=\"line\">                                            <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; component,</div>\n\
<div class=\"line\">                                            <span class=\"keywordtype\">bool</span> useComponents)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    apiMeshGeomIterator * result = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( useComponents ) {</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">new</span> apiMeshGeomIterator( fGeometry, componentList );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">new</span> apiMeshGeomIterator( fGeometry, component );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_iterator.html\">MPxGeometryIterator</a>* apiMeshData::iterator( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp; componentList,</div>\n\
<div class=\"line\">                                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; component,</div>\n\
<div class=\"line\">                                            <span class=\"keywordtype\">bool</span> useComponents,</div>\n\
<div class=\"line\">                                            <span class=\"keywordtype\">bool</span> <span class=\"comment\">/*world*/</span>) const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    apiMeshGeomIterator * result = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( useComponents ) {</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">new</span> apiMeshGeomIterator( fGeometry, componentList );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">new</span> apiMeshGeomIterator( fGeometry, component );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> apiMeshData::updateCompleteVertexGroup( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; component ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     Make sure complete vertex group data is up-to-date.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     Returns true if the component was updated, false if it was already ok.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     This is used by deformers when deforming the &quot;whole&quot; object and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     not just selected components.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> fnComponent( component, &amp;stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Make sure there is non-null geometry and that the component</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is &quot;complete&quot;. A &quot;complete&quot; component represents every </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// vertex in the shape.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( stat &amp;&amp; (NULL != fGeometry) &amp;&amp; (fnComponent.isComplete()) ) {</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> maxVerts ;</div>\n\
<div class=\"line\">        fnComponent.getCompleteData( maxVerts );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numVertices = fGeometry-&gt;vertices.length();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( (numVertices &gt; 0) &amp;&amp; (maxVerts != numVertices) ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Set the component to be complete, i.e. the elements in</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the component will be [0:numVertices-1]</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            fnComponent.setCompleteData( numVertices );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::writeUVASCII( ostream &amp;out )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> uvCount = fGeometry-&gt;uvcoords.uvcount(); </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> faceVertexCount = fGeometry-&gt;uvcoords.faceVertexIndex.length();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( uvCount &gt; 0 ) { </div>\n\
<div class=\"line\">        out &lt;&lt; <span class=\"stringliteral\">&quot;\\n&quot;</span>; </div>\n\
<div class=\"line\">        out &lt;&lt; kWrapString; </div>\n\
<div class=\"line\">        out &lt;&lt; kDblQteChar &lt;&lt; kUVKeyword &lt;&lt; kDblQteChar</div>\n\
<div class=\"line\">            &lt;&lt; kSpaceChar &lt;&lt; uvCount &lt;&lt; kSpaceChar &lt;&lt; faceVertexCount; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> i; </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> u, v; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i = 0; i &lt; uvCount; i ++ ) { </div>\n\
<div class=\"line\">            fGeometry-&gt;uvcoords.getUV( i, u, v ); </div>\n\
<div class=\"line\">            out &lt;&lt; kWrapString; </div>\n\
<div class=\"line\">            out &lt;&lt; u &lt;&lt; kSpaceChar; </div>\n\
<div class=\"line\">            out &lt;&lt; v &lt;&lt; kSpaceChar; </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> &amp;fvl = fGeometry-&gt;uvcoords.faceVertexIndex; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i = 0; i &lt; faceVertexCount; i ++ ) { </div>\n\
<div class=\"line\">            out &lt;&lt; kWrapString; </div>\n\
<div class=\"line\">            out &lt;&lt; fvl[i] &lt;&lt; kSpaceChar; </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::writeVerticesASCII( ostream&amp; out )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> vertex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vertexCount = fGeometry-&gt;vertices.length();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    out &lt;&lt; <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    out &lt;&lt; kWrapString;</div>\n\
<div class=\"line\">    out &lt;&lt; kDblQteChar &lt;&lt; kVertexKeyword &lt;&lt; kDblQteChar</div>\n\
<div class=\"line\">        &lt;&lt; kSpaceChar &lt;&lt; vertexCount;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;vertexCount; i++ ) {</div>\n\
<div class=\"line\">        vertex = fGeometry-&gt;vertices[i];</div>\n\
<div class=\"line\">        out &lt;&lt; kWrapString;</div>\n\
<div class=\"line\">        out &lt;&lt; vertex[0] &lt;&lt; kSpaceChar;</div>\n\
<div class=\"line\">        out &lt;&lt; vertex[1] &lt;&lt; kSpaceChar;</div>\n\
<div class=\"line\">        out &lt;&lt; vertex[2];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::writeNormalsASCII( ostream&amp; out )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> normal;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> normalCount = fGeometry-&gt;normals.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    out &lt;&lt; <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    out &lt;&lt; kWrapString;</div>\n\
<div class=\"line\">    out &lt;&lt; kDblQteChar &lt;&lt; kNormalKeyword &lt;&lt; kDblQteChar</div>\n\
<div class=\"line\">        &lt;&lt; kSpaceChar &lt;&lt; normalCount;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;normalCount; i++ ) {</div>\n\
<div class=\"line\">        normal = fGeometry-&gt;normals[i];</div>\n\
<div class=\"line\">        out &lt;&lt; kWrapString;</div>\n\
<div class=\"line\">        out &lt;&lt; normal[0] &lt;&lt; kSpaceChar;</div>\n\
<div class=\"line\">        out &lt;&lt; normal[1] &lt;&lt; kSpaceChar;</div>\n\
<div class=\"line\">        out &lt;&lt; normal[2];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::writeFacesASCII( ostream&amp; out )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numFaces = fGeometry-&gt;face_counts.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vid = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> f=0; f&lt;numFaces; f++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> faceVertexCount = fGeometry-&gt;face_counts[f];</div>\n\
<div class=\"line\">        out &lt;&lt; <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">        out &lt;&lt; kWrapString;</div>\n\
<div class=\"line\">        out &lt;&lt; kDblQteChar &lt;&lt; kFaceKeyword &lt;&lt; kDblQteChar</div>\n\
<div class=\"line\">            &lt;&lt; kSpaceChar &lt;&lt; faceVertexCount;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        out &lt;&lt; kWrapString;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> v=0; v&lt;faceVertexCount; v++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            out &lt;&lt; fGeometry-&gt;face_connects[vid] &lt;&lt; kSpaceChar;</div>\n\
<div class=\"line\">            vid++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::readVerticesASCII( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; argList,</div>\n\
<div class=\"line\">                                        <span class=\"keywordtype\">unsigned</span>&amp; index )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> geomStr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> vertex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vertexCount = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    result = argList.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( index, geomStr );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( result &amp;&amp; (geomStr == kVertexKeyword) ) {</div>\n\
<div class=\"line\">        result = argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, vertexCount );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;vertexCount; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, vertex ) ) {</div>\n\
<div class=\"line\">                fGeometry-&gt;vertices.append( vertex );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                result = MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::readNormalsASCII( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; argList,</div>\n\
<div class=\"line\">                                       <span class=\"keywordtype\">unsigned</span>&amp; index )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> geomStr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> normal;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> normalCount = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    result = argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( index, geomStr );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( result &amp;&amp; (geomStr == kNormalKeyword) ) {</div>\n\
<div class=\"line\">        result = argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, normalCount );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;normalCount; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, normal ) ) {</div>\n\
<div class=\"line\">                fGeometry-&gt;normals.append( normal );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                result = MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::readUVASCII( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp;argList, </div>\n\
<div class=\"line\">                                  <span class=\"keywordtype\">unsigned</span> &amp;index )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result = MS::kSuccess; </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uvStr; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> u, v; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> fvi; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> faceVertexListCount = 0; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> uvCount; </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fGeometry-&gt;uvcoords.reset(); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>(index,uvStr) &amp;&amp; (uvStr == kUVKeyword) ) { </div>\n\
<div class=\"line\">        result = argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, uvCount ); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( result ) { </div>\n\
<div class=\"line\">            result = argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, faceVertexListCount ); </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> i; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i = 0; i &lt; uvCount &amp;&amp; result; i ++ ) { </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, u ) &amp;&amp; argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, v ) ) { </div>\n\
<div class=\"line\">                fGeometry-&gt;uvcoords.append_uv( (<span class=\"keywordtype\">float</span>)u, (<span class=\"keywordtype\">float</span>)v );</div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> { </div>\n\
<div class=\"line\">                result = MS::kFailure; </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i = 0; i &lt; faceVertexListCount &amp;&amp; result; i++ ) { </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, fvi ) ) { </div>\n\
<div class=\"line\">                fGeometry-&gt;uvcoords.faceVertexIndex.append( fvi ); </div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> { </div>\n\
<div class=\"line\">                result = MS::kFailure; </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> apiMeshData::readFacesASCII( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; argList,</div>\n\
<div class=\"line\">                                     <span class=\"keywordtype\">unsigned</span>&amp; index )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> geomStr;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> faceCount = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>(index,geomStr) &amp;&amp; (geomStr == kFaceKeyword) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        result = argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, faceCount );</div>\n\
<div class=\"line\">        fGeometry-&gt;face_counts.append( faceCount );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;faceCount; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( argList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#adc169cdc872457a2664c3d66c29cf504\">get</a>( ++index, vid ) ) {</div>\n\
<div class=\"line\">                fGeometry-&gt;face_connects.append( vid );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                result = MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        index++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fGeometry-&gt;faceCount = fGeometry-&gt;face_counts.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";