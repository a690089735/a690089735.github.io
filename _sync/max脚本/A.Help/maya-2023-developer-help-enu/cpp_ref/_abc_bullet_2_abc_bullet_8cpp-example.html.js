var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcBullet/AbcBullet.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_bullet_2_abc_bullet_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcBullet/AbcBullet.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcBullet/AbcBullet.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2012,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AbcBullet.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AbcWriteJob.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AbcBulletStringTable.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyNodes.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyNodes.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTimer.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>AbcA = Alembic::AbcCoreAbstract;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AbcBullet::AbcBullet()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AbcBullet::~AbcBullet()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> AbcBullet::createSyntax()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> syntax;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-v&quot;</span>,  <span class=\"stringliteral\">&quot;-verbose&quot;</span>, <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada8d12b05de59486981e5e424c53d59c40\">MSyntax::kNoArg</a>);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-h&quot;</span>,  <span class=\"stringliteral\">&quot;-help&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada8d12b05de59486981e5e424c53d59c40\">MSyntax::kNoArg</a>);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-prs&quot;</span>, <span class=\"stringliteral\">&quot;-preRollStartFrame&quot;</span>, <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adacd70f5d2b5e8c1bb8e83b0482a33e518\">MSyntax::kDouble</a>);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-duf&quot;</span>, <span class=\"stringliteral\">&quot;-dontSkipUnwrittenFrames&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada8d12b05de59486981e5e424c53d59c40\">MSyntax::kNoArg</a>);</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-j&quot;</span>, <span class=\"stringliteral\">&quot;-jobArg&quot;</span>, <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aba59748fbad866c9f753ccb043db4ee5\">makeFlagMultiUse</a>(<span class=\"stringliteral\">&quot;-j&quot;</span>);</div>\n\
<div class=\"line\">    syntax.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a414088ac458bc323845634fcf7663e69\">enableQuery</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    syntax.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a2a329cd0b0d89bc1b9721c522d6d0006\">enableEdit</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> syntax;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* AbcBullet::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> AbcBullet();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AbcBullet::doIt(<span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp; args)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> oldCurTime = <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a8cb1e013d828c1d012fee789b14e0060\">MAnimControl::currentTime</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_parser.html\">MArgParser</a> argData(syntax(), args, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (argData.isFlagSet(<span class=\"stringliteral\">&quot;help&quot;</span>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(util::getHelpText());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> verbose = argData.isFlagSet(<span class=\"stringliteral\">&quot;verbose&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If skipFrame is true, when going through the playback range of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// scene, as much frames are skipped when possible.  This could cause</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a problem for, time dependent solutions like</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// particle system / hair simulation</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> skipFrame = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (argData.isFlagSet(<span class=\"stringliteral\">&quot;dontSkipUnwrittenFrames&quot;</span>))</div>\n\
<div class=\"line\">        skipFrame = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> startEvaluationTime = DBL_MAX;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (argData.isFlagSet(<span class=\"stringliteral\">&quot;preRollStartFrame&quot;</span>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> startAt = 0.0;</div>\n\
<div class=\"line\">        argData.getFlagArgument(<span class=\"stringliteral\">&quot;preRollStartFrame&quot;</span>, 0, startAt);</div>\n\
<div class=\"line\">        startEvaluationTime = startAt;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> jobSize = argData.numberOfFlagUses(<span class=\"stringliteral\">&quot;jobArg&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (jobSize == 0)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// the frame range we will be iterating over for all jobs,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// includes frames which are not skipped and the startAt offset</span></div>\n\
<div class=\"line\">    std::set&lt;double&gt; allFrameRange;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// this will eventually hold only the animated jobs.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// its a list because we will be removing jobs from it</span></div>\n\
<div class=\"line\">    std::list &lt; AbcWriteJobPtr &gt; jobList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> jobIndex = 0; jobIndex &lt; jobSize; jobIndex++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        JobArgs jobArgs;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> jobArgList;</div>\n\
<div class=\"line\">        argData.getFlagArgumentList(<span class=\"stringliteral\">&quot;jobArg&quot;</span>, jobIndex, jobArgList);</div>\n\
<div class=\"line\">        <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> jobArgsStr = jobArgList.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#ad24ff3826e4df513b55e1a0ecb0a665b\">asString</a>(0);</div>\n\
<div class=\"line\">        <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> jobArgsArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        jobArgs.verbose = verbose;</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// parse the job arguments</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// e.g. -perFrameCallbackMel &quot;print \\&quot;something\\&quot;&quot; will be splitted to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//  [0] -perFrameCallbackMel</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//  [1] print &quot;something&quot;</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">enum</span> State {</div>\n\
<div class=\"line\">                kArgument,             <span class=\"comment\">// parsing an argument (not quoted)</span></div>\n\
<div class=\"line\">                kDoubleQuotedString,     <span class=\"comment\">// parsing a double quoted string</span></div>\n\
<div class=\"line\">                kSingleQuotedString,     <span class=\"comment\">// parsing a single quoted string</span></div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            State state = kArgument;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> stringBuffer;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> charIdx = 0; charIdx &lt; jobArgsStr.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>();</div>\n\
<div class=\"line\">                charIdx++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ch = jobArgsStr.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>(charIdx, charIdx);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (state)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kArgument:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (ch == <span class=\"stringliteral\">&quot; &quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// space terminates the current argument</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (stringBuffer.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                            jobArgsArray.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(stringBuffer);</div>\n\
<div class=\"line\">                            stringBuffer.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"comment\">// goto another argument</span></div>\n\
<div class=\"line\">                        state = kArgument;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ch == <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (stringBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// double quote is part of the argument</span></div>\n\
<div class=\"line\">                            stringBuffer += ch;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// goto double quoted string</span></div>\n\
<div class=\"line\">                            state = kDoubleQuotedString;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ch == <span class=\"stringliteral\">&quot;&#39;&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (stringBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// single quote is part of the argument</span></div>\n\
<div class=\"line\">                            stringBuffer += ch;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// goto single quoted string</span></div>\n\
<div class=\"line\">                            state = kSingleQuotedString;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        stringBuffer += ch;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kDoubleQuotedString:</div>\n\
<div class=\"line\">                    <span class=\"comment\">// double quote terminates the current string</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (ch == <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        jobArgsArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(stringBuffer);</div>\n\
<div class=\"line\">                        stringBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">                        state = kArgument;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ch == <span class=\"stringliteral\">&quot;\\\\&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// escaped character</span></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nextCh = (++charIdx &lt; jobArgsStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>())</div>\n\
<div class=\"line\">                            ? jobArgsStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>(charIdx, charIdx) : <span class=\"stringliteral\">&quot;\\\\&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;n&quot;</span>)     stringBuffer += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;t&quot;</span>)  stringBuffer += <span class=\"stringliteral\">&quot;\\t&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;r&quot;</span>)  stringBuffer += <span class=\"stringliteral\">&quot;\\r&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;\\\\&quot;</span>) stringBuffer += <span class=\"stringliteral\">&quot;\\\\&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;&#39;&quot;</span>)  stringBuffer += <span class=\"stringliteral\">&quot;&#39;&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) stringBuffer += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span>                     stringBuffer += nextCh;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        stringBuffer += ch;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kSingleQuotedString:</div>\n\
<div class=\"line\">                    <span class=\"comment\">// single quote terminates the current string</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (ch == <span class=\"stringliteral\">&quot;&#39;&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        jobArgsArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(stringBuffer);</div>\n\
<div class=\"line\">                        stringBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">                        state = kArgument;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ch == <span class=\"stringliteral\">&quot;\\\\&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// escaped character</span></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nextCh = (++charIdx &lt; jobArgsStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>())</div>\n\
<div class=\"line\">                            ? jobArgsStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>(charIdx, charIdx) : <span class=\"stringliteral\">&quot;\\\\&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;n&quot;</span>)     stringBuffer += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;t&quot;</span>)  stringBuffer += <span class=\"stringliteral\">&quot;\\t&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;r&quot;</span>)  stringBuffer += <span class=\"stringliteral\">&quot;\\r&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;\\\\&quot;</span>) stringBuffer += <span class=\"stringliteral\">&quot;\\\\&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;&#39;&quot;</span>)  stringBuffer += <span class=\"stringliteral\">&quot;&#39;&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (nextCh == <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) stringBuffer += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span>                     stringBuffer += nextCh;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        stringBuffer += ch;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// the rest of the argument</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stringBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgsArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(stringBuffer);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> startTime = oldCurTime.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a324b14b7506c6e4f47912161956974ed\">value</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> endTime = oldCurTime.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a324b14b7506c6e4f47912161956974ed\">value</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> strideTime = 1.0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasRange = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasRoot = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        std::set &lt;double&gt; shutterSamples;</div>\n\
<div class=\"line\">        std::string fileName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numJobArgs = jobArgsArray.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numJobArgs; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> arg = jobArgsArray[i];</div>\n\
<div class=\"line\">            arg.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-f&quot;</span> || arg == <span class=\"stringliteral\">&quot;-file&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgFile, status );</div>\n\
<div class=\"line\">                    <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                fileName = jobArgsArray[++i].asChar();</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-fr&quot;</span> || arg == <span class=\"stringliteral\">&quot;-framerange&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+2 &gt;= numJobArgs || !jobArgsArray[i+1].isDouble() ||</div>\n\
<div class=\"line\">                    !jobArgsArray[i+2].isDouble())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgFrameRange, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                hasRange = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                startTime = jobArgsArray[++i].asDouble();</div>\n\
<div class=\"line\">                endTime = jobArgsArray[++i].asDouble();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// make sure start frame is smaller or equal to endTime</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (startTime &gt; endTime)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> temp = startTime;</div>\n\
<div class=\"line\">                    startTime = endTime;</div>\n\
<div class=\"line\">                    endTime = temp;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-frs&quot;</span> || arg == <span class=\"stringliteral\">&quot;-framerelativesample&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs || !jobArgsArray[i+1].isDouble())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgFrameRelativeSample, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                shutterSamples.insert(jobArgsArray[++i].asDouble());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-nn&quot;</span> || arg == <span class=\"stringliteral\">&quot;-nonormals&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.noNormals = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-ro&quot;</span> || arg == <span class=\"stringliteral\">&quot;-renderableonly&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.excludeInvisible = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-s&quot;</span> || arg == <span class=\"stringliteral\">&quot;-step&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs || !jobArgsArray[i+1].isDouble())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgStep, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                strideTime = jobArgsArray[++i].asDouble();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-sl&quot;</span> || arg == <span class=\"stringliteral\">&quot;-selection&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.useSelectionList = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-sn&quot;</span> || arg == <span class=\"stringliteral\">&quot;-stripnamespaces&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs || !jobArgsArray[i+1].isUnsigned())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// the strip all namespaces case</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// so we pick a very LARGE number</span></div>\n\
<div class=\"line\">                    jobArgs.stripNamespace = 0xffffffff;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    jobArgs.stripNamespace = jobArgsArray[++i].asUnsigned();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-uv&quot;</span> || arg == <span class=\"stringliteral\">&quot;-uvwrite&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.writeUVs = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-wcs&quot;</span> || arg == <span class=\"stringliteral\">&quot;-writecolorsets&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.writeColorSets = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-wfs&quot;</span> || arg == <span class=\"stringliteral\">&quot;-writefacesets&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.writeFaceSets = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-ws&quot;</span> || arg == <span class=\"stringliteral\">&quot;-worldspace&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.worldSpace = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-wv&quot;</span> || arg == <span class=\"stringliteral\">&quot;-writevisibility&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.writeVisibility = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-mfc&quot;</span> || arg == <span class=\"stringliteral\">&quot;-melperframecallback&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(</div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;melPerFrameCallback incorrectly specified.&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.melPerFrameCallback = jobArgsArray[++i].asChar();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-pfc&quot;</span> || arg == <span class=\"stringliteral\">&quot;-pythonperframecallback&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgPythonPerframeCallback, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.pythonPerFrameCallback = jobArgsArray[++i].asChar();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-mpc&quot;</span> || arg == <span class=\"stringliteral\">&quot;-melpostjobcallback&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgMelPostJobCallback, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.melPostCallback = jobArgsArray[++i].asChar();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-ppc&quot;</span> || arg == <span class=\"stringliteral\">&quot;-pythonpostjobcallback&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgPythonPostJobCallback, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.pythonPostCallback = jobArgsArray[++i].asChar();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// geomArbParams - attribute filtering stuff</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-atp&quot;</span> || arg == <span class=\"stringliteral\">&quot;-attrprefix&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgAttrPrefix, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.prefixFilters.push_back(jobArgsArray[++i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-a&quot;</span> || arg == <span class=\"stringliteral\">&quot;-attr&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgAttr, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.attribs.insert(jobArgsArray[++i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// userProperties - attribute filtering stuff</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-uatp&quot;</span> || arg == <span class=\"stringliteral\">&quot;-userattrprefix&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>( kInvalidArgUserAttrPrefix, status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.userPrefixFilters.push_back(jobArgsArray[++i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-u&quot;</span> || arg == <span class=\"stringliteral\">&quot;-userattr&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;userAttr incorrectly specified.&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                jobArgs.userAttribs.insert(jobArgsArray[++i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-rt&quot;</span> || arg == <span class=\"stringliteral\">&quot;-root&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i+1 &gt;= numJobArgs)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;root incorrectly specified.&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                hasRoot = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> root = jobArgsArray[++i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> sel;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (sel.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(root) != MS::kSuccess)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = root;</div>\n\
<div class=\"line\">                    warn += <span class=\"stringliteral\">&quot; could not be select, skipping.&quot;</span>;</div>\n\
<div class=\"line\">                    <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(warn);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numRoots = sel.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; numRoots; ++j)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (sel.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(j, path) != MS::kSuccess)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = path.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>();</div>\n\
<div class=\"line\">                        warn += <span class=\"stringliteral\">&quot; (part of &quot;</span>;</div>\n\
<div class=\"line\">                        warn += root;</div>\n\
<div class=\"line\">                        warn += <span class=\"stringliteral\">&quot; ) not a DAG Node, skipping.&quot;</span>;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(warn);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    jobArgs.dagPaths.insert(path);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (arg == <span class=\"stringliteral\">&quot;-ef&quot;</span> || arg == <span class=\"stringliteral\">&quot;-eulerfilter&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                jobArgs.filterEulerRotations = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = <span class=\"stringliteral\">&quot;Ignoring unsupported flag: &quot;</span>;</div>\n\
<div class=\"line\">                warn += jobArgsArray[i];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(warn);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"comment\">//  for i</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fileName == <span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> error = <span class=\"stringliteral\">&quot;-file not specified.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(error);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileRule, expandName;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> alembicFileRule = <span class=\"stringliteral\">&quot;alembicCache&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> alembicFilePath = <span class=\"stringliteral\">&quot;cache/alembic&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> queryFileRuleCmd;</div>\n\
<div class=\"line\">            queryFileRuleCmd.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;workspace -q -fre \\&quot;^1s\\&quot;&quot;</span>,</div>\n\
<div class=\"line\">                alembicFileRule);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> queryFolderCmd;</div>\n\
<div class=\"line\">            queryFolderCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;workspace -en `workspace -q -fre \\&quot;^1s\\&quot;`&quot;</span>,</div>\n\
<div class=\"line\">                alembicFileRule);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// query the file rule for alembic cache</span></div>\n\
<div class=\"line\">            <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(queryFileRuleCmd, fileRule);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fileRule.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// we have alembic file rule, query the folder</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(queryFolderCmd, expandName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// alembic file rule does not exist, create it</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> addFileRuleCmd;</div>\n\
<div class=\"line\">                addFileRuleCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;workspace -fr \\&quot;^1s\\&quot; \\&quot;^2s\\&quot;&quot;</span>,</div>\n\
<div class=\"line\">                    alembicFileRule, alembicFilePath);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(addFileRuleCmd);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// save the workspace. maya may discard file rules on exit</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;workspace -s&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// query the folder</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(queryFolderCmd, expandName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// resolve the expanded file rule</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (expandName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                expandName = alembicFilePath;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// get the path to the alembic file rule</span></div>\n\
<div class=\"line\">            <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> directory;</div>\n\
<div class=\"line\">            directory.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(expandName);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> directoryName = directory.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// make sure the cache folder exists</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!directory.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#aa9100e4c626877b706ca9fc67a35c562\">exists</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// create the cache folder</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> createFolderCmd;</div>\n\
<div class=\"line\">                createFolderCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;sysFile -md \\&quot;^1s\\&quot;&quot;</span>, directoryName);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(createFolderCmd);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// resolve the relative path</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> absoluteFile;</div>\n\
<div class=\"line\">            absoluteFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(fileName.c_str());</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if MAYA_API_VERSION &lt; 201300</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (absoluteFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>() !=</div>\n\
<div class=\"line\">                absoluteFile.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#abe7742bc48c00e4bf3f7b3bbc7c468ae\">MFileObject::isAbsolutePath</a>(fileName.c_str())) {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// this is a relative path</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> absoluteFileName = directoryName + <span class=\"stringliteral\">&quot;/&quot;</span> +</div>\n\
<div class=\"line\">                    fileName.c_str();</div>\n\
<div class=\"line\">                absoluteFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(absoluteFileName);</div>\n\
<div class=\"line\">                fileName = absoluteFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>().<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fileName = absoluteFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// check the path must exist before writing</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> absoluteFilePath;</div>\n\
<div class=\"line\">            absoluteFilePath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(absoluteFile.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a2c2258275416a1df772a23a569d84e78\">expandedPath</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!absoluteFilePath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#aa9100e4c626877b706ca9fc67a35c562\">exists</a>()) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> error;</div>\n\
<div class=\"line\">                error.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;Path ^1s does not exist!&quot;</span>, absoluteFilePath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>());</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(error);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// check the file is used by any AlembicNode in the scene</span></div>\n\
<div class=\"line\">            <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html\">MItDependencyNodes</a> dgIter(<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af34d84d127b40b54ca8cbef9c6a8e7ec\">MFn::kPluginDependNode</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; !dgIter.isDone(); dgIter.next()) {</div>\n\
<div class=\"line\">                <a name=\"_a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> alembicNode(dgIter.thisNode());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (alembicNode.typeName() != <span class=\"stringliteral\">&quot;AlembicNode&quot;</span>) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"_a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> abcFilePlug = alembicNode.findPlug(<span class=\"stringliteral\">&quot;abc_File&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (abcFilePlug.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> alembicFile;</div>\n\
<div class=\"line\">                alembicFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(abcFilePlug.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!alembicFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#aa9100e4c626877b706ca9fc67a35c562\">exists</a>()) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (alembicFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>() == absoluteFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>()) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> error = <span class=\"stringliteral\">&quot;Can&#39;t export to an Alembic file which is in use.&quot;</span>;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(error);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::ofstream ofs(fileName.c_str());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ofs.is_open()) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> error = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Can&#39;t write to file: &quot;</span>) + fileName.c_str();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(error);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            ofs.close();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shutterSamples.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            shutterSamples.insert(0.0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (jobArgs.prefixFilters.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            jobArgs.prefixFilters.push_back(<span class=\"stringliteral\">&quot;ABC_&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// the list of frames written into the abc file</span></div>\n\
<div class=\"line\">        std::set&lt;double&gt; transSamples;</div>\n\
<div class=\"line\">        std::set &lt;double&gt;::const_iterator shutter;</div>\n\
<div class=\"line\">        std::set &lt;double&gt;::const_iterator shutterStart = shutterSamples.begin();</div>\n\
<div class=\"line\">        std::set &lt;double&gt;::const_iterator shutterEnd = shutterSamples.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">double</span> frame = startTime; frame &lt;= endTime; frame += strideTime)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (shutter = shutterStart; shutter != shutterEnd; ++shutter)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> curFrame = *shutter + frame;</div>\n\
<div class=\"line\">                transSamples.insert(curFrame);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (transSamples.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            transSamples.insert(startTime);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (jobArgs.dagPaths.size() &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// check for validity of the DagPath relationships complexity : n^2</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            util::ShapeSet::const_iterator m, n;</div>\n\
<div class=\"line\">            util::ShapeSet::const_iterator end = jobArgs.dagPaths.end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (m = jobArgs.dagPaths.begin(); m != end; )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path1 = *m;</div>\n\
<div class=\"line\">                m++;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (n = m; n != end; n++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path2 = *n;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (util::isAncestorDescendentRelationship(path1,path2))</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = path1.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>();</div>\n\
<div class=\"line\">                        errorMsg += <span class=\"stringliteral\">&quot; and &quot;</span>;</div>\n\
<div class=\"line\">                        errorMsg += path2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>();</div>\n\
<div class=\"line\">                        errorMsg += <span class=\"stringliteral\">&quot; have an ancestor relationship.&quot;</span>;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }  <span class=\"comment\">// for n</span></div>\n\
<div class=\"line\">            }  <span class=\"comment\">// for m</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// no root is specified, and we aren&#39;t using a selection</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so we&#39;ll try to translate the whole Maya scene by using all</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// children of the world as roots.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!hasRoot &amp;&amp; !jobArgs.useSelectionList)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> sel;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if MAYA_API_VERSION &gt;= 201100</span></div>\n\
<div class=\"line\">            sel.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(<span class=\"stringliteral\">&quot;|*&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// older versions of Maya will not be able to find top level nodes</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// within namespaces</span></div>\n\
<div class=\"line\">            sel.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(<span class=\"stringliteral\">&quot;|*&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numRoots = sel.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numRoots; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">                sel.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(i, path);</div>\n\
<div class=\"line\">                jobArgs.dagPaths.insert(path);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (hasRoot &amp;&amp; jobArgs.dagPaths.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = <span class=\"stringliteral\">&quot;No valid root nodes were specified.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (jobArgs.useSelectionList)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> activeList;</div>\n\
<div class=\"line\">            <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>(activeList);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (activeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg =</div>\n\
<div class=\"line\">                    <span class=\"stringliteral\">&quot;-selection specified but nothing is actively selected.&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        AbcA::TimeSamplingPtr transTime;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt;double&gt; samples;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (shutter = shutterStart; shutter != shutterEnd; ++shutter)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            samples.push_back((startTime + *shutter) * util::spf());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hasRange)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            transTime.reset(<span class=\"keyword\">new</span> AbcA::TimeSampling(AbcA::TimeSamplingType(</div>\n\
<div class=\"line\">                static_cast&lt;Alembic::Util::uint32_t&gt;(samples.size()),</div>\n\
<div class=\"line\">                strideTime * util::spf()), samples));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            transTime.reset(<span class=\"keyword\">new</span> AbcA::TimeSampling());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        AbcWriteJobPtr job(<span class=\"keyword\">new</span> AbcWriteJob(fileName.c_str(),</div>\n\
<div class=\"line\">            transSamples, transTime, jobArgs));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       jobList.push_front(job);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// make sure we add additional whole frames, if we arent skipping</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the inbetween ones</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!skipFrame &amp;&amp; !allFrameRange.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> localMin = *(transSamples.begin());</div>\n\
<div class=\"line\">            std::set&lt;double&gt;::iterator last = transSamples.end();</div>\n\
<div class=\"line\">            last--;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> localMax = *last;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> globalMin = *(allFrameRange.begin());</div>\n\
<div class=\"line\">            last = allFrameRange.end();</div>\n\
<div class=\"line\">            last--;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> globalMax = *last;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// if the min of our current frame range is beyond</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// what we know about, pad a few more frames</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (localMin &gt; globalMax)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">double</span> f = globalMax; f &lt; localMin; f++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    allFrameRange.insert(f);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// if the max of our current frame range is beyond</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// what we know about, pad a few more frames</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (localMax &lt; globalMin)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">double</span> f = localMax; f &lt; globalMin; f++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    allFrameRange.insert(f);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// right now we just copy over the translation samples since</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// they are guaranteed to contain all the geometry samples</span></div>\n\
<div class=\"line\">        allFrameRange.insert(transSamples.begin(), transSamples.end());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add extra evaluation run up, if necessary</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (startEvaluationTime != DBL_MAX &amp;&amp; !allFrameRange.empty())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> firstFrame = *allFrameRange.begin();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">double</span> f = startEvaluationTime; f &lt; firstFrame; ++f)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            allFrameRange.insert(f);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::set&lt;double&gt;::iterator it = allFrameRange.begin();</div>\n\
<div class=\"line\">    std::set&lt;double&gt;::iterator itEnd = allFrameRange.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_computation.html\">MComputation</a> computation;</div>\n\
<div class=\"line\">    computation.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_computation.html#a21a0632b8283a671cd8f90fd82a99843\">beginComputation</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// loop through every frame in the list, if a job has that frame in it&#39;s</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// list of transform or shape frames, then it will write out data and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// call the perFrameCallback, if that frame is also the last one it has</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to work on then it will also call the postCallback.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If it doesn&#39;t have this frame, then it does nothing</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html\">MTimer</a> timer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; it != itEnd; it++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        timer.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ac336e3fea7e0479c0496beccd27ba152\">beginTimer</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac919b5ecda7f12015e94792c0712726f\">MGlobal::viewFrame</a>(*it);</div>\n\
<div class=\"line\">        std::list&lt; AbcWriteJobPtr &gt;::iterator j = jobList.begin();</div>\n\
<div class=\"line\">        std::list&lt; AbcWriteJobPtr &gt;::iterator jend = jobList.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (j != jend)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (computation.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_computation.html#ac8479086bd947ca42cd41eedbc922138\">isInterruptRequested</a>())</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> lastFrame = (*j)-&gt;eval(*it);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lastFrame)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                j = jobList.erase(j);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                j++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        timer.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ab1cd82365475316c3b987f456df5e14c\">endTimer</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (verbose)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> frame = *it;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> info,arg1,arg2;</div>\n\
<div class=\"line\">            arg1.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(frame);</div>\n\
<div class=\"line\">            arg2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(timer.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#af216bfafd4829e364522a4c93e737fe8\">elapsedTime</a>());</div>\n\
<div class=\"line\">            info.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>( <span class=\"stringliteral\">&quot;processed frame: ^1s in ^2s seconds&quot;</span>, arg1, arg2 );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(info);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    computation.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_computation.html#aaebee347f2af2f3a35b2ca106e4590f7\">endComputation</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set the time back</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac919b5ecda7f12015e94792c0712726f\">MGlobal::viewFrame</a>(oldCurTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordflow\">catch</span> (Alembic::Util::Exception &amp; e)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;Alembic Exception encountered: &quot;</span>);</div>\n\
<div class=\"line\">    theError += e.what();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(theError);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordflow\">catch</span> (std::exception &amp; e)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;std::exception encountered: &quot;</span>);</div>\n\
<div class=\"line\">    theError += e.what();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(theError);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a name=\"_a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj, <span class=\"stringliteral\">&quot;AbcBullet&quot;</span>, ABCBULLET_VERSION, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerCommand(</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;AbcBulletExport&quot;</span>, AbcBullet::creator,</div>\n\
<div class=\"line\">        AbcBullet::createSyntax );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerCommand&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//MGlobal::executeCommandOnIdle(&quot;AlembicCreateUI&quot;);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> info = <span class=\"stringliteral\">&quot;AbcBullet v&quot;</span>;</div>\n\
<div class=\"line\">    info += ABCBULLET_VERSION;</div>\n\
<div class=\"line\">    info += <span class=\"stringliteral\">&quot; using &quot;</span>;</div>\n\
<div class=\"line\">    info += Alembic::Abc::GetLibraryVersion().c_str();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(info);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterCommand(<span class=\"stringliteral\">&quot;AbcBulletExport&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterCommand&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//MGlobal::executeCommandOnIdle(&quot;AlembicDeleteUI&quot;);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";