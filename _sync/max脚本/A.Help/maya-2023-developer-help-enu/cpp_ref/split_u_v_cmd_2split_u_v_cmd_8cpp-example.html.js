var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: splitUVCmd/splitUVCmd.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'split_u_v_cmd_2split_u_v_cmd_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: splitUVCmd/splitUVCmd.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">splitUVCmd/splitUVCmd.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// The splitUV command unshares or &quot;splits&quot; the selected UVs of a polygonal mesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It is also a good example of how to write poly operation nodes that properly</span></div>\n\
<div class=\"line\"><span class=\"comment\">// deal with history, tweaks, and so on. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MEL Command:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  splitUV</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;splitUVCmd.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;splitUVNode.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Function Sets</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSingleIndexedComponent.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Iterators</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshPolygon.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// General Includes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Status Checking Macro - MCheckStatus (Debugging tool)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MCheckStatus(status,message)    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    if( MS::kSuccess != status ) {      \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        cerr &lt;&lt; message &lt;&lt; &quot;\\n&quot;;        \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        return status;                  \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">splitUV::splitUV()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      splitUV constructor</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">splitUV::~splitUV()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      splitUV destructor</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* splitUV::creator()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      this method exists to give Maya a way to create new objects</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of this type. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      a new object of this type</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> splitUV();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> splitUV::isUndoable() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      this method tells Maya this command is undoable.  It is added to the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      undo queue if it is.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      true if this command is undoable.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> splitUV::doIt( <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      implements the MEL splitUV command.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Arguments:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      args - the argument list that was passes to the command from MEL</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kSuccess - command succeeded</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kFailure - command failed (returning this value will cause the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//                     MEL script that is being run to terminate unless the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                     error is caught using a &quot;catch&quot; statement.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Parse the selection list for objects with selected UV components.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// To simplify things, we only take the first object that we find with</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// selected UVs and operate on that object alone.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// All other objects are ignored and return warning messages indicating</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// this limitation.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selList;</div>\n\
<div class=\"line\">    <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( selList );</div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> selListIter( selList );</div>\n\
<div class=\"line\">    selListIter.setFilter( <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The splitUV node only accepts a component list input, so we build</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a component list using MFnComponentListData.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// MIntArrays could also be passed into the node to represent the uvIds,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// but are less storage efficient than component lists, since consecutive </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// components are bundled into a single entry in component lists.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component_list_data.html\">MFnComponentListData</a> compListFn;</div>\n\
<div class=\"line\">    compListFn.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component_list_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> found = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> foundMultiple = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( ; !selListIter.isDone(); selListIter.next() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">        <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> component;</div>\n\
<div class=\"line\">        selListIter.getDagPath( dagPath, component );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Check for selected UV components</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( component.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>() == <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a0b774c2a128a8b2365fff164212f2e43\">MFn::kMeshMapComponent</a> )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !found )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// The variable &#39;component&#39; holds all selected components on the selected</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// object, thus only a single call to MFnComponentListData::add() is needed</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// to store the selected components for a given object.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                compListFn.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component_list_data.html#a11489717674c73fef6cb7691690c11f2\">add</a>( component );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Copy the component list created by MFnComponentListData into our local</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// component list MObject member.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                fComponentList = compListFn.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Locally store the actual uvIds of the selected UVs so that this command</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// can directly modify the mesh in the case when there is no history and</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// history is turned off.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> compFn( component );</div>\n\
<div class=\"line\">                compFn.getElements( fSelUVs );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Ensure that this DAG path will point to the shape of our object.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the DAG path for the polyModifierCmd.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                dagPath.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a658d9664035ff84ffefa217c0e45cc88\">extendToShape</a>();</div>\n\
<div class=\"line\">                setMeshNode( dagPath );</div>\n\
<div class=\"line\">                found = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Break once we have found a multiple object holding selected UVs, since</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// we are not interested in how many multiple objects there are, only</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the fact that there are multiple objects.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                foundMultiple = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( foundMultiple )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        displayWarning(<span class=\"stringliteral\">&quot;Found more than one object with selected UVs - Only operating on first found object.&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize the polyModifierCmd node type - mesh node already set</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    setModifierNodeType( splitUVNode::id );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( found )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( validateUVs() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Now, pass control over to the polyModifierCmd::doModifyPoly() method</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// to handle the operation.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            status = doModifyPoly();</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                setResult( <span class=\"stringliteral\">&quot;splitUV command succeeded!&quot;</span> );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                displayError( <span class=\"stringliteral\">&quot;splitUV command failed!&quot;</span> );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            displayError( <span class=\"stringliteral\">&quot;splitUV command failed: Selected UVs are not splittable&quot;</span> );</div>\n\
<div class=\"line\">            status = MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        displayError( <span class=\"stringliteral\">&quot;splitUV command failed: Unable to find selected UVs&quot;</span> );</div>\n\
<div class=\"line\">        status = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> splitUV::redoIt()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Implements redo for the MEL splitUV command. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method is called when the user has undone a command of this type</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      and then redoes it.  No arguments are passed in as all of the necessary</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      information is cached by the doIt method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kSuccess - command succeeded</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kFailure - redoIt failed.  this is a serious problem that will</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                     likely cause the undo queue to be purged</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Process the polyModifierCmd</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = redoModifyPoly();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setResult( <span class=\"stringliteral\">&quot;splitUV command succeeded!&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        displayError( <span class=\"stringliteral\">&quot;splitUV command failed!&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> splitUV::undoIt()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      implements undo for the MEL splitUV command.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method is called to undo a previous command of this type.  The </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      system should be returned to the exact state that it was it previous </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      to this command being executed.  That includes the selection state.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kSuccess - command succeeded</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kFailure - redoIt failed.  this is a serious problem that will</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                     likely cause the undo queue to be purged</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = undoModifyPoly();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setResult( <span class=\"stringliteral\">&quot;splitUV undo succeeded!&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setResult( <span class=\"stringliteral\">&quot;splitUV undo failed!&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> splitUV::initModifierNode( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> modifierNode )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We need to tell the splitUV node which UVs to operate on. By overriding</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the polyModifierCmd::initModifierNode() method, we can insert our own</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// modifierNode initialization code.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn( modifierNode );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> uvListAttr;</div>\n\
<div class=\"line\">    uvListAttr = depNodeFn.attribute( <span class=\"stringliteral\">&quot;inputComponents&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Pass the component list down to the splitUV node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> uvListPlug( modifierNode, uvListAttr );</div>\n\
<div class=\"line\">    status = uvListPlug.setValue( fComponentList );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> splitUV::directModifier( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> mesh )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fSplitUVFactory.setMesh( mesh );</div>\n\
<div class=\"line\">    fSplitUVFactory.setUVIds( fSelUVs );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now, perform the splitUV</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = fSplitUVFactory.doIt();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Private Methods</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> splitUV::validateUVs()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Validate the UVs for the splitUV operation. UVs are valid only if they are shared</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      by more than one face. While the splitUVNode is smart enough to not process the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      split if a UV is not splittable, a splitUV node is still created by the polyModifierCmd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      So call this method to validate the UVs before calling doModifyPoly().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      validateUVs() will return true so long as there is at least one valid UV. It will</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      also prune out any invalid UVs from both the component list and UVId array.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the mesh that we are operating on</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>        dagPath = getMeshNode();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>         mesh = dagPath.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the number of faces sharing the selected UVs</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>         meshFn( mesh );</div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_polygon.html\">MItMeshPolygon</a>  polyIter( mesh );</div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>       selUVFaceCountArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> j;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> count = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> selUVsCount = fSelUVs.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( i = 0; i &lt; selUVsCount; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( ; !polyIter.isDone(); polyIter.next() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( polyIter.hasUVs() )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> polyVertCount = polyIter.polygonVertexCount();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>( j = 0; j &lt; polyVertCount; j++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> UVIndex = 0;</div>\n\
<div class=\"line\">                    polyIter.getUVIndex(j, UVIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( UVIndex == fSelUVs[i] )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        count++;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        selUVFaceCountArray.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(count);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now, check to make sure that at least one UV is being shared by more than one</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// face. So long as we have one UV that we can operate on, we should proceed and let</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the splitUVNode ignore the UVs which are only shared by one face.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isValid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> validUVIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( i = 0; i &lt; selUVsCount; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( selUVFaceCountArray[i] &gt; 1 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            isValid = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            validUVIndices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(i);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( isValid )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        pruneUVs( validUVIndices );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> isValid;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> splitUV::pruneUVs( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; validUVIndices )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method will remove any invalid UVIds from the component list and UVId array.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The benefit of this is to reduce the amount of extra processing that the node would</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      have to perform. It will result in less iterations through the mesh as there are</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      less UVs to search for.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> i;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> validUVIds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( i = 0; i &lt; validUVIndices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> uvIndex = validUVIndices[i];</div>\n\
<div class=\"line\">        validUVIds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( fSelUVs[uvIndex] );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Replace the local int array of UVIds</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fSelUVs.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    fSelUVs = validUVIds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Build the list of valid components</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> compFn;</div>\n\
<div class=\"line\">    compFn.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae3b7a9c926f9770f786893bbea825d6b\">create</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a0b774c2a128a8b2365fff164212f2e43\">MFn::kMeshMapComponent</a>, &amp;status );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;compFn.create( MFn::kMeshMapComponent )&quot;</span> );</div>\n\
<div class=\"line\">    status = compFn.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#a23e786bfb118c070d054f078704fb3e2\">addElements</a>( validUVIds );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;compFn.addElements( validUVIds )&quot;</span> );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> component = compFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Replace the component list</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component_list_data.html\">MFnComponentListData</a> compListFn;</div>\n\
<div class=\"line\">    compListFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component_list_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>();</div>\n\
<div class=\"line\">    status = compListFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_component_list_data.html#a11489717674c73fef6cb7691690c11f2\">add</a>( component );</div>\n\
<div class=\"line\">    MCheckStatus( status, <span class=\"stringliteral\">&quot;compListFn.add( component )&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fComponentList = compListFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";