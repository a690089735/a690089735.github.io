var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: testMTopologyEvaluator/testMTopologyEvaluator.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'test_m_topology_evaluator_2test_m_topology_evaluator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: testMTopologyEvaluator/testMTopologyEvaluator.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">testMTopologyEvaluator/testMTopologyEvaluator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#include &quot;testMTopologyEvaluator.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEvaluationNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGraphNodeIterator.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MProfiler.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;functional&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*  This plugin is designed to test different features of topology evaluators.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    Once plugin is loaded it adds a new DG node (TestMTopologyEvaluator_Node) </span></div>\n\
<div class=\"line\"><span class=\"comment\">    and a new Topology Evaluator (TestMTopologyEvaluator).</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    TestMTopologyEvaluator_Node is a simple node with same number of inputs as</span></div>\n\
<div class=\"line\"><span class=\"comment\">    outputs. Each output is a function of input with same index and constant</span></div>\n\
<div class=\"line\"><span class=\"comment\">    offset 5. Each call to compute is counted by internal computeCount.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Compute count is reset during preEvaluation and should match the number of</span></div>\n\
<div class=\"line\"><span class=\"comment\">    outputs when TestMTopologyEvaluator is disabled or in Evaluation mode.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    TestMTopologyEvaluator is designed to grab every TestMTopologyEvaluator_Node</span></div>\n\
<div class=\"line\"><span class=\"comment\">    and express each input-output pair as a separate evaluation node with</span></div>\n\
<div class=\"line\"><span class=\"comment\">    custom compute method. Compute can happen in two modes controlled by</span></div>\n\
<div class=\"line\"><span class=\"comment\">    attrDoPushCompute:</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Evaluation with DG mode - in this mode we should get exactly the same</span></div>\n\
<div class=\"line\"><span class=\"comment\">      answer as when evaluator is disabled, i.e. output values with be computed</span></div>\n\
<div class=\"line\"><span class=\"comment\">      by DG compute method and compute count will match the number of outputs.</span></div>\n\
<div class=\"line\"><span class=\"comment\">      What will be different is scheduling, since topology evaluator will</span></div>\n\
<div class=\"line\"><span class=\"comment\">      represent single TestMTopologyEvaluator_Node as a graph. Computation of</span></div>\n\
<div class=\"line\"><span class=\"comment\">      outputs will happen in a separate evaluation node, each output will be computed</span></div>\n\
<div class=\"line\"><span class=\"comment\">      sequentially...but downstream of each output will start earlier, i.e. as soon</span></div>\n\
<div class=\"line\"><span class=\"comment\">      as output is ready. In this mode pushComputeCount should be equal 0.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Push mode - in this mode DG compute is not used. Each output is computed</span></div>\n\
<div class=\"line\"><span class=\"comment\">      concurrently by a separate evaluation node. To catch potential errors</span></div>\n\
<div class=\"line\"><span class=\"comment\">      computed value will adding different static offset to value from input</span></div>\n\
<div class=\"line\"><span class=\"comment\">      (i.e. +9). As well, compute count should in this mode be equal 0 and</span></div>\n\
<div class=\"line\"><span class=\"comment\">      push compute count should be equal to total output count.</span></div>\n\
<div class=\"line\"><span class=\"comment\">      In this mode, evaluators are only allowed to read input data and push</span></div>\n\
<div class=\"line\"><span class=\"comment\">      data to outputs. No DG compute is allowed (this is why we expect compute count to be 0).</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Number of input &amp; output attributes to generate on test plugin</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// More attributes will generate more evaluation nodes in topology evaluator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and allow more chances for race condition (if something went wrong)</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span>  _numberOfAttr = 100;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Profiler category name for this test</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             _profilerCategory = <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiler.html#a0a16b68268bd93a67d404e9ecb77c5a5\">MProfiler::addCategory</a>(<span class=\"stringliteral\">&quot;testMTopologyEvaluator&quot;</span>, <span class=\"stringliteral\">&quot;Events related to the testMTopologyEvaluator&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> getEvaluationNodeConnectedToInput(<a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; attrInput, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; ownerEvaluationNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> testNode(ownerEvaluationNode.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat));</div>\n\
<div class=\"line\">        <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisPlug = testNode.findPlug(attrInput, <span class=\"keyword\">true</span>, &amp;stat);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (thisPlug.isNull())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ownerEvaluationNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcPlug = thisPlug.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae1a22944dd4daea3988e3a04ff4d10a8\">source</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (srcPlug.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ownerEvaluationNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">int</span> i = 0; i &lt; ownerEvaluationNode.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#afc2300aa77520ec87f6de4de484534a2\">parentCount</a>(); i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> parentNode = ownerEvaluationNode.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a24e440602b1e04c7671098af66723647\">parent</a>(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcPlug.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() == parentNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> parentNode;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ownerEvaluationNode;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> getEvaluationNodeConnectedToOutput(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; attrOutput, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; ownerEvaluationNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> testNode(ownerEvaluationNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat));</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisPlug = testNode.findPlug(attrOutput, <span class=\"keyword\">true</span>, &amp;stat);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (thisPlug.isNull())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ownerEvaluationNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> dstPlugs;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !thisPlug.destinationsWithConversions(dstPlugs) || dstPlugs.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != 1)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ownerEvaluationNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dstPlug = dstPlugs[0];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; ownerEvaluationNode.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a5aafdfadef3077516ece45d1f27380a3\">childCount</a>(); i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> childNode = ownerEvaluationNode.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a4f271aa3d950d3e630edcee5b739bf3f\">child</a>(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (dstPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() == childNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> childNode;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ownerEvaluationNode;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> TestMTopologyEvaluator_Node::id( 0x80000, 0x7d );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::vector&lt;MObject&gt; TestMTopologyEvaluator_Node::attrInputs;</div>\n\
<div class=\"line\">std::vector&lt;MObject&gt; TestMTopologyEvaluator_Node::attrOutputs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> TestMTopologyEvaluator_Node::attrComputeCount;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> TestMTopologyEvaluator_Node::attrPushComputeCount;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> TestMTopologyEvaluator_Node::attrDoPushCompute;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa4dfc80e0475312169cf7a2b4299b825\">MPxNode::SchedulingType</a> TestMTopologyEvaluator_Node::schedulingType()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa4dfc80e0475312169cf7a2b4299b825a61d36a44ac6c754fb5b9d4eb458fca90\">MPxNode::kParallel</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> TestMTopologyEvaluator_Node::compute( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; data )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; attrOutputs.size(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">auto</span>&amp; outputPlug = attrOutputs[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug != outputPlug)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> inputOutputOffset = 5;   <span class=\"comment\">// This number is used by the test; no other reason for it</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> inputDouble = data.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(attrInputs[i], &amp;stat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outputDouble = data.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(attrOutputs[i], &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> outputVal = inputDouble.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ac1983b7d41a8dae60dc5b1eb9f44a53c\">asDouble</a>();</div>\n\
<div class=\"line\">        outputVal += inputOutputOffset;</div>\n\
<div class=\"line\">        outputDouble.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aec2f85eaeb70eea4e79b45c4553d26eb\">setDouble</a>(outputVal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        stat = data.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#aceb46f1065ef1cd730c4ab15d61466cc\">setClean</a>(attrOutputs[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        computeCount++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a7f858db05022c8bc860d685e13bab6ae\">MStatus::kUnknownParameter</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> TestMTopologyEvaluator_Node::setDependentsDirty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>&amp; plugArray)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; attrOutputs.size(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">auto</span>&amp; outputPlug = attrOutputs[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug != outputPlug)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        computeCount = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ParentClass::setDependentsDirty(plug, plugArray);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> TestMTopologyEvaluator_Node::preEvaluation(<span class=\"keyword\">const</span>  <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    computeCount = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ParentClass::preEvaluation(context, evaluationNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> TestMTopologyEvaluator_Node::setInternalValue(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug == attrDoPushCompute)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        doPushComputeOverride = handle.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a69fdebf4dcdf33c1b313eb4a426e0d45\">asBool</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ParentClass::setInternalValue(plug, handle);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> TestMTopologyEvaluator_Node::getInternalValue(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug == attrComputeCount)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        handle.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aa91e8ed8499af314043106dc0166b21a\">setInt</a>(computeCount);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == attrPushComputeCount) {</div>\n\
<div class=\"line\">        handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aa91e8ed8499af314043106dc0166b21a\">setInt</a>(pushComputeCount);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == attrDoPushCompute) {</div>\n\
<div class=\"line\">        handle.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ad1c723b684b73109b0918a3dd8984340\">setBool</a>(doPushComputeOverride);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ParentClass::getInternalValue(plug, handle);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> TestMTopologyEvaluator_Node::getCacheSetup(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; node, <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_disabling_info.html\">MNodeCacheDisablingInfo</a>&amp; disable, <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_setup_info.html\">MNodeCacheSetupInfo</a>&amp; setup, <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp; attrs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    ParentClass::getCacheSetup(node, disable, setup, attrs);</div>\n\
<div class=\"line\">    setup.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_setup_info.html#aa8e8aa3d550475221be89a27e48df13e\">setPreference</a>(<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_cache_setup_info.html#a6860ea2ce3c2eaa8de289c1638d288eba6039051d3a71594da68a931e5dcf7179\">MNodeCacheSetupInfo::kWantToCacheByDefault</a>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* TestMTopologyEvaluator_Node::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> TestMTopologyEvaluator_Node();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> TestMTopologyEvaluator_Node::initialize() {</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrLongName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrShortName;</div>\n\
<div class=\"line\">    <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> mAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attrInputs.reserve(_numberOfAttr);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; _numberOfAttr; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrLongName = <span class=\"stringliteral\">&quot;input&quot;</span>;</div>\n\
<div class=\"line\">        attrShortName = <span class=\"stringliteral\">&quot;in&quot;</span>;</div>\n\
<div class=\"line\">        attrLongName += int(i+1);</div>\n\
<div class=\"line\">        attrShortName += int(i+1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        attrInputs.emplace_back(mAttr.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrLongName, attrShortName, <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>, 0, &amp;stat));</div>\n\
<div class=\"line\">        mAttr.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attrOutputs.reserve(_numberOfAttr);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; _numberOfAttr; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrLongName = <span class=\"stringliteral\">&quot;output&quot;</span>;</div>\n\
<div class=\"line\">        attrShortName = <span class=\"stringliteral\">&quot;out&quot;</span>;</div>\n\
<div class=\"line\">        attrLongName += int(i+1);</div>\n\
<div class=\"line\">        attrShortName += int(i+1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        attrOutputs.emplace_back(mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrLongName, attrShortName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>, 0, &amp;stat));</div>\n\
<div class=\"line\">        mAttr.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        mAttr.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attrLongName = <span class=\"stringliteral\">&quot;computeCount&quot;</span>;</div>\n\
<div class=\"line\">    attrShortName = <span class=\"stringliteral\">&quot;cct&quot;</span>;</div>\n\
<div class=\"line\">    attrComputeCount = mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrLongName, attrShortName, <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>, 0, &amp;stat);</div>\n\
<div class=\"line\">    mAttr.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#af41aae76c0dc31dbcd1f4ecea52d694e\">setReadable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    mAttr.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    mAttr.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attrLongName = <span class=\"stringliteral\">&quot;pushComputeCount&quot;</span>;</div>\n\
<div class=\"line\">    attrShortName = <span class=\"stringliteral\">&quot;pcc&quot;</span>;</div>\n\
<div class=\"line\">    attrPushComputeCount = mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrLongName, attrShortName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>, 0, &amp;stat);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#af41aae76c0dc31dbcd1f4ecea52d694e\">setReadable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attrLongName = <span class=\"stringliteral\">&quot;doPushCompute&quot;</span>;</div>\n\
<div class=\"line\">    attrShortName = <span class=\"stringliteral\">&quot;dpc&quot;</span>;</div>\n\
<div class=\"line\">    attrDoPushCompute = mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrLongName, attrShortName, <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>, <span class=\"keyword\">false</span>, &amp;stat);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#af41aae76c0dc31dbcd1f4ecea52d694e\">setReadable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; _numberOfAttr; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        stat = addAttribute(attrInputs[i]);</div>\n\
<div class=\"line\">        stat = addAttribute(attrOutputs[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        stat = attributeAffects(attrInputs[i], attrOutputs[i]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = addAttribute(attrComputeCount);</div>\n\
<div class=\"line\">    stat = addAttribute(attrPushComputeCount);</div>\n\
<div class=\"line\">    stat = addAttribute(attrDoPushCompute);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, <span class=\"stringliteral\">&quot;Autodesk&quot;</span>, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    status = plugin.registerNode( <span class=\"stringliteral\">&quot;TestMTopologyEvaluator_Node&quot;</span>, TestMTopologyEvaluator_Node::id, TestMTopologyEvaluator_Node::creator, TestMTopologyEvaluator_Node::initialize );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    status = plugin.registerTopologyEvaluator(<span class=\"stringliteral\">&quot;TestMTopologyEvaluator&quot;</span>, 70 <span class=\"comment\">/* unused */</span>, TestMTopologyEvaluator_Evaluator::creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerEvaluator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    status = plugin.deregisterTopologyEvaluator(<span class=\"stringliteral\">&quot;TestMTopologyEvaluator&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterEvaluator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    status = plugin.deregisterNode(TestMTopologyEvaluator_Node::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// =====================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TestMTopologyEvaluator_Evaluator::~TestMTopologyEvaluator_Evaluator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> TestMTopologyEvaluator_Evaluator::markIfSupported(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>* node)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> owner = node-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((stat == MS::kSuccess) &amp;&amp; owner.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNode(owner);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (depNode.typeId() == TestMTopologyEvaluator_Node::id);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_topology_evaluator.html\">MPxTopologyEvaluator</a>* TestMTopologyEvaluator_Evaluator::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> TestMTopologyEvaluator_Evaluator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> TestMTopologyEvaluator_Evaluator::makeTopology(<a name=\"_a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_topology_cluster_node.html\">MTopologyClusterNode</a>* cluster)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\">    <a name=\"_a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_graph_node_iterator.html\">MGraphNodeIterator</a> iterator(cluster, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; (stat == MS::kSuccess) &amp;&amp; !iterator.isDone(); iterator.next(&amp;stat))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> currEvalNode = iterator.currentEvaluationNode(&amp;stat);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stat == MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> testNodeFn(currEvalNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat));</div>\n\
<div class=\"line\">            TestMTopologyEvaluator_Node* testNode = <span class=\"keyword\">static_cast&lt;</span>TestMTopologyEvaluator_Node*<span class=\"keyword\">&gt;</span>(testNodeFn.userNode());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!testNode)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::function&lt;void()&gt; initExecFn = [testNode, currEvalNode]()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeForInit(_profilerCategory, MProfiler::kColorD_L1, <span class=\"stringliteral\">&quot;Reset counters&quot;</span>);</div>\n\
<div class=\"line\">                testNode-&gt;computeCount = 0;</div>\n\
<div class=\"line\">                testNode-&gt;pushComputeCount = 0;</div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> initExec = cluster-&gt;<a name=\"a55\"></a>createNode(<span class=\"stringliteral\">&quot;InitExec&quot;</span>, initExecFn, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa4dfc80e0475312169cf7a2b4299b825a61d36a44ac6c754fb5b9d4eb458fca90\">MPxNode::kParallel</a>, <span class=\"keyword\">nullptr</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> endExec = cluster-&gt;createNode(<span class=\"stringliteral\">&quot;EndExec&quot;</span>, currEvalNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa4dfc80e0475312169cf7a2b4299b825a61d36a44ac6c754fb5b9d4eb458fca90\">MPxNode::kParallel</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (testNode-&gt;doPushComputeOverride)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; TestMTopologyEvaluator_Node::attrOutputs.size(); i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> inputAttr = TestMTopologyEvaluator_Node::attrInputs[i];</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> outputAttr = TestMTopologyEvaluator_Node::attrOutputs[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeName = <span class=\"stringliteral\">&quot;PushCompute_&quot;</span>;</div>\n\
<div class=\"line\">                    nodeName += int(i + 1);</div>\n\
<div class=\"line\">                    std::function&lt;void()&gt; pushComputeFn = [currEvalNode, inputAttr, outputAttr, testNode, nodeName]()</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeForCompute(_profilerCategory, MProfiler::kColorD_L1, nodeName.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> computeStat = MS::kSuccess;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> data = currEvalNode.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a8020acf5e607c87d867f1707544505e8\">datablock</a>(&amp;computeStat);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> inputDouble = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(inputAttr, &amp;computeStat);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outputDouble = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(outputAttr, &amp;computeStat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> inputOutputOffsetForPush = 9;    <span class=\"comment\">// This number is used by the test; no other reason for it</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> outputVal = inputDouble.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ac1983b7d41a8dae60dc5b1eb9f44a53c\">asDouble</a>();</div>\n\
<div class=\"line\">                        outputVal += inputOutputOffsetForPush;</div>\n\
<div class=\"line\">                        outputDouble.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aec2f85eaeb70eea4e79b45c4553d26eb\">setDouble</a>(outputVal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        computeStat = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#aceb46f1065ef1cd730c4ab15d61466cc\">setClean</a>(outputAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        testNode-&gt;pushComputeCount++;</div>\n\
<div class=\"line\">                    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> parentNode = getEvaluationNodeConnectedToInput(inputAttr, currEvalNode);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> childNode = getEvaluationNodeConnectedToOutput(outputAttr, currEvalNode);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (parentNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>() != currEvalNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>() &amp;&amp; currEvalNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>() != childNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> inConnection = cluster-&gt;<a name=\"a58\"></a>connectionPort(parentNode, currEvalNode);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> outConnection = cluster-&gt;connectionPort(childNode, currEvalNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> pushComputeExec = cluster-&gt;createNode(nodeName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), pushComputeFn, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa4dfc80e0475312169cf7a2b4299b825a61d36a44ac6c754fb5b9d4eb458fca90\">MPxNode::kParallel</a>, &amp;currEvalNode, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                        initExec.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(pushComputeExec);      <span class=\"comment\">//init will always execute before any other node in this cluster</span></div>\n\
<div class=\"line\">                        inConnection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(pushComputeExec);  <span class=\"comment\">//make push compute dependent on upstream dependency of inputAttr</span></div>\n\
<div class=\"line\">                        pushComputeExec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(outConnection); <span class=\"comment\">//make outputAttr downstream dependent on push computation </span></div>\n\
<div class=\"line\">                        pushComputeExec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(endExec);       <span class=\"comment\">//make end execution dependent on every push computation</span></div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> lastCompute = initExec;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; TestMTopologyEvaluator_Node::attrOutputs.size(); i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> inputAttr = TestMTopologyEvaluator_Node::attrInputs[i];</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> outputAttr = TestMTopologyEvaluator_Node::attrOutputs[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeName = <span class=\"stringliteral\">&quot;FineGrainCompute_&quot;</span>;</div>\n\
<div class=\"line\">                    nodeName += int(i+1);</div>\n\
<div class=\"line\">                    std::function&lt;void()&gt; computeFn = [currEvalNode, outputAttr, nodeName]()</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeForCompute(_profilerCategory, MProfiler::kColorD_L1, nodeName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> computeStat = MS::kSuccess;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> data = currEvalNode.datablock(&amp;computeStat);</div>\n\
<div class=\"line\">                        data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(outputAttr, &amp;computeStat);  <span class=\"comment\">// pull output to cause DG compute</span></div>\n\
<div class=\"line\">                    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> parentNode = getEvaluationNodeConnectedToInput(inputAttr, currEvalNode);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> childNode = getEvaluationNodeConnectedToOutput(outputAttr, currEvalNode);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (parentNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>() != currEvalNode.dependencyNode() &amp;&amp; currEvalNode.dependencyNode() != childNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> inConnection = cluster-&gt;connectionPort(parentNode, currEvalNode);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> outConnection = cluster-&gt;connectionPort(childNode, currEvalNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> computeExec = cluster-&gt;createNode(nodeName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), computeFn, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa4dfc80e0475312169cf7a2b4299b825a61d36a44ac6c754fb5b9d4eb458fca90\">MPxNode::kParallel</a>, &amp;currEvalNode, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                        lastCompute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(computeExec);       <span class=\"comment\">//computation with DG node at fine-grained level need to be serialized</span></div>\n\
<div class=\"line\">                        inConnection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(computeExec);      <span class=\"comment\">//make compute dependent on upstream dependency of inputAttr</span></div>\n\
<div class=\"line\">                        computeExec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(outConnection);     <span class=\"comment\">//make outputAttr downstream dependent on computation </span></div>\n\
<div class=\"line\">                        computeExec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(endExec);           <span class=\"comment\">//make end execution dependent on every computation</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        lastCompute = computeExec;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_graph.html\">MEvaluationGraph</a> evalGraph = <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_graph.html#a1be9e9b8f32a234c97837ce51a1818d0\">MEvaluationGraph::ownerGraph</a>(currEvalNode);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> rootConnection = cluster-&gt;connectionPort(evalGraph.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_graph.html#a551a86767a4b6c77be866abe02d2997f\">rootNode</a>(), evalGraph.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_graph.html#a551a86767a4b6c77be866abe02d2997f\">rootNode</a>());</div>\n\
<div class=\"line\">            rootConnection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a278eb08035433924667ef1be8342c699\">connect</a>(initExec);           <span class=\"comment\">//make init only dependent on ROOT (will start as soon as execution starts)</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// =====================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2018 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This computer source code  and related  instructions and comments are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the unpublished confidential and proprietary information of Autodesk,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Inc. and are  protected  under applicable  copyright and trade secret</span></div>\n\
<div class=\"line\"><span class=\"comment\">// law. They may not  be disclosed to, copied or used by any third party</span></div>\n\
<div class=\"line\"><span class=\"comment\">// without the prior written consent of Autodesk, Inc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// =====================================================================</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";