var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: cgFx/cgfxAttrDef.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2cgfx_attr_def_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: cgFx/cgfxAttrDef.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/cgfxAttrDef.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (C) 2002-2004 NVIDIA </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// File: cgfxAttrDef.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Author: Jim Atkinson</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// cgfxAttrDef holds the &quot;definition&quot; of an attribute on a cgfxShader</span></div>\n\
<div class=\"line\"><span class=\"comment\">// node.  This definition includes all the Maya attributes plus the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CGeffect parameter index.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Changes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  12/2003  Kurt Harriman - www.octopusgraphics.com +1-415-893-1023</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Shader parameter descriptions can be queried via the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             &quot;-des/description&quot; flag of cgfxShader command, together</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             with &quot;-lp/listParameters&quot; or &quot;-p/parameter &lt;name&gt;&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - &quot;-ci/caseInsensitive&quot; option for &quot;-p/parameter &lt;name&gt;&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - &quot;uimin&quot;/&quot;uimax&quot; annotations set numeric slider bounds.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - &quot;uiname&quot; annotation is used as parameter description </span></div>\n\
<div class=\"line\"><span class=\"comment\">//             if there is no &quot;desc&quot; annotation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Attribute bounds and initial values are updated when</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             effect is changed or reloaded.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - When creating dynamic attributes for shader parameters,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             make them keyable if type is bool, int, float or color.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             Vector types other than colors are made keyable if</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             they have a &quot;desc&quot; or &quot;uiname&quot; annotation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Dangling references to deleted dynamic attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             caused exceptions in MObject destructor, terminating</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             the Maya process.  This has been fixed.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Fixed some undo/redo bugs that caused crashes and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             incorrect rendering.  Fixed some memory leaks.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Improved error handling.  Use M_CHECK for internal errors. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderCommon.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;float.h&gt;</span>                     <span class=\"comment\">// FLT_MAX</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits.h&gt;</span>                    <span class=\"comment\">// INT_MAX, INT_MIN</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCompoundAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyGraph.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxAttrDef.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderNode.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxFindImage.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxTextureCache.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Defines</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define N_MAX_STRING_LENGTH 1024</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define stricmp  strcasecmp</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define strnicmp strncasecmp</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Decide the symbol we use</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> cgfxAttrDef::fSymbol = <span class=\"charliteral\">&#39;_&#39;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Constructor</span></div>\n\
<div class=\"line\">cgfxAttrDef::cgfxAttrDef(CGparameter cgParameter)</div>\n\
<div class=\"line\">: fType( kAttrTypeUnknown )</div>\n\
<div class=\"line\">, fSize( 0 )</div>\n\
<div class=\"line\">, fHint( kVectorHintNone )</div>\n\
<div class=\"line\">, fNumericMin( NULL )</div>\n\
<div class=\"line\">, fNumericMax( NULL )</div>\n\
<div class=\"line\">, fNumericSoftMin( NULL )</div>\n\
<div class=\"line\">, fNumericSoftMax( NULL )</div>\n\
<div class=\"line\">, fUnits( <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>::kInvalid )</div>\n\
<div class=\"line\">, fNumericDef( NULL )</div>\n\
<div class=\"line\">, fTextureMonitor(kNullCallback)</div>\n\
<div class=\"line\"><span class=\"comment\">// , fParameterIndex( (LPCSTR)(-1) )</span></div>\n\
<div class=\"line\">, fParameterHandle(0)</div>\n\
<div class=\"line\">, fInvertMatrix( false )</div>\n\
<div class=\"line\">, fTransposeMatrix( false )</div>\n\
<div class=\"line\">, fTweaked( false )</div>\n\
<div class=\"line\">, fInitOnUndo( false )</div>\n\
<div class=\"line\">, fIsConvertedToInternal( false )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fName = cgGetParameterName(cgParameter);</div>\n\
<div class=\"line\">    fType = cgfxAttrDef::kAttrTypeOther;</div>\n\
<div class=\"line\">    fSize = cgGetParameterRows(cgParameter) * cgGetParameterColumns(cgParameter);</div>\n\
<div class=\"line\">    fParameterHandle = cgParameter;</div>\n\
<div class=\"line\">    fSemantic = cgGetParameterSemantic(cgParameter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGtype cgParameterType = cgGetParameterType(cgParameter);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (cgParameterType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_BOOL    : </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(fSemantic.asChar() , <span class=\"stringliteral\">&quot;HardwareFogEnabled&quot;</span>) == 0)</div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeHardwareFogEnabled;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeBool; </div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_INT     : </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(fSemantic.asChar() , <span class=\"stringliteral\">&quot;HardwareFogMode&quot;</span>) == 0)</div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeHardwareFogMode;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeInt; </div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_HALF    :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_FLOAT :</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(fSemantic.asChar() , <span class=\"stringliteral\">&quot;HardwareFogStart&quot;</span>) == 0)</div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeHardwareFogStart;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(fSemantic.asChar() , <span class=\"stringliteral\">&quot;HardwareFogEnd&quot;</span>) == 0)</div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeHardwareFogEnd;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(fSemantic.asChar() , <span class=\"stringliteral\">&quot;HardwareFogDensity&quot;</span>) == 0)</div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeHardwareFogDensity;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(fSemantic.asChar() , <span class=\"stringliteral\">&quot;Time&quot;</span>)==0)</div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeTime;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeFloat;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_HALF2               :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_FLOAT2          : </div>\n\
<div class=\"line\">            fType = cgfxAttrDef::kAttrTypeVector2; </div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_HALF3               :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_FLOAT3          : </div>\n\
<div class=\"line\">               fType = cgfxAttrDef::kAttrTypeVector3; </div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_HALF4               :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_FLOAT4          : </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(fSemantic.asChar() , <span class=\"stringliteral\">&quot;HardwareFogColor&quot;</span>) == 0)</div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeHardwareFogColor;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                fType = cgfxAttrDef::kAttrTypeVector4; </div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_HALF4x4         :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_FLOAT4x4        : </div>\n\
<div class=\"line\">            setMatrixType(cgParameter); </div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_STRING          : </div>\n\
<div class=\"line\">            fType = cgfxAttrDef::kAttrTypeString; </div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_TEXTURE         :</div>\n\
<div class=\"line\">            <span class=\"comment\">// handled by setSamplerType()</span></div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_SAMPLER1D       : </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_SAMPLER2D       :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_SAMPLER3D       :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_SAMPLERRECT :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_SAMPLERCUBE :</div>\n\
<div class=\"line\">            setSamplerType(cgParameter);</div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_ARRAY               :</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_STRUCT          :</div>\n\
<div class=\"line\">            break ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>                         : </div>\n\
<div class=\"line\">            <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = cgGetTypeString(cgParameterType);</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot; not yet supported&quot;</span>;</div>\n\
<div class=\"line\">            <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">            M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fType == cgfxAttrDef::kAttrTypeVector3 ||</div>\n\
<div class=\"line\">        fType == cgfxAttrDef::kAttrTypeVector4)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the specific vector type</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        setVectorType(cgParameter);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now that we know something about this attribute, walk through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the annotations on the parameter and see if there is any</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// additional information we can find.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sUIName;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    CGannotation cgAnnotation = cgGetFirstParameterAnnotation(cgParameter);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (cgAnnotation)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationName      = cgGetAnnotationName(cgAnnotation);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationValue     = cgGetStringAnnotationValue(cgAnnotation);</div>\n\
<div class=\"line\">        CGtype          cgAnnotationType    = cgGetAnnotationType(cgAnnotation);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;uihelp&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fDescription = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(annotationValue);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;uiname&quot;</span> ) == 0 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            sUIName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(annotationValue);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( stricmp( annotationName, <span class=\"stringliteral\">&quot;units&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Make sure units are converted to internal or not</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// _XXX is a unit converted to internal</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( fSymbol == annotationValue[0] ) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fIsConvertedToInternal = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                annotationValue++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fIsConvertedToInternal = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( stricmp( annotationValue, <span class=\"stringliteral\">&quot;inches&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fUnits = <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda30a33c2e169c9e6115692eda1c173f30\">MDistance::kInches</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( stricmp( annotationValue, <span class=\"stringliteral\">&quot;millimetres&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;millimeters&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;mm&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fUnits = <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda86e73f520eca40e3e3d4a08a43ddbffb\">MDistance::kMillimeters</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( stricmp( annotationValue, <span class=\"stringliteral\">&quot;centimetres&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;centimeters&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;cm&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fUnits = <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda0603f671fbadde0729a2e79a80fb9a0e\">MDistance::kCentimeters</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( stricmp( annotationValue, <span class=\"stringliteral\">&quot;metres&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;meters&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;m&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fUnits = <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda803a162c123bbe61a9d63d7f406e2b7c\">MDistance::kMeters</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( stricmp( annotationValue, <span class=\"stringliteral\">&quot;kilometres&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;kilometers&quot;</span>) == 0 || stricmp( annotationValue, <span class=\"stringliteral\">&quot;km&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fUnits = <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49edadc4fd556c40d608a34d8c2246ad6e4a5\">MDistance::kKilometers</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( stricmp( annotationValue, <span class=\"stringliteral\">&quot;feet&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fUnits = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49edaedebe6dc6efd5df379da89064414ac43\">MDistance::kFeet</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ((fType &gt;= cgfxAttrDef::kAttrTypeFirstTexture &amp;&amp;</div>\n\
<div class=\"line\">                  fType &lt;= cgfxAttrDef::kAttrTypeLastTexture))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;resourcetype&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;1d&quot;</span>) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fType = cgfxAttrDef::kAttrTypeColor1DTexture;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;2d&quot;</span>) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fType = cgfxAttrDef::kAttrTypeColor2DTexture;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;3d&quot;</span>) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fType = cgfxAttrDef::kAttrTypeColor3DTexture;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;cube&quot;</span>) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fType = cgfxAttrDef::kAttrTypeCubeTexture;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;rect&quot;</span>) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fType = cgfxAttrDef::kAttrTypeColor2DRectTexture;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;resourcename&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Store the texture file to load as the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// string default argument.  (I know, its kind</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// of a kludge; but if the texture attributes</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// were string values, it would be exactly</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// correct.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                fStringDef = annotationValue;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (cgAnnotationType == CG_BOOL )</div>\n\
<div class=\"line\">        {}                     <span class=\"comment\">// no min/max for bool</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;min&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">                 stricmp(annotationName, <span class=\"stringliteral\">&quot;max&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">                 stricmp(annotationName, <span class=\"stringliteral\">&quot;uimin&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">                 stricmp(annotationName, <span class=\"stringliteral\">&quot;uimax&quot;</span>) == 0 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> * tmp = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span> [fSize];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (cgAnnotationType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> CG_INT:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> nValues;</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>* annotationValues = cgGetIntAnnotationValues(cgAnnotation, &amp;nValues);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> iValue = 0; iValue &lt; nValues; ++iValue)</div>\n\
<div class=\"line\">                            tmp[iValue] = static_cast&lt;double&gt;(annotationValues[iValue]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> CG_FLOAT:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> nValues;</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* annotationValues = cgGetFloatAnnotationValues(cgAnnotation, &amp;nValues);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> iValue = 0; iValue &lt; nValues; ++iValue)</div>\n\
<div class=\"line\">                            tmp[iValue] = static_cast&lt;double&gt;(annotationValues[iValue]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"comment\">// This is not a numeric attribute, reset tmp to NULL</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> [] tmp;</div>\n\
<div class=\"line\">                    tmp = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;min&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fNumericMin = tmp;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;max&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fNumericMax = tmp;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;uimin&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fNumericSoftMin = tmp;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fNumericSoftMax = tmp;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"comment\">// end of if (adesc.Name == &quot;min&quot;|&quot;max&quot;)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cgAnnotation = cgGetNextAnnotation(cgAnnotation);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Enforce limits on colors if they do not already have them.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fType == cgfxAttrDef::kAttrTypeColor3 ||</div>\n\
<div class=\"line\">         fType == cgfxAttrDef::kAttrTypeColor4 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !fNumericMin )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNumericMin = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[4];</div>\n\
<div class=\"line\">            fNumericMin[0] = 0.0;</div>\n\
<div class=\"line\">            fNumericMin[1] = 0.0;</div>\n\
<div class=\"line\">            fNumericMin[2] = 0.0;</div>\n\
<div class=\"line\">            fNumericMin[3] = 0.0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !fNumericMax )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNumericMax = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[4];</div>\n\
<div class=\"line\">            fNumericMax[0] = 1.0;</div>\n\
<div class=\"line\">            fNumericMax[1] = 1.0;</div>\n\
<div class=\"line\">            fNumericMax[2] = 1.0;</div>\n\
<div class=\"line\">            fNumericMax[3] = 1.0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If no description, use UIName.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !fDescription.length() )</div>\n\
<div class=\"line\">        fDescription = sUIName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now get the default values</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* tmp = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span> [fSize];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGtype cgParameterBaseType = cgGetParameterBaseType(cgParameter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (cgParameterBaseType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_BOOL:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> val;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (cgGetParameterValueic(cgParameter, 1, &amp;val) != 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> [] tmp;</div>\n\
<div class=\"line\">                    tmp = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; fSize; ++k)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    tmp[k] = val ? 1 : 0;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_INT:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> val;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (cgGetParameterValueic(cgParameter, 1, &amp;val) != 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> [] tmp;</div>\n\
<div class=\"line\">                    tmp = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; fSize; ++k)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    tmp[k] = val;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_FLOAT:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fSize == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> val;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (cgGetParameterValuefc(cgParameter, 1, &amp;val) != 1)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keyword\">delete</span> [] tmp;</div>\n\
<div class=\"line\">                        tmp = 0;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// If the value is a converted value, we need to convert it to one with unit </span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( fIsConvertedToInternal)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        val = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( val, <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>()).as(fUnits);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    tmp[0] = val;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fSize &lt;= 4 || fType == cgfxAttrDef::kAttrTypeMatrix)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> val[16];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fType == kAttrTypeMatrix)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        cgGetMatrixParameterfc(cgParameter, val);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vecSize = fSize;</div>\n\
<div class=\"line\">                        cgGetParameterValuefc(cgParameter, vecSize, val);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; fSize; ++k)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// If the value is a converted value, we need to convert it to one with unit </span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( fIsConvertedToInternal)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            val[k] = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( val[k], <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>()).as(fUnits);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        tmp[k] = val[k];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> CG_STRING:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">                LPCSTR val;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* val = NULL;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                val = cgGetStringParameterValue(cgParameter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fStringDef = val;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// Fall through into the default case to destroy the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// numeric default value.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"comment\">// We don&#39;t know what to do but there is no point in</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// keeping tmp around.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] tmp;</div>\n\
<div class=\"line\">            tmp = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Don&#39;t save initial value if it is zero (or identity matrix).</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( tmp )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fSize == 16 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* d = &amp;<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>[0][0];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( k = 0; k &lt; fSize; ++k )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( tmp[ k ] != d[ k ] )</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( k = 0; k &lt; fSize; ++k )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( tmp[ k ] != 0.0 )</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( k == fSize )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] tmp;</div>\n\
<div class=\"line\">            tmp = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fNumericDef = tmp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxAttrDef::cgfxAttrDef(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;          sAttrName,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxAttrType      eAttrType,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;          sDescription,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;          sSemantic,</div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>                 obNode,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>                 obAttr</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">: fType( kAttrTypeUnknown )</div>\n\
<div class=\"line\">, fSize( 0 )</div>\n\
<div class=\"line\">, fHint( kVectorHintNone )</div>\n\
<div class=\"line\">, fNumericMin( NULL )</div>\n\
<div class=\"line\">, fNumericMax( NULL )</div>\n\
<div class=\"line\">, fNumericSoftMin( NULL )</div>\n\
<div class=\"line\">, fNumericSoftMax( NULL )</div>\n\
<div class=\"line\">, fUnits( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>::kInvalid )</div>\n\
<div class=\"line\">, fNumericDef( NULL )</div>\n\
<div class=\"line\">, fTextureMonitor(kNullCallback)</div>\n\
<div class=\"line\"><span class=\"comment\">// , fParameterIndex( (LPCSTR)(-1) )</span></div>\n\
<div class=\"line\">, fParameterHandle(0)</div>\n\
<div class=\"line\">, fInvertMatrix( false )</div>\n\
<div class=\"line\">, fTransposeMatrix( false )</div>\n\
<div class=\"line\">, fTweaked( false )</div>\n\
<div class=\"line\">, fInitOnUndo( false )</div>\n\
<div class=\"line\">, fIsConvertedToInternal(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fName = sAttrName;</div>\n\
<div class=\"line\">    fType = eAttrType;</div>\n\
<div class=\"line\">    fDescription = sDescription;</div>\n\
<div class=\"line\">    fSemantic = sSemantic;</div>\n\
<div class=\"line\">    fAttr = obAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html\">MFnCompoundAttribute</a> fnCompound;</div>\n\
<div class=\"line\">    <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a>  fnNumeric;</div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a>    fnTyped;</div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_attribute.html\">MFnMatrixAttribute</a>   fnMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   plug( obNode, obAttr );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>  numericMin[4];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>  numericMax[4];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>  numericValue[4];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>    hasMin    = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>    hasMax    = <span class=\"keyword\">false</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>    isNumeric = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If compound attribute, get value and bounds of each element.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fnCompound.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( obAttr ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hasMin = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        hasMax = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        isNumeric = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>      obChild;</div>\n\
<div class=\"line\">        <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> saChild;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> iChild;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> nChild = fnCompound.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html#a0a27cb351cc1a05aa82d4329d7f99bd1\">numChildren</a>();</div>\n\
<div class=\"line\">        M_CHECK( nChild &gt;= 2 &amp;&amp; nChild &lt;= 3 );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( iChild = 0; iChild &lt; nChild; ++iChild )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get child attribute.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( iChild &lt; 3 )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                obChild = fnCompound.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html#a32afd4253a710c7cb42a82b636852d6d\">child</a>( iChild, &amp;status );</div>\n\
<div class=\"line\">                M_CHECK( status );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            status = fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( obChild );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Min</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( fnNumeric.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a1635117fc1cd56e612895c54a0996491\">hasMin</a>() )</div>\n\
<div class=\"line\">                fnNumeric.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#abb1aad941525b3b815f4039be325a1e1\">getMin</a>( numericMin[ iChild ] );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                hasMin = <span class=\"keyword\">false</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Max</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( fnNumeric.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5b1ba68393fede3d8d2078add520f168\">hasMax</a>() )</div>\n\
<div class=\"line\">                fnNumeric.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aad0f7617f31e702a6e626f7bf4bb7f2a\">getMax</a>( numericMax[ iChild ] );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                hasMax = <span class=\"keyword\">false</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Value</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plChild( obNode, obChild );</div>\n\
<div class=\"line\">            status = plChild.getValue( numericValue[ iChild ] );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Check for 4-element vector.</span></div>\n\
<div class=\"line\">            saChild.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( fnNumeric.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>() );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( iChild == 2 )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* suffix = NULL;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( saChild[0] == sAttrName + <span class=\"stringliteral\">&quot;X&quot;</span> &amp;&amp;</div>\n\
<div class=\"line\">                     saChild[1] == sAttrName + <span class=\"stringliteral\">&quot;Y&quot;</span> &amp;&amp;</div>\n\
<div class=\"line\">                     saChild[2] == sAttrName + <span class=\"stringliteral\">&quot;Z&quot;</span> ) </div>\n\
<div class=\"line\">                    suffix = <span class=\"stringliteral\">&quot;W&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( saChild[0] == sAttrName + <span class=\"stringliteral\">&quot;R&quot;</span> &amp;&amp;</div>\n\
<div class=\"line\">                          saChild[1] == sAttrName + <span class=\"stringliteral\">&quot;G&quot;</span> &amp;&amp;</div>\n\
<div class=\"line\">                          saChild[2] == sAttrName + <span class=\"stringliteral\">&quot;B&quot;</span> ) </div>\n\
<div class=\"line\">                    suffix = <span class=\"stringliteral\">&quot;Alpha&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( suffix )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sName2 = sAttrName + suffix;</div>\n\
<div class=\"line\">                    <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode(obNode);</div>\n\
<div class=\"line\">                    obChild = fnNode.attribute( sName2, &amp;status );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> ndt = fnNumeric.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a475558f03040cb41c9af196253650823\">unitType</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( status &amp;&amp;</div>\n\
<div class=\"line\">                         fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( obChild ) &amp;&amp;</div>\n\
<div class=\"line\">                         fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a475558f03040cb41c9af196253650823\">unitType</a>() == ndt )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        fAttr2 = obChild;</div>\n\
<div class=\"line\">                        nChild = 4;     <span class=\"comment\">// loop again to get extra attr</span></div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }                          <span class=\"comment\">// loop over children</span></div>\n\
<div class=\"line\">        fSize = nChild;</div>\n\
<div class=\"line\">    }                              <span class=\"comment\">// compound </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Simple numeric attribute?  </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( obAttr ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnNumeric( obAttr, &amp;status );</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fSize = 1;</div>\n\
<div class=\"line\">        isNumeric = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get min and max.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a1635117fc1cd56e612895c54a0996491\">hasMin</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#abb1aad941525b3b815f4039be325a1e1\">getMin</a>( numericMin[0] );</div>\n\
<div class=\"line\">            hasMin = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5b1ba68393fede3d8d2078add520f168\">hasMax</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aad0f7617f31e702a6e626f7bf4bb7f2a\">getMax</a>( numericMax[0] );</div>\n\
<div class=\"line\">            hasMax = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get slider bounds.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fnNumeric.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a917aaf6e8026c32ca2f402c51e531b69\">hasSoftMin</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNumericSoftMin = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[1];</div>\n\
<div class=\"line\">            fnNumeric.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aef16b8be7989f51572fdd91f041aeae0\">getSoftMin</a>( fNumericSoftMin[0] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fnNumeric.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a563766a920e62cba567fdc71af3be8e4\">hasSoftMax</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNumericSoftMax = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[1];</div>\n\
<div class=\"line\">            fnNumeric.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a65535187b17c6a7418cf5be0c41bdc2d\">getSoftMax</a>( fNumericSoftMax[0] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Value </span></div>\n\
<div class=\"line\">        status = plug.getValue( numericValue[0] );</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\">    }                              <span class=\"comment\">// simple numeric</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// String attribute?</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fnTyped.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( obAttr ) &amp;&amp;</div>\n\
<div class=\"line\">             fnTyped.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#aa3bf2ba724f9aaf87976b1fb896fd700\">attrType</a>() == <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fSize = 1;</div>\n\
<div class=\"line\">        status = plug.getValue( fStringDef );</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\">    }                           <span class=\"comment\">// string</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Matrix attribute?</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fnMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( obAttr ))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obData;</div>\n\
<div class=\"line\">        status = plug.getValue( obData );</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\">        <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> fnMatrixData( obData, &amp;status );</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; mat = fnMatrixData.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>( &amp;status );</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\">        fSize = 16;</div>\n\
<div class=\"line\">        fNumericDef = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[ fSize ];</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* p = &amp;(mat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; 16; ++i )</div>\n\
<div class=\"line\">            fNumericDef[ i ] = p[ i ];</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\">    }                           <span class=\"comment\">// matrix </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mystified...</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Store numeric value, min and max.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( isNumeric )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fNumericDef = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[ fSize ];</div>\n\
<div class=\"line\">        memcpy( fNumericDef, numericValue, fSize * <span class=\"keyword\">sizeof</span>( numericValue[0] ) );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( hasMin )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNumericMin = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[ fSize ];</div>\n\
<div class=\"line\">            memcpy( fNumericMin, numericMin, fSize * <span class=\"keyword\">sizeof</span>( numericMin[0] ) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( hasMax )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNumericMax = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[ fSize ];</div>\n\
<div class=\"line\">            memcpy( fNumericMax, numericMax, fSize * <span class=\"keyword\">sizeof</span>( numericMax[0] ) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set attribute flags</span></div>\n\
<div class=\"line\">    setAttributeFlags();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Destructor</span></div>\n\
<div class=\"line\">cgfxAttrDef::~cgfxAttrDef()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    release();</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] fNumericMin;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] fNumericMax;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] fNumericSoftMin;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] fNumericSoftMax;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] fNumericDef;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Release any associated resources</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::release()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    releaseTexture();</div>\n\
<div class=\"line\">    releaseCallback();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::releaseTexture()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fTexture = cgfxRCPtr&lt;cgfxTextureCacheEntry&gt;();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::releaseCallback()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fTextureMonitor != kNullCallback)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( fTextureMonitor);</div>\n\
<div class=\"line\">        fTextureMonitor = kNullCallback;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ================ cgfxAttrDef::setTextureType ================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This method looks at the parameter data type, semantic, and</span></div>\n\
<div class=\"line\"><span class=\"comment\">// annotation and determines</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::setTextureType(CGparameter cgParameter)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fType = kAttrTypeColor2DTexture;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* semantic = cgGetParameterSemantic(cgParameter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!semantic) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We have to go thru semantics and annotations to find the type of the texture</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (semantic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;normal&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fType = kAttrTypeNormalTexture;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;height&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fType = kAttrTypeBumpTexture;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;environment&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fType = kAttrTypeEnvTexture;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;environmentnormal&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fType = kAttrTypeNormalizationTexture;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now browse through the annotations to see if there is anything</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// interesting there too.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGannotation cgAnnotation = cgGetFirstParameterAnnotation(cgParameter);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (cgAnnotation)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationName  = cgGetAnnotationName(cgAnnotation);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationValue = cgGetStringAnnotationValue(cgAnnotation);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;resourcetype&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;1d&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = kAttrTypeColor1DTexture;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;2d&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = kAttrTypeColor2DTexture;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;rect&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = kAttrTypeColor2DRectTexture;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;3d&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = kAttrTypeColor3DTexture;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;cube&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = kAttrTypeCubeTexture;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;resourcename&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Store the texture file to load as the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// string default argument.  (I know, its kind</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// of a kludge; but if the texture attributes</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// were string values, it would be exactly</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// correct.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            fStringDef = annotationValue;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;uvlink&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Store the variable name of the input UV</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// set that this texture is to be linked against.</span></div>\n\
<div class=\"line\">            fTextureUVLink = annotationValue;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cgAnnotation = cgGetNextAnnotation(cgAnnotation);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::setSamplerType(CGparameter cgParameter)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    CGstateassignment cgStateAssignment = cgGetNamedSamplerStateAssignment(cgParameter, <span class=\"stringliteral\">&quot;texture&quot;</span>);</div>\n\
<div class=\"line\">    setTextureType(cgGetTextureStateAssignmentValue(cgStateAssignment));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::setMatrixType(CGparameter cgParameter)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fType = kAttrTypeMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* semantic = cgGetParameterSemantic(cgParameter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!semantic)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;world&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldinverse&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldtranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldinversetranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldview&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldviewtranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldviewinverse&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldviewinversetranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldviewprojection&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldviewprojectiontranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldviewprojectioninverse&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;worldviewprojectioninversetranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeWorldViewProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;view&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;viewinverse&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;viewtranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;viewinversetranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeViewMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;projection&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;projectioninverse&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;projectiontranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;projectioninversetranspose&quot;</span>) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fType = kAttrTypeProjectionMatrix;</div>\n\
<div class=\"line\">        fInvertMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        fTransposeMatrix = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This routine returns true if the semantic value is known to refer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to a color value instead of a positional value.  We determine that</span></div>\n\
<div class=\"line\"><span class=\"comment\">// this is a color value because it uses one of the known names or it</span></div>\n\
<div class=\"line\"><span class=\"comment\">// contains the string &quot;color&quot; or &quot;colour&quot; in it.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::setVectorType(CGparameter cgParameter)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if 0</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This variable is not used</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">char</span>* colorList[] = </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;diffuse&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;specular&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ambient&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;emissive&quot;</span>,</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* semantic = cgGetParameterSemantic(cgParameter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((semantic == NULL || strcmp(semantic,<span class=\"stringliteral\">&quot;&quot;</span>) == 0) == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Check the semantic value to see if this is a color</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;diffuse&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">            stricmp(semantic, <span class=\"stringliteral\">&quot;specular&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">            stricmp(semantic, <span class=\"stringliteral\">&quot;ambient&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">            stricmp(semantic, <span class=\"stringliteral\">&quot;emissive&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fType = (fSize == 3) ? kAttrTypeColor3 : kAttrTypeColor4;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;direction&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fType = kAttrTypeFirstDir;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(semantic, <span class=\"stringliteral\">&quot;position&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fType = kAttrTypeFirstPos;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGannotation cgAnnotation = cgGetFirstParameterAnnotation(cgParameter);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (cgAnnotation)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationName  = cgGetAnnotationName(cgAnnotation);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationValue = cgGetStringAnnotationValue(cgAnnotation);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;type&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (strlen(annotationValue) != 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;color&quot;</span>) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fType = (fSize == 3) ? kAttrTypeColor3 : kAttrTypeColor4;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;space&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// we assume the attribute to be a direction if it doesn&#39;t have semantic to determine it.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// display a warning at the same time</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(fType != kAttrTypeFirstDir &amp;&amp; fType != kAttrTypeFirstPos)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warnMsg = fName + <span class=\"stringliteral\">&quot; has space annotation but doesn&#39;t have semantic to determine if it is a direction or position! Assuming it to be a direction. You&#39;d better add a semantic for it!&quot;</span>;</div>\n\
<div class=\"line\">                <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(warnMsg);</div>\n\
<div class=\"line\">                fType = kAttrTypeFirstDir;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;world&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = (cgfxAttrType)(fType + kAttrTypeWorldDir - kAttrTypeFirstDir);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;view&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">                stricmp(annotationValue, <span class=\"stringliteral\">&quot;devicelightspace&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = (cgfxAttrType)(fType + kAttrTypeViewDir - kAttrTypeFirstDir);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;projection&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = (cgfxAttrType)(fType + kAttrTypeProjectionDir - kAttrTypeFirstDir);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;screen&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fType = (cgfxAttrType)(fType + kAttrTypeScreenDir - kAttrTypeFirstDir);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationName, <span class=\"stringliteral\">&quot;object&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fHint = kVectorHintNone;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;dirlight&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fHint = kVectorHintDirLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;spotlight&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fHint = kVectorHintSpotLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;pointlight&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fHint = kVectorHintPointLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (stricmp(annotationValue, <span class=\"stringliteral\">&quot;camera&quot;</span>) == 0 || stricmp(annotationValue, <span class=\"stringliteral\">&quot;eye&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fHint = kVectorHintEye;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        cgAnnotation = cgGetNextAnnotation(cgAnnotation);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ========== cgfxAttrDef::attrsFromNode ==========</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This function simply returns the parses through the dynamic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// attributes on an effect and builds a list of cgfxAttrDef objects.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The cgfxAttrDef objects in the list are incomplete but they are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// only used to determine which attributes on the object need to be</span></div>\n\
<div class=\"line\"><span class=\"comment\">// created, destroyed, or left alone.  Ultimately, the cgfxAttrDefList</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that is constructed from the effect itself will be the one held by</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\">cgfxRCPtr&lt;cgfxAttrDefList&gt; cgfxAttrDef::attrsFromNode(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode(oNode, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">    M_CHECK( fnNode.typeId() == cgfxShaderNode::sId );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxShaderNode* pNode = (cgfxShaderNode *) fnNode.userNode();</div>\n\
<div class=\"line\">    M_CHECK( pNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxAttrDefList&gt; list = pNode-&gt;attrDefList();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The list has not been initialized.  Create it and try again.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (list.isNull())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        buildAttrDefList(oNode);</div>\n\
<div class=\"line\">        list = pNode-&gt;attrDefList();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> list;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ========== cgfxAttrDef::buildAttrDefList ==========</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This routine reconstructs the attrDefList from stringArray value in</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the attributeList attribute.  The reconstructed list is incomplete</span></div>\n\
<div class=\"line\"><span class=\"comment\">// but it is good enough to compare to the list generated by</span></div>\n\
<div class=\"line\"><span class=\"comment\">// attrsFromEffect to see if the connections are still valid.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::buildAttrDefList(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode(oNode, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status &amp;&amp;</div>\n\
<div class=\"line\">             fnNode.typeId() == cgfxShaderNode::sId );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxShaderNode* pNode = (cgfxShaderNode *) fnNode.userNode();</div>\n\
<div class=\"line\">    M_CHECK( pNode &amp;&amp; pNode-&gt;attrDefList().isNull() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxAttrDefList&gt; list(<span class=\"keyword\">new</span> cgfxAttrDefList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> saList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    pNode-&gt;getAttributeList(saList);</div>\n\
<div class=\"line\">    <span class=\"comment\">//         MStatus status;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//         // Get the value of the attributeList attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         //</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         MPlug    plug(oNode, cgfxShaderNode::sAttributeList);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//         MObject saDataObject;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//         status = plug.getValue(saDataObject);</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         if (!status)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         {</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//             sprintf(errorMsg, &quot;%s(%d): failed to get attributeList value: %s!&quot;,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                     __FILE__, __LINE__, status.errorString().asChar());</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//             throw errorMsg;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//         MFnStringArrayData fnSaData(saDataObject, &amp;status);</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         if (!status)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         {</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//             sprintf(errorMsg,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                     &quot;%s(%d): failed to construct attributeList function set: %s!&quot;,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                     __FILE__, __LINE__, status.errorString().asChar());</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//             throw errorMsg;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//         fnSaData.copyTo(saList);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Ok, we succeeded, saList is now an array of &quot;top level&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// dynamic attribute names along with some minimal type</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// information.  Parse through it and reconstruct the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cgfxAttrDefList.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; saList.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> item = saList[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>  splitItem;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        item.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;\\t&#39;</span>, splitItem);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cgfxAttrDef* attrDef = attrFromNode( fnNode,</div>\n\
<div class=\"line\">                                             splitItem[0], </div>\n\
<div class=\"line\">                                             (cgfxAttrType)(splitItem[1].asInt()),</div>\n\
<div class=\"line\">                                             splitItem[2],</div>\n\
<div class=\"line\">                                             splitItem[3]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( attrDef )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            list-&gt;add( attrDef );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    pNode-&gt;setAttrDefList(list);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\">cgfxAttrDef*</div>\n\
<div class=\"line\">cgfxAttrDef::attrFromNode( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>&amp; fnNode,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;           sAttrName,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> cgfxAttrType       eAttrType,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;           sDescription,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;           sSemantic)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      status;</div>\n\
<div class=\"line\">    cgfxAttrDef* attrDef = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obNode = fnNode.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obAttr = fnNode.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( sAttrName, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !status )                 <span class=\"comment\">// if node doesn&#39;t have this attr</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> NULL;               <span class=\"comment\">// skip it</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        attrDef = <span class=\"keyword\">new</span> cgfxAttrDef(</div>\n\
<div class=\"line\">            sAttrName, eAttrType, sDescription, sSemantic,</div>\n\
<div class=\"line\">            obNode, obAttr</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )   </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;(&quot;</span>;</div>\n\
<div class=\"line\">        sMsg += (int)ee;</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot;) cgfxShader node \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        sMsg += fnNode.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot;\\&quot; has invalid attribute \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        sMsg += sAttrName;</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot;\\&quot; - ignored&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> attrDef;</div>\n\
<div class=\"line\">        attrDef = NULL; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (...)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> attrDef;</div>\n\
<div class=\"line\">        M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> attrDef;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::attrFromNode</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">cgfxAttrDef::createAttribute( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <a name=\"_a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>* mod, cgfxShaderNode* pNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return if node already has an attribute with the specified name.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (Shader var name could conflict with a predefined static attr.)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obExistingAttr = fnNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( fName );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !obExistingAttr.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oAttr, oAttr2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a>     nAttr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a>       tAttr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_attribute.html\">MFnMatrixAttribute</a>      mAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oSrcNode, oDstNode;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnFile;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oSrcAttr, oDstAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> doConnection = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (fType)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeBool:</div>\n\
<div class=\"line\">            oAttr = nAttr.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( fName, fName, <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>,</div>\n\
<div class=\"line\">                0.0, &amp;status );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">            nAttr.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            nAttr.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">            nAttr.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeInt:</div>\n\
<div class=\"line\">            oAttr = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( fName, fName, <a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>,</div>\n\
<div class=\"line\">                0.0, &amp;status );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">            nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">            nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeFloat:</div>\n\
<div class=\"line\">            oAttr = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( fName, fName, <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>,</div>\n\
<div class=\"line\">                0.0, &amp;status );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">            nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">            nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeString:</div>\n\
<div class=\"line\">            oAttr = tAttr.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(fName, fName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">                <a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;status );</div>\n\
<div class=\"line\">            tAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">            <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">            tAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeVector2:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeVector3:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeVector4:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeColor3:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeColor4:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeObjectDir:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeWorldDir:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeViewDir:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeProjectionDir:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeScreenDir:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeObjectPos:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeWorldPos:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeViewPos:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeProjectionPos:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeScreenPos:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>** suffixes = compoundAttrSuffixes( fType );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>      sChild;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>      oaChildren[4];</div>\n\
<div class=\"line\">                M_CHECK( fSize &lt;= 4 );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iChild = 0; iChild &lt; fSize; ++iChild )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* suffix = suffixes[ iChild ];</div>\n\
<div class=\"line\">                    sChild = fName + suffix;</div>\n\
<div class=\"line\">                    oaChildren[ iChild ] = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( sChild,</div>\n\
<div class=\"line\">                        sChild,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>,</div>\n\
<div class=\"line\">                        0.0,</div>\n\
<div class=\"line\">                        &amp;status );</div>\n\
<div class=\"line\">                    M_CHECK( status );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( fSize == 4 )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    oAttr2 = oaChildren[3];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( fType == kAttrTypeColor3 ||</div>\n\
<div class=\"line\">                        fType == kAttrTypeColor4 ||</div>\n\
<div class=\"line\">                        fDescription.length() &gt; 0 )</div>\n\
<div class=\"line\">                        nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">                        nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                oAttr = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( fName,</div>\n\
<div class=\"line\">                    fName,</div>\n\
<div class=\"line\">                    oaChildren[0],</div>\n\
<div class=\"line\">                    oaChildren[1],</div>\n\
<div class=\"line\">                    oaChildren[2], </div>\n\
<div class=\"line\">                    &amp;status );</div>\n\
<div class=\"line\">                M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( fType == kAttrTypeColor3 ||</div>\n\
<div class=\"line\">                    fType == kAttrTypeColor4 )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">                    nAttr.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fDescription.length() &gt; 0 )</div>\n\
<div class=\"line\">                    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">                nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">                <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">                nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeMatrix:</div>\n\
<div class=\"line\">            <span class=\"comment\">// Create a generic matrix</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            oAttr = mAttr.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_attribute.html#acccc043a2ac80be8fe8e32bcc36b8696\">create</a>(fName, fName,</div>\n\
<div class=\"line\">                <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnMatrixAttribute::kFloat</a>, &amp;status );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">            mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">            <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">            mAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">            <span class=\"comment\">// These matricies are handled internally and have no attribute.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeColor1DTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeColor2DTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeColor3DTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeNormalTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeBumpTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeCubeTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeEnvTexture:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeNormalizationTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( pNode-&gt;getTexturesByName())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                oAttr = tAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(fName, fName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;status );</div>\n\
<div class=\"line\">                M_CHECK( status );</div>\n\
<div class=\"line\">                tAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">                <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">                tAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* suffix1 = <span class=\"stringliteral\">&quot;R&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* suffix2 = <span class=\"stringliteral\">&quot;G&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* suffix3 = <span class=\"stringliteral\">&quot;B&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oChild1 = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(fName + suffix1,</div>\n\
<div class=\"line\">                    fName + suffix1,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>,</div>\n\
<div class=\"line\">                    0.0, &amp;status);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oChild2 = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(fName + suffix2,</div>\n\
<div class=\"line\">                    fName + suffix2,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>,</div>\n\
<div class=\"line\">                    0.0, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oChild3 = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(fName + suffix3,</div>\n\
<div class=\"line\">                    fName + suffix3,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>,</div>\n\
<div class=\"line\">                    0.0, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                oAttr = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( fName,</div>\n\
<div class=\"line\">                    fName,</div>\n\
<div class=\"line\">                    oChild1,</div>\n\
<div class=\"line\">                    oChild2,</div>\n\
<div class=\"line\">                    oChild3, </div>\n\
<div class=\"line\">                    &amp;status );</div>\n\
<div class=\"line\">                M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Although it&#39;s not strictly necessary, set this attribute</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// to be a color so the user can will at least get the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// texture assignment button in the AE if for some reason</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// our AE template is missing</span></div>\n\
<div class=\"line\">                nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Add to category so we know we don&#39;t want to export as a user property (MAYA-79473)</span></div>\n\
<div class=\"line\">                nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab9fc72838d451881be5ef4a910700afc\">addToCategory</a>( <span class=\"stringliteral\">&quot;HW_shader_parameter&quot;</span> );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeTime:</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogEnabled:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogMode:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogStart:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogEnd:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogDensity:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kAttrTypeOther:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (oAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// There is no attribute for this parameter</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the attribute to the node</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = mod-&gt;<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ad714eb6c2e6f51659e3e50f176c75a91\">addAttribute</a>( oNode, oAttr );</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!oAttr2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = mod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ad714eb6c2e6f51659e3e50f176c75a91\">addAttribute</a>( oNode, oAttr2 );</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Hold onto a copy of the attribute for easy access later.</span></div>\n\
<div class=\"line\">        fAttr  = oAttr;</div>\n\
<div class=\"line\">        fAttr2 = oAttr2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If we need to connect this node to some other node, do so.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (doConnection)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = mod-&gt;<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(oSrcNode, oSrcAttr, oDstNode, oDstAttr);</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;                   <span class=\"comment\">// success</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )   </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">        fType = kAttrTypeUnknown;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;(&quot;</span>;</div>\n\
<div class=\"line\">        sMsg += (int)ee;</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot;) cgfxShader node \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        sMsg += fnNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot;\\&quot;: unable to add attribute \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        sMsg += fName;</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;                  <span class=\"comment\">// failure</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (...)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::createAttribute</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">cgfxAttrDef::destroyAttribute( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>* dgMod)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If this is a texture node, clear the value (which will destroy</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// any attached textures)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fType &gt;= kAttrTypeFirstTexture &amp;&amp; fType &lt;= kAttrTypeLastTexture)</div>\n\
<div class=\"line\">        setTexture( oNode, <span class=\"stringliteral\">&quot;&quot;</span>, dgMod);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// New effect won&#39;t need this old attr anymore.  </span></div>\n\
<div class=\"line\">    status = dgMod-&gt;<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ab5595b225c59b15d902dc34b849d90d0\">removeAttribute</a>( oNode, fAttr );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If there is a secondary attribute, remove that too.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !fAttr2.isNull() )</div>\n\
<div class=\"line\">        status = dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ab5595b225c59b15d902dc34b849d90d0\">removeAttribute</a>( oNode, fAttr2 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Don&#39;t leave dangling references to deleted attributes.</span></div>\n\
<div class=\"line\">    fAttr  = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;  </div>\n\
<div class=\"line\">    fAttr2 = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status == <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::destroyAttribute</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ========== cgfxAttrDef::updateNode ==========</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This routine takes a node and an effect and ensures that all those</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and only those attributes that should be on the node, are on the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The output cgfxAttrDefList and its elements are newly </span></div>\n\
<div class=\"line\"><span class=\"comment\">// allocated.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::updateNode(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxRCPtr&lt;const cgfxEffect&gt;&amp;  effect,         <span class=\"comment\">// IN</span></div>\n\
<div class=\"line\">    cgfxShaderNode*                     pNode,          <span class=\"comment\">// IN</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>*                        dgMod,          <span class=\"comment\">// UPD</span></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp;         effectList,     <span class=\"comment\">// OUT</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp;                       attributeList ) <span class=\"comment\">// OUT</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    effectList = cgfxRCPtr&lt;cgfxAttrDefList&gt;();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>           oNode = pNode-&gt;thisMObject();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">        <a name=\"_a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a>      fnAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        effectList = effect-&gt;attrsFromEffect();  <span class=\"comment\">// caller will own this list</span></div>\n\
<div class=\"line\">        cgfxRCPtr&lt;cgfxAttrDefList&gt; nodeList = attrsFromNode( oNode ); <span class=\"comment\">// oNode owns this one</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cgfxAttrDefList::iterator emIt;</div>\n\
<div class=\"line\">        cgfxAttrDefList::iterator nmIt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cgfxAttrDef* adef;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Walk through the nodeList.  Delete each attribute that is not</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// also found in the effect list.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">        {                              <span class=\"comment\">// loop over nodeList</span></div>\n\
<div class=\"line\">            adef = (*nmIt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Skip if node doesn&#39;t have this attribute.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( adef-&gt;fAttr.isNull() )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Look for a matching attribute in the effect</span></div>\n\
<div class=\"line\">            emIt = effectList-&gt;find( adef-&gt;fName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Drop Maya attribute from node if shader var</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//   was declared in old effect, but not declared</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//   in new effect, or data type is not the same.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !emIt ||</div>\n\
<div class=\"line\">                (*emIt)-&gt;fType != adef-&gt;fType )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                adef-&gt;destroyAttribute( oNode, dgMod);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If this is a texture and it has a non-default</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// value, we should switch to this mode of texture</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// definition (names or nodes)</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( emIt &amp;&amp; </div>\n\
<div class=\"line\">                (*emIt)-&gt;fType &gt;= kAttrTypeFirstTexture &amp;&amp;</div>\n\
<div class=\"line\">                (*emIt)-&gt;fType &lt;= kAttrTypeLastTexture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Get the attribute type of the existing attribute</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// and ensure our node is setup to digest the correct</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// type of textures</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> typedFn( adef-&gt;fAttr);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> usesName = typedFn.attrType() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>;</div>\n\
<div class=\"line\">                pNode-&gt;setTexturesByName( usesName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Finally, if this texture uses fileTexture nodes then</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// mark the value as &quot;tweaked&quot; to prevent the default value </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// code from trying to attach a default fileTexture node. </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// This is crucial to being able to load shaders back in. The</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Maya file will create our node using the following steps:</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  1) Create an empty cgfxShader node</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  2) Create all the dynamic attributes (like this texture)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  3) Set the effect attribute (which calls this code)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  4) Create DG connections to file texture nodes</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// So, if we did setup a default file texture node, the load</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// would be unable to connect the real file texture. </span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( !usesName)</div>\n\
<div class=\"line\">                    (*emIt)-&gt;fTweaked = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }                              <span class=\"comment\">// loop over nodeList</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Delete any unnecessary attributes before starting to add new ones</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// (in case we&#39;re deleting and re-creating a property with a different</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// type)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        dgMod-&gt;<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Walk through the effectList.  Add each item that is not also</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// found in the node list.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (emIt = effectList-&gt;begin(); emIt; ++emIt)</div>\n\
<div class=\"line\">        {                              <span class=\"comment\">// loop over effectList </span></div>\n\
<div class=\"line\">            adef = (*emIt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Note: nodeList::find will work with a null this pointer</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// so nodeList-&gt;find() will work even if nodeList is NULL.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            nmIt = nodeList-&gt;find( adef-&gt;fName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Double check that the attr still exists.  Get current value.</span></div>\n\
<div class=\"line\">            cgfxAttrDef* cdef = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( nmIt &amp;&amp;</div>\n\
<div class=\"line\">                !(*nmIt)-&gt;fAttr.isNull() )</div>\n\
<div class=\"line\">                cdef = attrFromNode( fnNode,</div>\n\
<div class=\"line\">                (*nmIt)-&gt;fName, </div>\n\
<div class=\"line\">                (*nmIt)-&gt;fType,</div>\n\
<div class=\"line\">                (*nmIt)-&gt;fDescription,</div>\n\
<div class=\"line\">                (*nmIt)-&gt;fSemantic);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Add new Maya attribute.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !cdef )</div>\n\
<div class=\"line\">                adef-&gt;createAttribute( oNode, dgMod, pNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Go on with existing attribute.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {                          <span class=\"comment\">// use existing attribute</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Copy the attribute handles to the new effect&#39;s cgfxAttrDef.</span></div>\n\
<div class=\"line\">                adef-&gt;fAttr  = (*nmIt)-&gt;fAttr;</div>\n\
<div class=\"line\">                adef-&gt;fAttr2 = (*nmIt)-&gt;fAttr2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Did we already notice that the user has set this attr?</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( (*nmIt)-&gt;fTweaked )</div>\n\
<div class=\"line\">                    adef-&gt;fTweaked = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// If no old effect, then the current values were</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//   loaded from the scene file, and should override </span></div>\n\
<div class=\"line\">                <span class=\"comment\">//   the new effect&#39;s defaults if they are different.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( pNode-&gt;effect().isNull() )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( !adef-&gt;isInitialValueEqual( *cdef ) )</div>\n\
<div class=\"line\">                        adef-&gt;fTweaked = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// If current value is not the same as old effect&#39;s </span></div>\n\
<div class=\"line\">                <span class=\"comment\">//   default, then user has adjusted it.  Current value</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//   takes precedence over the new effect&#39;s default.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( !(*nmIt)-&gt;isInitialValueEqual( *cdef ) )</div>\n\
<div class=\"line\">                    adef-&gt;fTweaked = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// User hasn&#39;t changed this value.  New effect&#39;s</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// default takes precedence.  Since we are going to</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// change the value, remember to change it back </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// to the old effect&#39;s default in case of undo.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Among other things, this logic allows the UI shader</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// description to update as different effects are chosen.</span></div>\n\
<div class=\"line\">                else</div>\n\
<div class=\"line\">                    (*nmIt)-&gt;fInitOnUndo = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> cdef;</div>\n\
<div class=\"line\">            }                          <span class=\"comment\">// use existing attribute</span></div>\n\
<div class=\"line\">        }                              <span class=\"comment\">// loop over effectList </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Now rebuild the attributeList attribute value.  This is an array</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// of strings of the format &quot;attrName&lt;TAB&gt;type&lt;TAB&gt;Description&lt;TAB&gt;Semantic&quot;.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tmpStr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        attributeList.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cgfxAttrDefList::iterator it(effectList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (it)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cgfxAttrDef* aDef = *it;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            tmpStr = aDef-&gt;fName;</div>\n\
<div class=\"line\">            tmpStr += <span class=\"stringliteral\">&quot;\\t&quot;</span>;</div>\n\
<div class=\"line\">            tmpStr += (int)aDef-&gt;fType;</div>\n\
<div class=\"line\">            tmpStr += <span class=\"stringliteral\">&quot;\\t&quot;</span>;</div>\n\
<div class=\"line\">            tmpStr += aDef-&gt;fDescription;</div>\n\
<div class=\"line\">            tmpStr += <span class=\"stringliteral\">&quot;\\t&quot;</span>;</div>\n\
<div class=\"line\">            tmpStr += aDef-&gt;fSemantic;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Drop trailing tabs.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* bp = tmpStr.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* ep;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( ep = bp + tmpStr.<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); bp &lt; ep; --ep )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( ep[-1] != <span class=\"charliteral\">&#39;\\t&#39;</span> )</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            attributeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>( bp, (<span class=\"keywordtype\">int</span>)(ep - bp) ) );</div>\n\
<div class=\"line\">            ++it;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* )   </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (...)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::updateNode</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Return true if initial value of &#39;this&#39; is same as &#39;that&#39;.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">cgfxAttrDef::isInitialValueEqual( <span class=\"keyword\">const</span> cgfxAttrDef&amp; that )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fStringDef != that.fStringDef )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* thisNumericDef = fNumericDef;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* thatNumericDef = that.fNumericDef;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( thisNumericDef == thatNumericDef ) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Make sure we don&#39;t proceed to test default colour values for</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// texture attributes as the colour itself is meaningless!</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fType == that.fType &amp;&amp; fType &gt;= kAttrTypeFirstTexture &amp;&amp; fType &lt;= kAttrTypeLastTexture)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !thisNumericDef )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        thisNumericDef = thatNumericDef;</div>\n\
<div class=\"line\">        thatNumericDef = fNumericDef;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !thatNumericDef )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fType == kAttrTypeMatrix )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            thatNumericDef = &amp;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0];</div>\n\
<div class=\"line\">            M_CHECK( fSize == 16 &amp;&amp; that.fSize == 16 );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> d0[4] = {0.0, 0.0, 0.0, 0.0};</div>\n\
<div class=\"line\">            thatNumericDef = d0;</div>\n\
<div class=\"line\">            M_CHECK( fSize &lt;= <span class=\"keyword\">sizeof</span>(d0)/<span class=\"keyword\">sizeof</span>(d0[0]) );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( fSize != that.fSize )</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( <span class=\"stringliteral\">&quot;CgFX attribute size mismatch&quot;</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    constexpr <span class=\"keywordtype\">double</span> eps = 0.0001;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; fSize; ++i )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( thisNumericDef[ i ] + eps &lt; thatNumericDef[ i ] ||</div>\n\
<div class=\"line\">            thatNumericDef[ i ] + eps &lt; thisNumericDef[ i ] )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::isInitialValueEqual</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Copy initial value from given attribute.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setInitialValue( <span class=\"keyword\">const</span> cgfxAttrDef&amp; from )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( from.fNumericDef )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        M_CHECK( fSize == from.fSize );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !fNumericDef )</div>\n\
<div class=\"line\">            fNumericDef = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[ fSize ];</div>\n\
<div class=\"line\">        memcpy( fNumericDef, from.fNumericDef, fSize * <span class=\"keyword\">sizeof</span>( *fNumericDef ) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> fNumericDef;</div>\n\
<div class=\"line\">        fStringDef = from.fStringDef;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::setInitialValue</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Set attribute flag</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::setAttributeFlags()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> attribute;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(fAttr))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (fType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor3:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor4:</div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeBool:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeInt:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeFloat:</div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeVector2:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeVector3:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeVector4:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeObjectDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeWorldDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeViewDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeProjectionDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeScreenDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeObjectPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeWorldPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeViewPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeProjectionPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeScreenPos:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fDescription.length() &gt; 0)</div>\n\
<div class=\"line\">            attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeString:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeMatrix: <span class=\"comment\">// Create a generic matrix</span></div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">        <span class=\"comment\">// These matricies are handled internally and have no attribute.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor1DTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor2DTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor3DTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeNormalTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeBumpTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeCubeTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeEnvTexture:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeNormalizationTexture:</div>\n\
<div class=\"line\">        <span class=\"comment\">/*if(!getTexturesByName())</span></div>\n\
<div class=\"line\"><span class=\"comment\">            // Although it&#39;s not strictly necessary, set this attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">            // to be a color so the user can will at least get the</span></div>\n\
<div class=\"line\"><span class=\"comment\">            // texture assignment button in the AE if for some reason</span></div>\n\
<div class=\"line\"><span class=\"comment\">            // our AE template is missing</span></div>\n\
<div class=\"line\"><span class=\"comment\">            attribute.setUsedAsColor( true );*/</span></div>\n\
<div class=\"line\">        attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeTime:</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogEnabled:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogMode:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogStart:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogEnd:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogDensity:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeHardwareFogColor:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeOther:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Set Maya attributes to their initial values.</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::initializeAttributes(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;                            oNode,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp;   list,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                                bUndoing,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>*                        dgMod)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_attribute.html\">MFnMatrixAttribute</a>  fnMatrix;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnNumeric;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a>   fnTyped;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( cgfxAttrDefList::iterator it( list ); it; ++it )</div>\n\
<div class=\"line\">    {                                  <span class=\"comment\">// loop over cgfxAttrDefList</span></div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = (*it);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( aDef-&gt;fAttr.isNull() )    <span class=\"comment\">// if no Maya attr</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;                  <span class=\"comment\">// try next</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> bSetValue = bUndoing ? aDef-&gt;fInitOnUndo</div>\n\
<div class=\"line\">            : !aDef-&gt;fTweaked;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Boolean</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( aDef-&gt;fType == kAttrTypeBool )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( bSetValue )</div>\n\
<div class=\"line\">                    aDef-&gt;setValue( oNode, aDef-&gt;fNumericDef &amp;&amp; aDef-&gt;fNumericDef[0] );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Texture node: must be check before both numeric (as a</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// texture could be a float3 colour) and string (as it</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// could also be a string)</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( aDef-&gt;fType &gt;= kAttrTypeFirstTexture &amp;&amp; </div>\n\
<div class=\"line\">                aDef-&gt;fType &lt;= kAttrTypeLastTexture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( bSetValue )</div>\n\
<div class=\"line\">                    aDef-&gt;setTexture( oNode, aDef-&gt;fStringDef, dgMod);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Numeric</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( aDef-&gt;fAttr ) ) </div>\n\
<div class=\"line\">            {                          <span class=\"comment\">// numeric attr</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Constants for removing old bounds...</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> vMin = -FLT_MAX;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> vMax = FLT_MAX;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( aDef-&gt;fType == kAttrTypeInt )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    vMin = INT_MIN;</div>\n\
<div class=\"line\">                    vMax = INT_MAX;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Set or remove bounds.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> ( aDef-&gt;fSize )</div>\n\
<div class=\"line\">                {                      <span class=\"comment\">// switch to set/remove bounds</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 1:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMin )</div>\n\
<div class=\"line\">                        fnNumeric.<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( aDef-&gt;fNumericMin[0] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a1635117fc1cd56e612895c54a0996491\">hasMin</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( vMin );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMax )</div>\n\
<div class=\"line\">                        fnNumeric.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( aDef-&gt;fNumericMax[0] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5b1ba68393fede3d8d2078add520f168\">hasMax</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( vMax );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericSoftMin )</div>\n\
<div class=\"line\">                        fnNumeric.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#af72ddb0704d27319ad52a28bdcd9f2a5\">setSoftMin</a>( aDef-&gt;fNumericSoftMin[0] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a917aaf6e8026c32ca2f402c51e531b69\">hasSoftMin</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#af72ddb0704d27319ad52a28bdcd9f2a5\">setSoftMin</a>( vMin );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericSoftMax )</div>\n\
<div class=\"line\">                        fnNumeric.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#acd6abf61e5a1e573a57a516bf81bb2dc\">setSoftMax</a>( aDef-&gt;fNumericSoftMax[0] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a563766a920e62cba567fdc71af3be8e4\">hasSoftMax</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#acd6abf61e5a1e573a57a516bf81bb2dc\">setSoftMax</a>( vMax );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 2:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMin )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( aDef-&gt;fNumericMin[0], </div>\n\
<div class=\"line\">                        aDef-&gt;fNumericMin[1] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a1635117fc1cd56e612895c54a0996491\">hasMin</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( vMin, vMin );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMax )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( aDef-&gt;fNumericMax[0], </div>\n\
<div class=\"line\">                        aDef-&gt;fNumericMax[1] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5b1ba68393fede3d8d2078add520f168\">hasMax</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( vMax, vMax );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 3:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 4:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMin )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( aDef-&gt;fNumericMin[0], </div>\n\
<div class=\"line\">                        aDef-&gt;fNumericMin[1],</div>\n\
<div class=\"line\">                        aDef-&gt;fNumericMin[2] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a1635117fc1cd56e612895c54a0996491\">hasMin</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( vMin, vMin, vMin );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMax )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( aDef-&gt;fNumericMax[0], </div>\n\
<div class=\"line\">                        aDef-&gt;fNumericMax[1],</div>\n\
<div class=\"line\">                        aDef-&gt;fNumericMax[2] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5b1ba68393fede3d8d2078add520f168\">hasMax</a>() )</div>\n\
<div class=\"line\">                        fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( vMax, vMax, vMax );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">                }                      <span class=\"comment\">// switch to set/remove bounds</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Set initial value.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//   Use 0 if no initial value specified in .fx file.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( bSetValue )</div>\n\
<div class=\"line\">                {                      <span class=\"comment\">// set numeric initial value</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> d0[4] = {0.0, 0.0, 0.0, 0.0};</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* pNumericDef = aDef-&gt;fNumericDef ? aDef-&gt;fNumericDef</div>\n\
<div class=\"line\">                        : d0;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span> ( aDef-&gt;fSize )</div>\n\
<div class=\"line\">                    {                  </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 1:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> ( aDef-&gt;fType == kAttrTypeInt )</div>\n\
<div class=\"line\">                            aDef-&gt;setValue( oNode, (<span class=\"keywordtype\">int</span>)pNumericDef[0] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            aDef-&gt;setValue( oNode, (<span class=\"keywordtype\">float</span>)pNumericDef[0] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 2:</div>\n\
<div class=\"line\">                        aDef-&gt;setValue( oNode,</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[0],</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[1] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 3:</div>\n\
<div class=\"line\">                        aDef-&gt;setValue( oNode,</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[0],</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[1],</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[2] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 4:</div>\n\
<div class=\"line\">                        status = fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( aDef-&gt;fAttr2 );</div>\n\
<div class=\"line\">                        M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMin )</div>\n\
<div class=\"line\">                            fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( aDef-&gt;fNumericMin[3] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a1635117fc1cd56e612895c54a0996491\">hasMin</a>() )</div>\n\
<div class=\"line\">                            fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>( vMin );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericMax )</div>\n\
<div class=\"line\">                            fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( aDef-&gt;fNumericMax[3] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5b1ba68393fede3d8d2078add520f168\">hasMax</a>() )</div>\n\
<div class=\"line\">                            fnNumeric.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>( vMax );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        aDef-&gt;setValue( oNode,</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[0],</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[1],</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[2],</div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>)pNumericDef[3] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">                    }                  <span class=\"comment\">// switch ( aDef-&gt;fSize )</span></div>\n\
<div class=\"line\">                }                      <span class=\"comment\">// set numeric initial value</span></div>\n\
<div class=\"line\">            }                          <span class=\"comment\">// numeric attr</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// String</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnTyped.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( aDef-&gt;fAttr ) &amp;&amp;</div>\n\
<div class=\"line\">                fnTyped.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#aa3bf2ba724f9aaf87976b1fb896fd700\">attrType</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a> )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( bSetValue )</div>\n\
<div class=\"line\">                    aDef-&gt;setValue( oNode, aDef-&gt;fStringDef );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Matrix</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fnMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( aDef-&gt;fAttr ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( !bSetValue )</div>\n\
<div class=\"line\">                {}</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( aDef-&gt;fNumericDef )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> m;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span>* p = &amp;m.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> k = 0; k &lt; 16; ++k )</div>\n\
<div class=\"line\">                        p[ k ] = aDef-&gt;fNumericDef[ k ];</div>\n\
<div class=\"line\">                    aDef-&gt;setValue( oNode, m );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    aDef-&gt;setValue( oNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a> );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )   </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;(&quot;</span>;</div>\n\
<div class=\"line\">            sMsg += (int)ee;</div>\n\
<div class=\"line\">            sMsg += <span class=\"stringliteral\">&quot;) cgfxShader node \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            sMsg += fnNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">            sMsg += <span class=\"stringliteral\">&quot;\\&quot;: unable to initialize attribute \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            sMsg += aDef-&gt;fName;</div>\n\
<div class=\"line\">            sMsg += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }                                  <span class=\"comment\">// loop over cgfxAttrDefList</span></div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::initializeAttributes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Clear all Maya attribute references in a cgfxAttrDefList.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   This should be called whenever the list is detached from </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   the cgfxShader node, to avert an eventual exception in </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   MObject::~MObject() in case the referenced Maya attribute </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   happens to be deleted while the cgfxAttrDefList is in</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   suspense on Maya&#39;s undo queue.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::purgeMObjectCache(<span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp; list)</div>\n\
<div class=\"line\">{                                       </div>\n\
<div class=\"line\">    cgfxAttrDefList::iterator it( list );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; it; ++it )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = (*it);</div>\n\
<div class=\"line\">        aDef-&gt;fAttr  = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\">        aDef-&gt;fAttr2 = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::purgeMObjectCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Refresh Maya attribute references in a cgfxAttrDefList.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   This should be called whenever a saved list is re-attached</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   to the cgfxShader node in the course of undo or redo.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::validateMObjectCache(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;                      obCgfxShader, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp;   list)</div>\n\
<div class=\"line\">{                                       </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sName2;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( obCgfxShader, &amp;status );</div>\n\
<div class=\"line\">    cgfxAttrDefList::iterator it( list );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; it; ++it )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = (*it);</div>\n\
<div class=\"line\">        aDef-&gt;fAttr = fnNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( aDef-&gt;fName, &amp;status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// 4-element vectors use an extra attribute for the 4th element.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* suffix = aDef-&gt;getExtraAttrSuffix();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( suffix )</div>\n\
<div class=\"line\">            aDef-&gt;fAttr2 = fnNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>( aDef-&gt;fName + suffix, &amp;status );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::validateMObjectCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Return suffix for Color4/Vector4 extra attribute, or NULL.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*</div>\n\
<div class=\"line\">cgfxAttrDef::getExtraAttrSuffix()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fSize == 4 )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> compoundAttrSuffixes( fType )[ 3 ];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::getExtraAttrSuffix</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get a string representation of a cgfxAttrType</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* cgfxAttrDef::typeName( cgfxAttrType type )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define CASE(name) case kAttrType##name: return #name</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (type)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:    <span class=\"comment\">// Fall through into case unknown</span></div>\n\
<div class=\"line\">        CASE(Unknown);</div>\n\
<div class=\"line\">        CASE(Bool);</div>\n\
<div class=\"line\">        CASE(Int);</div>\n\
<div class=\"line\">        CASE(Float);</div>\n\
<div class=\"line\">        CASE(String);</div>\n\
<div class=\"line\">        CASE(Vector2);</div>\n\
<div class=\"line\">        CASE(Vector3);</div>\n\
<div class=\"line\">        CASE(Vector4);</div>\n\
<div class=\"line\">        CASE(ObjectDir);</div>\n\
<div class=\"line\">        CASE(WorldDir);</div>\n\
<div class=\"line\">        CASE(ViewDir);</div>\n\
<div class=\"line\">        CASE(ProjectionDir);</div>\n\
<div class=\"line\">        CASE(ScreenDir);</div>\n\
<div class=\"line\">        CASE(ObjectPos);</div>\n\
<div class=\"line\">        CASE(WorldPos);</div>\n\
<div class=\"line\">        CASE(ViewPos);</div>\n\
<div class=\"line\">        CASE(ProjectionPos);</div>\n\
<div class=\"line\">        CASE(ScreenPos);</div>\n\
<div class=\"line\">        CASE(Color3);</div>\n\
<div class=\"line\">        CASE(Color4);</div>\n\
<div class=\"line\">        CASE(Matrix);</div>\n\
<div class=\"line\">        CASE(WorldMatrix);</div>\n\
<div class=\"line\">        CASE(ViewMatrix);</div>\n\
<div class=\"line\">        CASE(ProjectionMatrix);</div>\n\
<div class=\"line\">        CASE(WorldViewMatrix);</div>\n\
<div class=\"line\">        CASE(WorldViewProjectionMatrix);</div>\n\
<div class=\"line\">        CASE(Color1DTexture);</div>\n\
<div class=\"line\">        CASE(Color2DTexture);</div>\n\
<div class=\"line\">        CASE(Color3DTexture);</div>\n\
<div class=\"line\">        CASE(Color2DRectTexture);</div>\n\
<div class=\"line\">        CASE(NormalTexture);</div>\n\
<div class=\"line\">        CASE(BumpTexture);</div>\n\
<div class=\"line\">        CASE(CubeTexture);</div>\n\
<div class=\"line\">        CASE(EnvTexture);</div>\n\
<div class=\"line\">        CASE(NormalizationTexture);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">        CASE(Time);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        CASE(HardwareFogEnabled);</div>\n\
<div class=\"line\">        CASE(HardwareFogMode);</div>\n\
<div class=\"line\">        CASE(HardwareFogStart);</div>\n\
<div class=\"line\">        CASE(HardwareFogEnd);</div>\n\
<div class=\"line\">        CASE(HardwareFogDensity);</div>\n\
<div class=\"line\">        CASE(HardwareFogColor);</div>\n\
<div class=\"line\">        CASE(Other);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>**</div>\n\
<div class=\"line\">cgfxAttrDef::compoundAttrSuffixes( cgfxAttrType eAttrType )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* simple[] = { NULL, NULL, NULL, NULL,    NULL };</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* vector[] = { <span class=\"stringliteral\">&quot;X&quot;</span>,  <span class=\"stringliteral\">&quot;Y&quot;</span>,  <span class=\"stringliteral\">&quot;Z&quot;</span>,  <span class=\"stringliteral\">&quot;W&quot;</span>,     NULL };</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* color[]  = { <span class=\"stringliteral\">&quot;R&quot;</span>,  <span class=\"stringliteral\">&quot;G&quot;</span>,  <span class=\"stringliteral\">&quot;B&quot;</span>,  <span class=\"stringliteral\">&quot;Alpha&quot;</span>, NULL };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>** p;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> ( eAttrType )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeVector2:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeVector3:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeVector4:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeObjectDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeWorldDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeViewDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeProjectionDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeScreenDir:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeObjectPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeWorldPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeViewPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeProjectionPos:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeScreenPos:</div>\n\
<div class=\"line\">        p = vector;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor3:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kAttrTypeColor4:</div>\n\
<div class=\"line\">        p = color;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        p = simple;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> p;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxAttrDef::compoundAttrSuffixes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Methods to get attribute values</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">bool</span>&amp; value )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    status = plug.getValue(value);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">int</span>&amp; value )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    status = plug.getValue(value);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">float</span>&amp; value )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    status = plug.getValue(value);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fUnits != MDistance::kInvalid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        value = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( value, fUnits).<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    status = plug.getValue(value);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">float</span>&amp; v1, <span class=\"keywordtype\">float</span>&amp; v2 )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oData;</div>\n\
<div class=\"line\">    status = plug.getValue(oData);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> fnData(oData, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = fnData.getData(v1, v2);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fUnits != MDistance::kInvalid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        v1 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v1, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">        v2 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v2, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode,</div>\n\
<div class=\"line\">                                            <span class=\"keywordtype\">float</span>&amp; v1, <span class=\"keywordtype\">float</span>&amp; v2, <span class=\"keywordtype\">float</span>&amp; v3 )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oData;</div>\n\
<div class=\"line\">    status = plug.getValue(oData);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> fnData(oData, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = fnData.getData(v1, v2, v3);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fUnits != MDistance::kInvalid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        v1 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v1, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">        v2 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v2, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">        v3 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v3, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode,</div>\n\
<div class=\"line\">                                            <span class=\"keywordtype\">float</span>&amp; v1, <span class=\"keywordtype\">float</span>&amp; v2, <span class=\"keywordtype\">float</span>&amp; v3, <span class=\"keywordtype\">float</span>&amp; v4 )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug2(oNode, fAttr2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oData;</div>\n\
<div class=\"line\">    status = plug.getValue(oData);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> fnData(oData, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = fnData.getData(v1, v2, v3);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the 4th value from the extra attribute.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plug2.getValue(v4);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fUnits != MDistance::kInvalid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        v1 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v1, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">        v2 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v2, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">        v3 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v3, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">        v4 = (float)<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a>( v4, fUnits).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a10e4859da6d5243c4805beb98affb3f2\">as</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a2a3077e91bb7ba19bade3cae7e4604a6\">MDistance::internalUnit</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; value )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oData;</div>\n\
<div class=\"line\">    status = plug.getValue(oData);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> fnData(oData, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    value = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>(&amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <a name=\"_a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a>&amp; value )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fType &gt;= kAttrTypeFirstTexture &amp;&amp;</div>\n\
<div class=\"line\">        fType &lt;= kAttrTypeLastTexture)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> plugArray;</div>\n\
<div class=\"line\">        plug.connectedTo(plugArray, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, &amp;status);</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plugArray.<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcPlug = plugArray[0];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oSrcNode = srcPlug.<a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// OutputDebugStrings(&quot;Source texture object = &quot;, oSrcNode.apiTypeStr());</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        value.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a314b4e06c651149b90dd3cea3a0aae24\">release</a>();</div>\n\
<div class=\"line\">        status = value.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a3e3e6e8e454d2335a2206ea7fc6075d9\">readFromTextureNode</a>(oSrcNode);</div>\n\
<div class=\"line\">        M_CHECK( status );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get the source of an attribute value</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::getSource( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; src)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> plugArray;</div>\n\
<div class=\"line\">    plug.connectedTo(plugArray, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status &amp;&amp; plugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt;= 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1)</div>\n\
<div class=\"line\">        src = plugArray[0];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Methods to set attribute values</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">bool</span> value )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    status = plug.setValue(value);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">int</span> value )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    status = plug.setValue(value);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">float</span> value )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    status = plug.setValue(value);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    status = plug.setValue((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;)value);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">float</span> v1, <span class=\"keywordtype\">float</span> v2 )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> fnData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oData = fnData.<a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7af8f260603ef20b1e0c3d09de0e9c645c\">MFnNumericData::k2Float</a>, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fnData.<a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a5a8685975c5472876e8e3558911a7b7b\">setData</a>(v1, v2);</div>\n\
<div class=\"line\">    status = plug.setValue(oData);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">float</span> v1, <span class=\"keywordtype\">float</span> v2, <span class=\"keywordtype\">float</span> v3 )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> fnData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oData = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a5a8685975c5472876e8e3558911a7b7b\">setData</a>(v1, v2, v3);</div>\n\
<div class=\"line\">    status = plug.setValue(oData);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keywordtype\">float</span> v1, <span class=\"keywordtype\">float</span> v2, <span class=\"keywordtype\">float</span> v3, <span class=\"keywordtype\">float</span> v4 )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug2(oNode, fAttr2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> fnData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> oData = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>, &amp;status);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a5a8685975c5472876e8e3558911a7b7b\">setData</a>(v1, v2, v3);</div>\n\
<div class=\"line\">    status = plug.setValue(oData);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plug2.setValue(v4);</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setValue( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; v )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>       status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> fnData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>       oData = fnData.<a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>( v, &amp;status );</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug( oNode, fAttr );</div>\n\
<div class=\"line\">    status = plug.setValue( oData );</div>\n\
<div class=\"line\">    M_CHECK( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Utility to check if a node is used by any nodes other than us</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> isUsedElsewhere( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> user)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <a name=\"_a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html\">MItDependencyGraph</a> iter( node); !iter.<a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#ac0f0d6fc806b11d246e05cb94e886b38\">isDone</a>(); iter.next())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If there is a downstream connection to something other than our shader ...</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( iter.currentItem() != node)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( iter.currentItem() != user)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// And that connection uses anything other than the message attribute</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// of the texture (which is used to connect the texture to the </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// global texture list)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> src;</div>\n\
<div class=\"line\">                iter.thisPlug().<a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>( src, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( src.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1 &amp;&amp; src[ 0].partialName() != <span class=\"stringliteral\">&quot;msg&quot;</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Finally, check this isn&#39;t just the swatch renderer taking</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// a quick look at this node</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgFn( iter.currentItem());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( dgFn.name() != <span class=\"stringliteral\">&quot;swatchShadingGroup&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Then we&#39;re not the only user of this node!</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//cout&lt;&lt;&quot;Not removing node due to connection&lt;&lt;src[0].name().asChar()&lt;&lt;&quot; to &quot;&lt;&lt;iter.thisPlug().name().asChar()&lt;&lt;endl;</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If this downstream connection is to another shader, or a</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// message connection, don&#39;t follow the connection any further</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            iter.prune();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxAttrDef::setTexture( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; oNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>* dgMod)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(oNode, fAttr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Is this a node or name based texture?</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> attrFn( fAttr);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( attrFn.isUsedAsColor() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Node based texture.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove any existing texture</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( plug.isConnected())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> src;</div>\n\
<div class=\"line\">            plug.connectedTo( src, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, &amp;status);</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( src.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> textureNode = src[ 0].node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// If no other nodes use this texture, we can remove it to </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// avoid cluttering up the scene with unused texture nodes</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( !isUsedElsewhere( textureNode, oNode))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We are the only user of this texture node so we</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// can delete it. Before we do that though, are</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// we the only user of the placement node too?</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> textureFn( textureNode);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> uvPlug = textureFn.findPlug( <span class=\"stringliteral\">&quot;uv&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( status == MS::kSuccess)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> placementNode;</div>\n\
<div class=\"line\">                        uvPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>( placementNode, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, &amp;status);</div>\n\
<div class=\"line\">                        M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// If we are the only user of the placement node, delete </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// it as well</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( placementNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 &amp;&amp;</div>\n\
<div class=\"line\">                            !isUsedElsewhere( placementNode[ 0].node(), textureNode))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            M_CHECK( dgMod-&gt;<a name=\"a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a9e6962659554cd09e71b3d4ef2244404\">deleteNode</a>( placementNode[ 0].node()) );</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Delete the texture node</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a9e6962659554cd09e71b3d4ef2244404\">deleteNode</a>( textureNode) );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We&#39;re not deleting the texture, so just disconnect it</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    M_CHECK( dgMod-&gt;<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#aee585c763e12aa6277000a028dbfa619\">disconnect</a>( src[ 0], plug) );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Do we have a (default) value to set?</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( value.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Resolve the texture value as either an absolute or</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// project relative path. Even though we re-resolve paths</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// when loading textures ourselves, if we want the Maya</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// texture swatch to display, Maya needs to be able to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// find the texture as well.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> relativePath = cgfxFindFile( value, <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If we didn&#39;t find it, just leave the original path (even</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// though it wont work)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( relativePath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) relativePath = value;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create a new file texture and placement node</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Use the MEL commands (as opposed to dgMod.createNode) as these</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// correctly hook up the rendering message connections so our </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// nodes show up in the hypershade etc.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> textureNode, placementNode;</div>\n\
<div class=\"line\">            <a name=\"_a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> originalSelection, newlyCreatedNode;</div>\n\
<div class=\"line\">            <a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( originalSelection);            </div>\n\
<div class=\"line\">            dgMod-&gt;<a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a8df68858b554bb4efd63ce16deec6aa0\">commandToExecute</a>( <span class=\"stringliteral\">&quot;shadingNode -asTexture file&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"comment\">// the next operation getActiveSelectionList needs the node indeed created, so force doIt.</span></div>\n\
<div class=\"line\">            dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( newlyCreatedNode);</div>\n\
<div class=\"line\">            M_CHECK( newlyCreatedNode.<a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() &gt; 0 &amp;&amp; newlyCreatedNode.<a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a>( 0, textureNode));         </div>\n\
<div class=\"line\">            dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a8df68858b554bb4efd63ce16deec6aa0\">commandToExecute</a>( <span class=\"stringliteral\">&quot;shadingNode -asUtility place2dTexture&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"comment\">// the next operation getActiveSelectionList needs the node indeed created, so force doIt.</span></div>\n\
<div class=\"line\">            dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( newlyCreatedNode);</div>\n\
<div class=\"line\">            M_CHECK( newlyCreatedNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() &gt; 0 &amp;&amp; newlyCreatedNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a>( 0, placementNode));</div>\n\
<div class=\"line\">            <a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a33e6a7c8fa1c06fd64063bd08d4e4aef\">MGlobal::setActiveSelectionList</a>( originalSelection);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fileTextureFn( textureNode, &amp;status);</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> placementFn( placementNode, &amp;status);</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Connect the placement node to the file texture node</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;coverage&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;coverage&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;translateFrame&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;translateFrame&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;rotateFrame&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;rotateFrame&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;mirrorU&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;mirrorU&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;mirrorV&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;mirrorV&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;stagger&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;stagger&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;wrapU&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;wrapU&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;wrapV&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;wrapV&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;repeatUV&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;repeatUV&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;offset&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;offset&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;rotateUV&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;rotateUV&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;noiseUV&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;noiseUV&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;vertexUvOne&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;vertexUvOne&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;vertexUvTwo&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;vertexUvTwo&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;vertexUvThree&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;vertexUvThree&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;vertexCameraOne&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;vertexCameraOne&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;outUV&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;uv&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( placementFn.findPlug( <span class=\"stringliteral\">&quot;outUvFilterSize&quot;</span>, <span class=\"keyword\">true</span>), fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;uvFilterSize&quot;</span>, <span class=\"keyword\">true</span>)) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Connect our file texture node to our shader attribute, then set the texture</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>( fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;outColor&quot;</span>, <span class=\"keyword\">true</span>), plug) );</div>\n\
<div class=\"line\">            status = fileTextureFn.findPlug( <span class=\"stringliteral\">&quot;fileTextureName&quot;</span>, <span class=\"keyword\">true</span>).setValue( relativePath);</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        M_CHECK( dgMod-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Simple String attribute - but do a safety check to be sure</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> fnTyped;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fnTyped.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( fAttr ) &amp;&amp;</div>\n\
<div class=\"line\">            fnTyped.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#aa3bf2ba724f9aaf87976b1fb896fd700\">attrType</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a> )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = plug.setValue((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;)value);</div>\n\
<div class=\"line\">            M_CHECK( status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDef::setUnitsToInternal( CGparameter&amp; cgParameter ) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// If the units are converted to internal, return</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fIsConvertedToInternal) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGannotation cgAnnotation = cgGetFirstParameterAnnotation(cgParameter);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (cgAnnotation)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationName      = cgGetAnnotationName(cgAnnotation);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* annotationValue     = cgGetStringAnnotationValue(cgAnnotation);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( stricmp( annotationName, <span class=\"stringliteral\">&quot;units&quot;</span> ) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> unit(&amp;fSymbol);</div>\n\
<div class=\"line\">            unit += annotationValue;</div>\n\
<div class=\"line\">            <span class=\"comment\">// Notice: _XXX is a internal unit</span></div>\n\
<div class=\"line\">            cgSetStringAnnotation(cgAnnotation, unit.asChar());</div>\n\
<div class=\"line\">            <span class=\"comment\">// Make sure if the bind is called more than one time, no need to set to internal again</span></div>\n\
<div class=\"line\">            fIsConvertedToInternal = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        cgAnnotation = cgGetNextAnnotation(cgAnnotation);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          cgfxAttrDefList                           //</span></div>\n\
<div class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxAttrDefList::iterator</div>\n\
<div class=\"line\">cgfxAttrDefList::findInsensitive( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* pName = name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span>    lName = name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    iterator    it( *<span class=\"keyword\">this</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; it; ++it )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( lName == (*it)-&gt;fName.length() &amp;&amp;</div>\n\
<div class=\"line\">            0 == stricmp( pName, (*it)-&gt;fName.asChar() ) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> it;</div>\n\
<div class=\"line\">};                                     <span class=\"comment\">// cgfxAttrDefList::findInsensitive</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDefList::release()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    --refcount;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (refcount &lt;= 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        M_CHECK( refcount == 0 );</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDefList::releaseTextures()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    iterator it(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        (*it)-&gt;release();</div>\n\
<div class=\"line\">        ++it;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxAttrDefList::dump(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fprintf(stderr, <span class=\"stringliteral\">&quot;Dumping cgfxAttrDefList %s : \\n&quot;</span>, name);</div>\n\
<div class=\"line\">  </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (cgfxAttrDefList::iterator it = begin(); it; ++it) {</div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = (*it);</div>\n\
<div class=\"line\">        fprintf(</div>\n\
<div class=\"line\">            stderr,</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;   name=%s, type=%s, size=%d, attr=%s, hint=%d, attr2=%s, def=%s, desc=%s, semantic=%s, CGParameter=0x%p\\n&quot;</span>,</div>\n\
<div class=\"line\">            aDef-&gt;fName.asChar(),</div>\n\
<div class=\"line\">            cgfxAttrDef::typeName(aDef-&gt;fType),</div>\n\
<div class=\"line\">            aDef-&gt;fSize,</div>\n\
<div class=\"line\">            aDef-&gt;fAttr.apiTypeStr(),</div>\n\
<div class=\"line\">            aDef-&gt;fHint,</div>\n\
<div class=\"line\">            aDef-&gt;fAttr2.apiTypeStr(),</div>\n\
<div class=\"line\">            aDef-&gt;fStringDef.asChar(),</div>\n\
<div class=\"line\">            aDef-&gt;fDescription.asChar(),</div>\n\
<div class=\"line\">            aDef-&gt;fSemantic.asChar(),</div>\n\
<div class=\"line\">            aDef-&gt;fParameterHandle</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";