var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: ik2Bsolver/AwQuaternion.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'ik2_bsolver_2_aw_quaternion_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: ik2Bsolver/AwQuaternion.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">ik2Bsolver/AwQuaternion.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  CLASS:    AwQuaternion</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  CLASS DESCRIPTION (AwQuaternion)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Quaternions can be used to specify orientations and rotations of 3-D</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  objects relative to a starting reference, similar to the way that cartesian</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  vectors can be used to specify positions and translations of 3-D objects</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  relative to an origin.  Quaternions represent orientations as a single</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rotation, just as rectangular co-ordinates represent position as a single</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  vector.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define  COMPILE_OUTSIDE_MAYA</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwMath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwQuaternion.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize constants</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> AwQuaternion AwQuaternion::identity;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AwQuaternion::AwQuaternion(<span class=\"keyword\">const</span> AwVector &amp;a, <span class=\"keyword\">const</span> AwVector &amp;b)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This constructor creates a new quaternion that will rotate vector</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      a into vector b about their mutually perpendicular axis. (if one</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      exists)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">: w(1.0), x(0.0), y(0.0), z(0.0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> factor = a.length() * b.length();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fabs(factor) &gt; kFloatEpsilon) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Vectors have length &gt; 0</span></div>\n\
<div class=\"line\">        AwVector pivotVector;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> dot = a.dotProduct(b) / factor;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> theta = acos(clamp(dot, -1.0, 1.0));</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        pivotVector = a^b;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dot &lt; 0.0 &amp;&amp; pivotVector.length() &lt; kFloatEpsilon) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Vectors parallel and opposite direction, therefore a rotation</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// of 180 degrees about any vector perpendicular to this vector</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// will rotate vector a onto vector b.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// The following guarantees the dot-product will be 0.0.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> dominantIndex = a.dominantAxis();</div>\n\
<div class=\"line\">            pivotVector[dominantIndex] = -a[(dominantIndex+1)%3];</div>\n\
<div class=\"line\">            pivotVector[(dominantIndex+1)%3] = a[dominantIndex];</div>\n\
<div class=\"line\">            pivotVector[(dominantIndex+2)%3] = 0.0;</div>\n\
<div class=\"line\">        }       </div>\n\
<div class=\"line\">        setAxisAngle(pivotVector, theta);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AwQuaternion &amp; AwQuaternion::operator=(<span class=\"keyword\">const</span> AwMatrix &amp;tm)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Convert the given 4X4 homogeneous rotation matrix to a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      quaternion of unit length.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Notes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This methods always returns a quaternion of unit length IF it</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      is given a proper orthogonal matrix.  A proper othogonal</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      matrix is one such that the determinant of the matrix is one.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (If the determinant were -1, this would imply that the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      orthogonal matrix is also producing a reflection, in addition</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      to a rotation.)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> trace, s;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i, j, k;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// vectors are multiplied on the left (pre-multipy).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    trace = tm.matrix[0][0] + tm.matrix[1][1] + tm.matrix[2][2];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (trace &gt; 0.0) {</div>\n\
<div class=\"line\">        s = sqrt(trace + 1.0);</div>\n\
<div class=\"line\">        w = s * 0.5;</div>\n\
<div class=\"line\">        assert(s &gt; kExtendedEpsilon);</div>\n\
<div class=\"line\">        s = 0.5/s;</div>\n\
<div class=\"line\">        x = (tm.matrix[1][2] - tm.matrix[2][1]) * s;</div>\n\
<div class=\"line\">        y = (tm.matrix[2][0] - tm.matrix[0][2]) * s;</div>\n\
<div class=\"line\">        z = (tm.matrix[0][1] - tm.matrix[1][0]) * s;</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {        </div>\n\
<div class=\"line\">        i = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (tm.matrix[1][1] &gt; tm.matrix[0][0])</div>\n\
<div class=\"line\">            i = 1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (tm.matrix[2][2] &gt; tm.matrix[i][i])</div>\n\
<div class=\"line\">            i = 2;</div>\n\
<div class=\"line\">        j = (i+1)%3;</div>\n\
<div class=\"line\">        k = (j+1)%3;</div>\n\
<div class=\"line\">        s = sqrt(tm.matrix[i][i] - (tm.matrix[j][j] + tm.matrix[k][k]) + 1.0);</div>\n\
<div class=\"line\">        (*this)[i] = s * 0.5;</div>\n\
<div class=\"line\">        assert(s &gt; kExtendedEpsilon);</div>\n\
<div class=\"line\">        s = 0.5 / s;</div>\n\
<div class=\"line\">        w = (tm.matrix[j][k] - tm.matrix[k][j]) * s;</div>\n\
<div class=\"line\">        (*this)[j] = (tm.matrix[j][i] + tm.matrix[i][j]) * s;</div>\n\
<div class=\"line\">        (*this)[k] = (tm.matrix[k][i] + tm.matrix[i][k]) * s;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AwQuaternion AwQuaternion::operator*(<span class=\"keyword\">const</span> AwQuaternion &amp;rhs) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This operator returns the product of two quaternions.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      &quot;This&quot; quaternion is the left quaternion in the product.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      In general, if p and q are quaternions, pq != qp, i.e.,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      multiplication does not commute!</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Quaternions in Maya multiply on the right (post-multiply)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the same as matrices. Many popular quaternion papers (Shoemake)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      use pre-multiplication where quaternions pre-multiply on the left</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      so you must be aware of this when using quaternions.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    AwQuaternion result;    </div>\n\
<div class=\"line\">    result.w = rhs.w * w - (rhs.x * x + rhs.y * y + rhs.z * z);</div>\n\
<div class=\"line\">    result.x = rhs.w * x +  rhs.x * w + rhs.y * z - rhs.z * y;</div>\n\
<div class=\"line\">    result.y = rhs.w * y +  rhs.y * w + rhs.z * x - rhs.x * z;</div>\n\
<div class=\"line\">    result.z = rhs.w * z +  rhs.z * w + rhs.x * y - rhs.y * x;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AwQuaternion::operator AwMatrix() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This casts a AwQuaternion to an AwMatrix by making use of the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      convertToMatrix method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    AwMatrix m;</div>\n\
<div class=\"line\">    convertToMatrix(m);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> m;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AwQuaternion::convertToMatrix(AwMatrix &amp;tm) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Convert quaternion to a 4X4 homogeneous rotation matrix and pass</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      result back in &#39;tm&#39;.  The construction of the matrix assumes that the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      vectors are going to be multiplied on the left side of the matrix.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      If the quaternion&#39;s length has degenerated, this method will still</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      produce a well behaved matrix.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Notes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      For an explanation of the following implementation see</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Shoemake, K.,  &quot;Quaternion Calculus and Fast Animation&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Common subexpressions</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> ww = w*w, xx = x*x, yy = y*y, zz = z*z;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> s = 2.0/(ww + xx + yy + zz);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xy = x*y, xz = x*z, yz = y*z, wx = w*x, wy = w*y, wz = w*z;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// vectors are multiplied on the left (pre-multipy).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    tm.matrix[0][0] = 1.0 - s * (yy + zz);</div>\n\
<div class=\"line\">    tm.matrix[1][0] = s * (xy - wz);</div>\n\
<div class=\"line\">    tm.matrix[2][0] = s * (xz + wy);</div>\n\
<div class=\"line\">    tm.matrix[3][0] = 0.0;</div>\n\
<div class=\"line\">    tm.matrix[0][1] = s * (xy + wz);</div>\n\
<div class=\"line\">    tm.matrix[1][1] = 1.0 - s * (xx + zz);</div>\n\
<div class=\"line\">    tm.matrix[2][1] = s * (yz - wx);</div>\n\
<div class=\"line\">    tm.matrix[3][1] = 0.0;</div>\n\
<div class=\"line\">    tm.matrix[0][2] = s * (xz - wy);</div>\n\
<div class=\"line\">    tm.matrix[1][2] = s * (yz + wx);</div>\n\
<div class=\"line\">    tm.matrix[2][2] = 1.0 - s * (xx + yy);</div>\n\
<div class=\"line\">    tm.matrix[3][2] = 0.0;</div>\n\
<div class=\"line\">    tm.matrix[0][3] = 0.0;</div>\n\
<div class=\"line\">    tm.matrix[1][3] = 0.0;</div>\n\
<div class=\"line\">    tm.matrix[2][3] = 0.0;</div>\n\
<div class=\"line\">    tm.matrix[3][3] = 1.0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AwQuaternion &amp;AwQuaternion::setAxisAngle(<span class=\"keyword\">const</span> AwVector &amp;axis, <span class=\"keywordtype\">double</span> theta)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This function sets this quaternion to be the rotation as expressed by a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      pivot axis and a rotation theta (in radians) about that axis.  If the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      axis is too small the quaternion returned will be the identity</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      quaternion.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> sumOfSquares = </div>\n\
<div class=\"line\">        (double) axis.x * axis.x +</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">double</span>) axis.y * axis.y +</div>\n\
<div class=\"line\">        (double) axis.z * axis.z;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    if (sumOfSquares &lt;= kDoubleEpsilon) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Axis too small.</span></div>\n\
<div class=\"line\">        *<span class=\"keyword\">this</span> = identity;</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        theta *= 0.5;</div>\n\
<div class=\"line\">        w = cos(theta);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> commonFactor = sin(theta);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!::equivalent(sumOfSquares, 1.0)) </div>\n\
<div class=\"line\">            commonFactor /= sqrt(sumOfSquares);</div>\n\
<div class=\"line\">        x = commonFactor * (double) axis.x;</div>\n\
<div class=\"line\">        y = commonFactor * (<span class=\"keywordtype\">double</span>) axis.y;</div>\n\
<div class=\"line\">        z = commonFactor * (double) axis.z;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AwQuaternion::getAxisAngle(AwVector &amp;axis, <span class=\"keywordtype\">double</span> &amp;theta) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This function converts this quaternion into a user understandable</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      representation.  That is, the quaternion is represented as a pivot</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      vector &#39;axis&#39; and a rotation &#39;theta&#39; (in radians) about that pivot</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      vector.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Returns:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      true    - angle != 0</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      false   - angle == 0    (uses arbitrary axis, if given axis not valid)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Notes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      If the identity unit quaternion is attempted to be converted to the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      pivot axis and angle representation it will be set to a zero degree</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      rotation about the axis that was passed in.  (Note that any axis will</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      do, since an infinity of axis with rotation of zero satisfy the identity</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      rotation.)  If the axis is zero length, then an arbitrary axis will be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      chosen (z-axis).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> inverseOfSinThetaByTwo, thetaExtended;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (::equivalent(w, (<span class=\"keywordtype\">double</span>) 1.0)) {</div>\n\
<div class=\"line\">        theta = 0.0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (axis.length() &lt; kDoubleEpsilon) {</div>\n\
<div class=\"line\">            <span class=\"comment\">//  Passed in axis invalid, choose an arbitrary axis.</span></div>\n\
<div class=\"line\">            axis.set(0.0,0.0,1.0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        thetaExtended = acos(clamp(w,-1.0,1.0));</div>\n\
<div class=\"line\">        theta = thetaExtended * 2.0;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        inverseOfSinThetaByTwo = 1.0 / sin(thetaExtended);</div>\n\
<div class=\"line\">        axis.x = x * inverseOfSinThetaByTwo;</div>\n\
<div class=\"line\">        axis.y = y * inverseOfSinThetaByTwo;</div>\n\
<div class=\"line\">        axis.z = z * inverseOfSinThetaByTwo;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*friend*/</span> ostream &amp;operator&lt;&lt;(ostream &amp;os, <span class=\"keyword\">const</span> AwQuaternion &amp;q)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Stream output.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    os &lt;&lt; <span class=\"stringliteral\">&quot;[&quot;</span> </div>\n\
<div class=\"line\">       &lt;&lt; <span class=\"stringliteral\">&quot;x: &quot;</span> &lt;&lt; q.x &lt;&lt; <span class=\"stringliteral\">&quot;, &quot;</span> </div>\n\
<div class=\"line\">       &lt;&lt; <span class=\"stringliteral\">&quot;y: &quot;</span> &lt;&lt; q.y &lt;&lt; <span class=\"stringliteral\">&quot;, &quot;</span> </div>\n\
<div class=\"line\">       &lt;&lt; <span class=\"stringliteral\">&quot;z: &quot;</span> &lt;&lt; q.z &lt;&lt; <span class=\"stringliteral\">&quot;, &quot;</span> </div>\n\
<div class=\"line\">       &lt;&lt; <span class=\"stringliteral\">&quot;w: &quot;</span> &lt;&lt; q.w &lt;&lt; <span class=\"stringliteral\">&quot;]&quot;</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> os;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";