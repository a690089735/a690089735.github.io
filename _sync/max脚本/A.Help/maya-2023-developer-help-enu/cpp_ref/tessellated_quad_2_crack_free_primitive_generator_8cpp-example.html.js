var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: tessellatedQuad/CrackFreePrimitiveGenerator.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'tessellated_quad_2_crack_free_primitive_generator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: tessellatedQuad/CrackFreePrimitiveGenerator.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">tessellatedQuad/CrackFreePrimitiveGenerator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CrackFreePrimitiveGenerator.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStatus.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxVertexBufferGenerator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MComponentDataIndexing.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Edge</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Edge(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v0_ = 0, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v1_ = 0) : v0(v0_), v1(v1_) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Edge reversed()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> Edge(v1, v0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isEqual(<span class=\"keyword\">const</span> Edge &amp;rhs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (v0 == rhs.v0 &amp;&amp; v1 == rhs.v1);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isReverse(<span class=\"keyword\">const</span> Edge &amp;rhs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (v0 == rhs.v1 &amp;&amp; v1 == rhs.v0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v1;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator&lt; (<span class=\"keyword\">const</span> Edge&amp; lhs, <span class=\"keyword\">const</span> Edge&amp; rhs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (lhs.v0 &lt; rhs.v0) || (lhs.v0 == rhs.v0 &amp;&amp; lhs.v1 &lt; rhs.v1);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>EdgeMapping</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        EdgeMapping();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addTriangle(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId0, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId1, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId2, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId0, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId1, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId2);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addEdge(<span class=\"keyword\">const</span> Edge&amp; faceEdge, <span class=\"keyword\">const</span> Edge&amp; polyEdge);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addPositionUV(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> v);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> adjacentEdge(<span class=\"keyword\">const</span> Edge&amp; faceEdge, Edge&amp; adjacentEdge) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> dominantEdge(<span class=\"keyword\">const</span> Edge&amp; faceEdge, Edge&amp; dominantEdge) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> dominantPosition(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>&amp; dominantVertexId) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Map each face edge to its polygon edge.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; Edge, Edge &gt; FaceEdge2PolyEdgeMap;</div>\n\
<div class=\"line\">        FaceEdge2PolyEdgeMap fFaceEdge2PolyEdgeMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Map each poly edge to both face edges that match.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; Edge, std::pair&lt; Edge, Edge &gt; &gt; PolyEdge2FaceEdgeMap;</div>\n\
<div class=\"line\">        PolyEdge2FaceEdgeMap fPolyEdge2FaceEdgesMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Map a single face vertex id to its polygon vertex id.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; unsigned int, unsigned int &gt; FaceVertex2PolyVertexMap;</div>\n\
<div class=\"line\">        FaceVertex2PolyVertexMap fFaceVertex2PolyVertexMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Map dominant vertex position via lowest uv coords.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::pair&lt; unsigned int, std::pair&lt; float, float &gt; &gt; VertexUVPair;</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; unsigned int, VertexUVPair &gt; PolyVertex2FaceVertexUVMap;</div>\n\
<div class=\"line\">        PolyVertex2FaceVertexUVMap fPolyVertex2FaceVertexUVMap;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    EdgeMapping::EdgeMapping()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> EdgeMapping::addTriangle(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId0, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId1, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId2, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId0, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId1, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addEdge( Edge(faceVertexId0, faceVertexId1), Edge(polyVertexId0, polyVertexId1) );</div>\n\
<div class=\"line\">        addEdge( Edge(faceVertexId1, faceVertexId2), Edge(polyVertexId1, polyVertexId2) );</div>\n\
<div class=\"line\">        addEdge( Edge(faceVertexId2, faceVertexId0), Edge(polyVertexId2, polyVertexId0) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add a new edge</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The edge is represented by two associated vertex ids pairs : one in face vertices array space and a second in polygon face vertices array space.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> EdgeMapping::addEdge(<span class=\"keyword\">const</span> Edge&amp; faceEdge, <span class=\"keyword\">const</span> Edge&amp; polyEdge)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(polyEdge.v1 &lt; polyEdge.v0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Revert edges</span></div>\n\
<div class=\"line\">            Edge faceEdgeR = faceEdge.reversed();</div>\n\
<div class=\"line\">            Edge polyEdgeR = polyEdge.reversed();</div>\n\
<div class=\"line\">            addEdge(faceEdgeR, polyEdgeR);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fFaceEdge2PolyEdgeMap[faceEdge] = polyEdge;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        PolyEdge2FaceEdgeMap::iterator itP2F = fPolyEdge2FaceEdgesMap.find( polyEdge );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(itP2F == fPolyEdge2FaceEdgesMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fPolyEdge2FaceEdgesMap[polyEdge] = std::make_pair( faceEdge, faceEdge );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            itP2F-&gt;second.second = faceEdge;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> EdgeMapping::addPositionUV(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> v)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fFaceVertex2PolyVertexMap[faceVertexId] = polyVertexId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        PolyVertex2FaceVertexUVMap::iterator it = fPolyVertex2FaceVertexUVMap.find(polyVertexId);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(it == fPolyVertex2FaceVertexUVMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fPolyVertex2FaceVertexUVMap[polyVertexId] = std::make_pair( faceVertexId, std::make_pair(u,v) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            VertexUVPair&amp; vertexUVPair = it-&gt;second;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> lastU = vertexUVPair.second.first;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> lastV = vertexUVPair.second.second;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( u &lt; lastU || ( u == lastU &amp;&amp; v &lt; lastV ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                vertexUVPair.first = faceVertexId;</div>\n\
<div class=\"line\">                vertexUVPair.second = std::make_pair(u,v);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the adjacent edge that is shared between two faces.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The matching is done through the polygon vertex ids.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The returning edge have vertices in face space.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> EdgeMapping::adjacentEdge(<span class=\"keyword\">const</span> Edge&amp; faceEdge, Edge&amp; adjacentEdge)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        FaceEdge2PolyEdgeMap::const_iterator itF2P = fFaceEdge2PolyEdgeMap.find( faceEdge );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(itF2P == fFaceEdge2PolyEdgeMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Edge faceEdgeR = faceEdge.reversed();</div>\n\
<div class=\"line\">            itF2P = fFaceEdge2PolyEdgeMap.find( faceEdgeR );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(itF2P == fFaceEdge2PolyEdgeMap.end())</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Edge&amp; polyEdge = itF2P-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        PolyEdge2FaceEdgeMap::const_iterator itP2F = fPolyEdge2FaceEdgesMap.find( polyEdge );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(itP2F == fPolyEdge2FaceEdgesMap.end())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Edge&amp; faceEdge0 = itP2F-&gt;second.first;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Edge&amp; faceEdge1 = itP2F-&gt;second.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> foundMatch = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(faceEdge.isEqual(faceEdge0))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            adjacentEdge = faceEdge1;</div>\n\
<div class=\"line\">            foundMatch = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(faceEdge.isReverse(faceEdge0))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            adjacentEdge = faceEdge1.reversed();</div>\n\
<div class=\"line\">            foundMatch = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(faceEdge.isEqual(faceEdge1))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            adjacentEdge = faceEdge0;</div>\n\
<div class=\"line\">            foundMatch = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(faceEdge.isReverse(faceEdge1))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            adjacentEdge = faceEdge0.reversed();</div>\n\
<div class=\"line\">            foundMatch = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> foundMatch;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> EdgeMapping::dominantEdge(<span class=\"keyword\">const</span> Edge&amp; faceEdge, Edge&amp; dominantEdge)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> returnReversed = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        FaceEdge2PolyEdgeMap::const_iterator itF2P = fFaceEdge2PolyEdgeMap.find( faceEdge );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(itF2P == fFaceEdge2PolyEdgeMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Edge faceEdgeR = faceEdge.reversed();</div>\n\
<div class=\"line\">            itF2P = fFaceEdge2PolyEdgeMap.find( faceEdgeR );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(itF2P == fFaceEdge2PolyEdgeMap.end())</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            returnReversed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Edge&amp; polyEdge = itF2P-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        PolyEdge2FaceEdgeMap::const_iterator itP2F = fPolyEdge2FaceEdgesMap.find( polyEdge );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(itP2F == fPolyEdge2FaceEdgesMap.end())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Edge&amp; faceEdge0 = itP2F-&gt;second.first;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Edge&amp; faceEdge1 = itP2F-&gt;second.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(faceEdge0 &lt; faceEdge1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            dominantEdge = (returnReversed ? faceEdge0.reversed() : faceEdge0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            dominantEdge = (returnReversed ? faceEdge1.reversed() : faceEdge1);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> EdgeMapping::dominantPosition(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>&amp; dominantVertexId)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        FaceVertex2PolyVertexMap::const_iterator itF2P = fFaceVertex2PolyVertexMap.find(faceVertexId);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(itF2P == fFaceVertex2PolyVertexMap.end())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> polyVertexId = itF2P-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        PolyVertex2FaceVertexUVMap::const_iterator itP2FUV = fPolyVertex2FaceVertexUVMap.find(polyVertexId);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(itP2FUV == fPolyVertex2FaceVertexUVMap.end())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        dominantVertexId = itP2FUV-&gt;second.first;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VertexF</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> kTolerance;</div>\n\
<div class=\"line\">        VertexF(<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* buffer, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> bufferPos = index * 3;</div>\n\
<div class=\"line\">            x = buffer[bufferPos++];</div>\n\
<div class=\"line\">            y = buffer[bufferPos++];</div>\n\
<div class=\"line\">            z = buffer[bufferPos++];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isEqual(<span class=\"keyword\">const</span> VertexF &amp;rhs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (fabs(x - rhs.x) &lt; kTolerance &amp;&amp; fabs(y - rhs.y) &lt; kTolerance &amp;&amp; fabs(z - rhs.z) &lt; kTolerance);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> x, y, z;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> VertexF::kTolerance = 1e-5f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator&lt; (<span class=\"keyword\">const</span> VertexF&amp; lhs, <span class=\"keyword\">const</span> VertexF&amp; rhs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ((lhs.x - rhs.x) &lt; -VertexF::kTolerance) || </div>\n\
<div class=\"line\">               (fabs(lhs.x - rhs.x) &lt; VertexF::kTolerance &amp;&amp; (lhs.y - rhs.y) &lt; -VertexF::kTolerance) || </div>\n\
<div class=\"line\">               (fabs(lhs.x - rhs.x) &lt; VertexF::kTolerance &amp;&amp; fabs(lhs.y - rhs.y) &lt; VertexF::kTolerance &amp;&amp; (lhs.z - rhs.z) &lt; -VertexF::kTolerance);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VertexFMap</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getVertexId( <span class=\"keyword\">const</span> VertexF&amp; v );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt;VertexF, unsigned int&gt; TVtxMap;</div>\n\
<div class=\"line\">        TVtxMap vertexMap;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> VertexFMap::getVertexId( <span class=\"keyword\">const</span> VertexF&amp; v )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        VertexFMap::TVtxMap::const_iterator itVtx = vertexMap.find(v);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (itVtx != vertexMap.end())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> itVtx-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nextId = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)vertexMap.size();</div>\n\
<div class=\"line\">        vertexMap.insert(TVtxMap::value_type(v,nextId));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> nextId;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Mode 1 : PN Triangles; no divergent normals and no displacement crack fix</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Mode 2 : PN AEN, divergent normals crack fix; no displacement UV seam crack fix</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Mode 3 : PN AEN, crack fix for divergent normals and UV seam displacement</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CrackFreePrimitiveGenerator::CrackFreePrimitiveGenerator(<span class=\"keywordtype\">bool</span> addAdjacentEdges, <span class=\"keywordtype\">bool</span> addDominantEdges, <span class=\"keywordtype\">bool</span> addDominantPosition)</div>\n\
<div class=\"line\">: fAddAdjacentEdges(addAdjacentEdges)</div>\n\
<div class=\"line\">, fAddDominantEdges(addDominantEdges)</div>\n\
<div class=\"line\">, fAddDominantPosition(addDominantPosition)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CrackFreePrimitiveGenerator::~CrackFreePrimitiveGenerator() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> CrackFreePrimitiveGenerator::computeTriangleSize(<span class=\"keywordtype\">bool</span> bAddAdjacentEdges,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> bAddDominantEdges,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> bAddDominantPosition)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 3                                <span class=\"comment\">/* triangles vertices */</span></div>\n\
<div class=\"line\">        + (bAddAdjacentEdges ? 3 * 2 : 0)   <span class=\"comment\">/* adjacent edges */</span></div>\n\
<div class=\"line\">        + (bAddDominantEdges ? 3 * 2 : 0)   <span class=\"comment\">/* dominant edges */</span></div>\n\
<div class=\"line\">        + (bAddDominantPosition ? 3 : 0);   <span class=\"comment\">/* dominant position */</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CrackFreePrimitiveGenerator::mutateIndexBuffer( <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; originalBufferIndices, </div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positionBufferFloat, </div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* uvBufferFloat, </div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> bAddAdjacentEdges,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> bAddDominantEdges,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> bAddDominantPosition,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MHWRender::MGeometry::DataType</a> indexBufferDataType,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">void</span>* indexData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriVerts = originalBufferIndices.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    EdgeMapping edges;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        VertexFMap vertexMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Iterate all triangles found in the old index buffer:</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (vertexIndex &lt; numTriVerts)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId0 = originalBufferIndices[vertexIndex++];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId0 = vertexMap.getVertexId(VertexF(positionBufferFloat, faceVertexId0));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId1 = originalBufferIndices[vertexIndex++];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId1 = vertexMap.getVertexId(VertexF(positionBufferFloat, faceVertexId1));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceVertexId2 = originalBufferIndices[vertexIndex++];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertexId2 = vertexMap.getVertexId(VertexF(positionBufferFloat, faceVertexId2));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            edges.addTriangle(faceVertexId0, faceVertexId1, faceVertexId2, polyVertexId0, polyVertexId1, polyVertexId2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(bAddDominantPosition &amp;&amp; uvBufferFloat)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> uvIndex;</div>\n\
<div class=\"line\">                uvIndex = faceVertexId0 * 2;</div>\n\
<div class=\"line\">                edges.addPositionUV(faceVertexId0, polyVertexId0, uvBufferFloat[uvIndex], uvBufferFloat[uvIndex+1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                uvIndex = faceVertexId1 * 2;</div>\n\
<div class=\"line\">                edges.addPositionUV(faceVertexId1, polyVertexId1, uvBufferFloat[uvIndex], uvBufferFloat[uvIndex+1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                uvIndex = faceVertexId2 * 2;</div>\n\
<div class=\"line\">                edges.addPositionUV(faceVertexId2, polyVertexId2, uvBufferFloat[uvIndex], uvBufferFloat[uvIndex+1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> newTriId = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> triId = 0; triId &lt; numTriVerts; )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId0 = originalBufferIndices[triId++];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId1 = originalBufferIndices[triId++];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId2 = originalBufferIndices[triId++];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (indexBufferDataType == <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Triangle vertices</span></div>\n\
<div class=\"line\">            ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = vertexId0;</div>\n\
<div class=\"line\">            ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = vertexId1;</div>\n\
<div class=\"line\">            ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = vertexId2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Adjacent edges</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(bAddAdjacentEdges)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Edge adjacentEdge;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge0 : vertexId0 - vertexId1</span></div>\n\
<div class=\"line\">                edges.adjacentEdge(Edge(vertexId0, vertexId1), adjacentEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = adjacentEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = adjacentEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge1 : vertexId1 - vertexId2</span></div>\n\
<div class=\"line\">                edges.adjacentEdge(Edge(vertexId1, vertexId2), adjacentEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = adjacentEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = adjacentEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge2 : vertexId2 - vertexId0</span></div>\n\
<div class=\"line\">                edges.adjacentEdge(Edge(vertexId2, vertexId0), adjacentEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = adjacentEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = adjacentEdge.v1;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Dominant edges</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(bAddDominantEdges)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Edge dominantEdge;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge0 : vertexId0 - vertexId1</span></div>\n\
<div class=\"line\">                edges.dominantEdge(Edge(vertexId0, vertexId1), dominantEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge1 : vertexId1 - vertexId2</span></div>\n\
<div class=\"line\">                edges.dominantEdge(Edge(vertexId1, vertexId2), dominantEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge2 : vertexId2 - vertexId0</span></div>\n\
<div class=\"line\">                edges.dominantEdge(Edge(vertexId2, vertexId0), dominantEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantEdge.v1;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Dominant position</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(bAddDominantPosition)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dominantVertexId = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                edges.dominantPosition(vertexId0, dominantVertexId);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantVertexId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                edges.dominantPosition(vertexId1, dominantVertexId);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantVertexId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                edges.dominantPosition(vertexId2, dominantVertexId);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = dominantVertexId;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (indexBufferDataType == <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a771a88748799bba09da625ffee5c6945\">MHWRender::MGeometry::kUnsignedChar</a>) {</div>\n\
<div class=\"line\">            ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)vertexId0;</div>\n\
<div class=\"line\">            ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)vertexId1;</div>\n\
<div class=\"line\">            ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)vertexId2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Adjacent edges</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(bAddAdjacentEdges)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Edge adjacentEdge;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge0 : vertexId0 - vertexId1</span></div>\n\
<div class=\"line\">                edges.adjacentEdge(Edge(vertexId0, vertexId1), adjacentEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)adjacentEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>)adjacentEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge1 : vertexId1 - vertexId2</span></div>\n\
<div class=\"line\">                edges.adjacentEdge(Edge(vertexId1, vertexId2), adjacentEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)adjacentEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>)adjacentEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge2 : vertexId2 - vertexId0</span></div>\n\
<div class=\"line\">                edges.adjacentEdge(Edge(vertexId2, vertexId0), adjacentEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)adjacentEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>)adjacentEdge.v1;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Dominant edges</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(bAddDominantEdges)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Edge dominantEdge;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge0 : vertexId0 - vertexId1</span></div>\n\
<div class=\"line\">                edges.dominantEdge(Edge(vertexId0, vertexId1), dominantEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)dominantEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>)dominantEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge1 : vertexId1 - vertexId2</span></div>\n\
<div class=\"line\">                edges.dominantEdge(Edge(vertexId1, vertexId2), dominantEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)dominantEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>)dominantEdge.v1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Edge2 : vertexId2 - vertexId0</span></div>\n\
<div class=\"line\">                edges.dominantEdge(Edge(vertexId2, vertexId0), dominantEdge);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)dominantEdge.v0;</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>)dominantEdge.v1;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Dominant position</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(bAddDominantPosition)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dominantVertexId = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                edges.dominantPosition(vertexId0, dominantVertexId);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)dominantVertexId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                edges.dominantPosition(vertexId1, dominantVertexId);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)dominantVertexId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                edges.dominantPosition(vertexId2, dominantVertexId);</div>\n\
<div class=\"line\">                ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)dominantVertexId;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MHWRender::MGeometry::Primitive</a> CrackFreePrimitiveGenerator::mutateIndexing(<span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing_list.html\">MHWRender::MComponentDataIndexingList</a>&amp; sourceIndexBuffers, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html\">MHWRender::MVertexBufferArray</a>&amp; vertexBuffers,</div>\n\
<div class=\"line\">        <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>&amp; indexBuffer,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>&amp; primitiveStride)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a> *positionBuffer = NULL;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a> *uvBuffer = NULL;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ivb = 0; ivb &lt; vertexBuffers.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html#ab1eb6de2bf3aa228929ab4b40c73507c\">count</a>() &amp;&amp; (positionBuffer == NULL || uvBuffer == NULL); ++ivb)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a> *currBuffer = vertexBuffers.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html#a621df52a0b7842e1bad3bb7472c8d5e0\">getBuffer</a>(ivb);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positionBuffer == NULL &amp;&amp; currBuffer-&gt;<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>().<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() == <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>)</div>\n\
<div class=\"line\">            positionBuffer = currBuffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uvBuffer == NULL &amp;&amp; currBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() == <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MHWRender::MGeometry::kTexture</a>)</div>\n\
<div class=\"line\">            uvBuffer = currBuffer;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (positionBuffer == NULL)</div>\n\
<div class=\"line\">        <span class=\"comment\">// We need at least the positions:</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea7354c5e6b4c4c152b77e663e2e59e0c3\">MHWRender::MGeometry::kInvalidPrimitive</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* positionBufferFloat = (<span class=\"keywordtype\">float</span>*)positionBuffer-&gt;<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#abc9e783c4d7826700a6a6824451f8230\">map</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* uvBufferFloat = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uvBuffer)</div>\n\
<div class=\"line\">        uvBufferFloat = (<span class=\"keywordtype\">float</span>*)uvBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#abc9e783c4d7826700a6a6824451f8230\">map</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> x = 0; x &lt; sourceIndexBuffers.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>(); ++x)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sourceIndexBuffers[x]-&gt;componentType() != MHWRender::MComponentDataIndexing::kFaceVertex)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; originalBufferIndices = sourceIndexBuffers[x]-&gt;indices();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriVerts = originalBufferIndices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTri = numTriVerts / 3;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> triSize = computeTriangleSize(fAddAdjacentEdges, fAddDominantEdges, fAddDominantPosition);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> bufferSize = numTri * triSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span>* indexData = indexBuffer.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(bufferSize, <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly - we don&#39;t need the current buffer values*/</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (indexData != NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mutateIndexBuffer( originalBufferIndices, positionBufferFloat, uvBufferFloat, </div>\n\
<div class=\"line\">                               fAddAdjacentEdges, fAddDominantEdges, fAddDominantPosition,</div>\n\
<div class=\"line\">                               indexBuffer.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>(), indexData );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positionBuffer) positionBuffer-&gt;<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uvBuffer) uvBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">        indexBuffer.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(indexData);</div>\n\
<div class=\"line\">        primitiveStride = triSize;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea23d4e011c2b72a286021ca9a5a121830\">MHWRender::MGeometry::kPatch</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (positionBuffer) positionBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uvBuffer) uvBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea7354c5e6b4c4c152b77e663e2e59e0c3\">MHWRender::MGeometry::kInvalidPrimitive</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the primitive generator creation function registered with the DrawRegistry.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Used to initialize a custom primitive generator.</span></div>\n\
<div class=\"line\"><a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_index_buffer_mutator.html\">MHWRender::MPxIndexBufferMutator</a>* CrackFreePrimitiveGenerator::createCrackFreePrimitiveGenerator18()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> CrackFreePrimitiveGenerator(<span class=\"keyword\">true</span> <span class=\"comment\">/*addAdjacentEdges*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*addDominantEdges*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*addDominantPosition*/</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_index_buffer_mutator.html\">MHWRender::MPxIndexBufferMutator</a>* CrackFreePrimitiveGenerator::createCrackFreePrimitiveGenerator9()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> CrackFreePrimitiveGenerator(<span class=\"keyword\">true</span> <span class=\"comment\">/*addAdjacentEdges*/</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/*addDominantEdges*/</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/*addDominantPosition*/</span>);</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";