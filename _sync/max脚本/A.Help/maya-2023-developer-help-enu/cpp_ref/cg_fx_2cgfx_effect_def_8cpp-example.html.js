var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: cgFx/cgfxEffectDef.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2cgfx_effect_def_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: cgFx/cgfxEffectDef.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/cgfxEffectDef.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxEffectDef.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxFindImage.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderNode.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderCommon.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sys/stat.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   include &lt;sys/timeb.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define stricmp strcasecmp</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#   define strnicmp strncasecmp</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef ENABLE_TRACE_API_CALLS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef ENABLE_TRACE_API_CALLS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TRACE_API_CALLS(x) cerr &lt;&lt; &quot;cgfxShader: &quot;&lt;&lt;(x)&lt;&lt;&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TRACE_API_CALLS(x)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A per-vertex attribute on a shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxVertexAttribute::cgfxVertexAttribute()</div>\n\
<div class=\"line\"> : fNext( NULL), fSourceType( kUnknown), fSourceIndex( 0), refcount(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxVertexAttribute::release()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    --refcount;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (refcount &lt;= 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        M_CHECK( refcount == 0 );</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A varying parameter to a pass</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxVaryingParameter::cgfxVaryingParameter(CGparameter parameter)</div>\n\
<div class=\"line\"> :  fParameter( parameter),</div>\n\
<div class=\"line\">    fVertexAttribute( NULL),</div>\n\
<div class=\"line\">    fVertexStructure( NULL),</div>\n\
<div class=\"line\">    fNext( NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( parameter)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fName = cgGetParameterName( parameter);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxVaryingParameter::~cgfxVaryingParameter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fVertexStructure;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fNext;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxVaryingParameter::setupAttributes( cgfxRCPtr&lt;cgfxVertexAttribute&gt;&amp; vertexAttributes, CGprogram program)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Make sure our parameter name is acceptable is a Maya attribute name</span></div>\n\
<div class=\"line\">    <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName = fName;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> lastDot = attrName.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a2f0c58e22c8c209d0ea924de9913993a\">rindex</a>( <span class=\"charliteral\">&#39;.&#39;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( lastDot &gt;= 0)</div>\n\
<div class=\"line\">        attrName = attrName.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>( lastDot + 1, attrName.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() - 1);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semanticName = cgGetParameterSemantic( fParameter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semantic(semanticName);</div>\n\
<div class=\"line\">    cgGetParameterSemantic( fParameter);</div>\n\
<div class=\"line\">    semantic.toUpperCase();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Is this varying parameter packed or atomic?</span></div>\n\
<div class=\"line\">    CGtype type = cgGetNamedUserType( program, attrName.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( type != CG_UNKNOWN_TYPE)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// It&#39;s packed: explode the inputs into the structure elements</span></div>\n\
<div class=\"line\">        CGcontext context = cgGetProgramContext( program); </div>\n\
<div class=\"line\">        CGparameter packing = cgCreateParameter( context, type);</div>\n\
<div class=\"line\">        fVertexStructure = <span class=\"keyword\">new</span> cgfxVaryingParameterStructure();</div>\n\
<div class=\"line\">        fVertexStructure-&gt;fLength = 0;</div>\n\
<div class=\"line\">        fVertexStructure-&gt;fSize = 0;</div>\n\
<div class=\"line\">        CGparameter element = cgGetFirstStructParameter( packing);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span>( element)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> elementName = cgGetParameterName( element);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lastDot = elementName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a2f0c58e22c8c209d0ea924de9913993a\">rindex</a>( <span class=\"charliteral\">&#39;.&#39;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( lastDot &gt;= 0)</div>\n\
<div class=\"line\">                elementName = elementName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>( lastDot + 1, elementName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() - 1);</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; attr = setupAttribute( elementName, semantic, element, vertexAttributes);</div>\n\
<div class=\"line\">            fVertexStructure-&gt;fElements[ fVertexStructure-&gt;fLength].fVertexAttribute = attr;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> size = cgGetParameterRows( element) * cgGetParameterColumns( element);</div>\n\
<div class=\"line\">            CGtype type = cgGetParameterBaseType( element);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( type == CG_FLOAT) size *= <span class=\"keyword\">sizeof</span>( GLfloat);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( type == CG_INT) size *= <span class=\"keyword\">sizeof</span>( GLint);</div>\n\
<div class=\"line\">            fVertexStructure-&gt;fElements[ fVertexStructure-&gt;fLength].fSize = size;</div>\n\
<div class=\"line\">            fVertexStructure-&gt;fLength++;</div>\n\
<div class=\"line\">            fVertexStructure-&gt;fSize += size;</div>\n\
<div class=\"line\">            element = cgGetNextParameter( element);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        cgDestroyParameter( packing); </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// It&#39;s atomic - create a single, simple input</span></div>\n\
<div class=\"line\">        fVertexAttribute = setupAttribute( attrName, semantic, fParameter, vertexAttributes);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now pull apart the semantic string to work out where to bind</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// this value in open GL (as the automagic binding through cgGL</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// didn&#39;t work so well when this was written)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> radix = 1;</div>\n\
<div class=\"line\">    fGLIndex = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = semantic.length();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* str = semantic.asChar();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If sematic is NULL then stop here, bug 327649</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (length == 0) {</div>\n\
<div class=\"line\">         fGLType = glRegister::kUnknown;</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(;;)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> c = str[ length - 1];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( c &lt; &#39;0&#39; || c &gt; <span class=\"charliteral\">&#39;9&#39;</span>) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        fGLIndex += radix * (c - <span class=\"charliteral\">&#39;0&#39;</span>);</div>\n\
<div class=\"line\">        radix *= 10;</div>\n\
<div class=\"line\">        --length;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( semantic.length() != length)</div>\n\
<div class=\"line\">        semantic = semantic.substring( 0, length - 1);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Determine the semantic and setup the gl binding type we should use</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to set this parameter. If there&#39;s a sensible default value, set that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// while we&#39;re here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note there is no need to set the source type, this gets determined</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// when the vertex attribute sources are analysed</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;POSITION&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kPosition;</div>\n\
<div class=\"line\">        fVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;position&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;NORMAL&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kNormal;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fVertexAttribute.isNull() == false ) </div>\n\
<div class=\"line\">            fVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;normal&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;TEXCOORD&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kTexCoord;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fVertexAttribute.isNull() == false ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( attrName.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>() == <span class=\"stringliteral\">&quot;tangent&quot;</span>)</div>\n\
<div class=\"line\">                fVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;tangent:map1&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( attrName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>() == <span class=\"stringliteral\">&quot;binormal&quot;</span>)</div>\n\
<div class=\"line\">                fVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;binormal:map1&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                fVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;uv:map1&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;TANGENT&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kTexCoord;</div>\n\
<div class=\"line\">        fGLIndex += 6; <span class=\"comment\">// TANGENT is TEXCOORD6</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fVertexAttribute.isNull() == false ) </div>\n\
<div class=\"line\">            fVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;tangent:map1&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;BINORMAL&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kTexCoord;</div>\n\
<div class=\"line\">        fGLIndex += 7; <span class=\"comment\">// BINORMAL is TEXCOORD7</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fVertexAttribute.isNull() == false ) </div>\n\
<div class=\"line\">            fVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;binormal:map1&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;COLOR&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = fGLIndex == 1 ? glRegister::kSecondaryColor : glRegister::kColor;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;ATTR&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kVertexAttrib;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fVertexAttribute.isNull() == false ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fVertexAttribute-&gt;fSourceName = semanticName;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( semantic == <span class=\"stringliteral\">&quot;PSIZE&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kVertexAttrib;</div>\n\
<div class=\"line\">        fGLIndex = 6;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fGLType = glRegister::kUnknown;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxRCPtr&lt;cgfxVertexAttribute&gt; cgfxVaryingParameter::setupAttribute(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; semantic, </div>\n\
<div class=\"line\">    CGparameter parameter, </div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt;&amp; vertexAttributes</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Does a varying parameter of this name already exist?</span></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt;* attribute = &amp;vertexAttributes;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( attribute-&gt;isNull() == false )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( (*attribute)-&gt;fName == name)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> *attribute;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        attribute = &amp;(*attribute)-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add a new input for this parameter</span></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; attr = cgfxRCPtr&lt;cgfxVertexAttribute&gt;(<span class=\"keyword\">new</span> cgfxVertexAttribute());</div>\n\
<div class=\"line\">    *attribute = attr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Setup the varying parameter description</span></div>\n\
<div class=\"line\">    attr-&gt;fName = name;</div>\n\
<div class=\"line\">    attr-&gt;fType = cgGetTypeString( cgGetParameterType( parameter));</div>\n\
<div class=\"line\">    attr-&gt;fSemantic = semantic;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> attr;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxVaryingParameter::bind(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, cgfxStructureCache* cache,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vertexCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * vertexArray,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> normalsPerVertex, <span class=\"keywordtype\">int</span> normalCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** normalArrays,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> colorCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** colorArrays,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> texCoordCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** texCoordArrays</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fVertexAttribute.isNull() == <span class=\"keyword\">false</span>  &amp;&amp; fParameter)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>( fVertexAttribute-&gt;fSourceType)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kPosition:</div>\n\
<div class=\"line\">                result = bind( vertexArray, 3);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kNormal:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( normalCount &gt; 0 &amp;&amp; normalArrays[ 0])</div>\n\
<div class=\"line\">                    result = bind( normalArrays[0], 3);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kUV:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( texCoordCount &gt; fVertexAttribute-&gt;fSourceIndex &amp;&amp; texCoordArrays[ fVertexAttribute-&gt;fSourceIndex])</div>\n\
<div class=\"line\">                    result = bind( texCoordArrays[ fVertexAttribute-&gt;fSourceIndex], 2);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kTangent:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( normalCount &gt;= normalsPerVertex * fVertexAttribute-&gt;fSourceIndex + 1 &amp;&amp; normalArrays[ normalsPerVertex * fVertexAttribute-&gt;fSourceIndex + 1])</div>\n\
<div class=\"line\">                    result = bind( normalArrays[ normalsPerVertex * fVertexAttribute-&gt;fSourceIndex + 1], 3);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kBinormal:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( normalCount &gt;= normalsPerVertex * fVertexAttribute-&gt;fSourceIndex + 2 &amp;&amp; normalArrays[ normalsPerVertex * fVertexAttribute-&gt;fSourceIndex + 2])</div>\n\
<div class=\"line\">                    result = bind( normalArrays[ normalsPerVertex * fVertexAttribute-&gt;fSourceIndex + 2], 3);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kColor:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( colorCount &gt; fVertexAttribute-&gt;fSourceIndex &amp;&amp; colorArrays[ fVertexAttribute-&gt;fSourceIndex])</div>\n\
<div class=\"line\">                    result = bind( colorArrays[ fVertexAttribute-&gt;fSourceIndex], 4);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( fVertexStructure &amp;&amp; fParameter &amp;&amp; vertexCount)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Build a unique name for the contents of this structure</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> structureName;</div>\n\
<div class=\"line\">        structureName += fVertexStructure-&gt;fSize;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; fVertexStructure-&gt;fLength; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">                cgfxRCPtr&lt;cgfxVertexAttribute&gt; vertexAttribute = fVertexStructure-&gt;fElements[ i].fVertexAttribute;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( vertexAttribute.isNull() == false ) structureName += fVertexStructure-&gt;fElements[ i].fVertexAttribute-&gt;fSourceName;</div>\n\
<div class=\"line\">                structureName += fVertexStructure-&gt;fElements[ i].fSize;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// See if this data already exists in the cache</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* data = cache-&gt;findEntry(shape, structureName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If we couldn&#39;t find it, add it to the cache</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!data)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Allocate storage for this structure</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//printf( &quot;Added new cache entry for %s on %s\\n&quot;, structureName.asChar(), shape.fullPathName().asChar());</span></div>\n\
<div class=\"line\">            data = cache-&gt;addEntry(</div>\n\
<div class=\"line\">                shape, structureName, fVertexStructure-&gt;fSize, vertexCount);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span>* dest = data;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; fVertexStructure-&gt;fLength; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                cgfxRCPtr&lt;cgfxVertexAttribute&gt; vertexAttribute = fVertexStructure-&gt;fElements[ i].fVertexAttribute;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( vertexAttribute.isNull() == false )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* src = NULL;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> size = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span>( vertexAttribute-&gt;fSourceType)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kPosition:</div>\n\
<div class=\"line\">                            src = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)vertexArray;</div>\n\
<div class=\"line\">                            size = 3 * <span class=\"keyword\">sizeof</span>( float);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kNormal:</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( normalCount &gt; 0 &amp;&amp; normalArrays[ 0])</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                src = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)normalArrays[0];</div>\n\
<div class=\"line\">                                size = 3 * <span class=\"keyword\">sizeof</span>( float);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kUV:</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( texCoordCount &gt; vertexAttribute-&gt;fSourceIndex &amp;&amp; texCoordArrays[ vertexAttribute-&gt;fSourceIndex])</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                src = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)texCoordArrays[ vertexAttribute-&gt;fSourceIndex];</div>\n\
<div class=\"line\">                                size = 2 * <span class=\"keyword\">sizeof</span>( <span class=\"keywordtype\">float</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kTangent:</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( normalCount &gt;= normalsPerVertex * vertexAttribute-&gt;fSourceIndex + 1 &amp;&amp; normalArrays[ normalsPerVertex * vertexAttribute-&gt;fSourceIndex + 1])</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                src = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)normalArrays[ normalsPerVertex * vertexAttribute-&gt;fSourceIndex + 1];</div>\n\
<div class=\"line\">                                size = 3 * <span class=\"keyword\">sizeof</span>( <span class=\"keywordtype\">float</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kBinormal:</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( normalCount &gt;= normalsPerVertex * vertexAttribute-&gt;fSourceIndex + 2 &amp;&amp; normalArrays[ normalsPerVertex * vertexAttribute-&gt;fSourceIndex + 2])</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                src = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)normalArrays[ normalsPerVertex * vertexAttribute-&gt;fSourceIndex + 2];</div>\n\
<div class=\"line\">                                size = 3 * <span class=\"keyword\">sizeof</span>( <span class=\"keywordtype\">float</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kColor:</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( colorCount &gt; vertexAttribute-&gt;fSourceIndex &amp;&amp; colorArrays[ vertexAttribute-&gt;fSourceIndex])</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                src = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)colorArrays[ vertexAttribute-&gt;fSourceIndex];</div>\n\
<div class=\"line\">                                size = 4 * <span class=\"keyword\">sizeof</span>( <span class=\"keywordtype\">float</span>);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Do we have a valid input?</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( src &amp;&amp; size)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Setup this element</span></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> srcSkip = 0;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( size &gt; fVertexStructure-&gt;fElements[ i].fSize)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            srcSkip = size - fVertexStructure-&gt;fElements[ i].fSize;</div>\n\
<div class=\"line\">                            size = fVertexStructure-&gt;fElements[ i].fSize;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> dstSkip = fVertexStructure-&gt;fSize - size;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">char</span>* dst = dest;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> v = 0; v &lt; vertexCount; v++)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> b = 0; b &lt; size; b++)</div>\n\
<div class=\"line\">                                *dst++ = *src++;</div>\n\
<div class=\"line\">                            src += srcSkip;</div>\n\
<div class=\"line\">                            dst += dstSkip;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// NULL this element</span></div>\n\
<div class=\"line\">                        size = fVertexStructure-&gt;fElements[ i].fSize;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> dstSkip = fVertexStructure-&gt;fSize - size;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">char</span>* dst = dest;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> v = 0; v &lt; vertexCount; v++)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> b = 0; b &lt; size; b++)</div>\n\
<div class=\"line\">                                *dst++ = 0;</div>\n\
<div class=\"line\">                            dst += dstSkip;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                dest += fVertexStructure-&gt;fElements[ i].fSize;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        result = bind( (<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*)data, fVertexStructure-&gt;fSize / <span class=\"keyword\">sizeof</span>( <span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If we were unable to bind a stream of data to this register, set a friendly NULL value</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !result)</div>\n\
<div class=\"line\">        null();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Bind data to GL</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxVaryingParameter::bind( <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* data, <span class=\"keywordtype\">int</span> stride)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( fGLType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kPosition:</div>\n\
<div class=\"line\">            glStateCache::instance().enablePosition();</div>\n\
<div class=\"line\">            glVertexPointer( stride, GL_FLOAT, 0, data);</div>\n\
<div class=\"line\">            result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kNormal:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( stride == 3)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glStateCache::instance().enableNormal();</div>\n\
<div class=\"line\">                glNormalPointer( GL_FLOAT, 0, data);</div>\n\
<div class=\"line\">                result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kTexCoord:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( fGLIndex &lt; glStateCache::sMaxTextureUnits)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glStateCache::instance().enableAndActivateTexCoord( fGLIndex);</div>\n\
<div class=\"line\">                glTexCoordPointer( stride, GL_FLOAT, 0, data);</div>\n\
<div class=\"line\">                result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kColor:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( stride &gt; 2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glStateCache::instance().enableColor();</div>\n\
<div class=\"line\">                glColorPointer( stride, GL_FLOAT, 0, data);</div>\n\
<div class=\"line\">                result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kSecondaryColor:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( stride &gt; 2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glStateCache::instance().enableSecondaryColor();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( glVertexAttribPointer) </div>\n\
<div class=\"line\">                    glSecondaryColorPointer( stride, GL_FLOAT, 0, (GLvoid*)data);</div>\n\
<div class=\"line\">                result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kVertexAttrib:</div>\n\
<div class=\"line\">            glStateCache::instance().enableVertexAttrib( fGLIndex);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( glVertexAttribPointer) </div>\n\
<div class=\"line\">                glVertexAttribPointer( fGLIndex, stride, GL_FLOAT, GL_FALSE, 0, data);</div>\n\
<div class=\"line\">            result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxVaryingParameter::bind(<span class=\"keyword\">const</span> sourceStreamInfo&amp; source)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// should assert(dataBufferId &gt; 0) here</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// ...</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> stride = source.fStride;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> offset = source.fOffset;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dimension  = source.fDimension;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> elementSize  = source.fElementSize;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GLuint bufferId = source.fDataBufferId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glBindBufferARB(GL_ARRAY_BUFFER_ARB, bufferId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define GLOBJECT_BUFFER_OFFSET(i) ((char *)NULL + (i)) // For GLObject offsets</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( fGLType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kPosition:</div>\n\
<div class=\"line\">            glStateCache::instance().enablePosition();</div>\n\
<div class=\"line\">            glVertexPointer(dimension, GL_FLOAT, stride*elementSize, GLOBJECT_BUFFER_OFFSET(offset));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kNormal:</div>\n\
<div class=\"line\">            glStateCache::instance().enableNormal();</div>\n\
<div class=\"line\">            glNormalPointer(GL_FLOAT, stride*elementSize, GLOBJECT_BUFFER_OFFSET(offset));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kTexCoord:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( fGLIndex &lt; glStateCache::sMaxTextureUnits)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glStateCache::instance().enableAndActivateTexCoord( fGLIndex);</div>\n\
<div class=\"line\">                glTexCoordPointer(dimension, GL_FLOAT, stride*elementSize, GLOBJECT_BUFFER_OFFSET(offset));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kColor:</div>\n\
<div class=\"line\">            glStateCache::instance().enableColor();</div>\n\
<div class=\"line\">            glColorPointer(dimension, GL_FLOAT, stride*elementSize, GLOBJECT_BUFFER_OFFSET(offset));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kSecondaryColor:</div>\n\
<div class=\"line\">            glStateCache::instance().enableSecondaryColor();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( glVertexAttribPointer) </div>\n\
<div class=\"line\">                glSecondaryColorPointer(dimension, GL_FLOAT, stride*elementSize, GLOBJECT_BUFFER_OFFSET(offset));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kVertexAttrib:</div>\n\
<div class=\"line\">            glStateCache::instance().enableVertexAttrib( fGLIndex);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( glVertexAttribPointer) </div>\n\
<div class=\"line\">                glVertexAttribPointer( fGLIndex, dimension, GL_FLOAT, GL_FALSE, stride*elementSize, GLOBJECT_BUFFER_OFFSET(offset));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(source.fSourceType == cgfxVertexAttribute::kPosition) {</div>\n\
<div class=\"line\">                glStateCache::instance().enablePosition();</div>\n\
<div class=\"line\">                glVertexPointer(dimension, GL_FLOAT, stride*elementSize, GLOBJECT_BUFFER_OFFSET(offset));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;  <span class=\"comment\">//these we don&#39;t support yet</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Send null data to GL</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxVaryingParameter::null()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( fGLType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kPosition:</div>\n\
<div class=\"line\">            <span class=\"comment\">//null position is not expected, give a warning</span></div>\n\
<div class=\"line\">            <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( <span class=\"stringliteral\">&quot;There is no position data!&quot;</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kNormal:</div>\n\
<div class=\"line\">            glNormal3f( 0.0f, 0.0f, 1.0f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kTexCoord:</div>\n\
<div class=\"line\">            glStateCache::instance().activeTexture( fGLIndex);</div>\n\
<div class=\"line\">            glMultiTexCoord4fARB( GL_TEXTURE0 + fGLIndex, 0.0f, 0.0f, 0.0f, 0.0f );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kColor:</div>\n\
<div class=\"line\">            glColor4f( 1.0f, 1.0f, 1.0f, 1.0f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kSecondaryColor:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( glSecondaryColor3f) </div>\n\
<div class=\"line\">                glSecondaryColor3f( 1.0f, 1.0f, 1.0f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> glRegister::kVertexAttrib:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( glVertexAttrib4f) </div>\n\
<div class=\"line\">                glVertexAttrib4f( fGLIndex, 0.0f, 0.0f, 0.0f, 0.0f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> cgfxVaryingParameter::addRecursive(</div>\n\
<div class=\"line\">    CGparameter parameter,</div>\n\
<div class=\"line\">    cgfxVaryingParameter**&amp; nextParameter</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( cgGetParameterVariability( parameter) == CG_VARYING)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( cgGetParameterType( parameter) == CG_STRUCT)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            CGparameter input = cgGetFirstStructParameter( parameter);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( input)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                addRecursive( input, nextParameter);</div>\n\
<div class=\"line\">                input = cgGetNextParameter( input);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( cgIsParameterReferenced( parameter))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            *nextParameter = <span class=\"keyword\">new</span> cgfxVaryingParameter( parameter);</div>\n\
<div class=\"line\">            nextParameter = &amp;(*nextParameter)-&gt;fNext;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A pass in a technique</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxPass::cgfxPass(</div>\n\
<div class=\"line\">    CGpass                  pass,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxProfile*      profile</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\"> :  fPass( pass),</div>\n\
<div class=\"line\">    fProgram( NULL),</div>\n\
<div class=\"line\">    fParameters( NULL),</div>\n\
<div class=\"line\">    fDefaultProfile(<span class=\"stringliteral\">&quot;default&quot;</span>, pass),</div>\n\
<div class=\"line\">    fNext( NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( pass)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fName = cgGetPassName( pass);</div>\n\
<div class=\"line\">        CGstateassignment stateAssignment = cgGetFirstStateAssignment( pass);</div>\n\
<div class=\"line\">        cgfxVaryingParameter** nextParameter = &amp;fParameters;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span>( stateAssignment )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            CGstate state = cgGetStateAssignmentState( stateAssignment);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( cgGetStateType( state) == CG_PROGRAM_TYPE &amp;&amp; </div>\n\
<div class=\"line\">                    ( stricmp( cgGetStateName( state), <span class=\"stringliteral\">&quot;vertexProgram&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">                      stricmp( cgGetStateName( state), <span class=\"stringliteral\">&quot;vertexShader&quot;</span>) == 0))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fProgram = cgGetProgramStateAssignmentValue( stateAssignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( fProgram)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    CGparameter parameter = cgGetFirstParameter( fProgram, CG_PROGRAM);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">while</span>( parameter)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        cgfxVaryingParameter::addRecursive( parameter, nextParameter);</div>\n\
<div class=\"line\">                        parameter = cgGetNextParameter( parameter);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            setProfile(profile);</div>\n\
<div class=\"line\">            stateAssignment = cgGetNextStateAssignment( stateAssignment);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxPass::~cgfxPass()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fNext;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fParameters;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxPass::setupAttributes(cgfxRCPtr&lt;cgfxVertexAttribute&gt;&amp; vertexAttributes)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    cgfxVaryingParameter* parameter = fParameters;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( parameter)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        parameter-&gt;setupAttributes( vertexAttributes, fProgram);</div>\n\
<div class=\"line\">        parameter = parameter-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxPass::setProfile(<span class=\"keyword\">const</span> cgfxProfile* profile)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// If profile is null, we use the default Cg profile, i.e. the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profile specified in the .cgfx file.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (profile == NULL) profile = &amp;fDefaultProfile;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGprogram vp = cgGetPassProgram(fPass, CG_VERTEX_DOMAIN);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (vp != NULL &amp;&amp;</div>\n\
<div class=\"line\">        cgGetProgramProfile(vp) != profile-&gt;getVertexProfile())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgSetProgramProfile(vp, profile-&gt;getVertexProfile());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    CGprogram gp = cgGetPassProgram(fPass, CG_GEOMETRY_DOMAIN);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gp != NULL &amp;&amp;</div>\n\
<div class=\"line\">        profile-&gt;getGeometryProfile() != CG_PROFILE_UNKNOWN &amp;&amp;</div>\n\
<div class=\"line\">        cgGetProgramProfile(gp) != profile-&gt;getGeometryProfile())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgSetProgramProfile(gp, profile-&gt;getGeometryProfile());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    CGprogram fp = cgGetPassProgram(fPass, CG_FRAGMENT_DOMAIN);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fp != NULL &amp;&amp;</div>\n\
<div class=\"line\">        cgGetProgramProfile(fp) != profile-&gt;getFragmentProfile())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgSetProgramProfile(fp, profile-&gt;getFragmentProfile());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxPass::bind(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, cgfxStructureCache* cache,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vertexCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * vertexArray,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> normalsPerVertex, <span class=\"keywordtype\">int</span> normalCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** normalArrays,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> colorCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** colorArrays,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> texCoordCount, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** texCoordArrays</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    cgfxVaryingParameter* parameter = fParameters;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( parameter)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        parameter-&gt;bind(shape, cache, </div>\n\
<div class=\"line\">                        vertexCount, vertexArray, </div>\n\
<div class=\"line\">                        normalsPerVertex, normalCount, normalArrays, </div>\n\
<div class=\"line\">                        colorCount, colorArrays, </div>\n\
<div class=\"line\">                        texCoordCount, texCoordArrays);</div>\n\
<div class=\"line\">        parameter = parameter-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxPass::bind(<span class=\"keyword\">const</span> sourceStreamInfo dataSources[], <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> sourceCount)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;cgfxPass::bind&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxVaryingParameter* parameter = fParameters;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( parameter)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Here we only deal with fVertexAttribute.  How to do fVertexStructure?</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (parameter-&gt;fVertexAttribute.isNull() == <span class=\"keyword\">false</span>) {</div>\n\
<div class=\"line\">            <span class=\"comment\">//find the corresponding data buffer</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> index = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(index = 0; index &lt; sourceCount; ++index)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// printf(</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// &quot;    Compare param %s (0x%p) [%s] name (type=%d) with data source name [%s] (type=%d)\\n&quot;, </span></div>\n\
<div class=\"line\">                <span class=\"comment\">//         parameter-&gt;fName.asChar(),</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//         parameter,</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//         parameter-&gt;fVertexAttribute-&gt;fSourceName.asChar(), </span></div>\n\
<div class=\"line\">                <span class=\"comment\">//         parameter-&gt;fVertexAttribute-&gt;fSourceType,</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//         dataSources[index].fSourceName.asChar(),</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//         dataSources[index].fSourceType);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dataSources[index].fSourceName == parameter-&gt;fVertexAttribute-&gt;fSourceName )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// we find the correct vertex stream</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(index &lt; sourceCount)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// printf(&quot;    Binding source name [%s]\\n&quot;, dataSources[index].fSourceName.asChar());</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(!parameter-&gt;bind(dataSources[index])) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// This is a true error. Binding should normally</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// always succeed here as the geometry</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// requirements are verified in</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// cgfxShaderOverride::initialize().</span></div>\n\
<div class=\"line\">                    parameter-&gt;null();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s = <span class=\"stringliteral\">&quot;cgfxShader : Couldn&#39;t bind source \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                    s += dataSources[index].fSourceName;</div>\n\
<div class=\"line\">                    s += <span class=\"stringliteral\">&quot;\\&quot; for vertex attribute \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                    s += parameter-&gt;fVertexAttribute-&gt;fSourceName;;</div>\n\
<div class=\"line\">                    s +=<span class=\"stringliteral\">&quot;\\&quot;.&quot;</span>;</div>\n\
<div class=\"line\">                    <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(s);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// printf(&quot;    Can&#39;t find the source for source name [%s] for parameter [%s]\\n&quot;, </span></div>\n\
<div class=\"line\">                <span class=\"comment\">//        parameter-&gt;fVertexAttribute-&gt;fSourceName.asChar(),</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//        parameter-&gt;fVertexAttribute-&gt;fName.asChar());</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// There is no matching source for this parameter. We</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// therefore bind null data for this parameter. Note</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// that this fact should have already been reported</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// to the user in cgfxShaderOverride::initialize(). We</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// don&#39;t report it to the user here because it would</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// get repetitively reported for each redraw.</span></div>\n\
<div class=\"line\">                parameter-&gt;null();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        parameter = parameter-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// printf(&quot;    Successfully bound sources\\n&quot;);</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A technique in an effect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTechnique::cgfxTechnique(</div>\n\
<div class=\"line\">    CGtechnique         technique,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxProfile*  profile</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">:   fTechnique( technique),</div>\n\
<div class=\"line\">    fValid(false),</div>\n\
<div class=\"line\">    fPasses(NULL),</div>\n\
<div class=\"line\">    fNumPasses(0),</div>\n\
<div class=\"line\">    fNext(NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (technique)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fName = cgGetTechniqueName(technique);</div>\n\
<div class=\"line\">        CGpass pass = cgGetFirstPass(technique);</div>\n\
<div class=\"line\">        cgfxPass** nextPass = &amp;fPasses;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (pass)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++fNumPasses;</div>\n\
<div class=\"line\">            *nextPass = <span class=\"keyword\">new</span> cgfxPass(pass, profile);</div>\n\
<div class=\"line\">            nextPass = &amp;(*nextPass)-&gt;fNext;</div>\n\
<div class=\"line\">            pass = cgGetNextPass(pass);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fHasBlending = hasBlending(fTechnique);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        setProfile(profile);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxTechnique::~cgfxTechnique()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fNext;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fPasses;</div>\n\
<div class=\"line\">    fNext = 0;</div>\n\
<div class=\"line\">    fPasses = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxTechnique::setProfile(<span class=\"keyword\">const</span> cgfxProfile* profile)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxProfile* supportedProfile = getSupportedProfile(profile);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxPass* pass = fPasses;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (pass) {</div>\n\
<div class=\"line\">        pass-&gt;setProfile(supportedProfile);</div>\n\
<div class=\"line\">        pass = pass-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Changing the profile might change the validity of the technique.</span></div>\n\
<div class=\"line\">    validate();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxTechnique::validate()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    fValid = (cgValidateTechnique(fTechnique) == CG_TRUE);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fValid) {</div>\n\
<div class=\"line\">        fErrorString = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        CGerror error = cgGetError();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (error != CG_NO_ERROR) {</div>\n\
<div class=\"line\">            fErrorString = cgGetErrorString(cgGetError());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fErrorString += <span class=\"stringliteral\">&quot;\\nCg compilation errors for technique \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        fErrorString += fName;</div>\n\
<div class=\"line\">        fErrorString += <span class=\"stringliteral\">&quot;\\&quot;:\\n&quot;</span>;</div>\n\
<div class=\"line\">        fErrorString += cgGetLastListing(cgfxShaderNode::sCgContext);</div>\n\
<div class=\"line\">        fErrorString += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> cgfxProfile* cgfxTechnique::getSupportedProfile(<span class=\"keyword\">const</span> cgfxProfile* profile)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (profile == NULL) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// The user wants to use the default profile. Let&#39;s see if</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this is supported on the current platform.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> allPassProfilesSupported = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxPass* pass = fPasses;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (pass) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!pass-&gt;fDefaultProfile.isSupported()) {</div>\n\
<div class=\"line\">                allPassProfilesSupported = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            pass = pass-&gt;fNext;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (allPassProfilesSupported) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Ok. We can use the default profile!</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> es;</div>\n\
<div class=\"line\">            es += <span class=\"stringliteral\">&quot;The technique \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            es += fName;</div>\n\
<div class=\"line\">            es += <span class=\"stringliteral\">&quot;\\&quot; specifies Cg profiles that are unsupported on this platform. &quot;</span></div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;The profile \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            es += cgfxProfile::getBestProfile()-&gt;getName();</div>\n\
<div class=\"line\">            es += <span class=\"stringliteral\">&quot;\\&quot; will be used instead.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(es);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> cgfxProfile::getBestProfile();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> profile;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxRCPtr&lt;cgfxVertexAttribute&gt; cgfxTechnique::getVertexAttributes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; vertexAttributes;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxPass* pass = fPasses;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (pass) {</div>\n\
<div class=\"line\">        pass-&gt;setupAttributes(vertexAttributes);</div>\n\
<div class=\"line\">        pass = pass-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> vertexAttributes;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Scan the technique for passes which use blending</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxTechnique::hasBlending(CGtechnique technique)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Assume not blending</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasBlending = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check for : BlendEnable=true, BlendFunc=something valid on the first pass only.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We ignore any depth enable and functions for now...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    CGpass cgPass = cgGetFirstPass(technique);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> foundBlendEnabled = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> foundBlendFunc = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cgPass)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        CGstateassignment stateAssignment = cgGetFirstStateAssignment(cgPass);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( stateAssignment )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            CGstate state = cgGetStateAssignmentState( stateAssignment);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *stateName = cgGetStateName(state);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Check for blend enabled.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!foundBlendEnabled &amp;&amp; stricmp( stateName, <span class=\"stringliteral\">&quot;BlendEnable&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> numValues = 0;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> CGbool *values = cgGetBoolStateAssignmentValues(stateAssignment, &amp;numValues);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (values &amp;&amp; numValues)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (values[0])</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        foundBlendEnabled = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Check for valid blend function</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!foundBlendFunc &amp;&amp; ( stricmp( stateName, <span class=\"stringliteral\">&quot;BlendFunc&quot;</span>) == 0 ||</div>\n\
<div class=\"line\">                                          stricmp( stateName, <span class=\"stringliteral\">&quot;BlendFuncSeparate&quot;</span>) == 0 ))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> numValues = 0;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> * values = cgGetIntStateAssignmentValues(stateAssignment, &amp;numValues);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (values)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    #define GL_SRC_COLOR                      0x0300 = 768</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    #define GL_ONE_MINUS_SRC_COLOR            0x0301 = 769</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    #define GL_SRC_ALPHA                      0x0302 = 770</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    #define GL_ONE_MINUS_SRC_ALPHA            0x0303 = 771</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    #define GL_DST_ALPHA                      0x0304 = 772</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    #define GL_ONE_MINUS_DST_ALPHA            0x0305 = 773</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    */</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> blendStringTable[6] =</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;GL_SRC_COLOR&quot;</span>, <span class=\"comment\">// SrcColor</span></div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;GL_ONE_MINUS_SRC_COLOR&quot;</span>, <span class=\"comment\">// OneMinusSrcColor</span></div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;GL_SRC_ALPHA&quot;</span>, <span class=\"comment\">// SrcAlpha</span></div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;GL_ONE_MINUS_SRC_ALPHA&quot;</span>, <span class=\"comment\">// OneMinusSrcAlpha</span></div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;GL_DST_ALPHA&quot;</span>, <span class=\"comment\">// DstAlpha</span></div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;GL_ONE_MINUS_DST_ALPHA&quot;</span> <span class=\"comment\">// OneMinusDstAlpha</span></div>\n\
<div class=\"line\">                    };</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;numValues; i++)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> ((values[i] &gt;= GL_SRC_COLOR) &amp;&amp; (values[i] &lt;= GL_ONE_MINUS_DST_ALPHA))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">                            printf(<span class=\"stringliteral\">&quot;Found blend function = %s, %s\\n&quot;</span>,</div>\n\
<div class=\"line\">                            blendStringTable[ values[0]-GL_SRC_COLOR].asChar(),</div>\n\
<div class=\"line\">                            blendStringTable[ values[1]-GL_SRC_COLOR].asChar());</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                            foundBlendFunc = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            hasBlending = foundBlendEnabled &amp;&amp; foundBlendFunc;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hasBlending)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            stateAssignment = cgGetNextStateAssignment( stateAssignment);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> hasBlending;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>cgfxEffectInternal</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    time_t fileTimeStamp(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>stat statBuf;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( stat(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), &amp;statBuf) != 0 )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> statBuf.st_mtime;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>EffectKey</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxProfile* profile;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName;</div>\n\
<div class=\"line\">        time_t timeStamp;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator&lt; (<span class=\"keyword\">const</span> EffectKey&amp; lhs, <span class=\"keyword\">const</span> EffectKey&amp; rhs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (lhs.profile &lt;  rhs.profile) ||</div>\n\
<div class=\"line\">               (lhs.profile == rhs.profile &amp;&amp; ( (lhs.timeStamp &lt;  rhs.timeStamp) ||</div>\n\
<div class=\"line\">                                                (lhs.timeStamp == rhs.timeStamp &amp;&amp; strcmp(lhs.fileName.asChar(), rhs.fileName.asChar()) &lt; 0) ) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Collection of effects</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The collection does not use smart pointer (cgfxRCPtr) to store the effects</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Otherwise they will never get released (refCount always &gt;= 1)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Effect will have to be manually removed from collection by desctructor (~cgfxEffect())</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>cgfxEffectCollection</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        cgfxEffect* find(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> add(cgfxEffect* effect, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> <span class=\"keyword\">remove</span>(cgfxEffect* effect);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; cgfxEffect*, EffectKey &gt; Effect2KeyMap;</div>\n\
<div class=\"line\">        Effect2KeyMap effect2KeyMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt; EffectKey, cgfxEffect* &gt; Key2EffectMap;</div>\n\
<div class=\"line\">        Key2EffectMap key2EffectMap;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxEffect* cgfxEffectCollection::find(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        cgfxEffect* effect = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        EffectKey key = { profile, fileName, fileTimeStamp(fileName) } ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Key2EffectMap::const_iterator it = key2EffectMap.find(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(it != key2EffectMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            effect = it-&gt;second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> effect;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> cgfxEffectCollection::add(cgfxEffect* effect, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        EffectKey key = { profile, fileName, fileTimeStamp(fileName) } ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        key2EffectMap.insert( std::make_pair(key, effect) );</div>\n\
<div class=\"line\">        effect2KeyMap.insert( std::make_pair(effect, key) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> cgfxEffectCollection::remove(cgfxEffect* effect)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Effect2KeyMap::iterator it = effect2KeyMap.find(effect);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(it != effect2KeyMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            key2EffectMap.erase( it-&gt;second );</div>\n\
<div class=\"line\">            effect2KeyMap.erase( it );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> cgfxEffectCollection gEffectsCollection;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxRCPtr&lt;const cgfxEffect&gt; cgfxEffect::loadEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    cgfxEffect *effect = cgfxEffectInternal::gEffectsCollection.find(fileName, profile);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(effect == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        effect = <span class=\"keyword\">new</span> cgfxEffect(fileName, profile);</div>\n\
<div class=\"line\">        cgfxEffectInternal::gEffectsCollection.add(effect, fileName, profile);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> cgfxRCPtr&lt;const cgfxEffect&gt;(effect);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// An effect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">cgfxEffect::cgfxEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keyword\">const</span> cgfxProfile* profile)</div>\n\
<div class=\"line\">  : refcount(0),</div>\n\
<div class=\"line\">    fEffect(NULL),</div>\n\
<div class=\"line\">    fTechniques(NULL),</div>\n\
<div class=\"line\">    fProfile(NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> fileOptions;</div>\n\
<div class=\"line\">    cgfxGetFxIncludePath( fileName, fileOptions );</div>\n\
<div class=\"line\">    fileOptions.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<span class=\"stringliteral\">&quot;-DMAYA_CGFX=1&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cgfxProfile::getTexCoordOrientation() == cgfxProfile::TEXCOORD_OPENGL) {</div>\n\
<div class=\"line\">        fileOptions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<span class=\"stringliteral\">&quot;-DMAYA_TEXCOORD_ORIENTATION_OPENGL=1&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        fileOptions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<span class=\"stringliteral\">&quot;-DMAYA_TEXCOORD_ORIENTATION_DIRECTX=1&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *opts[_CGFX_PLUGIN_MAX_COMPILER_ARGS_];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numOpts = fileOptions.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numOpts)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        numOpts = (numOpts &gt; _CGFX_PLUGIN_MAX_COMPILER_ARGS_-1) ?</div>\n\
<div class=\"line\">            _CGFX_PLUGIN_MAX_COMPILER_ARGS_-1 : numOpts;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;numOpts; i++)</div>\n\
<div class=\"line\">            opts[i] = fileOptions[i].asChar();</div>\n\
<div class=\"line\">        opts[numOpts] = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fEffect = cgCreateEffectFromFile(cgfxShaderNode::sCgContext, fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), opts);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEffect)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        CGtechnique technique = cgGetFirstTechnique(fEffect);</div>\n\
<div class=\"line\">        cgfxTechnique** nextTechnique = <span class=\"keyword\">const_cast&lt;</span>cgfxTechnique**<span class=\"keyword\">&gt;</span>(&amp;fTechniques);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (technique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            *nextTechnique = <span class=\"keyword\">new</span> cgfxTechnique(technique, profile);</div>\n\
<div class=\"line\">            nextTechnique = &amp;(*nextTechnique)-&gt;fNext;</div>\n\
<div class=\"line\">            technique = cgGetNextTechnique(technique);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fProfile = profile;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxEffect::~cgfxEffect()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove this effect from the collection</span></div>\n\
<div class=\"line\">    cgfxEffectInternal::gEffectsCollection.remove(<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fTechniques;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEffect) {</div>\n\
<div class=\"line\">        cgDestroyEffect(fEffect);</div>\n\
<div class=\"line\">        fEffect = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fTechniques = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxEffect::release()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    --refcount;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (refcount &lt;= 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        M_CHECK( refcount == 0 );</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> cgfxTechnique* cgfxEffect::getTechnique(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> techniqueName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* technique = fTechniques;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>(technique)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(technique-&gt;fName == techniqueName)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        technique = technique-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> technique;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxEffect::setProfile(<span class=\"keyword\">const</span> cgfxProfile* profile)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fProfile != profile) {</div>\n\
<div class=\"line\">        fProfile = profile;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxTechnique* technique = fTechniques;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span>(technique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            technique-&gt;setProfile(profile);</div>\n\
<div class=\"line\">            technique = technique-&gt;fNext;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ========== cgfxEffect::attrsFromEffect ==========</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This function parses through an effect and builds a list of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// cgfxAttrDef objects.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">cgfxRCPtr&lt;cgfxAttrDefList&gt; cgfxEffect::attrsFromEffect()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fEffect)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxAttrDefList&gt; list(<span class=\"keyword\">new</span> cgfxAttrDefList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGparameter cgParameter = cgGetFirstEffectParameter(fEffect);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (cgParameter)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = <span class=\"keyword\">new</span> cgfxAttrDef(cgParameter);</div>\n\
<div class=\"line\">        list-&gt;add(aDef);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cgParameter = cgGetNextParameter(cgParameter);</div>\n\
<div class=\"line\">        ++i;</div>\n\
<div class=\"line\">    } <span class=\"comment\">// end of for each parameter</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> list;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxStructureCache::cgfxStructureCache()</div>\n\
<div class=\"line\">    : fEntries(NULL)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxStructureCache::~cgfxStructureCache()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    flush();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxStructureCache::Entry::Entry(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keywordtype\">int</span> stride, <span class=\"keywordtype\">int</span> count</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">  : fShape(shape.node()),</div>\n\
<div class=\"line\">    fName(name),</div>\n\
<div class=\"line\">    fData(new char[ stride * count])</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxStructureCache::Entry::~Entry()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span>[] fData;</div>\n\
<div class=\"line\">    fNext = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span>* cgfxStructureCache::findEntry(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Entry** entry = &amp;fEntries;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (*entry)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !(*entry)-&gt;fShape.isValid() || !(*entry)-&gt;fShape.isAlive())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Entry* staleEntry = *entry;</div>\n\
<div class=\"line\">            *entry = staleEntry-&gt;fNext;</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> staleEntry;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( (*entry)-&gt;fShape == shape.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() &amp;&amp; (*entry)-&gt;fName == name)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> (*entry)-&gt;fData;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            entry = &amp;(*entry)-&gt;fNext;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span>* cgfxStructureCache::addEntry(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;  name,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             stride,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             count</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Entry* cacheEntry = <span class=\"keyword\">new</span> Entry(shape, name, stride, count);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cacheEntry-&gt;fNext = fEntries;</div>\n\
<div class=\"line\">    fEntries = cacheEntry;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> cacheEntry-&gt;fData;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxStructureCache::flush()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> fEntries;</div>\n\
<div class=\"line\">    fEntries = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxStructureCache::flush(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shape)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Entry** cacheEntry = &amp;fEntries;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( *cacheEntry)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !(*cacheEntry)-&gt;fShape.isValid() || !(*cacheEntry)-&gt;fShape.isAlive() ||</div>\n\
<div class=\"line\">            (*cacheEntry)-&gt;fShape == shape.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Entry* staleEntry = (*cacheEntry);</div>\n\
<div class=\"line\">            *cacheEntry = staleEntry-&gt;fNext;</div>\n\
<div class=\"line\">            staleEntry-&gt;fNext = NULL;</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> staleEntry;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cacheEntry = &amp;(*cacheEntry)-&gt;fNext;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";