var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheSpatialGrid.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_spatial_grid_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheSpatialGrid.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheSpatialGrid.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSpatialGrid.h&quot;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSpatialGridWalker.h&quot;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheIsectUtil.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SpatialGrid::SpatialGrid( </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> gridPoint3&lt;int&gt;&amp; numVoxels </div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Constructure just initializes bounding box sizes and sets</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      all voxel entries to NULL pointers.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    :   fBounds(boundingBox),</div>\n\
<div class=\"line\">    fNumVoxels(numVoxels)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  artificially expand the bounding box if is too small along one or more</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  axes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> minSize[3] = { 0.01, 0.01, 0.01 };</div>\n\
<div class=\"line\">    expandBBoxByPercentage( fBounds, 1.0, minSize );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  figure out voxel sizes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fVoxelSizes[0] = fBounds.width() / fNumVoxels[0];</div>\n\
<div class=\"line\">    fVoxelSizes[1] = fBounds.height() / fNumVoxels[1];</div>\n\
<div class=\"line\">    fVoxelSizes[2] = fBounds.depth() / fNumVoxels[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  make sure none of the voxels are tiny along one dimension</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fVoxelSizes[0] &lt; 0.01 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fVoxelSizes[0] = fBounds.width();</div>\n\
<div class=\"line\">        fNumVoxels[0] = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fVoxelSizes[1] &lt; 0.01 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fVoxelSizes[1] = fBounds.height();</div>\n\
<div class=\"line\">        fNumVoxels[1] = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fVoxelSizes[2] &lt; 0.01 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fVoxelSizes[2] = fBounds.depth();</div>\n\
<div class=\"line\">        fNumVoxels[2] = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  NULL out all voxel contents</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fVoxels.clear();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> totalVoxels = fNumVoxels[0] * fNumVoxels[1] * fNumVoxels[2];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; totalVoxels; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fVoxels.push_back(NULL);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SpatialGrid::~SpatialGrid()</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Just delete non-empty voxel grid entries.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numVoxels = fNumVoxels[0] * fNumVoxels[1] * fNumVoxels[2];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> v = 0; v &lt; numVoxels; v++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fVoxels[v] != NULL )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> fVoxels[v];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Some simple accessors</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> gridPoint3&lt;int&gt;&amp; SpatialGrid::getNumVoxels()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fNumVoxels;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SpatialGrid::bounds( <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; lowerCorner, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; upperCorner )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    lowerCorner = fBounds.min();</div>\n\
<div class=\"line\">    upperCorner = fBounds.max();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; SpatialGrid::bounds()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBounds;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> SpatialGrid::getLinearVoxelIndex( <span class=\"keyword\">const</span> gridPoint3&lt;int&gt;&amp; index ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Figures out which linear array element represents the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      voxel with the given x,y,z indices.  Remember, voxels</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      are stored by increasing order of X, then Y, then Z coordinate</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      indices.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> index[2]*(fNumVoxels[0]*fNumVoxels[1]) </div>\n\
<div class=\"line\">        + index[1]*fNumVoxels[0] </div>\n\
<div class=\"line\">    + index[0];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">    SpatialGrid::getVoxelRange(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; box,</div>\n\
<div class=\"line\">    gridPoint3&lt;int&gt;&amp; minIndices,</div>\n\
<div class=\"line\">    gridPoint3&lt;int&gt;&amp; maxIndices </div>\n\
<div class=\"line\">    ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Given a bounding box, compute the min and max voxel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      indices (in x, y, z) of the cells that intersect the box.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  get bbox corners</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; minPt = box.min();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; maxPt = box.max();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  return indices for min/max corners</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    getVoxelCoords( minPt, minIndices, NULL );</div>\n\
<div class=\"line\">    getVoxelCoords( maxPt, maxIndices, NULL );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SpatialGrid::getVoxelCoords( </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; point, </div>\n\
<div class=\"line\">    gridPoint3&lt;int&gt;&amp; coords,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> *residuals ) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Given a point, compute the x,y,z indices of the voxel grid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      in which it resides.  Optionally, return residual which gives</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      distance from point to next-lowest grid line value in each</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      dimension.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  get point relative to voxel grid lower corner</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> relPoint = point - fBounds.min();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get indices for each axis</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> axis = 0; axis &lt; 3; axis++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  figure out which cell point resides in</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> voxSpace = relPoint[axis] / fVoxelSizes[axis];</div>\n\
<div class=\"line\">        coords[axis] = (int)floor( voxSpace );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  clamp coordinate to valid range</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( coords[axis] &lt; 0 ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            coords[axis] = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( coords[axis] &gt;= fNumVoxels[axis] )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            coords[axis] = fNumVoxels[axis]-1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  compute residual</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      </span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( residuals != NULL )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            (*residuals)[axis] = fVoxelSizes[axis]*(voxSpace-coords[axis]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SpatialGrid::expandBBoxByPercentage( </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; bbox,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> percentage,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> min[3] </div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Expands the given bounding box by the given percentage</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      in all dimensions.  Percentage should be a value between</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      0 and 1, representing 0% to 100%.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      The optional 3 &quot;min&quot; values specify minimum sizes along each</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      axis that the bounding box size will be expanded to.  This</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      is useful for situations where one of the box axes is so small</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      that a percentagewise increase will not be meaningful.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    percentage += 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> c = bbox.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a329b58fadcbe4f236bfbb0887253fdc7\">center</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> w = bbox.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a6cddcbf72c80144aa2e6501abb150c30\">width</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> h = bbox.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afa7750092d5dcf402c83fb5adba91453\">height</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> d = bbox.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a65c72a51aba9fc4233b58751dd712e43\">depth</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  clamp the box sizes to the minimums, if given</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( min != NULL )</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( w &lt; min[0] )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            w = min[0];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( h &lt; min[1] ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            h = min[1];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( d &lt; min[2] )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            d = min[2];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  increase the box size</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> offset(w, h, d);</div>\n\
<div class=\"line\">    offset *= (0.5f * percentage);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    bbox.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#aee704d46278fb5925a7bd814a5773ccd\">expand</a>( c + offset);</div>\n\
<div class=\"line\">    bbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#aee704d46278fb5925a7bd814a5773ccd\">expand</a>( c - offset);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SpatialGrid::getClosestVoxelCoords( </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; point, </div>\n\
<div class=\"line\">    gridPoint3&lt;int&gt;&amp; coords) <span class=\"keyword\">const</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Given a point, compute the x,y,z indices of the voxel grid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      that it is closest to.   </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> c1 = fBounds.min() + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>(fBounds.width()/4, fBounds.height()/4, fBounds.depth()/4);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> c2 = fBounds.max() - <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>(fBounds.width()/4, fBounds.height()/4, fBounds.depth()/4);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> bounds(c1,c2);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> relPoint;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(bounds.contains(point)){</div>\n\
<div class=\"line\">        relPoint = point - fBounds.min();</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">//snap to bbox</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> closestPoint = point;</div>\n\
<div class=\"line\">        GPUCache::gpuCacheIsectUtil::getClosestPointOnBox(point, bounds, closestPoint);</div>\n\
<div class=\"line\">        relPoint = closestPoint - fBounds.min();</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> axis = 0; axis &lt; 3; axis++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  figure out which cell point resides in</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> voxSpace = relPoint[axis] / fVoxelSizes[axis];</div>\n\
<div class=\"line\">        coords[axis] = (int)floor( voxSpace );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> SpatialGrid::isValidVoxel(gridPoint3&lt;int&gt;&amp; vox){</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(vox[0]&gt;=0 &amp;&amp; vox[0]&lt;fNumVoxels[0] &amp;&amp; vox[1]&gt;=0 &amp;&amp; vox[1]&lt;fNumVoxels[1] &amp;&amp; vox[2]&gt;=0 &amp;&amp; vox[2]&lt;fNumVoxels[2]) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> *</div>\n\
<div class=\"line\">    SpatialGrid::getVoxelContents( </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> gridPoint3&lt;int&gt;&amp; index </div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Returns list of triangles for given voxel.  Allocates the array</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      if it doesn&#39;t exist already</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> linearIndex = getLinearVoxelIndex( index );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fVoxels[linearIndex] == NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fVoxels[linearIndex] = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fVoxels[linearIndex];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> SpatialGrid::getMemoryFootprint()</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Returns total amount of memory used by acceleration</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      structure.  This is the sum of the physical sizes of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      all the voxel entries, plus the physical size of the </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      linear voxel array as well.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      The result is returned in KB.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> totalSize = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  total up grid cell contents</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numVoxels = fNumVoxels[0]*fNumVoxels[1]*fNumVoxels[2];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> v = 0; v &lt; numVoxels; v++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fVoxels[v] != NULL )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            totalSize += fVoxels[v]-&gt;<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> int);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  also add space required for linear array of voxels</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    totalSize += fVoxels.size()*<span class=\"keyword\">sizeof</span>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>*);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ((<span class=\"keywordtype\">float</span>)totalSize)/1024.0f;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SpatialGridWalker SpatialGrid::getRayIterator( </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; origin,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp; direction )</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      Returns an iterator that will walk through every voxel </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      intersected by the ray from &#39;origin&#39; along direction</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      &#39;direction&#39;.  The iterator starts off in a valid grid </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      cell on initialization.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> SpatialGridWalker( origin, direction, <span class=\"keyword\">this</span> );</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";