var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcBullet/AttributesWriter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_bullet_2_attributes_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcBullet/AttributesWriter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcBullet/AttributesWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2012,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AttributesWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>Abc = Alembic::Abc;</div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>AbcGeom = Alembic::AbcGeom;</div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>AbcA = Alembic::AbcCoreAbstract;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * cAttrScope = <span class=\"stringliteral\">&quot;_AbcGeomScope&quot;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * cAttrType  = <span class=\"stringliteral\">&quot;_AbcType&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// returns true if a plug is of a simple numeric data type</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> isDataAttr(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; iParent)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj = iParent.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (obj.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adbe0e32666dfa9aef585d27e1303f72c\">MFn::kData2Double</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aae1a1823aaf4a9949a00cdad1416701e\">MFn::kData3Double</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ae46f3e2eb545085aa3e95986131aca40\">MFn::kData4Double</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aaec728c474eebbf25f7897ad91a51d83\">MFn::kData2Float</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a34cc84b1c9a66c606e6a57458d73dfaf\">MFn::kData3Float</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aabca4ccac2fd5307565d151dca1ee92f\">MFn::kData2Int</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a649d1fb0eb1157e5e62518d0852a74c7\">MFn::kData3Int</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aa0626c98b46e48dd0e7125d041b2570a\">MFn::kData2Short</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a83574468cb70d3233e7fd16dc4e652c4\">MFn::kData3Short</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a3135dad1345019bb8b8613cc73c91493\">MFn::kStringData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aa048cebe0f12f3c1e822635197ff7aba\">MFn::kStringArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab2261186b0b923089a0f3d341518a70d\">MFn::kFloatVectorArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aeeda0d4bfdc6dea40ecc9a9fe1d54f7d\">MFn::kVectorArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aadf0a97c3fb282a15300111e90c2a3ab\">MFn::kFloatArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a74071930089d3744d946dd03b4e64349\">MFn::kDoubleArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a73b31b1f3299063c2eaca88716cf5d99\">MFn::kIntArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af063b06d81f4a53d4af3c2162002df99\">MFn::kUintArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7abfae61c192777f4fcd110b2756ad3efc\">MFn::kPointArrayData</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a37a3b6022535d6a09930045856bf4626\">MFn::kUInt64ArrayData</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AbcGeom::GeometryScope strToScope(<a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> iStr)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    iStr.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iStr == <span class=\"stringliteral\">&quot;vtx&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> AbcGeom::kVertexScope;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iStr == <span class=\"stringliteral\">&quot;fvr&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> AbcGeom::kFacevaryingScope;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iStr == <span class=\"stringliteral\">&quot;uni&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> AbcGeom::kUniformScope;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iStr == <span class=\"stringliteral\">&quot;var&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> AbcGeom::kVaryingScope;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> AbcGeom::kConstantScope;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// returns true if the string ends with _AbcGeomScope or _AbcType</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> endsWithArbAttr(<span class=\"keyword\">const</span> std::string &amp; iStr)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> len = iStr.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (len &gt;= 13 &amp;&amp; iStr.compare(len - 13, 13, cAttrScope) == 0) ||</div>\n\
<div class=\"line\">        (len &gt;= 8 &amp;&amp; iStr.compare(len - 8, 8, cAttrType) == 0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> createUserPropertyFromNumeric(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> iType,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iAttr,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                                   Abc::OCompoundProperty &amp; iParent,</div>\n\
<div class=\"line\">                                   Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">                                   AbcGeom::GeometryScope iScope,</div>\n\
<div class=\"line\">                                   std::vector &lt; PlugAndObjScalar &gt; &amp; oScalars,</div>\n\
<div class=\"line\">                                   std::vector &lt; PlugAndObjArray &gt; &amp; oArrays)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::string plugName = iPlug.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(0, 0, 0, 0, 0, 1).<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (iType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OBoolProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a589716b974587a5b575bf02d0b74245a\">MFnNumericData::kChar</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OCharProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OInt16Property up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OInt32Property up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OFloatProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::ODoubleProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a78f9c008272ac1b28b52988ceb73839b\">MFnNumericData::k2Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV2sProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV3sProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a553cdb5a183e366651484ec268e108a1\">MFnNumericData::k2Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV2iProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV3iProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7af8f260603ef20b1e0c3d09de0e9c645c\">MFnNumericData::k2Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV2fProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV3fProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7aa3f828c84111a9aa42c14f9cd3962c7b\">MFnNumericData::k2Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV2dProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7add817d1d2e1e1d24ac2e2819a58e8f99\">MFnNumericData::k3Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjScalar p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            Abc::OV3dProperty up(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oScalars.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a3dfe68bf09c3e609cdb4c897dfcf3dbe\">MFnNumericData::k4Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcA::DataType dtype(Alembic::Util::kFloat64POD, 4);</div>\n\
<div class=\"line\">            Abc::OArrayProperty up(iParent, plugName, dtype, iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = up;</div>\n\
<div class=\"line\">            oArrays.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> createGeomPropertyFromNumeric(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> iType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iAttr,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug, Abc::OCompoundProperty &amp; iParent,</div>\n\
<div class=\"line\">                               Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">                               AbcGeom::GeometryScope iScope,</div>\n\
<div class=\"line\">                               std::vector &lt; PlugAndObjArray &gt; &amp; oArrayVec)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::string plugName = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(0, 0, 0, 0, 0, 1).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (iType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OBoolGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a589716b974587a5b575bf02d0b74245a\">MFnNumericData::kChar</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OCharGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OInt16GeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OInt32GeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OFloatGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::ODoubleGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a78f9c008272ac1b28b52988ceb73839b\">MFnNumericData::k2Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OV2sGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OV3sGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a553cdb5a183e366651484ec268e108a1\">MFnNumericData::k2Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OV2iGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OV3iGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7af8f260603ef20b1e0c3d09de0e9c645c\">MFnNumericData::k2Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OV2fGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> mfnAttr(iAttr);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mfnAttr.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae16d2168985d64b52e9fb973cc05e805\">isUsedAsColor</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                AbcGeom::OC3fGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                    iTimeIndex);</div>\n\
<div class=\"line\">                p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                AbcGeom::OV3fGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                    iTimeIndex);</div>\n\
<div class=\"line\">                p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7aa3f828c84111a9aa42c14f9cd3962c7b\">MFnNumericData::k2Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OV2dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7add817d1d2e1e1d24ac2e2819a58e8f99\">MFnNumericData::k3Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcGeom::OV3dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                iTimeIndex);</div>\n\
<div class=\"line\">            p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a3dfe68bf09c3e609cdb4c897dfcf3dbe\">MFnNumericData::k4Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PlugAndObjArray p;</div>\n\
<div class=\"line\">            p.plug = iPlug;</div>\n\
<div class=\"line\">            p.obj = iAttr;</div>\n\
<div class=\"line\">            AbcA::DataType dtype(Alembic::Util::kFloat64POD, 4);</div>\n\
<div class=\"line\">            p.prop = Abc::OArrayProperty(iParent, plugName, dtype, iTimeIndex);</div>\n\
<div class=\"line\">            oArrayVec.push_back(p);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MFnNumericDataToSample(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> iType,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                            Abc::OScalarProperty &amp; oProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>    ival;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>  fval;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dval;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>   bval;</div>\n\
<div class=\"line\">    Alembic::Util::int16_t sval;</div>\n\
<div class=\"line\">    Alembic::Util::int8_t  cval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Util::int16_t v2sVal[2];</div>\n\
<div class=\"line\">    Alembic::Util::int16_t v3sVal[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Util::int32_t v2iVal[2];</div>\n\
<div class=\"line\">    Alembic::Util::int32_t v3iVal[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> v2fVal[2];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> v3fVal[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> v2dVal[2];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> v3dVal[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (iType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            bval = iPlug.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>();</div>\n\
<div class=\"line\">            oProp.set(&amp;bval);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a589716b974587a5b575bf02d0b74245a\">MFnNumericData::kChar</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cval = iPlug.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab507a4e86eb5f2006de064aa09a4464d\">asChar</a>();</div>\n\
<div class=\"line\">            oProp.set(&amp;cval);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            sval = iPlug.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3a1f4c75eaab26280813008e35ca4ff3\">asShort</a>();</div>\n\
<div class=\"line\">            oProp.set(&amp;sval);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ival = iPlug.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>();</div>\n\
<div class=\"line\">            oProp.set(&amp;ival);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fval = iPlug.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>();</div>\n\
<div class=\"line\">            oProp.set(&amp;fval);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            dval = iPlug.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\">            oProp.set(&amp;dval);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a78f9c008272ac1b28b52988ceb73839b\">MFnNumericData::k2Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#afa8cd8acd513ddc7fe87e1c9061a16c7\">getData2Short</a>(v2sVal[0], v2sVal[1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(&amp;v2sVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a8d2f4a6d9b45c3cd5607c7632900d190\">getData3Short</a>(v3sVal[0], v3sVal[1], v3sVal[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(&amp;v3sVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a553cdb5a183e366651484ec268e108a1\">MFnNumericData::k2Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> val0, val1;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6855f044338da8c430308743897f38d4\">getData2Int</a>(val0, val1);</div>\n\
<div class=\"line\">            v2iVal[0] = Alembic::Util::int32_t(val0);</div>\n\
<div class=\"line\">            v2iVal[1] = Alembic::Util::int32_t(val1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.set(&amp;v2iVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> val0, val1, val2;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a07bcde60ce97730e4ffdbf7f83bd9895\">getData3Int</a>(val0, val1, val2);</div>\n\
<div class=\"line\">            v3iVal[0] = Alembic::Util::int32_t(val0);</div>\n\
<div class=\"line\">            v3iVal[1] = Alembic::Util::int32_t(val1);</div>\n\
<div class=\"line\">            v3iVal[2] = Alembic::Util::int32_t(val2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.set(&amp;v3iVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7af8f260603ef20b1e0c3d09de0e9c645c\">MFnNumericData::k2Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6a9240f3a50508d68b447d21cfdb48e3\">getData2Float</a>(v2fVal[0], v2fVal[1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(&amp;v2fVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1ed1d66504a91f683f126491d2f6ffc8\">getData3Float</a>(v3fVal[0], v3fVal[1], v3fVal[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(&amp;v3fVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7aa3f828c84111a9aa42c14f9cd3962c7b\">MFnNumericData::k2Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1a16cd0dcd0385aa1dea935704fb0f1d\">getData2Double</a>(v2dVal[0], v3dVal[1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(&amp;v2dVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7add817d1d2e1e1d24ac2e2819a58e8f99\">MFnNumericData::k3Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            numdFn.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a63d6db5913fcaa0d85baa1e9852f165a\">getData3Double</a>(v3dVal[0], v3dVal[1], v3dVal[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(&amp;v3dVal[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MFnNumericDataToSample(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> iType,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                            Abc::OArrayProperty &amp; oProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numElements =  iPlug.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isArray = iPlug.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dimSize = numElements;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">        dimSize = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (iType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::bool_t &gt; val(dimSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[0] = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = iPlug[i].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a589716b974587a5b575bf02d0b74245a\">MFnNumericData::kChar</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int8_t &gt; val(dimSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[0] = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab507a4e86eb5f2006de064aa09a4464d\">asChar</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = iPlug[i].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab507a4e86eb5f2006de064aa09a4464d\">asChar</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int16_t &gt; val(dimSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[0] = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3a1f4c75eaab26280813008e35ca4ff3\">asShort</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = iPlug[i].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3a1f4c75eaab26280813008e35ca4ff3\">asShort</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int32_t &gt; val(dimSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[0] = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = iPlug[i].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;float&gt; val(dimSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[0] = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = iPlug[i].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;double&gt; val(dimSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[0] = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = iPlug[i].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a78f9c008272ac1b28b52988ceb73839b\">MFnNumericData::k2Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int16_t &gt; val(dimSize*2);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#afa8cd8acd513ddc7fe87e1c9061a16c7\">getData2Short</a>(val[0], val[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#afa8cd8acd513ddc7fe87e1c9061a16c7\">getData2Short</a>(val[2*i], val[2*i+1]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int16_t &gt; val(dimSize*3);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a8d2f4a6d9b45c3cd5607c7632900d190\">getData3Short</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a8d2f4a6d9b45c3cd5607c7632900d190\">getData3Short</a>(val[3*i], val[3*i+1], val[3*i+2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a553cdb5a183e366651484ec268e108a1\">MFnNumericData::k2Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int32_t &gt; val(dimSize*2);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> val0, val1;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6855f044338da8c430308743897f38d4\">getData2Int</a>(val0, val1);</div>\n\
<div class=\"line\">                val[0] = Alembic::Util::int32_t(val0);</div>\n\
<div class=\"line\">                val[1] = Alembic::Util::int32_t(val1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> val0, val1;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6855f044338da8c430308743897f38d4\">getData2Int</a>(val0, val1);</div>\n\
<div class=\"line\">                    val[2*i] = Alembic::Util::int32_t(val0);</div>\n\
<div class=\"line\">                    val[2*i+1] = Alembic::Util::int32_t(val1);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int32_t &gt; val(dimSize*3);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> val0, val1, val2;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a07bcde60ce97730e4ffdbf7f83bd9895\">getData3Int</a>(val0, val1, val2);</div>\n\
<div class=\"line\">                val[0] = Alembic::Util::int32_t(val0);</div>\n\
<div class=\"line\">                val[1] = Alembic::Util::int32_t(val1);</div>\n\
<div class=\"line\">                val[2] = Alembic::Util::int32_t(val2);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> val0, val1, val2;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a07bcde60ce97730e4ffdbf7f83bd9895\">getData3Int</a>(val0, val1, val2);</div>\n\
<div class=\"line\">                    val[3*i] = Alembic::Util::int32_t(val0);</div>\n\
<div class=\"line\">                    val[3*i+1] = Alembic::Util::int32_t(val1);</div>\n\
<div class=\"line\">                    val[3*i+2] = Alembic::Util::int32_t(val2);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7af8f260603ef20b1e0c3d09de0e9c645c\">MFnNumericData::k2Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;float&gt; val(dimSize*2);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6a9240f3a50508d68b447d21cfdb48e3\">getData2Float</a>(val[0], val[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a6a9240f3a50508d68b447d21cfdb48e3\">getData2Float</a>(val[2*i], val[2*i+1]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;float&gt; val(dimSize*3);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1ed1d66504a91f683f126491d2f6ffc8\">getData3Float</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1ed1d66504a91f683f126491d2f6ffc8\">getData3Float</a>(val[3*i], val[3*i+1], val[3*i+2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7aa3f828c84111a9aa42c14f9cd3962c7b\">MFnNumericData::k2Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;double&gt; val(dimSize*2);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1a16cd0dcd0385aa1dea935704fb0f1d\">getData2Double</a>(val[0], val[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1a16cd0dcd0385aa1dea935704fb0f1d\">getData2Double</a>(val[2*i], val[2*i+1]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7add817d1d2e1e1d24ac2e2819a58e8f99\">MFnNumericData::k3Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;double&gt; val(dimSize*3);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a63d6db5913fcaa0d85baa1e9852f165a\">getData3Double</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a63d6db5913fcaa0d85baa1e9852f165a\">getData3Double</a>(val[3*i], val[3*i+1], val[3*i+2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a3dfe68bf09c3e609cdb4c897dfcf3dbe\">MFnNumericData::k4Double</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;double&gt; val(dimSize*4);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                numdFn.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a47d16e8d05fcf300d98a3b5b6d050e7d\">getData4Double</a>(val[0], val[1], val[2], val[3]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numdFn(iPlug[i].asMObject());</div>\n\
<div class=\"line\">                    numdFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a47d16e8d05fcf300d98a3b5b6d050e7d\">getData4Double</a>(val[4*i], val[4*i+1], val[4*i+2],</div>\n\
<div class=\"line\">                        val[4*i+3]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(dimSize));</div>\n\
<div class=\"line\">            oProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MFnTypedDataToSample(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnData::Type</a> iType,</div>\n\
<div class=\"line\">                          <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                          Abc::OScalarProperty &amp; oProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numElements =  iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isArray = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> dimSize = numElements;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">        dimSize = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (iType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7adfcee1ce907528ecdd87fa3f5671126c\">MFnData::kNumeric</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numObj(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MFnNumericDataToSample(numObj.numericType(), iPlug,</div>\n\
<div class=\"line\">                oProp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Abc::OStringProperty strProp( oProp.getPtr(), Abc::kWrapExisting );</div>\n\
<div class=\"line\">            std::string val = iPlug.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            strProp.set(val);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a0a7e432b4b65ff0754f59c98fe588200\">MFnData::kMatrix</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> arr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            <a name=\"_a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat = arr.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> val[16];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> r = 0; r &lt; 4; r++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> c = 0; c &lt; 4; c++, i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = mat[r][c];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oProp.set(&amp;val);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MFnTypedDataToSample(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnData::Type</a> iType,</div>\n\
<div class=\"line\">                          <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                          Abc::OArrayProperty &amp; oProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numElements =  iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isArray = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> dimSize = numElements;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!isArray)</div>\n\
<div class=\"line\">        dimSize = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (iType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7adfcee1ce907528ecdd87fa3f5671126c\">MFnData::kNumeric</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numObj(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MFnNumericDataToSample(numObj.numericType(), iPlug,</div>\n\
<div class=\"line\">                oProp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt; std::string &gt; val(1);</div>\n\
<div class=\"line\">            val[0] = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(1));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> arr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = arr.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            std::vector&lt; std::string &gt; val(length);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[i] = arr[i].asChar();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(length));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7aaee060f77390647f2195ea07f5bda194\">MFnData::kDoubleArray</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html\">MFnDoubleArrayData</a> arr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = arr.<a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            std::vector&lt; double &gt; val(length);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[i] = arr[i];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(length));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8892cbe039dc4c92d47be0bf340950a2\">MFnData::kIntArray</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html\">MFnIntArrayData</a> arr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = arr.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            std::vector&lt; Alembic::Util::int32_t &gt; val(length);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                val[i] = arr[i];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(length));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a794fde57efe7913d9b67ac54c37899bd\">MFnData::kPointArray</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html\">MFnPointArrayData</a> arr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = arr.<a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> extent = oProp.getDataType().getExtent();</div>\n\
<div class=\"line\">            std::vector&lt; double &gt; val(length*extent);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt(arr[i]);</div>\n\
<div class=\"line\">                val[extent*i] = pt.<a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                val[extent*i+1] = pt.<a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent &gt; 2)</div>\n\
<div class=\"line\">                    val[extent*i+2] = pt.<a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent &gt; 3)</div>\n\
<div class=\"line\">                    val[extent*i+3] = pt.<a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#afb3248bab1c7ee0ad97e9d4c275b4c67\">w</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(length));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a155fba435c9f5acc854c40a9895a4cf1\">MFnData::kVectorArray</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> arr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = arr.<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> extent = oProp.getDataType().getExtent();</div>\n\
<div class=\"line\">            std::vector&lt; double &gt; val(length*extent);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> v(arr[i]);</div>\n\
<div class=\"line\">                val[extent*i] = v.<a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                val[extent*i+1] = v.<a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent &gt; 2)</div>\n\
<div class=\"line\">                   val[extent*i+2] = v.<a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(length));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a0a7e432b4b65ff0754f59c98fe588200\">MFnData::kMatrix</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> arr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat = arr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>();</div>\n\
<div class=\"line\">            std::vector&lt;double&gt; val(16);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> r = 0; r &lt; 4; r++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> c = 0; c &lt; 4; c++, i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = mat[r][c];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            AbcA::ArraySample samp(&amp;(val.front()), oProp.getDataType(),</div>\n\
<div class=\"line\">                Alembic::Util::Dimensions(1));</div>\n\
<div class=\"line\">            oProp.set(samp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> attributeToScalarPropertyPair(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iAttr,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                                   Abc::OScalarProperty &amp; oProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iAttr.<a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adead26e1b827316155632e4cb27c848b\">MFn::kTypedAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> typedAttr(iAttr);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MFnTypedDataToSample(typedAttr.<a name=\"a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#aa3bf2ba724f9aaf87976b1fb896fd700\">attrType</a>(), iPlug, oProp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr(iAttr);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MFnNumericDataToSample(numAttr.<a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a475558f03040cb41c9af196253650823\">unitType</a>(), iPlug, oProp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1f483b65a79a5100d8f7a91e2c4c68a3\">MFn::kUnitAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> dval = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\">        oProp.set(&amp;dval);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad68d8aedd6c8e61a3b259d6984b47d6f\">MFn::kEnumAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Util::int16_t val = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3a1f4c75eaab26280813008e35ca4ff3\">asShort</a>();</div>\n\
<div class=\"line\">        oProp.set(&amp;val);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> attributeToArrayPropertyPair(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iAttr,</div>\n\
<div class=\"line\">                                  <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                                  Abc::OArrayProperty &amp; oProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adead26e1b827316155632e4cb27c848b\">MFn::kTypedAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> typedAttr(iAttr);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MFnTypedDataToSample(typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#aa3bf2ba724f9aaf87976b1fb896fd700\">attrType</a>(), iPlug,</div>\n\
<div class=\"line\">            oProp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr(iAttr);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MFnNumericDataToSample(numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a475558f03040cb41c9af196253650823\">unitType</a>(), iPlug,</div>\n\
<div class=\"line\">            oProp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1f483b65a79a5100d8f7a91e2c4c68a3\">MFn::kUnitAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> val = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\">        AbcA::ArraySample samp(&amp;val, oProp.getDataType(),</div>\n\
<div class=\"line\">            Alembic::Util::Dimensions(1));</div>\n\
<div class=\"line\">        oProp.set(samp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad68d8aedd6c8e61a3b259d6984b47d6f\">MFn::kEnumAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Util::int16_t val = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3a1f4c75eaab26280813008e35ca4ff3\">asShort</a>();</div>\n\
<div class=\"line\">        AbcA::ArraySample samp(&amp;val, oProp.getDataType(),</div>\n\
<div class=\"line\">            Alembic::Util::Dimensions(1));</div>\n\
<div class=\"line\">        oProp.set(samp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> createUserPropertyFromMFnAttr(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iAttr,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                                   Abc::OCompoundProperty &amp; iParent,</div>\n\
<div class=\"line\">                                   Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">                                   AbcGeom::GeometryScope iScope,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iTypeStr,</div>\n\
<div class=\"line\">                                   std::vector &lt; PlugAndObjScalar &gt; &amp; oScalars,</div>\n\
<div class=\"line\">                                   std::vector &lt; PlugAndObjArray &gt; &amp; oArrays)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    std::string plugName = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(0, 0, 0, 0, 0, 1).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numFn(iAttr, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <span class=\"stringliteral\">&quot;Couldn&#39;t instantiate MFnNumericAttribute\\n\\tType: &quot;</span>;</div>\n\
<div class=\"line\">            err += iAttr.<a name=\"a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a3dad4d354c5b968cf4eccfffcdb824f4\">apiTypeStr</a>();</div>\n\
<div class=\"line\">            <a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        createUserPropertyFromNumeric(numFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a475558f03040cb41c9af196253650823\">unitType</a>(), iAttr, iPlug,</div>\n\
<div class=\"line\">                                      iParent, iTimeIndex, iScope,</div>\n\
<div class=\"line\">                                      oScalars, oArrays);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adead26e1b827316155632e4cb27c848b\">MFn::kTypedAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> typeFn(iAttr, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <span class=\"stringliteral\">&quot;Couldn&#39;t instantiate MFnTypedAttribute\\n\\tType: &quot;</span>;</div>\n\
<div class=\"line\">            err += iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a3dad4d354c5b968cf4eccfffcdb824f4\">apiTypeStr</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (typeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#aa3bf2ba724f9aaf87976b1fb896fd700\">attrType</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjScalar p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                p.prop = Abc::OStringProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                oScalars.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                p.prop = Abc::OStringArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                oArrays.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7aaee060f77390647f2195ea07f5bda194\">MFnData::kDoubleArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                p.prop = Abc::ODoubleArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                oArrays.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8892cbe039dc4c92d47be0bf340950a2\">MFnData::kIntArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                p.prop = Abc::OInt32ArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                oArrays.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a794fde57efe7913d9b67ac54c37899bd\">MFnData::kPointArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iTypeStr  == <span class=\"stringliteral\">&quot;point2&quot;</span>)</div>\n\
<div class=\"line\">                    p.prop = Abc::OP2dArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    p.prop = Abc::OP3dArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                oArrays.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a155fba435c9f5acc854c40a9895a4cf1\">MFnData::kVectorArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iTypeStr == <span class=\"stringliteral\">&quot;vector2&quot;</span>)</div>\n\
<div class=\"line\">                    p.prop = Abc::OV2dArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iTypeStr == <span class=\"stringliteral\">&quot;normal2&quot;</span>)</div>\n\
<div class=\"line\">                    p.prop = Abc::ON2dArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iTypeStr == <span class=\"stringliteral\">&quot;normal3&quot;</span>)</div>\n\
<div class=\"line\">                    p.prop = Abc::ON3dArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    p.prop = Abc::OV3dArrayProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                oArrays.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a0a7e432b4b65ff0754f59c98fe588200\">MFnData::kMatrix</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjScalar p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                p.prop = Abc::OM44dProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">                oScalars.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7adfcee1ce907528ecdd87fa3f5671126c\">MFnData::kNumeric</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                createUserPropertyFromNumeric(numAttr.unitType(), iAttr,</div>\n\
<div class=\"line\">                    iPlug, iParent, iTimeIndex, iScope, oScalars, oArrays);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// get the full property name for the warning</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t convert &quot;</span>;</div>\n\
<div class=\"line\">                msg += iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">                msg += <span class=\"stringliteral\">&quot; to a property, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">                <a name=\"a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1f483b65a79a5100d8f7a91e2c4c68a3\">MFn::kUnitAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        PlugAndObjScalar p;</div>\n\
<div class=\"line\">        p.plug = iPlug;</div>\n\
<div class=\"line\">        p.obj = iAttr;</div>\n\
<div class=\"line\">        p.prop = Abc::ODoubleProperty(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">        oScalars.push_back(p);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad68d8aedd6c8e61a3b259d6984b47d6f\">MFn::kEnumAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        PlugAndObjScalar p;</div>\n\
<div class=\"line\">        p.plug = iPlug;</div>\n\
<div class=\"line\">        p.obj = iAttr;</div>\n\
<div class=\"line\">        p.prop = Abc::OInt16Property(iParent, plugName, iTimeIndex);</div>\n\
<div class=\"line\">        oScalars.push_back(p);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> createGeomPropertyFromMFnAttr(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; iAttr,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug,</div>\n\
<div class=\"line\">                                   Abc::OCompoundProperty &amp; iParent,</div>\n\
<div class=\"line\">                                   Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">                                   AbcGeom::GeometryScope iScope,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iTypeStr,</div>\n\
<div class=\"line\">                                   std::vector &lt; PlugAndObjArray &gt; &amp; oArrayVec)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// for some reason we have just 1 of the elements of an array, bail</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iPlug.<a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad8079bb3afa94060b5e42af75df9f1b4\">isElement</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::string plugName = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(0, 0, 0, 0, 0, 1).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numFn(iAttr, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <span class=\"stringliteral\">&quot;Couldn&#39;t instantiate MFnNumericAttribute\\n\\tType: &quot;</span>;</div>\n\
<div class=\"line\">            err += iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a3dad4d354c5b968cf4eccfffcdb824f4\">apiTypeStr</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        createGeomPropertyFromNumeric(numFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a475558f03040cb41c9af196253650823\">unitType</a>(), iAttr, iPlug, iParent,</div>\n\
<div class=\"line\">            iTimeIndex, iScope, oArrayVec);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adead26e1b827316155632e4cb27c848b\">MFn::kTypedAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> typeFn(iAttr, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stat)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = <span class=\"stringliteral\">&quot;Couldn&#39;t instantiate MFnTypedAttribute\\n\\tType: &quot;</span>;</div>\n\
<div class=\"line\">            err += iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a3dad4d354c5b968cf4eccfffcdb824f4\">apiTypeStr</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (typeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#aa3bf2ba724f9aaf87976b1fb896fd700\">attrType</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                AbcGeom::OStringGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                    1, iTimeIndex);</div>\n\
<div class=\"line\">                p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                oArrayVec.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                AbcGeom::OStringGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                    1, iTimeIndex);</div>\n\
<div class=\"line\">                p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                oArrayVec.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7aaee060f77390647f2195ea07f5bda194\">MFnData::kDoubleArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                AbcGeom::ODoubleGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                    1, iTimeIndex);</div>\n\
<div class=\"line\">                p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                oArrayVec.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8892cbe039dc4c92d47be0bf340950a2\">MFnData::kIntArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                AbcGeom::OInt32GeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                    1, iTimeIndex);</div>\n\
<div class=\"line\">                p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                oArrayVec.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a794fde57efe7913d9b67ac54c37899bd\">MFnData::kPointArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iTypeStr  == <span class=\"stringliteral\">&quot;point2&quot;</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    AbcGeom::OP2dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                        1, iTimeIndex);</div>\n\
<div class=\"line\">                    p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    AbcGeom::OP3dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                        1, iTimeIndex);</div>\n\
<div class=\"line\">                    p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                oArrayVec.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a155fba435c9f5acc854c40a9895a4cf1\">MFnData::kVectorArray</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iTypeStr == <span class=\"stringliteral\">&quot;vector2&quot;</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    AbcGeom::OV2dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                        1, iTimeIndex);</div>\n\
<div class=\"line\">                    p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iTypeStr == <span class=\"stringliteral\">&quot;normal2&quot;</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    AbcGeom::ON2dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                        1, iTimeIndex);</div>\n\
<div class=\"line\">                    p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iTypeStr == <span class=\"stringliteral\">&quot;normal3&quot;</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    AbcGeom::ON3dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                        1, iTimeIndex);</div>\n\
<div class=\"line\">                    p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    AbcGeom::OV3dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope,</div>\n\
<div class=\"line\">                        1, iTimeIndex);</div>\n\
<div class=\"line\">                    p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                oArrayVec.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a0a7e432b4b65ff0754f59c98fe588200\">MFnData::kMatrix</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                PlugAndObjArray p;</div>\n\
<div class=\"line\">                p.plug = iPlug;</div>\n\
<div class=\"line\">                p.obj = iAttr;</div>\n\
<div class=\"line\">                AbcGeom::OM44dGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">                    iTimeIndex);</div>\n\
<div class=\"line\">                p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">                oArrayVec.push_back(p);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7adfcee1ce907528ecdd87fa3f5671126c\">MFnData::kNumeric</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ada03566ab064058c7ef435ae306d3809\">asMObject</a>());</div>\n\
<div class=\"line\">                createGeomPropertyFromNumeric(numAttr.unitType(), iAttr,</div>\n\
<div class=\"line\">                    iPlug, iParent, iTimeIndex, iScope, oArrayVec);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// get the full property name for the warning</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t convert &quot;</span>;</div>\n\
<div class=\"line\">                msg += iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">                msg += <span class=\"stringliteral\">&quot; to a property, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1f483b65a79a5100d8f7a91e2c4c68a3\">MFn::kUnitAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        PlugAndObjArray p;</div>\n\
<div class=\"line\">        p.plug = iPlug;</div>\n\
<div class=\"line\">        p.obj = iAttr;</div>\n\
<div class=\"line\">        AbcGeom::ODoubleGeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">            iTimeIndex);</div>\n\
<div class=\"line\">        p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">        oArrayVec.push_back(p);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad68d8aedd6c8e61a3b259d6984b47d6f\">MFn::kEnumAttribute</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        PlugAndObjArray p;</div>\n\
<div class=\"line\">        p.plug = iPlug;</div>\n\
<div class=\"line\">        p.obj = iAttr;</div>\n\
<div class=\"line\">        AbcGeom::OInt16GeomParam gp(iParent, plugName, <span class=\"keyword\">false</span>, iScope, 1,</div>\n\
<div class=\"line\">            iTimeIndex);</div>\n\
<div class=\"line\">        p.prop = gp.getValueProperty();</div>\n\
<div class=\"line\">        oArrayVec.push_back(p);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AttributesWriter::AttributesWriter(</div>\n\
<div class=\"line\">    Alembic::Abc::OCompoundProperty &amp; iArbGeom,</div>\n\
<div class=\"line\">    Alembic::Abc::OCompoundProperty &amp; iUserProps,</div>\n\
<div class=\"line\">    Alembic::Abc::OObject &amp; iParentObj,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> &amp; iNode,</div>\n\
<div class=\"line\">    Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> JobArgs &amp; iArgs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    PlugAndObjScalar visPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> attrCount = iNode.<a name=\"a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#af762f251eae844405571ed86ab9d1509\">attributeCount</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjArray &gt; staticPlugObjArrayVec;</div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjScalar &gt; staticPlugObjScalarVec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; attrCount; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attr = iNode.<a name=\"a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>(i);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> mfnAttr(attr);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = iNode.<a name=\"a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(attr, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not readable, then bail without any more checking</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mfnAttr.isReadable() || plug.<a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string propStr = propName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we handle visibility in a special way</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (propStr == <span class=\"stringliteral\">&quot;visibility&quot;</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iArgs.writeVisibility)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                visPlug.plug = plug;</div>\n\
<div class=\"line\">                visPlug.obj = attr;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> userAttr = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!matchFilterOrAttribs(plug, iArgs, userAttr))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (userAttr &amp;&amp; !iUserProps.valid())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!userAttr &amp;&amp; !iArbGeom.valid())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> sampType = util::getSampledType(plug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> scopePlug = iNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(propName + cAttrScope, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        AbcGeom::GeometryScope scope = AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!scopePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            scope = strToScope(scopePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> typeStr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> typePlug = iNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(propName + cAttrType, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!typePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            typeStr= typePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (userAttr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (sampType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// static</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 0:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Fills in the static plug to OScalarProperty OR </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// OArrayProperty correspondence, used for the writing</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// below.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    createUserPropertyFromMFnAttr(attr, plug, iUserProps, 0,</div>\n\
<div class=\"line\">                        scope, typeStr, staticPlugObjScalarVec,</div>\n\
<div class=\"line\">                        staticPlugObjArrayVec);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// sampled</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 1:</div>\n\
<div class=\"line\">                <span class=\"comment\">// curve treat like sampled</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 2:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Fill in the mPlugUserPropertyVec, used for the writing</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// below as well as in the write() method for animated</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// values.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    createUserPropertyFromMFnAttr(attr, plug, iUserProps,</div>\n\
<div class=\"line\">                        iTimeIndex, scope, typeStr, mPlugObjScalarVec,</div>\n\
<div class=\"line\">                        mPlugObjArrayVec);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (sampType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// static</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 0:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Fills in the plug to OArrayProperty correspondence,</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// used for the writing below.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    createGeomPropertyFromMFnAttr(attr, plug, iArbGeom, 0,</div>\n\
<div class=\"line\">                        scope, typeStr, staticPlugObjArrayVec);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// sampled</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 1:</div>\n\
<div class=\"line\">                <span class=\"comment\">// curve treat like sampled</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> 2:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// mPlugObjArrayVec</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// member variable used by isAnimated and when sampling</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the animated data.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    createGeomPropertyFromMFnAttr(attr, plug, iArbGeom,</div>\n\
<div class=\"line\">                        iTimeIndex, scope, typeStr, mPlugObjArrayVec);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write the static scalar props</span></div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjScalar &gt;::iterator k =</div>\n\
<div class=\"line\">        staticPlugObjScalarVec.begin();</div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjScalar &gt;::iterator kend =</div>\n\
<div class=\"line\">        staticPlugObjScalarVec.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; k != kend; k++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = k-&gt;plug.partialName(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// attributeTo[Scalar|Array]PropertyPair does the writing.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> filledProp = attributeToScalarPropertyPair(k-&gt;obj, k-&gt;plug,</div>\n\
<div class=\"line\">            k-&gt;prop);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!filledProp)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t get static scalar property &quot;</span>;</div>\n\
<div class=\"line\">            msg += k-&gt;plug.partialName(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot;, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write the static array props</span></div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjArray &gt;::iterator j =</div>\n\
<div class=\"line\">        staticPlugObjArrayVec.begin();</div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjArray &gt;::iterator jend =</div>\n\
<div class=\"line\">        staticPlugObjArrayVec.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; j != jend; j++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = j-&gt;plug.partialName(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> filledProp = attributeToArrayPropertyPair(j-&gt;obj, j-&gt;plug,</div>\n\
<div class=\"line\">            j-&gt;prop);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!filledProp)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t get static array property &quot;</span>;</div>\n\
<div class=\"line\">            msg += j-&gt;plug.partialName(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot;, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write the animated userProperties</span></div>\n\
<div class=\"line\">    k = mPlugObjScalarVec.begin();</div>\n\
<div class=\"line\">    kend = mPlugObjScalarVec.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; k != kend; ++k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = k-&gt;plug.partialName(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> filledProp = attributeToScalarPropertyPair(k-&gt;obj, k-&gt;plug,</div>\n\
<div class=\"line\">            k-&gt;prop);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!filledProp)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t get scalar property &quot;</span>;</div>\n\
<div class=\"line\">            msg += k-&gt;plug.partialName(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot;, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write the animated arbGeomProps</span></div>\n\
<div class=\"line\">    j = mPlugObjArrayVec.begin();</div>\n\
<div class=\"line\">    jend = mPlugObjArrayVec.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; j != jend; j++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = j-&gt;plug.partialName(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> filledProp = attributeToArrayPropertyPair(j-&gt;obj, j-&gt;plug,j-&gt;prop);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!filledProp)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t get array property &quot;</span>;</div>\n\
<div class=\"line\">            msg += j-&gt;plug.partialName(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot;, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Rest of this is specific to visibility</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!visPlug.plug.isNull())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> retVis = util::getVisibilityType(visPlug.plug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// visible will go on the top most compound</span></div>\n\
<div class=\"line\">        Abc::OCompoundProperty parent = iParentObj.getProperties();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (retVis)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// static visibility 0 case</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> 1:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::int8_t visVal =</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::kVisibilityHidden;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Abc::OCharProperty bp =</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::CreateVisibilityProperty(</div>\n\
<div class=\"line\">                        iParentObj, 0);</div>\n\
<div class=\"line\">                bp.set(visVal);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// animated visibility 0 case</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> 2:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::int8_t visVal =</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::kVisibilityHidden;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Abc::OCharProperty bp = </div>\n\
<div class=\"line\">                    Alembic::AbcGeom::CreateVisibilityProperty(</div>\n\
<div class=\"line\">                        iParentObj, iTimeIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                bp.set(visVal);</div>\n\
<div class=\"line\">                visPlug.prop = bp;</div>\n\
<div class=\"line\">                mAnimVisibility = visPlug;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// animated visibility 1 case</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> 3:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// dont add if we are forcing static (no frame range specified)</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iTimeIndex == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                mAnimVisibility = visPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Alembic::Util::int8_t visVal =</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::kVisibilityDeferred;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Abc::OCharProperty bp = </div>\n\
<div class=\"line\">                    Alembic::AbcGeom::CreateVisibilityProperty(</div>\n\
<div class=\"line\">                        iParentObj, iTimeIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                bp.set(visVal);</div>\n\
<div class=\"line\">                visPlug.prop = bp;</div>\n\
<div class=\"line\">                mAnimVisibility = visPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// dont write any visibility</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns true if the attribute is:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// * Included by name via a -a or -u argument</span></div>\n\
<div class=\"line\"><span class=\"comment\">// * Matches by name via a -atp or -uatp argument</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// If it&#39;s matched via -u or -uatp, userAttrOut is set to true.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// These are intended to go in the .userProperties bucket on the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// object.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AttributesWriter::matchFilterOrAttribs(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; iPlug,</div>\n\
<div class=\"line\">                                            <span class=\"keyword\">const</span> JobArgs &amp; iArgs,</div>\n\
<div class=\"line\">                                            <span class=\"keywordtype\">bool</span>&amp; userAttrOut)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\">    std::string name = propName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (name.find(<span class=\"stringliteral\">&quot;[&quot;</span>) != std::string::npos)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For .arbGeomParam bucket</span></div>\n\
<div class=\"line\">    std::vector&lt;std::string&gt;::const_iterator f;</div>\n\
<div class=\"line\">    std::vector&lt;std::string&gt;::const_iterator fEnd =</div>\n\
<div class=\"line\">        iArgs.prefixFilters.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (f = iArgs.prefixFilters.begin(); f != fEnd; ++f)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// check the prefilter and ignore those that match but end with</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// arb attr</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (f-&gt;length() &gt; 0 &amp;&amp;</div>\n\
<div class=\"line\">            name.compare(0, f-&gt;length(), *f) == 0 &amp;&amp;</div>\n\
<div class=\"line\">            !endsWithArbAttr(name) &amp;&amp;</div>\n\
<div class=\"line\">            ( !iPlug.<a name=\"a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a839768abda6d6ba21e549302208943bd\">isChild</a>() || !isDataAttr(iPlug.<a name=\"a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>()) ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            userAttrOut = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For .userProperties bucket</span></div>\n\
<div class=\"line\">    std::vector&lt;std::string&gt;::const_iterator it;</div>\n\
<div class=\"line\">    std::vector&lt;std::string&gt;::const_iterator itEnd =</div>\n\
<div class=\"line\">        iArgs.userPrefixFilters.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (it = iArgs.userPrefixFilters.begin(); it != itEnd; ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// check the userprefilter and ignore those that match but end with</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// arb attr</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it-&gt;length() &gt; 0 &amp;&amp;</div>\n\
<div class=\"line\">            name.compare(0, it-&gt;length(), *it) == 0 &amp;&amp;</div>\n\
<div class=\"line\">            !endsWithArbAttr(name) &amp;&amp;</div>\n\
<div class=\"line\">            ( !iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a839768abda6d6ba21e549302208943bd\">isChild</a>() || !isDataAttr(iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>()) ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            userAttrOut = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check our specific list of attributes</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iArgs.attribs.find(name) != iArgs.attribs.end())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        userAttrOut = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iArgs.userAttribs.find(name) != iArgs.userAttribs.end())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        userAttrOut = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AttributesWriter::hasAnyAttr(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> &amp; iNode,</div>\n\
<div class=\"line\">                                  <span class=\"keyword\">const</span> JobArgs &amp; iArgs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> attrCount = iNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#af762f251eae844405571ed86ab9d1509\">attributeCount</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjArray &gt; staticPlugObjArrayVec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> userAttr;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; attrCount; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attr = iNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a6117a63ae3bb2d03aa976dc8732d93a5\">attribute</a>(i);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> mfnAttr(attr);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = iNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(attr, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not readable, then bail without any more checking</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mfnAttr.isReadable() || plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (matchFilterOrAttribs(plug, iArgs, userAttr))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AttributesWriter::~AttributesWriter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AttributesWriter::isAnimated()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> !mPlugObjArrayVec.empty() || !mAnimVisibility.plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() ||</div>\n\
<div class=\"line\">           !mPlugObjScalarVec.empty();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AttributesWriter::write()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjArray &gt;::iterator j =</div>\n\
<div class=\"line\">        mPlugObjArrayVec.begin();</div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjArray &gt;::iterator jend =</div>\n\
<div class=\"line\">        mPlugObjArrayVec.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; j != jend; j++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = j-&gt;plug.partialName(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> filledProp = attributeToArrayPropertyPair(j-&gt;obj, j-&gt;plug, j-&gt;prop);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!filledProp)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t get sampled array property &quot;</span>;</div>\n\
<div class=\"line\">            msg += j-&gt;plug.partialName(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot;, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjScalar &gt;::iterator k =</div>\n\
<div class=\"line\">        mPlugObjScalarVec.begin();</div>\n\
<div class=\"line\">    std::vector&lt; PlugAndObjScalar &gt;::iterator kend =</div>\n\
<div class=\"line\">        mPlugObjScalarVec.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; k != kend; ++k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName = k-&gt;plug.partialName(0, 0, 0, 0, 0, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> filledProp = attributeToScalarPropertyPair(k-&gt;obj, k-&gt;plug,</div>\n\
<div class=\"line\">            k-&gt;prop);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!filledProp)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;WARNING: Couldn&#39;t get sampled scalar property &quot;</span>;</div>\n\
<div class=\"line\">            msg += k-&gt;plug.partialName(1, 0, 0, 0, 1, 1);</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot;, so skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!mAnimVisibility.plug.isNull())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Util::int8_t visVal = -1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mAnimVisibility.plug.asBool())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            visVal = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mAnimVisibility.prop.set(&amp;visVal);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";