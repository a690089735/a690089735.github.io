var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: viewDX11DeviceAccess/viewDX11DeviceAccess.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'view_d_x11_device_access_2view_d_x11_device_access_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: viewDX11DeviceAccess/viewDX11DeviceAccess.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">viewDX11DeviceAccess/viewDX11DeviceAccess.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><span class=\"comment\">// provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &gt;= 1700</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable: 4005 )</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// For sample draw traversal</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawTraversal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MBoundingBox.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/M3dView.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderTargetManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MShaderManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTextureManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStateManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGLFunctionTable.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Includes for DX</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define WIN32_LEAN_AND_MEAN</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3d11.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3dx11.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3dcompiler.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;xnamath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Trivial scene draw classes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Draw traversal utility</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MSurfaceDrawTraversal : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html\">MDrawTraversal</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span>        <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#aea51f24eb5f0b51318d9f3091f2f6535\">filterNode</a>( <span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;traversalItem )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> prune = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Check to only prune shapes, not transforms.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( traversalItem.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412\">childCount</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !traversalItem.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>) &amp;&amp;</div>\n\
<div class=\"line\">                !traversalItem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>) &amp;&amp;</div>\n\
<div class=\"line\">                !traversalItem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a305a1a7e615931a31f8d932bb4f3a4c1\">MFn::kSubdiv</a>)</div>\n\
<div class=\"line\">                )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                prune = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> prune;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    A very simplistic custom scene draw example which just draws</span></div>\n\
<div class=\"line\"><span class=\"comment\">    coloured bounding boxes for surface types.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    This code is similiar to the example code found in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    plugin examples OpenGLViewportRenderer and DX11ViewportRenderer</span></div>\n\
<div class=\"line\"><span class=\"comment\">    found in earlier versions of Mayaw hich just traverse the scene</span></div>\n\
<div class=\"line\"><span class=\"comment\">    to perform a draw.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MCustomSceneDraw</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> mDeviceIsGL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// OpenGL device members</span></div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_l_function_table.html\">MGLFunctionTable</a> *mGLFT;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// DirectX device members</span></div>\n\
<div class=\"line\">    ID3D11Device*           m_pD3DDevice;           <span class=\"comment\">// Device</span></div>\n\
<div class=\"line\">    ID3D11DeviceContext*    m_pD3DDeviceContext;    <span class=\"comment\">// Device context</span></div>\n\
<div class=\"line\">    ID3D11RenderTargetView* m_pRenderTargetView;    <span class=\"comment\">// Active color target</span></div>\n\
<div class=\"line\">    ID3D11DepthStencilView* m_pDepthStencilView;    <span class=\"comment\">// Active depth target</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// DirectX Rasterizer states.</span></div>\n\
<div class=\"line\">    ID3D11RasterizerState*  m_pWireframeRS;</div>\n\
<div class=\"line\">    ID3D11RasterizerState*  m_pNormalRS;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MHWRender::MRasterizerState</a> *m_apiWireframeRS;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MHWRender::MRasterizerState</a> *m_apiNormalRS;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// DirectX Sampler states</span></div>\n\
<div class=\"line\">    ID3D11SamplerState* m_pSamplerState;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html\">MHWRender::MSamplerState</a>* m_apiSamplerState;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// DirectX bounding box information</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>BoundsVertex</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        XMFLOAT3    fPosition;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>BoundsConstants</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        XMMATRIX    fWVP;</div>\n\
<div class=\"line\">        XMFLOAT3    fDiffuseMaterial;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    ID3D11Buffer*           m_pBoundsVertexBuffer;</div>\n\
<div class=\"line\">    ID3D11Buffer*           m_pBoundsIndexBuffer;</div>\n\
<div class=\"line\">    ID3D11Buffer*           m_pPlaneVertexBuffer;</div>\n\
<div class=\"line\">    ID3D11Buffer*           m_pPlaneIndexBuffer;</div>\n\
<div class=\"line\">    ID3D11Buffer*           m_pBoundsConstantBuffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// DirectX plane information</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>PlaneVertex</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        XMFLOAT3    fPosition;</div>\n\
<div class=\"line\">        XMFLOAT2    fUV;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>FixedFunctionConstants</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        XMMATRIX    wvIT;</div>\n\
<div class=\"line\">        XMMATRIX    wvp;</div>\n\
<div class=\"line\">        XMMATRIX    wv;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        XMFLOAT4    lightDir;</div>\n\
<div class=\"line\">        XMFLOAT4    lightColor;</div>\n\
<div class=\"line\">        XMFLOAT4    ambientLight;</div>\n\
<div class=\"line\">        XMFLOAT4    diffuseMaterial;</div>\n\
<div class=\"line\">        XMFLOAT4    specularColor;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>       diffuseCoeff;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>       shininess;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>       transparency;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    ID3D11Buffer*           m_pFixedFunctionConstantBuffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Temporary matrices</span></div>\n\
<div class=\"line\">    XMMATRIX                m_currentViewMatrix;</div>\n\
<div class=\"line\">    XMMATRIX                m_currentProjectionMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Surface effect item</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>SurfaceEffectItem</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ID3D11VertexShader* fVertexShader;</div>\n\
<div class=\"line\">        ID3D11PixelShader*  fPixelShader;</div>\n\
<div class=\"line\">        ID3D11InputLayout*  fInputLayout;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;std::string, SurfaceEffectItem*&gt; SurfaceEffectItemList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// List of surface effect items (by name)</span></div>\n\
<div class=\"line\">    SurfaceEffectItemList   m_SurfaceEffectItemList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Sample image</span></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>*    m_apiTexture;</div>\n\
<div class=\"line\">    ID3D11ShaderResourceView *m_pTextureView;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MCustomSceneDraw(<span class=\"keywordtype\">bool</span> deviceIsGL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mDeviceIsGL = deviceIsGL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_pD3DDevice = NULL;</div>\n\
<div class=\"line\">        m_pRenderTargetView = NULL;</div>\n\
<div class=\"line\">        m_pDepthStencilView = NULL;</div>\n\
<div class=\"line\">        m_pD3DDeviceContext = NULL;</div>\n\
<div class=\"line\">        m_pBoundsVertexBuffer = NULL;</div>\n\
<div class=\"line\">        m_pBoundsIndexBuffer = NULL;</div>\n\
<div class=\"line\">        m_pPlaneVertexBuffer = NULL;</div>\n\
<div class=\"line\">        m_pPlaneIndexBuffer = NULL;</div>\n\
<div class=\"line\">        m_pBoundsConstantBuffer = NULL;</div>\n\
<div class=\"line\">        m_pFixedFunctionConstantBuffer = NULL;</div>\n\
<div class=\"line\">        m_pNormalRS = NULL;</div>\n\
<div class=\"line\">        m_pWireframeRS = NULL;</div>\n\
<div class=\"line\">        m_apiNormalRS = NULL;</div>\n\
<div class=\"line\">        m_apiWireframeRS = NULL;</div>\n\
<div class=\"line\">        m_pSamplerState = NULL;</div>\n\
<div class=\"line\">        m_apiSamplerState = NULL;</div>\n\
<div class=\"line\">        m_apiTexture = NULL;</div>\n\
<div class=\"line\">        m_pTextureView = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( mDeviceIsGL )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the function table to perform commands from</span></div>\n\
<div class=\"line\">            mGLFT = <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html#a93fef222f7278c123e8df750f7f0ea5b\">MHardwareRenderer::theRenderer</a>()-&gt;<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html#ae661000714d15915ccc58949842f4c57\">glFunctionTable</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the device and device context</span></div>\n\
<div class=\"line\">            <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *theRenderer = <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (theRenderer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_pD3DDevice = (ID3D11Device *)theRenderer-&gt;<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a637ec8cc3cc0e631f1d134f6891f89f0\">GPUDeviceHandle</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_pD3DDevice)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    m_pD3DDevice-&gt;GetImmediateContext( &amp;m_pD3DDeviceContext );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (m_pD3DDeviceContext)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        createGeometryBuffers();</div>\n\
<div class=\"line\">                        createTextures();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Load effects</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> shaderLocation(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(getenv(<span class=\"stringliteral\">&quot;MAYA_LOCATION&quot;</span>)) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\\\devkit\\\\plug-ins&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        D3D11_INPUT_ELEMENT_DESC layout[] =</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            { <span class=\"stringliteral\">&quot;POSITION&quot;</span>, 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },</div>\n\
<div class=\"line\">                        };</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> numLayoutElements = <span class=\"keyword\">sizeof</span> layout/<span class=\"keyword\">sizeof</span> layout[0];</div>\n\
<div class=\"line\">                        initializeEffect( shaderLocation, <span class=\"stringliteral\">&quot;Maya_unlit1&quot;</span>,  <span class=\"stringliteral\">&quot;mainVS&quot;</span>, <span class=\"stringliteral\">&quot;mainPS&quot;</span>, layout, numLayoutElements );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        D3D11_INPUT_ELEMENT_DESC layoutUV[] =</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            { <span class=\"stringliteral\">&quot;POSITION&quot;</span>, 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },</div>\n\
<div class=\"line\">                            { <span class=\"stringliteral\">&quot;TEXCOORD&quot;</span>, 0, DXGI_FORMAT_R32G32_FLOAT, 0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0 },</div>\n\
<div class=\"line\">                        };</div>\n\
<div class=\"line\">                        numLayoutElements = <span class=\"keyword\">sizeof</span> layoutUV/<span class=\"keyword\">sizeof</span> layoutUV[0];</div>\n\
<div class=\"line\">                        initializeEffect( shaderLocation, <span class=\"stringliteral\">&quot;Maya_unlitUV&quot;</span>,  <span class=\"stringliteral\">&quot;mainVS&quot;</span>, <span class=\"stringliteral\">&quot;mainPS&quot;</span>, layoutUV, numLayoutElements );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ~MCustomSceneDraw()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mGLFT = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pNormalRS )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// If no api object, then was created locally and must release</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!m_apiNormalRS)</div>\n\
<div class=\"line\">                m_pNormalRS-&gt;Release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5c1115e1c741c78d1c19909c7b4d8db9\">MHWRender::MStateManager::releaseRasterizerState</a>(m_apiNormalRS);</div>\n\
<div class=\"line\">            m_apiNormalRS = 0;</div>\n\
<div class=\"line\">            m_pNormalRS = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pWireframeRS )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// If no api object, then was created locally and must release</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!m_apiWireframeRS)</div>\n\
<div class=\"line\">                m_pWireframeRS-&gt;Release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5c1115e1c741c78d1c19909c7b4d8db9\">MHWRender::MStateManager::releaseRasterizerState</a>(m_apiWireframeRS);</div>\n\
<div class=\"line\">            m_apiWireframeRS = 0;</div>\n\
<div class=\"line\">            m_pWireframeRS = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_pSamplerState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!m_apiSamplerState)</div>\n\
<div class=\"line\">                m_pSamplerState-&gt;Release();</div>\n\
<div class=\"line\">            m_pSamplerState = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_apiSamplerState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1024724a856ce82cecfaf79bc0c6d6c4\">MHWRender::MStateManager::releaseSamplerState</a>(m_apiSamplerState);</div>\n\
<div class=\"line\">            m_apiSamplerState = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pBoundsVertexBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pBoundsVertexBuffer-&gt;Release();</div>\n\
<div class=\"line\">            m_pBoundsVertexBuffer = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pBoundsIndexBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pBoundsIndexBuffer-&gt;Release();</div>\n\
<div class=\"line\">            m_pBoundsIndexBuffer = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pPlaneVertexBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pPlaneVertexBuffer-&gt;Release();</div>\n\
<div class=\"line\">            m_pPlaneVertexBuffer = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pPlaneIndexBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pPlaneIndexBuffer-&gt;Release();</div>\n\
<div class=\"line\">            m_pPlaneIndexBuffer = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pBoundsConstantBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pBoundsConstantBuffer-&gt;Release();</div>\n\
<div class=\"line\">            m_pBoundsConstantBuffer = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pFixedFunctionConstantBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pFixedFunctionConstantBuffer-&gt;Release();</div>\n\
<div class=\"line\">            m_pFixedFunctionConstantBuffer = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_pTextureView)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!m_apiTexture)</div>\n\
<div class=\"line\">                m_pTextureView-&gt;Release();</div>\n\
<div class=\"line\">            m_pTextureView = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_apiTexture)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureManager = renderer-&gt;<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (textureManager)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    textureManager-&gt;<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(m_apiTexture);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            m_apiTexture = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_pD3DDevice = NULL;</div>\n\
<div class=\"line\">        m_pD3DDeviceContext = NULL;</div>\n\
<div class=\"line\">        m_pRenderTargetView = NULL;</div>\n\
<div class=\"line\">        m_pDepthStencilView = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create states objects. Should be obtained from MStateManager...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> createStateObjects( <span class=\"keyword\">const</span> <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> &amp; drawContext )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Return if already created the states</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_pNormalRS)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        HRESULT hr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateManager = drawContext.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a9eed5300933693e76ad77822b4feb37f\">getStateManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> createStatesViaAPI = (stateManager != NULL);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (createStatesViaAPI)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html\">MHWRender::MRasterizerStateDesc</a> rasterizerStateDesc;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a46fb5863fb478c76999b012605b7809e\">fillMode</a> = <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a75a9acd74effffae38daed55136b0980ab6cc17dcad5774f5e5c959bbaaaac71c\">MHWRender::MRasterizerState::kFillSolid</a>;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a5a9f0fe3d49830803b7a25440b2d19a6\">cullMode</a> = <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8aaa6657ab67920a4dcc6e0a30044cc5487\">MHWRender::MRasterizerState::kCullNone</a>;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a6fc1637df72a635bc7c013d57b2398ef\">frontCounterClockwise</a> = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a0c22bd503abc493c0b54ba8a7593a6d8\">depthBiasIsFloat</a> = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a2894fe1122185e1e681e79ab7cfeb8d6\">depthBias</a> = 0.0f;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#adb2fb4e9b381d418954f7913ba6bbc91\">depthBiasClamp</a> = 0.0f;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a7d6c8cc49b0374cb87605d24acacd4e2\">slopeScaledDepthBias</a> = 0.0f;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a19c867eb902deeadc492fa246f662b29\">depthClipEnable</a> = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a52b4cdd20f7f4847f7a3fdec28c2565c\">scissorEnable</a> = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a0014b3f735f6f94469377ca0ce55c199\">multiSampleEnable</a> = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            rasterizerStateDesc.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a5e83624750785537c8a23e42750703ce\">antialiasedLineEnable</a> = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            m_apiNormalRS = stateManager-&gt;<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1f43e6ab99a6e2e5817df7bb1a0c69e6\">acquireRasterizerState</a>( rasterizerStateDesc );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (m_apiNormalRS)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_pNormalRS = (ID3D11RasterizerState *)m_apiNormalRS-&gt;<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#ad7bcab0d1707ef0da22fc72ada62c40e\">resourceHandle</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5c1115e1c741c78d1c19909c7b4d8db9\">MHWRender::MStateManager::releaseRasterizerState</a>(m_apiNormalRS);</div>\n\
<div class=\"line\">                m_apiNormalRS = NULL;</div>\n\
<div class=\"line\">                createStatesViaAPI = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (createStatesViaAPI)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                rasterizerStateDesc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a46fb5863fb478c76999b012605b7809e\">fillMode</a> = <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a75a9acd74effffae38daed55136b0980a93f7bebc1ac031198fe7659965168fbc\">MHWRender::MRasterizerState::kFillWireFrame</a>;</div>\n\
<div class=\"line\">                m_apiWireframeRS = stateManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1f43e6ab99a6e2e5817df7bb1a0c69e6\">acquireRasterizerState</a>( rasterizerStateDesc );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_apiWireframeRS)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    m_pWireframeRS = (ID3D11RasterizerState *)m_apiWireframeRS-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#ad7bcab0d1707ef0da22fc72ada62c40e\">resourceHandle</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> m_pWireframeRS;</div>\n\
<div class=\"line\">                    m_pWireframeRS = NULL;</div>\n\
<div class=\"line\">                    createStatesViaAPI = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html\">MHWRender::MSamplerStateDesc</a> sd;</div>\n\
<div class=\"line\">            m_apiSamplerState = stateManager-&gt;<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a6277961291d22bd82a852c0b9c905570\">acquireSamplerState</a>( sd );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (m_apiSamplerState)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_pSamplerState = (ID3D11SamplerState* )m_apiSamplerState-&gt;<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ad7bcab0d1707ef0da22fc72ada62c40e\">resourceHandle</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!createStatesViaAPI)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            D3D11_RASTERIZER_DESC rd;</div>\n\
<div class=\"line\">            rd.FillMode = D3D11_FILL_SOLID;</div>\n\
<div class=\"line\">            rd.CullMode = D3D11_CULL_BACK;</div>\n\
<div class=\"line\">            rd.FrontCounterClockwise = TRUE;</div>\n\
<div class=\"line\">            rd.DepthBias = 0;</div>\n\
<div class=\"line\">            rd.SlopeScaledDepthBias = 0.0f;</div>\n\
<div class=\"line\">            rd.DepthBiasClamp = 0.0f;</div>\n\
<div class=\"line\">            rd.DepthClipEnable = TRUE;</div>\n\
<div class=\"line\">            rd.ScissorEnable = FALSE;</div>\n\
<div class=\"line\">            rd.MultisampleEnable = FALSE;</div>\n\
<div class=\"line\">            rd.AntialiasedLineEnable = FALSE;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            hr = m_pD3DDevice-&gt;CreateRasterizerState( &amp;rd, &amp;m_pNormalRS );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            rd.FillMode = D3D11_FILL_WIREFRAME;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            hr = m_pD3DDevice-&gt;CreateRasterizerState( &amp;rd, &amp;m_pWireframeRS );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Utility to compile a shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    HRESULT compileShaderFromFile( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* szFileName, LPCSTR szEntryPoint, LPCSTR szShaderModel, ID3DBlob** ppBlobOut )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        HRESULT hr = S_OK;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef D3DCOMPILE_ENABLE_STRICTNESS</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// allow the plug-in to compile against the Maya 2011 default DXSDK version (August 2009)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define D3DCOMPILE_ENABLE_STRICTNESS D3D10_SHADER_ENABLE_STRICTNESS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define D3DCOMPILE_DEBUG D3D10_SHADER_DEBUG</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        DWORD dwShaderFlags = D3DCOMPILE_ENABLE_STRICTNESS;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined( DEBUG ) || defined( _DEBUG )</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the D3DCOMPILE_DEBUG flag to embed debug information in the shaders.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Setting this flag improves the shader debugging experience, but still allows</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the shaders to be optimized and to run exactly the way they will run in</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the release configuration of this program.</span></div>\n\
<div class=\"line\">        dwShaderFlags |= D3DCOMPILE_DEBUG;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ID3DBlob* pErrorBlob;</div>\n\
<div class=\"line\">        hr = D3DX11CompileFromFile( szFileName, NULL, NULL, szEntryPoint, szShaderModel,</div>\n\
<div class=\"line\">            dwShaderFlags, 0, NULL, ppBlobOut, &amp;pErrorBlob, NULL );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( FAILED(hr) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( pErrorBlob != NULL )</div>\n\
<div class=\"line\">                <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>( (<span class=\"keywordtype\">char</span>*)pErrorBlob-&gt;GetBufferPointer() );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( pErrorBlob ) pErrorBlob-&gt;Release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> hr;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( pErrorBlob ) pErrorBlob-&gt;Release();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> S_OK;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize an effect</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> initializeEffect( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectsLocation,</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName,</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; vsName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; psName,</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> D3D11_INPUT_ELEMENT_DESC* layout, <span class=\"keywordtype\">int</span> numLayoutElements )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        HRESULT hres;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> effectLocation = effectsLocation + <span class=\"stringliteral\">&quot;\\\\&quot;</span> + effectName + <span class=\"stringliteral\">&quot;.hlsl&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set up vertex shader</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        ID3DBlob* pVSBlob = NULL;</div>\n\
<div class=\"line\">        hres = compileShaderFromFile( effectLocation.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), vsName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"stringliteral\">&quot;vs_5_0&quot;</span>, &amp;pVSBlob );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hres))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Failed to compile vertex shader %s in file: %s\\n&quot;</span>, vsName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ID3D11VertexShader* pVertexShader = NULL;</div>\n\
<div class=\"line\">        hres = m_pD3DDevice-&gt;CreateVertexShader( pVSBlob-&gt;GetBufferPointer(), pVSBlob-&gt;GetBufferSize(), NULL, &amp;pVertexShader );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hres))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Failed to create vertex shader %s in file: %s\\n&quot;</span>, vsName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            pVSBlob-&gt;Release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ID3D11InputLayout* pVertexLayout = NULL;</div>\n\
<div class=\"line\">        hres = m_pD3DDevice-&gt;CreateInputLayout( layout, numLayoutElements, pVSBlob-&gt;GetBufferPointer(), pVSBlob-&gt;GetBufferSize(), &amp;pVertexLayout );</div>\n\
<div class=\"line\">        pVSBlob-&gt;Release();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hres))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Failed to create input layout for file: %s\\n&quot;</span>, effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set up pixel shader</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        ID3DBlob* pPSBlob = NULL;</div>\n\
<div class=\"line\">        hres = compileShaderFromFile( effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), psName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"stringliteral\">&quot;ps_5_0&quot;</span>, &amp;pPSBlob );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hres))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Failed to compile pixel shader %s in file: %s\\n&quot;</span>, psName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            pVertexShader-&gt;Release();</div>\n\
<div class=\"line\">            pVertexLayout-&gt;Release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ID3D11PixelShader* pPixelShader = NULL;</div>\n\
<div class=\"line\">        hres = m_pD3DDevice-&gt;CreatePixelShader( pPSBlob-&gt;GetBufferPointer(), pPSBlob-&gt;GetBufferSize(), NULL, &amp;pPixelShader );</div>\n\
<div class=\"line\">        pPSBlob-&gt;Release();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hres))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Failed to create pixel shader %s in file: %s\\n&quot;</span>, psName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            pVertexShader-&gt;Release();</div>\n\
<div class=\"line\">            pVertexLayout-&gt;Release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a new effect item</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        SurfaceEffectItem *pei = <span class=\"keyword\">new</span> SurfaceEffectItem;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pei)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            pei-&gt;fVertexShader = pVertexShader;</div>\n\
<div class=\"line\">            pei-&gt;fPixelShader = pPixelShader;</div>\n\
<div class=\"line\">            pei-&gt;fInputLayout = pVertexLayout;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Created shader: %s\\n&quot;</span>, effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            m_SurfaceEffectItemList[ effectName.asChar() ] = pei;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Update color and depth target pointers for DX</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDXColorDepthTargets( <span class=\"keywordtype\">void</span> *colorTarget, <span class=\"keywordtype\">void</span> *depthTarget )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pRenderTargetView = (ID3D11RenderTargetView* )colorTarget;</div>\n\
<div class=\"line\">        m_pDepthStencilView = (ID3D11DepthStencilView* )depthTarget;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update current view and projection matrices for DX</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setViewProjectionMatrices( <span class=\"keyword\">const</span> <a name=\"_a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp; view, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp; projection )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_currentViewMatrix = XMMATRIX( (<span class=\"keywordtype\">float</span>)view.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][3]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_currentProjectionMatrix = XMMATRIX( (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][3]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create textures required for drawing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> createTextures()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_pTextureView)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> imageLocation( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(getenv(<span class=\"stringliteral\">&quot;MAYA_LOCATION&quot;</span>)) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\\\devkit\\\\plug-ins&quot;</span>) );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sampleImageName( <span class=\"stringliteral\">&quot;directx11.jpg&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> useAPItoLoad = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> loaded = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (useAPItoLoad)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!theRenderer)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureMgr = theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!textureMgr)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set up a search location</span></div>\n\
<div class=\"line\">            textureMgr-&gt;<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a96a66b439082bd98a67d92eeac95f6fe\">addImagePath</a>( imageLocation );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Load in a sample image</span></div>\n\
<div class=\"line\">            m_apiTexture = textureMgr-&gt;<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a04aa3cfef217948abc8edd0f19565f95\">acquireTexture</a>( sampleImageName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (m_apiTexture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_pTextureView = (ID3D11ShaderResourceView *)m_apiTexture-&gt;<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html#ad7bcab0d1707ef0da22fc72ada62c40e\">resourceHandle</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_pTextureView)</div>\n\
<div class=\"line\">                    loaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> absoluteFileName( imageLocation + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\\\&quot;</span>) + sampleImageName );</div>\n\
<div class=\"line\">            HRESULT hr = D3DX11CreateShaderResourceViewFromFile(</div>\n\
<div class=\"line\">                m_pD3DDevice,</div>\n\
<div class=\"line\">                absoluteFileName.asChar(),</div>\n\
<div class=\"line\">                <span class=\"comment\">/* D3DX11_IMAGE_LOAD_INFO * */</span> NULL,</div>\n\
<div class=\"line\">                <span class=\"comment\">/* ID3DX11ThreadPump * */</span> NULL,</div>\n\
<div class=\"line\">                &amp;m_pTextureView,</div>\n\
<div class=\"line\">                NULL);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hr == S_OK)</div>\n\
<div class=\"line\">                loaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (loaded)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            D3D11_SHADER_RESOURCE_VIEW_DESC desc;</div>\n\
<div class=\"line\">            m_pTextureView-&gt;GetDesc( &amp;desc );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dimension = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span>( desc.ViewDimension )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D11_SRV_DIMENSION_TEXTURE1D :</div>\n\
<div class=\"line\">                dimension = 1;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D11_SRV_DIMENSION_TEXTURE2D :</div>\n\
<div class=\"line\">                dimension = 2;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D11_SRV_DIMENSION_TEXTURE2DMS :</div>\n\
<div class=\"line\">                dimension = 2;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D11_SRV_DIMENSION_TEXTURE3D :</div>\n\
<div class=\"line\">                dimension = 3;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> absoluteFileName( imageLocation + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\\\&quot;</span>) + sampleImageName );</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;Loaded in DX a %dD texture %s.\\n&quot;</span>, dimension, absoluteFileName.asChar());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> loaded;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create buffers required for drawing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> createGeometryBuffers()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        HRESULT hr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create vertex buffer</span></div>\n\
<div class=\"line\">        BoundsVertex vertices[] =</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            { XMFLOAT3( -1.0f, -1.0f, -1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3( -1.0f, -1.0f,  1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3( -1.0f,  1.0f, -1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3( -1.0f,  1.0f,  1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3(  1.0f, -1.0f, -1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3(  1.0f, -1.0f,  1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3(  1.0f,  1.0f, -1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3(  1.0f,  1.0f,  1.0f ) },</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        D3D11_BUFFER_DESC bd;</div>\n\
<div class=\"line\">        ZeroMemory( &amp;bd, <span class=\"keyword\">sizeof</span>(bd) );</div>\n\
<div class=\"line\">        bd.Usage = D3D11_USAGE_DEFAULT; <span class=\"comment\">// D3D11_USAGE_IMMUTABLE</span></div>\n\
<div class=\"line\">        bd.ByteWidth = <span class=\"keyword\">sizeof</span>( BoundsVertex ) * 8;</div>\n\
<div class=\"line\">        bd.BindFlags = D3D11_BIND_VERTEX_BUFFER;</div>\n\
<div class=\"line\">        bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        D3D11_SUBRESOURCE_DATA InitData;</div>\n\
<div class=\"line\">        ZeroMemory( &amp;InitData, <span class=\"keyword\">sizeof</span>(InitData) );</div>\n\
<div class=\"line\">        InitData.pSysMem = vertices;</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, &amp;InitData, &amp;m_pBoundsVertexBuffer );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create index buffer</span></div>\n\
<div class=\"line\">        WORD indices[] =</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            0, 1,</div>\n\
<div class=\"line\">            1, 3,</div>\n\
<div class=\"line\">            3, 2,</div>\n\
<div class=\"line\">            2, 0,</div>\n\
<div class=\"line\">            4, 5,</div>\n\
<div class=\"line\">            5, 7,</div>\n\
<div class=\"line\">            7, 6,</div>\n\
<div class=\"line\">            6, 4,</div>\n\
<div class=\"line\">            0, 4,</div>\n\
<div class=\"line\">            1, 5,</div>\n\
<div class=\"line\">            2, 6,</div>\n\
<div class=\"line\">            3, 7,</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        bd.Usage = D3D11_USAGE_DEFAULT; <span class=\"comment\">// D3D11_USAGE_IMMUTABLE</span></div>\n\
<div class=\"line\">        bd.ByteWidth = <span class=\"keyword\">sizeof</span>( WORD ) * 24;</div>\n\
<div class=\"line\">        bd.BindFlags = D3D11_BIND_INDEX_BUFFER;</div>\n\
<div class=\"line\">        bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">        InitData.pSysMem = indices;</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, &amp;InitData, &amp;m_pBoundsIndexBuffer );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        PlaneVertex planeVertices[] =</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            { XMFLOAT3( -1.0f, 0.0f, -1.0f ), XMFLOAT2( 0.0f, 0.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3( -1.0f, 0.0f, 1.0f ), XMFLOAT2( 0.0f, 1.0f )},</div>\n\
<div class=\"line\">            { XMFLOAT3(  1.0f,  0.0f, 1.0f ), XMFLOAT2( 1.0f, 1.0f ) },</div>\n\
<div class=\"line\">            { XMFLOAT3( 1.0f,  0.0f, -1.0f ), XMFLOAT2( 1.0f, 0.0f ) },</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ZeroMemory( &amp;bd, <span class=\"keyword\">sizeof</span>(bd) );</div>\n\
<div class=\"line\">        bd.Usage = D3D11_USAGE_DEFAULT; <span class=\"comment\">// D3D11_USAGE_IMMUTABLE</span></div>\n\
<div class=\"line\">        bd.ByteWidth = <span class=\"keyword\">sizeof</span>( PlaneVertex ) * 4;</div>\n\
<div class=\"line\">        bd.BindFlags = D3D11_BIND_VERTEX_BUFFER;</div>\n\
<div class=\"line\">        bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ZeroMemory( &amp;InitData, <span class=\"keyword\">sizeof</span>(InitData) );</div>\n\
<div class=\"line\">        InitData.pSysMem = planeVertices;</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, &amp;InitData, &amp;m_pPlaneVertexBuffer );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        WORD planeIndices[] =</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            0, 1, 2,</div>\n\
<div class=\"line\">            0, 2, 3</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\">        bd.Usage = D3D11_USAGE_DEFAULT; <span class=\"comment\">// D3D11_USAGE_IMMUTABLE</span></div>\n\
<div class=\"line\">        bd.ByteWidth = <span class=\"keyword\">sizeof</span>( WORD ) * 6;</div>\n\
<div class=\"line\">        bd.BindFlags = D3D11_BIND_INDEX_BUFFER;</div>\n\
<div class=\"line\">        bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">        InitData.pSysMem = planeIndices;</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, &amp;InitData, &amp;m_pPlaneIndexBuffer );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create constant buffer</span></div>\n\
<div class=\"line\">        bd.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">        bd.ByteWidth = <span class=\"keyword\">sizeof</span>( BoundsConstants );</div>\n\
<div class=\"line\">        bd.BindFlags = D3D11_BIND_CONSTANT_BUFFER;</div>\n\
<div class=\"line\">        bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, NULL, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create constants for fixed function shading</span></div>\n\
<div class=\"line\">        bd.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">        bd.ByteWidth = <span class=\"keyword\">sizeof</span>( FixedFunctionConstants );</div>\n\
<div class=\"line\">        bd.BindFlags = D3D11_BIND_CONSTANT_BUFFER;</div>\n\
<div class=\"line\">        bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, NULL, &amp;m_pFixedFunctionConstantBuffer );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw a bounding box (OpenGL version)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> drawBoundsGL( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;dagPath,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> <a name=\"_a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> &amp;box,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">float</span> boundsColor[3])</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mDeviceIsGL)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>  matrix = dagPath.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#afb30f64680f5aa038da428a79579d08c\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\">        <a name=\"_a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>  minPt = box.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>  maxPt = box.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> bottomLeftFront[3] =     { minPt.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, minPt.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, minPt.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> topLeftFront[3] =        { minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> bottomRightFront[3] =    { maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> topRightFront[3] =       { maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> bottomLeftBack[3] =      { minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> topLeftBack[3] =         { minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> bottomRightBack[3] =     { maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> topRightBack[3] =        { maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a61\"></a>glColor3f( boundsColor[0], boundsColor[1], boundsColor[2] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a62\"></a>glMatrixMode( MGL_MODELVIEW );</div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a63\"></a>glPushMatrix();</div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a64\"></a>glMultMatrixd( &amp;(matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0]) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a65\"></a>glBegin(MGL_LINE_STRIP);</div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a66\"></a>glVertex3dv( bottomLeftFront );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( bottomLeftBack );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( topLeftBack );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( topLeftFront );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( bottomLeftFront );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( bottomRightFront );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( bottomRightBack);</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( topRightBack );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( topRightFront );</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv( bottomRightFront );</div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a67\"></a>glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mGLFT-&gt;glBegin(MGL_LINES);</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv(bottomLeftBack);</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv(bottomRightBack);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv(topLeftBack);</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv(topRightBack);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv(topLeftFront);</div>\n\
<div class=\"line\">        mGLFT-&gt;glVertex3dv(topRightFront);</div>\n\
<div class=\"line\">        mGLFT-&gt;glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mGLFT-&gt;<a name=\"a68\"></a>glPopMatrix();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> drawPlaneDX(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> &amp; drawContext)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDeviceIsGL)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!m_pPlaneVertexBuffer || !m_pPlaneIndexBuffer ||</div>\n\
<div class=\"line\">            !m_pBoundsConstantBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateManager = drawContext.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a9eed5300933693e76ad77822b4feb37f\">getStateManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stateManager)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            stateManager-&gt;<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>( m_apiNormalRS );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Scale plane to size 10</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        XMMATRIX mat( 4.0f, 0.0f,   0.0f, 0.0f,</div>\n\
<div class=\"line\">                        0.0f, 4.0f, 0.0f, 0.0f,</div>\n\
<div class=\"line\">                        0.0f, 0.0f, 4.f, 0.0f,</div>\n\
<div class=\"line\">                        0.0f, 0.0f, 0.0f, 1.0f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set vertex buffer</span></div>\n\
<div class=\"line\">        UINT stride = <span class=\"keyword\">sizeof</span>( PlaneVertex );</div>\n\
<div class=\"line\">        UINT offset = 0;</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetVertexBuffers( 0, 1, &amp;m_pPlaneVertexBuffer, &amp;stride, &amp;offset );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set index buffer</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetIndexBuffer( m_pPlaneIndexBuffer, DXGI_FORMAT_R16_UINT, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set primitive topology</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetPrimitiveTopology( D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set constant buffer</span></div>\n\
<div class=\"line\">        BoundsConstants cb;</div>\n\
<div class=\"line\">        cb.fWVP = XMMatrixTranspose( mat * m_currentViewMatrix * m_currentProjectionMatrix );</div>\n\
<div class=\"line\">        cb.fDiffuseMaterial = XMFLOAT3( 1.0f, 1.0f, 1.0f);</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;UpdateSubresource( m_pBoundsConstantBuffer, 0, NULL, &amp;cb, 0, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the shader</span></div>\n\
<div class=\"line\">        SurfaceEffectItemList::const_iterator it = m_SurfaceEffectItemList.find( <span class=\"stringliteral\">&quot;Maya_unlitUV&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( it == m_SurfaceEffectItemList.end() )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SurfaceEffectItem* sei = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Bind a shader</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;VSSetShader( sei-&gt;fVertexShader, NULL, 0 );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;VSSetConstantBuffers( 0, 1, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetInputLayout( sei-&gt;fInputLayout );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;PSSetShader( sei-&gt;fPixelShader, NULL, 0 );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;PSSetConstantBuffers( 0, 1, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Bind a texture</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_pSamplerState &amp;&amp; m_pTextureView)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pD3DDeviceContext-&gt;PSSetSamplers( 0, 1, &amp;m_pSamplerState );</div>\n\
<div class=\"line\">            m_pD3DDeviceContext-&gt;PSSetShaderResources( 0, 1, &amp;m_pTextureView );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// draw</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;DrawIndexed( 6, 0, 0 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw a bounding box (DX version). This code is in progress</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> drawBoundsDX(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> &amp; drawContext,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;dagPath,</div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> &amp;box,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">float</span> boundsColor[3])</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDeviceIsGL)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!m_pBoundsVertexBuffer || !m_pBoundsIndexBuffer ||</div>\n\
<div class=\"line\">            !m_pBoundsConstantBuffer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set rasterizer state.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// This code demonstrates how the API wrapper for a rasterizer state</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// can be used to perform the same functionality as</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// directly calling int the device context.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Using the state manager means that state will be tracked interally</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and will reduce the frequency of redundant state changes</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> useDrawContextToSetState = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <a name=\"_a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (useDrawContextToSetState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateManager = drawContext.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a9eed5300933693e76ad77822b4feb37f\">getStateManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stateManager)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                status = stateManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>( m_apiWireframeRS );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pD3DDeviceContext-&gt;RSSetState( m_pWireframeRS );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>  matrix = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#afb30f64680f5aa038da428a79579d08c\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Transform from object to world space</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        XMMATRIX mat = XMMATRIX</div>\n\
<div class=\"line\">            (</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][3],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][3]</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Adjust the unit cube to the bounds</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>  minPt = box.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>  maxPt = box.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> minVal[3] = { (float)minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, (<span class=\"keywordtype\">float</span>)minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, (float)minPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> maxVal[3] = { (float)maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, (<span class=\"keywordtype\">float</span>)maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, (float)maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">        XMMATRIX bounds( 0.5f*(maxVal[0]-minVal[0]), 0.0f,                       0.0f,                          0.0f,</div>\n\
<div class=\"line\">                        0.0f,                        0.5f*(maxVal[1]-minVal[1]), 0.0f,                          0.0f,</div>\n\
<div class=\"line\">                        0.0f,                        0.0f,                       0.5f*(maxVal[2]-minVal[2]),    0.0f,</div>\n\
<div class=\"line\">                        0.5f*(maxVal[0]+minVal[0]), 0.5f*(maxVal[1]+minVal[1]), 0.5f*(maxVal[2]+minVal[2]), 1.0f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set vertex buffer</span></div>\n\
<div class=\"line\">        UINT stride = <span class=\"keyword\">sizeof</span>( BoundsVertex );</div>\n\
<div class=\"line\">        UINT offset = 0;</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetVertexBuffers( 0, 1, &amp;m_pBoundsVertexBuffer, &amp;stride, &amp;offset );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set index buffer</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetIndexBuffer( m_pBoundsIndexBuffer, DXGI_FORMAT_R16_UINT, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set constant buffer</span></div>\n\
<div class=\"line\">        BoundsConstants cb;</div>\n\
<div class=\"line\">        cb.fWVP = XMMatrixTranspose( bounds * mat * m_currentViewMatrix * m_currentProjectionMatrix );</div>\n\
<div class=\"line\">        cb.fDiffuseMaterial = XMFLOAT3( boundsColor[0], boundsColor[1], boundsColor[2] );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;UpdateSubresource( m_pBoundsConstantBuffer, 0, NULL, &amp;cb, 0, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set primitive topology</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetPrimitiveTopology( D3D11_PRIMITIVE_TOPOLOGY_LINELIST );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get shader</span></div>\n\
<div class=\"line\">        SurfaceEffectItemList::const_iterator it = m_SurfaceEffectItemList.find( <span class=\"stringliteral\">&quot;Maya_unlit1&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( it == m_SurfaceEffectItemList.end() )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SurfaceEffectItem* sei = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// bind shaders</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;VSSetShader( sei-&gt;fVertexShader, NULL, 0 );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;VSSetConstantBuffers( 0, 1, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;IASetInputLayout( sei-&gt;fInputLayout );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;PSSetShader( sei-&gt;fPixelShader, NULL, 0 );</div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;PSSetConstantBuffers( 0, 1, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// draw</span></div>\n\
<div class=\"line\">        m_pD3DDeviceContext-&gt;DrawIndexed( 24, 0, 0 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw a scene full of bounding boxes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> draw(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> &amp; drawContext,</div>\n\
<div class=\"line\">              <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;cameraPath, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> height)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup (GL). Push state and clear the background</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDeviceIsGL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GLenum error;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( (error = mGLFT-&gt;<a name=\"a73\"></a>glGetError()) != MGL_NO_ERROR ) {</div>\n\
<div class=\"line\">                ;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            mGLFT-&gt;<a name=\"a74\"></a>glPushAttrib(MGL_ALL_ATTRIB_BITS);</div>\n\
<div class=\"line\">            mGLFT-&gt;<a name=\"a75\"></a>glPushClientAttrib(MGL_CLIENT_VERTEX_ARRAY_BIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mGLFT-&gt;<a name=\"a76\"></a>glUseProgramObjectARB(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Red for OpenGL</span></div>\n\
<div class=\"line\">            mGLFT-&gt;<a name=\"a77\"></a>glClearColor(0.8f, 0.2f, 0.2f, 0.0f);</div>\n\
<div class=\"line\">            mGLFT-&gt;<a name=\"a78\"></a>glClear(MGL_COLOR_BUFFER_BIT | MGL_DEPTH_BUFFER_BIT);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup (DX). Clear the background</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (m_pD3DDeviceContext)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_pRenderTargetView)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Blue for DX</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> clearColor[4] = { 0.0f, 0.125f, 0.6f, 0.0f };</div>\n\
<div class=\"line\">                    m_pD3DDeviceContext-&gt;ClearRenderTargetView( m_pRenderTargetView, clearColor );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_pDepthStencilView)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    m_pD3DDeviceContext-&gt;ClearDepthStencilView( m_pDepthStencilView,</div>\n\
<div class=\"line\">                        D3D11_CLEAR_DEPTH, 1.0f, 0 );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                drawPlaneDX( drawContext );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!cameraPath.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html\">MDrawTraversal</a> *trav = NULL;</div>\n\
<div class=\"line\">        trav = <span class=\"keyword\">new</span> MSurfaceDrawTraversal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!trav)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trav-&gt;<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#afb2ac0dd09dd73700a4258f091c04a1d\">enableFiltering</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        trav-&gt;<a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a54bc763b89ac8604bfd0a7c88c0044e1\">setFrustum</a>( cameraPath, width, height );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!trav-&gt;<a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a3560c3bd79408c8cd0615889d349c1b3\">frustumValid</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> trav; trav = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        trav-&gt;<a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a5f1630ceda51de2240591c5409cb3790\">traverse</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems = trav-&gt;<a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a890a36866f5602d44153c818f81d8ef5\">numberOfItems</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i=0; i&lt;numItems; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">            trav-&gt;<a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#ad398b50125777b1021b33f16584370a3\">itemPath</a>(i, path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> performBoundsDraw = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Draw surfaces (polys, nurbs, subdivs)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> active = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> templated = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> boundsColor[3] = { 1.0f, 1.0f, 1.0f };</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>) ||</div>\n\
<div class=\"line\">                    path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>) ||</div>\n\
<div class=\"line\">                    path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a305a1a7e615931a31f8d932bb4f3a4c1\">MFn::kSubdiv</a>) )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    performBoundsDraw = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (trav-&gt;<a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a372f897e3c752448f55cf1ab61f2bddf\">itemHasStatus</a>( i, <a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a99fb83031ce9923c84392b4e92f956b5aeb81f2660649dd45dbf8316826c2e96c\">MDrawTraversal::kActiveItem</a> ))</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        active = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (trav-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a372f897e3c752448f55cf1ab61f2bddf\">itemHasStatus</a>( i, <a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a99fb83031ce9923c84392b4e92f956b5a4c661de51d08a364ca2d91c38122e9e6\">MDrawTraversal::kTemplateItem</a> ))</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        boundsColor[0] = 0.2f;</div>\n\
<div class=\"line\">                        boundsColor[1] = 0.2f;</div>\n\
<div class=\"line\">                        boundsColor[2] = 0.2f;</div>\n\
<div class=\"line\">                        templated = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a> ))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            boundsColor[0] = 0.286f;</div>\n\
<div class=\"line\">                            boundsColor[1] = 0.706f;</div>\n\
<div class=\"line\">                            boundsColor[2] = 1.0f;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            boundsColor[0] = 0.486f;</div>\n\
<div class=\"line\">                            boundsColor[1] = 0.306f;</div>\n\
<div class=\"line\">                            boundsColor[2] = 1.0f;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            boundsColor[0] = 0.886f;</div>\n\
<div class=\"line\">                            boundsColor[1] = 0.206f;</div>\n\
<div class=\"line\">                            boundsColor[2] = 1.0f;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Draw bounds</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (performBoundsDraw)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(path);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> box = dagNode.boundingBox();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (mDeviceIsGL)</div>\n\
<div class=\"line\">                        drawBoundsGL( path, box, boundsColor );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        drawBoundsDX( drawContext, path, box, boundsColor );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (trav)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> trav;</div>\n\
<div class=\"line\">            trav = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Cleanup (GL). Pop state</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDeviceIsGL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GLenum error;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( (error = mGLFT-&gt;glGetError()) != GL_NO_ERROR ) {</div>\n\
<div class=\"line\">                ;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            mGLFT-&gt;<a name=\"a90\"></a>glPopAttrib();</div>\n\
<div class=\"line\">            mGLFT-&gt;<a name=\"a91\"></a>glPopClientAttrib();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// Clean (DX). Nothing currently</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Render override classes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Custom user operation. One approach to adding a pre and</span></div>\n\
<div class=\"line\"><span class=\"comment\">    post scene callback. In this approach only 1 operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    is reused twice with internal state as to when it is being</span></div>\n\
<div class=\"line\"><span class=\"comment\">    used. Another approach which may be more suitable for when</span></div>\n\
<div class=\"line\"><span class=\"comment\">    global state is changed is to create 2 instances of this</span></div>\n\
<div class=\"line\"><span class=\"comment\">    operation and keep global state on the override instead of</span></div>\n\
<div class=\"line\"><span class=\"comment\">    locally here.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    The cost of an override is very small so creating more instances</span></div>\n\
<div class=\"line\"><span class=\"comment\">    can provide a clearer and cleaner render loop logic.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>viewRenderUserOperation : <span class=\"keyword\">public</span> <a name=\"_a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_user_render_operation.html\">MHWRender::MUserRenderOperation</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    viewRenderUserOperation(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name)</div>\n\
<div class=\"line\">        : MUserRenderOperation( name )</div>\n\
<div class=\"line\">        , mCustomSceneDraw(NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mTargets[0] = mTargets[1] = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~viewRenderUserOperation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> mCustomSceneDraw;</div>\n\
<div class=\"line\">        mCustomSceneDraw = NULL;</div>\n\
<div class=\"line\">        mTargets[0] = mTargets[1] = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_user_render_operation.html#a15b66dca635fff26069c7b5bbbb1868b\">execute</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> &amp; drawContext )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Example code to find the active override.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// This is not necessary if the operations just keep a reference</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to the override, but this demonstrates how this</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// contextual information can be extracted.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html\">MHWRender::MRenderOverride</a> *overridePtr = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> deviceIsGL = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (theRenderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; overrideName = theRenderer-&gt;<a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a68d4388b5455cb5f8eaa7913d6f8e2d6\">activeRenderOverride</a>();</div>\n\
<div class=\"line\">            overridePtr = theRenderer-&gt;<a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa0cb03754b054ca048e0b9e6265b5e82\">findRenderOverride</a>( overrideName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            deviceIsGL  = theRenderer-&gt;<a name=\"a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aac2a5827e6a0ce3333e62ffa7751ba5e\">drawAPIIsOpenGL</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Draw some addition things after the scene draw</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> drawingInteractive = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <a name=\"_a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> mView;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mPanelName.length() &amp;&amp;</div>\n\
<div class=\"line\">            (<a name=\"a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(mPanelName, mView) == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            drawingInteractive = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the current viewport and scale it relative to that</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> targetW, targetH;</div>\n\
<div class=\"line\">        drawContext.<a name=\"a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a84f8e099a466341238b4b4e40cde4167\">getRenderTargetSize</a>( targetW, targetH );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Some user drawing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> cameraPath;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (drawingInteractive)</div>\n\
<div class=\"line\">            mView.<a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a5e6ea41ec1bab5ed980b2ddffe398a73\">getCamera</a>( cameraPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mCustomSceneDraw)</div>\n\
<div class=\"line\">            mCustomSceneDraw = <span class=\"keyword\">new</span> MCustomSceneDraw( deviceIsGL );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mCustomSceneDraw)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (deviceIsGL)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mCustomSceneDraw-&gt;setDXColorDepthTargets(NULL, NULL);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set targets</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span> *handle1 = mTargets[0] ? mTargets[0]-&gt;resourceHandle() : NULL;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span> *handle2 = mTargets[1] ? mTargets[1]-&gt;resourceHandle() : NULL;</div>\n\
<div class=\"line\">                mCustomSceneDraw-&gt;setDXColorDepthTargets( handle1, handle2 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Set view and projection</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> view =</div>\n\
<div class=\"line\">                    drawContext.<a name=\"a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9aada60cca33133e088ad8ee1bce291878\">MHWRender::MFrameContext::kWorldViewMtx</a> );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> projection =</div>\n\
<div class=\"line\">                    drawContext.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a9bfe03d742b94b682ba896a1597df9f7\">MHWRender::MFrameContext::kProjectionMtx</a> );</div>\n\
<div class=\"line\">                mCustomSceneDraw-&gt;setViewProjectionMatrices( view, projection );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Update state objects</span></div>\n\
<div class=\"line\">                mCustomSceneDraw-&gt;createStateObjects( drawContext );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            mCustomSceneDraw-&gt;draw( drawContext, cameraPath, targetW, targetH );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Camera override</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <a name=\"_a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_camera_override.html\">MHWRender::MCameraOverride</a> * <a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_user_render_operation.html#a12cded4a0f1a20c92ca23771a4c7cf2c\">cameraOverride</a>()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> mView;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mPanelName.length() &amp;&amp;</div>\n\
<div class=\"line\">            (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(mPanelName, mView) == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mView.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a5e6ea41ec1bab5ed980b2ddffe398a73\">getCamera</a>( mCameraOverride.mCameraPath );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> &amp;mCameraOverride;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Target override</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a name=\"_a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* <span class=\"keyword\">const</span>* <a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html#a6e61af973ca8990c8c1a389f60a31798\">targetOverrideList</a>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp;listSize)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargets[0] &amp;&amp; mTargets[1])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            listSize = 2;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> &amp;mTargets[0];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setRenderTarget(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* val)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (i&lt;2)</div>\n\
<div class=\"line\">            mTargets[i] = val;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; panelName()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mPanelName;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setPanelName( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; name )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mPanelName.<a name=\"a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>( name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mPanelName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_camera_override.html\">MHWRender::MCameraOverride</a> mCameraOverride;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* mTargets[2];</div>\n\
<div class=\"line\">    MCustomSceneDraw *mCustomSceneDraw;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Custom present target operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>viewRenderPresentTarget : <span class=\"keyword\">public</span> <a name=\"_a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_present_target.html\">MHWRender::MPresentTarget</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    viewRenderPresentTarget(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name)</div>\n\
<div class=\"line\">    : MPresentTarget( name )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mTargets[0] = mTargets[1] = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~viewRenderPresentTarget()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mTargets[0] = mTargets[1] = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* <span class=\"keyword\">const</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html#a6e61af973ca8990c8c1a389f60a31798\">targetOverrideList</a>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp;listSize)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargets[0] &amp;&amp; mTargets[1])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            listSize = 2;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> &amp;mTargets[0];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setRenderTarget(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* val)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (i&lt;2)</div>\n\
<div class=\"line\">            mTargets[i] = val;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Targets used as input parameters to mShaderInstance;</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* mTargets[2];</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Custom hud operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Custom hud operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>viewRenderHUDOperation : <span class=\"keyword\">public</span> <a name=\"_a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_h_u_d_render.html\">MHWRender::MHUDRender</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    viewRenderHUDOperation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mTargets[0] = mTargets[1] = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~viewRenderHUDOperation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mTargets[0] = mTargets[1] = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Target override</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* <span class=\"keyword\">const</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html#a6e61af973ca8990c8c1a389f60a31798\">targetOverrideList</a>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp;listSize)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargets[0] &amp;&amp; mTargets[1])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            listSize = 2;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> &amp;mTargets[0];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setRenderTarget(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* val)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (i&lt;2)</div>\n\
<div class=\"line\">            mTargets[i] = val;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* mTargets[2];</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Custom render override class</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>viewDX11DeviceAccess : <span class=\"keyword\">public</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html\">MHWRender::MRenderOverride</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// User op draw to target 1</span></div>\n\
<div class=\"line\">        kUserOpNumber,</div>\n\
<div class=\"line\">        <span class=\"comment\">// Draw HUD on top</span></div>\n\
<div class=\"line\">        kHUDBlit,</div>\n\
<div class=\"line\">        <span class=\"comment\">// Present</span></div>\n\
<div class=\"line\">        kPresentOp,</div>\n\
<div class=\"line\">        kNumberOfOps</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    viewDX11DeviceAccess( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; name )</div>\n\
<div class=\"line\">        : MRenderOverride( name )</div>\n\
<div class=\"line\">        , mUIName(<span class=\"stringliteral\">&quot;DX11 Render Override Sample&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;kNumberOfOps; i++)</div>\n\
<div class=\"line\">            mRenderOperations[i] = NULL;</div>\n\
<div class=\"line\">        mCurrentOperation = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Init target information for the override</span></div>\n\
<div class=\"line\">        mTargetOverrideNames[0] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;__viewDX11DeviceAccessCustomColorTarget__&quot;</span>);</div>\n\
<div class=\"line\">        mTargetOverrideNames[1] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;__viewDX11DeviceAccessCustomDepthTarget__&quot;</span>);</div>\n\
<div class=\"line\">        MHWRender::MRasterFormat colorFormat = MHWRender::kR8G8B8A8_UNORM;</div>\n\
<div class=\"line\">            <span class=\"comment\">//MHWRender::kR32G32B32_FLOAT; -- this currently causes issues with DX11</span></div>\n\
<div class=\"line\">        MHWRender::MRasterFormat depthFormat = MHWRender::kD24S8;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampleCount = 1; <span class=\"comment\">// no multi-sampling</span></div>\n\
<div class=\"line\">        mTargetDescriptions[0] =</div>\n\
<div class=\"line\">            <span class=\"keyword\">new</span> <a name=\"_a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_description.html\">MHWRender::MRenderTargetDescription</a>(mTargetOverrideNames[0], 256, 256, sampleCount, colorFormat, 0, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        mTargetDescriptions[1] =</div>\n\
<div class=\"line\">            <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_description.html\">MHWRender::MRenderTargetDescription</a>(mTargetOverrideNames[1], 256, 256, sampleCount, depthFormat, 0, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mTargets[0] = NULL;</div>\n\
<div class=\"line\">        mTargets[1] = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// For debugging</span></div>\n\
<div class=\"line\">        mDebugOverride = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mPanelName.clear();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~viewDX11DeviceAccess()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Cleanup targets</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargetDescriptions[0])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> mTargetDescriptions[0];</div>\n\
<div class=\"line\">            mTargetDescriptions[0] = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargetDescriptions[1])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> mTargetDescriptions[1];</div>\n\
<div class=\"line\">            mTargetDescriptions[1] = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (theRenderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html\">MHWRender::MRenderTargetManager</a>* targetManager = theRenderer-&gt;<a name=\"a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a2228b9005f574393fbe87a4477161dc3\">getRenderTargetManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (targetManager)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (mTargets[0])</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    targetManager-&gt;<a name=\"a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html#a3ac81120f77bddaf281b6f1ba21c83d1\">releaseRenderTarget</a>(mTargets[0]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (mTargets[1])</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    targetManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html#a3ac81120f77bddaf281b6f1ba21c83d1\">releaseRenderTarget</a>(mTargets[1]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        mTargets[0] = NULL;</div>\n\
<div class=\"line\">        mTargets[1] = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#aca5dc8a0749ab4431a1208e16dbdaa45\">cleanup</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Delete all the operations</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;kNumberOfOps; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mRenderOperations[i])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> mRenderOperations[i];</div>\n\
<div class=\"line\">                mRenderOperations[i] = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> MHWRender::DrawAPI <a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#a0a36b8ef8730fa92f11c853752cc1e0e\">supportedDrawAPIs</a>()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MHWRender::kDirectX11 | MHWRender::kOpenGL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> <a name=\"a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#aa313aa1923be350cc23326c961c33d50\">uiName</a>()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mUIName;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Operation iterator methods</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> <a name=\"a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#af6e4d3092d127b52a0ba00b54052afa6\">startOperationIterator</a>()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mCurrentOperation = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a name=\"_a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html\">MHWRender::MRenderOperation</a> * <a name=\"a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#adab552bfd7cb4332ed0162b14710ec0a\">renderOperation</a>()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mCurrentOperation &gt;= 0 &amp;&amp; mCurrentOperation &lt; kNumberOfOps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>(!mRenderOperations[mCurrentOperation])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mCurrentOperation++;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (mCurrentOperation &gt;= kNumberOfOps)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mRenderOperations[mCurrentOperation])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (mDebugOverride)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t%s : Queue render operation[%d] = (%s)\\n&quot;</span>,</div>\n\
<div class=\"line\">                        mName.asChar(),</div>\n\
<div class=\"line\">                        mCurrentOperation,</div>\n\
<div class=\"line\">                        mRenderOperations[mCurrentOperation]-&gt;name().asChar());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> mRenderOperations[mCurrentOperation];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> <a name=\"a122\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#a5af9f73906f2f3d2adda03c604f58d73\">nextRenderOperation</a>()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mCurrentOperation++;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mCurrentOperation &lt; kNumberOfOps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the required render targets</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updateRenderTargets()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDebugOverride)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t%s : Set output render target overrides: color=%s, depth=%s\\n&quot;</span>,</div>\n\
<div class=\"line\">                mName.asChar(),</div>\n\
<div class=\"line\">                mTargetDescriptions[0]-&gt;name().asChar(), mTargetDescriptions[1]-&gt;name().asChar());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> targetWidth = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> targetHeight = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( theRenderer )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            theRenderer-&gt;<a name=\"a123\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aef186014d5c44ba270308a00286f75fd\">outputTargetSize</a>( targetWidth, targetHeight );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargetDescriptions[0]-&gt;width() != targetWidth ||</div>\n\
<div class=\"line\">            mTargetDescriptions[1]-&gt;height() != targetHeight)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// A resize occured</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mTargetDescriptions[0]-&gt;setWidth( targetWidth );</div>\n\
<div class=\"line\">        mTargetDescriptions[0]-&gt;setHeight( targetHeight );</div>\n\
<div class=\"line\">        mTargetDescriptions[1]-&gt;setWidth( targetWidth );</div>\n\
<div class=\"line\">        mTargetDescriptions[1]-&gt;setHeight( targetHeight );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html\">MHWRender::MRenderTargetManager</a> *targetManager = theRenderer ? theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a2228b9005f574393fbe87a4477161dc3\">getRenderTargetManager</a>() : NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (targetManager)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!mTargets[0])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mTargets[0] =  targetManager-&gt;<a name=\"a124\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html#a34596dab85af525cd42532e7e5e5c39e\">acquireRenderTarget</a>( *( mTargetDescriptions[0]) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mTargets[0]-&gt;<a name=\"a125\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html#ad3c82c6bf98ed514ccb8e35b573f9f85\">updateDescription</a>( *( mTargetDescriptions[0]) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!mTargets[1])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mTargets[1] =  targetManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html#a34596dab85af525cd42532e7e5e5c39e\">acquireRenderTarget</a>( *( mTargetDescriptions[1]) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mTargets[1]-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html#ad3c82c6bf98ed514ccb8e35b573f9f85\">updateDescription</a>( *( mTargetDescriptions[1]) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update the render targets on the individual operations</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        viewRenderUserOperation *userOp = (viewRenderUserOperation *) mRenderOperations[kUserOpNumber];</div>\n\
<div class=\"line\">        viewRenderPresentTarget *presentOp = (viewRenderPresentTarget *) mRenderOperations[kPresentOp];</div>\n\
<div class=\"line\">        viewRenderHUDOperation *hudOp = (viewRenderHUDOperation *) mRenderOperations[kHUDBlit];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargets[0])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (userOp)</div>\n\
<div class=\"line\">                userOp-&gt;setRenderTarget(0, mTargets[0]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (presentOp)</div>\n\
<div class=\"line\">                presentOp-&gt;setRenderTarget(0, mTargets[0]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hudOp)</div>\n\
<div class=\"line\">                hudOp-&gt;setRenderTarget(0, mTargets[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTargets[1])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (userOp)</div>\n\
<div class=\"line\">                userOp-&gt;setRenderTarget(1, mTargets[1]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (presentOp)</div>\n\
<div class=\"line\">                presentOp-&gt;setRenderTarget(1, mTargets[1]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hudOp)</div>\n\
<div class=\"line\">                hudOp-&gt;setRenderTarget(1, mTargets[1]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (mTargets[0] &amp;&amp; mTargets[1]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Setup is just a regular render with no overrides</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a126\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#a773d1f1082e711c8d4cf216d32b07fe4\">setup</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; destination )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDebugOverride)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;%s : Perform setup with panel [%s]\\n&quot;</span>,</div>\n\
<div class=\"line\">                mName.asChar(), destination.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the active panel if any</span></div>\n\
<div class=\"line\">        mPanelName.<a name=\"a127\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>( destination.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mRenderOperations[kUserOpNumber] == NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mRenderOperationNames[kUserOpNumber] = <span class=\"stringliteral\">&quot;__MyCustomSceneRender&quot;</span>;</div>\n\
<div class=\"line\">            viewRenderUserOperation *userOp = <span class=\"keyword\">new</span> viewRenderUserOperation( mRenderOperationNames[kUserOpNumber] );</div>\n\
<div class=\"line\">            mRenderOperations[kUserOpNumber] = userOp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mRenderOperations[kHUDBlit] = <span class=\"keyword\">new</span> viewRenderHUDOperation();</div>\n\
<div class=\"line\">            mRenderOperationNames[kHUDBlit] = (mRenderOperations[kHUDBlit])-&gt;<a name=\"a128\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#ac556578d6219804b38b9387f8c344ef7\">name</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mRenderOperationNames[kPresentOp] = <span class=\"stringliteral\">&quot;__MyPresentTarget&quot;</span>;</div>\n\
<div class=\"line\">            mRenderOperations[kPresentOp] = <span class=\"keyword\">new</span> viewRenderPresentTarget( mRenderOperationNames[kPresentOp] );</div>\n\
<div class=\"line\">            mRenderOperationNames[kPresentOp] = (mRenderOperations[kPresentOp])-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#ac556578d6219804b38b9387f8c344ef7\">name</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> gotTargets = updateRenderTargets();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mRenderOperations[kUserOpNumber])</div>\n\
<div class=\"line\">            ((viewRenderUserOperation *)mRenderOperations[kUserOpNumber])-&gt;setPanelName( mPanelName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mCurrentOperation = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (gotTargets ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_override.html#aca5dc8a0749ab4431a1208e16dbdaa45\">cleanup</a>()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDebugOverride)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;%s : Perform cleanup. panelname=%s\\n&quot;</span>, mName.asChar(), mPanelName.asChar());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Reset the active view</span></div>\n\
<div class=\"line\">        mPanelName.<a name=\"a129\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">        <span class=\"comment\">// Reset current operation</span></div>\n\
<div class=\"line\">        mCurrentOperation = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Unique name to identify this type of override. Identifier</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is used when setting an override for a viewport panel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// or for batch rendering</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> gsVROName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; panelName()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> mPanelName; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Operation lists</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html\">MHWRender::MRenderOperation</a> * mRenderOperations[kNumberOfOps];</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mRenderOperationNames[kNumberOfOps];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> mCurrentOperation;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Shared render target list</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mTargetOverrideNames[2];</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target_description.html\">MHWRender::MRenderTargetDescription</a>* mTargetDescriptions[2];</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* mTargets[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Override is for this panel</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mPanelName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// UI name</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mUIName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> mDebugOverride;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> viewDX11DeviceAccess *viewDX11DeviceAccessInstance = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Plug-in functions</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a name=\"_a130\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a131\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;1.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create and register an override.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!viewDX11DeviceAccessInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            viewDX11DeviceAccessInstance = <span class=\"keyword\">new</span> viewDX11DeviceAccess( <span class=\"stringliteral\">&quot;my_viewDX11DeviceAccess&quot;</span> );</div>\n\
<div class=\"line\">            status = renderer-&gt;<a name=\"a132\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ae677d98e2300e2f9c69abb576539ac37\">registerOverride</a>(viewDX11DeviceAccessInstance);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a name=\"a133\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerOverride&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Degister and delete override</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (viewDX11DeviceAccessInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = renderer-&gt;<a name=\"a134\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a98edf29a485507737ea8f0523408296b\">deregisterOverride</a>(viewDX11DeviceAccessInstance);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> viewDX11DeviceAccessInstance;</div>\n\
<div class=\"line\">        viewDX11DeviceAccessInstance = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterOverride&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";