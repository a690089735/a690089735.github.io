var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcImport/NodeIteratorVisitorHelper.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_import_2_node_iterator_visitor_helper_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcImport/NodeIteratorVisitorHelper.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcImport/NodeIteratorVisitorHelper.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2013,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks, Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;util.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AlembicNode.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CreateSceneHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;NodeIteratorVisitorHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AbcImportStrings.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcCoreFactory/IFactory.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDoubleArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnIntArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUint64Array.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDoubleArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnFloatArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPointArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnVectorArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnLight.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsCurve.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsSurface.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCamera.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTime.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> unsupportedWarning(T &amp; iProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = AbcImportStrings::getString(AbcImportStrings::kWarningUnsupportedAttr) ;</div>\n\
<div class=\"line\">    warn += iProp.getName().c_str();</div>\n\
<div class=\"line\">    warn += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    warn += PODName(iProp.getDataType().getPod());</div>\n\
<div class=\"line\">    warn += <span class=\"stringliteral\">&quot;[&quot;</span>;</div>\n\
<div class=\"line\">    warn += iProp.getDataType().getExtent();</div>\n\
<div class=\"line\">    warn += <span class=\"stringliteral\">&quot;]&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    printWarning(warn);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> addString(<a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent, <span class=\"keyword\">const</span> std::string &amp; iAttrName,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::string &amp; iValue)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html\">MFnStringData</a> fnStringData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrValue(iValue.c_str());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName(iAttrName.c_str());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> strAttrObject = fnStringData.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> attr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = attr.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName, <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">        strAttrObject);</div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> parentFn(iParent);</div>\n\
<div class=\"line\">    parentFn.addAttribute(attrObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// work around bug where this string wasn&#39;t getting saved to a file when</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// it is the default value</span></div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = parentFn.findPlug(attrName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!plug.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        plug.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a565b92d32697a174957dcf6f5ecca3e6\">setString</a>(attrValue);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> addArbAttrAndScope(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent, <span class=\"keyword\">const</span> std::string &amp; iAttrName,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::string &amp; iScope, <span class=\"keyword\">const</span> std::string &amp; iInterp,</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t iExtent)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::string attrStr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// constant scope colors can use setUsedAsColor</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iInterp == <span class=\"stringliteral\">&quot;rgb&quot;</span> &amp;&amp; iScope != <span class=\"stringliteral\">&quot;&quot;</span> &amp;&amp; iScope != <span class=\"stringliteral\">&quot;con&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrStr = <span class=\"stringliteral\">&quot;rgb&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iInterp == <span class=\"stringliteral\">&quot;rgba&quot;</span> &amp;&amp; iScope != <span class=\"stringliteral\">&quot;&quot;</span> &amp;&amp; iScope != <span class=\"stringliteral\">&quot;con&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrStr = <span class=\"stringliteral\">&quot;rgba&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iInterp == <span class=\"stringliteral\">&quot;vector&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iExtent == 2)</div>\n\
<div class=\"line\">            attrStr = <span class=\"stringliteral\">&quot;vector2&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// the data type makes it intrinsically a vector3</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iInterp == <span class=\"stringliteral\">&quot;point&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iExtent == 2)</div>\n\
<div class=\"line\">            attrStr = <span class=\"stringliteral\">&quot;point2&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// the data type is treated intrinsically as a point3</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iInterp == <span class=\"stringliteral\">&quot;normal&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iExtent == 2)</div>\n\
<div class=\"line\">            attrStr = <span class=\"stringliteral\">&quot;normal2&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iExtent == 3)</div>\n\
<div class=\"line\">            attrStr = <span class=\"stringliteral\">&quot;normal3&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (attrStr != <span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::string attrName = iAttrName + <span class=\"stringliteral\">&quot;_AbcType&quot;</span>;</div>\n\
<div class=\"line\">        addString(iParent, attrName, attrStr);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iScope != <span class=\"stringliteral\">&quot;&quot;</span> &amp;&amp; iScope != <span class=\"stringliteral\">&quot;con&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::string attrName = iAttrName + <span class=\"stringliteral\">&quot;_AbcGeomScope&quot;</span>;</div>\n\
<div class=\"line\">        addString(iParent, attrName, iScope);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> addArrayProp(Alembic::Abc::IArrayProperty &amp; iProp, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> parentFn(iParent);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName(iProp.getName().c_str());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = parentFn.findPlug(attrName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> typedAttr;</div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj;</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::DataType dtype = iProp.getDataType();</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t extent = dtype.getExtent();</div>\n\
<div class=\"line\">    std::string interp = iProp.getMetaData().get(<span class=\"stringliteral\">&quot;interpretation&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isScalarLike = iProp.isScalarLike() &amp;&amp;</div>\n\
<div class=\"line\">        iProp.getMetaData().get(<span class=\"stringliteral\">&quot;isArray&quot;</span>) != <span class=\"stringliteral\">&quot;1&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// the first sample is read only when the property is constant</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dtype.getPod())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kBooleanPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent != 1 || !isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> bval = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::AbcCoreAbstract::ArraySamplePtr val;</div>\n\
<div class=\"line\">                iProp.get(val);</div>\n\
<div class=\"line\">                bval =</div>\n\
<div class=\"line\">                    ((Alembic::Util::bool_t *)(val-&gt;getData()))[0] != <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (plug.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attrObj = numAttr.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>, bval);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                plug.setValue(bval);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint8POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt8POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent != 1 || !isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// default is 1 just to accomodate visiblitity</span></div>\n\
<div class=\"line\">            Alembic::Util::int8_t val = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                iProp.get(samp);</div>\n\
<div class=\"line\">                val = ((Alembic::Util::int8_t *) samp-&gt;getData())[0];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (plug.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>, val);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                plug.setValue(val);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt16POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint16POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// MFnNumericData::kShort or k2Short or k3Short</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent &gt; 3 || !isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Alembic::Util::int16_t val[3] = {0, 0, 0};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                iProp.get(samp);</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> Alembic::Util::int16_t * sampData =</div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const</span> Alembic::Util::int16_t *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = sampData[i];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildren = plug.numChildren();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (numChildren == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    plug.setValue(val[0]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (numChildren &gt; extent)</div>\n\
<div class=\"line\">                        numChildren = extent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.child(i).setValue(val[i]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>);</div>\n\
<div class=\"line\">                numAttr.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a78f9c008272ac1b28b52988ceb73839b\">MFnNumericData::k2Short</a>);</div>\n\
<div class=\"line\">                numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>);</div>\n\
<div class=\"line\">                numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint32POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt32POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html\">MFnIntArrayData</a> fnData;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> arr((<span class=\"keywordtype\">int</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                    arrObj = fnData.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(arrObj);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> arr;</div>\n\
<div class=\"line\">                    arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8892cbe039dc4c92d47be0bf340950a2\">MFnData::kIntArray</a>, arrObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// isScalarLike</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent &gt; 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Alembic::Util::int32_t val[3] = {0, 0, 0};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> Alembic::Util::int32_t * sampData =</div>\n\
<div class=\"line\">                        (<span class=\"keyword\">const</span> Alembic::Util::int32_t *)samp-&gt;getData();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        val[i] = sampData[i];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildren = plug.numChildren();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (numChildren == 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(val[0]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (numChildren &gt; extent)</div>\n\
<div class=\"line\">                            numChildren = extent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.child(i).setValue(val[i]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a553cdb5a183e366651484ec268e108a1\">MFnNumericData::k2Int</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// look for MFnVectorArrayData?</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kFloat32POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ((extent == 2 || extent == 3) &amp;&amp; (interp == <span class=\"stringliteral\">&quot;normal&quot;</span> ||</div>\n\
<div class=\"line\">                    interp == <span class=\"stringliteral\">&quot;vector&quot;</span> || interp == <span class=\"stringliteral\">&quot;rgb&quot;</span>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                        iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                        <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                        <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec;</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> Alembic::Util::float32_t * sampData =</div>\n\
<div class=\"line\">                            (<span class=\"keyword\">const</span> Alembic::Util::float32_t *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            vec.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = sampData[extent*i];</div>\n\
<div class=\"line\">                            vec.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = sampData[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = sampData[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            arr[i] = vec;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        arrObj = fnData.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.setValue(arrObj);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> arr;</div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a155fba435c9f5acc854c40a9895a4cf1\">MFnData::kVectorArray</a>, arrObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (interp == <span class=\"stringliteral\">&quot;point&quot;</span> &amp;&amp; (extent == 2 || extent == 3))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html\">MFnPointArrayData</a> fnData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                        iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                        <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                        <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> Alembic::Util::float32_t * sampData =</div>\n\
<div class=\"line\">                            (<span class=\"keyword\">const</span> Alembic::Util::float32_t *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pt.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = sampData[extent*i];</div>\n\
<div class=\"line\">                            pt.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = sampData[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = sampData[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            arr[i] = pt;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        arrObj = fnData.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.setValue(arrObj);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> arr;</div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a794fde57efe7913d9b67ac54c37899bd\">MFnData::kPointArray</a>, arrObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_float_array_data.html\">MFnFloatArrayData</a> fnData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                        iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> arr((<span class=\"keywordtype\">float</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                            <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                        arrObj = fnData.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_float_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.setValue(arrObj);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> arr;</div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_float_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a0d70752d8c4c50d04789b164af6f54ce\">MFnData::kFloatArray</a>, arrObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// isScalarLike</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent &gt; 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> val[3] = {0, 0, 0};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * sampData = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        val[i] = sampData[i];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildren = plug.numChildren();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (numChildren == 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(val[0]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (numChildren &gt; extent)</div>\n\
<div class=\"line\">                            numChildren = extent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.child(i).setValue(val[i]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7af8f260603ef20b1e0c3d09de0e9c645c\">MFnNumericData::k2Float</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (interp == <span class=\"stringliteral\">&quot;rgb&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        attrObj = numAttr.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a3b53a86b42bc4da537c4be835797c4d5\">createColor</a>(attrName, attrName);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (interp == <span class=\"stringliteral\">&quot;point&quot;</span>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        attrObj = numAttr.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a333c2adbb4839dd894e4d37b18089d94\">createPoint</a>(attrName, attrName);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                            <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kFloat64POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ((extent == 2 || extent == 3) &amp;&amp; (interp == <span class=\"stringliteral\">&quot;normal&quot;</span> ||</div>\n\
<div class=\"line\">                    interp == <span class=\"stringliteral\">&quot;vector&quot;</span> || interp == <span class=\"stringliteral\">&quot;rgb&quot;</span>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                        iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec;</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> Alembic::Util::float64_t * sampData =</div>\n\
<div class=\"line\">                            (<span class=\"keyword\">const</span> Alembic::Util::float64_t *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = sampData[extent*i];</div>\n\
<div class=\"line\">                            vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = sampData[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = sampData[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            arr[i] = vec;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.setValue(arrObj);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> arr;</div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a155fba435c9f5acc854c40a9895a4cf1\">MFnData::kVectorArray</a>, arrObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (interp == <span class=\"stringliteral\">&quot;point&quot;</span> &amp;&amp; (extent == 2 || extent == 3))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html\">MFnPointArrayData</a> fnData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                        iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt;</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> Alembic::Util::float64_t * sampData =</div>\n\
<div class=\"line\">                            (<span class=\"keyword\">const</span> Alembic::Util::float64_t *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = sampData[extent*i];</div>\n\
<div class=\"line\">                            pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = sampData[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = sampData[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            arr[i] = pt;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.setValue(arrObj);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> arr;</div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a794fde57efe7913d9b67ac54c37899bd\">MFnData::kPointArray</a>, arrObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html\">MFnDoubleArrayData</a> fnData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                        iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a name=\"_a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> arr((<span class=\"keywordtype\">double</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                            <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                        arrObj = fnData.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.setValue(arrObj);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> arr;</div>\n\
<div class=\"line\">                        arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7aaee060f77390647f2195ea07f5bda194\">MFnData::kDoubleArray</a>, arrObj);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent &gt; 4)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> val[4] = {0, 0, 0, 0};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> * sampData = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        val[i] = sampData[i];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildren = plug.numChildren();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (numChildren == 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(val[0]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (numChildren &gt; extent)</div>\n\
<div class=\"line\">                            numChildren = extent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            plug.child(i).setValue(val[i]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (plug.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                            <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">                        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(val[0]);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7aa3f828c84111a9aa42c14f9cd3962c7b\">MFnNumericData::k2Double</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7add817d1d2e1e1d24ac2e2819a58e8f99\">MFnNumericData::k3Double</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 4)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                        <a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a3dfe68bf09c3e609cdb4c897dfcf3dbe\">MFnNumericData::k4Double</a>);</div>\n\
<div class=\"line\">                    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2], val[3]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kStringPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnData;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                    <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> arr;</div>\n\
<div class=\"line\">                    arr.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(sampSize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    Alembic::Util::string * strData =</div>\n\
<div class=\"line\">                        (Alembic::Util::string *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        arr[i] = strData[i].c_str();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    arrObj = fnData.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(arrObj);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> arr;</div>\n\
<div class=\"line\">                    arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>, arrObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// isScalarLike</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent != 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html\">MFnStringData</a> fnStringData;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> strAttrObject;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrValue(</div>\n\
<div class=\"line\">                        ((Alembic::Util::string *) samp-&gt;getData())[0].c_str());</div>\n\
<div class=\"line\">                    strAttrObject = fnStringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(attrValue);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(strAttrObject);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrValue;</div>\n\
<div class=\"line\">                    strAttrObject = fnStringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(attrValue);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">                        <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                parentFn.addAttribute(attrObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                plug = parentFn.findPlug(attrName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    plug.setValue(strAttrObject);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kWstringPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isScalarLike)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnData;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> arrObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> arr;</div>\n\
<div class=\"line\">                    arr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(sampSize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    Alembic::Util::wstring * strData =</div>\n\
<div class=\"line\">                        (Alembic::Util::wstring *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        arr[i] = (<span class=\"keywordtype\">wchar_t</span> *)(strData[i].c_str());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(arrObj);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> arr;</div>\n\
<div class=\"line\">                    arrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>, arrObj);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// isScalarLike</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent != 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html\">MFnStringData</a> fnStringData;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> strAttrObject;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcCoreAbstract::ArraySamplePtr samp;</div>\n\
<div class=\"line\">                    iProp.get(samp);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrValue(</div>\n\
<div class=\"line\">                        ((Alembic::Util::wstring *)samp-&gt;getData())[0].c_str());</div>\n\
<div class=\"line\">                    strAttrObject = fnStringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(attrValue);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plug.setValue(strAttrObject);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrValue;</div>\n\
<div class=\"line\">                    strAttrObject = fnStringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(attrValue);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                parentFn.addAttribute(attrObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                plug = parentFn.findPlug(attrName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    plug.setValue(strAttrObject);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Not sure what to do with kFloat16POD, kInt64POD, kUInt64POD</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// so we&#39;ll just skip them for now</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    typedAttr.<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isScalarLike &amp;&amp; interp == <span class=\"stringliteral\">&quot;rgb&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        typedAttr.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! parentFn.hasAttribute( attrName ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        parentFn.addAttribute(attrObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    addArbAttrAndScope(iParent, iProp.getName(),</div>\n\
<div class=\"line\">        iProp.getMetaData().get(<span class=\"stringliteral\">&quot;geoScope&quot;</span>), interp, extent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> PODTYPE&gt;</div>\n\
<div class=\"line\">AddPropResult</div>\n\
<div class=\"line\">addScalarExtentOneProp(Alembic::Abc::IScalarProperty&amp; iProp,</div>\n\
<div class=\"line\">                       Alembic::Util::uint8_t extent,</div>\n\
<div class=\"line\">                       PODTYPE defaultVal,</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; attrName,</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a>&amp; numAttr,</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; attrObj,</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (extent != 1)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> INVALID;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alembic::Abc::ISampleSelector iss((Alembic::Abc::index_t)0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PODTYPE val = defaultVal;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">        iProp.get(&amp;val, iss);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type, val);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        plug.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(val);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> VALID_DONE;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VALID_NOTDONE;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> PODTYPE&gt;</div>\n\
<div class=\"line\">AddPropResult</div>\n\
<div class=\"line\">addScalarExtentThreeProp(Alembic::Abc::IScalarProperty&amp; iProp,</div>\n\
<div class=\"line\">                         Alembic::Util::uint8_t extent,</div>\n\
<div class=\"line\">                         PODTYPE defaultVal,</div>\n\
<div class=\"line\">                         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; attrName,</div>\n\
<div class=\"line\">                         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a>&amp; numAttr,</div>\n\
<div class=\"line\">                         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; attrObj,</div>\n\
<div class=\"line\">                         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type1,</div>\n\
<div class=\"line\">                         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type2,</div>\n\
<div class=\"line\">                         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type3)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (extent &gt; 3)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> INVALID;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alembic::Abc::ISampleSelector iss((Alembic::Abc::index_t)0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PODTYPE val[3] = {defaultVal, defaultVal, defaultVal};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">        iProp.get(&amp;val, iss);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildren = plug.<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a551981a427bd12471416599084791113\">numChildren</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numChildren == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(val[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numChildren &gt; extent)</div>\n\
<div class=\"line\">                numChildren = extent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numChildren &gt; 3)</div>\n\
<div class=\"line\">                numChildren = 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">                plug.<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(i).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(val[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> VALID_DONE;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type1);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type2);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type3);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VALID_NOTDONE;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> PODTYPE&gt;</div>\n\
<div class=\"line\">AddPropResult</div>\n\
<div class=\"line\">addScalarExtentFourProp(Alembic::Abc::IScalarProperty&amp; iProp,</div>\n\
<div class=\"line\">                        Alembic::Util::uint8_t extent,</div>\n\
<div class=\"line\">                        PODTYPE defaultVal,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; attrName,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a>&amp; numAttr,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; attrObj,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type1,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type2,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type3,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFnNumericData::Type</a> type4)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (extent &gt; 4)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> INVALID;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alembic::Abc::ISampleSelector iss((Alembic::Abc::index_t)0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PODTYPE val[4] = {defaultVal, defaultVal, defaultVal, defaultVal};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">        iProp.get(&amp;val, iss);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildren = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a551981a427bd12471416599084791113\">numChildren</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numChildren == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(val[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numChildren &gt; extent)</div>\n\
<div class=\"line\">                numChildren = extent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChildren; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(i).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(val[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> VALID_DONE;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type1);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type2);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type3);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 4)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName, type4);</div>\n\
<div class=\"line\">        numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(val[0], val[1], val[2], val[3]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VALID_NOTDONE;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> addScalarProp(Alembic::Abc::IScalarProperty &amp; iProp, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> parentFn(iParent);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName(iProp.getName().c_str());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = parentFn.findPlug(attrName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> typedAttr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj;</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::DataType dtype = iProp.getDataType();</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t extent = dtype.getExtent();</div>\n\
<div class=\"line\">    std::string interp = iProp.getMetaData().get(<span class=\"stringliteral\">&quot;interpretation&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dtype.getPod())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kBooleanPOD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          AddPropResult result = addScalarExtentOneProp&lt;bool&gt;</div>\n\
<div class=\"line\">              (iProp, extent, <span class=\"keyword\">false</span>, plug, attrName, numAttr, attrObj,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (result == INVALID)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == VALID_DONE)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint8POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt8POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          AddPropResult result = addScalarExtentOneProp&lt;Alembic::Util::int8_t&gt;</div>\n\
<div class=\"line\">              (iProp, extent, 1, plug, attrName, numAttr, attrObj,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (result == INVALID)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == VALID_DONE)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt16POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint16POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          AddPropResult result = addScalarExtentThreeProp&lt;Alembic::Util::int16_t&gt;</div>\n\
<div class=\"line\">              (iProp, extent, 0, plug, attrName, numAttr, attrObj,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a78f9c008272ac1b28b52988ceb73839b\">MFnNumericData::k2Short</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (result == INVALID)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == VALID_DONE)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint32POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt32POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          AddPropResult result = addScalarExtentThreeProp&lt;Alembic::Util::int32_t&gt;</div>\n\
<div class=\"line\">              (iProp, extent, 0, plug, attrName, numAttr, attrObj,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MFnNumericData::kInt</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a553cdb5a183e366651484ec268e108a1\">MFnNumericData::k2Int</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (result == INVALID)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == VALID_DONE)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kFloat32POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          AddPropResult result = addScalarExtentThreeProp&lt;float&gt;</div>\n\
<div class=\"line\">              (iProp, extent, 0.f, plug, attrName, numAttr, attrObj,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7af8f260603ef20b1e0c3d09de0e9c645c\">MFnNumericData::k2Float</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (result == INVALID)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == VALID_DONE)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kFloat64POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          AddPropResult result = addScalarExtentFourProp&lt;double&gt;</div>\n\
<div class=\"line\">              (iProp, extent, 0.f, plug, attrName, numAttr, attrObj,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7aa3f828c84111a9aa42c14f9cd3962c7b\">MFnNumericData::k2Double</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7add817d1d2e1e1d24ac2e2819a58e8f99\">MFnNumericData::k3Double</a>,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a3dfe68bf09c3e609cdb4c897dfcf3dbe\">MFnNumericData::k4Double</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (result == INVALID)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == VALID_DONE)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kStringPOD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent != 1)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html\">MFnStringData</a> fnStringData;</div>\n\
<div class=\"line\">          <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> strAttrObject;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (iProp.isConstant())</div>\n\
<div class=\"line\">          {</div>\n\
<div class=\"line\">              Alembic::Abc::IStringProperty strProp( iProp.getPtr(),</div>\n\
<div class=\"line\">                                                     Alembic::Abc::kWrapExisting );</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">if</span> (!strProp.valid())</div>\n\
<div class=\"line\">                  <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">              <span class=\"keywordflow\">if</span> (strProp.getNumSamples() == 0)</div>\n\
<div class=\"line\">                  <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">              <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alembic::Abc::ISampleSelector iss((Alembic::Abc::index_t)0);</div>\n\
<div class=\"line\">              std::string val = strProp.getValue(iss);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">              <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrValue(val.c_str());</div>\n\
<div class=\"line\">              strAttrObject = fnStringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(attrValue);</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">              {</div>\n\
<div class=\"line\">                  plug.setValue(strAttrObject);</div>\n\
<div class=\"line\">                  <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">              }</div>\n\
<div class=\"line\">          }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          attrObj = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(attrName, attrName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          parentFn.addAttribute(attrObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          plug = parentFn.findPlug(attrName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (!plug.isNull())</div>\n\
<div class=\"line\">          {</div>\n\
<div class=\"line\">             plug.setValue(strAttrObject);</div>\n\
<div class=\"line\">          }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">          std::cout &lt;&lt; <span class=\"stringliteral\">&quot;Type not yet supported.\\n&quot;</span>;</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    numAttr.setKeyable(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (interp == <span class=\"stringliteral\">&quot;rgb&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        numAttr.setUsedAsColor(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ! parentFn.hasAttribute( attrName ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        parentFn.addAttribute(attrObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    addArbAttrAndScope(iParent, iProp.getName(),</div>\n\
<div class=\"line\">        iProp.getMetaData().get(<span class=\"stringliteral\">&quot;geoScope&quot;</span>), interp, extent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//=============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> addProps(Alembic::Abc::ICompoundProperty &amp; iParent, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iObject,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iUnmarkedFaceVaryingColors)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// if the params CompoundProperty (.arbGeomParam or .userProperties)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// aren&#39;t valid, then skip</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!iParent)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t numProps = iParent.getNumProperties();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (std::size_t i = 0; i &lt; numProps; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::PropertyHeader &amp; propHeader =</div>\n\
<div class=\"line\">            iParent.getPropertyHeader(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string &amp; propName = propHeader.getName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we have a color that we want to make a colorset out of</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( iObject.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>) &amp;&amp; isColorSet(propHeader,</div>\n\
<div class=\"line\">            iUnmarkedFaceVaryingColors) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (propName.empty() || propName[0] == <span class=\"charliteral\">&#39;.&#39;</span> ||</div>\n\
<div class=\"line\">            propName.find(<span class=\"charliteral\">&#39;[&#39;</span>) != std::string::npos)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = AbcImportStrings::getString(AbcImportStrings::kWarningSkipOddlyNamed) ;</div>\n\
<div class=\"line\">            warn += propName.c_str();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            printWarning(warn);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (propHeader.isArray())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Abc::IArrayProperty prop(iParent, propName);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (prop.getNumSamples() == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = AbcImportStrings::getString(AbcImportStrings::kWarningSkipNoSamples) ;</div>\n\
<div class=\"line\">                    warn += propName.c_str();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    printWarning(warn);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!addArrayProp(prop, iObject))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    unsupportedWarning&lt;Alembic::Abc::IArrayProperty&gt;(prop);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (propHeader.isScalar())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Abc::IScalarProperty prop(iParent, propName);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (prop.getNumSamples() == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = <span class=\"stringliteral\">&quot;Skipping property with no samples: &quot;</span>;</div>\n\
<div class=\"line\">                    warn += propName.c_str();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    printWarning(warn);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!addScalarProp(prop, iObject))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    unsupportedWarning&lt;Alembic::Abc::IScalarProperty&gt;(prop);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//=============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> getAnimatedArrayProp(Alembic::Abc::IArrayProperty prop,</div>\n\
<div class=\"line\">                          std::vector&lt;Prop&gt; &amp; oPropList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::DataType dtype = prop.getDataType();</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t extent = dtype.getExtent();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dtype.getPod())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kBooleanPOD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint8POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt8POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"comment\">// we only support scalar bool, and int8</span></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent != 1 || !prop.isScalarLike())</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt16POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint16POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"comment\">// we only support scalar int16</span></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent &gt; 3 || !prop.isScalarLike())</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint32POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt32POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kFloat32POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (prop.isScalarLike() &amp;&amp; extent &gt; 3)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kFloat64POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (prop.isScalarLike() &amp;&amp; extent &gt; 4)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kStringPOD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kWstringPOD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (prop.isScalarLike() &amp;&amp; extent &gt; 1)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"comment\">// Not sure what to do with kFloat16POD, kInt64POD, kUInt64POD</span></div>\n\
<div class=\"line\">          <span class=\"comment\">// so we&#39;ll just skip them for now</span></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Prop animProp;</div>\n\
<div class=\"line\">    animProp.mArray = prop;</div>\n\
<div class=\"line\">    oPropList.push_back(animProp);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> getAnimatedScalarProp(Alembic::Abc::IScalarProperty prop,</div>\n\
<div class=\"line\">                           std::vector&lt;Prop&gt; &amp; oPropList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::DataType dtype = prop.getDataType();</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t extent = dtype.getExtent();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dtype.getPod())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kBooleanPOD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint8POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt8POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"comment\">// we only support scalar bool, and int8</span></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent != 1)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt16POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint16POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"comment\">// we only support scalar int16</span></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent &gt; 3)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kUint32POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kInt32POD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kFloat32POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent &gt; 3)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kFloat64POD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent &gt; 4)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">          <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kStringPOD:</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">case</span> Alembic::Util::kWstringPOD:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">if</span> (extent &gt; 1)</div>\n\
<div class=\"line\">              <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">          <span class=\"comment\">// Not sure what to do with kFloat16POD, kInt64POD, kUInt64POD</span></div>\n\
<div class=\"line\">          <span class=\"comment\">// so we&#39;ll just skip them for now</span></div>\n\
<div class=\"line\">          <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Prop animProp;</div>\n\
<div class=\"line\">    animProp.mScalar = prop;</div>\n\
<div class=\"line\">    oPropList.push_back(animProp);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> getAnimatedProps(Alembic::Abc::ICompoundProperty &amp; iParent,</div>\n\
<div class=\"line\">                      std::vector&lt;Prop&gt; &amp; oPropList,</div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">bool</span> iUnmarkedFaceVaryingColors)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// if the arbitrary geom params aren&#39;t valid, then skip</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!iParent)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t numProps = iParent.getNumProperties();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (std::size_t i = 0; i &lt; numProps; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::PropertyHeader &amp; propHeader =</div>\n\
<div class=\"line\">            iParent.getPropertyHeader(i);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string &amp; propName = propHeader.getName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we have a color that we want to make a colorset out of</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and we will do so elsewhere</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( isColorSet(propHeader, iUnmarkedFaceVaryingColors) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (propName.empty() || propName[0] == <span class=\"charliteral\">&#39;.&#39;</span> ||</div>\n\
<div class=\"line\">            propName.find(<span class=\"charliteral\">&#39;[&#39;</span>) != std::string::npos)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (propHeader.isArray())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Abc::IArrayProperty prop(iParent, propName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop.getNumSamples() == 0 || prop.isConstant())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            getAnimatedArrayProp(prop, oPropList);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (propHeader.isScalar())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Abc::IScalarProperty prop(iParent, propName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop.getNumSamples() == 0 || prop.isConstant())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            getAnimatedScalarProp(prop, oPropList);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"comment\">// for i</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//=============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> readProp(<span class=\"keywordtype\">double</span> iFrame,</div>\n\
<div class=\"line\">              Alembic::Abc::IArrayProperty &amp; iProp,</div>\n\
<div class=\"line\">              <a name=\"_a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> &amp; iHandle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj;</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::DataType dtype = iProp.getDataType();</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t extent = dtype.getExtent();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::ArraySamplePtr samp, ceilSamp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame, iProp.getTimeSampling(),</div>\n\
<div class=\"line\">        iProp.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isScalarLike = iProp.isScalarLike() &amp;&amp;</div>\n\
<div class=\"line\">        iProp.getMetaData().get(<span class=\"stringliteral\">&quot;isArray&quot;</span>) != <span class=\"stringliteral\">&quot;1&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dtype.getPod())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kBooleanPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isScalarLike || extent != 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            iProp.get(samp, index);</div>\n\
<div class=\"line\">            Alembic::Util::bool_t val =</div>\n\
<div class=\"line\">                ((Alembic::Util::bool_t *) samp-&gt;getData())[0];</div>\n\
<div class=\"line\">            iHandle.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aa0c1c73d4565b920be8dfaf63dd86273\">setGenericBool</a>(val != <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint8POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt8POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!isScalarLike || extent != 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Alembic::Util::int8_t val;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.get(samp, index);</div>\n\
<div class=\"line\">                iProp.get(ceilSamp, ceilIndex);</div>\n\
<div class=\"line\">                Alembic::Util::int8_t lo =</div>\n\
<div class=\"line\">                    ((Alembic::Util::int8_t *) samp-&gt;getData())[0];</div>\n\
<div class=\"line\">                Alembic::Util::int8_t hi =</div>\n\
<div class=\"line\">                    ((Alembic::Util::int8_t *) ceilSamp-&gt;getData())[0];</div>\n\
<div class=\"line\">                val = simpleLerp&lt;Alembic::Util::int8_t&gt;(alpha, lo, hi);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                val = ((Alembic::Util::int8_t *) samp-&gt;getData())[0];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            iHandle.<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a027fa087d8231a483c9b2185b4c44c79\">setGenericChar</a>(val, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt16POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint16POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Util::int16_t val[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                iProp.get(ceilSamp, Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                     val[i] = simpleLerp&lt;Alembic::Util::int16_t&gt;(alpha,</div>\n\
<div class=\"line\">                        ((Alembic::Util::int16_t *)samp-&gt;getData())[i],</div>\n\
<div class=\"line\">                        ((Alembic::Util::int16_t *)ceilSamp-&gt;getData())[i]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                     val[i] = ((Alembic::Util::int16_t *)samp-&gt;getData())[i];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iHandle.<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a97b77a2898132515289cf23c90b6fb67\">setGenericShort</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                numData.<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Short);</div>\n\
<div class=\"line\">                numData.<a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a18c18071f3eb08524c54ed7670162385\">setData2Short</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                iHandle.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>);</div>\n\
<div class=\"line\">                numData.<a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a5d1ea08a8e766c1f59a9a549b06ef457\">setData3Short</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint32POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt32POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isScalarLike &amp;&amp; extent &lt; 4)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::int32_t val[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    iProp.get(ceilSamp,</div>\n\
<div class=\"line\">                        Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                         val[i] = simpleLerp&lt;Alembic::Util::int32_t&gt;(alpha,</div>\n\
<div class=\"line\">                            ((Alembic::Util::int32_t *)samp-&gt;getData())[i],</div>\n\
<div class=\"line\">                            ((Alembic::Util::int32_t *)ceilSamp-&gt;getData())[i]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                         val[i] =</div>\n\
<div class=\"line\">                            ((Alembic::Util::int32_t *) samp-&gt;getData())[i];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iHandle.<a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a81003cc42dedeec794af08fa68c50735\">setGenericInt</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Int);</div>\n\
<div class=\"line\">                    numData.<a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#af0d55d1344ee45af1c4a65db8bf6c3cd\">setData2Int</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>);</div>\n\
<div class=\"line\">                    numData.<a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#aa51b4a58c3eed99f5160de96dea1c19c\">setData3Int</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html\">MFnIntArrayData</a> fnData;</div>\n\
<div class=\"line\">                iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(ceilSamp,</div>\n\
<div class=\"line\">                        Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> arr((<span class=\"keywordtype\">int</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                    std::size_t sampSize = samp-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// size is different don&#39;t lerp</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (sampSize != ceilSamp-&gt;size())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> * hi = (<span class=\"keywordtype\">int</span> *) ceilSamp-&gt;getData();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            arr[i] = simpleLerp&lt;int&gt;(alpha, arr[i], hi[i]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> arr((<span class=\"keywordtype\">int</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                    attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kFloat32POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isScalarLike &amp;&amp; extent &lt; 4)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> val[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    iProp.get(ceilSamp,</div>\n\
<div class=\"line\">                        Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        val[i] = simpleLerp&lt;float&gt;(alpha,</div>\n\
<div class=\"line\">                            ((<span class=\"keywordtype\">float</span> *)samp-&gt;getData())[i],</div>\n\
<div class=\"line\">                            ((<span class=\"keywordtype\">float</span> *)ceilSamp-&gt;getData())[i]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        val[i] = ((<span class=\"keywordtype\">float</span> *)samp-&gt;getData())[i];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iHandle.<a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#afae2adbfb78893e6cae1d4132d5a228a\">setGenericFloat</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Float);</div>\n\
<div class=\"line\">                    numData.<a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a99915a9f5ad5676b492488d0893237c7\">setData2Float</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>);</div>\n\
<div class=\"line\">                    numData.<a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a51869ca7faef6fcda2090c7b41276177\">setData3Float</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string interp = iProp.getMetaData().get(<span class=\"stringliteral\">&quot;interpretation&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ((extent == 2 || extent == 3) &amp;&amp; (interp == <span class=\"stringliteral\">&quot;normal&quot;</span> ||</div>\n\
<div class=\"line\">                    interp == <span class=\"stringliteral\">&quot;vector&quot;</span> || interp == <span class=\"stringliteral\">&quot;rgb&quot;</span>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnData;</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        iProp.<a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#a08da0aae32e87c8a252152d1597b908e\">get</a>(ceilSamp,</div>\n\
<div class=\"line\">                            Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// size is different don&#39;t lerp</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sampSize != ceilSamp-&gt;size())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> * vals = (<span class=\"keywordtype\">float</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = vec;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> * lo = (<span class=\"keywordtype\">float</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> * hi = (<span class=\"keywordtype\">float</span> *) ceilSamp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i], hi[extent*i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i+1], hi[extent*i+1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                        lo[extent*i+2], hi[extent*i+2]);</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = vec;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">float</span> * vals = (<span class=\"keywordtype\">float</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                            vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            arr[i] = vec;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (interp == <span class=\"stringliteral\">&quot;point&quot;</span> &amp;&amp; (extent == 2 || extent == 3))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html\">MFnPointArrayData</a> fnData;</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        iProp.<a name=\"a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#aa54ebbec9252a61bd66cdd442bc5758a\">get</a>(ceilSamp,</div>\n\
<div class=\"line\">                            Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// size is different don&#39;t lerp</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sampSize != ceilSamp-&gt;size())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> * vals = (<span class=\"keywordtype\">float</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = pt;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> * lo = (<span class=\"keywordtype\">float</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> * hi = (<span class=\"keywordtype\">float</span> *) ceilSamp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i], hi[extent*i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i+1], hi[extent*i+1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                        lo[extent*i+2], hi[extent*i+2]);</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = pt;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">float</span> * vals = (<span class=\"keywordtype\">float</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                            pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            arr[i] = pt;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html\">MFnDoubleArrayData</a> fnData;</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        iProp.get(ceilSamp,</div>\n\
<div class=\"line\">                            Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> arr((<span class=\"keywordtype\">float</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                            <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                        std::size_t sampSize = samp-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// size is different don&#39;t lerp</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sampSize != ceilSamp-&gt;size())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> * hi = (<span class=\"keywordtype\">float</span> *) ceilSamp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                arr[i] = simpleLerp&lt;double&gt;(alpha, arr[i],</div>\n\
<div class=\"line\">                                    hi[i]);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> arr((<span class=\"keywordtype\">float</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                            <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kFloat64POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// need to differentiate between vectors, points, and color array?</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isScalarLike &amp;&amp; extent &lt; 5)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> val[4];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    iProp.get(ceilSamp,</div>\n\
<div class=\"line\">                        Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                         val[i] = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                            ((<span class=\"keywordtype\">double</span> *)(samp-&gt;getData()))[i],</div>\n\
<div class=\"line\">                            ((<span class=\"keywordtype\">double</span> *)(ceilSamp-&gt;getData()))[i]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                         val[i] = ((<span class=\"keywordtype\">double</span> *)(samp-&gt;getData()))[i];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iHandle.<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ab0560d6e6e04c91a0195d02fd9123cf7\">setGenericDouble</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Double);</div>\n\
<div class=\"line\">                    numData.<a name=\"a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a080442213f99078dec21b4caac070980\">setData2Double</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k3Double);</div>\n\
<div class=\"line\">                    numData.<a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a815d28e9114691e9bf455cbbd0e80860\">setData3Double</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 4)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a3dfe68bf09c3e609cdb4c897dfcf3dbe\">MFnNumericData::k4Double</a>);</div>\n\
<div class=\"line\">                    numData.<a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#abdfc678c0ef91c15204b1c95d0ec0282\">setData4Double</a>(val[0], val[1], val[2], val[3]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string interp = iProp.getMetaData().get(<span class=\"stringliteral\">&quot;interpretation&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ((extent == 2 || extent == 3) &amp;&amp; (interp == <span class=\"stringliteral\">&quot;normal&quot;</span> ||</div>\n\
<div class=\"line\">                    interp == <span class=\"stringliteral\">&quot;vector&quot;</span> || interp == <span class=\"stringliteral\">&quot;rgb&quot;</span>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnData;</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        iProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#a08da0aae32e87c8a252152d1597b908e\">get</a>(ceilSamp,</div>\n\
<div class=\"line\">                            Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// size is different don&#39;t lerp</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sampSize != ceilSamp-&gt;size())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> * vals = (<span class=\"keywordtype\">double</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = vec;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> * lo = (<span class=\"keywordtype\">double</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> * hi = (<span class=\"keywordtype\">double</span> *) ceilSamp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i], hi[extent*i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i+1], hi[extent*i+1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                        lo[extent*i+2], hi[extent*i+2]);</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = vec;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> * vals = (<span class=\"keywordtype\">double</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                            vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                vec.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            arr[i] = vec;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (interp == <span class=\"stringliteral\">&quot;point&quot;</span> &amp;&amp; (extent == 2 || extent == 3))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html\">MFnPointArrayData</a> fnData;</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> arr(sampSize);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        iProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#aa54ebbec9252a61bd66cdd442bc5758a\">get</a>(ceilSamp,</div>\n\
<div class=\"line\">                            Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// size is different don&#39;t lerp</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sampSize != ceilSamp-&gt;size())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> * vals = (<span class=\"keywordtype\">double</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = pt;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> * lo = (<span class=\"keywordtype\">double</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> * hi = (<span class=\"keywordtype\">double</span> *) ceilSamp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i], hi[extent*i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                    lo[extent*i+1], hi[extent*i+1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = simpleLerp&lt;double&gt;(alpha,</div>\n\
<div class=\"line\">                                        lo[extent*i+2], hi[extent*i+2]);</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                arr[i] = pt;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> * vals = (<span class=\"keywordtype\">double</span> *) samp-&gt;getData();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = vals[extent*i];</div>\n\
<div class=\"line\">                            pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = vals[extent*i+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = vals[extent*i+2];</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            arr[i] = pt;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_point_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html\">MFnDoubleArrayData</a> fnData;</div>\n\
<div class=\"line\">                    iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        iProp.get(ceilSamp,</div>\n\
<div class=\"line\">                            Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> arr((<span class=\"keywordtype\">double</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                            <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                        std::size_t sampSize = samp-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// size is different don&#39;t lerp</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sampSize != ceilSamp-&gt;size())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> * hi = (<span class=\"keywordtype\">double</span> *) ceilSamp-&gt;getData();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                arr[i] = simpleLerp&lt;double&gt;(alpha, arr[i],</div>\n\
<div class=\"line\">                                    hi[i]);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> arr((<span class=\"keywordtype\">double</span> *) samp-&gt;getData(),</div>\n\
<div class=\"line\">                            <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(samp-&gt;size()));</div>\n\
<div class=\"line\">                        attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kStringPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isScalarLike &amp;&amp; extent == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                iHandle.<a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a35259cf4b39ca3fda1f82a262414df1f\">setString</a>(</div>\n\
<div class=\"line\">                    ((Alembic::Util::string *)samp-&gt;getData())[0].c_str());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnData;</div>\n\
<div class=\"line\">                iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> arr;</div>\n\
<div class=\"line\">                arr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(sampSize);</div>\n\
<div class=\"line\">                attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                Alembic::Util::string * strData =</div>\n\
<div class=\"line\">                    (Alembic::Util::string *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    arr[i] = strData[i].c_str();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kWstringPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isScalarLike &amp;&amp; extent == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.<a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a098617005093ea003cba4336e0b557cd\">get</a>(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">                iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a35259cf4b39ca3fda1f82a262414df1f\">setString</a>(</div>\n\
<div class=\"line\">                    ((Alembic::Util::wstring *)samp-&gt;getData())[0].c_str());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnData;</div>\n\
<div class=\"line\">                iProp.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampSize = (<span class=\"keywordtype\">unsigned</span> int)samp-&gt;size();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> arr;</div>\n\
<div class=\"line\">                arr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(sampSize);</div>\n\
<div class=\"line\">                attrObj = fnData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(arr);</div>\n\
<div class=\"line\">                Alembic::Util::wstring * strData =</div>\n\
<div class=\"line\">                    (Alembic::Util::wstring *) samp-&gt;getData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    arr[i] = (<span class=\"keywordtype\">wchar_t</span> *)strData[i].c_str();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!attrObj.<a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">        iHandle.<a name=\"a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(attrObj);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> readProp(<span class=\"keywordtype\">double</span> iFrame,</div>\n\
<div class=\"line\">              Alembic::Abc::IScalarProperty &amp; iProp,</div>\n\
<div class=\"line\">              <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> &amp; iHandle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj;</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::DataType dtype = iProp.getDataType();</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t extent = dtype.getExtent();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame, iProp.getTimeSampling(),</div>\n\
<div class=\"line\">                                     iProp.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dtype.getPod())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kBooleanPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent != 1)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Alembic::Util::bool_t val;</div>\n\
<div class=\"line\">            iProp.get(&amp;val, index);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aa0c1c73d4565b920be8dfaf63dd86273\">setGenericBool</a>(val != <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint8POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt8POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent != 1)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Alembic::Util::int8_t val;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::int8_t lo;</div>\n\
<div class=\"line\">                Alembic::Util::int8_t hi;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                iProp.get(&amp;lo, index);</div>\n\
<div class=\"line\">                iProp.get(&amp;hi, ceilIndex);</div>\n\
<div class=\"line\">                val = simpleLerp&lt;Alembic::Util::int8_t&gt;(alpha, lo, hi);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.get(&amp;val, index);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a027fa087d8231a483c9b2185b4c44c79\">setGenericChar</a>(val, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt16POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint16POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Util::int16_t val[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::int16_t lo[3];</div>\n\
<div class=\"line\">                Alembic::Util::int16_t hi[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                iProp.get(lo, index);</div>\n\
<div class=\"line\">                iProp.get(hi, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    val[i] = simpleLerp&lt;Alembic::Util::int16_t&gt;(alpha,</div>\n\
<div class=\"line\">                                                                lo[i],</div>\n\
<div class=\"line\">                                                                hi[i]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iProp.get(val, index);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a97b77a2898132515289cf23c90b6fb67\">setGenericShort</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Short);</div>\n\
<div class=\"line\">                numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a18c18071f3eb08524c54ed7670162385\">setData2Short</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a921e7463d71424b57d21e1b4b0afd214\">MFnNumericData::k3Short</a>);</div>\n\
<div class=\"line\">                numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a5d1ea08a8e766c1f59a9a549b06ef457\">setData3Short</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kUint32POD:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kInt32POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent &lt; 4)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::int32_t val[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::Util::int32_t lo[3];</div>\n\
<div class=\"line\">                    Alembic::Util::int32_t hi[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    iProp.get(lo, index);</div>\n\
<div class=\"line\">                    iProp.get(hi, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                         val[i] = simpleLerp&lt;Alembic::Util::int32_t&gt;(alpha,</div>\n\
<div class=\"line\">                                                                     lo[i],</div>\n\
<div class=\"line\">                                                                     hi[i]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(val, index);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a81003cc42dedeec794af08fa68c50735\">setGenericInt</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Int);</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#af0d55d1344ee45af1c4a65db8bf6c3cd\">setData2Int</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a41dc2fbaf8e389346f04d7b87267a128\">MFnNumericData::k3Int</a>);</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#aa51b4a58c3eed99f5160de96dea1c19c\">setData3Int</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kFloat32POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent &lt; 4)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> val[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> lo[3];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> hi[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    iProp.get(lo, index);</div>\n\
<div class=\"line\">                    iProp.get(hi, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                        val[i] = simpleLerp&lt;float&gt;(alpha, lo[i], hi[i]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(val, index);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#afae2adbfb78893e6cae1d4132d5a228a\">setGenericFloat</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Float);</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a99915a9f5ad5676b492488d0893237c7\">setData2Float</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a91f4ea6e351f41893ac43d373f9d647c\">MFnNumericData::k3Float</a>);</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a51869ca7faef6fcda2090c7b41276177\">setData3Float</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kFloat64POD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// need to differentiate between vectors, points, and color array?</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent &lt; 5)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> val[4];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != ceilIndex &amp;&amp; alpha != 0.0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> lo[4];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> hi[4];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    iProp.get(lo, index);</div>\n\
<div class=\"line\">                    iProp.get(hi, index);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (Alembic::Util::uint8_t i = 0; i &lt; extent; ++i)</div>\n\
<div class=\"line\">                        val[i] = simpleLerp&lt;double&gt;(alpha, lo[i], hi[i]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iProp.get(val, index);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ab0560d6e6e04c91a0195d02fd9123cf7\">setGenericDouble</a>(val[0], <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k2Double);</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a080442213f99078dec21b4caac070980\">setData2Double</a>(val[0], val[1]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(MFnNumericData::k3Double);</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a815d28e9114691e9bf455cbbd0e80860\">setData3Double</a>(val[0], val[1], val[2]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (extent == 4)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> numData;</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a82c1cfe8ea0f4ed6e13097715906d600\">create</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a3dfe68bf09c3e609cdb4c897dfcf3dbe\">MFnNumericData::k4Double</a>);</div>\n\
<div class=\"line\">                    numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#abdfc678c0ef91c15204b1c95d0ec0282\">setData4Double</a>(val[0], val[1], val[2], val[3]);</div>\n\
<div class=\"line\">                    iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a42e6e24bbccd21c967b11697305ee586\">setMObject</a>(numData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kStringPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Abc::IStringProperty strProp( iProp.getPtr(),</div>\n\
<div class=\"line\">                                                       Alembic::Abc::kWrapExisting );</div>\n\
<div class=\"line\">                iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a35259cf4b39ca3fda1f82a262414df1f\">setString</a>(strProp.getValue(index).c_str());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// MFnStringArrayData</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Alembic::Util::kWstringPOD:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (extent == 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Abc::IWstringProperty strProp( iProp.getPtr(),</div>\n\
<div class=\"line\">                                                        Alembic::Abc::kWrapExisting );</div>\n\
<div class=\"line\">                iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a35259cf4b39ca3fda1f82a262414df1f\">setString</a>(strProp.getValue(index).c_str());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!attrObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">        iHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(attrObj);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">WriterData::WriterData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">WriterData::~WriterData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// prop</span></div>\n\
<div class=\"line\">    mPropList.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">WriterData::WriterData(<span class=\"keyword\">const</span> WriterData &amp; rhs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    *<span class=\"keyword\">this</span> = rhs;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">WriterData &amp; WriterData::operator=(<span class=\"keyword\">const</span> WriterData &amp; rhs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mCameraList = rhs.mCameraList;</div>\n\
<div class=\"line\">    mCurvesList = rhs.mCurvesList;</div>\n\
<div class=\"line\">    mNurbsList = rhs.mNurbsList;</div>\n\
<div class=\"line\">    mPointsList = rhs.mPointsList;</div>\n\
<div class=\"line\">    mPolyMeshList = rhs.mPolyMeshList;</div>\n\
<div class=\"line\">    mSubDList = rhs.mSubDList;</div>\n\
<div class=\"line\">    mXformList = rhs.mXformList;</div>\n\
<div class=\"line\">    mPropList = rhs.mPropList;</div>\n\
<div class=\"line\">    mLocList = rhs.mLocList;</div>\n\
<div class=\"line\">    mAnimVisStaticObjList = rhs.mAnimVisStaticObjList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get all the sampled Maya objects</span></div>\n\
<div class=\"line\">    mCameraObjList = rhs.mCameraObjList;</div>\n\
<div class=\"line\">    mNurbsCurveObjList = rhs.mNurbsCurveObjList;</div>\n\
<div class=\"line\">    mNurbsObjList = rhs.mNurbsObjList;</div>\n\
<div class=\"line\">    mPointsObjList = rhs.mPointsObjList;</div>\n\
<div class=\"line\">    mPolyMeshObjList = rhs.mPolyMeshObjList;</div>\n\
<div class=\"line\">    mSubDObjList = rhs.mSubDObjList;</div>\n\
<div class=\"line\">    mXformOpList = rhs.mXformOpList;</div>\n\
<div class=\"line\">    mPropObjList = rhs.mPropObjList;</div>\n\
<div class=\"line\">    mIsComplexXform = rhs.mIsComplexXform;</div>\n\
<div class=\"line\">    mLocObjList = rhs.mLocObjList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mNumCurves = rhs.mNumCurves;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> WriterData::getFrameRange(<span class=\"keywordtype\">double</span> &amp; oMin, <span class=\"keywordtype\">double</span> &amp; oMax)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    oMin = DBL_MAX;</div>\n\
<div class=\"line\">    oMax = -DBL_MAX;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::TimeSamplingPtr ts;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t i = 0;</div>\n\
<div class=\"line\">    std::size_t iEnd = mLocList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::IScalarProperty locProp(mLocList[i].getProperties(), <span class=\"stringliteral\">&quot;locator&quot;</span>);</div>\n\
<div class=\"line\">        ts = locProp.getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples = locProp.getNumSamples();</div>\n\
<div class=\"line\">        oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">        oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mPointsList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ts = mPointsList[i].getSchema().getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples = mPointsList[i].getSchema().getNumSamples();</div>\n\
<div class=\"line\">        oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">        oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mPolyMeshList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ts = mPolyMeshList[i].mMesh.getSchema().getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples =</div>\n\
<div class=\"line\">            mPolyMeshList[i].mMesh.getSchema().getNumSamples();</div>\n\
<div class=\"line\">        oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">        oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt; Alembic::AbcGeom::IV2fGeomParam &gt;::iterator v2s, v2sEnd;</div>\n\
<div class=\"line\">        v2sEnd = mPolyMeshList[i].mV2s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (v2s = mPolyMeshList[i].mV2s.begin(); v2s != v2sEnd; ++v2s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ts = v2s-&gt;getTimeSampling();</div>\n\
<div class=\"line\">            numSamples = v2s-&gt;getNumSamples();</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt; Alembic::AbcGeom::IC3fGeomParam &gt;::iterator c3s, c3sEnd;</div>\n\
<div class=\"line\">        c3sEnd = mPolyMeshList[i].mC3s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (c3s = mPolyMeshList[i].mC3s.begin(); c3s != c3sEnd; ++c3s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ts = c3s-&gt;getTimeSampling();</div>\n\
<div class=\"line\">            numSamples = c3s-&gt;getNumSamples();</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt; Alembic::AbcGeom::IC4fGeomParam &gt;::iterator c4s, c4sEnd;</div>\n\
<div class=\"line\">        c4sEnd = mPolyMeshList[i].mC4s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (c4s = mPolyMeshList[i].mC4s.begin(); c4s != c4sEnd; ++c4s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ts = c4s-&gt;getTimeSampling();</div>\n\
<div class=\"line\">            numSamples = c4s-&gt;getNumSamples();</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mSubDList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ts = mSubDList[i].mMesh.getSchema().getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples = mSubDList[i].mMesh.getSchema().getNumSamples();</div>\n\
<div class=\"line\">        oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">        oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt; Alembic::AbcGeom::IC3fGeomParam &gt;::iterator c3s, c3sEnd;</div>\n\
<div class=\"line\">        c3sEnd = mSubDList[i].mC3s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (c3s = mSubDList[i].mC3s.begin(); c3s != c3sEnd; ++c3s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ts = c3s-&gt;getTimeSampling();</div>\n\
<div class=\"line\">            numSamples = c3s-&gt;getNumSamples();</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt; Alembic::AbcGeom::IC4fGeomParam &gt;::iterator c4s, c4sEnd;</div>\n\
<div class=\"line\">        c4sEnd = mSubDList[i].mC4s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (c4s = mSubDList[i].mC4s.begin(); c4s != c4sEnd; ++c4s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ts = c4s-&gt;getTimeSampling();</div>\n\
<div class=\"line\">            numSamples = c4s-&gt;getNumSamples();</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mXformList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ts = mXformList[i].getSchema().getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples = mXformList[i].getSchema().getNumSamples();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numSamples &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mCameraList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ts = mCameraList[i].getSchema().getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples = mCameraList[i].getSchema().getNumSamples();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numSamples &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mCurvesList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ts = mCurvesList[i].getSchema().getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples = mCurvesList[i].getSchema().getNumSamples();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numSamples &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mNurbsList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ts = mNurbsList[i].getSchema().getTimeSampling();</div>\n\
<div class=\"line\">        std::size_t numSamples = mNurbsList[i].getSchema().getNumSamples();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numSamples &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iEnd = mPropList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::size_t numSamples = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mPropList[i].mArray.valid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ts = mPropList[i].mArray.getTimeSampling();</div>\n\
<div class=\"line\">            numSamples = mPropList[i].mArray.getNumSamples();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ts = mPropList[i].mScalar.getTimeSampling();</div>\n\
<div class=\"line\">            numSamples = mPropList[i].mScalar.getNumSamples();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numSamples &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oMin = std::min(ts-&gt;getSampleTime(0), oMin);</div>\n\
<div class=\"line\">            oMax = std::max(ts-&gt;getSampleTime(numSamples-1), oMax);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ArgData::ArgData(std::vector&lt;std::string&gt;&amp; iFileNames,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iDebugOn, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> iReparentObj, <span class=\"keywordtype\">bool</span> iConnect,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> iConnectRootNodes, <span class=\"keywordtype\">bool</span> iCreateIfNotFound, <span class=\"keywordtype\">bool</span> iRemoveIfNoUpdate,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iRecreateColorSets, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> iFilterString,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> iExcludeFilterString) :</div>\n\
<div class=\"line\">        mFileNames(iFileNames),</div>\n\
<div class=\"line\">        mDebugOn(iDebugOn), mReparentObj(iReparentObj),</div>\n\
<div class=\"line\">        mRecreateColorSets(iRecreateColorSets),</div>\n\
<div class=\"line\">        mConnect(iConnect),</div>\n\
<div class=\"line\">        mConnectRootNodes(iConnectRootNodes),</div>\n\
<div class=\"line\">        mCreateIfNotFound(iCreateIfNotFound),</div>\n\
<div class=\"line\">        mRemoveIfNoUpdate(iRemoveIfNoUpdate),</div>\n\
<div class=\"line\">        mIncludeFilterString(iFilterString),</div>\n\
<div class=\"line\">        mExcludeFilterString(iExcludeFilterString)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mSequenceStartTime = -DBL_MAX;</div>\n\
<div class=\"line\">    mSequenceEndTime = DBL_MAX;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ArgData::ArgData(<span class=\"keyword\">const</span> ArgData &amp; rhs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    *<span class=\"keyword\">this</span> = rhs;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ArgData &amp; ArgData::operator=(<span class=\"keyword\">const</span> ArgData &amp; rhs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mFileNames = rhs.mFileNames;</div>\n\
<div class=\"line\">    mSequenceStartTime = rhs.mSequenceStartTime;</div>\n\
<div class=\"line\">    mSequenceEndTime = rhs.mSequenceEndTime;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mDebugOn = rhs.mDebugOn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mReparentObj = rhs.mReparentObj;</div>\n\
<div class=\"line\">    mRecreateColorSets = rhs.mRecreateColorSets;</div>\n\
<div class=\"line\">    mIncludeFilterString = rhs.mIncludeFilterString;</div>\n\
<div class=\"line\">    mExcludeFilterString = rhs.mExcludeFilterString;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// optional information for the &quot;connect&quot; flag</span></div>\n\
<div class=\"line\">    mConnect = rhs.mConnect;</div>\n\
<div class=\"line\">    mConnectRootNodes = rhs.mConnectRootNodes;</div>\n\
<div class=\"line\">    mCreateIfNotFound = rhs.mCreateIfNotFound;</div>\n\
<div class=\"line\">    mRemoveIfNoUpdate = rhs.mRemoveIfNoUpdate;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mData = rhs.mData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> createScene(ArgData &amp; iArgData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> returnName(<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::IArchive archive;</div>\n\
<div class=\"line\">    Alembic::AbcCoreFactory::IFactory factory;</div>\n\
<div class=\"line\">    factory.setPolicy(Alembic::Abc::ErrorHandler::kQuietNoopPolicy);</div>\n\
<div class=\"line\">    archive = factory.getArchive(iArgData.mFileNames);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!archive.valid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError = (*iArgData.mFileNames.begin()).c_str();</div>\n\
<div class=\"line\">        theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>( <span class=\"stringliteral\">&quot; &quot;</span> + AbcImportStrings::getString(AbcImportStrings::kErrorInvalidAlembic) );</div>\n\
<div class=\"line\">        printError(theError);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> returnName;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CreateSceneVisitor::Action action = CreateSceneVisitor::CREATE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iArgData.mRemoveIfNoUpdate &amp;&amp; iArgData.mCreateIfNotFound)</div>\n\
<div class=\"line\">        action = CreateSceneVisitor::CREATE_REMOVE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iArgData.mRemoveIfNoUpdate)</div>\n\
<div class=\"line\">        action = CreateSceneVisitor::REMOVE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iArgData.mCreateIfNotFound)</div>\n\
<div class=\"line\">        action = CreateSceneVisitor::CREATE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iArgData.mConnect)</div>\n\
<div class=\"line\">        action = CreateSceneVisitor::CONNECT;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CreateSceneVisitor visitor(iArgData.mSequenceStartTime,</div>\n\
<div class=\"line\">        iArgData.mRecreateColorSets, iArgData.mReparentObj, action,</div>\n\
<div class=\"line\">        iArgData.mConnectRootNodes, iArgData.mIncludeFilterString,</div>\n\
<div class=\"line\">        iArgData.mExcludeFilterString);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    visitor.walk(archive);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (visitor.hasSampledData())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        visitor.getData(iArgData.mData);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        iArgData.mData.getFrameRange(iArgData.mSequenceStartTime,</div>\n\
<div class=\"line\">            iArgData.mSequenceEndTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        returnName = connectAttr(iArgData);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iArgData.mConnect)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        visitor.applyShaderSelection();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    visitor.addFaceSetsAfterConnection();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> returnName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> connectAttr(ArgData &amp; iArgData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create a new AlembicNode and initialize all its input attributes</span></div>\n\
<div class=\"line\">    <a name=\"_a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> modifier;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcPlug, dstPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> alembicNodeObj = modifier.<a name=\"a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a4705595f671688d3a8148cfd0c8ab277\">createNode</a>(<span class=\"stringliteral\">&quot;AlembicNode&quot;</span>, &amp;status);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> alembicNodeFn(alembicNodeObj, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AlembicNode *alembicNodePtr =</div>\n\
<div class=\"line\">        <span class=\"keyword\">reinterpret_cast&lt;</span>AlembicNode*<span class=\"keyword\">&gt;</span>(alembicNodeFn.userNode(&amp;status));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status == MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        alembicNodePtr-&gt;setReaderPtrList(iArgData.mData);</div>\n\
<div class=\"line\">        alembicNodePtr-&gt;setDebugMode(iArgData.mDebugOn);</div>\n\
<div class=\"line\">        alembicNodePtr-&gt;setIncludeFilterString(iArgData.mIncludeFilterString);</div>\n\
<div class=\"line\">        alembicNodePtr-&gt;setExcludeFilterString(iArgData.mExcludeFilterString);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iArgData.mRecreateColorSets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;allColorSets&quot;</span>, <span class=\"stringliteral\">&quot;allColorSets&quot;</span>,</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>);</div>\n\
<div class=\"line\">        alembicNodeFn.addAttribute(attrObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set AlembicNode name</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName;</div>\n\
<div class=\"line\">    stripFileName((*iArgData.mFileNames.begin()).c_str(), fileName);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> alembicNodeName = fileName +<span class=\"stringliteral\">&quot;_AlembicNode&quot;</span>;</div>\n\
<div class=\"line\">    alembicNodeFn.setName(alembicNodeName, <span class=\"keyword\">false</span>, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set input file name (Deprecated but leaving here for legacy support)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;abc_File&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>((*iArgData.mFileNames.begin()).c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set input layer filename(s)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> layerFilesPlug = alembicNodeFn.findPlug(AlembicNode::mAbcLayerFileNamesAttr, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status == <a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> filenameStorage;</div>\n\
<div class=\"line\">        std::vector&lt; std::string &gt; &amp;argFilenames = iArgData.mFileNames;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; argFilenames.size(); i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> fileObject;</div>\n\
<div class=\"line\">            <span class=\"comment\">// FIXME MAYA-92896: remove path resolution when Maya will be able to deal with arrays of filepaths</span></div>\n\
<div class=\"line\">            fileObject.<a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a4b3d5deec3dc9475f712c8e0f2f4d9a2\">setResolveMethod</a>(MFileObject::MFileResolveMethod::kInputFile);</div>\n\
<div class=\"line\">            fileObject.<a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(argFilenames[i].c_str());</div>\n\
<div class=\"line\">            filenameStorage.<a name=\"a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( fileObject.<a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> updatedFilenameData = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>( filenameStorage, &amp;status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( status == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            layerFilesPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( updatedFilenameData );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set sequence start and end in frames</span></div>\n\
<div class=\"line\">    <a name=\"_a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> sec(1.0, <a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\">    plug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;startFrame&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(iArgData.mSequenceStartTime * sec.as(<a name=\"a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    plug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;endFrame&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(iArgData.mSequenceEndTime * sec.as(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set connect input info</span></div>\n\
<div class=\"line\">    plug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;connect&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(iArgData.mConnect);</div>\n\
<div class=\"line\">    plug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;createIfNotFound&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(iArgData.mCreateIfNotFound);</div>\n\
<div class=\"line\">    plug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;removeIfNoUpdate&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(iArgData.mRemoveIfNoUpdate);</div>\n\
<div class=\"line\">    plug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;connectRoot&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(iArgData.mConnectRootNodes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html\">MFnIntArrayData</a> fnIntArray;</div>\n\
<div class=\"line\">    fnIntArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_int_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> intArrayObj;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> intArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// make connection: time1.outTime --&gt; alembicNode.intime</span></div>\n\
<div class=\"line\">    dstPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;time&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    status = getPlugByName(<span class=\"stringliteral\">&quot;time1&quot;</span>, <span class=\"stringliteral\">&quot;outTime&quot;</span>, srcPlug);</div>\n\
<div class=\"line\">    status = modifier.<a name=\"a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\">    status = modifier.<a name=\"a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t subDSize       = iArgData.mData.mSubDObjList.size();</div>\n\
<div class=\"line\">    std::size_t polySize       = iArgData.mData.mPolyMeshObjList.size();</div>\n\
<div class=\"line\">    std::size_t cameraSize     = iArgData.mData.mCameraObjList.size();</div>\n\
<div class=\"line\">    std::size_t particleSize   = iArgData.mData.mPointsObjList.size();</div>\n\
<div class=\"line\">    std::size_t xformSize      = iArgData.mData.mXformOpList.size();</div>\n\
<div class=\"line\">    std::size_t nSurfaceSize   = iArgData.mData.mNurbsObjList.size();</div>\n\
<div class=\"line\">    std::size_t nCurveSize     = iArgData.mData.mNurbsCurveObjList.size();</div>\n\
<div class=\"line\">    std::size_t propSize       = iArgData.mData.mPropObjList.size();</div>\n\
<div class=\"line\">    std::size_t locatorSize    = iArgData.mData.mLocObjList.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (xformSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> logicalIndex = 0;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;transOp&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0 ; i &lt; xformSize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            SampledPair &amp; sampPair = iArgData.mData.mXformOpList[i];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> mObject = sampPair.getObject();</div>\n\
<div class=\"line\">            <a name=\"_a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> mFn(mObject, &amp;status);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampleSize = sampPair.sampledChannelSize();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; sampleSize; j ++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                srcPlug = srcArrayPlug.<a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::string attrName = sampPair.getSampleElement(j);</div>\n\
<div class=\"line\">                dstPlug = mFn.findPlug(attrName.c_str(), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dstPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\">                status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (subDSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;outSubDMesh&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; subDSize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(i);</div>\n\
<div class=\"line\">            <a name=\"_a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mFn(iArgData.mData.mSubDObjList[i], &amp;status);</div>\n\
<div class=\"line\">            dstPlug = mFn.findPlug(<span class=\"stringliteral\">&quot;inMesh&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">            status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\">            status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(<span class=\"stringliteral\">&quot;AlembicNode.outSubDMesh[&quot;</span>);</div>\n\
<div class=\"line\">                theError += i;</div>\n\
<div class=\"line\">                theError += <span class=\"stringliteral\">&quot;] --&gt; &quot;</span>;</div>\n\
<div class=\"line\">                theError += mFn.name();</div>\n\
<div class=\"line\">                theError += <span class=\"stringliteral\">&quot;.inMesh &quot;</span> + AbcImportStrings::getString(AbcImportStrings::kErrorConnectionNotMade);</div>\n\
<div class=\"line\">                printError(theError);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (polySize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;outPolyMesh&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; polySize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(i);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mFn(iArgData.mData.mPolyMeshObjList[i]);</div>\n\
<div class=\"line\">            dstPlug = mFn.findPlug(<span class=\"stringliteral\">&quot;inMesh&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\">            status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (locatorSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;outLoc&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> logicalIndex = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; locatorSize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> fnLocator(iArgData.mData.mLocObjList[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnLocator.findPlug(<span class=\"stringliteral\">&quot;localPositionX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnLocator.findPlug(<span class=\"stringliteral\">&quot;localPositionY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnLocator.findPlug(<span class=\"stringliteral\">&quot;localPositionZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnLocator.findPlug(<span class=\"stringliteral\">&quot;localScaleX&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnLocator.findPlug(<span class=\"stringliteral\">&quot;localScaleY&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnLocator.findPlug(<span class=\"stringliteral\">&quot;localScaleZ&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cameraSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;outCamera&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> logicalIndex = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; cameraSize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_camera.html\">MFnCamera</a> fnCamera(iArgData.mData.mCameraObjList[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;focalLength&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;lensSqueezeRatio&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;horizontalFilmAperture&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;verticalFilmAperture&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;horizontalFilmOffset&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;verticalFilmOffset&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;overscan&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;nearClipPlane&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;farClipPlane&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;fStop&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;focusDistance&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;shutterAngle&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;filmFitOffset&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;preScale&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug  = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;filmTranslateH&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;filmTranslateV&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;postScale&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(logicalIndex++);</div>\n\
<div class=\"line\">            dstPlug = fnCamera.findPlug(<span class=\"stringliteral\">&quot;cameraScale&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (propSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;prop&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0 ; i &lt; propSize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            SampledPair &amp; sampPair = iArgData.mData.mPropObjList[i];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj = sampPair.getObject();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> mFn(obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sampleSize = sampPair.sampledChannelSize();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; sampleSize; j ++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string attrName = sampPair.getSampleElement(j);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (attrName == Alembic::AbcGeom::kVisibilityPropertyName)</div>\n\
<div class=\"line\">                    dstPlug = mFn.findPlug(<span class=\"stringliteral\">&quot;visibility&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    dstPlug = mFn.findPlug(attrName.c_str(), <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (attrName != Alembic::AbcGeom::kVisibilityPropertyName &amp;&amp;</div>\n\
<div class=\"line\">                    (status != MS::kSuccess ||</div>\n\
<div class=\"line\">                    dstPlug.<a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(<span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">                    != attrName.c_str()))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(attrName.c_str());</div>\n\
<div class=\"line\">                    theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span> + AbcImportStrings::getString(AbcImportStrings::kErrorConnectionNotFound));</div>\n\
<div class=\"line\">                    printError(theError);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(index++);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> plugMod;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!dstPlug.<a name=\"a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    status = plugMod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\">                    status = plugMod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> theError(srcPlug.<a name=\"a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a58e7cf126b4fe51e9705cee4faaf59fc\">name</a>());</div>\n\
<div class=\"line\">                    theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; --&gt; &quot;</span>);</div>\n\
<div class=\"line\">                    theError += dstPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a58e7cf126b4fe51e9705cee4faaf59fc\">name</a>();</div>\n\
<div class=\"line\">                    theError += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span> + AbcImportStrings::getString(AbcImportStrings::kErrorConnectionNotMade));</div>\n\
<div class=\"line\">                    printError(theError);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (particleSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        printWarning(AbcImportStrings::getString(AbcImportStrings::kWarningNoAnimatedParticleSupport));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nSurfaceSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;outNSurface&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; nSurfaceSize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(i);</div>\n\
<div class=\"line\">            <a name=\"_a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html\">MFnNurbsSurface</a> fnNSurface(iArgData.mData.mNurbsObjList[i]);</div>\n\
<div class=\"line\">            dstPlug = fnNSurface.findPlug(<span class=\"stringliteral\">&quot;create&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\">            status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nCurveSize &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcArrayPlug = alembicNodeFn.findPlug(<span class=\"stringliteral\">&quot;outNCurveGrp&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; nCurveSize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            srcPlug = srcArrayPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(i);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curveObj = iArgData.mData.mNurbsCurveObjList[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// this could be null if there were more Alembic curves in a curve</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// group than there was dag nodes</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!curveObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html\">MFnNurbsCurve</a> fnNCurve(curveObj);</div>\n\
<div class=\"line\">                dstPlug = fnNCurve.findPlug(<span class=\"stringliteral\">&quot;create&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug, dstPlug);</div>\n\
<div class=\"line\">                status = modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> alembicNodeFn.name();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getUVandColorAttrs(Alembic::Abc::ICompoundProperty &amp; iParent,</div>\n\
<div class=\"line\">    std::vector&lt; Alembic::AbcGeom::IV2fGeomParam &gt; &amp; ioV2s,</div>\n\
<div class=\"line\">    std::vector&lt; Alembic::AbcGeom::IC3fGeomParam &gt; &amp; ioC3s,</div>\n\
<div class=\"line\">    std::vector&lt; Alembic::AbcGeom::IC4fGeomParam &gt; &amp; ioC4s,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iUnmarkedFaceVaryingColors)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> anyAnimated = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// invalid geom params bail early</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!iParent)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> anyAnimated;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::size_t numProps = iParent.getNumProperties();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (std::size_t i = 0; i &lt; numProps; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::PropertyHeader &amp; propHeader =</div>\n\
<div class=\"line\">            iParent.getPropertyHeader(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IV2fGeomParam::matches(propHeader) &amp;&amp;</div>\n\
<div class=\"line\">            Alembic::AbcGeom::isUV(propHeader))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IV2fGeomParam uvGeomParam(iParent,</div>\n\
<div class=\"line\">                propHeader.getName());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!anyAnimated)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                anyAnimated = !uvGeomParam.isConstant();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            ioV2s.push_back(uvGeomParam);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isColorSet(propHeader, iUnmarkedFaceVaryingColors))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IC3fGeomParam::matches(propHeader))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IC3fGeomParam cgp(iParent, propHeader.getName());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!anyAnimated)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                anyAnimated = !cgp.isConstant();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            ioC3s.push_back(cgp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IC4fGeomParam::matches(propHeader))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IC4fGeomParam cgp(iParent, propHeader.getName());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!anyAnimated)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                anyAnimated = !cgp.isConstant();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            ioC4s.push_back(cgp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> anyAnimated;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";