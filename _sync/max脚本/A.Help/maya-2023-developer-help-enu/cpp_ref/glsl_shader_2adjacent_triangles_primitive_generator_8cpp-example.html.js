var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: glslShader/adjacentTrianglesPrimitiveGenerator.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'glsl_shader_2adjacent_triangles_primitive_generator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: glslShader/adjacentTrianglesPrimitiveGenerator.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">glslShader/adjacentTrianglesPrimitiveGenerator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Example plugin: adjacentTrianglesPrimitiveGenerator.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in is an example of a custom MPxIndexBufferMutator.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It provides custom primitives based on shader requirements coming from </span></div>\n\
<div class=\"line\"><span class=\"comment\">// an MPxShaderOverride.  The name() in the MIndexBufferDescriptor is used </span></div>\n\
<div class=\"line\"><span class=\"comment\">// to signify a unique identifier for a custom buffer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Based on public domain code found here: http://prideout.net/blog/?p=54</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;adjacentTrianglesPrimitiveGenerator.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStatus.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxVertexBufferGenerator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MComponentDataIndexing.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_MSC_VER)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if (_MSC_VER &lt; 1600)</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keywordtype\">unsigned</span> __int64 uint64_t;</div>\n\
<div class=\"line\"><span class=\"comment\">// Other compilers</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>HalfEdge;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt;HalfEdge&gt; ThalfEdgeArray;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;uint64_t, size_t&gt; TedgeAdjacencyIndex;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    constexpr <span class=\"keywordtype\">size_t</span> UNDEFINED_INDEX = std::numeric_limits&lt;size_t&gt;::max();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>HalfEdge</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        uint64_t Vert;  <span class=\"comment\">// Vertex index at the end of this half-edge</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> Twin; <span class=\"comment\">// Oppositely oriented adjacent half-edge</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> Next; <span class=\"comment\">// Next half-edge around the face</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        HalfEdge() : Vert(UNDEFINED_INDEX), Twin(UNDEFINED_INDEX), Next(UNDEFINED_INDEX) {};</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasTwin()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> Twin != UNDEFINED_INDEX; };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> twinVert(<span class=\"keyword\">const</span> ThalfEdgeArray&amp; edgeArray)<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> next = edgeArray[Twin].Next;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> edgeArray[next].Vert;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VertexF</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> kTolerance;</div>\n\
<div class=\"line\">        VertexF(<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* buffer, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> bufferPos = index * 3;</div>\n\
<div class=\"line\">            x = buffer[bufferPos++];</div>\n\
<div class=\"line\">            y = buffer[bufferPos++];</div>\n\
<div class=\"line\">            z = buffer[bufferPos++];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isEqual(<span class=\"keyword\">const</span> VertexF &amp;rhs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (fabs(x - rhs.x) &lt; kTolerance &amp;&amp; fabs(y - rhs.y) &lt; kTolerance &amp;&amp; fabs(z - rhs.z) &lt; kTolerance);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> x, y, z;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> VertexF::kTolerance = 1e-5f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator&lt; (<span class=\"keyword\">const</span> VertexF&amp; lhs, <span class=\"keyword\">const</span> VertexF&amp; rhs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ((lhs.x - rhs.x) &lt; -VertexF::kTolerance) || </div>\n\
<div class=\"line\">               (fabs(lhs.x - rhs.x) &lt; VertexF::kTolerance &amp;&amp; (lhs.y - rhs.y) &lt; -VertexF::kTolerance) || </div>\n\
<div class=\"line\">               (fabs(lhs.x - rhs.x) &lt; VertexF::kTolerance &amp;&amp; fabs(lhs.y - rhs.y) &lt; VertexF::kTolerance &amp;&amp; (lhs.z - rhs.z) &lt; -VertexF::kTolerance);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VertexFMap</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getVertexId( <span class=\"keyword\">const</span> VertexF&amp; v );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt;VertexF, unsigned int&gt; TVtxMap;</div>\n\
<div class=\"line\">        TVtxMap vertexMap;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> clear() { TVtxMap empty; vertexMap.swap(empty); }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> VertexFMap::getVertexId( <span class=\"keyword\">const</span> VertexF&amp; v )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        VertexFMap::TVtxMap::const_iterator itVtx = vertexMap.find(v);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (itVtx != vertexMap.end())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> itVtx-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nextId = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)vertexMap.size();</div>\n\
<div class=\"line\">        vertexMap.insert(TVtxMap::value_type(v,nextId));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> nextId;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AdjacentTrianglesPrimitiveGenerator::AdjacentTrianglesPrimitiveGenerator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AdjacentTrianglesPrimitiveGenerator::~AdjacentTrianglesPrimitiveGenerator() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AdjacentTrianglesPrimitiveGenerator::mutateIndexBuffer( <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; originalBufferIndices, </div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positionBufferFloat, </div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MHWRender::MGeometry::DataType</a> indexBufferDataType,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">void</span>* indexData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriVerts = originalBufferIndices.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ThalfEdgeArray edgeArray;</div>\n\
<div class=\"line\">    edgeArray.resize(numTriVerts);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TedgeAdjacencyIndex adjacencyIndex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Iterate all triangles found in the old index buffer:</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexIndex = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> edgeIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    VertexFMap vertexMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (vertexIndex &lt; numTriVerts)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> A = originalBufferIndices[vertexIndex++];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vA = vertexMap.getVertexId(VertexF(positionBufferFloat, A));</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> B = originalBufferIndices[vertexIndex++];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vB = vertexMap.getVertexId(VertexF(positionBufferFloat, B));</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> C = originalBufferIndices[vertexIndex++];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vC = vertexMap.getVertexId(VertexF(positionBufferFloat, C));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the half-edge that goes from C to A:</span></div>\n\
<div class=\"line\">        adjacencyIndex.insert(TedgeAdjacencyIndex::value_type(vC | (uint64_t(vA) &lt;&lt; 32), edgeIndex));</div>\n\
<div class=\"line\">        edgeArray[edgeIndex].Vert = A;</div>\n\
<div class=\"line\">        edgeArray[edgeIndex].Next = 1 + edgeIndex;</div>\n\
<div class=\"line\">        ++edgeIndex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the half-edge that goes from A to B:</span></div>\n\
<div class=\"line\">        adjacencyIndex.insert(TedgeAdjacencyIndex::value_type(vA | (uint64_t(vB) &lt;&lt; 32), edgeIndex));</div>\n\
<div class=\"line\">        edgeArray[edgeIndex].Vert = B;</div>\n\
<div class=\"line\">        edgeArray[edgeIndex].Next = 1 + edgeIndex;</div>\n\
<div class=\"line\">        ++edgeIndex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the half-edge that goes from B to C:</span></div>\n\
<div class=\"line\">        adjacencyIndex.insert(TedgeAdjacencyIndex::value_type(vB | (uint64_t(vC) &lt;&lt; 32), edgeIndex));</div>\n\
<div class=\"line\">        edgeArray[edgeIndex].Vert = C;</div>\n\
<div class=\"line\">        edgeArray[edgeIndex].Next = edgeIndex - 2;</div>\n\
<div class=\"line\">        ++edgeIndex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// Done with vertexMap:</span></div>\n\
<div class=\"line\">    vertexMap.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (adjacencyIndex.size() != numTriVerts)</div>\n\
<div class=\"line\">        <span class=\"comment\">// Bad mesh: duplicated edges or inconsistent winding.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Populate the twin pointers by iterating over the index:</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> boundaryCount = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (TedgeAdjacencyIndex::const_iterator it = adjacencyIndex.begin(); it != adjacencyIndex.end(); ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        uint64_t edgeKey = it-&gt;first;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> edgeIndex = it-&gt;second; </div>\n\
<div class=\"line\">        uint64_t twinKey = ((edgeKey &amp; 0xffffffff) &lt;&lt; 32) | (edgeKey &gt;&gt; 32);</div>\n\
<div class=\"line\">        TedgeAdjacencyIndex::const_iterator twinIt = adjacencyIndex.find(twinKey);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (twinIt != adjacencyIndex.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            edgeArray[twinIt-&gt;second].Twin = edgeIndex;</div>\n\
<div class=\"line\">            edgeArray[edgeIndex].Twin = twinIt-&gt;second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++boundaryCount;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Done with adjacencyIndex:</span></div>\n\
<div class=\"line\">    TedgeAdjacencyIndex emptyIndex;</div>\n\
<div class=\"line\">    adjacencyIndex.swap(emptyIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now that we have a half-edge structure, it&#39;s easy to create adjacency info:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (boundaryCount &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> destOffset = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> edgeIndex = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> faceIndex = 0; faceIndex &lt; numTriVerts/3; ++faceIndex, edgeIndex += 3, destOffset += 6)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (indexBufferDataType == <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* pDest = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData) + destOffset;</div>\n\
<div class=\"line\">                pDest[0] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 2].Vert);</div>\n\
<div class=\"line\">                pDest[1] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 0].hasTwin() ? edgeArray[edgeIndex + 0].twinVert(edgeArray) : pDest[0]);</div>\n\
<div class=\"line\">                pDest[2] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 0].Vert);</div>\n\
<div class=\"line\">                pDest[3] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 1].hasTwin() ? edgeArray[edgeIndex + 1].twinVert(edgeArray) : pDest[2]);</div>\n\
<div class=\"line\">                pDest[4] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 1].Vert);</div>\n\
<div class=\"line\">                pDest[5] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 2].hasTwin() ? edgeArray[edgeIndex + 2].twinVert(edgeArray) : pDest[4]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (indexBufferDataType == <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a3d97c6fcb525dc79fed35f39fd7bab76\">MHWRender::MGeometry::kUnsignedInt16</a>) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>* pDest = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData) + destOffset;</div>\n\
<div class=\"line\">                pDest[0] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 2].Vert);</div>\n\
<div class=\"line\">                pDest[1] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 0].hasTwin() ? edgeArray[edgeIndex + 0].twinVert(edgeArray) : pDest[0]);</div>\n\
<div class=\"line\">                pDest[2] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 0].Vert);</div>\n\
<div class=\"line\">                pDest[3] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 1].hasTwin() ? edgeArray[edgeIndex + 1].twinVert(edgeArray) : pDest[2]);</div>\n\
<div class=\"line\">                pDest[4] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 1].Vert);</div>\n\
<div class=\"line\">                pDest[5] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 2].hasTwin() ? edgeArray[edgeIndex + 2].twinVert(edgeArray) : pDest[4]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (indexBufferDataType == <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a771a88748799bba09da625ffee5c6945\">MHWRender::MGeometry::kUnsignedChar</a>) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>* pDest = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>*)indexData) + destOffset;</div>\n\
<div class=\"line\">                pDest[0] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 2].Vert);</div>\n\
<div class=\"line\">                pDest[1] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 0].hasTwin() ? edgeArray[edgeIndex + 0].twinVert(edgeArray) : pDest[0]);</div>\n\
<div class=\"line\">                pDest[2] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 0].Vert);</div>\n\
<div class=\"line\">                pDest[3] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 1].hasTwin() ? edgeArray[edgeIndex + 1].twinVert(edgeArray) : pDest[2]);</div>\n\
<div class=\"line\">                pDest[4] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 1].Vert);</div>\n\
<div class=\"line\">                pDest[5] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 2].hasTwin() ? edgeArray[edgeIndex + 2].twinVert(edgeArray) : pDest[4]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> destOffset = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> edgeIndex = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> faceIndex = 0; faceIndex &lt; numTriVerts/3; ++faceIndex, edgeIndex += 3, destOffset += 6)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (indexBufferDataType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* pDest = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData) + destOffset;</div>\n\
<div class=\"line\">                pDest[0] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 2].Vert);</div>\n\
<div class=\"line\">                pDest[1] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 0].twinVert(edgeArray));</div>\n\
<div class=\"line\">                pDest[2] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 0].Vert);</div>\n\
<div class=\"line\">                pDest[3] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 1].twinVert(edgeArray));</div>\n\
<div class=\"line\">                pDest[4] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 1].Vert);</div>\n\
<div class=\"line\">                pDest[5] = (<span class=\"keywordtype\">unsigned</span> int)(edgeArray[edgeIndex + 2].twinVert(edgeArray));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (indexBufferDataType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a3d97c6fcb525dc79fed35f39fd7bab76\">MHWRender::MGeometry::kUnsignedInt16</a>) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>* pDest = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData) + destOffset;</div>\n\
<div class=\"line\">                pDest[0] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 2].Vert);</div>\n\
<div class=\"line\">                pDest[1] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 0].twinVert(edgeArray));</div>\n\
<div class=\"line\">                pDest[2] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 0].Vert);</div>\n\
<div class=\"line\">                pDest[3] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 1].twinVert(edgeArray));</div>\n\
<div class=\"line\">                pDest[4] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 1].Vert);</div>\n\
<div class=\"line\">                pDest[5] = (<span class=\"keywordtype\">unsigned</span> short)(edgeArray[edgeIndex + 2].twinVert(edgeArray));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (indexBufferDataType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a771a88748799bba09da625ffee5c6945\">MHWRender::MGeometry::kUnsignedChar</a>) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>* pDest = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>*)indexData) + destOffset;</div>\n\
<div class=\"line\">                pDest[0] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 2].Vert);</div>\n\
<div class=\"line\">                pDest[1] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 0].twinVert(edgeArray));</div>\n\
<div class=\"line\">                pDest[2] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 0].Vert);</div>\n\
<div class=\"line\">                pDest[3] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 1].twinVert(edgeArray));</div>\n\
<div class=\"line\">                pDest[4] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 1].Vert);</div>\n\
<div class=\"line\">                pDest[5] = (<span class=\"keywordtype\">unsigned</span> char)(edgeArray[edgeIndex + 2].twinVert(edgeArray));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MHWRender::MGeometry::Primitive</a> AdjacentTrianglesPrimitiveGenerator::mutateIndexing(<span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing_list.html\">MHWRender::MComponentDataIndexingList</a>&amp; sourceIndexBuffers, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html\">MHWRender::MVertexBufferArray</a>&amp; vertexBuffers,</div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>&amp; indexBuffer,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>&amp; primitiveStride)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a> *positionBuffer = NULL;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ivb = 0; ivb &lt; vertexBuffers.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html#ab1eb6de2bf3aa228929ab4b40c73507c\">count</a>() &amp;&amp; positionBuffer == NULL; ++ivb)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a> *currBuffer = vertexBuffers.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html#a621df52a0b7842e1bad3bb7472c8d5e0\">getBuffer</a>(ivb);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positionBuffer == NULL &amp;&amp; currBuffer-&gt;<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>().<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() == <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>)</div>\n\
<div class=\"line\">            positionBuffer = currBuffer;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (positionBuffer == NULL)</div>\n\
<div class=\"line\">        <span class=\"comment\">// We need at least the positions:</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea7354c5e6b4c4c152b77e663e2e59e0c3\">MHWRender::MGeometry::kInvalidPrimitive</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* positionBufferFloat = (<span class=\"keywordtype\">float</span>*)positionBuffer-&gt;<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#abc9e783c4d7826700a6a6824451f8230\">map</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> x = 0; x &lt; sourceIndexBuffers.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>(); ++x)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sourceIndexBuffers[x]-&gt;componentType() != MHWRender::MComponentDataIndexing::kFaceVertex)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; originalBufferIndices = sourceIndexBuffers[x]-&gt;indices();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriVerts = originalBufferIndices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTri = numTriVerts / 3;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> triSize = 6;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> bufferSize = numTri * triSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span>* indexData = indexBuffer.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(bufferSize, <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly - we don&#39;t need the current buffer values*/</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (indexData != NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mutateIndexBuffer( originalBufferIndices, positionBufferFloat,</div>\n\
<div class=\"line\">                               indexBuffer.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>(), indexData );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positionBuffer) positionBuffer-&gt;<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">        indexBuffer.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(indexData);</div>\n\
<div class=\"line\">        primitiveStride = triSize;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea8f0eb61b069ef24cc331fb6e731725a3\">MHWRender::MGeometry::kAdjacentTriangles</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (positionBuffer) positionBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea7354c5e6b4c4c152b77e663e2e59e0c3\">MHWRender::MGeometry::kInvalidPrimitive</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the primitive generator creation function registered with the DrawRegistry.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Used to initialize a custom primitive generator.</span></div>\n\
<div class=\"line\"><a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_index_buffer_mutator.html\">MHWRender::MPxIndexBufferMutator</a>* AdjacentTrianglesPrimitiveGenerator::createAdjacentTrianglesPrimitiveGenerator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> AdjacentTrianglesPrimitiveGenerator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";