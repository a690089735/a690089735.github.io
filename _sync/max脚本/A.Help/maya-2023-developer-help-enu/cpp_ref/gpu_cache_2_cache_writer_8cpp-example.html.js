var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/CacheWriter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2_cache_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/CacheWriter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/CacheWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheUtil.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheStrings.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimControl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMeshData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVectorArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUintArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGeometryExtractor.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSingleIndexedComponent.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPathArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTransform.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span> <span class=\"comment\">// for memcmp</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS CacheWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::map&lt;std::string,void*&gt; CacheWriter::fsRegistry;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;CacheWriter&gt; CacheWriter::create(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; impl,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file, <span class=\"keywordtype\">char</span> compressLevel)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::string key = impl.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    std::map&lt;std::string,void*&gt;::iterator iter = fsRegistry.find(key);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iter != fsRegistry.end()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ((CreateFunction*)(*iter).second)(file, compressLevel);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    assert(<span class=\"stringliteral\">&quot;not implemented&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::shared_ptr&lt;CacheWriter&gt;();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CacheWriter::registerWriter(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; impl, CreateFunction func)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::string key = impl.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    fsRegistry[key] = (<span class=\"keywordtype\">void</span>*)func;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS CacheXformSampler</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>CacheXformSampler::MakeSharedEnabler: <span class=\"keyword\">public</span> CacheXformSampler {</div>\n\
<div class=\"line\">    MakeSharedEnabler(<span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; xformObject): CacheXformSampler(xformObject) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;CacheXformSampler&gt;</div>\n\
<div class=\"line\">CacheXformSampler::create(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; xformObject)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MakeSharedEnabler&gt;(xformObject);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CacheXformSampler::CacheXformSampler(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; xformObject)</div>\n\
<div class=\"line\">    : fXform(xformObject),</div>\n\
<div class=\"line\">      fIsFirstSample(true),</div>\n\
<div class=\"line\">      <span class=\"comment\">// The first sample is always considered animated as we have to</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// capture its values.</span></div>\n\
<div class=\"line\">      fXformAnimated(true),</div>\n\
<div class=\"line\">      fVisibilitySample(false),</div>\n\
<div class=\"line\">      fVisibilityAnimated(true)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CacheXformSampler::~CacheXformSampler()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CacheXformSampler::addSample()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>      prevXformSample      = fXformSample;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>         prevVisibilitySample = fVisibilitySample;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fXformSample       = fXform.transformationMatrix();</div>\n\
<div class=\"line\">    fVisibilitySample  = ShapeVisibilityChecker(fXform.object()).isVisible();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fIsFirstSample) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// The first sample is always considered animated as we have</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to capture its values.</span></div>\n\
<div class=\"line\">        fIsFirstSample = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        fXformAnimated = (prevXformSample != fXformSample);</div>\n\
<div class=\"line\">        fVisibilityAnimated = (prevVisibilitySample != fVisibilitySample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const XformSample&gt;</div>\n\
<div class=\"line\">CacheXformSampler::getSample(<span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;XformSample&gt; sample =</div>\n\
<div class=\"line\">        XformSample::create(</div>\n\
<div class=\"line\">            timeInSeconds,fXformSample, <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(), fVisibilitySample);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS CacheMeshSampler::AttributeSet</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CacheMeshSampler::AttributeSet::AttributeSet(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshObject,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> visibility,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> IndexBuffer::index_t index_t;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MayaMeshExtractor&lt;index_t&gt; extractor(meshObject);</div>\n\
<div class=\"line\">    extractor.setWantUVs(needUVs);</div>\n\
<div class=\"line\">    extractor.compute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;index_t&gt; &gt; wireIndices     = extractor.wireIndices();</div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;index_t&gt; &gt; triangleIndices = extractor.triangleIndices();</div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;float&gt; &gt; positions = extractor.positions();</div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;float&gt; &gt; normals   = extractor.normals();</div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;float&gt; &gt; uvs;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (needUVs) {</div>\n\
<div class=\"line\">        uvs = extractor.uvs();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fNumWires     = wireIndices-&gt;size() / 2;</div>\n\
<div class=\"line\">    fNumTriangles = triangleIndices-&gt;size() / 3;</div>\n\
<div class=\"line\">    fNumVerts     = positions-&gt;size() / 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fWireVertIndices = IndexBuffer::create(wireIndices);</div>\n\
<div class=\"line\">    fTriangleVertIndices.push_back(IndexBuffer::create(triangleIndices));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fPositions = VertexBuffer::createPositions(positions);</div>\n\
<div class=\"line\">    fNormals   = VertexBuffer::createNormals(normals);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (needUVs) {</div>\n\
<div class=\"line\">        fUVs       = VertexBuffer::createUVs(uvs);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> minX = +std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> minY = +std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> minZ = +std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> maxX = -std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> maxY = -std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> maxZ = -std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        VertexBuffer::ReadInterfacePtr readable = fPositions-&gt;readableInterface();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* srcPositions = readable-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i=0; i&lt;fNumVerts; ++i) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> x = srcPositions[3*i + 0];</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> y = srcPositions[3*i + 1];</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> z = srcPositions[3*i + 2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            minX = std::min(x, minX);</div>\n\
<div class=\"line\">            minY = std::min(y, minY);</div>\n\
<div class=\"line\">            minZ = std::min(z, minZ);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            maxX = std::max(x, maxX);</div>\n\
<div class=\"line\">            maxY = std::max(y, maxY);</div>\n\
<div class=\"line\">            maxZ = std::max(z, maxZ);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fBoundingBox = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(<a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(minX, minY, minZ),</div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(maxX, maxY, maxZ));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fVisibility  = visibility;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CacheMeshSampler::AttributeSet::AttributeSet(</div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; mesh,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> useBaseTessellation</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">    :fNumWires(0),</div>\n\
<div class=\"line\">    fNumTriangles(0),</div>\n\
<div class=\"line\">    fNumVerts(0),</div>\n\
<div class=\"line\">    fVisibility(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Refresh the internal shape, otherwise topo changes make mesh.numPolygons() crash.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that buildShaderAssignmentGroups() also call mesh.numPolygons().</span></div>\n\
<div class=\"line\">    mesh.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a5e980be04112646bb555d4bb865581e7\">syncObject</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">    mesh.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#adfb40b1f56af23ad94c4ca77c9a147b5\">getPath</a>(dagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build a geometry request and add requirements to it.</span></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html\">MHWRender::MGeometryRequirements</a> geomRequirements;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Build descriptors to request the positions, normals and UVs  </span></div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MVertexBufferDescriptor</a> posDesc(<span class=\"stringliteral\">&quot;&quot;</span>, MGeometry::kPosition, MGeometry::kFloat, 3);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MVertexBufferDescriptor</a> normalDesc(<span class=\"stringliteral\">&quot;&quot;</span>, MGeometry::kNormal, MGeometry::kFloat, 3);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MVertexBufferDescriptor</a> uvDesc(mesh.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a63648568635afc4b0935ee0c4d712565\">currentUVSetName</a>(), MGeometry::kTexture, MGeometry::kFloat, 2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add the descriptors to the geometry requirements</span></div>\n\
<div class=\"line\">    geomRequirements.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html#a701ff08a8e58c9451fe6a3794e577027\">addVertexRequirement</a>(posDesc);</div>\n\
<div class=\"line\">    geomRequirements.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html#a701ff08a8e58c9451fe6a3794e577027\">addVertexRequirement</a>(normalDesc);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (needUVs)</div>\n\
<div class=\"line\">        geomRequirements.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html#a701ff08a8e58c9451fe6a3794e577027\">addVertexRequirement</a>(uvDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> noName; <span class=\"comment\">// we do not need custom named index buffers here.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create a component to include all elements.</span></div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> comp;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> compObj = comp.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae3b7a9c926f9770f786893bbea825d6b\">create</a>(<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a5ddabf9726f89e07cff62014221fe6fb\">MFn::kMeshPolygonComponent</a>);</div>\n\
<div class=\"line\">    comp.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae4dcbac2a79082a32f18c613803a1c3f\">setCompleteData</a>(mesh.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create edge component</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> edgeComp;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> edgeCompObj = edgeComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae3b7a9c926f9770f786893bbea825d6b\">create</a>(<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a18f788d50a75ca81a0dc5a2538f364ae\">MFn::kMeshEdgeComponent</a>);</div>\n\
<div class=\"line\">    edgeComp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#ae4dcbac2a79082a32f18c613803a1c3f\">setCompleteData</a>(mesh.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a742ce017199905f06ad07c178375a2d8\">numEdges</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the edge line index buffer to the requirements</span></div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer_descriptor.html\">MIndexBufferDescriptor</a> edgeDesc(MIndexBufferDescriptor::kEdgeLine, noName, MGeometry::kLines, 2, edgeCompObj);</div>\n\
<div class=\"line\">    geomRequirements.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html#ade8935319d3d2463ab9ff0499580e5a0\">addIndexingRequirement</a>(edgeDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add a triangle buffer to the requirements</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer_descriptor.html\">MIndexBufferDescriptor</a> triangleDesc(MIndexBufferDescriptor::kTriangle, noName, MGeometry::kTriangles, 3, compObj);</div>\n\
<div class=\"line\">    geomRequirements.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html#ade8935319d3d2463ab9ff0499580e5a0\">addIndexingRequirement</a>(triangleDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> IndexBuffer::index_t index_t;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We ignore the Smooth Preview option on the mesh shape node when</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// using base tessellation.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> extractorOptions = MHWRender::kPolyGeom_Normal;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (useBaseTessellation) {</div>\n\
<div class=\"line\">        extractorOptions |= MHWRender::kPolyGeom_BaseMesh;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create an extractor to get the geometry</span></div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_extractor.html\">MHWRender::MGeometryExtractor</a> extractor(geomRequirements,dagPath, extractorOptions, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kFailure==status)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the number of vertices from the extractor</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numVertices   = extractor.vertexCount();</div>\n\
<div class=\"line\">    <span class=\"comment\">// get the number of primitives (triangles, lines, etc.)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numWires = extractor.primitiveCount(edgeDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create the arrays that the generator will fill</span></div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;float&gt; vertices(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numVertices*posDesc.stride()]);</div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;float&gt; normals(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numVertices*normalDesc.stride()]);</div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;float&gt; uvs(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numVertices*uvDesc.stride()]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> minBufferSize = extractor.minimumBufferSize(numWires, edgeDesc.primitive());</div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;index_t&gt; wireframeIdx(<span class=\"keyword\">new</span> index_t[minBufferSize]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// populate the index buffer for the edges</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kFailure==extractor.populateIndexBuffer(wireframeIdx.get(), numWires, edgeDesc))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"comment\">// populate the vertex buffers you are interested in. (pos, normal, and uv)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kFailure==extractor.populateVertexBuffer(vertices.get(), numVertices, posDesc))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kFailure==extractor.populateVertexBuffer(normals.get(), numVertices, normalDesc))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (needUVs &amp;&amp; MS::kFailure==extractor.populateVertexBuffer(uvs.get(), numVertices, uvDesc))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// populate the index buffers for all the triangle components</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::vector&lt;std::shared_ptr&lt;Array&lt;index_t&gt; &gt; &gt; trgIdxGrps;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get the index buffer count from the extractor</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles = extractor.primitiveCount(triangleDesc);</div>\n\
<div class=\"line\">        minBufferSize = extractor.minimumBufferSize(numTriangles, triangleDesc.primitive());</div>\n\
<div class=\"line\">        GPUCache::shared_array&lt;index_t&gt; triangleIdx(<span class=\"keyword\">new</span> index_t[minBufferSize]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numTriangles != 0) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (MS::kFailure==extractor.populateIndexBuffer(triangleIdx.get(), numTriangles, triangleDesc))</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            fNumTriangles += (size_t)numTriangles;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        trgIdxGrps.push_back(SharedArray&lt;index_t&gt;::create(</div>\n\
<div class=\"line\">            triangleIdx, 3 * numTriangles));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> i=0, offset=0; i&lt;trgIdxGrps.size(); ++i) {</div>\n\
<div class=\"line\">            fTriangleVertIndices.push_back(IndexBuffer::create(</div>\n\
<div class=\"line\">                trgIdxGrps[0], offset, offset + trgIdxGrps[i]-&gt;size()));</div>\n\
<div class=\"line\">            offset += trgIdxGrps[i]-&gt;size();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fNumWires     = (size_t)numWires;</div>\n\
<div class=\"line\">    fNumVerts     = (size_t)numVertices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fWireVertIndices = IndexBuffer::create(</div>\n\
<div class=\"line\">        SharedArray&lt;index_t&gt;::create( wireframeIdx, 2 * fNumWires));   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fPositions = VertexBuffer::createPositions(</div>\n\
<div class=\"line\">        SharedArray&lt;float&gt;::create( vertices, 3 * fNumVerts));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fNormals = VertexBuffer::createNormals(</div>\n\
<div class=\"line\">        SharedArray&lt;float&gt;::create( normals, 3 * fNumVerts));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (needUVs) {</div>\n\
<div class=\"line\">        fUVs = VertexBuffer::createUVs(</div>\n\
<div class=\"line\">            SharedArray&lt;float&gt;::create(uvs, 2 * fNumVerts));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fBoundingBox = mesh.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a9efd77281910086e293d68b2ea568663\">boundingBox</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check visibility </span></div>\n\
<div class=\"line\">    fVisibility = ShapeVisibilityChecker(mesh.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#a7a8204dee26df7900252fd8294090865\">object</a>()).isVisible();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CacheMeshSampler::AttributeSet::updateAnimatedChannels(</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>&amp; animated, <span class=\"keyword\">const</span> AttributeSet&amp; newer</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> numWiresAnimated     = fNumWires     != newer.fNumWires;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> numTrianglesAnimated = fNumTriangles != newer.fNumTriangles;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> numVertsAnimated     = fNumVerts     != newer.fNumVerts;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> wiresAnimated = fWireVertIndices != newer.fWireVertIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We reuse the triangulation from the previous sample</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// if the topology of the wire mesh is not changing. This is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// done to avoid performance issue due to position dependent</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// triangulation of animated meshes. </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> trianglesAnimated =</div>\n\
<div class=\"line\">        (!numWiresAnimated &amp;&amp; !numTrianglesAnimated &amp;&amp; !numVertsAnimated &amp;&amp;</div>\n\
<div class=\"line\">         !wiresAnimated) ?</div>\n\
<div class=\"line\">        <span class=\"keyword\">false</span> :</div>\n\
<div class=\"line\">        (fTriangleVertIndices != newer.fTriangleVertIndices);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> positionsAnimated = fPositions != newer.fPositions;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> normalsAnimated   = fNormals   != newer.fNormals;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> uvsAnimated       = fUVs       != newer.fUVs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> boundingBoxAnimated =</div>\n\
<div class=\"line\">        (!fBoundingBox.min().isEquivalent(newer.fBoundingBox.min()) ||</div>\n\
<div class=\"line\">         !fBoundingBox.max().isEquivalent(newer.fBoundingBox.max()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> visibilityAnimated = fVisibility != newer.fVisibility;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fNumWires     = newer.fNumWires;</div>\n\
<div class=\"line\">    fNumTriangles = newer.fNumTriangles;</div>\n\
<div class=\"line\">    fNumVerts     = newer.fNumVerts;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fWireVertIndices = wiresAnimated ? newer.fWireVertIndices : fWireVertIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fTriangleVertIndices = trianglesAnimated ? newer.fTriangleVertIndices : fTriangleVertIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fPositions = positionsAnimated ? newer.fPositions : fPositions;</div>\n\
<div class=\"line\">    fNormals   = normalsAnimated   ? newer.fNormals   : fNormals;</div>\n\
<div class=\"line\">    fUVs       = uvsAnimated       ? newer.fUVs       : fUVs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fBoundingBox = newer.fBoundingBox;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fVisibility  = newer.fVisibility;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    animated =</div>\n\
<div class=\"line\">        numWiresAnimated || numTrianglesAnimated || numVertsAnimated ||</div>\n\
<div class=\"line\">        wiresAnimated || trianglesAnimated ||</div>\n\
<div class=\"line\">        positionsAnimated || normalsAnimated || uvsAnimated ||</div>\n\
<div class=\"line\">        boundingBoxAnimated || visibilityAnimated;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS CacheMeshSampler</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>CacheMeshSampler::MakeSharedEnabler: <span class=\"keyword\">public</span> CacheMeshSampler{</div>\n\
<div class=\"line\">    MakeSharedEnabler(<span class=\"keywordtype\">bool</span> needUVs):CacheMeshSampler(needUVs){}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;CacheMeshSampler&gt; CacheMeshSampler::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MakeSharedEnabler&gt;(needUVs);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CacheMeshSampler::CacheMeshSampler(<span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">    : fNeedUVs(needUVs), fUseBaseTessellation(false), fIsAnimated(true)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CacheMeshSampler::~CacheMeshSampler()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CacheMeshSampler::addSample(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshObject, <span class=\"keywordtype\">bool</span> visibility)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fAttributeSet.updateAnimatedChannels(</div>\n\
<div class=\"line\">        fIsAnimated, AttributeSet(meshObject, visibility, fNeedUVs));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CacheMeshSampler::addSampleFromMesh(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; mesh)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fAttributeSet.updateAnimatedChannels(</div>\n\
<div class=\"line\">        fIsAnimated, AttributeSet(mesh, fNeedUVs, fUseBaseTessellation));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const ShapeSample&gt;</div>\n\
<div class=\"line\">CacheMeshSampler::getSample(<span class=\"keywordtype\">double</span> timeInSeconds, <span class=\"keyword\">const</span> <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; diffuseColor)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fAttributeSet.fVisibility) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// return an empty sample if the shape is invisible</span></div>\n\
<div class=\"line\">        std::shared_ptr&lt;ShapeSample&gt; sample = </div>\n\
<div class=\"line\">        ShapeSample::createEmptySample(timeInSeconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ShapeSample&gt; sample =</div>\n\
<div class=\"line\">        ShapeSample::create(</div>\n\
<div class=\"line\">            timeInSeconds,</div>\n\
<div class=\"line\">            fAttributeSet.fNumWires,</div>\n\
<div class=\"line\">            fAttributeSet.fNumVerts,</div>\n\
<div class=\"line\">            fAttributeSet.fWireVertIndices,</div>\n\
<div class=\"line\">            fAttributeSet.fTriangleVertIndices,</div>\n\
<div class=\"line\">            fAttributeSet.fPositions,</div>\n\
<div class=\"line\">            fAttributeSet.fBoundingBox,</div>\n\
<div class=\"line\">            diffuseColor,</div>\n\
<div class=\"line\">            fAttributeSet.fVisibility</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\">    sample-&gt;setNormals(fAttributeSet.fNormals);</div>\n\
<div class=\"line\">    sample-&gt;setUVs(fAttributeSet.fUVs);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";