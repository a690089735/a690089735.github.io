var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcBullet/AbcWriteJob.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_bullet_2_abc_write_job_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcBullet/AbcWriteJob.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcBullet/AbcWriteJob.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2012,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;AbcWriteJob.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/cxx17_enter_legacy_scope.hpp&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcCoreOgawa/All.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/cxx17_exit_legacy_scope.hpp&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> hasDuplicates(<span class=\"keyword\">const</span> util::ShapeSet &amp; dagPath, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> stripDepth)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::map&lt;std::string, MDagPath&gt; roots;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> util::ShapeSet::const_iterator end = dagPath.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (util::ShapeSet::const_iterator it = dagPath.begin();</div>\n\
<div class=\"line\">            it != end; it++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string fullName = it-&gt;fullPathName().asChar();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!fullName.empty() &amp;&amp; fullName[0] == <span class=\"charliteral\">&#39;|&#39;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fullName = fullName.substr(1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stripDepth &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = fullName.c_str();</div>\n\
<div class=\"line\">                fullName = util::stripNamespaces(name, stripDepth).<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::map&lt;std::string, MDagPath&gt;::iterator strIt =</div>\n\
<div class=\"line\">                roots.find(fullName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (strIt != roots.end())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string theError = <span class=\"stringliteral\">&quot;Conflicting root node names specified: &quot;</span>;</div>\n\
<div class=\"line\">                theError += it-&gt;fullPathName().asChar();</div>\n\
<div class=\"line\">                theError += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">                theError += strIt-&gt;second.fullPathName().asChar();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (stripDepth &gt; 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    theError += <span class=\"stringliteral\">&quot; with -stripNamespace specified.&quot;</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">throw</span> std::runtime_error(theError);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                roots[fullName] = *it;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addToString(std::string &amp; str,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string &amp; name, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> value)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (value &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::stringstream ss;</div>\n\
<div class=\"line\">            ss &lt;&lt; value;</div>\n\
<div class=\"line\">            str += name + std::string(<span class=\"stringliteral\">&quot; &quot;</span>) + ss.str() + std::string(<span class=\"stringliteral\">&quot; &quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> processCallback(std::string iCallback, <span class=\"keywordtype\">bool</span> isMelCallback,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> iFrame, <span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> &amp; iBbox)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iCallback.empty())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> pos = iCallback.find(<span class=\"stringliteral\">&quot;#FRAME#&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pos != std::string::npos )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::stringstream sstrm;</div>\n\
<div class=\"line\">            sstrm.precision(std::numeric_limits&lt;double&gt;::digits10);</div>\n\
<div class=\"line\">            sstrm &lt;&lt; iFrame;</div>\n\
<div class=\"line\">            std::string str = sstrm.str();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            iCallback.replace(pos, 7, str);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pos = iCallback.find(<span class=\"stringliteral\">&quot;#BOUNDS#&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pos != std::string::npos )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::stringstream sstrm;</div>\n\
<div class=\"line\">            sstrm.precision(std::numeric_limits&lt;float&gt;::digits10);</div>\n\
<div class=\"line\">            sstrm &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; iBbox.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>().<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>().<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt;</div>\n\
<div class=\"line\">                iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>().<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; iBbox.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt;</div>\n\
<div class=\"line\">                iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt;iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::string str = sstrm.str();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            iCallback.replace(pos, 8, str);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pos = iCallback.find(<span class=\"stringliteral\">&quot;#BOUNDSARRAY#&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pos != std::string::npos )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::stringstream sstrm;</div>\n\
<div class=\"line\">            sstrm.precision(std::numeric_limits&lt;float&gt;::digits10);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isMelCallback)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                sstrm &lt;&lt; <span class=\"stringliteral\">&quot; {&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                sstrm &lt;&lt; <span class=\"stringliteral\">&quot; [&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sstrm &lt;&lt; iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt;</div>\n\
<div class=\"line\">                iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt;</div>\n\
<div class=\"line\">                iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; iBbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isMelCallback)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                sstrm &lt;&lt; <span class=\"stringliteral\">&quot;} &quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                sstrm &lt;&lt; <span class=\"stringliteral\">&quot;] &quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            std::string str = sstrm.str();</div>\n\
<div class=\"line\">            iCallback.replace(pos, 13, str);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isMelCallback)</div>\n\
<div class=\"line\">            <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(iCallback.c_str(), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#af47e37db0e53940620c6cd1f1111e41d\">MGlobal::executePythonCommand</a>(iCallback.c_str(), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AbcWriteJob::AbcWriteJob(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * iFileName,</div>\n\
<div class=\"line\">    std::set&lt;double&gt; &amp; iTransFrames,</div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::TimeSamplingPtr iTransTime,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> JobArgs &amp; iArgs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    mFileName = iFileName;</div>\n\
<div class=\"line\">    mBoxIndex = 0;</div>\n\
<div class=\"line\">    mArgs = iArgs;</div>\n\
<div class=\"line\">    mTransSamples = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mArgs.useSelectionList)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> emptyDagPaths = mArgs.dagPaths.empty();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get the active selection</span></div>\n\
<div class=\"line\">        <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> activeList;</div>\n\
<div class=\"line\">        <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>(activeList);</div>\n\
<div class=\"line\">        mSList = activeList;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> selectionSize = activeList.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index = 0; index &lt; selectionSize; index ++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">            status = activeList.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(index, dagPath);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status == MS::kSuccess)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = dagPath.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#af321be336f1f2d96ac2273a87cb3c8ab\">length</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">while</span> (--length)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    dagPath.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\">                    mSList.add(dagPath, <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (emptyDagPaths)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mArgs.dagPaths.insert(dagPath);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mTransFrames = iTransFrames;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// only needed during creation of the transforms</span></div>\n\
<div class=\"line\">    mTransTime = iTransTime;</div>\n\
<div class=\"line\">    mTransTimeIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// should have at least 1 value</span></div>\n\
<div class=\"line\">    assert(!mTransFrames.empty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mFirstFrame = *(mTransFrames.begin());</div>\n\
<div class=\"line\">    std::set&lt;double&gt;::iterator last = mTransFrames.end();</div>\n\
<div class=\"line\">    last--;</div>\n\
<div class=\"line\">    mLastFrame = *last;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AbcWriteJob::setup(<span class=\"keywordtype\">double</span> iFrame, MayaTransformWriterPtr iParent, util::GetMembersMap&amp; gmMap)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// short-circuit if selection flag is on but this node isn&#39;t actively</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// selected</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mArgs.useSelectionList &amp;&amp; !mSList.hasItem(mCurDag))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> ob = mCurDag.node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDepNode(ob, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> bSolvedState = fnDepNode.typeName() == <span class=\"stringliteral\">&quot;bulletRigidCollection&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// skip all intermediate nodes (and their children)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (util::isIntermediate(ob))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!bSolvedState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// skip nodes that aren&#39;t renderable (and their children)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mArgs.excludeInvisible &amp;&amp; !util::isRenderable(ob))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( bSolvedState )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// the motionstates are held on the initialstate node at the moment</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;Initialize transform collection node &quot;</span>;</div>\n\
<div class=\"line\">            msg += mCurDag.fullPathName();</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot; failed, skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MayaTransformCollectionWriterPtr transCol;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// transformcollections always parented to the root case</span></div>\n\
<div class=\"line\">        Alembic::Abc::OObject obj = mRoot.getTop();</div>\n\
<div class=\"line\">        transCol = MayaTransformCollectionWriterPtr(<span class=\"keyword\">new</span> MayaTransformCollectionWriter(</div>\n\
<div class=\"line\">            obj, mCurDag, mTransTimeIndex, mArgs));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mTransColList.push_back(transCol);</div>\n\
<div class=\"line\">        mStats.mTransColNum++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        AttributesWriterPtr attrs = transCol-&gt;getAttrs();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (attrs)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mTransTimeIndex != 0 &amp;&amp; attrs-&gt;isAnimated())</div>\n\
<div class=\"line\">                mTransColAttrList.push_back(attrs);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ob.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> fnTrans(ob, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;Initialize transform node &quot;</span>;</div>\n\
<div class=\"line\">            msg += mCurDag.fullPathName();</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot; failed, skipping.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MayaTransformWriterPtr trans;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// parented to the root case</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iParent == NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::Abc::OObject obj = mRoot.getTop();</div>\n\
<div class=\"line\">            trans = MayaTransformWriterPtr(<span class=\"keyword\">new</span> MayaTransformWriter(</div>\n\
<div class=\"line\">                obj, mCurDag, mTransTimeIndex, mArgs));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            trans = MayaTransformWriterPtr(<span class=\"keyword\">new</span> MayaTransformWriter(</div>\n\
<div class=\"line\">                *iParent, mCurDag, mTransTimeIndex, mArgs));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (trans-&gt;isAnimated() &amp;&amp; mTransTimeIndex != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mTransList.push_back(trans);</div>\n\
<div class=\"line\">            mStats.mTransAnimNum++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            mStats.mTransStaticNum++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        AttributesWriterPtr attrs = trans-&gt;getAttrs();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mTransTimeIndex != 0 &amp;&amp; attrs-&gt;isAnimated())</div>\n\
<div class=\"line\">            mTransAttrList.push_back(attrs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// loop through the children, making sure to push and pop them</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// from the MDagPath</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChild = mCurDag.childCount();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChild; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mCurDag.push(mCurDag.child(i));</div>\n\
<div class=\"line\">            setup(iFrame, trans, gmMap);</div>\n\
<div class=\"line\">            mCurDag.pop();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = mCurDag.fullPathName() + <span class=\"stringliteral\">&quot; is an unsupported type of &quot;</span>;</div>\n\
<div class=\"line\">        warn += ob.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a3dad4d354c5b968cf4eccfffcdb824f4\">apiTypeStr</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(warn);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AbcWriteJob::~AbcWriteJob()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AbcWriteJob::eval(<span class=\"keywordtype\">double</span> iFrame)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iFrame == mFirstFrame)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// check if the shortnames of any two nodes are the same</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if so, exit here</span></div>\n\
<div class=\"line\">        hasDuplicates(mArgs.dagPaths, mArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string appWriter = <span class=\"stringliteral\">&quot;Maya &quot;</span>;</div>\n\
<div class=\"line\">        appWriter += <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a5e267b7212f8651514c21ca82566e412\">MGlobal::mayaVersion</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">        appWriter += <span class=\"stringliteral\">&quot; AbcBullet v&quot;</span>;</div>\n\
<div class=\"line\">        appWriter += ABCBULLET_VERSION;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string userInfo = <span class=\"stringliteral\">&quot;Exported from: &quot;</span>;</div>\n\
<div class=\"line\">        userInfo += <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#af6e560840ddbb341dac9706ec1e6404f\">MFileIO::currentFile</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// these symbols can&#39;t be in the meta data</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (userInfo.find(<span class=\"charliteral\">&#39;=&#39;</span>) != std::string::npos ||</div>\n\
<div class=\"line\">            userInfo.find(<span class=\"charliteral\">&#39;;&#39;</span>) != std::string::npos)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            userInfo = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mRoot = CreateArchiveWithInfo(Alembic::AbcCoreOgawa::WriteArchive(),</div>\n\
<div class=\"line\">            mFileName,</div>\n\
<div class=\"line\">            appWriter,</div>\n\
<div class=\"line\">            userInfo,</div>\n\
<div class=\"line\">            Alembic::Abc::ErrorHandler::kThrowPolicy);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mTransTimeIndex = mRoot.addTimeSampling(*mTransTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mBoxProp =  Alembic::AbcGeom::CreateOArchiveBounds(mRoot,</div>\n\
<div class=\"line\">            mTransTimeIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mRoot.valid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string theError = <span class=\"stringliteral\">&quot;Unable to create abc file&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">throw</span> std::runtime_error(theError);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        util::ShapeSet::const_iterator end = mArgs.dagPaths.end();</div>\n\
<div class=\"line\">        util::GetMembersMap gmMap;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (util::ShapeSet::const_iterator it = mArgs.dagPaths.begin();</div>\n\
<div class=\"line\">            it != end; ++it)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mCurDag = *it;</div>\n\
<div class=\"line\">            setup(iFrame * util::spf(), MayaTransformWriterPtr(), gmMap);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        perFrameCallback(iFrame);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::set&lt;double&gt;::iterator checkFrame = mTransFrames.find(iFrame);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> foundTransFrame = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (checkFrame != mTransFrames.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            assert(mRoot.valid());</div>\n\
<div class=\"line\">            foundTransFrame = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            mTransSamples ++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// write out transforms</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::vector&lt; MayaTransformWriterPtr &gt;::iterator tcur =</div>\n\
<div class=\"line\">                    mTransList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt; MayaTransformWriterPtr &gt;::iterator tend =</div>\n\
<div class=\"line\">                    mTransList.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (; tcur != tend; tcur++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    (*tcur)-&gt;write();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt; AttributesWriterPtr &gt;::iterator tattrCur =</div>\n\
<div class=\"line\">                    mTransAttrList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt; AttributesWriterPtr &gt;::iterator tattrEnd =</div>\n\
<div class=\"line\">                    mTransAttrList.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(; tattrCur != tattrEnd; tattrCur++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    (*tattrCur)-&gt;write();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// write out transform collections</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::vector&lt; MayaTransformCollectionWriterPtr &gt;::iterator tcur =</div>\n\
<div class=\"line\">                    mTransColList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt; MayaTransformCollectionWriterPtr &gt;::iterator tend =</div>\n\
<div class=\"line\">                    mTransColList.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (; tcur != tend; tcur++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    (*tcur)-&gt;write(iFrame);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt; AttributesWriterPtr &gt;::iterator tattrCur =</div>\n\
<div class=\"line\">                    mTransColAttrList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt; AttributesWriterPtr &gt;::iterator tattrEnd =</div>\n\
<div class=\"line\">                    mTransColAttrList.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(; tattrCur != tattrEnd; tattrCur++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    (*tattrCur)-&gt;write();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (foundTransFrame)</div>\n\
<div class=\"line\">            perFrameCallback(iFrame);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iFrame == mLastFrame)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        postCallback(iFrame);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AbcWriteJob::perFrameCallback(<span class=\"keywordtype\">double</span> iFrame)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> bbox;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    processCallback(mArgs.melPerFrameCallback, <span class=\"keyword\">true</span>, iFrame, bbox);</div>\n\
<div class=\"line\">    processCallback(mArgs.pythonPerFrameCallback, <span class=\"keyword\">false</span>, iFrame, bbox);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// write the frame ranges and statistic string on the root</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Also call the post callbacks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AbcWriteJob::postCallback(<span class=\"keywordtype\">double</span> iFrame)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::string statsStr = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    addToString(statsStr, <span class=\"stringliteral\">&quot;TransStaticNum&quot;</span>, mStats.mTransStaticNum);</div>\n\
<div class=\"line\">    addToString(statsStr, <span class=\"stringliteral\">&quot;TransAnimNum&quot;</span>, mStats.mTransAnimNum);</div>\n\
<div class=\"line\">    addToString(statsStr, <span class=\"stringliteral\">&quot;TransColNum&quot;</span>, mStats.mTransColNum);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (statsStr.length() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::OStringProperty stats(mRoot.getTop().getProperties(),</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;statistics&quot;</span>);</div>\n\
<div class=\"line\">        stats.set(statsStr);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mTransTimeIndex != 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> propName;</div>\n\
<div class=\"line\">        propName += <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(mTransTimeIndex);</div>\n\
<div class=\"line\">        propName += <span class=\"stringliteral\">&quot;.samples&quot;</span>;</div>\n\
<div class=\"line\">        Alembic::Abc::OUInt32Property samp(mRoot.getTop().getProperties(),</div>\n\
<div class=\"line\">            propName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        samp.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(mTransSamples);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> bbox;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    processCallback(mArgs.melPostCallback, <span class=\"keyword\">true</span>, iFrame, bbox);</div>\n\
<div class=\"line\">    processCallback(mArgs.pythonPostCallback, <span class=\"keyword\">false</span>, iFrame, bbox);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";