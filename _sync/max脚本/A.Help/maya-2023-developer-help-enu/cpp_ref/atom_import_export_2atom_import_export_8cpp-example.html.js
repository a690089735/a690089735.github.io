var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: atomImportExport/atomImportExport.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'atom_import_export_2atom_import_export_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: atomImportExport/atomImportExport.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">atomImportExport/atomImportExport.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  File Name:  atomImport.cc</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Imports and Exports .atom Files     </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGContextGuard.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxFileTranslator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimCurveClipboard.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyNodes.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAnimCurve.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimUtil.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MProgressWindow.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimControl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagModifier.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSceneMessage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomImportExport.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomFileUtils.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomImportExportStrings.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomNodeNameReplacer.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomCachedPlugs.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  anim Importer</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//todo add a script if we want const char *const animImportOptionScript = &quot;animImportOptions&quot;;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<span class=\"keyword\">const</span> animImportDefaultOptions = </div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;targetTime=4;copies=1;option=replace;pictures=0;connect=0;match=hierarchy;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Register all strings used by the plugin C++ code</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">Not Used</span></div>\n\
<div class=\"line\"><span class=\"comment\">static MStatus registerMStringResources(void)</span></div>\n\
<div class=\"line\"><span class=\"comment\">{</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kNothingSelected);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kPasteFailed);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kAnimCurveNotFound);        </span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kInvalidAngleUnits);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kInvalidLinearUnits);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kInvalidTimeUnits);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kInvalidVersion);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kSettingToUnit);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kMissingKeyword);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kCouldNotReadAnim);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kCouldNotCreateAnim);   </span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kUnknownKeyword);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kClipboardFailure);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kSettingTanAngleUnit);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kUnknownNode);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kCouldNotKey);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kMissingBrace);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStringResource::registerString(kCouldNotExport);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    return MS::kSuccess;</span></div>\n\
<div class=\"line\"><span class=\"comment\">}</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomImport::atomImport()</div>\n\
<div class=\"line\">: <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html\">MPxFileTranslator</a>()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomImport::~atomImport()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *atomImport::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> atomImport();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomImport::replaceNameAndFindPlug(<span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; origName,</div>\n\
<div class=\"line\">                                        atomNodeNameReplacer&amp; replacer,</div>\n\
<div class=\"line\">                                        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; replacedPlug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> rtn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// get the node name</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> nameParts;</div>\n\
<div class=\"line\">    origName.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;.&#39;</span>, nameParts);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Perform any necessary replacement</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tmpName(nameParts[0]);</div>\n\
<div class=\"line\">    <span class=\"comment\">// TODO: type &amp; hierarchy info -- does the replacer store enough info</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to help us find that out since in the case of export edits we don&#39;t</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// have that info for sources</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (replacer.findNode(atomNodeNameReplacer::eDag,tmpName,0,0)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> newName(tmpName);</div>\n\
<div class=\"line\">        newName += (<span class=\"stringliteral\">&quot;.&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// add the attribute name(s) back on again</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ii;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (ii = 1; ii &lt; nameParts.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++ii) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (ii &gt; 1) {</div>\n\
<div class=\"line\">                attrName += (<span class=\"stringliteral\">&quot;.&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            attrName += nameParts[ii];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        newName += attrName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> tmpList;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (MS::kSuccess == tmpList.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(newName)) {</div>\n\
<div class=\"line\">            tmpList.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a4cdb668fdd6feafe9b296a80cfca26f0\">getPlug</a>(0,replacedPlug);</div>\n\
<div class=\"line\">            rtn = !replacedPlug.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!rtn) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// test for the special case of the pivot component</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">                <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> component;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (MS::kSuccess == tmpList.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(0,path,component) &amp;&amp;</div>\n\
<div class=\"line\">                    component.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>() == <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aae69d92d6306c9541dfe6cca341ba964\">MFn::kPivotComponent</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node;</div>\n\
<div class=\"line\">                    tmpList.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a>(0,node);</div>\n\
<div class=\"line\">                    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode(node);</div>\n\
<div class=\"line\">                    replacedPlug = fnNode.findPlug(attrName,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                    rtn = !replacedPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> rtn;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">atomImport::checkPlugAgainstTemplate(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; nodeName,</div>\n\
<div class=\"line\">                                     <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                                     atomTemplateReader* templateReader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if the plug is filtered out</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (NULL != templateReader) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// get long attribute name</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> plugName = plug.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>(<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> nameParts;</div>\n\
<div class=\"line\">        plugName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;.&#39;</span>, nameParts);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> leafAttr = nameParts[nameParts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()-1];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (templateReader-&gt;findNodeAndAttr(nodeName,leafAttr));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// No template, nothing to do</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomImport::connectionFailedCallback(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; srcPlug,</div>\n\
<div class=\"line\">                                          <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; dstPlug,</div>\n\
<div class=\"line\">                                          <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; srcName,</div>\n\
<div class=\"line\">                                          <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; dstName,</div>\n\
<div class=\"line\">                                          <span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"comment\">//  MString output = &quot;Connection failed callback: &quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  output += srcName;  output += &quot; &quot;;  output += dstName;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  MGlobal::displayInfo(output);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    atomEditsHelper* helper = (NULL != clientData) ? (atomEditsHelper*)clientData : NULL;</div>\n\
<div class=\"line\">    atomNodeNameReplacer* replacer = (NULL != helper) ? helper-&gt;fReplacer : NULL;</div>\n\
<div class=\"line\">    atomTemplateReader* templateReader = (NULL != helper) ? helper-&gt;fTemplateReader : NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (NULL != replacer &amp;&amp; srcPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Import of the edits didn&#39;t find a match for the source name, use the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// replacer and see if that helps</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (replaceNameAndFindPlug(srcName,*replacer,srcPlug)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!dstPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// we&#39;ve found the proper source plug to use and we already</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// had a dest, so connect them up and we&#39;re done</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a> mod;</div>\n\
<div class=\"line\">                mod.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug,dstPlug);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (NULL != replacer &amp;&amp; dstPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Import of the edits didn&#39;t find a match for the dest name, use the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// replacer and see if that helps</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (replaceNameAndFindPlug(dstName,*replacer,dstPlug)) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> dstParts;</div>\n\
<div class=\"line\">            dstName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;.&#39;</span>, dstParts);           </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!checkPlugAgainstTemplate(dstParts[0],dstPlug,templateReader))</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!srcPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// we&#39;ve found the proper dest plug to use and we already</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// had a source, so connect them up and we&#39;re done</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a> mod;</div>\n\
<div class=\"line\">                mod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(srcPlug,dstPlug);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!dstPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dstNode = dstPlug.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Check whether the failed connection was to a setDrivenKey curve</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dstNode.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a33c043a560ef8ed9dcd7b60abbae3700\">MFn::kAnimCurveUnitlessToAngular</a>) ||</div>\n\
<div class=\"line\">            dstNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a4f2b692e37cbb07912bab0e94d3f3c13\">MFn::kAnimCurveUnitlessToDistance</a>) ||</div>\n\
<div class=\"line\">            dstNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a9625e32e30a5a79a0be4f44f03f821eb\">MFn::kAnimCurveUnitlessToTime</a>) ||</div>\n\
<div class=\"line\">            dstNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab109b1b6389bb8119e04fb331dcce8d0\">MFn::kAnimCurveUnitlessToUnitless</a>)) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If so, create a stand-in driver for that curve</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a> mod;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> locator = mod.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html#ae169eb7f1ddc00f53ba69ac2d1815950\">createNode</a>( <span class=\"stringliteral\">&quot;locator&quot;</span>, <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a> );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnLoc(locator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> nameParts;</div>\n\
<div class=\"line\">            srcName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;.&#39;</span>, nameParts);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> leafAttr(nameParts[nameParts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()-1]);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> leafPlug = fnLoc.findPlug(leafAttr, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!leafPlug.isNull()) {</div>\n\
<div class=\"line\">                mod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(leafPlug,dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// rename the locator to the name of the original source</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// so that any subsequent connections will work</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                fnLoc.setName(nameParts[0]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> atomImport::reader( <span class=\"keyword\">const</span> <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                                FileAccessMode mode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName = file.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>();</div>\n\
<div class=\"line\">    std::ifstream animFile(fileName.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    <span class=\"comment\">//  Parse the options. The options syntax is in the form of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  &quot;flag=val;flag1=val;flag2=val&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(animFile.good()==<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pasteFlags;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> prefix;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> suffix;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> search;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> replace;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mapFile;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> replaceLayers = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> exportEditsFile;    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> includeChildren = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    atomNodeNameReplacer::ReplaceType type = atomNodeNameReplacer::eHierarchy;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> templateName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> viewName;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useTemplate = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (options.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  Set up the flags for the paste command.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagSrcTime(<span class=\"stringliteral\">&quot;srcTime&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagDstTime(<span class=\"stringliteral\">&quot;dstTime&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagOldDstTime(<span class=\"stringliteral\">&quot;time&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagCopies(<span class=\"stringliteral\">&quot;copies&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagOption(<span class=\"stringliteral\">&quot;option&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagConnect(<span class=\"stringliteral\">&quot;connect&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagMatch(<span class=\"stringliteral\">&quot;match&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagSearch(<span class=\"stringliteral\">&quot;search&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagReplace(<span class=\"stringliteral\">&quot;replace&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagPrefix(<span class=\"stringliteral\">&quot;prefix&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagSuffix(<span class=\"stringliteral\">&quot;suffix&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagMapFile(<span class=\"stringliteral\">&quot;mapFile&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagHierarchy(<span class=\"stringliteral\">&quot;hierarchy&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagString(<span class=\"stringliteral\">&quot;string&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagSelected(<span class=\"stringliteral\">&quot;selected&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagTemplate(<span class=\"stringliteral\">&quot;template&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagView(<span class=\"stringliteral\">&quot;view&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> optionChildrenToo(<span class=\"stringliteral\">&quot;childrenToo&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> optionTemplate(<span class=\"stringliteral\">&quot;template&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagExportEdits(<span class=\"stringliteral\">&quot;exportEdits&quot;</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> copyValue;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagValue;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> connectValue;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> match;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> srcTimeValue;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> dstTimeValue;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Start parsing.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> optionList;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> theOption;</div>\n\
<div class=\"line\">        options.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;;&#39;</span>, optionList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> nOptions = optionList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> i = 0; i &lt; nOptions; i++) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            theOption.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">            optionList[i].split(<span class=\"charliteral\">&#39;=&#39;</span>, theOption);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (theOption[0] == flagCopies &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                copyValue = theOption[1];;</div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagOption &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                flagValue = theOption[1];</div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagConnect &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].asInt() != 0) {</div>\n\
<div class=\"line\">                    connectValue += theOption[1];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( theOption[0] == flagTemplate &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                templateName = theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( theOption[0] == flagView &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                viewName = theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagSrcTime &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                srcTimeValue += theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ((theOption[0] == flagDstTime || theOption[0] == flagOldDstTime )&amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                dstTimeValue += theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagMatch &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                match =  theOption[1];</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagSearch &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                search =  theOption[1];</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagReplace &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                replace =  theOption[1];</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagPrefix &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                prefix =  theOption[1];</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagSuffix &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                suffix =  theOption[1];</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagMapFile &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                mapFile =  theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagSelected &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                includeChildren =   (theOption[1] == optionChildrenToo) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(theOption[1] == optionTemplate)</div>\n\
<div class=\"line\">                    useTemplate = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagExportEdits &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                exportEditsFile =  theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (copyValue.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot; -copies &quot;</span>;</div>\n\
<div class=\"line\">            pasteFlags += copyValue;</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">        } </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (flagValue.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot; -option \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            pasteFlags += flagValue;</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot;\\&quot; &quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(flagValue == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;replace&quot;</span>))</div>\n\
<div class=\"line\">                replaceLayers = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        } </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (connectValue.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot; -connect &quot;</span>;</div>\n\
<div class=\"line\">            pasteFlags += connectValue;</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">        } </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dstTimeValue.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> useQuotes = !dstTimeValue.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a78d8001c710dd77d1b16e80ac4298068\">isDouble</a>();</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot; -time &quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (useQuotes) pasteFlags += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            pasteFlags +=  dstTimeValue;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (useQuotes) pasteFlags += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            pasteFlags += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">        }       </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (srcTimeValue.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> lClipStartTime;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> lClipEndTime;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> lTimes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == srcTimeValue.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>( L<span class=\"charliteral\">&#39;:&#39;</span>, lTimes ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( lTimes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> lImportStartFrame = lTimes[0].asDouble();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> lImportEndFrame   = lImportStartFrame;</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( lTimes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1 )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        lImportEndFrame = lTimes[1].asDouble();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    fReader.setImportFrameRange( lImportStartFrame, lImportEndFrame );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fReader.clearImportFrameRange();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fReader.clearImportFrameRange();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(match.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt;0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(match == flagHierarchy)</div>\n\
<div class=\"line\">                type = atomNodeNameReplacer::eHierarchy;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(match == flagString)</div>\n\
<div class=\"line\">                type = atomNodeNameReplacer::eSearchReplace;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(match == flagMapFile)</div>\n\
<div class=\"line\">                type = atomNodeNameReplacer::eMapFile;</div>\n\
<div class=\"line\">        } <span class=\"comment\">//not set, then we leave what we had</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  If the selection list is empty, there is nothing to import.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> sList;</div>\n\
<div class=\"line\">    std::vector&lt;unsigned int&gt; depths;</div>\n\
<div class=\"line\">    atomTemplateReader templateReader;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(useTemplate == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        templateReader.setTemplate(templateName,viewName);</div>\n\
<div class=\"line\">        includeChildren = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        templateReader.selectNodes(); <span class=\"comment\">//make the selection set be us.</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    SelectionGetter::getSelectedObjects(includeChildren,sList,depths);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sList.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a8174b25717a6f860d40f2ca259442df5\">isEmpty</a>()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNothingSelected, status);</div>\n\
<div class=\"line\">        <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    atomNodeNameReplacer replacer(type,sList,depths,prefix,suffix,search,replace,mapFile);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mode == kImportAccessMode) {</div>\n\
<div class=\"line\">        status = importAnim(sList,animFile,pasteFlags,replacer,exportEditsFile,templateReader,replaceLayers);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    animFile.close();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomImport::haveReadMethod()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomImport::haveWriteMethod()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomImport::canBeOpened()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> atomImport::defaultExtension()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;atom&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a8966f27c569f8ef7182b63f0a66e79dd\">MPxFileTranslator::MFileKind</a> atomImport::identifyFile(</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; fileName,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">short</span> size)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name = fileName.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a614484d9028d9d09418b5e337c39b7a0\">resolvedName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>   nameLength = (int)strlen(name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((nameLength &gt; 5) &amp;&amp; !strcasecmp(name+nameLength-5, <span class=\"stringliteral\">&quot;.atom&quot;</span>)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> kIsMyFileType;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Check the buffer to see if this contains the correct keywords</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  to be a anim file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strncmp(buffer, <span class=\"stringliteral\">&quot;atomVersion&quot;</span>, 11) == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> kIsMyFileType;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>  kNotMyFileType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> </div>\n\
<div class=\"line\">atomImport::importAnim(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> &amp;sList, std::ifstream &amp;animFile, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;pasteFlags, atomNodeNameReplacer &amp; replacer,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; exportEditsFile,atomTemplateReader &amp;templateReader, <span class=\"keywordtype\">bool</span> replaceLayers)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\">    <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a33e6a7c8fa1c06fd64063bd08d4e4aef\">MGlobal::setActiveSelectionList</a>(sList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> atomExportEdits;</div>\n\
<div class=\"line\">    atomLayerClipboard atomClipboard;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> removeExportEditsFile = <span class=\"keyword\">false</span>; <span class=\"comment\">//if this becomes true we need to remove the temporary edit file we create.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kSuccess != </div>\n\
<div class=\"line\">            (status = fReader.readAtom(animFile, atomClipboard,</div>\n\
<div class=\"line\">                                       sList,replacer,atomExportEdits,removeExportEditsFile,templateReader, replaceLayers</div>\n\
<div class=\"line\">                ))) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (atomExportEdits.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 &amp;&amp; exportEditsFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If the user specified an edits file via command line, we&#39;ll</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// use it instead of the one from the file</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        exportEditsFile = atomExportEdits;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        removeExportEditsFile = <span class=\"keyword\">false</span>; <span class=\"comment\">//don&#39;t remove it we are using the one from the commandline.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (exportEditsFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        atomEditsHelper helper(&amp;replacer,&amp;templateReader);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        MCallbackId c_id = <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a87270bb707cad45a9b54d1a00cb9a769\">MSceneMessage::addConnectionFailedCallback</a>( &amp;atomImport::connectionFailedCallback,&amp;helper);</div>\n\
<div class=\"line\">        replacer.setAddMainPlaceholderNamespace(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Import the exportEdits file</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> sel;</div>\n\
<div class=\"line\">        <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>(sel);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> command = <span class=\"stringliteral\">&quot;doImportAtomOfflineFile(1,{\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        command += exportEditsFile;</div>\n\
<div class=\"line\">        command += <span class=\"stringliteral\">&quot;\\&quot;})&quot;</span>;</div>\n\
<div class=\"line\">        status =  <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(command, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>(c_id);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a33e6a7c8fa1c06fd64063bd08d4e4aef\">MGlobal::setActiveSelectionList</a>(sel);</div>\n\
<div class=\"line\">        replacer.setAddMainPlaceholderNamespace(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(removeExportEditsFile)</div>\n\
<div class=\"line\">            <span class=\"keyword\">remove</span>(exportEditsFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status =  atomClipboard.pasteKeys(fReader.getStartTime(), fReader.getEndTime(), </div>\n\
<div class=\"line\">                        (float) fReader.getStartUnitless(), (float) fReader.getEndUnitless(),pasteFlags);</div>\n\
<div class=\"line\">    <span class=\"comment\">//Restore the oldUnits</span></div>\n\
<div class=\"line\">    <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a0619e077e1d24cfc947c6844ec8dcfe3\">MDistance::setUIUnit</a>(fReader.getOldDistanceUnit());</div>\n\
<div class=\"line\">    <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#ad9406cfa93f3a9c96b962db36d126909\">MTime::setUIUnit</a>(fReader.getOldTimeUnit());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  anim Exporter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//todo const char *const animExportOptionScript = &quot;atomExportOptions&quot;;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<span class=\"keyword\">const</span> animExportDefaultOptions = <span class=\"stringliteral\">&quot;whichRange=1;range=0:10;options=keys;hierarchy=none;controlPoints=0;useChannelBox=0;copyKeyCmd=&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> kDefaultPrecision = 8;    <span class=\"comment\">//  float precision.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomExport::atomExport()</div>\n\
<div class=\"line\">: <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html\">MPxFileTranslator</a>()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomExport::~atomExport()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *atomExport::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> atomExport();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> atomExport::writer( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                                FileAccessMode mode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName = file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>();</div>\n\
<div class=\"line\">    std::ofstream animFile(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    <span class=\"comment\">//  Defaults.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> copyFlags(<span class=\"stringliteral\">&quot;copyKey -cb api -fea 1 &quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> precision = kDefaultPrecision;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> statics = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> includeChildren = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt; attrStrings;</div>\n\
<div class=\"line\">    <span class=\"comment\">//  Parse the options. The options syntax is in the form of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  &quot;flag=val;flag1=val;flag2=val&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useSpecifiedRange = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useTemplate = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> cached = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> constraint = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> sdk = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> animLayers = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> templateName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> viewName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> startTime = <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#aad65deeba716641e7c1803f00d157753\">MAnimControl::animationStartTime</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> endTime = <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#ae8b44c40ec020b0779a34dc748a74366\">MAnimControl::animationEndTime</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> exportEditsFile;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> exportFlags;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (options.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagPrecision(<span class=\"stringliteral\">&quot;precision&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagStatics(<span class=\"stringliteral\">&quot;statics&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagConstraint(<span class=\"stringliteral\">&quot;constraint&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagSDK(<span class=\"stringliteral\">&quot;sdk&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagAnimLayers(<span class=\"stringliteral\">&quot;animLayers&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagCopyKeyCmd(<span class=\"stringliteral\">&quot;copyKeyCmd&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagSelected(<span class=\"stringliteral\">&quot;selected&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagTemplate(<span class=\"stringliteral\">&quot;template&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagView(<span class=\"stringliteral\">&quot;view&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> optionChildrenToo(<span class=\"stringliteral\">&quot;childrenToo&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> optionTemplate(<span class=\"stringliteral\">&quot;template&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagAttr(<span class=\"stringliteral\">&quot;at&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagWhichRange(<span class=\"stringliteral\">&quot;whichRange&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagRange(<span class=\"stringliteral\">&quot;range&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagExportEdits(<span class=\"stringliteral\">&quot;exportEdits&quot;</span>);       </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> flagCached(<span class=\"stringliteral\">&quot;baked&quot;</span>);      </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">//  Start parsing.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> optionList;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> theOption;</div>\n\
<div class=\"line\">        options.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;;&#39;</span>, optionList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> nOptions = optionList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> i = 0; i &lt; nOptions; i++) {</div>\n\
<div class=\"line\">            theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">            optionList[i].split(<span class=\"charliteral\">&#39;=&#39;</span>, theOption);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (theOption[0] == flagPrecision &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].isInt()) {</div>\n\
<div class=\"line\">                    precision = theOption[1].asInt();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( theOption[0] == flagTemplate &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                templateName = theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( theOption[0] == flagView &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                viewName = theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagWhichRange &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].isInt()) </div>\n\
<div class=\"line\">                    useSpecifiedRange = (theOption[1].asInt() ==1) ? <span class=\"keyword\">false</span> : <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagRange &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> rangeArray;</div>\n\
<div class=\"line\">                theOption[1].split(<span class=\"charliteral\">&#39;:&#39;</span>,rangeArray);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(rangeArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()==2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(rangeArray[0].isDouble())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> val = rangeArray[0].asDouble();</div>\n\
<div class=\"line\">                        startTime = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(val,<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(rangeArray[0].isInt())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> val = (double)rangeArray[0].asInt();</div>\n\
<div class=\"line\">                        startTime = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(val,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(rangeArray[1].isDouble())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> val = rangeArray[1].asDouble();</div>\n\
<div class=\"line\">                        endTime = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(val,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(rangeArray[1].isInt())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> val = (double)rangeArray[1].asInt();</div>\n\
<div class=\"line\">                        endTime = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(val,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagStatics &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].isInt()) {</div>\n\
<div class=\"line\">                    statics = (theOption[1].asInt()) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagSDK &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].isInt()) {</div>\n\
<div class=\"line\">                    sdk = (theOption[1].asInt()) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagConstraint &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].isInt()) {</div>\n\
<div class=\"line\">                    constraint = (theOption[1].asInt()) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagAnimLayers &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].isInt()) {</div>\n\
<div class=\"line\">                    animLayers = (theOption[1].asInt()) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagCached &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (theOption[1].isInt()) {</div>\n\
<div class=\"line\">                    cached = (theOption[1].asInt()) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagSelected &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                includeChildren = (theOption[1] == optionChildrenToo) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(theOption[1] == optionTemplate)</div>\n\
<div class=\"line\">                    useTemplate = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagAttr &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\">                std::string str(theOption[1].asChar());</div>\n\
<div class=\"line\">                attrStrings.insert(str);</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (   theOption[0] == </div>\n\
<div class=\"line\">                        flagCopyKeyCmd &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//  Replace any &#39;&gt;&#39; characters with &#39;&quot;&#39;. This is needed</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  since the file translator option boxes do not handle</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  escaped quotation marks.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *optStr = theOption[1].asChar();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> nChars = strlen(optStr);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">char</span> *copyStr = <span class=\"keyword\">new</span> <span class=\"keywordtype\">char</span>[nChars+1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                copyStr = strcpy(copyStr, optStr);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; nChars; j++) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (copyStr[j] == <span class=\"charliteral\">&#39;&gt;&#39;</span>) {</div>\n\
<div class=\"line\">                        copyStr[j] = <span class=\"charliteral\">&#39;&quot;&#39;</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">                copyFlags += copyStr;</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> [] copyStr;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (theOption[0] == flagExportEdits &amp;&amp; theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                exportEditsFile =  theOption[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  Set the precision of the ofstream.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    animFile.precision(precision);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    atomTemplateReader templateReader;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(useTemplate == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        includeChildren = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        templateReader.setTemplate(templateName,viewName);</div>\n\
<div class=\"line\">        templateReader.selectNodes(); <span class=\"comment\">//make the template nodes be the selection</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    status = exportSelected(animFile, copyFlags, attrStrings, includeChildren,</div>\n\
<div class=\"line\">                            useSpecifiedRange, startTime, endTime, statics,</div>\n\
<div class=\"line\">                            cached,sdk,constraint, animLayers, exportEditsFile,templateReader);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    animFile.flush();</div>\n\
<div class=\"line\">    animFile.close();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomExport::haveReadMethod()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomExport::haveWriteMethod()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> atomExport::defaultExtension()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;atom&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a8966f27c569f8ef7182b63f0a66e79dd\">MPxFileTranslator::MFileKind</a> atomExport::identifyFile(</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; fileName,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">short</span> size)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name = fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a614484d9028d9d09418b5e337c39b7a0\">resolvedName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>   nameLength = (int)strlen(name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((nameLength &gt; 5) &amp;&amp; !strcasecmp(name+nameLength-5, <span class=\"stringliteral\">&quot;.atom&quot;</span>)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> kIsMyFileType;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>  kNotMyFileType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> atomExport::writeAnimCurves(std::ofstream &amp;animFile,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName,atomCachedPlugs *cachedPlugs,</div>\n\
<div class=\"line\">                    atomNodeWithAnimLayers *layerPlugs, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;command, <span class=\"keywordtype\">bool</span> &amp;haveAnimatedCurves,</div>\n\
<div class=\"line\">                    atomTemplateReader &amp;templateReader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> result = 0;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> templateAttrs(<span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(templateReader.isTemplateSet())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        templateAttrs = templateReader.attributesForNode(nodeName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(templateAttrs.length()==0) <span class=\"comment\">//no attrs set for this node so abort</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess; <span class=\"comment\">//still success no failure just template worked and filtered it out.</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> layerName;</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt; layerNames;</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt;::iterator iter;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isLayered = layerPlugs &amp;&amp; layerPlugs-&gt;isNodeLayered(layerNames);</div>\n\
<div class=\"line\">    iter = layerNames.begin();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">do</span> <span class=\"comment\">//do loop at least once</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(isLayered &amp;&amp; iter != layerNames.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string val = *iter;</div>\n\
<div class=\"line\">            layerName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(val.c_str());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            isLayered =<span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> copyFromOne;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(isLayered == <span class=\"keyword\">false</span> || layerName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()==0 )</div>\n\
<div class=\"line\">            copyFromOne = command + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>) + templateAttrs + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>) + nodeName;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            copyFromOne = command + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; -al &quot;</span>) + layerName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>) + templateAttrs + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>) + nodeName;</div>\n\
<div class=\"line\">        haveAnimatedCurves = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (MS::kSuccess != (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(copyFromOne, result, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>))) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            haveAnimatedCurves = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (result == 0 || <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard.html#af34c0cc340b8211738e45087a7d17672\">MAnimCurveClipboard::theAPIClipboard</a>().isEmpty()) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            haveAnimatedCurves = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (haveAnimatedCurves &amp;&amp; MS::kSuccess != ( fWriter.writeClipboard(animFile, </div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard.html#af34c0cc340b8211738e45087a7d17672\">MAnimCurveClipboard::theAPIClipboard</a>(),cachedPlugs,layerName, nodeName))) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            haveAnimatedCurves = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(isLayered &amp;&amp; iter != layerNames.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++iter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }<span class=\"keywordflow\">while</span> (isLayered &amp;&amp; iter != layerNames.end());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> atomExport::exportSelected( std::ofstream &amp;animFile,</div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;copyFlags,</div>\n\
<div class=\"line\">                                    std::set&lt;std::string&gt; &amp;attrStrings,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> includeChildren, </div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> useSpecifiedTimes, </div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> &amp;startTime,</div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> &amp;endTime,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> statics,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> cached,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> sdk,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> constraint,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">bool</span> layers,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; exportEditsFile,</div>\n\
<div class=\"line\">                                    atomTemplateReader &amp;templateReader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  If the selection list is empty, then there are no anim curves</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  to export.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> sList;</div>\n\
<div class=\"line\">    std::vector&lt;unsigned int&gt; depths;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    SelectionGetter::getSelectedObjects(includeChildren,sList,depths);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a8174b25717a6f860d40f2ca259442df5\">isEmpty</a>()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNothingSelected, status);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">//  Copy any anim curves to the API clipboard.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> command(copyFlags);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Always write out header</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWriter.writeHeader(animFile,useSpecifiedTimes,</div>\n\
<div class=\"line\">                             startTime,endTime)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    atomAnimLayers animLayers;</div>\n\
<div class=\"line\">    std::vector&lt;atomNodeWithAnimLayers *&gt; nodesWithAnimLayers;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(layers)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasAnimLayers =  animLayers.getOrderedAnimLayers(); <span class=\"comment\">//any layers in the scene?</span></div>\n\
<div class=\"line\">        hasAnimLayers = setUpAnimLayers(sList,animLayers, nodesWithAnimLayers,attrStrings,templateReader);</div>\n\
<div class=\"line\">        <span class=\"comment\">//any layers on our selection?</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(hasAnimLayers)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//add the layers to the sList...</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> oldLength = sList.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            animLayers.addLayersToStartOfSelectionList(sList);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> diffLength = sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() - oldLength;</div>\n\
<div class=\"line\">            atomNodeWithAnimLayers * nullPad = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k =0 ;k &lt; diffLength;++k) <span class=\"comment\">//need to pad the beginning of the nodesWithAnimlayers with any layer that was added</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                nodesWithAnimLayers.insert(nodesWithAnimLayers.begin(),nullPad);</div>\n\
<div class=\"line\">                depths.insert(depths.begin(),0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//if caching is on, we pre iterate through the objects, find </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//each plug that&#39;s cached and then cache the data all at once</span></div>\n\
<div class=\"line\">    std::vector&lt;atomCachedPlugs *&gt; cachedPlugs;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(cached)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> passed = setUpCache(sList,cachedPlugs,animLayers,sdk, constraint, layers, attrStrings,templateReader,startTime, endTime,</div>\n\
<div class=\"line\">            fWriter.getAngularUnit(), fWriter.getLinearUnit()); <span class=\"comment\">//this sets it up and runs the cache;</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(passed == <span class=\"keyword\">false</span>) <span class=\"comment\">//failed for some reason, one reason is that the user canceled the computation</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//first delete everything though</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//delete any cachedPlugs objects that we created.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> z = 0; z&lt; cachedPlugs.size(); ++z)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(cachedPlugs[z])</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> cachedPlugs[z];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">//and delete any any layers too</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> zz = 0; zz&lt; nodesWithAnimLayers.size(); ++zz)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(nodesWithAnimLayers[zz])</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> nodesWithAnimLayers[zz];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kCachingCanceled, status);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numObjects = sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> computationFinished = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"comment\">//not sure if in a headless mode we may want to not show the progress, should</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//still run if that&#39;s the case</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasActiveProgress = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a5138dba35773562dbb1ec2c2d8af7625\">MProgressWindow::reserve</a>()) {</div>\n\
<div class=\"line\">        hasActiveProgress = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#ac356c0e5734804cc029971bb8a19a13b\">MProgressWindow::setInterruptable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#abbd5e65719fa2a0b077183a4b9dc5e95\">MProgressWindow::startProgress</a>();</div>\n\
<div class=\"line\">        <a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a805e0e9c09dc3b1c487aa4478366af12\">MProgressWindow::setProgressRange</a>(0, numObjects);</div>\n\
<div class=\"line\">        <a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a8e28ea78bce7ca4a33073bb29486e2ef\">MProgressWindow::setProgress</a>(0);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stringStat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kExportProgress, stringStat);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(stringStat == MS::kSuccess)</div>\n\
<div class=\"line\">            <a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a77dca7cc18d967f79f51bea82e51be81\">MProgressWindow::setTitle</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (exportEditsFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        fWriter.writeExportEditsFilePresent(animFile);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(layers)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        animLayers.writeAnimLayers(animFile,fWriter);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> haveAnyAnimatableStuff = <span class=\"keyword\">false</span>; <span class=\"comment\">//will remain false if no curves or statics</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numObjects; i++) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(hasActiveProgress)</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a8e28ea78bce7ca4a33073bb29486e2ef\">MProgressWindow::setProgress</a>(i);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> localCommand;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> haveAnimatedCurves = <span class=\"keyword\">false</span>; <span class=\"comment\">//local flag, if true this node has animated curves</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> haveAnimatableChannels = <span class=\"keyword\">false</span>; <span class=\"comment\">//local flag, if true node has some animatable statics</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a> (i, path) == MS::kSuccess) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = path.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">            <span class=\"comment\">//if the name is in the template, only then write it out...</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(templateReader.findNode(name)== <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//we use this to both write out the cached plugs for this node but for also to not write out</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//the plugs which are cached when writing anim curves.</span></div>\n\
<div class=\"line\">            atomCachedPlugs * cachedPlug = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(cached &amp;&amp; i &lt; cachedPlugs.size())</div>\n\
<div class=\"line\">                cachedPlug = cachedPlugs[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            atomNodeWithAnimLayers  *layerPlug = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(layers &amp;&amp; i &lt; nodesWithAnimLayers.size())</div>\n\
<div class=\"line\">                layerPlug = nodesWithAnimLayers[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> depth = depths[i];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> childCount = path.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412\">childCount</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span> = path.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">            atomNodeNameReplacer::NodeType nodeType = (<span class=\"keywordtype\">object</span>.hasFn(<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a750b5e8123336c2306a300249b57201d\">MFn::kShape</a>)) ? atomNodeNameReplacer::eShape : atomNodeNameReplacer::eDag;</div>\n\
<div class=\"line\">            fWriter.writeNodeStart(animFile,nodeType,name,depth,childCount);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <a name=\"_a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatablePlugs;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> localList;</div>\n\
<div class=\"line\">            localList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\">            <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#acb5ded0050e8206e4c97e672d1c224dd\">MAnimUtil::findAnimatablePlugs</a>(localList,animatablePlugs);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(writeAnimCurves(animFile,name,cachedPlug, layerPlug, command, haveAnimatedCurves,templateReader) != MS::kSuccess )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(haveAnimatedCurves)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                haveAnyAnimatableStuff = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(statics||cached)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                writeStaticAndCached (animatablePlugs,cachedPlug,statics,cached,animFile,attrStrings,name,depth,childCount, haveAnimatableChannels,templateReader);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            fWriter.writeNodeEnd(animFile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a> (i, node) == MS::kSuccess) {</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatablePlugs;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (node, &amp;status);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = fnNode.name();</div>\n\
<div class=\"line\">            atomNodeNameReplacer::NodeType nodeType = atomNodeNameReplacer::eDepend;</div>\n\
<div class=\"line\">            atomNodeWithAnimLayers  *layerPlug = NULL;</div>\n\
<div class=\"line\">            <span class=\"comment\">//if a layer we get our own attrs</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(i&lt; animLayers.length())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> plugs;</div>\n\
<div class=\"line\">                animLayers.getPlugs(i,animatablePlugs);</div>\n\
<div class=\"line\">                nodeType = atomNodeNameReplacer::eAnimLayer;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(templateReader.findNode(name)== <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> localList;</div>\n\
<div class=\"line\">                localList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(node);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#acb5ded0050e8206e4c97e672d1c224dd\">MAnimUtil::findAnimatablePlugs</a>(localList,animatablePlugs);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(layers &amp;&amp; i &lt; nodesWithAnimLayers.size())</div>\n\
<div class=\"line\">                    layerPlug = nodesWithAnimLayers[i];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">//we use this to both write out the cached plugs for this node but for also to not write out</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//the plugs which are cached when writing anim curves.</span></div>\n\
<div class=\"line\">            atomCachedPlugs * cachedPlug = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(cached &amp;&amp; i &lt; cachedPlugs.size())</div>\n\
<div class=\"line\">                cachedPlug = cachedPlugs[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fWriter.writeNodeStart(animFile,nodeType,name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(writeAnimCurves(animFile,name, cachedPlug,layerPlug,command, haveAnimatedCurves,templateReader) != MS::kSuccess )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(haveAnimatedCurves)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                haveAnyAnimatableStuff = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(statics||cached)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                writeStaticAndCached (animatablePlugs,cachedPlug,statics,cached,animFile,attrStrings,name,0,0,haveAnimatableChannels,templateReader);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            fWriter.writeNodeEnd(animFile);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(haveAnimatableChannels==<span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">            haveAnyAnimatableStuff = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>  (hasActiveProgress &amp;&amp; <a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#ab6e19062f9b46e1ceb79a5f5b65d54a6\">MProgressWindow::isCancelled</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            computationFinished = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (exportEditsFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        fWriter.writeExportEditsFile(animFile,exportEditsFile);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//delete any cachedPlugs objects that we created.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> z = 0; z&lt; cachedPlugs.size(); ++z)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(cachedPlugs[z])</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> cachedPlugs[z];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">//and delete any any layers too</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> zz = 0; zz&lt; nodesWithAnimLayers.size(); ++zz)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(nodesWithAnimLayers[zz])</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> nodesWithAnimLayers[zz];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(computationFinished == <span class=\"keyword\">false</span>) <span class=\"comment\">//failed for some reason, one reason is that the user canceled the computation</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kSavingCanceled, status);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(hasActiveProgress)</div>\n\
<div class=\"line\">        <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a1c0593a8063c02d54edc8eddd79ab627\">MProgressWindow::endProgress</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(haveAnyAnimatableStuff == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kAnimCurveNotFound, status);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (MS::kFailure);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> (MS::kSuccess);</div>\n\
<div class=\"line\">}   </div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">MStatus             </span></div>\n\
<div class=\"line\"><span class=\"comment\">atomExport::writeSetDrivenKeys(ofstream &amp;animFile, MFnDependencyNode &amp;fnNode,MString &amp;name, bool &amp;hasSetDrivenKey)</span></div>\n\
<div class=\"line\"><span class=\"comment\">{</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MPlugArray plugArray;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MStatus status = fnNode.getConnections (plugArray);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    bool animated = false;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    if (status == MS::kSuccess)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    {</span></div>\n\
<div class=\"line\"><span class=\"comment\">        unsigned int numPlugs = plugArray.length();</span></div>\n\
<div class=\"line\"><span class=\"comment\">        for (unsigned int i = 0; i &lt; numPlugs; i++)</span></div>\n\
<div class=\"line\"><span class=\"comment\">        {</span></div>\n\
<div class=\"line\"><span class=\"comment\">            MObjectArray animationNodes;</span></div>\n\
<div class=\"line\"><span class=\"comment\">            MPlugArray drivers;</span></div>\n\
<div class=\"line\"><span class=\"comment\">            if(MAnimUtil::findSetDrivenKeyAnimation(plugArray[i],animationNodes,</span></div>\n\
<div class=\"line\"><span class=\"comment\">                drivers,&amp;status ))</span></div>\n\
<div class=\"line\"><span class=\"comment\">            {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                for(unsigned int k=0; k &lt; animationNodes.length();++k)</span></div>\n\
<div class=\"line\"><span class=\"comment\">                {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    MObject animNode =animationNodes[k];</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    if (animNode.hasFn (MFn::kDependencyNode))</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        MFnDependencyNode fnNode(animNode);</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        MString name = fnNode.name();</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        MString what = name + &quot; &quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    }</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    else if(animNode.hasFn (MFn::kDagNode)) </span></div>\n\
<div class=\"line\"><span class=\"comment\">                    {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        MFnDagNode dagNode (animNode);</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        MDagPath dagPath;</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        if (dagNode.getPath(dagPath) == MS::kSuccess) </span></div>\n\
<div class=\"line\"><span class=\"comment\">                        {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                            MString name = dagPath.fullPathName();</span></div>\n\
<div class=\"line\"><span class=\"comment\">                            MString what = name + &quot; &quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        }</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    }</span></div>\n\
<div class=\"line\"><span class=\"comment\">                }</span></div>\n\
<div class=\"line\"><span class=\"comment\">            }</span></div>\n\
<div class=\"line\"><span class=\"comment\">        }</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    }</span></div>\n\
<div class=\"line\"><span class=\"comment\">    return status;</span></div>\n\
<div class=\"line\"><span class=\"comment\">}</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">atomExport::writeStaticAndCached (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp;animatablePlugs, atomCachedPlugs *cachedPlugs,<span class=\"keywordtype\">bool</span> statics, <span class=\"keywordtype\">bool</span> cached, std::ofstream &amp;animFile, std::set&lt;std::string&gt; &amp;attrStrings,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> depth,</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> childCount,<span class=\"keywordtype\">bool</span> &amp;hasAnimatable,atomTemplateReader &amp;templateReader )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatablePlugs.<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numPlugs != 0) {</div>\n\
<div class=\"line\">        hasAnimatable = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(statics)</div>\n\
<div class=\"line\">            fWriter.writeStaticValues (animFile, animatablePlugs,attrStrings, name, depth, childCount,templateReader);<span class=\"comment\">//for now just using partial path names, TODO decide which to really use</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(cached &amp;&amp; cachedPlugs != NULL)</div>\n\
<div class=\"line\">            fWriter.writeCachedValues (animFile, cachedPlugs,attrStrings, name, depth, childCount,templateReader);<span class=\"comment\">//for now just using partial path names, TODO decide which to really use</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">atomExport::setUpCache(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> &amp;sList, std::vector&lt;atomCachedPlugs *&gt; &amp;cachedPlugs,atomAnimLayers &amp;animLayers,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> sdk, <span class=\"keywordtype\">bool</span> constraint, <span class=\"keywordtype\">bool</span> layers,</div>\n\
<div class=\"line\">                        std::set&lt;std::string&gt; &amp;attrStrings, atomTemplateReader &amp;templateReader,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> &amp;startTime, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> &amp;endTime, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html#abceb2331ad056e3c5ad27894199a49ed\">MAngle::Unit</a> angularUnit,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49ed\">MDistance::Unit</a> linearUnit)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(endTime&lt;startTime)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">//should never happen but just in case.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numObjects = sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">    cachedPlugs.resize(numObjects);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dStart = startTime.<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a324b14b7506c6e4f47912161956974ed\">value</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dEnd = endTime.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a324b14b7506c6e4f47912161956974ed\">value</a>() +  (.0000001); <span class=\"comment\">//little nudge in case of round off errors</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49ed\">MTime::Unit</a> unit = startTime.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#ad2dfb23055aad35d27a0e0ec3f77f86c\">unit</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> tickStep = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(1.0,unit).<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a324b14b7506c6e4f47912161956974ed\">value</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems = ((<span class=\"keywordtype\">unsigned</span> int)((dEnd - dStart)/tickStep)) + 1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> somethingIsCached = <span class=\"keyword\">false</span>; <span class=\"comment\">//if nothing get&#39;s cached no reason to run computation loop</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numObjects; i++) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        atomCachedPlugs *plug = NULL;</div>\n\
<div class=\"line\">        <span class=\"comment\">//make sure it&#39;s a NULL, and preset it in case we skip this node</span></div>\n\
<div class=\"line\">        cachedPlugs[i] = plug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a> (i, path) == MS::kSuccess) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            node = path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">            name = path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a> (i, node) == MS::kSuccess) {</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (node);</div>\n\
<div class=\"line\">            name = fnNode.name();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(node.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()==<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(i&lt; animLayers.length())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> plugs;</div>\n\
<div class=\"line\">                animLayers.getPlugs(i,plugs);</div>\n\
<div class=\"line\">                std::set&lt;std::string&gt; tempAttrStrings;</div>\n\
<div class=\"line\">                atomTemplateReader tempTemplateReader;</div>\n\
<div class=\"line\">                plug = <span class=\"keyword\">new</span> atomCachedPlugs(name,node,plugs,sdk,constraint,layers,</div>\n\
<div class=\"line\">                    tempAttrStrings,tempTemplateReader,numItems,angularUnit,</div>\n\
<div class=\"line\">                linearUnit);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(plug-&gt;hasCached() ==<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> plug;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    cachedPlugs[i] = plug;</div>\n\
<div class=\"line\">                    somethingIsCached = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(templateReader.findNode(name)== <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> localList;</div>\n\
<div class=\"line\">                localList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(node);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatablePlugs;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#acb5ded0050e8206e4c97e672d1c224dd\">MAnimUtil::findAnimatablePlugs</a>(localList,animatablePlugs);</div>\n\
<div class=\"line\">                plug = <span class=\"keyword\">new</span> atomCachedPlugs(name,node,animatablePlugs,sdk,constraint,layers,attrStrings,templateReader,numItems,angularUnit,</div>\n\
<div class=\"line\">                    linearUnit);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(plug-&gt;hasCached() ==<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> plug;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    cachedPlugs[i] = plug;</div>\n\
<div class=\"line\">                    somethingIsCached = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> computationFinished = <span class=\"keyword\">true</span>; <span class=\"comment\">//if no interrupt happens we will finish the computation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(somethingIsCached)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasActiveProgress = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a5138dba35773562dbb1ec2c2d8af7625\">MProgressWindow::reserve</a>()) {</div>\n\
<div class=\"line\">            hasActiveProgress = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#ac356c0e5734804cc029971bb8a19a13b\">MProgressWindow::setInterruptable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#abbd5e65719fa2a0b077183a4b9dc5e95\">MProgressWindow::startProgress</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a805e0e9c09dc3b1c487aa4478366af12\">MProgressWindow::setProgressRange</a>(0, numObjects);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a8e28ea78bce7ca4a33073bb29486e2ef\">MProgressWindow::setProgress</a>(0);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stringStat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kBakingProgress, stringStat);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(stringStat == MS::kSuccess)</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a77dca7cc18d967f79f51bea82e51be81\">MProgressWindow::setTitle</a>(msg);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> count =0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">double</span> tick = dStart; tick &lt;= dEnd; tick += tickStep)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(hasActiveProgress)</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a8e28ea78bce7ca4a33073bb29486e2ef\">MProgressWindow::setProgress</a>(count);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> time(tick,unit);</div>\n\
<div class=\"line\">            <a name=\"_a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a> ctx(time);</div>\n\
<div class=\"line\">            <a name=\"_a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context_guard.html\">MDGContextGuard</a> guard(ctx);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> z = 0; z&lt; cachedPlugs.size(); ++z)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(cachedPlugs[z])</div>\n\
<div class=\"line\">                    cachedPlugs[z]-&gt;calculateValue(ctx,count);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>  (hasActiveProgress &amp;&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#ab6e19062f9b46e1ceb79a5f5b65d54a6\">MProgressWindow::isCancelled</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                computationFinished = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            ++count;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(hasActiveProgress)</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_progress_window.html#a1c0593a8063c02d54edc8eddd79ab627\">MProgressWindow::endProgress</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> computationFinished;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//new anim layer stuff prototype</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">atomExport::setUpAnimLayers(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> &amp;sList,atomAnimLayers &amp;animLayers, std::vector&lt;atomNodeWithAnimLayers *&gt; &amp;nodesWithAnimLayers,</div>\n\
<div class=\"line\">                        std::set&lt;std::string&gt; &amp;attrStrings, atomTemplateReader &amp;templateReader)</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numObjects = sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">    nodesWithAnimLayers.resize(numObjects);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> somethingIsAnimLayered = <span class=\"keyword\">false</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numObjects; i++) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        atomNodeWithAnimLayers *nodeWithLayer = NULL;</div>\n\
<div class=\"line\">        <span class=\"comment\">//make sure it&#39;s a NULL, and preset it in case we skip this node</span></div>\n\
<div class=\"line\">        nodesWithAnimLayers[i] = nodeWithLayer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a> (i, path) == MS::kSuccess) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">            <span class=\"comment\">//if the name is in the template, only then write it out...</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(templateReader.findNode(name)== <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            node = path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a> (i, node) == MS::kSuccess) {</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (node);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = fnNode.name();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(templateReader.findNode(name)== <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()==<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> localList;</div>\n\
<div class=\"line\">            localList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(node);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatablePlugs;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#acb5ded0050e8206e4c97e672d1c224dd\">MAnimUtil::findAnimatablePlugs</a>(localList,animatablePlugs);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatablePlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> cachedPlugs;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; numPlugs; k++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = animatablePlugs[k];</div>\n\
<div class=\"line\">                <a name=\"_a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> layers;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>   plugs;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(MAnimUtil::findAnimationLayers(plug,layers,plugs) &amp;&amp; layers.<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> layerAdded = animLayers.addAnimLayers(layers);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(layerAdded)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(nodeWithLayer == NULL)</div>\n\
<div class=\"line\">                            nodeWithLayer = <span class=\"keyword\">new</span> atomNodeWithAnimLayers();</div>\n\
<div class=\"line\">                        nodeWithLayer-&gt;addPlugWithLayer(plug,layers,plugs);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    somethingIsAnimLayered = somethingIsAnimLayered == <span class=\"keyword\">false</span> ? layerAdded : <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            nodesWithAnimLayers[i] = nodeWithLayer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> somethingIsAnimLayered;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kFailure;</div>\n\
<div class=\"line\">    <a name=\"_a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugIn(obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;1.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// This would be done first, so the strings are available. But we have no UI yet</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//TODO</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*  stat = impPlugIn.registerUIStrings(registerMStringResources, &quot;atomImportExportInitStrings&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">    if (stat != MS::kSuccess)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    {</span></div>\n\
<div class=\"line\"><span class=\"comment\">        stat.perror(&quot;registerUIStrings&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">        return stat;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    }</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    stat = plugIn.registerFileTranslator(<span class=\"stringliteral\">&quot;atomImport&quot;</span>, <span class=\"stringliteral\">&quot;none&quot;</span>,</div>\n\
<div class=\"line\">                                            atomImport::creator,</div>\n\
<div class=\"line\">                                            (<span class=\"keywordtype\">char</span> *)NULL,</div>\n\
<div class=\"line\">                                            (<span class=\"keywordtype\">char</span> *)animImportDefaultOptions, </div>\n\
<div class=\"line\">                                            <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = plugIn.registerFileTranslator(<span class=\"stringliteral\">&quot;atomExport&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>,</div>\n\
<div class=\"line\">                                        atomExport::creator,</div>\n\
<div class=\"line\">                                        (<span class=\"keywordtype\">char</span> *)NULL,</div>\n\
<div class=\"line\">                                        (<span class=\"keywordtype\">char</span> *)animExportDefaultOptions,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a17e975d3bcab69811fec71ad65c85db0\">MGlobal::sourceFile</a> ( <span class=\"stringliteral\">&quot;atomLayerCommands.mel&quot;</span> ) ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugIn(obj);</div>\n\
<div class=\"line\">    stat = plugIn.deregisterFileTranslator(<span class=\"stringliteral\">&quot;atomImport&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stat = plugIn.deregisterFileTranslator(<span class=\"stringliteral\">&quot;atomExport&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";