var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: cgFx/cgfxShaderNode.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2cgfx_shader_node_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: cgFx/cgfxShaderNode.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/cgfxShaderNode.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (C) 2002-2004 NVIDIA</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// File: cgfxShaderNode.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Dependency Graph Node: cgfxShader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Author: Jim Atkinson</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Changes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  10/2003  Kurt Harriman - www.octopusgraphics.com +1-415-893-1023</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Multiple UV sets; user-specified texcoord assignment.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - &quot;tcs/texCoordSource&quot;, a new static attribute, is a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             string array of up to 32 elements.  Set it to specify</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             the source of each TEXCOORD vertex parameter as one of:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             a UV set name; &quot;tangent&quot;; &quot;binormal&quot;; &quot;normal&quot;; an empty</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             string; or up to 4 float values &quot;x y z w&quot;.  Default is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             {&quot;map1&quot;,&quot;tangent&quot;,&quot;binormal&quot;}.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - &quot;-mtc/maxTexCoords&quot; flag of cgfxShader command returns an</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             upper bound on the number of texcoord inputs per vertex</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             (GL_MAX_TEXTURE_UNITS) that can be passed from Maya thru</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             OpenGL to vertex shaders on the current workstation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - The MEL command `pluginInfo -q -version cgfxShader`</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             returns the plug-in version and cgfxShaderNode.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             compile date.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Improved error handling.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  12/2003  Kurt Harriman - www.octopusgraphics.com +1-415-893-1023</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - To load or reload an effect, use the cgfxShader command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             &quot;-fx/fxFile &lt;filename&gt;&quot; flag.  Setting the cgfxShader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             node&#39;s &quot;s/shader&quot; attribute no longer loads the effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - To choose a technique, set the &quot;t/technique&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             attribute of the cgfxShader node.  The effect is not</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             reloaded.  There is no longer a message box requiring</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             the user to choose a technique when loading an effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - The techniques defined by the current effect are returned</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             by the cgfxShader command &quot;-lt/-listTechniques&quot; flag.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Fixed incorrect transformation of direction/position</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             parameters to spaces other than world space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Dangling references to deleted dynamic attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             caused exceptions in MObject destructor, terminating</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             the Maya process.  This has been fixed.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           - Improved error handling.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef CGFXSHADER_VERSION</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define CGFXSHADER_VERSION  &quot;4.5&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderNode.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxProfile.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxFindImage.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxPassStateSetter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxTextureCache.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;cgfxShaderCommon.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataBlock.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEventMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHwTextureManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileIO.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MNodeMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyGraph.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTextureManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUIDrawManager.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Viewport 2.0 includes</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef ENABLE_TRACE_API_CALLS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef ENABLE_TRACE_API_CALLS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TRACE_API_CALLS(x) cerr &lt;&lt; &quot;cgfxShader: &quot;&lt;&lt;(x)&lt;&lt;&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TRACE_API_CALLS(x)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_SWATCH_RENDERING_SUPPORTED_)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For swatch rendering</span></div>\n\
<div class=\"line\">_OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;maya/MGeometryData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;maya/MHWShaderSwatchGenerator.h&gt;</span></div>\n\
<div class=\"line\">_OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;nv_dds.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;Mmsystem.h&gt;</span>   <span class=\"comment\">// for timeGetTime</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;sys/timeb.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;limits.h&gt;</span>     <span class=\"comment\">// for UINT_MAX</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define stricmp strcasecmp</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define strnicmp strncasecmp</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define GLOBJECT_BUFFER_OFFSET(i) ((char *)NULL + (i)) // For GLObject offsets</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> glStateCache::sMaxTextureUnits = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">glStateCache::glStateCache()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">glStateCache glStateCache::gInstance;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> glStateCache::activeTexture( <span class=\"keywordtype\">int</span> i)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( i != fActiveTextureUnit)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fActiveTextureUnit = i;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( glClientActiveTexture)</div>\n\
<div class=\"line\">            glClientActiveTexture( GL_TEXTURE0_ARB + i );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> glStateCache::enableVertexAttrib( <span class=\"keywordtype\">int</span> i)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !(fEnabledRegisters &amp; (1 &lt;&lt; (glRegister::kVertexAttrib + i))))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( glEnableVertexAttribArray)</div>\n\
<div class=\"line\">            glEnableVertexAttribArray( i);</div>\n\
<div class=\"line\">        fEnabledRegisters |= (1 &lt;&lt; (glRegister::kVertexAttrib + i));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fRequiredRegisters |= (1 &lt;&lt; (glRegister::kVertexAttrib + i));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> glStateCache::flushState()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Work out which registers are enabled, but no longer required</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> redundantRegisters = fEnabledRegisters &amp; ~fRequiredRegisters;</div>\n\
<div class=\"line\">    <span class=\"comment\">//printf( &quot;State requires %d, enabled %d, redundant %d\\n&quot;, fRequiredRegisters, fEnabledRegisters, redundantRegisters);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Disable them</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( redundantRegisters &amp; (1 &lt;&lt; glRegister::kPosition))</div>\n\
<div class=\"line\">        glDisableClientState(GL_VERTEX_ARRAY);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( redundantRegisters &amp; (1 &lt;&lt; glRegister::kNormal))</div>\n\
<div class=\"line\">        glDisableClientState(GL_NORMAL_ARRAY);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( redundantRegisters &amp; (1 &lt;&lt; glRegister::kColor))</div>\n\
<div class=\"line\">        glDisableClientState(GL_COLOR_ARRAY);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( redundantRegisters &amp; (1 &lt;&lt; glRegister::kSecondaryColor))</div>\n\
<div class=\"line\">        glDisableClientState(GL_SECONDARY_COLOR_ARRAY_EXT);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = glRegister::kTexCoord; i &lt;= glRegister::kLastTexCoord; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( redundantRegisters &amp; (1 &lt;&lt; i))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            activeTexture( i - glRegister::kTexCoord);</div>\n\
<div class=\"line\">            glDisableClientState(GL_TEXTURE_COORD_ARRAY);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = glRegister::kVertexAttrib; i &lt;= glRegister::kLastVertexAttrib; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( redundantRegisters &amp; (1 &lt;&lt; i))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( glDisableVertexAttribArray)</div>\n\
<div class=\"line\">                glDisableVertexAttribArray( i - glRegister::kVertexAttrib);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fEnabledRegisters = fRequiredRegisters;</div>\n\
<div class=\"line\">    fRequiredRegisters = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This typeid must be unique across the universe of Maya plug-ins.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// TODO: Get a unique ID from NVIDIA if they have them or from A|W</span></div>\n\
<div class=\"line\"><span class=\"comment\">// if they do not.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>     cgfxShaderNode::sId( 4084862000 );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>     cgfxShaderNode::sId( 0xF37A0C30 );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CGcontext       cgfxShaderNode::sCgContext;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxShaderNode::Effect2NodesMap cgfxShaderNode::sEffect2NodesMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Attribute declarations</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sShader;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sTechnique;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sProfile;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sAttributeList;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sVertexAttributeList;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sVertexAttributeSource;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sTexCoordSource;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sColorSource;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     cgfxShaderNode::sTexturesByName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Codes used in ftexCoordList array</span></div>\n\
<div class=\"line\"><span class=\"keyword\">enum</span> ETexCoord</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    etcNull      = -1,</div>\n\
<div class=\"line\">    etcConstant  = -2,</div>\n\
<div class=\"line\">    etcNormal    = -3,</div>\n\
<div class=\"line\">    etcTangent   = -4,</div>\n\
<div class=\"line\">    etcBinormal  = -5,</div>\n\
<div class=\"line\">    etcDataSet   = -6,</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Constructor:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">cgfxShaderNode::cgfxShaderNode()</div>\n\
<div class=\"line\">:   fCurrentTechnique( NULL)</div>\n\
<div class=\"line\">,   fVertexAttributes( NULL)</div>\n\
<div class=\"line\">#ifdef TEXTURES_BY_NAME</div>\n\
<div class=\"line\">,   fTexturesByName( true )</div>\n\
<div class=\"line\">#else</div>\n\
<div class=\"line\">,   fTexturesByName( false )</div>\n\
<div class=\"line\">#endif</div>\n\
<div class=\"line\">,   fNormalsPerVertex( 3 )</div>\n\
<div class=\"line\">,   fPassStateSetters( NULL )</div>\n\
<div class=\"line\">,   fConstructed(false)</div>\n\
<div class=\"line\">,   fErrorCount( 0 )</div>\n\
<div class=\"line\">,   fErrorLimit( 8 )</div>\n\
<div class=\"line\">,   fProfileName( <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\">,   fLastShaderFxFileAtVASSet( <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\">,   fShaderFxFile()</div>\n\
<div class=\"line\">,   fShaderFxFileChanged( false )</div>\n\
<div class=\"line\">,   fGeomReqDataVersionId( 0 )</div>\n\
<div class=\"line\">,   fUVEditorTexture( NULL )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set texCoordSource attribute to its default value.</span></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> sa;</div>\n\
<div class=\"line\">    sa.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <span class=\"stringliteral\">&quot;map1&quot;</span> );</div>\n\
<div class=\"line\">    sa.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <span class=\"stringliteral\">&quot;tangent&quot;</span> );</div>\n\
<div class=\"line\">    sa.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <span class=\"stringliteral\">&quot;binormal&quot;</span> );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> sa2;</div>\n\
<div class=\"line\">    sa2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <span class=\"stringliteral\">&quot;colorSet1&quot;</span> );</div>\n\
<div class=\"line\">    setDataSources( &amp;sa, &amp;sa2 );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Post-constructor</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::postConstructor()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fConstructed = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Watch for attribute removals, see comments in the callback for details</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisObj = thisMObject();</div>\n\
<div class=\"line\">    fCallbackIds.append(</div>\n\
<div class=\"line\">        <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#ad17efcc7d26e385a5f88de78985b1919\">MNodeMessage::addAttributeAddedOrRemovedCallback</a>(</div>\n\
<div class=\"line\">            thisObj,</div>\n\
<div class=\"line\">            attributeAddedOrRemovedCB,</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">void</span>*)<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hw_shader_node.html#a49e2f0b3db50d2e4b0a916713977450d\">MPxHwShaderNode::getHwShaderNodePtr</a>(thisObj)));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Destructor:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">cgfxShaderNode::~cgfxShaderNode()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove effect - node association</span></div>\n\
<div class=\"line\">    cgfxShaderNode::removeAssociation(<span class=\"keyword\">this</span>, fEffect);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. ~node &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fConstructed )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( thisMObject() );</div>\n\
<div class=\"line\">        ss += fnNode.name();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Free up any the textures referenced by the attributes. We have</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to perform this manually becauce the attribute list might be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// kept alive by the undo queue.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fAttrDefList.isNull()) {</div>\n\
<div class=\"line\">        fAttrDefList-&gt;releaseTextures();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove all the callbacks that we registered.</span></div>\n\
<div class=\"line\">    <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#ac637287cc26b707b9e1a175a32f44e29\">MMessage::removeCallbacks</a>( fCallbackIds );</div>\n\
<div class=\"line\">    fCallbackIds.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVEditorTexture) {</div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (theRenderer) {</div>\n\
<div class=\"line\">            <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* txtManager = theRenderer-&gt;<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (txtManager) {</div>\n\
<div class=\"line\">                txtManager-&gt;<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(fUVEditorTexture);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] fPassStateSetters;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method computes the value of the given output plug based</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      on the values of the input attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Arguments:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      plug - the plug to compute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      data - object that provides access to the attributes for this node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> cgfxShaderNode::compute( <span class=\"keyword\">const</span> <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; data )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> returnStatus;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute a color, so that Hypershade swatches do not render black.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((plug == outColor) || (plug.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>() == outColor))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> color(.07f, .8f, .07f);</div>\n\
<div class=\"line\">        <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outputHandle = data.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( outColor );</div>\n\
<div class=\"line\">        outputHandle.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a5e7d49f6ed0e237f1e9e43b639f06d07\">asFloatVector</a>() = color;</div>\n\
<div class=\"line\">        outputHandle.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kUnknownParameter;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ========== cgfxShaderNode::creator ==========</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      this method exists to give Maya a way to create new objects</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      of this type.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      a new object of this type.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* cgfxShaderNode::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> cgfxShaderNode();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ========== cgfxShaderNode::initialize ==========</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method is called to create and initialize all of the attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      and attribute dependencies for this node type.  This is only called</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      once when the node type is registered with Maya.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Values:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kSuccess</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kFailure</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">cgfxShaderNode::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ms;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        initializeNodeAttrs();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )   <span class=\"comment\">// internal error</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> es = <span class=\"stringliteral\">&quot;cgfxShaderNode internal error &quot;</span>;</div>\n\
<div class=\"line\">        es += (int)ee;</div>\n\
<div class=\"line\">        <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( es );</div>\n\
<div class=\"line\">        ms = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> es = <span class=\"stringliteral\">&quot;cgfxShaderNode internal error: Unhandled exception in initialize&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( es );</div>\n\
<div class=\"line\">        ms = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ms;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Create all the attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::initializeNodeAttrs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a>   typedAttr;</div>\n\
<div class=\"line\">    <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numericAttr;</div>\n\
<div class=\"line\">    <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html\">MFnStringData</a>       stringData;</div>\n\
<div class=\"line\">    <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a>  stringArrayData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             stat, stat2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The shader attribute holds the name of the .fx file that defines</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sShader = typedAttr.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;shader&quot;</span>, <span class=\"stringliteral\">&quot;s&quot;</span>, <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, stringData.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat2 );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute is keyable and will show up in the channel box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mark it as internal so we can track changes to it and know when to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// reload the .fx file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute affects VP2.0 viewport appearance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the attribute we have created to the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = addAttribute(sShader);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// technique</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    sTechnique = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;technique&quot;</span>, <span class=\"stringliteral\">&quot;t&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">        stringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat2 );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute is keyable and will show up in the channel box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mark it as internal so we can track changes to it and know when to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// set the technique.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute affects VP2.0 viewport appearance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the attribute we have created to the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = addAttribute(sTechnique);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Profile</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sProfile = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;profile&quot;</span>, <span class=\"stringliteral\">&quot;p&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>,</div>\n\
<div class=\"line\">                                stringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat2 );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute is keyable and will show up in the channel box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mark it as internal so we can track changes to it and know when to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// set the profile and recompile the Cg programs.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute affects VP2.0 viewport appearance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the attribute we have created to the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = addAttribute(sProfile);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attributeList (uniform parameters)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    sAttributeList = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;attributeList&quot;</span>, <span class=\"stringliteral\">&quot;al&quot;</span>, <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>,</div>\n\
<div class=\"line\">        stringArrayData.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat2 );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute is NOT keyable and will NOT show up in the channel box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute is NOT connectable</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This attribute is an NOT an array.  (It is a single valued attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// whose value is a single MStringArray object.)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#acc80b84249f9c028f2c6d085a026b50c\">setArray</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mark it as internal so we can track changes to it and know when to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// reload the .fx file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This attribute is a hidden.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab8e48be1f1009a30d0e40dfcaf9e649d\">setHidden</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute affects VP2.0 viewport appearance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the attribute we have created to the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = addAttribute(sAttributeList);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// vertexAttributeList (varying parameters)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    sVertexAttributeList = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;vertexAttributeList&quot;</span>, <span class=\"stringliteral\">&quot;val&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>,</div>\n\
<div class=\"line\">        stringArrayData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat2 );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute is NOT keyable and will NOT show up in the channel box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute is NOT connectable</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This attribute is an NOT an array.  (It is a single valued attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// whose value is a single MStringArray object.)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#acc80b84249f9c028f2c6d085a026b50c\">setArray</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mark it as internal so we can track changes to it and know when to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// reload the .fx file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This attribute is a hidden.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab8e48be1f1009a30d0e40dfcaf9e649d\">setHidden</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute affects VP2.0 viewport appearance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the attribute we have created to the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = addAttribute(sVertexAttributeList);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// vertexAttributeSource</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sVertexAttributeSource = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>( <span class=\"stringliteral\">&quot;vertexAttributeSource&quot;</span>, <span class=\"stringliteral\">&quot;vas&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>,</div>\n\
<div class=\"line\">        <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;stat );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = addAttribute( sVertexAttributeSource );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// texCoordSource</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sTexCoordSource = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>( <span class=\"stringliteral\">&quot;texCoordSource&quot;</span>, <span class=\"stringliteral\">&quot;tcs&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;stat );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = addAttribute( sTexCoordSource );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// colorSource</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sColorSource = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>( <span class=\"stringliteral\">&quot;colorSource&quot;</span>, <span class=\"stringliteral\">&quot;cs&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;stat );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = addAttribute( sColorSource );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// texturesByName</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sTexturesByName = numericAttr.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;texturesByName&quot;</span>, <span class=\"stringliteral\">&quot;tbn&quot;</span>, <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>,</div>\n\
<div class=\"line\">        0, &amp;stat );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = numericAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    stat = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    <span class=\"comment\">// Hide this switch - TDs can recompile this to default to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// different options, but we don&#39;t want to encourage users</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to switch some shading nodes to use node textures, and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// others named textures (and we definitely don&#39;t want to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// try and handle converting configured shaders from one to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the other)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    stat = numericAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab8e48be1f1009a30d0e40dfcaf9e649d\">setHidden</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    numericAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    stat = addAttribute( sTexturesByName );</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::initializeNodeAttrs</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::copyInternalData( <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* pSrc )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxShaderNode&amp; src = *(cgfxShaderNode*)pSrc;</div>\n\
<div class=\"line\">    setTexturesByName( src.getTexturesByName() );</div>\n\
<div class=\"line\">    setShaderFxFile( src.shaderFxFile() );</div>\n\
<div class=\"line\">    setShaderFxFileChanged( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    setDataSources( &amp;src.getTexCoordSource(), &amp;src.getColorSource() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Flush the effect, since we are going to reload the Fx from the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// file.</span></div>\n\
<div class=\"line\">    fEffect = cgfxRCPtr&lt;const cgfxEffect&gt;();</div>\n\
<div class=\"line\">    fCurrentTechnique = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Rebuild the shader from the fx file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName = cgfxFindFile(shaderFxFile());</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasFile = (fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() != NULL) &amp;&amp; strcmp(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( hasFile )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the effect for this node.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxRCPtr&lt;const cgfxEffect&gt; effect = cgfxEffect::loadEffect(fileName, cgfxProfile::getProfile(src.getProfile()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (effect-&gt;isValid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxAttrDefList&gt; effectList;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> attributeList;</div>\n\
<div class=\"line\">            <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> dagMod;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Update the node.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            cgfxAttrDef::updateNode(effect, <span class=\"keyword\">this</span>, &amp;dagMod, effectList, attributeList);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status =</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                dagMod.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            assert(status == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            setAttrDefList(effectList);</div>\n\
<div class=\"line\">            setAttributeList(attributeList);</div>\n\
<div class=\"line\">            setEffect(effect);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setTechnique( src.getTechnique() );</div>\n\
<div class=\"line\">    setProfile( src.getProfile() );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// cgfxShaderNode::copyInternalData</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderNode::setInternalValue( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> retVal = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. seti &quot;</span>;</div>\n\
<div class=\"line\">        ss += plug.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>( <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug == sShader ||</div>\n\
<div class=\"line\">            plug == sTechnique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ss += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            ss += handle.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>();</div>\n\
<div class=\"line\">            ss += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">        ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug == sShader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setShaderFxFile(handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sTechnique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setTechnique(handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sProfile)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setProfile(handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sAttributeList)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> nonConstHandle(handle);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> saData = nonConstHandle.data();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnSaData(saData);</div>\n\
<div class=\"line\">            setAttributeList(fnSaData.array());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sVertexAttributeList)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> nonConstHandle(handle);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> saData = nonConstHandle.data();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnSaData(saData);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; attributeList = fnSaData.array();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; attributes;</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt;* nextAttribute = &amp;attributes;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numAttributes = attributeList.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() / 4;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; numAttributes; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                cgfxRCPtr&lt;cgfxVertexAttribute&gt; attribute = cgfxRCPtr&lt;cgfxVertexAttribute&gt;(<span class=\"keyword\">new</span> cgfxVertexAttribute());</div>\n\
<div class=\"line\">                attribute-&gt;fName = attributeList[ i * 4 + 0];</div>\n\
<div class=\"line\">                attribute-&gt;fType = attributeList[ i * 4 + 1];</div>\n\
<div class=\"line\">                attribute-&gt;fUIName = attributeList[ i * 4 + 2];</div>\n\
<div class=\"line\">                attribute-&gt;fSemantic = attributeList[ i * 4 + 3];</div>\n\
<div class=\"line\">                *nextAttribute = attribute;</div>\n\
<div class=\"line\">                nextAttribute = &amp;attribute-&gt;fNext;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            setVertexAttributes( attributes );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == sVertexAttributeSource )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> nonConstHandle( handle );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     saData = nonConstHandle.data();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnSaData( saData );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> values = fnSaData.array();</div>\n\
<div class=\"line\">            setVertexAttributeSource( values);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == sTexCoordSource )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> nonConstHandle( handle );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     saData = nonConstHandle.data();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnSaData( saData );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> values = fnSaData.array();</div>\n\
<div class=\"line\">            setDataSources( &amp;values, NULL );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == sColorSource )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> nonConstHandle( handle );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     saData = nonConstHandle.data();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> fnSaData( saData );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> values = fnSaData.array();</div>\n\
<div class=\"line\">            setDataSources( NULL, &amp;values );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == sTexturesByName )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setTexturesByName( handle.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a69fdebf4dcdf33c1b313eb4a426e0d45\">asBool</a>(), !<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#accbcaffc37fcbee9f7974aae80c8014b\">MFileIO::isReadingFile</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            retVal = <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a6caab4434e836748680958883564af35\">MPxHwShaderNode::setInternalValue</a>( plug, handle);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, (<span class=\"keywordtype\">size_t</span>)e );</div>\n\
<div class=\"line\">        retVal = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, __LINE__ );</div>\n\
<div class=\"line\">        retVal = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderNode::getInternalValue( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> retVal = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. geti &quot;</span>;</div>\n\
<div class=\"line\">        ss += plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>( <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( plug == sShader )</div>\n\
<div class=\"line\">            ss += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span> + fShaderFxFile + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sTechnique)</div>\n\
<div class=\"line\">            ss += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span> + fTechnique + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">        ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug == sShader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handle.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(fShaderFxFile);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sTechnique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(fTechnique);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sProfile)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(fProfileName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sAttributeList)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> saData;</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(saData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(fAttributeListArray));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sVertexAttributeList)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> attributeList;</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; attribute = fVertexAttributes;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( attribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attributeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( attribute-&gt;fName);</div>\n\
<div class=\"line\">                attributeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( attribute-&gt;fType);</div>\n\
<div class=\"line\">                attributeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( attribute-&gt;fUIName);</div>\n\
<div class=\"line\">                attributeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( attribute-&gt;fSemantic);</div>\n\
<div class=\"line\">                attribute = attribute-&gt;fNext;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> saData;</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(saData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>( attributeList));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == sVertexAttributeSource )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> attributeSources;</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; attribute = fVertexAttributes;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( attribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attributeSources.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( attribute-&gt;fSourceName);</div>\n\
<div class=\"line\">                attribute = attribute-&gt;fNext;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> saData;</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( saData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>( attributeSources ) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == sTexCoordSource )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> saData;</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( saData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>( fTexCoordSource ) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( plug == sColorSource )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> saData;</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( saData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>( fColorSource ) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sTexturesByName)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(fTexturesByName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            retVal = <a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa88f4dd4cfd3e964e0806d6e5b253347\">MPxHwShaderNode::getInternalValue</a>( plug, handle);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, (<span class=\"keywordtype\">size_t</span>)e );</div>\n\
<div class=\"line\">        retVal = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, __LINE__ );</div>\n\
<div class=\"line\">        retVal = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> checkGlErrors(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* msg)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MYERR(n)    case n: OutputDebugStrings(&quot;    &quot;, #n); break</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GLenum err;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> errors = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> ((err = glGetError()) != GL_NO_ERROR)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!errors)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Print this the first time through the loop</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            OutputDebugStrings(<span class=\"stringliteral\">&quot;OpenGl errors: &quot;</span>, msg);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        errors = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (err)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            MYERR(GL_INVALID_ENUM);</div>\n\
<div class=\"line\">            MYERR(GL_INVALID_VALUE);</div>\n\
<div class=\"line\">            MYERR(GL_INVALID_OPERATION);</div>\n\
<div class=\"line\">            MYERR(GL_STACK_OVERFLOW);</div>\n\
<div class=\"line\">            MYERR(GL_STACK_UNDERFLOW);</div>\n\
<div class=\"line\">            MYERR(GL_OUT_OF_MEMORY);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">char</span> tmp[32];</div>\n\
<div class=\"line\">                sprintf(tmp, <span class=\"stringliteral\">&quot;%d&quot;</span>, err);</div>\n\
<div class=\"line\">                OutputDebugStrings(<span class=\"stringliteral\">&quot;    GL Error #&quot;</span>, tmp);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef MYERR</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* MAYA_PRINT_DEBUG_INFO */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Handle a change in a connected texture</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> textureChangedCallback( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7\">MNodeMessage::AttributeMessage</a> msg, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; otherPlug, <span class=\"keywordtype\">void</span>* aDefVoid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    cgfxAttrDef* aDef = (cgfxAttrDef*)aDefVoid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> plugAttr(plug.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>(&amp;status));</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plugAttr.name() == <span class=\"stringliteral\">&quot;fileTextureName&quot;</span>) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> textureNode(plug.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> outPlug(textureNode.findPlug(<span class=\"stringliteral\">&quot;outColor&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <a name=\"_a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html\">MItDependencyGraph</a> iter(outPlug); !iter.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#ac0f0d6fc806b11d246e05cb94e886b38\">isDone</a>(); iter.next()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> oplug(iter.thisPlug());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (oplug.attribute() == aDef-&gt;fAttr) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// This callback invocation is not for a texture attribute.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Whenever there is a change in our texture&#39;s attributes (which</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// could also be texture node deleted or disconnected), remove</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// our callback to signify that this texture needs to be refreshed.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// We don&#39;t release the GL texture here because there may not be</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a valid GL context around when the DG is being updated. The</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// texture will get flushed at the next draw time when the bind</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// code determines there is a node but no callback.</span></div>\n\
<div class=\"line\">                aDef-&gt;releaseCallback();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// We mark the texture as staled in the texture cache. If we don&#39;t</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// do that, it won&#39;t be read back again from disk.</span></div>\n\
<div class=\"line\">                aDef-&gt;fTexture-&gt;markAsStaled();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_SWATCH_RENDERING_SUPPORTED_)</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> cgfxShaderNode::renderSwatchImage( <a name=\"_a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> &amp; outImage )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( sCgContext == 0 )   <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the hardware renderer utility class</span></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    <a name=\"_a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html\">MHardwareRenderer</a> *pRenderer = <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html#a93fef222f7278c123e8df750f7f0ea5b\">MHardwareRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pRenderer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; backEndStr = pRenderer-&gt;backEndString();</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get geometry</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// ============</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* pIndexing = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>  numberOfData = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>  indexCount = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html#a5f45789e2294fc128af5b04595d96505\">MHardwareRenderer::GeometricShape</a> gshape = <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hardware_renderer.html#a5f45789e2294fc128af5b04595d96505acb4a5f68a3b6cd8c05b1dc9c5a487c88\">MHardwareRenderer::kDefaultSphere</a>;</div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        <a name=\"_a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_geometry_data.html\">MGeometryData</a>* pGeomData =</div>\n\
<div class=\"line\">            pRenderer-&gt;referenceDefaultGeometry( gshape, numberOfData, pIndexing, indexCount );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !pGeomData )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Make the swatch context current</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// ===============================</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, height;</div>\n\
<div class=\"line\">        outImage.<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#acab1f6acf34fc74e4d717322fa35241a\">getSize</a>( width, height );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> origWidth = width;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> origHeight = height;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status2 = pRenderer-&gt;makeSwatchContextCurrent( backEndStr, width, height );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( status2 != MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">            pRenderer-&gt;dereferenceGeometry( pGeomData, numberOfData );</div>\n\
<div class=\"line\">            _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glPushAttrib ( GL_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\">        glMatrixMode(GL_PROJECTION);</div>\n\
<div class=\"line\">        glPushMatrix();</div>\n\
<div class=\"line\">        glMatrixMode(GL_MODELVIEW);</div>\n\
<div class=\"line\">        glPushMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the light direction from the API, and use it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// =============================================</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> light_pos[4];</div>\n\
<div class=\"line\">            pRenderer-&gt;getSwatchLightDirection( light_pos[0], light_pos[1], light_pos[2], light_pos[3] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get camera</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// ==========</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the camera frustum from the API</span></div>\n\
<div class=\"line\">            glMatrixMode(GL_PROJECTION);</div>\n\
<div class=\"line\">            glLoadIdentity();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> l, r, b, t, n, f;</div>\n\
<div class=\"line\">            pRenderer-&gt;getSwatchPerspectiveCameraSetting( l, r, b, t, n, f );</div>\n\
<div class=\"line\">            glFrustum( l, r, b, t, n, f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glMatrixMode(GL_MODELVIEW);</div>\n\
<div class=\"line\">            glLoadIdentity();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> x, y, z, w;</div>\n\
<div class=\"line\">            pRenderer-&gt;getSwatchPerspectiveCameraTranslation( x, y, z, w );</div>\n\
<div class=\"line\">            glTranslatef( x, y, z );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the default background color and clear the background</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> r, g, b, a;</div>\n\
<div class=\"line\">        <a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_shader_swatch_generator.html#a95a6855572205246f2741796ed8c5bdc\">MHWShaderSwatchGenerator::getSwatchBackgroundColor</a>( r, g, b, a );</div>\n\
<div class=\"line\">        glClearColor( r, g, b, a );</div>\n\
<div class=\"line\">        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glShadeModel(GL_SMOOTH);</div>\n\
<div class=\"line\">        glEnable(GL_DEPTH_TEST);</div>\n\
<div class=\"line\">        glDepthFunc(GL_LEQUAL);</div>\n\
<div class=\"line\">        glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Draw The Swatch</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// ===============</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//drawTheSwatch( pGeomData, pIndexing, numberOfData, indexCount );</span></div>\n\
<div class=\"line\">        <a name=\"_a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dummyPath;</div>\n\
<div class=\"line\">        glBind( dummyPath );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> *vertexData = (<span class=\"keywordtype\">float</span> *)( pGeomData[0].data() );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> *normalData = (<span class=\"keywordtype\">float</span> *)( pGeomData[1].data() );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> *uvData = (<span class=\"keywordtype\">float</span> *)( pGeomData[2].data() );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> *tangentData = (<span class=\"keywordtype\">float</span> *)( pGeomData[3].data() );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> *binormalData = (<span class=\"keywordtype\">float</span> *)( pGeomData[4].data() );</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Stick uvs into ptr array</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> uvCount = fUVSets.length();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> ** texCoordArrays = uvCount ? <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span> * [ uvCount] : NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> uv = 0; uv &lt; uvCount; uv++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            texCoordArrays[ uv] = uvData;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Stick normal, tangent, binormals into ptr array</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> normalCount = uvCount &gt; 0 ? uvCount : 1;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> ** normalArrays = <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span> * [ fNormalsPerVertex * normalCount];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> n = 0; n &lt; normalCount; n++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( fNormalsPerVertex &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                normalArrays[ n * fNormalsPerVertex + 0] = normalData;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( fNormalsPerVertex &gt; 1)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    normalArrays[ n * fNormalsPerVertex + 1] = tangentData;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( fNormalsPerVertex &gt; 2)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        normalArrays[ n * fNormalsPerVertex + 2] = binormalData;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        glGeometry( dummyPath,</div>\n\
<div class=\"line\">                    GL_TRIANGLES,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">                    indexCount,</div>\n\
<div class=\"line\">                    pIndexing,</div>\n\
<div class=\"line\">                    pGeomData[0].elementCount(),</div>\n\
<div class=\"line\">                    NULL, <span class=\"comment\">/* no vertex ids */</span></div>\n\
<div class=\"line\">                    vertexData,</div>\n\
<div class=\"line\">                    fNormalsPerVertex,</div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> **) normalArrays,</div>\n\
<div class=\"line\">                    0,</div>\n\
<div class=\"line\">                    NULL, <span class=\"comment\">/* no colours */</span></div>\n\
<div class=\"line\">                    uvCount,</div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> **) texCoordArrays);</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glUnbind( dummyPath );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( normalArrays) <span class=\"keyword\">delete</span>[] normalArrays;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( texCoordArrays) <span class=\"keyword\">delete</span>[] texCoordArrays;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Read pixels back from swatch context to MImage</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// ==============================================</span></div>\n\
<div class=\"line\">        pRenderer-&gt;readSwatchContextPixels( backEndStr, outImage );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Double check the outing going image size as image resizing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// was required to properly read from the swatch context</span></div>\n\
<div class=\"line\">        outImage.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#acab1f6acf34fc74e4d717322fa35241a\">getSize</a>( width, height );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (width != origWidth || height != origHeight)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = <a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//restore matrix and gl state</span></div>\n\
<div class=\"line\">        glMatrixMode(GL_PROJECTION);</div>\n\
<div class=\"line\">        glPopMatrix();</div>\n\
<div class=\"line\">        glMatrixMode(GL_MODELVIEW);</div>\n\
<div class=\"line\">        glPopMatrix();</div>\n\
<div class=\"line\">        glPopAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//dereference geometry after rendering</span></div>\n\
<div class=\"line\">        _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">        pRenderer-&gt;dereferenceGeometry( pGeomData, numberOfData );</div>\n\
<div class=\"line\">        _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Tell Maya that Cg effects can be batched</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderNode::supportsBatching()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Tell Maya to invert texture coordinates for this shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This function is only called in the old interface: glBind/glGeometry/glUnbind</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderNode::invertTexCoords()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cgfxProfile::getTexCoordOrientation() == cgfxProfile::TEXCOORD_OPENGL)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Try and create a missing effect (e.g. once a GL context is available)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderNode::createEffect()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Attempt to read the effect from the file. But only when it has</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// changed file name. In the case where the file cannot be found</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we will not continuously search for the same file while refreshing.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The user will need to manually &quot;refresh&quot; the file name, or change</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// it to force a new attempt to load the file here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> rc = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (shaderFxFileChanged())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName = cgfxFindFile(shaderFxFile());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() != NULL &amp;&amp; strcmp(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"stringliteral\">&quot;&quot;</span>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Compile and create the effect.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> cgfxRCPtr&lt;const cgfxEffect&gt; effect = cgfxEffect::loadEffect(fileName, cgfxProfile::getProfile(fProfileName));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (effect-&gt;isValid())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                cgfxRCPtr&lt;cgfxAttrDefList&gt; effectList;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> attributeList;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> dagMod;</div>\n\
<div class=\"line\">                <span class=\"comment\">// updateNode does a fair amount of work.  It determines which</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// attributes need to be added and which need to be deleted and</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// fills in all the changes in the MDagModifier.  Then it builds</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a new value for the attributeList attribute.  Finally, it</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// builds a new value for the attrDefList internal value.  All</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// these values are returned here where we can set them into the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// node.</span></div>\n\
<div class=\"line\">                cgfxAttrDef::updateNode(effect, <span class=\"keyword\">this</span>, &amp;dagMod, effectList, attributeList);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status =</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                    dagMod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">                assert(status == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Actually update the node.</span></div>\n\
<div class=\"line\">                setAttrDefList(effectList);</div>\n\
<div class=\"line\">                setAttributeList(attributeList);</div>\n\
<div class=\"line\">                setEffect(effect);</div>\n\
<div class=\"line\">                setTechnique(fTechnique);</div>\n\
<div class=\"line\">                rc = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        setShaderFxFileChanged( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> rc;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> cgfxShaderNode::glBind(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shapePath)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// This is the routine where you would do all the expensive,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// one-time kind of work.  Create vertex programs, load</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// textures, etc.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    glStateCache::instance().reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Since we have no idea what the effect may set, we have</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to push everything.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPushAttrib(GL_ALL_ATTRIB_BITS);</div>\n\
<div class=\"line\">    glPushClientAttrib(GL_CLIENT_ALL_ATTRIB_BITS);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// In this case, we will evaluate all the attributes and store the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// parameter values.  In theory, there could be multiple calls to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// geometry in between single calls to bind and unbind.  Since we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// only need to get the attribute values once per frame, get them</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// in bind.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. bind &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fConstructed)</div>\n\
<div class=\"line\">        ss += name();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    ss += request.multiPath().fullPathName();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// One-time OpenGL initialization...</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( glStateCache::sMaxTextureUnits &lt;= 0 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Before this point, we never had a good OpenGL context.  Now</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// we can check for extensions and set up pointers to the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// extension procs.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RESOLVE_GL_EXTENSION( fn, ext) wglGetProcAddress( #fn #ext)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined __linux__</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RESOLVE_GL_EXTENSION( fn, ext) &amp;fn ## ext</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RESOLVE_GL_EXTENSION( fn, ext) &amp;fn</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Don&#39;t use GL_MAX_TEXTURE_UNITS as this does not provide a proper</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// count when the # of image or texcoord inputs differs</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// from the conventional (older) notion of texture unit.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Instead take the minimum of GL_MAX_TEXTURE_COORDS_ARB and</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// GL_MAX_TEXUTRE_IMAGE_UNITS_ARB according to the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// ARB_FRAGMENT_PROGRAM specification.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            GLint tval;</div>\n\
<div class=\"line\">            glGetIntegerv( GL_MAX_TEXTURE_COORDS_ARB, &amp;tval );</div>\n\
<div class=\"line\">            GLint mic = 0;</div>\n\
<div class=\"line\">            glGetIntegerv( GL_MAX_TEXTURE_IMAGE_UNITS_ARB, &amp;mic );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mic &lt; tval)</div>\n\
<div class=\"line\">                tval = mic;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Don&#39;t use this...</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//glGetIntegerv( GL_MAX_TEXTURE_UNITS_ARB, &amp;tval );</span></div>\n\
<div class=\"line\">            glStateCache::sMaxTextureUnits = tval;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!glClientActiveTexture || glStateCache::sMaxTextureUnits &lt; 1)</div>\n\
<div class=\"line\">                glStateCache::sMaxTextureUnits = 1;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (glStateCache::sMaxTextureUnits &gt; CGFXSHADERNODE_GL_TEXTURE_MAX)</div>\n\
<div class=\"line\">                glStateCache::sMaxTextureUnits = CGFXSHADERNODE_GL_TEXTURE_MAX;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Try and grab the first pass of our effect</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fCurrentTechnique &amp;&amp; fCurrentTechnique-&gt;isValid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Set up the uniform attribute values for the effect.</span></div>\n\
<div class=\"line\">            bindAttrValues();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set depth function properly in case we have multi-pass</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fCurrentTechnique-&gt;hasBlending())</div>\n\
<div class=\"line\">                glPushAttrib( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );</div>\n\
<div class=\"line\">            glGetBooleanv( GL_DEPTH_TEST, &amp;fDepthEnableState);</div>\n\
<div class=\"line\">            glGetIntegerv( GL_DEPTH_FUNC, &amp;fDepthFunc);</div>\n\
<div class=\"line\">            glGetIntegerv( GL_BLEND_SRC, &amp;fBlendSourceFactor);</div>\n\
<div class=\"line\">            glGetIntegerv( GL_BLEND_DST, &amp;fBlendDestFactor);</div>\n\
<div class=\"line\">            glDepthFunc(GL_LEQUAL);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// There is no effect.  Either they never set one or the one provided</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// failed to compile.  Just use this default material which is sort</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// of a shiny salmon-pink color.  It looks like nothing that Maya</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// creates by default but still lets you see your geometry.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            glPushAttrib( GL_LIGHTING);</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span> diffuse_color[4]  = {1.0, 0.5, 0.5, 1.0};</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span> specular_color[4] = {1.0, 1.0, 1.0, 1.0};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);</div>\n\
<div class=\"line\">            glEnable(GL_COLOR_MATERIAL);</div>\n\
<div class=\"line\">            glColor4fv(diffuse_color);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set up the specular color</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, specular_color);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set up a default shininess</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, 100.0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        checkGlErrors(<span class=\"stringliteral\">&quot;cgfxShaderNode::glBind&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, (<span class=\"keywordtype\">size_t</span>)e );</div>\n\
<div class=\"line\">        stat = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, __LINE__ );</div>\n\
<div class=\"line\">        stat = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::bind</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::bindAttrValues()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEffect.isNull() || !fEffect-&gt;isValid() || !fTechnique.length())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>  status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  oNode = thisMObject();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This method should NEVER access the shape. If you find yourself tempted to access</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// any data from the shape here (like the matrices), be strong and resist! Any shape</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// dependent data should be set in bindAttrViewValues instead!</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( cgfxAttrDefList::iterator it( fAttrDefList ); it; ++it )</div>\n\
<div class=\"line\">    {                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = *it;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (aDef-&gt;fType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeBool:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetParameter1i(aDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeInt:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetParameter1i(aDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeFloat:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetParameter1f(aDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeString:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetStringParameterValue(aDef-&gt;fParameterHandle, tmp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeVector2:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[2];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp[0], tmp[1]);</div>\n\
<div class=\"line\">                    cgSetParameter2fv(aDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeVector3:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor3:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[3];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                    cgSetParameter3fv(aDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeVector4:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor4:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[4];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                    cgSetParameter4fv(aDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldPos:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// since it is in world space, we don&#39;t need to do extra mat computation. set the value directly.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Read the value</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[4];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fSize == 3)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                        tmp[3] = 1.0;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    cgSetParameterValuefr(aDef-&gt;fParameterHandle, aDef-&gt;fSize, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeMatrix:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> tmp;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp2[4][4];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fInvertMatrix)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        tmp = tmp.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!aDef-&gt;fTransposeMatrix)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        tmp = tmp.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a6fadbac6023eb9d361176a87b73063dc\">transpose</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    tmp.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#afc8a36464bb71526e9d2bc0361f643cf\">get</a>(tmp2);</div>\n\
<div class=\"line\">                    cgSetMatrixParameterfr(aDef-&gt;fParameterHandle, &amp;tmp2[0][0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor1DTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor3DTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeBumpTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeCubeTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeEnvTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalizationTexture:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> texFileName;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> textureNode = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( fTexturesByName)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, texFileName);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// If we have a fileTexture node connect, get the</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// filename it is using</span></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcPlug;</div>\n\
<div class=\"line\">                        aDef-&gt;getSource(oNode, srcPlug);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> srcNode = srcPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( srcNode != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rc;</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgFn(srcNode);</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> filenamePlug = dgFn.findPlug( <span class=\"stringliteral\">&quot;fileTextureName&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;rc);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( rc == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                filenamePlug.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( texFileName);</div>\n\
<div class=\"line\">                                textureNode = filenamePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(&amp;rc);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// attach a monitor to this texture if we don&#39;t already have one</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// Note that we don&#39;t need to worry about handling node destroyed</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// or disconnected, as both of these will trigger attribute changed</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// messages before going away, and we will deregister our callback</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// in the handler!</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( aDef-&gt;fTextureMonitor == kNullCallback &amp;&amp; textureNode != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// If we don&#39;t have a callback, this may mean our texture is dirty</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// and needs to be re-loaded (because we can&#39;t actually delete the</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// texture itself in the DG callback we need to wait until we</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// know we have a GL context - like right here)</span></div>\n\
<div class=\"line\">                                aDef-&gt;releaseTexture();</div>\n\
<div class=\"line\">                                aDef-&gt;fTextureMonitor =</div>\n\
<div class=\"line\">                                    <a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#add4ee645b2cea6f0da5b872e8f011a6a\">MNodeMessage::addAttributeChangedCallback</a>(textureNode, textureChangedCallback, aDef);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fTexture.isNull() || texFileName != aDef-&gt;fStringDef)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;fStringDef = texFileName;</div>\n\
<div class=\"line\">                        aDef-&gt;fTexture = cgfxTextureCache::instance().getTexture(</div>\n\
<div class=\"line\">                            texFileName, textureNode, fShaderFxFile,</div>\n\
<div class=\"line\">                            aDef-&gt;fName, aDef-&gt;fType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!aDef-&gt;fTexture-&gt;isValid() &amp;&amp; texFileName.<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader &quot;</span>;</div>\n\
<div class=\"line\">                            sMsg += fnNode.name();</div>\n\
<div class=\"line\">                            sMsg += <span class=\"stringliteral\">&quot; : failed to load texture \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                            sMsg += texFileName;</div>\n\
<div class=\"line\">                            sMsg += <span class=\"stringliteral\">&quot;\\&quot;.&quot;</span>;</div>\n\
<div class=\"line\">                            <a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    checkGlErrors(<span class=\"stringliteral\">&quot;After loading texture&quot;</span>);</div>\n\
<div class=\"line\">                    cgGLSetupSampler(aDef-&gt;fParameterHandle, aDef-&gt;fTexture-&gt;getTextureId());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeTime:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> ival = timeGetTime() &amp; 0xffffff;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> val = (float)ival * 0.001f;</div>\n\
<div class=\"line\">                    cgSetParameter1f(aDef-&gt;fParameterHandle, val);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeOther:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeUnknown:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenDir:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenPos:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">                <span class=\"comment\">// View dependent parameter</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">            }                          <span class=\"comment\">// switch (aDef-&gt;fType)</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( ++fErrorCount &lt;= fErrorLimit )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader warning &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += (int)ee;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;: &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fnNode.name();</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot; internal error while setting parameter \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += aDef-&gt;fName;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; of effect \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fShaderFxFile;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; for shape &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += currentPath().partialPathName();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::bindAttrValues</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::bindViewAttrValues(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shapePath)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEffect.isNull() || !fEffect-&gt;isValid() || !fTechnique.length())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>  status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  oNode = thisMObject();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> wMatrix, vMatrix, pMatrix, sMatrix;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> wvMatrix, wvpMatrix, wvpsMatrix;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> tmp[4][4];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shapePath.<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">            wMatrix = shapePath.<a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#afb30f64680f5aa038da428a79579d08c\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            wMatrix.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a1353e697af6f95ba0b8c0331c6af7f2f\">setToIdentity</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glGetFloatv(GL_MODELVIEW_MATRIX, &amp;tmp[0][0]);</div>\n\
<div class=\"line\">        wvMatrix = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>(tmp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        vMatrix = wMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>() * wvMatrix;</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">        glGetFloatv(GL_PROJECTION_MATRIX, &amp;tmp[0][0]);</div>\n\
<div class=\"line\">        pMatrix = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>(tmp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        wvpMatrix = wvMatrix * pMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> vpt[4];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> depth[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glGetFloatv(GL_VIEWPORT, vpt);</div>\n\
<div class=\"line\">        glGetFloatv(GL_DEPTH_RANGE, depth);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Construct the NDC -&gt; screen space matrix</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> x0, y0, z0, w, h, d;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        x0 = vpt[0];</div>\n\
<div class=\"line\">        y0 = vpt[1];</div>\n\
<div class=\"line\">        z0 = depth[0];</div>\n\
<div class=\"line\">        w  = vpt[2];</div>\n\
<div class=\"line\">        h  = vpt[3];</div>\n\
<div class=\"line\">        d  = depth[1] - z0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Make a reference to ease the typing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>* s = &amp;sMatrix.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        s[ 0] = w/2;    s[ 1] = 0.0;    s[ 2] = 0.0;    s[ 3] = 0.0;</div>\n\
<div class=\"line\">        s[ 4] = 0.0;    s[ 5] = h/2;    s[ 6] = 0.0;    s[ 7] = 0.0;</div>\n\
<div class=\"line\">        s[ 8] = 0.0;    s[ 9] = 0.0;    s[10] = d/2;    s[11] = 0.0;</div>\n\
<div class=\"line\">        s[12] = x0+w/2; s[13] = y0+h/2; s[14] = z0+d/2; s[15] = 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        wvpsMatrix = wvpMatrix * sMatrix;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( cgfxAttrDefList::iterator it( fAttrDefList ); it; ++it )</div>\n\
<div class=\"line\">    {                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = *it;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (aDef-&gt;fType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenDir:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenPos:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[4];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fSize == 3)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                        tmp[3] = 1.0;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Maya&#39;s API only provides for vectors of size 3.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// When we do the matrix multiply, it will only</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// work correctly if the 4th coordinate is 1.0</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a name=\"_a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec(tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> space = aDef-&gt;fType - cgfxAttrDef::kAttrTypeFirstPos;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (space &lt; 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        space = aDef-&gt;fType - cgfxAttrDef::kAttrTypeFirstDir;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat;  <span class=\"comment\">// initially the identity matrix.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span> (space)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 0: <span class=\"comment\">/* mat = identity */</span>    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 1: mat = wMatrix;          <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 2: mat = wvMatrix;         <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 3: mat = wvpMatrix;        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 4: mat = wvpsMatrix;       <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Maya&#39;s transformation matrices are set up with</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the translation in row 3 (like OpenGL) rather</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// than column 3. To transform a point or vector,</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// use V*M, not M*V.   kh 11/2003</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> base = cgfxAttrDef::kAttrTypeFirstPos;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fType &lt;= cgfxAttrDef::kAttrTypeLastDir)</div>\n\
<div class=\"line\">                        base = cgfxAttrDef::kAttrTypeFirstDir;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (base == cgfxAttrDef::kAttrTypeFirstPos)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a name=\"_a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point(tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                        point *= wMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>() * mat;</div>\n\
<div class=\"line\">                        tmp[0] = (float)point.x;</div>\n\
<div class=\"line\">                        tmp[1] = (<span class=\"keywordtype\">float</span>)point.y;</div>\n\
<div class=\"line\">                        tmp[2] = (float)point.z;</div>\n\
<div class=\"line\">                        tmp[3] = (<span class=\"keywordtype\">float</span>)point.w;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec(tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                        vec *= wMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>() * mat;</div>\n\
<div class=\"line\">                        tmp[0] = (float)vec.x;</div>\n\
<div class=\"line\">                        tmp[1] = (<span class=\"keywordtype\">float</span>)vec.y;</div>\n\
<div class=\"line\">                        tmp[2] = (float)vec.z;</div>\n\
<div class=\"line\">                        tmp[3] = 1.F;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    cgSetParameterValuefc(aDef-&gt;fParameterHandle, aDef-&gt;fSize, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span> (aDef-&gt;fType)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">                        mat = wMatrix; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">                        mat = vMatrix; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">                        mat = pMatrix; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">                        mat = wvMatrix; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">                        mat = wvpMatrix; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fInvertMatrix)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        mat = mat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!aDef-&gt;fTransposeMatrix)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        mat = mat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a6fadbac6023eb9d361176a87b73063dc\">transpose</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[4][4];</div>\n\
<div class=\"line\">                    mat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#afc8a36464bb71526e9d2bc0361f643cf\">get</a>(tmp);</div>\n\
<div class=\"line\">                    cgSetMatrixParameterfr(aDef-&gt;fParameterHandle, &amp;tmp[0][0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogEnabled:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogMode:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogStart:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogEnd:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogDensity:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogColor:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }                          <span class=\"comment\">// switch (aDef-&gt;fType)</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( ++fErrorCount &lt;= fErrorLimit )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader warning &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += (int)ee;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;: &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fnNode.name();</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot; internal error while setting parameter \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += aDef-&gt;fName;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; of effect \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fShaderFxFile;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; for shape &quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (shapePath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">                    sMsg += shapePath.<a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    sMsg += <span class=\"stringliteral\">&quot;SWATCH GEOMETRY&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> cgfxShaderNode::glUnbind(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shapePath)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCurrentTechnique &amp;&amp; fCurrentTechnique-&gt;isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Shaders have an uncanny ability to corrupt depth state</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fDepthEnableState)</div>\n\
<div class=\"line\">            glEnable( GL_DEPTH_TEST);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            glDisable( GL_DEPTH_TEST);</div>\n\
<div class=\"line\">        glDepthFunc( fDepthFunc);</div>\n\
<div class=\"line\">        glBlendFunc( fBlendSourceFactor, fBlendDestFactor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fCurrentTechnique-&gt;hasBlending())</div>\n\
<div class=\"line\">            glPopAttrib();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Restore material attributes</span></div>\n\
<div class=\"line\">        glPopAttrib();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPopClientAttrib();</div>\n\
<div class=\"line\">    glPopAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glStateCache::instance().disableAll();</div>\n\
<div class=\"line\">    glStateCache::instance().activeTexture( 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. unbd &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fConstructed )</div>\n\
<div class=\"line\">        ss += name();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> cgfxShaderNode::glGeometry(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; shapePath,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">int</span> prim,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> writable,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">int</span> indexCount,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> * indexArray,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">int</span> vertexCount,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> * vertexIDs,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * vertexArray,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">int</span> normalCount,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** normalArrays,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">int</span> colorCount,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** colorArrays,</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">int</span> texCoordCount,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** texCoordArrays)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. geom &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fConstructed )</div>\n\
<div class=\"line\">        ss += name();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    ss += indexCount;</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;i &quot;</span>;</div>\n\
<div class=\"line\">    ss += vertexCount;</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;v &quot;</span>;</div>\n\
<div class=\"line\">    ss += normalCount;</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;n &quot;</span>;</div>\n\
<div class=\"line\">    ss += colorCount;</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;c &quot;</span>;</div>\n\
<div class=\"line\">    ss += texCoordCount;</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;t &quot;</span>;</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fCurrentTechnique &amp;&amp; fCurrentTechnique-&gt;isValid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//register cg default state callbacks</span></div>\n\
<div class=\"line\">            cgfxPassStateSetter::registerCgStateCallBacks(</div>\n\
<div class=\"line\">                cgfxPassStateSetter::kDefaultViewport);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set up the uniform attribute values for the effect.</span></div>\n\
<div class=\"line\">            bindViewAttrValues(shapePath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If our input shape is dirty, clear any cached data</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( dirtyMask() != kDirtyNone)</div>\n\
<div class=\"line\">                fBoundDataCache.flush(shapePath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Now render the passes for this effect</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> cgfxPass* pass = fCurrentTechnique-&gt;getFirstPass();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( pass)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                pass-&gt;bind(shapePath, &amp;fBoundDataCache,</div>\n\
<div class=\"line\">                           vertexCount, vertexArray,</div>\n\
<div class=\"line\">                           fNormalsPerVertex, normalCount, normalArrays,</div>\n\
<div class=\"line\">                           colorCount, colorArrays,</div>\n\
<div class=\"line\">                           texCoordCount, texCoordArrays);</div>\n\
<div class=\"line\">                glStateCache::instance().flushState();</div>\n\
<div class=\"line\">                pass-&gt;setCgState();</div>\n\
<div class=\"line\">                glDrawElements(prim, indexCount, GL_UNSIGNED_INT, indexArray);</div>\n\
<div class=\"line\">                pass-&gt;resetCgState();</div>\n\
<div class=\"line\">                pass = pass-&gt;getNext();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"comment\">// fEffect must be NULL</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Now call glDrawElements to put all the primitives on the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// screen.  See the comment above re: glDrawRangeElements.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            glStateCache::instance().enablePosition();</div>\n\
<div class=\"line\">            glVertexPointer(3, GL_FLOAT, 0, vertexArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( normalCount &gt; 0 &amp;&amp; normalArrays[ 0 ] )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glStateCache::instance().enableNormal();</div>\n\
<div class=\"line\">                glNormalPointer(GL_FLOAT, 0, normalArrays[0]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glStateCache::instance().disableNormal();</div>\n\
<div class=\"line\">                glNormal3f(0.0, 0.0, 1.0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glStateCache::instance().flushState();</div>\n\
<div class=\"line\">            glDrawElements(prim, indexCount, GL_UNSIGNED_INT, indexArray);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        checkGlErrors(<span class=\"stringliteral\">&quot;After effects End&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, (<span class=\"keywordtype\">size_t</span>)e );</div>\n\
<div class=\"line\">        stat = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        reportInternalError( __FILE__, __LINE__ );</div>\n\
<div class=\"line\">        stat = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::geometry</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span></div>\n\
<div class=\"line\">cgfxShaderNode::getTexCoordSetNames( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; names )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    names = fUVSets;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> names.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::getTexCoordSetNames</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if MAYA_API_VERSION &gt;= 700</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span></div>\n\
<div class=\"line\">cgfxShaderNode::getColorSetNames( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; names )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    names = fColorSets;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> names.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> cgfxShaderNode::colorsPerVertex()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fColorType.setLength(1);</div>\n\
<div class=\"line\">    fColorIndex.setLength(1);</div>\n\
<div class=\"line\">    fColorType[0] = 0;</div>\n\
<div class=\"line\">    fColorIndex[0] = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">} <span class=\"comment\">// cgfxShaderNode::texCoordsPerVertex</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> cgfxShaderNode::normalsPerVertex()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. npv  &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fConstructed )</div>\n\
<div class=\"line\">        ss += name();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    ss += fNormalsPerVertex;</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now, when using MPxHwShaderNode, this is the first call Maya makes when</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// trying to render a plugin shader. So, in the cases where we were unable</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to create our effect, try and do it here</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEffect.isNull() || !fEffect-&gt;isValid()) {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">        ::OutputDebugString( <span class=\"stringliteral\">&quot;CGFX: fEffect was NULL\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// When batch off-screen rendering through &quot;mayabatch -command hwRender ...&quot;,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the effect will be uninitialized because there was no active OpenGL</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// context at the time &quot;cgfxShader -e -fx ...&quot; was executed. This setup</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// is delayed until now when hardware renderer guarantees a valid context</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and requests the plug-in to bind its resources to it. -cdt</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        createEffect();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fNormalsPerVertex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// NB: Maya calls normalsPerVertex() both before and after bind().</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It appears that the normalCount passed to geometry() is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// obtained *before* the call to bind().  Therefore we set</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// fNormalsPerVertex as early as possible.  kh 9/03</span></div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::normalsPerVertex</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">cgfxShaderNode::getAvailableImages( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; uvSetName,</div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; imageNames)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Find all vertex attributes assigned to this uvSetName</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and record the variable name.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> varNames;</div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; attr = fVertexAttributes;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( attr.isNull() == false )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> source = attr-&gt;fSourceName;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> sourceArray;</div>\n\
<div class=\"line\">        source.<a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>( <span class=\"charliteral\">&#39;:&#39;</span>, sourceArray );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( sourceArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 2               &amp;&amp;</div>\n\
<div class=\"line\">            sourceArray[0].toLowerCase() == <span class=\"stringliteral\">&quot;uv&quot;</span>    &amp;&amp;</div>\n\
<div class=\"line\">            sourceArray[1] == uvSetName             )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            varNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( attr-&gt;fName );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        attr = attr-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For each input assigned to this UV set, determine</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// associated textures from the UVLink annotation.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp; nodeList = attrDefList();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( nodeList.isNull() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Can occur when shader has not been rendered yet, but</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the object is selected with the UV texture editor open.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kNotImplemented;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nVars = varNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; nVars; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxAttrDefList::iterator nmIt;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cgfxAttrDef* adef = (*nmIt);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( adef-&gt;fType == cgfxAttrDef::kAttrTypeColor2DTexture &amp;&amp;</div>\n\
<div class=\"line\">                adef-&gt;fTextureUVLink == varNames[i] )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( adef-&gt;fName );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If no UVLinks found for this UV set, display all 2D textures.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxAttrDefList::iterator nmIt;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cgfxAttrDef* adef = (*nmIt);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( adef-&gt;fType == cgfxAttrDef::kAttrTypeColor2DTexture )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( adef-&gt;fName );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> : <a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Render selected texture for UV editor in legacy mode (openGL)</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">cgfxShaderNode::renderImage( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; imageName,</div>\n\
<div class=\"line\">                            floatRegion region,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a name=\"_a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hw_shader_node_1_1_render_parameters.html\">MPxHwShaderNode::RenderParameters</a>&amp; <span class=\"comment\">/*parameters*/</span>,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span>&amp; imageWidth,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span>&amp; imageHeight)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Locate the shader</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp; nodeList = attrDefList();</div>\n\
<div class=\"line\">    cgfxAttrDef* texDef = NULL;</div>\n\
<div class=\"line\">    cgfxAttrDefList::iterator nmIt;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxAttrDef* adef = (*nmIt);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( adef-&gt;fType &gt;= cgfxAttrDef::kAttrTypeFirstTexture   &amp;&amp;</div>\n\
<div class=\"line\">            adef-&gt;fType &lt;= cgfxAttrDef::kAttrTypeLastTexture    &amp;&amp;</div>\n\
<div class=\"line\">            adef-&gt;fName == imageName )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            texDef = adef;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !texDef )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Only supports 2D textures.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( texDef-&gt;fType != cgfxAttrDef::kAttrTypeColor2DTexture )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw the texture</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    glPushAttrib( GL_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\">    glPushClientAttrib( GL_CLIENT_VERTEX_ARRAY_BIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Do not use the texture cache as that depends on the shader rendering</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// first to initialize the cache.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode( thisMObject() );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> texPlug;</div>\n\
<div class=\"line\">    texDef-&gt;getSource( thisNode, texPlug );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image_file_info.html#a9b0c9320a802a00a718bcab75ba40550\">MImageFileInfo::MHwTextureType</a> hwType;</div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( MS::kSuccess != <a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hw_texture_manager.html#af1077c5a30b589e36b864c09876fbc44\">MHwTextureManager::glBind</a>(texPlug, hwType) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glPopAttrib();</div>\n\
<div class=\"line\">        glPopClientAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( thisMObject() );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader &quot;</span>;</div>\n\
<div class=\"line\">        sMsg += fnNode.name();</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot; : failed to load texture \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        sMsg += imageName;</div>\n\
<div class=\"line\">        sMsg += <span class=\"stringliteral\">&quot;\\&quot;.&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GLint width = 0;</div>\n\
<div class=\"line\">    GLint height = 0;</div>\n\
<div class=\"line\">    glGetTexLevelParameteriv(GL_TEXTURE_2D, 0, GL_TEXTURE_WIDTH, &amp;width);</div>\n\
<div class=\"line\">    glGetTexLevelParameteriv(GL_TEXTURE_2D, 0, GL_TEXTURE_HEIGHT, &amp;height);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);</div>\n\
<div class=\"line\">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glBegin( GL_QUADS );</div>\n\
<div class=\"line\">    glTexCoord2f(region[0][0], region[0][1]);</div>\n\
<div class=\"line\">    glVertex2f(region[0][0], region[0][1]);</div>\n\
<div class=\"line\">    glTexCoord2f(region[0][0], region[1][1]);</div>\n\
<div class=\"line\">    glVertex2f(region[0][0], region[1][1]);</div>\n\
<div class=\"line\">    glTexCoord2f(region[1][0], region[1][1]);</div>\n\
<div class=\"line\">    glVertex2f(region[1][0], region[1][1]);</div>\n\
<div class=\"line\">    glTexCoord2f(region[1][0], region[0][1]);</div>\n\
<div class=\"line\">    glVertex2f(region[1][0], region[0][1]);</div>\n\
<div class=\"line\">    glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPopAttrib();</div>\n\
<div class=\"line\">    glPopClientAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    imageWidth = (int) width;</div>\n\
<div class=\"line\">    imageHeight = (int) height;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Render selected texture for UV editor in viewport 2.0 mode</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">cgfxShaderNode::renderImage( <a name=\"_a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html\">MHWRender::MUIDrawManager</a>&amp; uiDrawManager,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; imageName,</div>\n\
<div class=\"line\">                            floatRegion region,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hw_shader_node_1_1_render_parameters.html\">MPxHwShaderNode::RenderParameters</a>&amp; parameters,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span>&amp; imageWidth,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span>&amp; imageHeight)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Locate the shader</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp; nodeList = attrDefList();</div>\n\
<div class=\"line\">    cgfxAttrDef* texDef = NULL;</div>\n\
<div class=\"line\">    cgfxAttrDefList::iterator nmIt;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxAttrDef* adef = (*nmIt);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( adef-&gt;fType &gt;= cgfxAttrDef::kAttrTypeFirstTexture   &amp;&amp;</div>\n\
<div class=\"line\">            adef-&gt;fType &lt;= cgfxAttrDef::kAttrTypeLastTexture    &amp;&amp;</div>\n\
<div class=\"line\">            adef-&gt;fName == imageName )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            texDef = adef;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !texDef )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Only supports 2D textures.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( texDef-&gt;fType != cgfxAttrDef::kAttrTypeColor2DTexture )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We could have used MTextureManager::acquireTexture that takes the plug in parameter,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// but this is way too slow: the file data gets loaded every time before checking the cache.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Load using file name instead.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve texture file name from attribute def and linked plug</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> textureFileName;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode( thisMObject() );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> texPlug;</div>\n\
<div class=\"line\">        texDef-&gt;getSource( thisNode, texPlug );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgFn( texPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rc;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> filenamePlug = dgFn.findPlug( <span class=\"stringliteral\">&quot;fileTextureName&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;rc);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(rc == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">            filenamePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(textureFileName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(textureFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(theRenderer == NULL)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* txtManager = theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(txtManager == NULL)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> mipmapLevels = 1;</div>\n\
<div class=\"line\">    <a name=\"_a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* texture = txtManager-&gt;<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a04aa3cfef217948abc8edd0f19565f95\">acquireTexture</a>(textureFileName, <span class=\"stringliteral\">&quot;&quot;</span>, mipmapLevels); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(texture == NULL)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release texture used for previous uv editor render and store the new one.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is helpful if the scene does not render the texture.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This prevent having to load the same texture again and again on each draw</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fUVEditorTexture) {</div>\n\
<div class=\"line\">        txtManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(fUVEditorTexture);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fUVEditorTexture = texture;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html\">MHWRender::MTextureDescription</a> desc;</div>\n\
<div class=\"line\">    texture-&gt;<a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html#ad1b6f25f4fb913a233b1c2bff46a62a1\">textureDescription</a>(desc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    imageWidth = desc.<a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#a2582291699b63f6ddc938c371b54344e\">fWidth</a>;</div>\n\
<div class=\"line\">    imageHeight = desc.<a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#aa3b84951e55674788c9ae0f404a8ee17\">fHeight</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Early return, this is just a call to get the size of the texture (&quot;Use image ratio&quot; is on)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(region[0][0] == 0 &amp;&amp; region[0][1] == 0 &amp;&amp; region[1][0] == 0 &amp;&amp; region[1][1] == 0)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render texture on quad</span></div>\n\
<div class=\"line\">    <a name=\"_a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> positions;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a>&amp; texcoords = positions;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tri #0</span></div>\n\
<div class=\"line\">    positions.<a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[0][0], region[0][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[1][0], region[0][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[1][0], region[1][1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tri #1</span></div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[0][0], region[0][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[1][0], region[1][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[0][0], region[1][1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9008ebfa63c02670625076230d77c3f9\">beginDrawable</a>();</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( parameters.<a name=\"a99\"></a>baseColor );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a1a67ff02e590a228a6ccc168c4c44d00\">setTexture</a>( texture );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#af740bfef414d18e34661378f7f4bfb91\">setTextureSampler</a>( parameters.<a name=\"a102\"></a>unfiltered ? <a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac4b92e6b8c820ded95490092f8bfff74acfbcff8a89a15e685607e83819784d80\">MHWRender::MSamplerState::kMinMagMipLinear</a> : <a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac4b92e6b8c820ded95490092f8bfff74a52e14aff9dd4572590cdbfe29c0b79a9\">MHWRender::MSamplerState::kMinMagMipPoint</a>, <a name=\"a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac06d679b414bf6ad84118e6e9712fd58a3f5d4a87f8f641542cda0389c3291985\">MHWRender::MSamplerState::kTexWrap</a> );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a0a8ebc59bf8740d56560abf3e8d7e63d\">setTextureMask</a>( parameters.<a name=\"a107\"></a>showAlphaMask ? <a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state.html#a508bf9ce7f09728669b77bdc572a2340a49d7d249c9c91e4ce0132bcffe5d73d9\">MHWRender::MBlendState::kAlphaChannel</a> : <a name=\"a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state.html#a508bf9ce7f09728669b77bdc572a2340ae071e81463337bd111c8cd13ed696616\">MHWRender::MBlendState::kRGBAChannels</a> );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#ab7479336abc018548fe68277932d848a\">mesh</a>( <a name=\"a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a08260379b97fd733e30ea92e891ede1eaa2c70dd76c8172a9298334473c914304\">MHWRender::MUIDrawManager::kTriangles</a>, positions, NULL, NULL, NULL, &amp;texcoords );</div>\n\
<div class=\"line\">    uiDrawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a1a67ff02e590a228a6ccc168c4c44d00\">setTexture</a>( NULL );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a78c343c25a05be7e46dd4b7ebab82ff6\">endDrawable</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setAttrDefList( <span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp; list )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fAttrDefList.isNull()) {</div>\n\
<div class=\"line\">        cgfxAttrDef::purgeMObjectCache( fAttrDefList );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!list.isNull()) {</div>\n\
<div class=\"line\">        cgfxAttrDef::validateMObjectCache( thisMObject(), list );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fAttrDefList = list;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::setAttrDefList</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::getAttributeList(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; attrList)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tmp;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> len = fAttributeListArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attrList.<a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; len; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        tmp = fAttributeListArray[i];</div>\n\
<div class=\"line\">        attrList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(tmp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::setAttributeList(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; attrList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tmp;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> len = attrList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fAttributeListArray.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; len; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        tmp = attrList[i];</div>\n\
<div class=\"line\">        fAttributeListArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(tmp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Set the current per-vertex attributes the shader needs (replacing any existing set)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setVertexAttributes( cgfxRCPtr&lt;cgfxVertexAttribute&gt; attributeList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Backward compatibility: if we have values set in the old texCoordSources</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// or colorSources, find any varying attributes that use that register</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and inherit the maya source</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fTexCoordSource.length())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> length = fTexCoordSource.length();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semantic( <span class=\"stringliteral\">&quot;TEXCOORD&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( i)</div>\n\
<div class=\"line\">                semantic += i;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                semantic += <span class=\"stringliteral\">&quot;0&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> source( fTexCoordSource[ i]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( source.<a name=\"a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a7487f32861d955d3ac0d8722cc5797b2\">index</a>( <span class=\"charliteral\">&#39;:&#39;</span>) &lt; 0)</div>\n\
<div class=\"line\">                source = <span class=\"stringliteral\">&quot;uv:&quot;</span> + source;</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; newAttribute = attributeList;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( newAttribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( newAttribute-&gt;fSemantic == semantic ||</div>\n\
<div class=\"line\">                    (i == 6 &amp;&amp; (newAttribute-&gt;fSemantic == <span class=\"stringliteral\">&quot;TANGENT&quot;</span> || newAttribute-&gt;fSemantic == <span class=\"stringliteral\">&quot;TANGENT0&quot;</span>)) ||</div>\n\
<div class=\"line\">                    (i == 7 &amp;&amp; (newAttribute-&gt;fSemantic == <span class=\"stringliteral\">&quot;BINORMAL&quot;</span> || newAttribute-&gt;fSemantic == <span class=\"stringliteral\">&quot;BINORMAL0&quot;</span>)))</div>\n\
<div class=\"line\">                    newAttribute-&gt;fSourceName = source;</div>\n\
<div class=\"line\">                newAttribute = newAttribute-&gt;fNext;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fTexCoordSource.<a name=\"a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fColorSource.length())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> length = fColorSource.length();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semantic( <span class=\"stringliteral\">&quot;COLOR&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( i)</div>\n\
<div class=\"line\">                semantic += i;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                semantic += <span class=\"stringliteral\">&quot;0&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> source( fColorSource[ i]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( source.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a7487f32861d955d3ac0d8722cc5797b2\">index</a>( <span class=\"charliteral\">&#39;:&#39;</span>) &lt; 0)</div>\n\
<div class=\"line\">                source = <span class=\"stringliteral\">&quot;color:&quot;</span> + source;</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; newAttribute = attributeList;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>( newAttribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( newAttribute-&gt;fSemantic == semantic)</div>\n\
<div class=\"line\">                    newAttribute-&gt;fSourceName = source;</div>\n\
<div class=\"line\">                newAttribute = newAttribute-&gt;fNext;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fColorSource.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Copy sourceName data to new list if fx file remains the same</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Does best-effort matching, changing techniques may result in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// changing streams.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fLastShaderFxFileAtVASSet == fShaderFxFile)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxRCPtr&lt;cgfxVertexAttribute&gt; oldAttribute = fVertexAttributes;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (oldAttribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; newAttribute = attributeList;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> (newAttribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (newAttribute-&gt;fSourceName.length() == 0 &amp;&amp;</div>\n\
<div class=\"line\">                    newAttribute-&gt;fName == oldAttribute-&gt;fName &amp;&amp;</div>\n\
<div class=\"line\">                    newAttribute-&gt;fSemantic == oldAttribute-&gt;fSemantic &amp;&amp;</div>\n\
<div class=\"line\">                    newAttribute-&gt;fType == oldAttribute-&gt;fType)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    newAttribute-&gt;fSourceName = oldAttribute-&gt;fSourceName;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                newAttribute = newAttribute-&gt;fNext;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            oldAttribute = oldAttribute-&gt;fNext;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now set our new attribute list</span></div>\n\
<div class=\"line\">    fVertexAttributes = attributeList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// And determine the minimum set of data we need to request from Maya to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// populate these values</span></div>\n\
<div class=\"line\">    analyseVertexAttributes();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Set the data set names that will be populating our vertex attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setVertexAttributeSource( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; sources)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Flush any cached data stream - the inputs have changed</span></div>\n\
<div class=\"line\">    fBoundDataCache.flush();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the attributes sources as specified</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numSources = sources.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; attribute = fVertexAttributes;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( attribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attribute-&gt;fSourceName = ( i &lt;  numSources) ? sources[ i++] : <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">        attribute = attribute-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Cache shader fx file name used when setting attribute source</span></div>\n\
<div class=\"line\">    fLastShaderFxFileAtVASSet = fShaderFxFile;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// And determine the minimum set of data we need to request from Maya to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// populate these values</span></div>\n\
<div class=\"line\">    analyseVertexAttributes();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> findOrInsert( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; list)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> length = list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; length; i++)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( list[ i] == value)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> i;</div>\n\
<div class=\"line\">    list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( value);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> length;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Analyse the per-vertex attributes to work out the minimum set of data we require</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::analyseVertexAttributes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ++fGeomReqDataVersionId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fUVSets.<a name=\"a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    fColorSets.clear();</div>\n\
<div class=\"line\">    fNormalsPerVertex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cgfxRCPtr&lt;cgfxVertexAttribute&gt; attribute = fVertexAttributes;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( attribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Work out where this attribute should come from</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> source( attribute-&gt;fSourceName);</div>\n\
<div class=\"line\">        source.<a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( attribute-&gt;fSourceName.length() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            attribute-&gt;fSourceType = cgfxVertexAttribute::kNone;</div>\n\
<div class=\"line\">            <span class=\"comment\">// revert the source to default position source stream if it is empty position stream.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(attribute-&gt;fSemantic == <span class=\"stringliteral\">&quot;POSITION&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warnMsg = <span class=\"stringliteral\">&quot;position can&#39;t be empty! Will use default position data!&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(warnMsg);</div>\n\
<div class=\"line\">                attribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;position&quot;</span>;</div>\n\
<div class=\"line\">                attribute-&gt;fSourceType = cgfxVertexAttribute::kPosition;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( source == <span class=\"stringliteral\">&quot;position&quot;</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            attribute-&gt;fSourceType = cgfxVertexAttribute::kPosition;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( source == <span class=\"stringliteral\">&quot;normal&quot;</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            attribute-&gt;fSourceType = cgfxVertexAttribute::kNormal;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( fNormalsPerVertex &lt; 1)</div>\n\
<div class=\"line\">                fNormalsPerVertex = 1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Try and pull off the type</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> set = attribute-&gt;fSourceName;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> colon = set.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a7487f32861d955d3ac0d8722cc5797b2\">index</a>( <span class=\"charliteral\">&#39;:&#39;</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> type;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( colon &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( colon &gt; 0) type = source.<a name=\"a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>( 0, colon - 1);</div>\n\
<div class=\"line\">                set = set.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>( colon + 1, set.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() - 1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Now, work out what kind of set we have here</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( type == <span class=\"stringliteral\">&quot;uv&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attribute-&gt;fSourceType = cgfxVertexAttribute::kUV;</div>\n\
<div class=\"line\">                attribute-&gt;fSourceIndex = findOrInsert( set, fUVSets);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( type == <span class=\"stringliteral\">&quot;tangent&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attribute-&gt;fSourceType = cgfxVertexAttribute::kTangent;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( fNormalsPerVertex &lt; 2)</div>\n\
<div class=\"line\">                    fNormalsPerVertex = 2;</div>\n\
<div class=\"line\">                attribute-&gt;fSourceIndex = findOrInsert( set, fUVSets);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( type == <span class=\"stringliteral\">&quot;binormal&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attribute-&gt;fSourceType = cgfxVertexAttribute::kBinormal;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( fNormalsPerVertex &lt; 3)</div>\n\
<div class=\"line\">                    fNormalsPerVertex = 3;</div>\n\
<div class=\"line\">                attribute-&gt;fSourceIndex = findOrInsert( set, fUVSets);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( type == <span class=\"stringliteral\">&quot;color&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attribute-&gt;fSourceType = cgfxVertexAttribute::kColor;</div>\n\
<div class=\"line\">                attribute-&gt;fSourceIndex = findOrInsert( set, fColorSets);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                attribute-&gt;fSourceType = cgfxVertexAttribute::kBlindData;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        attribute = attribute-&gt;fNext;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//for( unsigned int i = 0; i &lt; fUVSets.length(); i++) printf( &quot;Requesting UVset[%d] = %s\\n&quot;, i, fUVSets[i]);</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Data accessors for the texCoordSource attribute.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp;</div>\n\
<div class=\"line\">cgfxShaderNode::getTexCoordSource()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. gtcs &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fConstructed )</div>\n\
<div class=\"line\">        ss += name();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> ii = 0; ii &lt; fTexCoordSource.length(); ++ii )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        ss += fTexCoordSource[ii];</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\&quot; &quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTexCoordSource;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::getTexCoordSource</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Data accessors for the colorSource attribute.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp;</div>\n\
<div class=\"line\">cgfxShaderNode::getColorSource()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. gtcs &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fConstructed )</div>\n\
<div class=\"line\">        ss += name();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> ii = 0; ii &lt; fColorSource.length(); ++ii )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        ss += fColorSource[ii];</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\&quot; &quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fColorSource;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::getColorSource</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setDataSources( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* texCoordSources,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* colorSources)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( texCoordSources )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> length_TC = texCoordSources-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( length_TC &gt; CGFXSHADERNODE_GL_TEXTURE_MAX )</div>\n\
<div class=\"line\">            length_TC = CGFXSHADERNODE_GL_TEXTURE_MAX;</div>\n\
<div class=\"line\">        fTexCoordSource.clear();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; length_TC; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTexCoordSource.append( (*texCoordSources)[ i ] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// This method is unstable and may causes crashes in the API</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Don&#39;t use for now.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//fTexCoordSource.setLength( length_TC );</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//for ( int i = 0; i &lt; length_TC; ++i )</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  fTexCoordSource[ i ] = texCoordSources[ i ];</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( colorSources )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> length_CS = colorSources-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( length_CS &gt; CGFXSHADERNODE_GL_COLOR_MAX )</div>\n\
<div class=\"line\">            length_CS = CGFXSHADERNODE_GL_COLOR_MAX;</div>\n\
<div class=\"line\">        fColorSource.setLength( length_CS );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; length_CS; ++i )</div>\n\
<div class=\"line\">            fColorSource[ i ] = (*colorSources)[ i ];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fDataSetNames.clear();</div>\n\
<div class=\"line\">    fNormalsPerVertex = 1;</div>\n\
<div class=\"line\">    updateDataSource( fTexCoordSource, fTexCoordType, fTexCoordIndex);</div>\n\
<div class=\"line\">    updateDataSource( fColorSource, fColorType, fColorIndex);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::updateDataSource( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; v, <a name=\"_a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; typeList, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; indexList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ss = <span class=\"stringliteral\">&quot;  .. stcs &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fConstructed )</div>\n\
<div class=\"line\">        ss += name();</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> ii = 0; ii &lt; v.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++ii )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">        ss += v[ii];</div>\n\
<div class=\"line\">        ss += <span class=\"stringliteral\">&quot;\\&quot; &quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ss += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    ::OutputDebugString( ss.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nDataSets = v.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    typeList.<a name=\"a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( nDataSets );</div>\n\
<div class=\"line\">    indexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( nDataSets );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> iDataSet = 0; iDataSet &lt; nDataSets; ++iDataSet )</div>\n\
<div class=\"line\">    {                                  <span class=\"comment\">// iDataSet loop</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> iType = etcNull;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> iBuf = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Strip leading and trailing spaces and control chars.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* bp = v[ iDataSet ].asChar();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* ep = v[ iDataSet ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() + bp;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( bp &lt; ep &amp;&amp; *bp &lt;= &#39; &#39; &amp;&amp; *bp &gt;= <span class=\"charliteral\">&#39;\\0&#39;</span>) ++bp;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( bp &lt; ep &amp;&amp; *bp &lt;= <span class=\"charliteral\">&#39; &#39;</span>) ++bp;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( bp &lt; ep &amp;&amp; ep[-1] &lt;= <span class=\"charliteral\">&#39; &#39;</span> &amp;&amp; ep[-1] &gt;= <span class=\"charliteral\">&#39;\\0&#39;</span> ) --ep;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( bp &lt; ep &amp;&amp; ep[-1] &lt;= <span class=\"charliteral\">&#39; &#39;</span> ) --ep;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Empty?</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( bp == ep )</div>\n\
<div class=\"line\">            iType = etcNull;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Constant?  (1, 2, 3 or 4 float values)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( (*bp &gt;= <span class=\"charliteral\">&#39;0&#39;</span> &amp;&amp; *bp &lt;= <span class=\"charliteral\">&#39;9&#39;</span>) ||</div>\n\
<div class=\"line\">            *bp == <span class=\"charliteral\">&#39;-&#39;</span> ||</div>\n\
<div class=\"line\">            *bp == <span class=\"charliteral\">&#39;+&#39;</span> ||</div>\n\
<div class=\"line\">            *bp == <span class=\"charliteral\">&#39;.&#39;</span> )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* cp = bp;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> nValues = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> ( cp &lt; ep &amp;&amp;</div>\n\
<div class=\"line\">                nValues &lt; 4 )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> x;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span>   nc = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span>   nv = sscanf( cp, <span class=\"stringliteral\">&quot; %f%n&quot;</span>, &amp;x, &amp;nc );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( nv != 1 )</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                ++nValues;</div>\n\
<div class=\"line\">                cp += nc;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( nValues &gt; 0 )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                s.<a name=\"a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>( bp, (<span class=\"keywordtype\">int</span>)(cp - bp) );      <span class=\"comment\">// drop trailing junk</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( ; nValues &lt; 4; ++nValues )</div>\n\
<div class=\"line\">                    s += <span class=\"stringliteral\">&quot; 0&quot;</span>;</div>\n\
<div class=\"line\">                iType = etcConstant;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// UV set name or reserved word.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            s.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>( bp, (<span class=\"keywordtype\">int</span>)(ep - bp) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Pull out any qualifiers (e.g. tangent:uvSet1) and register</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the data set they require</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> splitStrings;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">            #define kDefaultUVSet &quot;map1&quot;</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == s.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>( <span class=\"charliteral\">&#39;:&#39;</span>, splitStrings)) &amp;&amp; splitStrings.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                s = splitStrings[0];</div>\n\
<div class=\"line\">                iBuf = findOrAppend( fDataSetNames, splitStrings[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Force reserved words to lower case.</span></div>\n\
<div class=\"line\">            bp = s.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( 0 == stricmp( <span class=\"stringliteral\">&quot;normal&quot;</span>, bp ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                s = <span class=\"stringliteral\">&quot;normal&quot;</span>;</div>\n\
<div class=\"line\">                iType = etcNormal;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( 0 == stricmp( <span class=\"stringliteral\">&quot;tangent&quot;</span>, bp ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                s = <span class=\"stringliteral\">&quot;tangent&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( splitStrings.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt; 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    splitStrings.<a name=\"a122\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( 2);</div>\n\
<div class=\"line\">                    splitStrings[ 1] = kDefaultUVSet;</div>\n\
<div class=\"line\">                    iBuf = findOrAppend( fDataSetNames, kDefaultUVSet);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;:&quot;</span> + splitStrings[1];</div>\n\
<div class=\"line\">                iType = etcTangent;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( fNormalsPerVertex &lt; 2)</div>\n\
<div class=\"line\">                    fNormalsPerVertex = 2;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( 0 == stricmp( <span class=\"stringliteral\">&quot;binormal&quot;</span>, bp ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                s = <span class=\"stringliteral\">&quot;binormal&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( splitStrings.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt; 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    splitStrings.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( 2);</div>\n\
<div class=\"line\">                    splitStrings[ 1] = kDefaultUVSet;</div>\n\
<div class=\"line\">                    iBuf = findOrAppend( fDataSetNames, kDefaultUVSet);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;:&quot;</span> + splitStrings[1];</div>\n\
<div class=\"line\">                iType = etcBinormal;</div>\n\
<div class=\"line\">                fNormalsPerVertex = 3;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Data set name... tell Maya that we want to retrieve this data set.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                iType = etcDataSet;</div>\n\
<div class=\"line\">                iBuf = findOrAppend( fDataSetNames, s );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Tell our geometry() method where to get data.</span></div>\n\
<div class=\"line\">        typeList[ iDataSet ] = iType;</div>\n\
<div class=\"line\">        indexList[ iDataSet ] = iBuf;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Store cleaned-up string.</span></div>\n\
<div class=\"line\">        v[ iDataSet ] = s;</div>\n\
<div class=\"line\">    }                                  <span class=\"comment\">// iDataSet loop</span></div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::updateDataSource</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Data accessor for list of empty UV sets.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp;</div>\n\
<div class=\"line\">cgfxShaderNode::getEmptyUVSets()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> saNull;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> saNull;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::getEmptyUVSets</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a123\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp;</div>\n\
<div class=\"line\">cgfxShaderNode::getEmptyUVSetShapes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> oaNull;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> oaNull;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::getEmptyUVSetShapes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setEffect(<span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxEffect const&gt;&amp; pNewEffect)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove old effect - node association</span></div>\n\
<div class=\"line\">    cgfxShaderNode::removeAssociation(<span class=\"keyword\">this</span>, fEffect);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fEffect = pNewEffect;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add new effect - node association</span></div>\n\
<div class=\"line\">    cgfxShaderNode::addAssociation(<span class=\"keyword\">this</span>, fEffect);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    updateTechniqueList();</div>\n\
<div class=\"line\">    setTechnique( getTechnique() );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::updateTechniqueList()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Build string array containing technique names and descriptions.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     Each item in the technique list has the form</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         &quot;techniqueName&lt;TAB&gt;numPasses&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     where</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//         numPasses is the number of passes defined by the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//             technique, or 0 if the technique is not valid.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     (Future versions of the cgfxShader plug-in may append</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      additional tab-separated fields.)</span></div>\n\
<div class=\"line\">    fTechniqueList.clear();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fEffect.isNull() &amp;&amp; fEffect-&gt;isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxTechnique* technique = fEffect-&gt;getFirstTechnique();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (technique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">            s += technique-&gt;getName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (technique-&gt;isValid())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;\\t&quot;</span>;</div>\n\
<div class=\"line\">                s += technique-&gt;getNumPasses();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;\\t0&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fTechniqueList.append(s);</div>\n\
<div class=\"line\">            technique = technique-&gt;getNext();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::setEffect</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span> <span class=\"keywordtype\">bool</span> cgfxShaderNode::hasTransparency()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Always return false, so that transparencyOptions() will be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// called to give finer grain control.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> cgfxShaderNode::transparencyOptions()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCurrentTechnique &amp;&amp; fCurrentTechnique-&gt;isValid() &amp;&amp; fCurrentTechnique-&gt;hasBlending())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Set as transparent, but we don&#39;t want any internal transparency algorithms</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// being used.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ( kIsTransparent | kNoTransparencyFrontBackCull | kNoTransparencyPolygonSort );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setTechnique( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; techn )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// If effect not loaded, just store the technique name.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEffect.isNull() || !fEffect-&gt;isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fTechnique = techn;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Search for requested technique.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (techn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != 0) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxTechnique* technique = fEffect-&gt;getTechnique(techn);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (technique) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (technique-&gt;isValid())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fTechnique = techn;</div>\n\
<div class=\"line\">                fCurrentTechnique = technique;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Setup the vertex parameters for this technique</span></div>\n\
<div class=\"line\">                setVertexAttributes(fCurrentTechnique-&gt;getVertexAttributes());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Flush any cached data streams has when the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// technique changes.</span></div>\n\
<div class=\"line\">                fBoundDataCache.flush();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                ++fGeomReqDataVersionId;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">                s += typeName();</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                s += name();</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;\\&quot; : unable to validate technique \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                s += techn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(s);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(technique-&gt;getCompilationErrors());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!shaderFxFileChanged()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">            s += typeName();</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            s += name();</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot;\\&quot; : unable to find technique \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            s += techn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(s);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Requested technique was not found or not valid.  Revert to the old one.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fTechnique.length() != 0 &amp;&amp; fTechnique != techn) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxTechnique* technique = fEffect-&gt;getTechnique(techn);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (technique) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (technique-&gt;isValid())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fCurrentTechnique = technique;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Setup the vertex parameters for this technique</span></div>\n\
<div class=\"line\">                setVertexAttributes(fCurrentTechnique-&gt;getVertexAttributes());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Flush any cached data streams has when the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// technique changes.</span></div>\n\
<div class=\"line\">                fBoundDataCache.flush();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">                s += typeName();</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                s += name();</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;\\&quot; : unable to validate technique \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                s += fTechnique.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">                s += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(s);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(technique-&gt;getCompilationErrors());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!shaderFxFileChanged()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">            s += typeName();</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            s += name();</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot;\\&quot; : unable to find technique \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            s += fTechnique.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(s);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Old technique is no good.  Activate the first valid technique.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* technique = fEffect-&gt;getFirstTechnique();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (technique)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (technique-&gt;isValid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechnique = technique-&gt;getName();</div>\n\
<div class=\"line\">            fCurrentTechnique = technique;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Setup the vertex parameters for this technique</span></div>\n\
<div class=\"line\">            setVertexAttributes(fCurrentTechnique-&gt;getVertexAttributes());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Flush any cached data streams has when the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// technique changes.</span></div>\n\
<div class=\"line\">            fBoundDataCache.flush();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Setup the vertex parameters for this technique</span></div>\n\
<div class=\"line\">            ++fGeomReqDataVersionId;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        technique = technique-&gt;getNext();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// No valid technique exists for the current effect.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   Save requested technique name.  We&#39;ll try to use it as the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   initial technique the next time a valid effect is loaded.</span></div>\n\
<div class=\"line\">    fTechnique = techn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">    s += typeName();</div>\n\
<div class=\"line\">    s += <span class=\"stringliteral\">&quot; \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">    s += name();</div>\n\
<div class=\"line\">    s += <span class=\"stringliteral\">&quot;\\&quot; : unable to find a valid technique.&quot;</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(s);</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::setTechnique</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setProfile( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; profileName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxProfile* profile = cgfxProfile::getProfile(profileName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (profile) {</div>\n\
<div class=\"line\">        fProfileName = profileName;</div>\n\
<div class=\"line\">        setProfile(profile);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        fProfileName = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">        setProfile(NULL);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (profileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader : &quot;</span>;</div>\n\
<div class=\"line\">            sMsg += <span class=\"stringliteral\">&quot;The profile \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            sMsg += profileName;</div>\n\
<div class=\"line\">            sMsg += <span class=\"stringliteral\">&quot;\\&quot; is not a supported profile on your platform. Reverting to use the default profile.&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::setProfile( <span class=\"keyword\">const</span> cgfxProfile* profile )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEffect.isNull() || !fEffect-&gt;isValid())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Search for requested profile.</span></div>\n\
<div class=\"line\">    fEffect-&gt;setProfile(profile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The list of valid techniques depends on the selected profile.</span></div>\n\
<div class=\"line\">    updateTechniqueList();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We must set the technique again to verify if the technique is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// still valid under the new profile.</span></div>\n\
<div class=\"line\">    setTechnique(fTechnique);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> cgfxShaderNode::shouldSave ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; plug, <span class=\"keywordtype\">bool</span> &amp; ret )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug == sAttributeList)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ret = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sVertexAttributeList)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ret = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a124\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#ac354fc704a7e79728b99e0570b4b51bf\">MPxNode::shouldSave</a>(plug, ret);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::setTexturesByName(<span class=\"keywordtype\">bool</span> texturesByName, <span class=\"keywordtype\">bool</span> updateAttributes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( updateAttributes &amp;&amp; fTexturesByName != texturesByName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// We&#39;ve been explicitly changed to a different</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// texture mode.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If we have any current texture attributes, destroy them</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> dgMod;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxRCPtr&lt;cgfxAttrDefList&gt;&amp; nodeList = attrDefList();</div>\n\
<div class=\"line\">        cgfxAttrDefList::iterator nmIt;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> foundTextures = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cgfxAttrDef* adef = (*nmIt);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(adef-&gt;fType &gt;= cgfxAttrDef::kAttrTypeFirstTexture &amp;&amp; adef-&gt;fType &lt;= cgfxAttrDef::kAttrTypeLastTexture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> theMObject = thisMObject();</div>\n\
<div class=\"line\">                adef-&gt;destroyAttribute( theMObject, &amp;dgMod);</div>\n\
<div class=\"line\">                foundTextures = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Switch across to the new texture mode (before creating the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// new attributes)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        fTexturesByName = texturesByName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Now re-create our texture attributes</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( foundTextures)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            dgMod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                cgfxAttrDef* adef = (*nmIt);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( adef-&gt;fType &gt;= cgfxAttrDef::kAttrTypeFirstTexture &amp;&amp; adef-&gt;fType &lt;= cgfxAttrDef::kAttrTypeLastTexture)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    adef-&gt;createAttribute(thisMObject(), &amp;dgMod, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            dgMod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Finally, if we just created new string attributes, we need to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// set them to a sensible value or they won&#39;t show up</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( fTexturesByName)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (nmIt = nodeList-&gt;begin(); nmIt; ++nmIt)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    cgfxAttrDef* adef = (*nmIt);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( adef-&gt;fType &gt;= cgfxAttrDef::kAttrTypeFirstTexture &amp;&amp;</div>\n\
<div class=\"line\">                        adef-&gt;fType &lt;= cgfxAttrDef::kAttrTypeLastTexture)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> theMObject = thisMObject();</div>\n\
<div class=\"line\">                        adef-&gt;setTexture( theMObject, adef-&gt;fStringDef, &amp;dgMod);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fTexturesByName = texturesByName;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get cgfxShader version string.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a></div>\n\
<div class=\"line\">cgfxShaderNode::getPluginVersion()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sVer = <span class=\"stringliteral\">&quot;cgfxShader &quot;</span>; </div>\n\
<div class=\"line\">    sVer += CGFXSHADER_VERSION;</div>\n\
<div class=\"line\">    sVer += <span class=\"stringliteral\">&quot; for &quot;</span>;</div>\n\
<div class=\"line\">    sVer += <a name=\"a125\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#aaba986b09bb353d06155a21266e06b00\">MGlobal::mayaName</a>();</div>\n\
<div class=\"line\">    sVer += <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    sVer += (int)(MAYA_API_VERSION / 100);</div>\n\
<div class=\"line\">    sVer += <span class=\"stringliteral\">&quot;.&quot;</span>;</div>\n\
<div class=\"line\">    sVer += (int)(MAYA_API_VERSION % 100 / 10);</div>\n\
<div class=\"line\">    sVer += <span class=\"stringliteral\">&quot; (&quot;</span>;</div>\n\
<div class=\"line\">    sVer += __DATE__;</div>\n\
<div class=\"line\">    sVer += <span class=\"stringliteral\">&quot;)&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sVer;</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::getPluginVersion</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Error reporting</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::reportInternalError( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keyword\">function</span>, <span class=\"keywordtype\">size_t</span> errcode )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> es = <span class=\"stringliteral\">&quot;cgfxShader&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fConstructed)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( ++fErrorCount &gt; fErrorLimit )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s;</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">            s += name();</div>\n\
<div class=\"line\">            s += <span class=\"stringliteral\">&quot;\\&quot;: &quot;</span>;</div>\n\
<div class=\"line\">            s += typeName();</div>\n\
<div class=\"line\">            es = s;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\">    es += <span class=\"stringliteral\">&quot; internal error &quot;</span>;</div>\n\
<div class=\"line\">    es += (int)errcode;</div>\n\
<div class=\"line\">    es += <span class=\"stringliteral\">&quot; in &quot;</span>;</div>\n\
<div class=\"line\">    es += <span class=\"keyword\">function</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAYA_PRINT_DEBUG_INFO</span></div>\n\
<div class=\"line\">    ::OutputDebugString( es.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\">    ::OutputDebugString( <span class=\"stringliteral\">&quot;\\n&quot;</span> );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( es );</div>\n\
<div class=\"line\">}                                      <span class=\"comment\">// cgfxShaderNode::reportInternalError</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::cgErrorCallBack()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a126\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(__FUNCTION__);</div>\n\
<div class=\"line\">    CGerror cgLastError = cgGetError();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(cgLastError)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(cgGetErrorString(cgLastError));</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(cgGetLastListing(sCgContext));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}                                                                            <span class=\"comment\">// cgfxShaderNode::cgErrorCallBack</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">cgfxShaderNode::cgErrorHandler(CGcontext cgContext, CGerror cgError, <span class=\"keywordtype\">void</span>* userData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(cgGetErrorString(cgError));</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(cgGetLastListing(sCgContext));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::getNodesUsingEffect(<span class=\"keyword\">const</span> cgfxRCPtr&lt;const cgfxEffect&gt;&amp; effect, NodeList &amp;nodes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Effect2NodesMap::const_iterator it = sEffect2NodesMap.find( effect.operator-&gt;() );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(it != sEffect2NodesMap.end())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> NodeList &amp;nodeList = it-&gt;second;</div>\n\
<div class=\"line\">        nodes.insert(nodeList.begin(), nodeList.end());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::addAssociation(cgfxShaderNode* node, <span class=\"keyword\">const</span> cgfxRCPtr&lt;const cgfxEffect&gt;&amp; effect)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(effect.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        NodeList &amp;nodes = sEffect2NodesMap[ effect.operator-&gt;() ];</div>\n\
<div class=\"line\">        nodes.insert(node);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::removeAssociation(cgfxShaderNode* node, <span class=\"keyword\">const</span> cgfxRCPtr&lt;const cgfxEffect&gt;&amp; effect)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(effect.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Effect2NodesMap::iterator it = sEffect2NodesMap.find( effect.operator-&gt;() );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(it != sEffect2NodesMap.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            NodeList &amp;nodes = it-&gt;second;</div>\n\
<div class=\"line\">            nodes.erase(node);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(nodes.empty())</div>\n\
<div class=\"line\">                sEffect2NodesMap.erase(it);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderNode::attributeAddedOrRemovedCB(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7\">MNodeMessage::AttributeMessage</a> msg,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// The CgFX shader node does not respond well to having its fx file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attribute altered via a reference edit. This is not a supported workflow</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and should be avoided (change the fx file attribute in the original file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// instead). Recent changes have tried to accomodate this workflow so that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the saved file does not get into a bad state. However, there are still</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// legacy files that have been saved in the bad state and this code is to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// prevent crashes when loading them. It&#39;s a bit heavy-handed but is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// limited to the case that crashes. If while opening a scene, an attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is remvoed from the node, we clear the effect data structure so that it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is forced to rebuild from scratch when it is next needed. This will</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// prevent the plugin from accidentally accessing attributes that have been</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// deleted.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (msg == <a name=\"a127\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7a7b609b623706841739e3e9597877645b\">MNodeMessage::kAttributeRemoved</a> &amp;&amp;</div>\n\
<div class=\"line\">        clientData &amp;&amp;</div>\n\
<div class=\"line\">        <a name=\"a128\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#a30bf5678402012d5607a6b0f22d2c2a5\">MFileIO::isOpeningFile</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cgfxShaderNode* shaderNode = (cgfxShaderNode*)clientData;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!shaderNode-&gt;effect().isNull())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// set shader file changed and effect NULL to force rebuild</span></div>\n\
<div class=\"line\">            shaderNode-&gt;setShaderFxFileChanged(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            shaderNode-&gt;setEffect(cgfxRCPtr&lt;const cgfxEffect&gt;());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ===================================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// viewport 2.0 implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ===================================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cgfxShaderOverride::drawDbClassification(<span class=\"stringliteral\">&quot;drawdb/shader/surface/cgfxShader&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cgfxShaderOverride::drawRegistrantId(<span class=\"stringliteral\">&quot;cgfxShaderRegistrantId&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxShaderNode* cgfxShaderOverride::sActiveShaderNode = NULL;</div>\n\
<div class=\"line\">cgfxShaderNode* cgfxShaderOverride::sLastDrawShaderNode = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a129\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html\">MHWRender::MPxShaderOverride</a>* cgfxShaderOverride::Creator(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> cgfxShaderOverride(obj);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxShaderOverride::cgfxShaderOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    : MPxShaderOverride(obj)</div>\n\
<div class=\"line\">    , fShaderNode(NULL)</div>\n\
<div class=\"line\">    , fGeomReqDataVersionId(0)</div>\n\
<div class=\"line\">    , fNeedPassSetterInit(false)</div>\n\
<div class=\"line\">    , fOldBlendState(NULL)</div>\n\
<div class=\"line\">    , fOldDepthStencilState(NULL)</div>\n\
<div class=\"line\">    , fOldRasterizerState(NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cgfxShaderOverride::~cgfxShaderOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fShaderNode = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize phase</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cgfxShaderOverride::initialize(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> shader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;cgfxShaderOverride::initialize&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is the routine where you would do all the expensive,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// one-time kind of work.  Create vertex programs, load</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// textures, etc.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    glStateCache::instance().reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// One-time OpenGL initialization...</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( glStateCache::sMaxTextureUnits &lt;= 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Before this point, we never had a good OpenGL context.  Now</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// we can check for extensions and set up pointers to the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// extension procs.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RESOLVE_GL_EXTENSION( fn, ext) wglGetProcAddress( #fn #ext)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined __linux__</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RESOLVE_GL_EXTENSION( fn, ext) &amp;fn ## ext</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RESOLVE_GL_EXTENSION( fn, ext) &amp;fn</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Don&#39;t use GL_MAX_TEXTURE_UNITS as this does not provide a proper</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// count when the # of image or texcoord inputs differs</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// from the conventional (older) notion of texture unit.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Instead take the minimum of GL_MAX_TEXTURE_COORDS_ARB and</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// GL_MAX_TEXUTRE_IMAGE_UNITS_ARB according to the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// ARB_FRAGMENT_PROGRAM specification.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        GLint tval;</div>\n\
<div class=\"line\">        glGetIntegerv( GL_MAX_TEXTURE_COORDS_ARB, &amp;tval );</div>\n\
<div class=\"line\">        GLint mic = 0;</div>\n\
<div class=\"line\">        glGetIntegerv( GL_MAX_TEXTURE_IMAGE_UNITS_ARB, &amp;mic );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mic &lt; tval)</div>\n\
<div class=\"line\">            tval = mic;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Don&#39;t use this...</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//glGetIntegerv( GL_MAX_TEXTURE_UNITS_ARB, &amp;tval );</span></div>\n\
<div class=\"line\">        glStateCache::sMaxTextureUnits = tval;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!glClientActiveTexture || glStateCache::sMaxTextureUnits &lt; 1)</div>\n\
<div class=\"line\">            glStateCache::sMaxTextureUnits = 1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (glStateCache::sMaxTextureUnits &gt; CGFXSHADERNODE_GL_TEXTURE_MAX)</div>\n\
<div class=\"line\">            glStateCache::sMaxTextureUnits = CGFXSHADERNODE_GL_TEXTURE_MAX;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the effect parameters updated</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (shader != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the hardware shader node from the MObject.</span></div>\n\
<div class=\"line\">        fShaderNode = (cgfxShaderNode *) <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hw_shader_node.html#a49e2f0b3db50d2e4b0a916713977450d\">MPxHwShaderNode::getHwShaderNodePtr</a>( shader );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        fShaderNode = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useCustomPrimitiveGenerator = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fShaderNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> enableCustomPrimitiveGenerator = (getenv(<span class=\"stringliteral\">&quot;MAYA_USE_CUSTOMPRIMITIVEGENERATOR&quot;</span>) != NULL);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fShaderNode-&gt;createEffect();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxTechnique* technique = fShaderNode-&gt;fCurrentTechnique;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (technique &amp;&amp; technique-&gt;isValid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Add in geometry requirements based on the attributes</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// being asked for.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Note that we can ask for streams on initialize since we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// have set rebuildAlways() to return true when any of the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// attributes affecting geometry requirements have</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// changed.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sourceName;</div>\n\
<div class=\"line\">            cgfxRCPtr&lt;cgfxVertexAttribute&gt; pVertexAttribute = fShaderNode-&gt;fVertexAttributes;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>(pVertexAttribute.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Convert UI name into a real geometry name</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                sourceName = pVertexAttribute-&gt;fSourceName;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( sourceName  == <span class=\"stringliteral\">&quot;position&quot;</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Positions have no name</span></div>\n\
<div class=\"line\">                    sourceName = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( sourceName  == <span class=\"stringliteral\">&quot;normal&quot;</span>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Normals have no name</span></div>\n\
<div class=\"line\">                    sourceName = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Try and pull off the set name</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> set = pVertexAttribute-&gt;fSourceName;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> colon = set.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a7487f32861d955d3ac0d8722cc5797b2\">index</a>( <span class=\"charliteral\">&#39;:&#39;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( colon &gt;= 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        sourceName = set.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>( colon + 1, set.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() - 1);</div>\n\
<div class=\"line\">                        <span class=\"comment\">//printf(&quot;Parsed : out of [%s] to get [%s]\\n&quot;, set.asChar(), sourceName.asChar() );</span></div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MHWRender::MGeometry::DataType</a> dataType = <a name=\"a130\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a7f9f3f7140818aa29c157534f90c37b9\">MHWRender::MGeometry::kInvalidType</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> dimension = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dimensionIndex = UINT_MAX;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(pVertexAttribute-&gt;fType.indexW( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;float&quot;</span>) ) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    dataType = <a name=\"a131\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>;</div>\n\
<div class=\"line\">                    dimensionIndex = 5;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(pVertexAttribute-&gt;fType.indexW( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;half&quot;</span>) ) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    dataType = <a name=\"a132\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6acc48eb3dce9079e1af81af4db6506343\">MHWRender::MGeometry::kInt16</a>;</div>\n\
<div class=\"line\">                    dimensionIndex = 4;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(pVertexAttribute-&gt;fType.indexW( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;int&quot;</span>) ) == 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    dataType = <a name=\"a133\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae3e576e62ae36818ff6edced2065c36e\">MHWRender::MGeometry::kInt32</a>;</div>\n\
<div class=\"line\">                    dimensionIndex = 3;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(dimensionIndex &lt; pVertexAttribute-&gt;fType.length())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">char</span> dim = pVertexAttribute-&gt;fType.asChar()[dimensionIndex];</div>\n\
<div class=\"line\">                    dimension = dim - <span class=\"charliteral\">&#39;0&#39;</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                cgfxVertexAttribute::SourceType sourceType = pVertexAttribute-&gt;fSourceType;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semanticName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(enableCustomPrimitiveGenerator &amp;&amp;</div>\n\
<div class=\"line\">                    (pVertexAttribute-&gt;fSourceType == cgfxVertexAttribute::kBlindData || pVertexAttribute-&gt;fSourceType == cgfxVertexAttribute::kPosition) &amp;&amp;</div>\n\
<div class=\"line\">                    pVertexAttribute-&gt;fSemantic == <span class=\"stringliteral\">&quot;ATTR7&quot;</span>) {</div>\n\
<div class=\"line\">                    useCustomPrimitiveGenerator = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    sourceType = cgfxVertexAttribute::kPosition;</div>\n\
<div class=\"line\">                    pVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;position&quot;</span>;</div>\n\
<div class=\"line\">                    semanticName = <span class=\"stringliteral\">&quot;customPositionStream&quot;</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(enableCustomPrimitiveGenerator &amp;&amp;</div>\n\
<div class=\"line\">                    (pVertexAttribute-&gt;fSourceType == cgfxVertexAttribute::kBlindData || pVertexAttribute-&gt;fSourceType == cgfxVertexAttribute::kNormal) &amp;&amp;</div>\n\
<div class=\"line\">                    pVertexAttribute-&gt;fSemantic == <span class=\"stringliteral\">&quot;ATTR8&quot;</span>) {</div>\n\
<div class=\"line\">                    useCustomPrimitiveGenerator = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    sourceType = cgfxVertexAttribute::kNormal;</div>\n\
<div class=\"line\">                    pVertexAttribute-&gt;fSourceName = <span class=\"stringliteral\">&quot;normal&quot;</span>;</div>\n\
<div class=\"line\">                    semanticName = <span class=\"stringliteral\">&quot;customNormalStream&quot;</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(pVertexAttribute-&gt;fSourceType == cgfxVertexAttribute::kBlindData) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// we treat blind data as a named texture channel.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// create the texture channel and set the semantic name.</span></div>\n\
<div class=\"line\">                    sourceType = cgfxVertexAttribute::kUV;</div>\n\
<div class=\"line\">                    semanticName = pVertexAttribute-&gt;fSourceName;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> geomReqStatus = MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span>(sourceType)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kPosition:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Ask for position name = [%s]\\n&quot;, sourceName.asChar());</span></div>\n\
<div class=\"line\">                            <a name=\"_a134\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> desc(</div>\n\
<div class=\"line\">                                sourceName,</div>\n\
<div class=\"line\">                                <a name=\"a135\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>,</div>\n\
<div class=\"line\">                                dataType,</div>\n\
<div class=\"line\">                                dimension);</div>\n\
<div class=\"line\">                            desc.setSemanticName(semanticName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            geomReqStatus = addGeometryRequirement(desc);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kNormal:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Ask for normals name = [%s]\\n&quot;, sourceName.asChar());</span></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> desc(</div>\n\
<div class=\"line\">                                sourceName,</div>\n\
<div class=\"line\">                                <a name=\"a136\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a227e8416235cd3b43077ca91504a463f\">MHWRender::MGeometry::kNormal</a>,</div>\n\
<div class=\"line\">                                dataType,</div>\n\
<div class=\"line\">                                dimension);</div>\n\
<div class=\"line\">                            desc.setSemanticName(semanticName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            geomReqStatus = addGeometryRequirement(desc);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kUV:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Ask for uvset name = [%s]\\n&quot;, sourceName.asChar());</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (semanticName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// if no semantic name, force UVs to be 2float</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// to work well with Maya</span></div>\n\
<div class=\"line\">                                dimension = 2;</div>\n\
<div class=\"line\">                                dataType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> desc(</div>\n\
<div class=\"line\">                                sourceName,</div>\n\
<div class=\"line\">                                <a name=\"a137\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MHWRender::MGeometry::kTexture</a>,</div>\n\
<div class=\"line\">                                dataType,</div>\n\
<div class=\"line\">                                dimension);</div>\n\
<div class=\"line\">                            desc.setSemanticName(semanticName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            geomReqStatus = addGeometryRequirement(desc);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kTangent:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Ask for tangent name = [%s]\\n&quot;, sourceName.asChar());</span></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> desc(</div>\n\
<div class=\"line\">                                sourceName,</div>\n\
<div class=\"line\">                                <a name=\"a138\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4ab90d6591156ad2cb2eea2cb5b75e77e0\">MHWRender::MGeometry::kTangent</a>,</div>\n\
<div class=\"line\">                                dataType,</div>\n\
<div class=\"line\">                                dimension);</div>\n\
<div class=\"line\">                            desc.setSemanticName(semanticName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            geomReqStatus = addGeometryRequirement(desc);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kBinormal:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Ask for bitangent name = [%s]\\n&quot;, sourceName.asChar());</span></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> desc(</div>\n\
<div class=\"line\">                                sourceName,</div>\n\
<div class=\"line\">                                <a name=\"a139\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4af6ed1c5faf6f0993971e8043ffa1a111\">MHWRender::MGeometry::kBitangent</a>,</div>\n\
<div class=\"line\">                                dataType,</div>\n\
<div class=\"line\">                                dimension);</div>\n\
<div class=\"line\">                            desc.setSemanticName(semanticName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            geomReqStatus = addGeometryRequirement(desc);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxVertexAttribute::kColor:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Ask for color name = [%s]\\n&quot;, sourceName.asChar());</span></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> desc(</div>\n\
<div class=\"line\">                                sourceName,</div>\n\
<div class=\"line\">                                <a name=\"a140\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MGeometry::kColor</a>,</div>\n\
<div class=\"line\">                                dataType,</div>\n\
<div class=\"line\">                                dimension);</div>\n\
<div class=\"line\">                            desc.setSemanticName(semanticName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            geomReqStatus = addGeometryRequirement(desc);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (geomReqStatus != MS::kSuccess) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> s = <span class=\"stringliteral\">&quot;cgfxShader : Can&#39;t find the source named \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                    s += pVertexAttribute-&gt;fSourceName;;</div>\n\
<div class=\"line\">                    s += <span class=\"stringliteral\">&quot;\\&quot; for vertex attribute \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                    s += pVertexAttribute-&gt;fName;;</div>\n\
<div class=\"line\">                    s +=<span class=\"stringliteral\">&quot;\\&quot;.&quot;</span>;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(s);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                pVertexAttribute = pVertexAttribute-&gt;fNext;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fGeomReqDataVersionId = fShaderNode-&gt;fGeomReqDataVersionId;</div>\n\
<div class=\"line\">    fNeedPassSetterInit = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// custom primitive types can be used by shader overrides.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This code is a simple example to show the mechanics of how that works.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Here we declare a custom custom indexing requirements.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The name &quot;customPrimitiveTest&quot; will be used to look up a registered</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// MPxPrimitiveGenerator that will handle the generation of the index buffer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The example primitive generator is registered at startup by this plugin.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (useCustomPrimitiveGenerator)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> customPrimitiveName(<span class=\"stringliteral\">&quot;customPrimitiveTest&quot;</span>);</div>\n\
<div class=\"line\">        <a name=\"_a141\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer_descriptor.html\">MHWRender::MIndexBufferDescriptor</a> indexingRequirement</div>\n\
<div class=\"line\">            (MHWRender::MIndexBufferDescriptor::kCustom, customPrimitiveName, <a name=\"a142\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1eaa2c70dd76c8172a9298334473c914304\">MHWRender::MGeometry::kTriangles</a>);</div>\n\
<div class=\"line\">        addIndexingRequirement(indexingRequirement);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// FIXME: We probably want to include the timestamp and size of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the FX file at time that it was read to uniquely identify the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// FX.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Logged as bug #375613</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> result =</div>\n\
<div class=\"line\">        (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Autodesk Maya cgfxShaderOverride, shader file = &quot;</span>) +</div>\n\
<div class=\"line\">         fShaderNode-&gt;shaderFxFile() +</div>\n\
<div class=\"line\">         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; technique = &quot;</span>) +</div>\n\
<div class=\"line\">         fShaderNode-&gt;getTechnique() +</div>\n\
<div class=\"line\">         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; profile = &quot;</span>) +</div>\n\
<div class=\"line\">         fShaderNode-&gt;getProfile());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Update phase</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderOverride::updateDG(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;cgfxShaderOverride::updateDG&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keywordtype\">object</span> != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the hardware shader node from the MObject.</span></div>\n\
<div class=\"line\">        fShaderNode = (cgfxShaderNode *) <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hw_shader_node.html#a49e2f0b3db50d2e4b0a916713977450d\">MPxHwShaderNode::getHwShaderNodePtr</a>( <span class=\"keywordtype\">object</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        fShaderNode = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderOverride::updateDevice()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderOverride::endUpdate()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Draw phase</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderOverride::handlesDraw(<a name=\"_a143\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a144\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a> &amp; passCtx = context.<a name=\"a145\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; passSem = passCtx.<a name=\"a146\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> handlePass = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; passSem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; pass = passSem[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pass == <a name=\"a147\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a97ffcfc5e6c4bd512eab6727c58a9ae8\">MHWRender::MPassContext::kColorPassSemantic</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handlePass = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// CgFX has its AO pass, so still use the callback draw instead of the Maya&#39;s SSAO pass.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (pass == <a name=\"a148\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#ab0d481f367db0fa41c2b3a1aeb2074c8\">MHWRender::MPassContext::kShadowPassSemantic</a> ||</div>\n\
<div class=\"line\">            pass == <a name=\"a149\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a67e11eaab888b31695e3bc19dc1c26ef\">MHWRender::MPassContext::kDepthPassSemantic</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handlePass = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> handlePass;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderOverride::activateKey(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;cgfxShaderOverride::activateKey&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fShaderNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//printf(&quot;Failed cgfxShaderOverride::activateKey() - no shader node\\n&quot;);</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We use the Cg technique, pass and parameters from the shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// node at activation time. These Cg data structure can be used</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// until termination because all the fShaderNode&#39;s involved will</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// share the ame key.</span></div>\n\
<div class=\"line\">    sActiveShaderNode = fShaderNode;</div>\n\
<div class=\"line\">    sLastDrawShaderNode = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* technique = sActiveShaderNode-&gt;fCurrentTechnique;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(technique &amp;&amp; technique-&gt;isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Register VP20 state callbacks for cg pass state</span></div>\n\
<div class=\"line\">        cgfxPassStateSetter::registerCgStateCallBacks(</div>\n\
<div class=\"line\">            cgfxPassStateSetter::kVP20Viewport);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a150\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr = context.<a name=\"a151\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a9eed5300933693e76ad77822b4feb37f\">getStateManager</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Now initialize the passes for this effect</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fNeedPassSetterInit) {</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> [] sActiveShaderNode-&gt;fPassStateSetters;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                sActiveShaderNode-&gt;fPassStateSetters =</div>\n\
<div class=\"line\">                    <span class=\"keyword\">new</span> cgfxPassStateSetter[technique-&gt;getNumPasses()];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> cgfxPass* pass = technique-&gt;getFirstPass();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; pass; ++i, pass = pass-&gt;getNext()) {</div>\n\
<div class=\"line\">                    sActiveShaderNode-&gt;fPassStateSetters[i].init(</div>\n\
<div class=\"line\">                        stateMgr, pass-&gt;getCgPass());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fNeedPassSetterInit = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//save render state before rendering</span></div>\n\
<div class=\"line\">        fOldBlendState = stateMgr-&gt;<a name=\"a152\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a4dbf5ff33e99eba611b73273d868182f\">getBlendState</a>();</div>\n\
<div class=\"line\">        fOldDepthStencilState = stateMgr-&gt;<a name=\"a153\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a401853f47989ca1cd4df01ca1976feb4\">getDepthStencilState</a>();</div>\n\
<div class=\"line\">        fOldRasterizerState = stateMgr-&gt;<a name=\"a154\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a381d58fef9908f00a0e04bcf38b67838\">getRasterizerState</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glPushClientAttrib ( GL_CLIENT_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glStateCache::instance().reset();   <span class=\"comment\">// the state cache should be reset before draw</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (technique-&gt;getNumPasses() == 1) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// For single pass effects, we set the pass state at</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// activation time.</span></div>\n\
<div class=\"line\">            sActiveShaderNode-&gt;fPassStateSetters[0].setPassState(stateMgr);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderOverride::draw(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a155\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;cgfxShaderOverride::draw&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fShaderNode || !sActiveShaderNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//printf(&quot;Failed cgfxShaderOverride::draw() - no shader node\\n&quot;);</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Sample code to debug pass information</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> debugPassInformation = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (debugPassInformation)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a> &amp; passCtx = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; passId = passCtx.<a name=\"a156\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#ae90d4b4c8175e81800d8eb16ee126e1f\">passIdentifier</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; passSem = passCtx.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;CgFx shader drawing in pass[%s], semantic[&quot;</span>, passId.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;passSem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot; %s&quot;</span>, passSem[i].asChar());</div>\n\
<div class=\"line\">        printf( <span class=\"stringliteral\">&quot;]\\n&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* technique = sActiveShaderNode-&gt;fCurrentTechnique;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (technique &amp;&amp; technique-&gt;isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a9eed5300933693e76ad77822b4feb37f\">getStateManager</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> needFullCgSetPassState = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Bind non-varying attributes if necessary.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sLastDrawShaderNode != fShaderNode) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                needFullCgSetPassState = bindAttrValues();</div>\n\
<div class=\"line\">                checkGlErrors(<span class=\"stringliteral\">&quot;cgfxShaderOverride::bindAttrValues&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fShaderNode)</div>\n\
<div class=\"line\">                    fShaderNode-&gt;reportInternalError( __FILE__, (<span class=\"keywordtype\">size_t</span>)e );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fShaderNode)</div>\n\
<div class=\"line\">                    fShaderNode-&gt;reportInternalError( __FILE__, __LINE__ );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// bind varying attributes</span></div>\n\
<div class=\"line\">        bindViewAttrValues(context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numRenderItems = renderItemList.<a name=\"a157\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> renderItemIdx=0; renderItemIdx&lt;numRenderItems; renderItemIdx++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a158\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* renderItem = renderItemList.<a name=\"a159\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a82ed5d7ae96a2890f5f54f697bb0bab0\">itemAt</a>(renderItemIdx);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!renderItem) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a160\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html\">MHWRender::MGeometry</a>* geometry = renderItem-&gt;<a name=\"a161\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#aee2e53b30cbf1699eac04ce5659398d3\">geometry</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!geometry) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> boundData = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> bufferCount = geometry-&gt;<a name=\"a162\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a2d6ad76bad123c47513c5941e7493914\">vertexBufferCount</a>();</div>\n\
<div class=\"line\">            sourceStreamInfo *pBindSource = <span class=\"keyword\">new</span> sourceStreamInfo[bufferCount];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;bufferCount &amp;&amp; boundData; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a163\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* buffer = geometry-&gt;<a name=\"a164\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a8dbf1ef3c0feaff25da15a60fe968a80\">vertexBuffer</a>(i);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    boundData = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp; desc = buffer-&gt;<a name=\"a165\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>();</div>\n\
<div class=\"line\">                GLuint * dataBufferId = NULL;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span> *dataHandle = buffer-&gt;<a name=\"a166\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#ad7bcab0d1707ef0da22fc72ada62c40e\">resourceHandle</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!dataHandle)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    boundData = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                dataBufferId = (GLuint *)(dataHandle);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span>(desc.<a name=\"a167\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceType = cgfxVertexAttribute::kPosition;</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceName = <span class=\"stringliteral\">&quot;position&quot;</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a227e8416235cd3b43077ca91504a463f\">MHWRender::MGeometry::kNormal</a>:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceType = cgfxVertexAttribute::kNormal;</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceName = <span class=\"stringliteral\">&quot;normal&quot;</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MHWRender::MGeometry::kTexture</a>:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (desc.<a name=\"a168\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aec39ee3496166457d1ccdf73c8d1a3b2\">semanticName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                pBindSource[i].fSourceName = <span class=\"stringliteral\">&quot;uv:&quot;</span> + desc.<a name=\"a169\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aca2cba4630391c78dcf1a828986160da\">name</a>();</div>\n\
<div class=\"line\">                                pBindSource[i].fSourceType = cgfxVertexAttribute::kUV;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// if the descriptor has a custom semantic name then use it as the source name</span></div>\n\
<div class=\"line\">                                pBindSource[i].fSourceName = desc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aec39ee3496166457d1ccdf73c8d1a3b2\">semanticName</a>();</div>\n\
<div class=\"line\">                                pBindSource[i].fSourceType = cgfxVertexAttribute::kBlindData;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;uv description name is [%s]\\n&quot;, desc.name().asChar());</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Build uv source name %s\\n&quot;, pBindSource[i].fSourceName.asChar());</span></div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MGeometry::kColor</a>:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceType =  cgfxVertexAttribute::kColor;</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceName = <span class=\"stringliteral\">&quot;color:&quot;</span> + desc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aca2cba4630391c78dcf1a828986160da\">name</a>();</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4ab90d6591156ad2cb2eea2cb5b75e77e0\">MHWRender::MGeometry::kTangent</a>:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceType = cgfxVertexAttribute::kTangent;</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceName = <span class=\"stringliteral\">&quot;tangent:&quot;</span> + desc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aca2cba4630391c78dcf1a828986160da\">name</a>();</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4af6ed1c5faf6f0993971e8043ffa1a111\">MHWRender::MGeometry::kBitangent</a>:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceType = cgfxVertexAttribute::kBinormal;</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceName = <span class=\"stringliteral\">&quot;binormal:&quot;</span> + desc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aca2cba4630391c78dcf1a828986160da\">name</a>();</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceType = cgfxVertexAttribute::kBlindData;</div>\n\
<div class=\"line\">                            pBindSource[i].fSourceName = desc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aec39ee3496166457d1ccdf73c8d1a3b2\">semanticName</a>();</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                pBindSource[i].fDimension = desc.<a name=\"a170\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>();</div>\n\
<div class=\"line\">                pBindSource[i].fOffset = desc.<a name=\"a171\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aaa02ea556dee3025f49406b9d3fb662c\">offset</a>();</div>\n\
<div class=\"line\">                pBindSource[i].fStride = desc.<a name=\"a172\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#a2f0529f7f5ff03b8a26e3a3d1925bb2b\">stride</a>();</div>\n\
<div class=\"line\">                pBindSource[i].fElementSize = desc.<a name=\"a173\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#a064b0aed53f7aa48d27145b41f9590aa\">dataTypeSize</a>();</div>\n\
<div class=\"line\">                pBindSource[i].fDataBufferId = *dataBufferId;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//draw</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Dump out indexing information</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (boundData &amp;&amp; geometry-&gt;<a name=\"a174\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a841bcde01083fb1b48f22c553d1d695c\">indexBufferCount</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Dump out indexing information</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a175\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>* buffer = geometry-&gt;<a name=\"a176\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#aa2f26ad753c6cf66a2d0badd1328ebee\">indexBuffer</a>(0);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span> *indexHandle = buffer-&gt;<a name=\"a177\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#ad7bcab0d1707ef0da22fc72ada62c40e\">resourceHandle</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> indexBufferCount = 0;</div>\n\
<div class=\"line\">                GLuint *indexBufferId = NULL;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MHWRender::MGeometry::Primitive</a> indexPrimType = renderItem-&gt;<a name=\"a178\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a0005764259795847274dba4c66e3661b\">primitive</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (indexHandle)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    indexBufferId = (GLuint *)(indexHandle);</div>\n\
<div class=\"line\">                    indexBufferCount = buffer-&gt;<a name=\"a179\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#a90ca964ebcc1b02bbcde225edd49e812\">size</a>();</div>\n\
<div class=\"line\">                    <span class=\"comment\">/*  if (debugGeometricDrawPrintData)</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        fprintf(stderr, &quot;IndexingPrimType(%s), IndexType(%s), IndexCount(%d), Handle(%d)\\n&quot;,</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        MHWRender::MGeometry::primitiveString(indexPrimType).asChar(),</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        MHWRender::MGeometry::dataTypeString(buffer-&gt;dataType()).asChar(),</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        indexBufferCount,</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        *indexBufferId);</span></div>\n\
<div class=\"line\"><span class=\"comment\">                        }                       */</span></div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                GLenum indexPrimTypeGL = GL_TRIANGLES;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (indexPrimType) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a name=\"a180\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea57a311fc6dd7498f2339ab45af414377\">MHWRender::MGeometry::kPoints</a>:</div>\n\
<div class=\"line\">                        indexPrimTypeGL = GL_POINTS; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a name=\"a181\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea9808e481c6346dfc333afb4c52890ac9\">MHWRender::MGeometry::kLines</a>:</div>\n\
<div class=\"line\">                        indexPrimTypeGL = GL_LINES; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a name=\"a182\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea505d8b3b6fdcadeb908f49f661e66957\">MHWRender::MGeometry::kLineStrip</a>:</div>\n\
<div class=\"line\">                        indexPrimTypeGL = GL_LINE_STRIP; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1eaa2c70dd76c8172a9298334473c914304\">MHWRender::MGeometry::kTriangles</a>:</div>\n\
<div class=\"line\">                        indexPrimTypeGL = GL_TRIANGLES; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a name=\"a183\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea6f6fdd3e537134843d971d56257d1bfc\">MHWRender::MGeometry::kTriangleStrip</a>:</div>\n\
<div class=\"line\">                        indexPrimTypeGL = GL_TRIANGLE_STRIP; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                GLenum indexType =</div>\n\
<div class=\"line\">                    ( buffer-&gt;<a name=\"a184\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>() == <a name=\"a185\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>  ? GL_UNSIGNED_INT : GL_UNSIGNED_SHORT );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(!result)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (indexBufferId  &amp;&amp; (*indexBufferId &gt; 0))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Now render the passes for this effect</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> cgfxPass* pass = technique-&gt;getFirstPass();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (technique-&gt;getNumPasses() == 1) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// For single pass effect, the pass state has</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// is set only once.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sLastDrawShaderNode == NULL) {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (sActiveShaderNode-&gt;fPassStateSetters[0].isPushPopAttribsRequired()) {</div>\n\
<div class=\"line\">                                glPushAttrib(GL_ALL_ATTRIB_BITS);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            glUseProgramObjectARB(0);</div>\n\
<div class=\"line\">                            pass-&gt;setCgState();</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (needFullCgSetPassState) {</div>\n\
<div class=\"line\">                                pass-&gt;setCgState();</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                                pass-&gt;updateCgParameters();</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        pass-&gt;bind(pBindSource, bufferCount);</div>\n\
<div class=\"line\">                        glBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, *indexBufferId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Now render the passes for this effect</span></div>\n\
<div class=\"line\">                        glDrawElements(indexPrimTypeGL, indexBufferCount, indexType, GLOBJECT_BUFFER_OFFSET(0));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; pass; ++i, pass = pass-&gt;getNext()) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            sActiveShaderNode-&gt;fPassStateSetters[i].setPassState(stateMgr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// Update render state for each pass</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (sActiveShaderNode-&gt;fPassStateSetters[i].isPushPopAttribsRequired()) {</div>\n\
<div class=\"line\">                                glPushAttrib(GL_ALL_ATTRIB_BITS);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            glUseProgramObjectARB(0);</div>\n\
<div class=\"line\">                            pass-&gt;setCgState();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            pass-&gt;bind(pBindSource, bufferCount);</div>\n\
<div class=\"line\">                            glBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, *indexBufferId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// Now render the passes for this effect</span></div>\n\
<div class=\"line\">                            glDrawElements(indexPrimTypeGL, indexBufferCount, indexType, GLOBJECT_BUFFER_OFFSET(0));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            glStateCache::instance().flushState();</div>\n\
<div class=\"line\">                            pass-&gt;resetCgState();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (sActiveShaderNode-&gt;fPassStateSetters[i].isPushPopAttribsRequired()) {</div>\n\
<div class=\"line\">                                glPopAttrib();</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        stateMgr-&gt;<a name=\"a186\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a27dbc083002d85108ed30ee1131f68c1\">setBlendState</a>(fOldBlendState);</div>\n\
<div class=\"line\">                        stateMgr-&gt;<a name=\"a187\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5a6b8e76300df4a0c9f6a38b236118f7\">setDepthStencilState</a>(fOldDepthStencilState);</div>\n\
<div class=\"line\">                        stateMgr-&gt;<a name=\"a188\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>(fOldRasterizerState);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span>[] pBindSource;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        checkGlErrors(<span class=\"stringliteral\">&quot;cgfxShaderOverride::draw&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        sLastDrawShaderNode = fShaderNode;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"comment\">// fEffect must be NULL</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Setting the result to false means that the plugin</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// cannot perform the render properly.</span></div>\n\
<div class=\"line\">        result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderOverride::terminateKey(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;cgfxShaderOverride::terminateKey&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fShaderNode || !sActiveShaderNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//printf(&quot;Failed cgfxShaderOverride::terminateKey() - no shader node\\n&quot;);</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> cgfxTechnique* technique = sActiveShaderNode-&gt;fCurrentTechnique;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (technique &amp;&amp; technique-&gt;isValid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a9eed5300933693e76ad77822b4feb37f\">getStateManager</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> cgfxPass* pass = technique-&gt;getFirstPass();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (technique-&gt;getNumPasses() == 1) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// For single pass effects, we reset the pass state at</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// termination time.</span></div>\n\
<div class=\"line\">            glStateCache::instance().flushState();</div>\n\
<div class=\"line\">            pass-&gt;resetCgState();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sActiveShaderNode-&gt;fPassStateSetters[0].isPushPopAttribsRequired()) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glPopAttrib();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//restore render state after rendering</span></div>\n\
<div class=\"line\">            stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a27dbc083002d85108ed30ee1131f68c1\">setBlendState</a>(fOldBlendState);</div>\n\
<div class=\"line\">            stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5a6b8e76300df4a0c9f6a38b236118f7\">setDepthStencilState</a>(fOldDepthStencilState);</div>\n\
<div class=\"line\">            stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>(fOldRasterizerState);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glPopClientAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"a189\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a544e5c653741b90e7c65d2b34e8ebe60\">MHWRender::MStateManager::releaseBlendState</a>(fOldBlendState);</div>\n\
<div class=\"line\">        <a name=\"a190\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1ab255028fb2b2440bb6b7300713c15f\">MHWRender::MStateManager::releaseDepthStencilState</a>(fOldDepthStencilState);</div>\n\
<div class=\"line\">        <a name=\"a191\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5c1115e1c741c78d1c19909c7b4d8db9\">MHWRender::MStateManager::releaseRasterizerState</a>(fOldRasterizerState);</div>\n\
<div class=\"line\">        fOldBlendState = 0;</div>\n\
<div class=\"line\">        fOldDepthStencilState = 0;</div>\n\
<div class=\"line\">        fOldRasterizerState = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    sActiveShaderNode = NULL;</div>\n\
<div class=\"line\">    sLastDrawShaderNode = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Override properties</span></div>\n\
<div class=\"line\">MHWRender::DrawAPI cgfxShaderOverride::supportedDrawAPIs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MHWRender::kOpenGL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderOverride::isTransparent()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fShaderNode &amp;&amp; fShaderNode-&gt;fCurrentTechnique)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fShaderNode-&gt;fCurrentTechnique-&gt;hasBlending();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderOverride::overridesDrawState()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> cgfxShaderOverride::bindAttrValues()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fShaderNode || !sActiveShaderNode ||</div>\n\
<div class=\"line\">        sActiveShaderNode-&gt;fEffect.isNull() ||</div>\n\
<div class=\"line\">        !sActiveShaderNode-&gt;fEffect-&gt;isValid() ||</div>\n\
<div class=\"line\">        !sActiveShaderNode-&gt;fTechnique.length())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>  status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  oNode = fShaderNode-&gt;thisMObject();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> needFullCgSetPassState = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This method should NEVER access the shape. If you find yourself tempted to access</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// any data from the shape here (like the matrices), be strong and resist! Any shape</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// dependent data should be set in bindAttrViewValues instead!</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The cgfxAttrDef class contains data members (such as fAttr and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// fAttr2) that are relative to the current node (fShaderNode). It</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// also contains data members (such as fParameterHandle) that are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// relative the to current CGeffect (sActiveShaderNode). It is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// important that we use the correct cgfxAttrDef when accessing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// these data members. Note that we assume here that the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attributes of two lists are listed in the same order. This</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// should be the case because they have been created from the same</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CgFX file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that this is a temporary situation. It should go away once</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we create a unique tupple of CGeffect, cgfxEffectDef and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cgfxAttrDefList for each matching shader key.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (cgfxAttrDefList::iterator it(fShaderNode-&gt;fAttrDefList),</div>\n\
<div class=\"line\">             activeIt(sActiveShaderNode-&gt;fAttrDefList);</div>\n\
<div class=\"line\">         it; ++it, ++activeIt )</div>\n\
<div class=\"line\">    {                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = *it;</div>\n\
<div class=\"line\">        cgfxAttrDef* activeDef = *activeIt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (aDef-&gt;fName != activeDef-&gt;fName) {</div>\n\
<div class=\"line\">          fShaderNode-&gt;reportInternalError( __FILE__, __LINE__ );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (aDef-&gt;fType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeBool:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetParameter1i(activeDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeInt:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetParameter1i(activeDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeFloat:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetParameter1f(activeDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeString:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tmp;</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\">                    cgSetStringParameterValue(activeDef-&gt;fParameterHandle, tmp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeVector2:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[2];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp[0], tmp[1]);</div>\n\
<div class=\"line\">                    cgSetParameter2fv(activeDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeVector3:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor3:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[3];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                    cgSetParameter3fv(activeDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeVector4:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor4:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[4];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                    cgSetParameter4fv(activeDef-&gt;fParameterHandle, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldPos:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// since it is in world space, we don&#39;t need to do extra mat computation. set the value directly.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Read the value</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[4];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fSize == 3)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                        tmp[3] = 1.0;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    cgSetParameterValuefr(activeDef-&gt;fParameterHandle, aDef-&gt;fSize, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeMatrix:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> tmp;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp2[4][4];</div>\n\
<div class=\"line\">                    aDef-&gt;getValue(oNode, tmp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fInvertMatrix)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        tmp = tmp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!aDef-&gt;fTransposeMatrix)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        tmp = tmp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a6fadbac6023eb9d361176a87b73063dc\">transpose</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    tmp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#afc8a36464bb71526e9d2bc0361f643cf\">get</a>(tmp2);</div>\n\
<div class=\"line\">                    cgSetMatrixParameterfr(activeDef-&gt;fParameterHandle, &amp;tmp2[0][0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor1DTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor3DTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeBumpTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeCubeTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeEnvTexture:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalizationTexture:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> texFileName;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> textureNode = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( fShaderNode-&gt;fTexturesByName)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, texFileName);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// If we have a fileTexture node connect, get the</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// filename it is using</span></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> srcPlug;</div>\n\
<div class=\"line\">                        aDef-&gt;getSource(oNode, srcPlug);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> srcNode = srcPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( srcNode != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rc;</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgFn( srcNode);</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> filenamePlug = dgFn.findPlug( <span class=\"stringliteral\">&quot;fileTextureName&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;rc);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( rc == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                filenamePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( texFileName);</div>\n\
<div class=\"line\">                                textureNode = filenamePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(&amp;rc);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// attach a monitor to this texture if we don&#39;t already have one</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// Note that we don&#39;t need to worry about handling node destroyed</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// or disconnected, as both of these will trigger attribute changed</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// messages before going away, and we will deregister our callback</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// in the handler!</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( aDef-&gt;fTextureMonitor == kNullCallback &amp;&amp; textureNode != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// If we don&#39;t have a callback, this may mean our texture is dirty</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// and needs to be re-loaded (because we can&#39;t actually delete the</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// texture itself in the DG callback we need to wait until we</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// know we have a GL context - like right here)</span></div>\n\
<div class=\"line\">                                aDef-&gt;releaseTexture();</div>\n\
<div class=\"line\">                                aDef-&gt;fTextureMonitor = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#add4ee645b2cea6f0da5b872e8f011a6a\">MNodeMessage::addAttributeChangedCallback</a>(</div>\n\
<div class=\"line\">                                    textureNode, textureChangedCallback, aDef);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fTexture.isNull() || texFileName != aDef-&gt;fStringDef)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;fStringDef = texFileName;</div>\n\
<div class=\"line\">                        aDef-&gt;fTexture = cgfxTextureCache::instance().getTexture(</div>\n\
<div class=\"line\">                            texFileName, textureNode, fShaderNode-&gt;fShaderFxFile,</div>\n\
<div class=\"line\">                            aDef-&gt;fName, aDef-&gt;fType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        cgGLSetupSampler(activeDef-&gt;fParameterHandle, aDef-&gt;fTexture-&gt;getTextureId());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!aDef-&gt;fTexture-&gt;isValid() &amp;&amp; texFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader &quot;</span>;</div>\n\
<div class=\"line\">                            sMsg += fnNode.name();</div>\n\
<div class=\"line\">                            sMsg += <span class=\"stringliteral\">&quot; : failed to load texture \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                            sMsg += texFileName;</div>\n\
<div class=\"line\">                            sMsg += <span class=\"stringliteral\">&quot;\\&quot;.&quot;</span>;</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// We need to call cgSetPassState() after</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// having called cgGLSetupSampler(). Only</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// calling cgUpdateProgramParameters() is</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// insufficient...</span></div>\n\
<div class=\"line\">                        needFullCgSetPassState = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sLastDrawShaderNode == NULL) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// cgSetPassState() will be called in this case</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// and cgGLSetTextureParameter() will</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// therefore work correctly.</span></div>\n\
<div class=\"line\">                        cgGLSetTextureParameter(activeDef-&gt;fParameterHandle, aDef-&gt;fTexture-&gt;getTextureId());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        GLuint textureId = aDef-&gt;fTexture-&gt;getTextureId();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// cgUpdateProgramParameters() will be called in this case</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// and cgGLSetTextureParameter() does not work</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// for some reason in this case. The</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// currrently bound active texture never gets</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// updated. We therefore have to manually</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// update the currently bound OpenGL texture.</span></div>\n\
<div class=\"line\">                        cgGLSetTextureParameter(activeDef-&gt;fParameterHandle, textureId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        GLenum texEnum = cgGLGetTextureEnum(activeDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                        glActiveTexture(texEnum);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">switch</span> (aDef-&gt;fType)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor1DTexture:</div>\n\
<div class=\"line\">                            glBindTexture(GL_TEXTURE_1D, textureId);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DTexture:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalTexture:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeBumpTexture:</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if !defined(WIN32) &amp;&amp; !defined(__linux__)</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                            glBindTexture(GL_TEXTURE_2D, textureId);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeEnvTexture:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeCubeTexture:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeNormalizationTexture:</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                glBindTexture(GL_TEXTURE_CUBE_MAP_ARB, textureId);</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor3DTexture:</div>\n\
<div class=\"line\">                            glBindTexture(GL_TEXTURE_3D, textureId);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// No such thing as NV texture rectangle</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// on Mac.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeColor2DRectTexture:</div>\n\
<div class=\"line\">                            glBindTexture(GL_TEXTURE_RECTANGLE_NV, textureId);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                            assert(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    checkGlErrors(<span class=\"stringliteral\">&quot;After loading texture&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeTime:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> ival = timeGetTime() &amp; 0xffffff;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> val = (float)ival * 0.001f;</div>\n\
<div class=\"line\">                    cgSetParameter1f(activeDef-&gt;fParameterHandle, val);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeOther:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeUnknown:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenDir:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenPos:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">                <span class=\"comment\">// View dependent parameter</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                M_CHECK( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">            }                          <span class=\"comment\">// switch (aDef-&gt;fType)</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( ++fShaderNode-&gt;fErrorCount &lt;= fShaderNode-&gt;fErrorLimit )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader warning &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += (int)ee;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;: &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fnNode.name();</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot; internal error while setting parameter \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += aDef-&gt;fName;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; of effect \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fShaderNode-&gt;fShaderFxFile;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; for shape &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fShaderNode-&gt;currentPath().partialPathName();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> needFullCgSetPassState;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> cgfxShaderOverride::bindViewAttrValues(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fShaderNode || !sActiveShaderNode ||</div>\n\
<div class=\"line\">        sActiveShaderNode-&gt;fEffect.isNull() ||</div>\n\
<div class=\"line\">        !sActiveShaderNode-&gt;fEffect-&gt;isValid() ||</div>\n\
<div class=\"line\">        !sActiveShaderNode-&gt;fTechnique.length())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>  status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  oNode = fShaderNode-&gt;thisMObject();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> wMatrix, vMatrix, pMatrix, sMatrix;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> wvMatrix, wvpMatrix, wvpsMatrix;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> vpMatrix, vpsMatrix;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        wvpMatrix = context.<a name=\"a192\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a193\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9aef68016d080e72df2f823fb80e1f0473\">MHWRender::MFrameContext::kWorldViewProjMtx</a>);</div>\n\
<div class=\"line\">        wvMatrix = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a194\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9aada60cca33133e088ad8ee1bce291878\">MHWRender::MFrameContext::kWorldViewMtx</a>);</div>\n\
<div class=\"line\">        wMatrix = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a195\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9abe06496227f48d6e05b7d410124b0f85\">MHWRender::MFrameContext::kWorldMtx</a>);</div>\n\
<div class=\"line\">        vMatrix = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a196\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a1628397f32d381a2b05a9902af452c8a\">MHWRender::MFrameContext::kViewMtx</a>);</div>\n\
<div class=\"line\">        pMatrix = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a197\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a9bfe03d742b94b682ba896a1597df9f7\">MHWRender::MFrameContext::kProjectionMtx</a>);</div>\n\
<div class=\"line\">        vpMatrix = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(<a name=\"a198\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a2ad55891ae6c2915699921b3fdea1d4e\">MHWRender::MFrameContext::kViewProjMtx</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> vpt[4];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> depth[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        context.<a name=\"a199\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a833da0fac707065e2b987ff38b7b7312\">getViewportDimensions</a>(vpt[0], vpt[1], vpt[2], vpt[3]);</div>\n\
<div class=\"line\">        context.<a name=\"a200\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ae1bda403fc02486d936aadc56a90e395\">getDepthRange</a>(depth[0], depth[1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Construct the NDC -&gt; screen space matrix</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x0, y0, z0, w, h, d;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        x0 = (double)vpt[0];</div>\n\
<div class=\"line\">        y0 = (double)vpt[1];</div>\n\
<div class=\"line\">        z0 = depth[0];</div>\n\
<div class=\"line\">        w  = (double)vpt[2];</div>\n\
<div class=\"line\">        h  = (double)vpt[3];</div>\n\
<div class=\"line\">        d  = depth[1] - z0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Make a reference to ease the typing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>* s = &amp;sMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        s[ 0] = w/2;    s[ 1] = 0.0;    s[ 2] = 0.0;    s[ 3] = 0.0;</div>\n\
<div class=\"line\">        s[ 4] = 0.0;    s[ 5] = h/2;    s[ 6] = 0.0;    s[ 7] = 0.0;</div>\n\
<div class=\"line\">        s[ 8] = 0.0;    s[ 9] = 0.0;    s[10] = d/2;    s[11] = 0.0;</div>\n\
<div class=\"line\">        s[12] = x0+w/2; s[13] = y0+h/2; s[14] = z0+d/2; s[15] = 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        vpsMatrix = vpMatrix * sMatrix;</div>\n\
<div class=\"line\">        wvpsMatrix = wvpMatrix * sMatrix;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get Hardware Fog params.</span></div>\n\
<div class=\"line\">    <a name=\"_a201\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_frame_context_1_1_hw_fog_params.html\">MHWRender::MFrameContext::HwFogParams</a> hwFogParams = context.<a name=\"a202\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#aa4e74730699e09cec07f3b59fd2679e8\">getHwFogParameters</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The cgfxAttrDef class contains data members (such as fAttr and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// fAttr2) that are relative to the current node (fShaderNode). It</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// also contains data members (such as fParameterHandle) that are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// relative the to current CGeffect (sActiveShaderNode). It is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// important that we use the correct cgfxAttrDef when accessing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// these data members. Note that we assume here that the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attributes of two lists are listed in the same order. This</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// should be the case because they have been created from the same</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CgFX file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that this is a temporary situation. It should go away once</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we create a unique tupple of CGeffect, cgfxEffectDef and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cgfxAttrDefList for each matching shader key.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (cgfxAttrDefList::iterator it(fShaderNode-&gt;fAttrDefList),</div>\n\
<div class=\"line\">             activeIt(sActiveShaderNode-&gt;fAttrDefList);</div>\n\
<div class=\"line\">         it; ++it, ++activeIt )</div>\n\
<div class=\"line\">    {                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\">        cgfxAttrDef* aDef = *it;</div>\n\
<div class=\"line\">        cgfxAttrDef* activeDef = *activeIt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (aDef-&gt;fName != activeDef-&gt;fName) {</div>\n\
<div class=\"line\">          fShaderNode-&gt;reportInternalError( __FILE__, __LINE__ );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (aDef-&gt;fType)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionDir:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenDir:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeObjectPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionPos:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeScreenPos:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> tmp[4];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fSize == 3)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                        tmp[3] = 1.0;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        aDef-&gt;getValue(oNode, tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> space = aDef-&gt;fType - cgfxAttrDef::kAttrTypeFirstPos;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (space &lt; 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        space = aDef-&gt;fType - cgfxAttrDef::kAttrTypeFirstDir;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat;  <span class=\"comment\">// initially the identity matrix.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span> (space)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 0: mat = wMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 1: <span class=\"comment\">/*mat = identity;*/</span>         <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 2: mat = vMatrix;          <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 3: mat = vpMatrix;     <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> 4: mat = vpsMatrix;        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Maya&#39;s transformation matrices are set up with</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the translation in row 3 (like OpenGL) rather</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// than column 3. To transform a point or vector,</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// use V*M, not M*V.   kh 11/2003</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> base = cgfxAttrDef::kAttrTypeFirstPos;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (aDef-&gt;fType &lt;= cgfxAttrDef::kAttrTypeLastDir)</div>\n\
<div class=\"line\">                        base = cgfxAttrDef::kAttrTypeFirstDir;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (base == cgfxAttrDef::kAttrTypeFirstPos)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point(tmp[0], tmp[1], tmp[2], tmp[3]);</div>\n\
<div class=\"line\">                        point *= mat;</div>\n\
<div class=\"line\">                        tmp[0] = (float)point.x;</div>\n\
<div class=\"line\">                        tmp[1] = (<span class=\"keywordtype\">float</span>)point.y;</div>\n\
<div class=\"line\">                        tmp[2] = (float)point.z;</div>\n\
<div class=\"line\">                        tmp[3] = (<span class=\"keywordtype\">float</span>)point.w;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vec(tmp[0], tmp[1], tmp[2]);</div>\n\
<div class=\"line\">                        vec *= mat;</div>\n\
<div class=\"line\">                        tmp[0] = (float)vec.x;</div>\n\
<div class=\"line\">                        tmp[1] = (<span class=\"keywordtype\">float</span>)vec.y;</div>\n\
<div class=\"line\">                        tmp[2] = (float)vec.z;</div>\n\
<div class=\"line\">                        tmp[3] = 1.F;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    cgSetParameterValuefc(activeDef-&gt;fParameterHandle, aDef-&gt;fSize, tmp);</div>\n\
<div class=\"line\">                    aDef-&gt;setUnitsToInternal(aDef-&gt;fParameterHandle);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9\">MHWRender::MFrameContext::MatrixType</a> matrixType;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span> (aDef-&gt;fType)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldMatrix:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix &amp;&amp; !aDef-&gt;fTransposeMatrix)  matrixType = <a name=\"a203\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a1e2004c0fd1b00f5917186fc79a26742\">MHWRender::MFrameContext::kWorldTranspInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix) matrixType = <a name=\"a204\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a9ec1ce803001025fea4d01724b451e2f\">MHWRender::MFrameContext::kWorldInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(!aDef-&gt;fTransposeMatrix) matrixType = <a name=\"a205\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9af7c407fc77f4c63f67b447b9c0b2869f\">MHWRender::MFrameContext::kWorldTransposeMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> matrixType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9abe06496227f48d6e05b7d410124b0f85\">MHWRender::MFrameContext::kWorldMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeViewMatrix:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix &amp;&amp; !aDef-&gt;fTransposeMatrix)  matrixType = <a name=\"a206\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9afbb0bf05e41f533db267f24a8a79894f\">MHWRender::MFrameContext::kViewTranspInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix) matrixType = <a name=\"a207\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a5d3d0dbd623b522cfaa83f475c20dc27\">MHWRender::MFrameContext::kViewInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(!aDef-&gt;fTransposeMatrix) matrixType = <a name=\"a208\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9ac9b69996345749526ead2152756e6b3a\">MHWRender::MFrameContext::kViewTransposeMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> matrixType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a1628397f32d381a2b05a9902af452c8a\">MHWRender::MFrameContext::kViewMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeProjectionMatrix:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix &amp;&amp; !aDef-&gt;fTransposeMatrix)  matrixType = <a name=\"a209\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a5e0c71eea98dc0565c71d4e7e3e638ad\">MHWRender::MFrameContext::kProjectionTranspInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix) matrixType = <a name=\"a210\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a107257db05c152c4a5645d96c628b1ff\">MHWRender::MFrameContext::kProjectionInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(!aDef-&gt;fTransposeMatrix) matrixType = <a name=\"a211\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a807c188630b9fef0a86f76be7cc57dd1\">MHWRender::MFrameContext::kProjectionTranposeMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> matrixType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a9bfe03d742b94b682ba896a1597df9f7\">MHWRender::MFrameContext::kProjectionMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewMatrix:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix &amp;&amp; !aDef-&gt;fTransposeMatrix)  matrixType = <a name=\"a212\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a523ecad4cb0ff2d7e29ff32c17566407\">MHWRender::MFrameContext::kWorldViewTranspInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix) matrixType = <a name=\"a213\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9ac0b47f8c4f3911e9577435d2b4b85725\">MHWRender::MFrameContext::kWorldViewInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(!aDef-&gt;fTransposeMatrix) matrixType = <a name=\"a214\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a599c737c6fef8a496fc12a7319faeda1\">MHWRender::MFrameContext::kWorldViewTransposeMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> matrixType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9aada60cca33133e088ad8ee1bce291878\">MHWRender::MFrameContext::kWorldViewMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeWorldViewProjectionMatrix:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix &amp;&amp; !aDef-&gt;fTransposeMatrix)  matrixType = <a name=\"a215\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a34ddfb0112a5a8c837b095b2067d0903\">MHWRender::MFrameContext::kWorldViewProjTranspInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(aDef-&gt;fInvertMatrix) matrixType = <a name=\"a216\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a4539cfbe714c2f65af136184d2bb703c\">MHWRender::MFrameContext::kWorldViewProjInverseMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(!aDef-&gt;fTransposeMatrix) matrixType = <a name=\"a217\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a6cdc6b1a5d0fed0dc063899c2d33b4a6\">MHWRender::MFrameContext::kWorldViewProjTransposeMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> matrixType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9aef68016d080e72df2f823fb80e1f0473\">MHWRender::MFrameContext::kWorldViewProjMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        matrixType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9abe06496227f48d6e05b7d410124b0f85\">MHWRender::MFrameContext::kWorldMtx</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a5359807d83c248df630615c60f896a51\">getMatrix</a>(matrixType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> tmp[4][4];</div>\n\
<div class=\"line\">                    mat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#afc8a36464bb71526e9d2bc0361f643cf\">get</a>(tmp);</div>\n\
<div class=\"line\">                    cgSetMatrixParameterdr(activeDef-&gt;fParameterHandle, &amp;tmp[0][0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogEnabled:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> fogEnabled = hwFogParams.<a name=\"a218\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_frame_context_1_1_hw_fog_params.html#ae127077f7a1eda466f6837a3a1dc8277\">HwFogEnabled</a>;</div>\n\
<div class=\"line\">                    cgSetParameter1i(activeDef-&gt;fParameterHandle, fogEnabled);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogMode:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fogMode = hwFogParams.<a name=\"a219\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_frame_context_1_1_hw_fog_params.html#aa283269f91a1d2ddac0f0af5a485ff39\">HwFogMode</a>;</div>\n\
<div class=\"line\">                    cgSetParameter1i(activeDef-&gt;fParameterHandle, fogMode);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogStart:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> fogStart = hwFogParams.<a name=\"a220\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_frame_context_1_1_hw_fog_params.html#aab8b5ae43dd8979294e7a9e933be5934\">HwFogStart</a>;</div>\n\
<div class=\"line\">                    cgSetParameter1f(activeDef-&gt;fParameterHandle, fogStart);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogEnd:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> fogEnd = hwFogParams.<a name=\"a221\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_frame_context_1_1_hw_fog_params.html#a2080b4810338eb92be71796f16e547d5\">HwFogEnd</a>;</div>\n\
<div class=\"line\">                    cgSetParameter1f(activeDef-&gt;fParameterHandle, fogEnd);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogDensity:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> fogDensity = hwFogParams.<a name=\"a222\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_frame_context_1_1_hw_fog_params.html#ab98580d56f9bccc16b7ab408055774e3\">HwFogDensity</a>;</div>\n\
<div class=\"line\">                    cgSetParameter1f(activeDef-&gt;fParameterHandle, fogDensity);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> cgfxAttrDef::kAttrTypeHardwareFogColor:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    cgSetParameter4fv(activeDef-&gt;fParameterHandle, &amp;hwFogParams.<a name=\"a223\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_frame_context_1_1_hw_fog_params.html#a145d982480d906036f1de9abd0eb6333\">HwFogColor</a>[0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }                          <span class=\"comment\">// switch (aDef-&gt;fType)</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">catch</span> ( cgfxShaderCommon::InternalError* e )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( ++fShaderNode-&gt;fErrorCount &lt;= fShaderNode-&gt;fErrorLimit )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> ee = (size_t)e;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( oNode );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sMsg = <span class=\"stringliteral\">&quot;cgfxShader warning &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += (int)ee;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;: &quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fnNode.name();</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot; internal error while setting parameter \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += aDef-&gt;fName;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; of effect \\&quot;&quot;</span>;</div>\n\
<div class=\"line\">                sMsg += fShaderNode-&gt;fShaderFxFile;</div>\n\
<div class=\"line\">                sMsg += <span class=\"stringliteral\">&quot;\\&quot; for shape &quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"comment\">/*if (shapePath.isValid())</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    sMsg += shapePath.partialPathName();</span></div>\n\
<div class=\"line\"><span class=\"comment\">                else</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    sMsg += &quot;SWATCH GEOMETRY&quot;;*/</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>( sMsg );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }                                  <span class=\"comment\">// loop over fAttrDefList</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";