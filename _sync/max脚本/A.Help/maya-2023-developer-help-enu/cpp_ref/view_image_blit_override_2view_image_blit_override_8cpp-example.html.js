var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: viewImageBlitOverride/viewImageBlitOverride.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'view_image_blit_override_2view_image_blit_override_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: viewImageBlitOverride/viewImageBlitOverride.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">viewImageBlitOverride/viewImageBlitOverride.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><span class=\"comment\">// provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/M3dView.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;viewImageBlitOverride.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFrameContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStateManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Sample plugin which will blit an image as the scene and rely on</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya&#39;s internal rendering for the UI only</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Classes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  RenderOverride: The main override class. Contains all the operations</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                  as well as keep track of texture resources.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  SceneBlit:      A simple quad render responsible for blitting a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                  colour and depth image. Will also clear the background depth</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  UIDraw:         A scene override which filters out all but UI drawing</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  A stock &quot;present&quot; operation is also queued so that the results go to the viewport</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>viewImageBlitOverride</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Global override instance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">/*static*/</span> RenderOverride* RenderOverride::sViewImageBlitOverrideInstance = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Override</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    RenderOverride::RenderOverride( <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; name )</div>\n\
<div class=\"line\">    : MRenderOverride( name )</div>\n\
<div class=\"line\">    , mUIName(<span class=\"stringliteral\">&quot;Sample Image Blit Override&quot;</span>)</div>\n\
<div class=\"line\">    , mCurrentOperation(-1)</div>\n\
<div class=\"line\">    , mLoadImagesFromDisk(<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mOperations[0] = mOperations[1] = mOperations[2] = mOperations[3] = NULL;</div>\n\
<div class=\"line\">        mOperationNames[0] = <span class=\"stringliteral\">&quot;viewImageBlitOverride_SceneBlit&quot;</span>;</div>\n\
<div class=\"line\">        mOperationNames[1] = <span class=\"stringliteral\">&quot;viewImageBlitOverride_UIDraw&quot;</span>;</div>\n\
<div class=\"line\">        mOperationNames[2] = <span class=\"stringliteral\">&quot;viewImageBlitOverride_Present&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mColorTexture.texture = NULL;</div>\n\
<div class=\"line\">        mColorTextureDesc.setToDefault2DTexture();</div>\n\
<div class=\"line\">        mDepthTexture.texture = NULL;</div>\n\
<div class=\"line\">        mDepthTextureDesc.setToDefault2DTexture();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    RenderOverride::~RenderOverride()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Release textures     </span></div>\n\
<div class=\"line\">        <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *renderer = <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureManager = renderer ? renderer-&gt;<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>() : NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (textureManager)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mColorTexture.texture)</div>\n\
<div class=\"line\">                textureManager-&gt;<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(mColorTexture.texture);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mDepthTexture.texture)</div>\n\
<div class=\"line\">                textureManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(mDepthTexture.texture);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Release operations</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;4; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mOperations[i])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> mOperations[i];</div>\n\
<div class=\"line\">                mOperations[i] = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    MHWRender::DrawAPI RenderOverride::supportedDrawAPIs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ( MHWRender::kOpenGL | MHWRender::kOpenGLCoreProfile | MHWRender::kDirectX11 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Basic iterator methods</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> RenderOverride::startOperationIterator()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mCurrentOperation = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html\">MHWRender::MRenderOperation</a> *RenderOverride::renderOperation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mCurrentOperation &gt;= 0 &amp;&amp; mCurrentOperation &lt; 4)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mOperations[mCurrentOperation])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> mOperations[mCurrentOperation];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> RenderOverride::nextRenderOperation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mCurrentOperation++;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mCurrentOperation &lt; 4)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update textures used for scene blit. Will update both a </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// colour and a deph texture based on the current output target size.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> RenderOverride::updateTextures(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *theRenderer,</div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureManager)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!theRenderer || !textureManager)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get current output size.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> targetWidth = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> targetHeight = 0;</div>\n\
<div class=\"line\">        theRenderer-&gt;<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aef186014d5c44ba270308a00286f75fd\">outputTargetSize</a>( targetWidth, targetHeight );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> acquireNewTexture = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Decide whether to load images from disk</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If loading from disk, will use a single iff file which contains both</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// color and depth. Seperate files for color and depth could be chosen.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// For this example, we just use an environment variable to switch</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to show both execution paths.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> forceReload = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> exists;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> val = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(<span class=\"stringliteral\">&quot;VIBO_LoadImagesFromDisk&quot;</span>, &amp;exists);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (exists)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> loadFromDisk = (val &gt; 0);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (loadFromDisk != mLoadImagesFromDisk)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mLoadImagesFromDisk = loadFromDisk;</div>\n\
<div class=\"line\">                forceReload = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> imageLocation(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(getenv(<span class=\"stringliteral\">&quot;MAYA_LOCATION&quot;</span>)) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\\\devkit\\\\plug-ins\\\\viewImageBlitOverride\\\\&quot;</span>));</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorImageFileName( imageLocation + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;renderedImage.iff&quot;</span>) );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> depthImageFileName( colorImageFileName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If a resize occured, or we haven&#39;t allocated any texture yet,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// then create new textures which match the output size. </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Release any existing textures.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (forceReload ||</div>\n\
<div class=\"line\">            !mColorTexture.texture ||</div>\n\
<div class=\"line\">            !mDepthTexture.texture ||</div>\n\
<div class=\"line\">            (!mLoadImagesFromDisk &amp;&amp; </div>\n\
<div class=\"line\">                (mColorTextureDesc.fWidth != targetWidth ||</div>\n\
<div class=\"line\">                 mColorTextureDesc.fHeight != targetHeight)))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mColorTexture.texture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                textureManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>( mColorTexture.texture );</div>\n\
<div class=\"line\">                mColorTexture.texture = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mDepthTexture.texture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                textureManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>( mDepthTexture.texture );</div>\n\
<div class=\"line\">                mDepthTexture.texture = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            acquireNewTexture = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            forceReload = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mColorTexture.texture)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *textureData = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> image;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mLoadImagesFromDisk)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                image.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a6c0b6d3f857fa6adc999243f3ff6283a\">readFromFile</a>( colorImageFileName );</div>\n\
<div class=\"line\">                image.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#acab1f6acf34fc74e4d717322fa35241a\">getSize</a>( targetWidth, targetHeight );</div>\n\
<div class=\"line\">                textureData = image.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#aba6def80dd70f1c9af3dbd348fe270ac\">pixels</a>();       </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Prepare some data which forms a checker pattern</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                textureData = <span class=\"keyword\">new</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>[4*targetWidth*targetHeight];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (textureData)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> y = 0; y &lt; targetHeight; y++)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>* pPixel = textureData + (y * targetWidth * 4);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> x = 0; x &lt; targetWidth; x++)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">bool</span> checker = (((x &gt;&gt; 5) &amp; 1) ^ ((y &gt;&gt; 5) &amp; 1)) != 0;</div>\n\
<div class=\"line\">                            *pPixel++ = checker ? 255 : 0;</div>\n\
<div class=\"line\">                            *pPixel++ = 0;</div>\n\
<div class=\"line\">                            *pPixel++ = 0;</div>\n\
<div class=\"line\">                            *pPixel++ = 255;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mColorTextureDesc.fWidth = targetWidth;</div>\n\
<div class=\"line\">            mColorTextureDesc.fHeight = targetHeight;</div>\n\
<div class=\"line\">            mColorTextureDesc.fDepth = 1;</div>\n\
<div class=\"line\">            mColorTextureDesc.fBytesPerRow = 4*targetWidth;</div>\n\
<div class=\"line\">            mColorTextureDesc.fBytesPerSlice = mColorTextureDesc.fBytesPerRow*targetHeight;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Acquire a new texture.</span></div>\n\
<div class=\"line\">            mColorTexture.texture = textureManager-&gt;<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a04aa3cfef217948abc8edd0f19565f95\">acquireTexture</a>( <span class=\"stringliteral\">&quot;&quot;</span>, mColorTextureDesc, textureData );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mColorTexture.texture)</div>\n\
<div class=\"line\">                mColorTexture.texture-&gt;<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html#ad1b6f25f4fb913a233b1c2bff46a62a1\">textureDescription</a>( mColorTextureDesc );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!mLoadImagesFromDisk)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Don&#39;t need the data any more after upload to texture</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> [] textureData;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Various methods for updating the colour texture with some sample data</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// for a checker pattern.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// 1. The raw data can be read back from an existing texture, modified and sent</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    back to update the texture. This involves a GPU-&gt;CPU read and a CPU-&gt;GPU</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    transfer. Toggled using the &#39;updateWithRawData&#39; variable.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// 2. Raw data is allocated by the plug-in and a CPU-GPU transfer is used.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    This is the same update interface as used in method 1.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// 3. Data is allocated in an MImage and data is tranferred to the texture</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    in a CPU-&gt;GPU transfer. Toggle using the &#39;updateWithMImage&#39; variable.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// All three are shown, with suitability to circumstances </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// left to the plug-in writer to choose. The code as is follow option 2.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Test code to update the image on every refresh</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// The update code assumes the image size is the viewport size, so</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// don&#39;t use if loading from disk as the disk image may not be the viewport size.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> updateOnEveryRefresh = <span class=\"keyword\">false</span>; <span class=\"comment\">// !mLoadImagesFromDisk;</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> generateMipMaps = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (updateOnEveryRefresh)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Test to read back data from the texture and update on</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the copy. Does a colour invert. </span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> updateWithRawData = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (updateWithRawData)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mColorTexture.texture-&gt;textureDescription( mColorTextureDesc );</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> rowPitch = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> slicePitch = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>* textureData = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *)mColorTexture.texture-&gt;rawData(rowPitch, slicePitch);</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>* val = NULL;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (textureData &amp;&amp; rowPitch &gt; 0 &amp;&amp; slicePitch &gt; 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;mColorTextureDesc.fHeight; i++)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            val = textureData + (i*rowPitch);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j=0; j&lt;mColorTextureDesc.fWidth*4; j++)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                *val = 255 - *val;</div>\n\
<div class=\"line\">                                val++;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Call the update method with raw data</span></div>\n\
<div class=\"line\">                        mColorTexture.texture-&gt;update(textureData, generateMipMaps, rowPitch);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> [] textureData;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Test to send over new data to update the texture</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> image;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>* textureData = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> updateWithMImage = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> tile = 5;</div>\n\
<div class=\"line\">                    <span class=\"comment\">// MImage allocation</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (updateWithMImage)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        image.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a903ff4fa0918f6c6438c4889025b7c91\">create</a>(targetWidth, targetHeight, 4, <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a01e74e17cc52f661123b8a2a4da770c1a46b9941f17f513de8e30e46ac53e684b\">MImage::kByte</a>);</div>\n\
<div class=\"line\">                        textureData = image.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#aba6def80dd70f1c9af3dbd348fe270ac\">pixels</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Raw data allocation</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        textureData = <span class=\"keyword\">new</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>[4*targetWidth*targetHeight];</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Some sample code to rotate colouring the checker differently</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// per update.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (textureData)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keyword\">static</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> counter = 0;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> y = 0; y &lt; targetHeight; y++)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>* pPixel = textureData + (y * targetWidth * 4);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> x = 0; x &lt; targetWidth; x++)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">bool</span> checker = (((x &gt;&gt; tile) &amp; 1) ^ ((y &gt;&gt; tile) &amp; 1)) != 0;</div>\n\
<div class=\"line\">                                *pPixel++ = (counter == 0 &amp;&amp; checker) ? 255 : 0;</div>\n\
<div class=\"line\">                                *pPixel++ = (counter == 1 &amp;&amp; checker) ? 255 : 0;</div>\n\
<div class=\"line\">                                *pPixel++ = (counter == 2 &amp;&amp; checker) ? 255 : 0;</div>\n\
<div class=\"line\">                                *pPixel++ = 255;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        counter = (counter + 1) % 3;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Call the update method with raw data</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!updateWithMImage)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        mColorTexture.texture-&gt;update( textureData, generateMipMaps );</div>\n\
<div class=\"line\">                        <span class=\"keyword\">delete</span> [] textureData;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Call the update method with an MImage</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        mColorTexture.texture-&gt;update( image, generateMipMaps );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Acquire a new &quot;depth&quot; texture as necessary</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mDepthTexture.texture)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> image;</div>\n\
<div class=\"line\">            image.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a903ff4fa0918f6c6438c4889025b7c91\">create</a>(targetWidth, targetHeight, 4, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a01e74e17cc52f661123b8a2a4da770c1a46b9941f17f513de8e30e46ac53e684b\">MImage::kByte</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mDepthTextureDesc.fWidth = targetWidth;</div>\n\
<div class=\"line\">            mDepthTextureDesc.fHeight = targetHeight;</div>\n\
<div class=\"line\">            mDepthTextureDesc.fDepth = 1;</div>\n\
<div class=\"line\">            mDepthTextureDesc.fBytesPerRow = targetWidth;</div>\n\
<div class=\"line\">            mDepthTextureDesc.fBytesPerSlice = mDepthTextureDesc.fBytesPerRow*targetHeight;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Load depth image from disk to create depth texture. Uses the MImage texture creation interface.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mLoadImagesFromDisk)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                image.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a437f057cbc3f9a972584760824cfd336\">readDepthMap</a>( depthImageFileName );</div>\n\
<div class=\"line\">                image.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#ae5a5927b9cf73717281d10d6b5f37e2a\">getDepthMapSize</a>( targetWidth, targetHeight );</div>\n\
<div class=\"line\">                <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_normalization_description.html\">MHWRender::MDepthNormalizationDescription</a> normalizationDesc;</div>\n\
<div class=\"line\">                mDepthTexture.texture = textureManager-&gt;<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a069050f9521fe273263d287139a33fee\">acquireDepthTexture</a>(<span class=\"stringliteral\">&quot;&quot;</span>, </div>\n\
<div class=\"line\">                    image, <span class=\"keyword\">false</span>, &amp;normalizationDesc );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// Load depth using programmatically created data</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> *textureData = <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[targetWidth*targetHeight];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (textureData)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Use &#39;createDepthWithMImage&#39; to switch between using the MImage</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// and raw data interfaces.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Use &#39;useCameraDistanceValues&#39; to switch between using -1/distance-to-camera</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// values versus using normalized depth coordinates [0...1].</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// The flag is set to create normalized values by default in order to</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// match the requirements of the shader used to render the texture.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Refer to the the comments in SceneBlit::shader() for more details.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> createDepthWithMImage = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> useCameraDistanceValues = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create some dummy &#39;checkered&#39; depth data. </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> depthValue = useCameraDistanceValues ? -1.0f / 100.0f : 1.0f;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> depthValue2 = useCameraDistanceValues ? -1.0f / 500.0f : 0.98f;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> y = 0; y &lt; targetHeight; y++)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">float</span>* pPixel = textureData + (y * targetWidth);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> x = 0; x &lt; targetWidth; x++)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">bool</span> checker = (((x &gt;&gt; 5) &amp; 1) ^ ((y &gt;&gt; 5) &amp; 1)) != 0;</div>\n\
<div class=\"line\">                            *pPixel++ = checker ? depthValue  : depthValue2;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_normalization_description.html\">MHWRender::MDepthNormalizationDescription</a> normalizationDesc;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (createDepthWithMImage)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        image.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#ac16276012a292f0921ae8d0b2e45d4ec\">setDepthMap</a>( textureData, targetWidth, targetHeight );</div>\n\
<div class=\"line\">                        mDepthTexture.texture = textureManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a069050f9521fe273263d287139a33fee\">acquireDepthTexture</a>(<span class=\"stringliteral\">&quot;&quot;</span>, </div>\n\
<div class=\"line\">                            image, <span class=\"keyword\">false</span>, useCameraDistanceValues ? &amp;normalizationDesc : NULL );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        mDepthTexture.texture = textureManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a069050f9521fe273263d287139a33fee\">acquireDepthTexture</a>(<span class=\"stringliteral\">&quot;&quot;</span>, </div>\n\
<div class=\"line\">                            textureData,  targetWidth, targetHeight, <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">                            useCameraDistanceValues ? &amp;normalizationDesc : NULL );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Not required anymore so can delete it.</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> [] textureData;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mDepthTexture.texture)</div>\n\
<div class=\"line\">                mDepthTexture.texture-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html#ad1b6f25f4fb913a233b1c2bff46a62a1\">textureDescription</a>( mDepthTextureDesc );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update the textures used for the blit operation.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (acquireNewTexture)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            SceneBlit* blit = (SceneBlit *)mOperations[0];</div>\n\
<div class=\"line\">            blit-&gt;setColorTexture( mColorTexture );</div>\n\
<div class=\"line\">            blit-&gt;setDepthTexture( mDepthTexture );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (mDepthTexture.texture &amp;&amp; mColorTexture.texture);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the set of operations as necessary, update</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// textures for image blits, and install a callback so we can setup and </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cleanup appropriatelyt when the override changes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> RenderOverride::setup( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; destination )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!theRenderer)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureManager = theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!textureManager)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a new set of operations as required</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mOperations[0])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mOperations[0] = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html\">MHWRender::MRenderOperation</a> *) <span class=\"keyword\">new</span> SceneBlit( mOperationNames[0] );</div>\n\
<div class=\"line\">            mOperations[1] = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html\">MHWRender::MRenderOperation</a> *) <span class=\"keyword\">new</span> UIDraw( mOperationNames[1] );</div>\n\
<div class=\"line\">            mOperations[2] = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html\">MHWRender::MRenderOperation</a> *) <span class=\"keyword\">new</span> <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_h_u_d_render.html\">MHWRender::MHUDRender</a>();</div>\n\
<div class=\"line\">            mOperations[3] = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_operation.html\">MHWRender::MRenderOperation</a> *) <span class=\"keyword\">new</span> <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_present_target.html\">MHWRender::MPresentTarget</a>(  mOperationNames[2] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mOperations[0] || </div>\n\
<div class=\"line\">            !mOperations[1] ||</div>\n\
<div class=\"line\">            !mOperations[2] ||</div>\n\
<div class=\"line\">            !mOperations[3])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update textures used for scene blit</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!updateTextures(theRenderer, textureManager))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Force the panel display style to smooth shaded if it&#39;s not already</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this ensures that viewport selection behaviour works as if shaded</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view;       </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (destination.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &amp;&amp; </div>\n\
<div class=\"line\">            <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(destination, view) == <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (view.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#afb7d316c985d928b3095eaf25ba818a3\">displayStyle</a>() != <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1b68f8823b8e275a4b548fdd27263e8aa620925ec70781a5f5de890d906660d24\">M3dView::kGouraudShaded</a>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                view.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a22744817eafc94f0cb55c0cc9ac7188d\">setDisplayStyle</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1b68f8823b8e275a4b548fdd27263e8aa620925ec70781a5f5de890d906660d24\">M3dView::kGouraudShaded</a>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> RenderOverride::cleanup()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mCurrentOperation = -1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Image blit used to perform the &#39;scene render&#39;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    SceneBlit::SceneBlit(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name)</div>\n\
<div class=\"line\">    : MQuadRender( name )</div>\n\
<div class=\"line\">    , mShaderInstance(NULL)</div>\n\
<div class=\"line\">    , mColorTextureChanged(<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    , mDepthTextureChanged(<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    , mDepthStencilState(NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mColorTexture.texture = NULL;</div>\n\
<div class=\"line\">        mDepthTexture.texture = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    SceneBlit::~SceneBlit()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!renderer)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Release any shader used</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(mShaderInstance);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            mShaderInstance = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Release any state</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDepthStencilState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1ab255028fb2b2440bb6b7300713c15f\">MHWRender::MStateManager::releaseDepthStencilState</a>( mDepthStencilState );</div>\n\
<div class=\"line\">            mDepthStencilState = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> * SceneBlit::shader()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer ? renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>() : NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create the shader.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// The default shader technique will blit color and depth textures to the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the output color and depth buffers respectively. The values in the depth</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// texture are expected to be normalized. </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// The flag &#39;showDepthAsColor&#39; can be set to switch to the &quot;DepthToColor&quot;</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// technique which will route the depth texture to the color buffer.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// This can be used for visualizing or debugging the contents of the depth texture.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> showDepthAsColor = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                mShaderInstance = shaderMgr-&gt;<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;mayaBlitColorDepth&quot;</span>, showDepthAsColor ? <span class=\"stringliteral\">&quot;DepthToColor&quot;</span> : <span class=\"stringliteral\">&quot;&quot;</span> );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// If texture changed then bind new texture to the shader</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// </span></div>\n\
<div class=\"line\">            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mColorTextureChanged)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gColorTex&quot;</span>, mColorTexture);</div>\n\
<div class=\"line\">                mColorTextureChanged = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; mDepthTextureChanged)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gDepthTex&quot;</span>, mDepthTexture);</div>\n\
<div class=\"line\">                mDepthTextureChanged = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mShaderInstance;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html\">MHWRender::MClearOperation</a> &amp; SceneBlit::clearOperation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mClearOperation.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a0eb426378a3484ea204ea50ad2daa547\">setClearGradient</a>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        mClearOperation.setMask( (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>) <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a55b92d9e088b6065ff2e762739b064f9aa9836daa6e01048fcf03e7023c0654d2\">MHWRender::MClearOperation::kClearAll</a> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mClearOperation;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Want to have this state override set to override the default</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// depth stencil state which disables depth writes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state.html\">MHWRender::MDepthStencilState</a> *SceneBlit::depthStencilStateOverride()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mDepthStencilState)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html\">MHWRender::MDepthStencilStateDesc</a> desc;</div>\n\
<div class=\"line\">            desc.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html#a63deb05e0b27e537fcd7ecb470b68725\">depthEnable</a> = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            desc.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html#a1944b0918378af218375dd45c1f191d1\">depthWriteEnable</a> = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            desc.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html#aece62b93b1909efb0c8f3a2a0d9f7fff\">depthFunc</a> = <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#af4045f11e8887dda083d0122d24df4f6add4cd12eb49bf27fbb725a2d015f0f81\">MHWRender::MStateManager::kCompareAlways</a>;</div>\n\
<div class=\"line\">            mDepthStencilState = <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a4fae5c76bc6698abb77b9ffec01bc21a\">MHWRender::MStateManager::acquireDepthStencilState</a>(desc);  </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mDepthStencilState;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya UI draw operation. Draw all UI except for a few exclusion</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    UIDraw::UIDraw(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)</div>\n\
<div class=\"line\">    : <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html\">MHWRender::MSceneRender</a>(name)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    UIDraw::~UIDraw()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a952370b3954e51c4f19349a9a440d471\">MHWRender::MSceneRender::MSceneFilterOption</a>     </div>\n\
<div class=\"line\">    UIDraw::renderFilterOverride()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MHWRender::MSceneRender::kRenderNonShadedItems;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MUint64 </div>\n\
<div class=\"line\">    UIDraw::getObjectTypeExclusions()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Exclude drawing the grid and image planes</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#abda73013ac024fb6afff8299f562f563\">MHWRender::MFrameContext::kExcludeGrid</a> | <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#a64a935afb656a183e011f1691da91b63\">MHWRender::MFrameContext::kExcludeImagePlane</a>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html\">MHWRender::MClearOperation</a> &amp;                    </div>\n\
<div class=\"line\">    UIDraw::clearOperation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Disable clear since we don&#39;t want to clobber the scene colour blit.</span></div>\n\
<div class=\"line\">        mClearOperation.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a55f714c9e4e24d416b345bfadf133783\">setMask</a>((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a55b92d9e088b6065ff2e762739b064f9aaae58611b37c34f59ffa59bed613ca20\">MHWRender::MClearOperation::kClearNone</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mClearOperation;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">//namespace</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";