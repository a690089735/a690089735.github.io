var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: viewRenderOverride/viewRenderOverrideOperations.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'view_render_override_2view_render_override_operations_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: viewRenderOverride/viewRenderOverrideOperations.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">viewRenderOverride/viewRenderOverrideOperations.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><span class=\"comment\">// provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/M3dView.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderTargetManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStateManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MShaderManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTextureManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;viewRenderOverride.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">     Utilty to print out lighting information from a draw context</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> viewRenderOverrideUtilities::printDrawContextLightInfo( <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> &amp; drawContext )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get all the lighting information in the scene</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2\">MHWRender::MDrawContext::LightFilter</a> considerAllSceneLights = <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2a8d9a85c34398a46f44834be0b4fec0e4\">MHWRender::MDrawContext::kFilteredIgnoreLightLimit</a>;</div>\n\
<div class=\"line\">    <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ad3ef90830d42d36701abb67d53748f08\">MHWRender::MRenderer::needEvaluateAllLights</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> lightCount = drawContext.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a245ec3740263f7f3c076dd9c723141b7\">numberOfActiveLights</a>(considerAllSceneLights);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!lightCount)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> positions;</div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> position;</div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> direction;</div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> color;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> positionCount = 0;</div>\n\
<div class=\"line\">    position[0] = position[1] = position[2] = 0.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;lightCount; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a> *lightParam = drawContext.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( i, considerAllSceneLights );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (lightParam)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\tLight %d\\n\\t{\\n&quot;</span>, i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> params;</div>\n\
<div class=\"line\">            lightParam-&gt;<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aec00be694fc8d654f1f7a8ea823a7cea\">parameterList</a>(params);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> p=0; p&lt;params.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); p++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pname = params[p];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0\">MHWRender::MLightParameterInformation::ParameterType</a> ptype = lightParam-&gt;<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a5305e5705305b315f661ae2d13f0f38d\">parameterType</a>( pname );</div>\n\
<div class=\"line\">                <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> floatVals;</div>\n\
<div class=\"line\">                <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> intVals;</div>\n\
<div class=\"line\">                <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> matrixVal;</div>\n\
<div class=\"line\">                <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html\">MHWRender::MSamplerStateDesc</a> samplerDesc;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (ptype)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a8cfc0ab572a96edfc9db7c02f0d025d7\">MHWRender::MLightParameterInformation::kBoolean</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, intVals );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Bool[%d]\\n&quot;</span>, pname.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        intVals[0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0aa1acc5720dd4e85ceea5578a6cf14ae6\">MHWRender::MLightParameterInformation::kInteger</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, intVals );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Integer[%d]\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        intVals[0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a5686197bafb177bdc82550848416a1ad\">MHWRender::MLightParameterInformation::kFloat</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Float[%g]\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        floatVals[0]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a615a014b3454583f793180280757d285\">MHWRender::MLightParameterInformation::kFloat2</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Float[%g,%g]\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        floatVals[0], floatVals[1]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a2f329aadf08637405a63cee5369fd28d\">MHWRender::MLightParameterInformation::kFloat3</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Float3[%g,%g,%g]\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        floatVals[0], floatVals[1], floatVals[2]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0af21770dc86a3877076e2d58842291ca4\">MHWRender::MLightParameterInformation::kFloat4</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Float4[%g,%g,%g,%g]\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        floatVals[0], floatVals[1], floatVals[2], floatVals[3]);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a2242133aaee8fd15dbb632825bc4226e\">MHWRender::MLightParameterInformation::kFloat4x4Row</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, matrixVal );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Float4x4Row [%g,%g,%g,%g]\\n\\t\\t[%g,%g,%g,%g]\\n\\t\\t[%g,%g,%g,%g]\\n\\t\\t[%g,%g,%g,%g]\\n&quot;</span>,</div>\n\
<div class=\"line\">                        pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        matrixVal[0][0], matrixVal[0][1], matrixVal[0][2], matrixVal[0][3],</div>\n\
<div class=\"line\">                        matrixVal[1][0], matrixVal[1][1], matrixVal[1][2], matrixVal[1][3],</div>\n\
<div class=\"line\">                        matrixVal[2][0], matrixVal[2][1], matrixVal[2][2], matrixVal[2][3],</div>\n\
<div class=\"line\">                        matrixVal[3][0], matrixVal[3][1], matrixVal[3][2], matrixVal[3][3]</div>\n\
<div class=\"line\">                    );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a706b60512c7f5ba8200df461b672d905\">MHWRender::MLightParameterInformation::kFloat4x4Col</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, matrixVal );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight parameter %s. Float4x4Row\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a9f41a2c609a9a7104e4d0c869d8fd2e7\">MHWRender::MLightParameterInformation::kTexture2</a>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0ada96c2ae4db83bf803b3e75731d574b3\">MHWRender::MLightParameterInformation::kTextureCube</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Get shadow map as a resource handle directly in OpenGL</span></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">void</span> *handle = lightParam-&gt;<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aabc0d75c8960d98b6f8dbe31c777cf56\">getParameterTextureHandle</a>( pname );</div>\n\
<div class=\"line\">                        printf(<span class=\"stringliteral\">&quot;\\t\\tLight texture parameter %s. OpenGL texture id = %d\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                            *((<span class=\"keywordtype\">int</span> *)handle));</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Similar access for DX would look something like this:</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// (ID3D11ShaderResourceView *) lightParam-&gt;getParameterTextureHandle( pname );</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4d63980e4031b0fc366e623868b27ed0a754585b88bea58243b903b023e1594f0\">MHWRender::MLightParameterInformation::kSampler</a>:</div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, samplerDesc );</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\tLight sampler parameter %s. filter = %d\\n&quot;</span>, pname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                        samplerDesc.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html#a0280d6ae8821c595d0300d0e65ca5adf\">filter</a> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Do some discovery to map stock parameters to usable values</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// based on the semantic</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206\">MHWRender::MLightParameterInformation::StockParameterSemantic</a> semantic = lightParam-&gt;<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a37a7621bc6d9453902d95132fbbe2101\">parameterSemantic</a>( pname );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (semantic)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a0c0ef3ac9f1f01d67e3b735df26696e8\">MHWRender::MLightParameterInformation::kLightEnabled</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : light enabled\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a3305693a0baf5df5ae2efc000aa9c017\">MHWRender::MLightParameterInformation::kWorldPosition</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : world position\\n&quot;</span>);</div>\n\
<div class=\"line\">                    position += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a>( floatVals[0], floatVals[1], floatVals[2] );</div>\n\
<div class=\"line\">                    positionCount++;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4006a71da7e8283c7211624c49022eea\">MHWRender::MLightParameterInformation::kWorldDirection</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : world direction\\n&quot;</span>);</div>\n\
<div class=\"line\">                    direction = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>( floatVals[0], floatVals[1], floatVals[2] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae19f0601680f2872a292474ab3088b4f\">MHWRender::MLightParameterInformation::kIntensity</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : intensity\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MLightParameterInformation::kColor</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : color\\n&quot;</span>);</div>\n\
<div class=\"line\">                    color = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( floatVals[0], floatVals[1], floatVals[2] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a71980a3324f80d049d0f1bb3deac9592\">MHWRender::MLightParameterInformation::kEmitsDiffuse</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : emits-diffuse\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206afa56ff2c2d6fc43957c91593e86212af\">MHWRender::MLightParameterInformation::kEmitsSpecular</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : emits-specular\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a0be6585329840971e20d964386187935\">MHWRender::MLightParameterInformation::kDecayRate</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : decay rate\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae0f93e71d7dc59ce8212346baa5b1186\">MHWRender::MLightParameterInformation::kDropoff</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : drop-off\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a69b7eb958dd9600fc657a046524e2371\">MHWRender::MLightParameterInformation::kCosConeAngle</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : cosine cone angle\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a6053be989430b7fbd8b07f51528e8df4\">MHWRender::MLightParameterInformation::kShadowMap</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aa7100ad37872d44900b501f50dc70432\">MHWRender::MLightParameterInformation::kShadowSamp</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map sampler\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ace22882d5498baf50154a878321e7953\">MHWRender::MLightParameterInformation::kShadowBias</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map bias\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a81372e08dd4c84cb91436312913f6e3f\">MHWRender::MLightParameterInformation::kShadowMapSize</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map size\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae05ca22a699a25e0d2030a7a440ecbbe\">MHWRender::MLightParameterInformation::kShadowViewProj</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map view projection matrix\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ac1cd724f83701837aee2364b308a9ed2\">MHWRender::MLightParameterInformation::kShadowColor</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow color\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aca46ea808cc9f011b3f4f014ec9040f3\">MHWRender::MLightParameterInformation::kGlobalShadowOn</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : global shadows on \\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4852662e5cbf7f64d85133baa57386ab\">MHWRender::MLightParameterInformation::kShadowOn</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : local shadows on\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> <a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a9b8985681f9e0a44a57eff52ec2a618c\">MHWRender::MLightParameterInformation::kDepthRange</a>:</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : depth range\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Compute an average position</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (positionCount &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                position[0] /= (float)positionCount;</div>\n\
<div class=\"line\">                position[1] /= (float)positionCount;</div>\n\
<div class=\"line\">                position[2] /= (float)positionCount;</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;\\t\\tCompute average position [%g,%g,%g]\\n&quot;</span>, position[0],</div>\n\
<div class=\"line\">                    position[1], position[2]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Print by semantic</span></div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\tSemantic -&gt; Parameter Name Lookups\\n&quot;</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> paramNames;</div>\n\
<div class=\"line\">            lightParam-&gt;<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a0c0ef3ac9f1f01d67e3b735df26696e8\">MHWRender::MLightParameterInformation::kLightEnabled</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkLightEnabled -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> floatVals;</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a0c0ef3ac9f1f01d67e3b735df26696e8\">MHWRender::MLightParameterInformation::kLightEnabled</a>, floatVals);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (floatVals.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) printf(<span class=\"stringliteral\">&quot;(%f)&quot;</span>, floatVals[0]);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a3305693a0baf5df5ae2efc000aa9c017\">MHWRender::MLightParameterInformation::kWorldPosition</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkWorldPosition -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4006a71da7e8283c7211624c49022eea\">MHWRender::MLightParameterInformation::kWorldDirection</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkWorldDirection -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae19f0601680f2872a292474ab3088b4f\">MHWRender::MLightParameterInformation::kIntensity</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkIntensity -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MLightParameterInformation::kColor</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkColor -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a71980a3324f80d049d0f1bb3deac9592\">MHWRender::MLightParameterInformation::kEmitsDiffuse</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkEmitsDiffuse -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206afa56ff2c2d6fc43957c91593e86212af\">MHWRender::MLightParameterInformation::kEmitsSpecular</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkEmitsSpecular -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a0be6585329840971e20d964386187935\">MHWRender::MLightParameterInformation::kDecayRate</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkDecayRate -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae0f93e71d7dc59ce8212346baa5b1186\">MHWRender::MLightParameterInformation::kDropoff</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkDropoff -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a69b7eb958dd9600fc657a046524e2371\">MHWRender::MLightParameterInformation::kCosConeAngle</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkCosConeAngle -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(MHWRender::MLightParameterInformation::kIrradianceIn, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkIrradianceIn -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a6053be989430b7fbd8b07f51528e8df4\">MHWRender::MLightParameterInformation::kShadowMap</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowMap -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aa7100ad37872d44900b501f50dc70432\">MHWRender::MLightParameterInformation::kShadowSamp</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowSamp -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ace22882d5498baf50154a878321e7953\">MHWRender::MLightParameterInformation::kShadowBias</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowBias -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a81372e08dd4c84cb91436312913f6e3f\">MHWRender::MLightParameterInformation::kShadowMapSize</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowMapSize -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ac1cd724f83701837aee2364b308a9ed2\">MHWRender::MLightParameterInformation::kShadowColor</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowColor -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aca46ea808cc9f011b3f4f014ec9040f3\">MHWRender::MLightParameterInformation::kGlobalShadowOn</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkGlobalShadowOn -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4852662e5cbf7f64d85133baa57386ab\">MHWRender::MLightParameterInformation::kShadowOn</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowOn -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a00c252ce7a0daa2300cfc98fc3d12d1d\">parameterNames</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a9b8985681f9e0a44a57eff52ec2a618c\">MHWRender::MLightParameterInformation::kDepthRange</a>, paramNames);</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\t\\tkDepthRange -&gt; &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;%s &quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t}\\n&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Custom present target operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// There is not much in this operation except to override which targets</span></div>\n\
<div class=\"line\"><span class=\"comment\">// will be presented.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This differs from scene and quad operations which generally</span></div>\n\
<div class=\"line\"><span class=\"comment\">// use targets as the place to render into.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">viewRenderPresentTarget::viewRenderPresentTarget(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name)</div>\n\
<div class=\"line\">    : MPresentTarget( name )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mTargets = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">viewRenderPresentTarget::~viewRenderPresentTarget()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mTargets = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">viewRenderPresentTarget::setRenderTargets(<a name=\"_a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a> **targets)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mTargets = targets;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* <span class=\"keyword\">const</span>*</div>\n\
<div class=\"line\">viewRenderPresentTarget::targetOverrideList(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp;listSize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mTargets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        listSize = 2;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> &amp;mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Custom HUD operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> viewRenderHUDOperation::addUIDrawables( <a name=\"_a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html\">MHWRender::MUIDrawManager</a>&amp; drawManager2D, <span class=\"keyword\">const</span> <a name=\"_a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html\">MHWRender::MFrameContext</a>&amp; frameContext )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Start draw UI</span></div>\n\
<div class=\"line\">    drawManager2D.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9008ebfa63c02670625076230d77c3f9\">beginDrawable</a>();</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set font color</span></div>\n\
<div class=\"line\">    drawManager2D.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( 0.455f, 0.212f, 0.596f ) );</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set font size</span></div>\n\
<div class=\"line\">    drawManager2D.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#adfd0cfdd2cc781dba3987f64cb638a67\">setFontSize</a>( <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a88cff078229df1c0803a690e4826b5f1a7218bb69173cb216cb619effff1055ea\">MHWRender::MUIDrawManager::kSmallFontSize</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw renderer name</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> x=0, y=0, w=0, h=0;</div>\n\
<div class=\"line\">    frameContext.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#a7cd3b2dca6e4f8f4641b587bc642b08e\">getViewportDimensions</a>( x, y, w, h );</div>\n\
<div class=\"line\">    drawManager2D.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a334e4280e5ddd4653c69f9703b5dd3b4\">text</a>( <a name=\"_a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(w*0.5f, h*0.91f), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Sample VP2 Renderer Override&quot;</span>), <a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#aa56f1a82069b5feeadbb4591cb3e474fae006401ce2987367501dd62b12f1396d\">MHWRender::MUIDrawManager::kCenter</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw viewport information</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> viewportInfoText( <span class=\"stringliteral\">&quot;Viewport information: x= &quot;</span> );</div>\n\
<div class=\"line\">    viewportInfoText += x;</div>\n\
<div class=\"line\">    viewportInfoText += <span class=\"stringliteral\">&quot;, y= &quot;</span>;</div>\n\
<div class=\"line\">    viewportInfoText += y;</div>\n\
<div class=\"line\">    viewportInfoText += <span class=\"stringliteral\">&quot;, w= &quot;</span>;</div>\n\
<div class=\"line\">    viewportInfoText += w;</div>\n\
<div class=\"line\">    viewportInfoText += <span class=\"stringliteral\">&quot;, h= &quot;</span>;</div>\n\
<div class=\"line\">    viewportInfoText += h;</div>\n\
<div class=\"line\">    drawManager2D.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a334e4280e5ddd4653c69f9703b5dd3b4\">text</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(w*0.5f, h*0.885f), viewportInfoText, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#aa56f1a82069b5feeadbb4591cb3e474fae006401ce2987367501dd62b12f1396d\">MHWRender::MUIDrawManager::kCenter</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// End draw UI</span></div>\n\
<div class=\"line\">    drawManager2D.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a78c343c25a05be7e46dd4b7ebab82ff6\">endDrawable</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Custom quad operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Instances of this class are used to provide different</span></div>\n\
<div class=\"line\"><span class=\"comment\">// shaders to be applied to a full screen quad.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">viewRenderQuadRender::viewRenderQuadRender(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name)</div>\n\
<div class=\"line\">    : MQuadRender( name )</div>\n\
<div class=\"line\">    , mShaderInstance(NULL)</div>\n\
<div class=\"line\">    , mShader(kEffectNone)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mTargets = NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">viewRenderQuadRender::~viewRenderQuadRender()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mTargets = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mShaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(mShaderInstance);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        mShaderInstance = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Return the appropriate shader instance based on the what</span></div>\n\
<div class=\"line\"><span class=\"comment\">    we want the quad operation to perform</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *</div>\n\
<div class=\"line\">viewRenderQuadRender::shader()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a new shader instance for this quad render instance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mShaderInstance == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Note in the following code that we are not specifying the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// full file name, but relying on the getEffectFileShader() logic</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// to determine the correct file name extension based on the shading language</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// which is appropriate for the drawing API (DirectX or OpenGL).</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Refer to the documentation for this method to review how the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// final name on disk is derived.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// The second argument here is the technique. If desired</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// and effect on disk can hold different techniques. For each unique</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// effect + technique a different shader instance is created.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (mShader)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kPre_MandelBrot:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;MandelBrot&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kPost_EffectMonochrome:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;FilterMonochrome&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kPost_EffectEdgeDetect:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;FilterEdgeDetect&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kPost_EffectInvert:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;Invert&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kScene_Threshold:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;Threshold&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kScene_BlurHoriz:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;Blur&quot;</span>, <span class=\"stringliteral\">&quot;BlurHoriz&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kScene_BlurVert:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;Blur&quot;</span>, <span class=\"stringliteral\">&quot;BlurVert&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> kSceneBlur_Blend:</div>\n\
<div class=\"line\">                    mShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>( <span class=\"stringliteral\">&quot;Blend&quot;</span>, <span class=\"stringliteral\">&quot;Add&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set parameters on the shader instance.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is where the input render targets can be specified by binding</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a render target to the appropriate parameter on the shader instance.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mShaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (mShader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPre_MandelBrot:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Example of a simple float parameter setting.</span></div>\n\
<div class=\"line\">                <a name=\"_a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gIterate&quot;</span>, 50);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;Could not change mandelbrot parameter\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPost_EffectInvert:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the input texture parameter &#39;gInputTex&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a given color target</span></div>\n\
<div class=\"line\">                <a name=\"_a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment;</div>\n\
<div class=\"line\">                assignment.<a name=\"a78\"></a>target = mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gInputTex&quot;</span>, assignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on invert shader\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kScene_Threshold:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a given color target</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment;</div>\n\
<div class=\"line\">                assignment.target = mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, assignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on threshold shader\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gBrightThreshold&quot;</span>, 0.7f );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kScene_BlurHoriz:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a given color target</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment;</div>\n\
<div class=\"line\">                assignment.target = mTargets[kMyBlurTarget];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, assignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on hblur shader\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kScene_BlurVert:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a given color target</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment;</div>\n\
<div class=\"line\">                assignment.target = mTargets[kMyBlurTarget];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, assignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on vblur shader\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kSceneBlur_Blend:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the first input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// one color target.</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment;</div>\n\
<div class=\"line\">                assignment.target = mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, assignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the second input texture parameter &#39;gSourceTex2&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a second color target.</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment2;</div>\n\
<div class=\"line\">                assignment2.target = mTargets[kMyBlurTarget];</div>\n\
<div class=\"line\">                status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gSourceTex2&quot;</span>, assignment2);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gBlendSrc&quot;</span>, 0.3f );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPost_EffectMonochrome:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the input texture parameter &#39;gInputTex&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a given color target</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment;</div>\n\
<div class=\"line\">                assignment.target = mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gInputTex&quot;</span>, assignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on monochrome shader\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kPost_EffectEdgeDetect:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the input texture parameter &#39;gInputTex&#39; to use</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// a given color target</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_render_target_assignment.html\">MHWRender::MRenderTargetAssignment</a> assignment;</div>\n\
<div class=\"line\">                assignment.target = mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gInputTex&quot;</span>, assignment);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on edge detect shader\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gThickness&quot;</span>, 1.0f );</div>\n\
<div class=\"line\">                mShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;gThreshold&quot;</span>, 0.1f );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mShaderInstance;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Based on which shader is being used for the quad render</span></div>\n\
<div class=\"line\"><span class=\"comment\">    we want to render to different targets. For the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    threshold and two blur shaders the temporary &#39;blur&#39;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    target is used. Otherwise rendering should be directed</span></div>\n\
<div class=\"line\"><span class=\"comment\">    to the custom color and depth target.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* <span class=\"keyword\">const</span>*</div>\n\
<div class=\"line\">viewRenderQuadRender::targetOverrideList(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp;listSize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mTargets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Render to blur target for blur operations</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mShader == kScene_Threshold ||</div>\n\
<div class=\"line\">            mShader == kScene_BlurHoriz ||</div>\n\
<div class=\"line\">            mShader == kScene_BlurVert )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            listSize = 1; <span class=\"comment\">// Only to color target</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> &amp;mTargets[kMyBlurTarget];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// Render to final otherwise</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            listSize = 2; <span class=\"comment\">// 2nd target is depth</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> &amp;mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Set the clear override to use.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a name=\"_a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html\">MHWRender::MClearOperation</a> &amp;</div>\n\
<div class=\"line\">viewRenderQuadRender::clearOperation()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Want to clear everything since the quad render is the first operation.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mShader == kPre_MandelBrot)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mClearOperation.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a0eb426378a3484ea204ea50ad2daa547\">setClearGradient</a>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        mClearOperation.setMask( (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>) <a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a55b92d9e088b6065ff2e762739b064f9aa9836daa6e01048fcf03e7023c0654d2\">MHWRender::MClearOperation::kClearAll</a> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// This is a post processing operation, so we don&#39;t want to clear anything</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mClearOperation.setClearGradient( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        mClearOperation.setMask( (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>) <a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a55b92d9e088b6065ff2e762739b064f9aaae58611b37c34f59ffa59bed613ca20\">MHWRender::MClearOperation::kClearNone</a> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mClearOperation;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Simple scene operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Example of just overriding a few options on the scene render.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">simpleViewRenderSceneRender::simpleViewRenderSceneRender(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name)</div>\n\
<div class=\"line\">    : MSceneRender( name )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// 100 % of target size</span></div>\n\
<div class=\"line\">    mViewRectangle[0] = 0.0f;</div>\n\
<div class=\"line\">    mViewRectangle[1] = 0.0f;</div>\n\
<div class=\"line\">    mViewRectangle[2] = 1.0f;</div>\n\
<div class=\"line\">    mViewRectangle[3] = 1.0f;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> *</div>\n\
<div class=\"line\">simpleViewRenderSceneRender::viewportRectangleOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Enable this flag to use viewport sizing</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> testRectangleSize = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (testRectangleSize)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// 1/3 to the right and 10 % up. 1/2 the target size.</span></div>\n\
<div class=\"line\">        mViewRectangle[0] = 0.33f;</div>\n\
<div class=\"line\">        mViewRectangle[1] = 0.10f;</div>\n\
<div class=\"line\">        mViewRectangle[2] = 0.50f;</div>\n\
<div class=\"line\">        mViewRectangle[3] = 0.50f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> &amp;mViewRectangle;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html\">MHWRender::MClearOperation</a> &amp;</div>\n\
<div class=\"line\">simpleViewRenderSceneRender::clearOperation()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Override to clear to these gradient colors</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> val1[4] = { 0.0f, 0.2f, 0.8f, 1.0f };</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> val2[4] = { 0.5f, 0.4f, 0.1f, 1.0f };</div>\n\
<div class=\"line\">    mClearOperation.<a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#ac1c51886d1696805576d1356f44d2668\">setClearColor</a>( val1 );</div>\n\
<div class=\"line\">    mClearOperation.setClearColor2( val2 );</div>\n\
<div class=\"line\">    mClearOperation.setClearGradient( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mClearOperation;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Custom scene operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Some example things that can be done with the operation are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// included here but disabled. They are here as examples only</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and not all are used for the overrall render loop logic.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">viewRenderSceneRender::viewRenderSceneRender(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a952370b3954e51c4f19349a9a440d471\">MHWRender::MSceneRender::MSceneFilterOption</a> sceneFilter,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> clearMask)</div>\n\
<div class=\"line\">: MSceneRender(name)</div>\n\
<div class=\"line\">, mSceneFilter(sceneFilter)</div>\n\
<div class=\"line\">, mClearMask(clearMask)</div>\n\
<div class=\"line\">, mEnableSRGBWrite(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mPrevDisplayStyle = <a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1b68f8823b8e275a4b548fdd27263e8aa620925ec70781a5f5de890d906660d24\">M3dView::kGouraudShaded</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 100 % of target size</span></div>\n\
<div class=\"line\">    mViewRectangle[0] = 0.0f;</div>\n\
<div class=\"line\">    mViewRectangle[1] = 0.0f;</div>\n\
<div class=\"line\">    mViewRectangle[2] = 1.0f;</div>\n\
<div class=\"line\">    mViewRectangle[3] = 1.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mTargets = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mShaderOverride = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mUseShaderOverride = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mUseStockShaderOverride = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mAttachPrePostShaderCallback = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mUseShadowShader = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mOverrideDisplayMode = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    mOverrideDisplayModeFlatActive = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mOverrideLightingMode = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mOverrideCullingMode = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mOverrrideM3dViewDisplayMode = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mDebugTargetResourceHandle = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mFilterDrawNothing = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    mFilterDrawSelected = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">viewRenderSceneRender::~viewRenderSceneRender()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mTargets = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mShaderOverride)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(mShaderOverride);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        mShaderOverride = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Pre UI draw</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> viewRenderSceneRender::addPreUIDrawables( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html\">MHWRender::MUIDrawManager</a>&amp; drawManager, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html\">MHWRender::MFrameContext</a>&amp; frameContext  )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9008ebfa63c02670625076230d77c3f9\">beginDrawable</a>();</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( 0.1f, 0.5f, 0.95f ) );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#adfd0cfdd2cc781dba3987f64cb638a67\">setFontSize</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a88cff078229df1c0803a690e4826b5f1a7218bb69173cb216cb619effff1055ea\">MHWRender::MUIDrawManager::kSmallFontSize</a> );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a334e4280e5ddd4653c69f9703b5dd3b4\">text</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( -2, 2, -2 ), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Pre UI draw test in Scene operation&quot;</span>), <a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#aa56f1a82069b5feeadbb4591cb3e474fa28e0f004d9fc43a042d60286f37b6889\">MHWRender::MUIDrawManager::kRight</a> );</div>\n\
<div class=\"line\">    drawManager.<a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#abe48ac82aa2ede6d0efd3c9cfadb068c\">line</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( -2, 0, -2 ), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( -2, 2, -2 ) );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( 1.0f, 1.0f, 1.0f ) );</div>\n\
<div class=\"line\">    drawManager.<a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a3c2219cf077b63cbf547d305ba58fe29\">sphere</a>(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( -2, 2, -2 ), 0.8, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( 0.1f, 0.5f, 0.95f, 0.4f ) );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a3c2219cf077b63cbf547d305ba58fe29\">sphere</a>(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( -2, 2, -2 ), 0.8, <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a78c343c25a05be7e46dd4b7ebab82ff6\">endDrawable</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Post UI draw</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> viewRenderSceneRender::addPostUIDrawables( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html\">MHWRender::MUIDrawManager</a>&amp; drawManager, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html\">MHWRender::MFrameContext</a>&amp; frameContext  )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9008ebfa63c02670625076230d77c3f9\">beginDrawable</a>();</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( 0.05f, 0.95f, 0.34f ) );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#adfd0cfdd2cc781dba3987f64cb638a67\">setFontSize</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a88cff078229df1c0803a690e4826b5f1a7218bb69173cb216cb619effff1055ea\">MHWRender::MUIDrawManager::kSmallFontSize</a> );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a334e4280e5ddd4653c69f9703b5dd3b4\">text</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( 2, 2, 2 ), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Post UI draw test in Scene operation&quot;</span>), <a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#aa56f1a82069b5feeadbb4591cb3e474faa9953673f54fd9f854de23739ebe2f7a\">MHWRender::MUIDrawManager::kLeft</a> );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#abe48ac82aa2ede6d0efd3c9cfadb068c\">line</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( 2, 0, 2), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( 2, 2, 2 ) );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( 1.0f, 1.0f, 1.0f ) );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a3c2219cf077b63cbf547d305ba58fe29\">sphere</a>(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( 2, 2, 2 ), 0.8, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>( 0.05f, 0.95f, 0.34f, 0.4f ) );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a3c2219cf077b63cbf547d305ba58fe29\">sphere</a>(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>( 2, 2, 2 ), 0.8, <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    drawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a78c343c25a05be7e46dd4b7ebab82ff6\">endDrawable</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Keep a reference of per-frame render targets on the operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">viewRenderSceneRender::setRenderTargets(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a> **targets)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mTargets = targets;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Offscreen target override.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    For this render loop the scene render will always render to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    an offscreen color and depth target (listSize returned = 2).</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* <span class=\"keyword\">const</span>*</div>\n\
<div class=\"line\">viewRenderSceneRender::targetOverrideList(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp;listSize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mTargets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        listSize = 2;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> &amp;mTargets[kMyColorTarget];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Indicate whether to enable SRGB write</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> viewRenderSceneRender::enableSRGBWrite()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mEnableSRGBWrite;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Sample of accessing the view to get a camera path and using that as</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the camera override. Other camera paths or direct matrix setting</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_camera_override.html\">MHWRender::MCameraOverride</a> *</div>\n\
<div class=\"line\">viewRenderSceneRender::cameraOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> mView;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPanelName.length() &amp;&amp;</div>\n\
<div class=\"line\">        (<a name=\"a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(mPanelName, mView) == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mView.<a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a5e6ea41ec1bab5ed980b2ddffe398a73\">getCamera</a>( mCameraOverride.mCameraPath );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> &amp;mCameraOverride;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;\\t%s : Query custom scene camera override -- no override set\\n&quot;</span>, mName.asChar());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Depending on what is required either the scene filter will return whether</span></div>\n\
<div class=\"line\"><span class=\"comment\">    to draw the opaque, transparent of non-shaded (UI) items.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a952370b3954e51c4f19349a9a440d471\">MHWRender::MSceneRender::MSceneFilterOption</a></div>\n\
<div class=\"line\">viewRenderSceneRender::renderFilterOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mSceneFilter;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example display mode override. In this example we override so that</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the scene will always be drawn in &quot;shaded&quot; or &quot;flat shade selected&quot; mode </span></div>\n\
<div class=\"line\"><span class=\"comment\">    and in bounding box mode (bounding boxes will also be drawn). This is fact not a</span></div>\n\
<div class=\"line\"><span class=\"comment\">    &#39;regular&#39; viewport display mode available from the viewport menus.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9\">MHWRender::MSceneRender::MDisplayMode</a></div>\n\
<div class=\"line\">viewRenderSceneRender::displayModeOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mOverrideDisplayMode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mOverrideDisplayModeFlatActive)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9\">MHWRender::MSceneRender::MDisplayMode</a>)</div>\n\
<div class=\"line\">                ( <a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9a74c3784e844e54dab272e794fa6bcaa9\">MHWRender::MSceneRender::kBoundingBox</a> |</div>\n\
<div class=\"line\">                <a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9a7914d385424ca72fdf84654b735a5a50\">MHWRender::MSceneRender::kFlatShaded</a> | </div>\n\
<div class=\"line\">                <a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9aafc1312afe4b53aa0b4a0b818c377bfc\">MHWRender::MSceneRender::kShadeActiveOnly</a>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9\">MHWRender::MSceneRender::MDisplayMode</a>)</div>\n\
<div class=\"line\">                ( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9a74c3784e844e54dab272e794fa6bcaa9\">MHWRender::MSceneRender::kBoundingBox</a> |</div>\n\
<div class=\"line\">                <a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9a3ba47eb2caff6eea24d37de5f572f769\">MHWRender::MSceneRender::kShaded</a> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#ab8a13d92b9d32fb0cc8309b66e0f05b9a8eed6a4910ac67733afd323f5984e704\">MHWRender::MSceneRender::kNoDisplayModeOverride</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example Lighting mode override. In this example</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the override would set to draw with only selected lights.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#afbcfbcd49fe6e70be75e490e66514aca\">MHWRender::MSceneRender::MLightingMode</a></div>\n\
<div class=\"line\">viewRenderSceneRender::lightModeOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mOverrideLightingMode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#afbcfbcd49fe6e70be75e490e66514acaa02cb81a85144133d15b64cd88aa4a0bd\">MHWRender::MSceneRender::kSelectedLights</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#afbcfbcd49fe6e70be75e490e66514acaac65255c55642ae33198a4b846df987a7\">MHWRender::MSceneRender::kNoLightingModeOverride</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example culling mode override. When enable</span></div>\n\
<div class=\"line\"><span class=\"comment\">    this example would force to cull backfacing</span></div>\n\
<div class=\"line\"><span class=\"comment\">    polygons.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a301659a0527d8e4835886ac965474642\">MHWRender::MSceneRender::MCullingOption</a></div>\n\
<div class=\"line\">viewRenderSceneRender::cullingOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mOverrideCullingMode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a301659a0527d8e4835886ac965474642aa7ce11c9649f5b54decec02c4e72ad13\">MHWRender::MSceneRender::kCullBackFaces</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a301659a0527d8e4835886ac965474642a0af7744095fabe90fbbf857a35cdf3e0\">MHWRender::MSceneRender::kNoCullingOverride</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Per scene operation pre-render.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    In this example the display style for the given panel / view</span></div>\n\
<div class=\"line\"><span class=\"comment\">    M3dView is set to be consistent with the draw override</span></div>\n\
<div class=\"line\"><span class=\"comment\">    for the scene operation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">viewRenderSceneRender::preRender()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mOverrrideM3dViewDisplayMode )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> mView;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mPanelName.length() &amp;&amp;</div>\n\
<div class=\"line\">            (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(mPanelName, mView) == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mPrevDisplayStyle = mView.<a name=\"a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#afb7d316c985d928b3095eaf25ba818a3\">displayStyle</a>();</div>\n\
<div class=\"line\">            mView.<a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a22744817eafc94f0cb55c0cc9ac7188d\">setDisplayStyle</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1b68f8823b8e275a4b548fdd27263e8aa620925ec70781a5f5de890d906660d24\">M3dView::kGouraudShaded</a> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Post-render example.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    In this example we can debug the resource handle of the active render target</span></div>\n\
<div class=\"line\"><span class=\"comment\">    after this operation. The matching for for the pre-render M3dView override</span></div>\n\
<div class=\"line\"><span class=\"comment\">    also resides here to restore the M3dView state.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">viewRenderSceneRender::postRender()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mDebugTargetResourceHandle)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the id&#39;s for the textures which are used as the color and</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// depth render targets. These id&#39;s could arbitrarily change</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so they should not be held on to.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> * colorResourceHandle = (mTargets[kMyColorTarget]) ? mTargets[kMyColorTarget]-&gt;resourceHandle() : NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (colorResourceHandle)</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t - Color target resource handle = %d\\n&quot;</span>, *( (<span class=\"keywordtype\">int</span> *)colorResourceHandle) );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> * depthStencilResourceHandle = (mTargets[kMyDepthTarget]) ? mTargets[kMyDepthTarget]-&gt;resourceHandle() : NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (depthStencilResourceHandle)</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t - Depth target resource handle = %d\\n&quot;</span>, *( (<span class=\"keywordtype\">int</span> *)depthStencilResourceHandle) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Example of set the display style for the given panel / view</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// via M3dView vs using the scene operation override</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mOverrrideM3dViewDisplayMode )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> mView;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mPanelName.length() &amp;&amp;</div>\n\
<div class=\"line\">            (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6f8dcac6993b14738fc6259cfd50a3b8\">M3dView::getM3dViewFromModelPanel</a>(mPanelName, mView) == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Simple example of restoring display style</span></div>\n\
<div class=\"line\">            mView.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a22744817eafc94f0cb55c0cc9ac7188d\">setDisplayStyle</a>( mPrevDisplayStyle );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Object type exclusions example.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    In this example we want to hide cameras and the grid (ground plane)</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">MUint64</div>\n\
<div class=\"line\">viewRenderSceneRender::getObjectTypeExclusions()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Example of hiding by type.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#a6ae65cd8011721dd567e086ab2fb9bbb\">MHWRender::MFrameContext::kExcludeCameras</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example scene override logic.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    In this example, the scene to draw can be filtered by a returned</span></div>\n\
<div class=\"line\"><span class=\"comment\">    selection list. If an empty selection list is returned then we can</span></div>\n\
<div class=\"line\"><span class=\"comment\">    essentially disable scene drawing. The other option coded here</span></div>\n\
<div class=\"line\"><span class=\"comment\">    is to look at the current active selection list and return that.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    This results in only rendering what has been selected by the user</span></div>\n\
<div class=\"line\"><span class=\"comment\">    when this operation is executed.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    If this filtering is required across more than one operation it</span></div>\n\
<div class=\"line\"><span class=\"comment\">    is better to precompute these values in the setup phase of</span></div>\n\
<div class=\"line\"><span class=\"comment\">    override and cache the information per operation as required.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> *</div>\n\
<div class=\"line\">viewRenderSceneRender::objectSetOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mSelectionList.<a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If you set this to true you can make the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// scene draw draw no part of the scene, only the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// additional UI elements</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mFilterDrawNothing)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> &amp;mSelectionList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Turn this on to query the active list and only</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// use that for drawing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mFilterDrawSelected)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selList;</div>\n\
<div class=\"line\">        <a name=\"a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( selList );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (selList.<a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> iter( selList );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( ; !iter.isDone(); iter.next() )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> item;</div>\n\
<div class=\"line\">                <a name=\"_a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> component;</div>\n\
<div class=\"line\">                iter.getDagPath( item, component );</div>\n\
<div class=\"line\">                <span class=\"comment\">/* MStatus sStatus = */</span> mSelectionList.add( item, component );</div>\n\
<div class=\"line\">                <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">                if (sStatus == MStatus::kSuccess)</span></div>\n\
<div class=\"line\"><span class=\"comment\">                {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                printf(&quot;Add selection item to other list\\n&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">                }</span></div>\n\
<div class=\"line\"><span class=\"comment\">                else if (sStatus == MStatus::kInvalidParameter)</span></div>\n\
<div class=\"line\"><span class=\"comment\">                {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                printf(&quot;Can&#39;t Add invalid selection item to other list\\n&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">                }</span></div>\n\
<div class=\"line\"><span class=\"comment\">                else</span></div>\n\
<div class=\"line\"><span class=\"comment\">                printf(&quot;Can&#39;t Add selection item to other list\\n&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">                */</span></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mSelectionList.length())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t%s : Filtering render with active object list\\n&quot;</span>,</div>\n\
<div class=\"line\">                mName.asChar());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> &amp;mSelectionList;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Custom clear override.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    Depending on whether we are drawing the &quot;UI&quot; or &quot;non-UI&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    parts of the scene we will clear different channels.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Color is never cleared since there is a separate operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    to clear the background.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html\">MHWRender::MClearOperation</a> &amp;</div>\n\
<div class=\"line\">viewRenderSceneRender::clearOperation()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (    mSceneFilter &amp;</div>\n\
<div class=\"line\">        (   <a name=\"a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a952370b3954e51c4f19349a9a440d471aa495b7b7881d7dacc1e6f3191022c9f1\">MHWRender::MSceneRender::kRenderOpaqueShadedItems</a> | </div>\n\
<div class=\"line\">            <a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a952370b3954e51c4f19349a9a440d471ae0c745e0f7e63027d292bc1f7c2322cf\">MHWRender::MSceneRender::kRenderTransparentShadedItems</a> |</div>\n\
<div class=\"line\">            MHWRender::MSceneRender::kRenderUIItems) ){</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mClearOperation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_clear_operation.html#a0eb426378a3484ea204ea50ad2daa547\">setClearGradient</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// Force a gradient clear with some sample colors.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> val1[4] = { 0.0f, 0.2f, 0.8f, 1.0f };</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> val2[4] = { 0.5f, 0.4f, 0.1f, 1.0f };</div>\n\
<div class=\"line\">        mClearOperation.setClearColor(val1);</div>\n\
<div class=\"line\">        mClearOperation.setClearColor2(val2);</div>\n\
<div class=\"line\">        mClearOperation.setClearGradient(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mClearOperation.setMask(mClearMask);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mClearOperation;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Return shadow override. For the UI pass we don&#39;t want to compute shadows.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>* viewRenderSceneRender::shadowEnableOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( (mSceneFilter &amp; <a name=\"a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a952370b3954e51c4f19349a9a440d471a223455dc264231885d7460f8ab0841ab\">MHWRender::MSceneRender::kRenderShadedItems</a>) == 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> noShadowsForUI = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> &amp;noShadowsForUI; <span class=\"comment\">// UI doesn&#39;t need shadows</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For all other cases, just use whatever is currently set</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Shader override helpers:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// As part of a shader override it is possible to attach callbacks which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// are invoked when the shader is to be used. The following are some examples</span></div>\n\
<div class=\"line\"><span class=\"comment\">// of what could be performed.</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example utility used by a callback to:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    1. Print out the shader parameters for a give MShaderInsrtance</span></div>\n\
<div class=\"line\"><span class=\"comment\">    2. Examine the list of render items which will be rendered with this MShaderInstance</span></div>\n\
<div class=\"line\"><span class=\"comment\">    3. Examine the pass context and print out information in the context.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> callbackDataPrint(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *shaderInstance)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (shaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> paramNames;</div>\n\
<div class=\"line\">        shaderInstance-&gt;<a name=\"a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aec00be694fc8d654f1f7a8ea823a7cea\">parameterList</a>( paramNames );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> paramCount = paramNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;\\tSHADER: # of parameters = %d\\n&quot;</span>, paramCount );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;paramCount; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\t\\tPARAM[%s]\\n&quot;</span>, paramNames[i].asChar());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numItems = renderItemList.<a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* item = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;numItems; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        item = renderItemList.<a name=\"a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a82ed5d7ae96a2890f5f54f697bb0bab0\">itemAt</a>(i);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path = item-&gt;<a name=\"a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a9452c2cfed46b5c1977568eb5b225930\">sourceDagPath</a>();</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;\\tRENDER ITEM: &#39;%s&#39; -- SOURCE: &#39;%s&#39;\\n&quot;</span>, item-&gt;<a name=\"a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#aca2cba4630391c78dcf1a828986160da\">name</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), path.<a name=\"a122\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a123\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a> &amp; passCtx = context.<a name=\"a124\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; passId = passCtx.<a name=\"a125\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#ae90d4b4c8175e81800d8eb16ee126e1f\">passIdentifier</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; passSem = passCtx.<a name=\"a126\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;PASS ID[%s], PASS SEMANTICS[&quot;</span>, passId.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;passSem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot; %s&quot;</span>, passSem[i].asChar());</div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example utility used by callback to bind lighting information to a shader instance.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    This callback works specific with the MayaBlinnDirectionLightShadow shader example.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    It will explicitly binding lighting and shadowing information to the shader instance.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> shaderOverrideCallbackBindLightingInfo(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; drawContext,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *shaderInstance)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!shaderInstance)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Defaults in case there are no lights</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> globalShadowsOn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> localShadowsOn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> direction(0.0f, 0.0f, 1.0f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> lightIntensity = 0.0f; <span class=\"comment\">// If no lights then black out the light</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> lightColor[3] = { 0.0f, 0.0f, 0.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Scan to find the first light that has a direction component in it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It&#39;s possible we find no lights.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2\">MHWRender::MDrawContext::LightFilter</a> considerAllSceneLights = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2a8d9a85c34398a46f44834be0b4fec0e4\">MHWRender::MDrawContext::kFilteredIgnoreLightLimit</a>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ad3ef90830d42d36701abb67d53748f08\">MHWRender::MRenderer::needEvaluateAllLights</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> lightCount = drawContext.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a245ec3740263f7f3c076dd9c723141b7\">numberOfActiveLights</a>(considerAllSceneLights);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lightCount)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> floatVals;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> intVals;</div>\n\
<div class=\"line\">        <a name=\"_a127\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> shadowResource;</div>\n\
<div class=\"line\">        shadowResource.<a name=\"a128\"></a>texture = NULL;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html\">MHWRender::MSamplerStateDesc</a> samplerDesc;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> shadowViewProj;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> shadowColor[3] = { 0.0f, 0.0f, 0.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> foundDirectional = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i=0; i&lt;lightCount &amp;&amp; !foundDirectional ; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            globalShadowsOn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            localShadowsOn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            direction = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>(0.0f, 0.0f, 1.0f);</div>\n\
<div class=\"line\">            lightIntensity = 0.0f;</div>\n\
<div class=\"line\">            lightColor[0] = lightColor[1] = lightColor[2] = 0.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a> *lightParam = drawContext.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( i, considerAllSceneLights );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lightParam)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> params;</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aec00be694fc8d654f1f7a8ea823a7cea\">parameterList</a>(params);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> p=0; p&lt;params.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); p++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pname = params[p];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206\">MHWRender::MLightParameterInformation::StockParameterSemantic</a> semantic = lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a37a7621bc6d9453902d95132fbbe2101\">parameterSemantic</a>( pname );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span> (semantic)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Pick a few light parameters to pick up as an example</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4006a71da7e8283c7211624c49022eea\">MHWRender::MLightParameterInformation::kWorldDirection</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                        direction = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>( floatVals[0], floatVals[1], floatVals[2] );</div>\n\
<div class=\"line\">                        foundDirectional = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae19f0601680f2872a292474ab3088b4f\">MHWRender::MLightParameterInformation::kIntensity</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                        lightIntensity = floatVals[0];</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MLightParameterInformation::kColor</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                        lightColor[0] = floatVals[0];</div>\n\
<div class=\"line\">                        lightColor[1] = floatVals[1];</div>\n\
<div class=\"line\">                        lightColor[2] = floatVals[2];</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Pick up shadowing parameters</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aca46ea808cc9f011b3f4f014ec9040f3\">MHWRender::MLightParameterInformation::kGlobalShadowOn</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, intVals );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (intVals.<a name=\"a129\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">                            globalShadowsOn = (intVals[0] != 0) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4852662e5cbf7f64d85133baa57386ab\">MHWRender::MLightParameterInformation::kShadowOn</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, intVals );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (intVals.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">                            localShadowsOn = (intVals[0] != 0) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae05ca22a699a25e0d2030a7a440ecbbe\">MHWRender::MLightParameterInformation::kShadowViewProj</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, shadowViewProj);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a6053be989430b7fbd8b07f51528e8df4\">MHWRender::MLightParameterInformation::kShadowMap</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, shadowResource );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aa7100ad37872d44900b501f50dc70432\">MHWRender::MLightParameterInformation::kShadowSamp</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, samplerDesc );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ac1cd724f83701837aee2364b308a9ed2\">MHWRender::MLightParameterInformation::kShadowColor</a>:</div>\n\
<div class=\"line\">                        lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                        shadowColor[0] = floatVals[0];</div>\n\
<div class=\"line\">                        shadowColor[1] = floatVals[1];</div>\n\
<div class=\"line\">                        shadowColor[2] = floatVals[2];</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                } <span class=\"comment\">/* for params */</span></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set shadow map and projection if shadows are turned on.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (foundDirectional &amp;&amp; globalShadowsOn &amp;&amp; localShadowsOn &amp;&amp; shadowResource.texture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span> *resourceHandle = shadowResource.texture-&gt;<a name=\"a130\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html#ad7bcab0d1707ef0da22fc72ada62c40e\">resourceHandle</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (resourceHandle)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> debugShadowBindings = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    status  = shaderInstance-&gt;<a name=\"a131\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaShadowPCF1_shadowMap&quot;</span>, shadowResource );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; debugShadowBindings)</div>\n\
<div class=\"line\">                        printf(<span class=\"stringliteral\">&quot;Bound shadow map to shader param mayaShadowPCF1_shadowMap\\n&quot;</span>);</div>\n\
<div class=\"line\">                    status  = shaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaShadowPCF1_shadowViewProj&quot;</span>, shadowViewProj );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; debugShadowBindings)</div>\n\
<div class=\"line\">                        printf(<span class=\"stringliteral\">&quot;Bound shadow map transform to shader param mayaShadowPCF1_shadowViewProj\\n&quot;</span>);</div>\n\
<div class=\"line\">                    status  = shaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaShadowPCF1_shadowColor&quot;</span>, &amp;shadowColor[0] );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; debugShadowBindings)</div>\n\
<div class=\"line\">                        printf(<span class=\"stringliteral\">&quot;Bound shadow map color to shader param mayaShadowPCF1_shadowColor\\n&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a132\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureManager = renderer-&gt;<a name=\"a133\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (textureManager)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        textureManager-&gt;<a name=\"a134\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(shadowResource.texture);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                shadowResource.texture = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set up parameters which should be set regardless of light existence.</span></div>\n\
<div class=\"line\">    status = shaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaDirectionalLight_direction&quot;</span>, &amp;( direction[0] ));</div>\n\
<div class=\"line\">    status = shaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaDirectionalLight_intensity&quot;</span>, lightIntensity );</div>\n\
<div class=\"line\">    status = shaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaDirectionalLight_color&quot;</span>, &amp;( lightColor[0] ));</div>\n\
<div class=\"line\">    status = shaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaShadowPCF1_mayaGlobalShadowOn&quot;</span>, globalShadowsOn);</div>\n\
<div class=\"line\">    status = shaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;mayaShadowPCF1_mayaShadowOn&quot;</span>, localShadowsOn);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example pre-render callback attached to a shader instance</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> shaderOverridePreDrawCallback(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *shaderInstance)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;PRE-draw callback triggered for render item list with data:\\n&quot;</span>);</div>\n\
<div class=\"line\">    callbackDataPrint(context, renderItemList, shaderInstance);</div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;\\tLIGHTS\\n&quot;</span>);</div>\n\
<div class=\"line\">    viewRenderOverrideUtilities::printDrawContextLightInfo( context );</div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example post-render callback attached to a shader instance</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> shaderOverridePostDrawCallback(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *shaderInstance)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;POST-draw callback triggered for render item list with data:\\n&quot;</span>);</div>\n\
<div class=\"line\">    callbackDataPrint(context, renderItemList, shaderInstance);</div>\n\
<div class=\"line\">    printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Example of setting a shader override.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    Some variations are presented based on some member flags:</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Use a stock shader or not</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Attach pre and post shader instance callbacks</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Use a shadow shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>*</div>\n\
<div class=\"line\">viewRenderSceneRender::shaderOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mUseShaderOverride)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mShaderOverride)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a> *shaderManager = theRenderer ? theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>() : NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderManager)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!mUseStockShaderOverride)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (mUseShadowShader)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// This shader has parameters which can be updated</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// by the attached pre-callback.</span></div>\n\
<div class=\"line\">                        mShaderOverride = shaderManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>(</div>\n\
<div class=\"line\">                            <span class=\"stringliteral\">&quot;MayaBlinnDirectionalLightShadow&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>, 0, 0, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">                            shaderOverrideCallbackBindLightingInfo,</div>\n\
<div class=\"line\">                            NULL);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Use a sample Gooch shader</span></div>\n\
<div class=\"line\">                        mShaderOverride = shaderManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>(</div>\n\
<div class=\"line\">                            <span class=\"stringliteral\">&quot;Gooch&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>, 0, 0, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">                            mAttachPrePostShaderCallback ? shaderOverridePreDrawCallback : NULL,</div>\n\
<div class=\"line\">                            mAttachPrePostShaderCallback ? shaderOverridePostDrawCallback : NULL);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Use a stock shader available from the shader manager</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// In this case the stock Blinn shader.</span></div>\n\
<div class=\"line\">                    mShaderOverride = shaderManager-&gt;<a name=\"a135\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a8e4ad27d691969622af2b05d8c6213d9\">getStockShader</a>(</div>\n\
<div class=\"line\">                        <a name=\"a136\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a1f7c5db8a3b5804c6ffce5f305bf51a8a56de0b4dccd3a1c52e8ddd11aac3e0e2\">MHWRender::MShaderManager::k3dBlinnShader</a>,</div>\n\
<div class=\"line\">                        mAttachPrePostShaderCallback ? shaderOverridePreDrawCallback : NULL,</div>\n\
<div class=\"line\">                        mAttachPrePostShaderCallback ? shaderOverridePostDrawCallback : NULL);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (mShaderOverride)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        printf(<span class=\"stringliteral\">&quot;\\t%s : Set stock shader override %d\\n&quot;</span>, mName.asChar(), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a1f7c5db8a3b5804c6ffce5f305bf51a8a56de0b4dccd3a1c52e8ddd11aac3e0e2\">MHWRender::MShaderManager::k3dBlinnShader</a> );</div>\n\
<div class=\"line\">                        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> diffColor[] = {0.0f, 0.4f, 1.0f, 1.0f};</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = mShaderOverride-&gt;setParameter(<span class=\"stringliteral\">&quot;diffuseColor&quot;</span>, diffColor);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            printf(<span class=\"stringliteral\">&quot;Could not set diffuseColor on shader\\n&quot;</span>);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mShaderOverride;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// No override so return NULL</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";