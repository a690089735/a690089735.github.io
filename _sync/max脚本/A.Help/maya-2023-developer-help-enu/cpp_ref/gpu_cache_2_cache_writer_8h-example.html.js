var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/CacheWriter.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2_cache_writer_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/CacheWriter.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/CacheWriter.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _CacheWriter_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _CacheWriter_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Includes</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheGeometry.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheMaterial.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTime.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Forward Declarations</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>CacheXformSampler;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>CacheMeshSampler;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS CacheWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>CacheWriter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a cache writer</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;CacheWriter&gt; create(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; impl,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file, <span class=\"keywordtype\">char</span> compressLevel);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;CacheWriter&gt; CreateFunction(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> compressLevel);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> registerWriter(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; impl, CreateFunction func);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~CacheWriter() {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write the hierarchy of nodes under the given top level node to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the cache file.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeSubNodeHierarchy(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::SubNode::Ptr&amp; topNode, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write the materials to the cache file.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMaterials(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::MaterialGraphMap::Ptr&amp; materialGraphMap,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns the actual file name the implementation is writing</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; getFileObject() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    CacheWriter() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    CacheWriter(<span class=\"keyword\">const</span> CacheWriter&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> CacheWriter&amp; operator=(<span class=\"keyword\">const</span> CacheWriter&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::map&lt;std::string,void*&gt; fsRegistry;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS CacheXformSampler</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>CacheXformSampler</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;CacheXformSampler&gt; create(<span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; xformObject);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~CacheXformSampler();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bake a sample at the current time.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addSample();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isAnimated()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fXformAnimated || fVisibilityAnimated; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const GPUCache::XformSample&gt; getSample(<span class=\"keywordtype\">double</span> timeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    CacheXformSampler(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; xformObject);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a>    fXform;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            fIsFirstSample;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// local matrix</span></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>         fXformSample;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            fXformAnimated;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// local visibility</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            fVisibilitySample;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            fVisibilityAnimated;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS CacheMeshSampler</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>CacheMeshSampler</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// note: about needUVs, the caller might also enable the UVs by calling enableUVs() afterwards</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;CacheMeshSampler&gt; create(<span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~CacheMeshSampler();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> addSample(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshObject, <span class=\"keywordtype\">bool</span> visibility);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> addSampleFromMesh(<a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; mesh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isAnimated()<span class=\"keyword\"> const </span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fIsAnimated;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> enableUVs() </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fNeedUVs = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setUseBaseTessellation()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fUseBaseTessellation = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// diffuseColor is per-instance attribute. CacheMeshSampler does not care about</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// instances so the diffuse color is passed from outside (Bakers).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// getSample() is called for each instance.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const GPUCache::ShapeSample&gt;</div>\n\
<div class=\"line\">        getSample(<span class=\"keywordtype\">double</span> timeInSeconds, <span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; diffuseColor);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    CacheMeshSampler(<span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>AttributeSet</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> fNumWires;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> fNumTriangles;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> fNumVerts;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::shared_ptr&lt;GPUCache::IndexBuffer&gt;    fWireVertIndices;</div>\n\
<div class=\"line\">        std::vector&lt;std::shared_ptr&lt;GPUCache::IndexBuffer&gt; &gt; fTriangleVertIndices;</div>\n\
<div class=\"line\">        std::shared_ptr&lt;GPUCache::VertexBuffer&gt;   fPositions;</div>\n\
<div class=\"line\">        std::shared_ptr&lt;GPUCache::VertexBuffer&gt;   fNormals;</div>\n\
<div class=\"line\">        std::shared_ptr&lt;GPUCache::VertexBuffer&gt;   fUVs;</div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>                                fBoundingBox;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                                        fVisibility;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        AttributeSet() </div>\n\
<div class=\"line\">            : fNumWires(0), fNumTriangles(0), fNumVerts(0), fVisibility(true)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        AttributeSet(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshObject, <span class=\"keywordtype\">bool</span> visibility, <span class=\"keywordtype\">bool</span> needUVs);</div>\n\
<div class=\"line\">        AttributeSet(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; mesh, <span class=\"keywordtype\">bool</span> needUVs, <span class=\"keywordtype\">bool</span> useBaseTessellation);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Replaces the animated channels contained in this</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// AttributeSet with the one contained in &quot;newer&quot;. Returns</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// whether any attributes are animated.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> updateAnimatedChannels(</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span>&amp; animated, <span class=\"keyword\">const</span> AttributeSet&amp; newer);</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fNeedUVs;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fUseBaseTessellation;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fIsAnimated;</div>\n\
<div class=\"line\">    AttributeSet fAttributeSet;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";