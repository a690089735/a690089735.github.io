var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: meshOpCmd/meshOpFtyAction.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'mesh_op_cmd_2mesh_op_fty_action_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: meshOpCmd/meshOpFtyAction.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">meshOpCmd/meshOpFtyAction.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;meshOpFty.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// General Includes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPointArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Function Sets</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Iterators</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshPolygon.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshEdge.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define CHECK_STATUS(st) if ((st) != MS::kSuccess) { break; }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> meshOpFty::doIt()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Performs the operation on the selected mesh and components</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i, j;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get access to the mesh&#39;s function set</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> meshFn(fMesh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The division count argument is used in many of the operations</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to execute the operation multiple subsequent times. For example,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// with a division count of 2 in subdivide face, the given faces will be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// divide once and then the resulting inner faces will be divided again.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> divisionCount = 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> translation;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fOperationType == kExtrudeEdges</div>\n\
<div class=\"line\">        || fOperationType == kExtrudeFaces</div>\n\
<div class=\"line\">        || fOperationType == kDuplicateFaces</div>\n\
<div class=\"line\">        || fOperationType == kExtractFaces)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// The translation vector is used for the extrude, extract and </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// duplicate operations to move the result to a new position. For </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// example, if you extrude an edge on a mesh without a subsequent </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// translation, the extruded edge will be on at the position of the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// orignal edge and the created faces will have no area.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Here, we provide a translation that is in the same direction as the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// average normal of the given components.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFn::Type</a> componentType = getExpectedComponentType(fOperationType);</div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> adjacentVertexList;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (componentType)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a18f788d50a75ca81a0dc5a2538f364ae\">MFn::kMeshEdgeComponent</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; fComponentIDs.length(); ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                int2 vertices;</div>\n\
<div class=\"line\">                meshFn.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a603d73f3637830a372ab3678d24ca6e6\">getEdgeVertices</a>(fComponentIDs[i], vertices);</div>\n\
<div class=\"line\">                adjacentVertexList.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(vertices[0]);</div>\n\
<div class=\"line\">                adjacentVertexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(vertices[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a5ddabf9726f89e07cff62014221fe6fb\">MFn::kMeshPolygonComponent</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; fComponentIDs.length(); ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertices;</div>\n\
<div class=\"line\">                meshFn.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a469fc8126bc4424cd00853821d78a55a\">getPolygonVertices</a>(fComponentIDs[i], vertices);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (j = 0; j &lt; vertices.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++j)</div>\n\
<div class=\"line\">                    adjacentVertexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(vertices[j]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:    </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> averageNormal(0, 0, 0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i = 0; i &lt; adjacentVertexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vertexNormal;</div>\n\
<div class=\"line\">            meshFn.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#afa4040e2d8b5dd180e3a87e39ff70011\">getVertexNormal</a>(adjacentVertexList[i], <span class=\"keyword\">true</span>, vertexNormal,</div>\n\
<div class=\"line\">                <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>);</div>\n\
<div class=\"line\">            averageNormal += vertexNormal;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (averageNormal.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>() &lt; 0.001)</div>\n\
<div class=\"line\">            averageNormal = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>(0.0, 1.0, 0.0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> averageNormal.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab66b0c7697d96a278da9bca810f4dee1\">normalize</a>();</div>\n\
<div class=\"line\">        translation = averageNormal;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// When doing an extrude operation, there is a choice of extrude the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// faces/edges individually or together. If extrudeTogether is true and </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// multiple adjacent components are selected, they will be extruded as if</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// it were one more complex component.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The following variable sets that option.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> extrudeTogether = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Execute the requested operation</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (fOperationType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kSubdivideEdges: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a25616dd654e9807fe6e74e16d84e2611\">subdivideEdges</a>(fComponentIDs, divisionCount);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kSubdivideFaces: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a8a4e8dfe0bd906b2ac2551e2fb2690f3\">subdivideFaces</a>(fComponentIDs, divisionCount);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kExtrudeEdges: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a35423618f98694bb2a6230e5430f4e5d\">extrudeEdges</a>(fComponentIDs, divisionCount,</div>\n\
<div class=\"line\">            &amp;translation, extrudeTogether);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kExtrudeFaces: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ab15cb5975fdab32d083f0636266ca555\">extrudeFaces</a>(fComponentIDs, divisionCount,</div>\n\
<div class=\"line\">            &amp;translation, extrudeTogether);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kCollapseEdges: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a68fec76262010b57a32acb44623cd0e9\">collapseEdges</a>(fComponentIDs);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kCollapseFaces: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a334445a339b2f817b87ac5c87f51cdb1\">collapseFaces</a>(fComponentIDs);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kDuplicateFaces: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ae0c0818607c11b7d2f484a81e475fd66\">duplicateFaces</a>(fComponentIDs, &amp;translation);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kExtractFaces: {</div>\n\
<div class=\"line\">        status = meshFn.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a8888ea2f9c68478882f0ff4c90c1d40b\">extractFaces</a>(fComponentIDs, &amp;translation);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kSplitLightning: {</div>\n\
<div class=\"line\">        status = doLightningSplit(meshFn);</div>\n\
<div class=\"line\">        CHECK_STATUS(status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        status = MS::kFailure;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> meshOpFty::doLightningSplit(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; meshFn)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Performs the kSplitLightning operation on the selected mesh</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      and components. It may not split all the selected components.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i, j;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// These are the input arrays to the split function. The following</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// algorithm fills them in with the arguments for a continuous</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// split that goes through some of the selected faces.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> placements;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> edgeIDs;</div>\n\
<div class=\"line\">    <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> edgeFactors;</div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> internalPoints;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// The following array is going to be used to determine which faces</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// have been split. Since the split function can only split faces</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// which are adjacent to the earlier face, we may not split</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// all the faces</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>* faceTouched = <span class=\"keyword\">new</span> <span class=\"keywordtype\">bool</span>[fComponentIDs.length()];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; fComponentIDs.length(); ++i)</div>\n\
<div class=\"line\">        faceTouched[i] = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// We need a starting point. For this example, the first face in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the component list is picked. Also get a polygon iterator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to this face.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_polygon.html\">MItMeshPolygon</a> itPoly(fMesh);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !itPoly.isDone(); itPoly.next())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fComponentIDs[0] == (<span class=\"keywordtype\">int</span>)itPoly.index()) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (itPoly.isDone())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Should never happen.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> [] faceTouched;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// In this example, edge0 is called the starting edge and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// edge1 is called the destination edge. This algorithm will split</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// each face from the starting edge to the destination edge</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// while going through two inner points inside each face.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> edge0, edge1;</div>\n\
<div class=\"line\">    <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> innerVert0, innerVert1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nextFaceIndex = 0;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// We need a starting edge. For this example, the first edge in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// edge list is used.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> edgeList;</div>\n\
<div class=\"line\">    itPoly.getEdges(edgeList);</div>\n\
<div class=\"line\">    edge0 = edgeList[0];</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> done = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (!done)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Set this face as touched so that we don&#39;t try to split it twice</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        faceTouched[nextFaceIndex] = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the current face&#39;s center. It is used later in the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// algorithm to calculate inner vertices.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> faceCenter = itPoly.center();</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"comment\">// Iterate through the connected faces to find an untouched,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// selected face and get the ID of the shared edge. That face</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// will become the next face to be split.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> faceList;</div>\n\
<div class=\"line\">        itPoly.getConnectedFaces(faceList);</div>\n\
<div class=\"line\">        nextFaceIndex = -1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i = 0; i &lt; fComponentIDs.length(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (j = 0; j &lt; faceList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++j)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fComponentIDs[i] == faceList[j] &amp;&amp; !faceTouched[i])</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    nextFaceIndex = i;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (nextFaceIndex != -1) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nextFaceIndex == -1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// There is no selected and untouched face adjacent to this</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// face, so this algorithm is done. Pick the first edge that</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// is not the starting edge as the destination edge.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            done = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            edge1 = -1;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; edgeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (edgeList[i] != edge0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    edge1 = edgeList[i];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (edge1 == -1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// This should not happen, since there should be more than</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// one edge for each face</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> [] faceTouched;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// The next step is to find out which edge is shared between</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the two faces and use it as the destination edge. To do</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// that, we need to iterate through the faces and get the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// next face&#39;s list of edges.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            itPoly.reset();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; !itPoly.isDone(); itPoly.next())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fComponentIDs[nextFaceIndex] == (<span class=\"keywordtype\">int</span>)itPoly.index()) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (itPoly.isDone()) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Should never happen.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> [] faceTouched;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">// Look for a common edge ID in the two faces edge lists</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> nextFaceEdgeList;</div>\n\
<div class=\"line\">            itPoly.getEdges(nextFaceEdgeList);</div>\n\
<div class=\"line\">            edge1 = -1;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; edgeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (j = 0; j &lt; nextFaceEdgeList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++j)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (edgeList[i] == nextFaceEdgeList[j])</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        edge1 = edgeList[i];</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (edge1 != -1) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (edge1 == -1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Should never happen.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> [] faceTouched;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">// Save the edge list for the next iteration</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            edgeList = nextFaceEdgeList;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Calculate the two inner points that the split will go through.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// For this example, the midpoints between the center and the two</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// farthest vertices of the edges are used.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Find the 3D positions of the edges&#39; vertices</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> edge0vert0, edge0vert1, edge1vert0, edge1vert1;</div>\n\
<div class=\"line\">        <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_edge.html\">MItMeshEdge</a> itEdge(fMesh, <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (; !itEdge.isDone(); itEdge.next())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (itEdge.index() == edge0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                edge0vert0 = itEdge.point(0);</div>\n\
<div class=\"line\">                edge0vert1 = itEdge.point(1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (itEdge.index() == edge1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                edge1vert0 = itEdge.point(0);</div>\n\
<div class=\"line\">                edge1vert1 = itEdge.point(1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Figure out which are the farthest from each other</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> distMax = edge0vert0.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#a2afaa6122ee5ec4a0bff234d499b4c63\">distanceTo</a>(edge1vert0);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> max0, max1;</div>\n\
<div class=\"line\">        max0 = edge0vert0;</div>\n\
<div class=\"line\">        max1 = edge1vert0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> newDist = edge0vert1.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#a2afaa6122ee5ec4a0bff234d499b4c63\">distanceTo</a>(edge1vert0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (newDist &gt; distMax)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            max0 = edge0vert1;</div>\n\
<div class=\"line\">            max1 = edge1vert0;</div>\n\
<div class=\"line\">            distMax = newDist;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        newDist = edge0vert0.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#a2afaa6122ee5ec4a0bff234d499b4c63\">distanceTo</a>(edge1vert1);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (newDist &gt; distMax)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            max0 = edge0vert0;</div>\n\
<div class=\"line\">            max1 = edge1vert1;</div>\n\
<div class=\"line\">            distMax = newDist;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        newDist = edge0vert1.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#a2afaa6122ee5ec4a0bff234d499b4c63\">distanceTo</a>(edge1vert1);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (newDist &gt; distMax)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            max0 = edge0vert1;</div>\n\
<div class=\"line\">            max1 = edge1vert1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Calculate the two inner points</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        innerVert0 = (faceCenter + max0) / 2.0;</div>\n\
<div class=\"line\">        innerVert1 = (faceCenter + max1) / 2.0;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Add this split&#39;s information to the input arrays. If this is</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the last split, also add the destination edge&#39;s split information.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        placements.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>((<span class=\"keywordtype\">int</span>) <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a268415a8195ca8a7471a0dc2a611d105a0bfc0edc789ffe2049b71e2ea8af262b\">MFnMesh::kOnEdge</a>);</div>\n\
<div class=\"line\">        placements.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>((<span class=\"keywordtype\">int</span>) <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a268415a8195ca8a7471a0dc2a611d105a3ecd45a76462bc63dcc4117e6d2cc078\">MFnMesh::kInternalPoint</a>);</div>\n\
<div class=\"line\">        placements.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>((<span class=\"keywordtype\">int</span>) MFnMesh::kInternalPoint);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (done) placements.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>((<span class=\"keywordtype\">int</span>) MFnMesh::kOnEdge);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        edgeIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(edge0);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (done) edgeIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(edge1);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        edgeFactors.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>(0.5f);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (done) edgeFactors.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>(0.5f);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> point1((<span class=\"keywordtype\">float</span>)innerVert0[0], (<span class=\"keywordtype\">float</span>)innerVert0[1],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)innerVert0[2], (<span class=\"keywordtype\">float</span>)innerVert0[3]);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> point2((<span class=\"keywordtype\">float</span>)innerVert1[0], (<span class=\"keywordtype\">float</span>)innerVert1[1],</div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">float</span>)innerVert1[2], (<span class=\"keywordtype\">float</span>)innerVert1[3]);</div>\n\
<div class=\"line\">        internalPoints.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a9a607c73c20aca58b154cd5d40befbb7\">append</a>(point1);</div>\n\
<div class=\"line\">        internalPoints.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a9a607c73c20aca58b154cd5d40befbb7\">append</a>(point2);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// For the next iteration, the current destination</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// edge becomes the start edge.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        edge0 = edge1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release the dynamically-allocated memory and do the actual split</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] faceTouched;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> meshFn.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#aa0fab620139a3143447ead1927936248\">split</a>(placements, edgeIDs, edgeFactors, internalPoints);</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";