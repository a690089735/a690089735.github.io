var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheCmd.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_cmd_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheCmd.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheCmd.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// ==================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2016 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// This computer source code  and related  instructions and comments are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the unpublished confidential and proprietary information of Autodesk,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Inc. and are  protected  under applicable  copyright and trade secret</span></div>\n\
<div class=\"line\"><span class=\"comment\">// law. They may not  be disclosed to, copied or used by any third party</span></div>\n\
<div class=\"line\"><span class=\"comment\">// without the prior written consent of Autodesk, Inc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// gpuCache MEL command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Creates one or more cache files on disk to store attribute data for</span></div>\n\
<div class=\"line\"><span class=\"comment\">// a span of frames.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheCmd.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheShapeNode.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheStrings.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheUtil.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheConfig.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVBOProxy.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVramQuery.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheMaterialBakers.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSubSceneOverride.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheUnitBoundingBox.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheReader.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheGeometry.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimControl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPathArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMeshData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsSurface.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSet.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSubd.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSyntax.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MBoundingBox.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSingleIndexedComponent.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnComponentListData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnLambertShader.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUintArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_set&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cfloat&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;list&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iomanip&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MStatError(status,msg)                              \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    if ( MS::kSuccess != (status) ) {                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        MPxCommand::displayError(                           \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            (msg) + MString(&quot;:&quot;) + (status).errorString()); \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        return (status);                                    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MStatErrorNullObj(status,msg)                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    if ( MS::kSuccess != (status) ) {                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        MPxCommand::displayError(                           \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            (msg) + MString(&quot;:&quot;) + (status).errorString()); \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        return MObject::kNullObj;                           \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MCheckReturn(expression)                \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    {                                           \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        MStatus status = (expression);          \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        if ( MS::kSuccess != (status) ) {       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            return (status);                    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        }                                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MUpdateProgressAndCheckInterruption(progressBar)    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    {                                                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        (progressBar).stepProgress();                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        if ((progressBar).isCancelled()) {                  \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            return MS::kFailure;                            \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        }                                                   \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    }                                                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// LOCAL FUNCTIONS</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a cache writer object that will write to the specified file path.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the directory does not exist, a new one will be created.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the file already exists, the existing file will be overwritten.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Writing to a read-only file will return an error.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Args:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    targetFile    The target file path that the new writer will write files to.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    compressLevel Hint the compress level: -1 (Store), 0~9 (Fastest~Best).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    dataFormat    Hint the file format: ogawa or hdf.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;CacheWriter&gt; createWriter(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; targetFile,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>         compressLevel</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the directory of the target file.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> cacheDirectory;</div>\n\
<div class=\"line\">        cacheDirectory.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(targetFile.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a7a4d2fada6eb436c6e74f1e62212c218\">resolvedPath</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Make sure the cache folder exists.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!cacheDirectory.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#aa9100e4c626877b706ca9fc67a35c562\">exists</a>()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Create the cache folder.</span></div>\n\
<div class=\"line\">            <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> createFolderCmd;</div>\n\
<div class=\"line\">            createFolderCmd.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;sysFile -md \\&quot;^1s\\&quot;&quot;</span>, EncodeString(targetFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a7a4d2fada6eb436c6e74f1e62212c218\">resolvedPath</a>()));</div>\n\
<div class=\"line\">            <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(createFolderCmd);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Delete the existing file.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// We have already confirmed that the file is going to be overwritten.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>(targetFile).exists()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// The file already exists!</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFullName = targetFile.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Check if the file is writeable.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> writeable;</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::ofstream ofs(resolvedFullName.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                writeable = ofs.is_open();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// We can&#39;t overwrite a read-only file.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!writeable) {</div>\n\
<div class=\"line\">                <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fmt = <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kCouldNotSaveFileMsg, stat);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(fmt, resolvedFullName);</div>\n\
<div class=\"line\">                <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> std::shared_ptr&lt;CacheWriter&gt;();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// We are going to overwrite the file. Delete it!!</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (<span class=\"keyword\">remove</span>(resolvedFullName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()) != 0) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kCouldNotSaveFileMsg, stat);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(fmt, resolvedFullName);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> std::shared_ptr&lt;CacheWriter&gt;();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// first parameter is the file to write</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// second parameter is gzip compress level, -1 or 0~9</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// third parameter is data format, hdf or ogawa</span></div>\n\
<div class=\"line\">        std::shared_ptr&lt;CacheWriter&gt; cacheWriter = CacheWriter::create(<span class=\"stringliteral\">&quot;Alembic&quot;</span>, targetFile, compressLevel);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!cacheWriter) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kCreateCacheWriterErrorMsg, stat);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::shared_ptr&lt;CacheWriter&gt;();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!cacheWriter-&gt;valid()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// release the file handle</span></div>\n\
<div class=\"line\">            cacheWriter.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg;</div>\n\
<div class=\"line\">            errorMsg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;Couldn&#39;t open cache file: ^1s&quot;</span>, targetFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>());</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::shared_ptr&lt;CacheWriter&gt;();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> cacheWriter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isPlugConnectedToTexture2d(<span class=\"keyword\">const</span> <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> connections;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(connections, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>)) {</div>\n\
<div class=\"line\">            assert(connections.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1);</div>\n\
<div class=\"line\">            <span class=\"comment\">//return false immediately if connections is empty, in order to fix the crash MAYA-41542</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(connections.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> srcNode = connections[0].node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> srcNode.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6c4cc284d93d1816f92a7386ebe8df94\">MFn::kTexture2d</a>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> getTexture2dDefaultColor(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> connections;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(connections, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>)) {</div>\n\
<div class=\"line\">            assert(connections.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1);</div>\n\
<div class=\"line\">            <span class=\"comment\">//return immediately if connections is empty</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(connections.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.5, 0.5, 0.5);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> srcNode(connections[0].node());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> diffusePlugR = srcNode.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;defaultColorR&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> diffusePlugG = srcNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;defaultColorG&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> diffusePlugB = srcNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;defaultColorB&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            assert(!diffusePlugR.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\">            assert(!diffusePlugG.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\">            assert(!diffusePlugB.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> statusR, statusG, statusB;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> r = diffusePlugR.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>(&amp;statusR);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> g = diffusePlugG.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>(&amp;statusG);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> b = diffusePlugB.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9641ccaab03f3d58fd5f5b5b32c155f\">asFloat</a>(&amp;statusB);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            assert(statusR == MS::kSuccess);</div>\n\
<div class=\"line\">            assert(statusG == MS::kSuccess);</div>\n\
<div class=\"line\">            assert(statusB == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(r, g, b);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.5, 0.5, 0.5);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isPlugConnectedToTextureNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> connections;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(connections, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>)) {</div>\n\
<div class=\"line\">            assert(connections.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1);</div>\n\
<div class=\"line\">            <span class=\"comment\">//return false immediately if connections is empty</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(connections.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> srcNode = connections[0].node();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6c4cc284d93d1816f92a7386ebe8df94\">MFn::kTexture2d</a>) ||</div>\n\
<div class=\"line\">                srcNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aa71f7be8469c7ffb337cda0740517199\">MFn::kTexture3d</a>) ||</div>\n\
<div class=\"line\">                srcNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ae0383bc7dca0022e816a28f12e90adfe\">MFn::kTextureEnv</a>) ||</div>\n\
<div class=\"line\">                srcNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a4e8f9a3bf84fb9443ec136b4cb7f10a2\">MFn::kLayeredTexture</a>) ||</div>\n\
<div class=\"line\">                srcNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a5191be41813614e36606745e2318a2dc\">MFn::kImageSource</a>)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> getShapeDiffuseColors(<span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; paths,</div>\n\
<div class=\"line\">                                  std::vector&lt;MColor&gt;&amp; diffuseColors)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        diffuseColors.resize(paths.size(), Config::kDefaultGrayColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the diffuse color for each instance</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> pathIndex = 0; pathIndex &lt; paths.size(); pathIndex++) {</div>\n\
<div class=\"line\">            <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> shape(paths[pathIndex], &amp;status);</div>\n\
<div class=\"line\">            assert(status == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> shadingGroup;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> shaderObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the instObjGroups plug</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> instObjectGroupsParent = shape.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;instObjGroups&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            assert(!instObjectGroupsParent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> instObjectGroups = instObjectGroupsParent.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(</div>\n\
<div class=\"line\">                paths[pathIndex].instanceNumber());</div>\n\
<div class=\"line\">            assert(!instObjectGroups.isNull());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// instObjGroups is connected, the whole shape is assigned a material</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (instObjectGroups.isConnected()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// instObjGroups[instanceNumber] -&gt; shadingGroup</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> dstPlugs;</div>\n\
<div class=\"line\">                instObjectGroups.connectedTo(dstPlugs, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status &amp;&amp; dstPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Found shadingGroup assigned to the whole shape</span></div>\n\
<div class=\"line\">                    shadingGroup = dstPlugs[0].node();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// For per-component shader assignment, we use the first shading group.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the objectGroups plug</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> objectGroupsParent = instObjectGroups.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(0);</div>\n\
<div class=\"line\">            assert(!objectGroupsParent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> parts = 0;</div>\n\
<div class=\"line\">                parts &lt; objectGroupsParent.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>() &amp;&amp; shadingGroup.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>();</div>\n\
<div class=\"line\">                parts++) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> objectGroups = objectGroupsParent[parts];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// objectGroups is connected, there is per-component material</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (objectGroups.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>()) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// objectGroups[i] -&gt; shadingGroup</span></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> dstPlugs;</div>\n\
<div class=\"line\">                        objectGroups.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(dstPlugs, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (status &amp;&amp; dstPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// Found shadingGroup assigned to components</span></div>\n\
<div class=\"line\">                            shadingGroup = dstPlugs[0].node();</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">            } <span class=\"comment\">// for each objectGroup plug</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!shadingGroup.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Found a shading group, find its surface shader</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> shadingEngine(shadingGroup, &amp;status);</div>\n\
<div class=\"line\">                assert(status == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Find surfaceShader plug</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> surfaceShaderPlug = shadingEngine.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;surfaceShader&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                assert(!surfaceShaderPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// outColor -&gt; surfaceShader</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (surfaceShaderPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>()) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> srcPlugs;</div>\n\
<div class=\"line\">                    surfaceShaderPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(srcPlugs, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status &amp;&amp; srcPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Found the material node</span></div>\n\
<div class=\"line\">                        shaderObj = srcPlugs[0].node();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!shaderObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> diffuseColor = Config::kDefaultGrayColor;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> transparency = Config::kDefaultTransparency;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Found a material node, get its color</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (shaderObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2af9af308555c50cf68e2c14595b680b\">MFn::kLambert</a>)) {</div>\n\
<div class=\"line\">                    <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_lambert_shader.html\">MFnLambertShader</a> lambert(shaderObj, &amp;status);</div>\n\
<div class=\"line\">                    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> colorPlug = lambert.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;color&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    assert(!colorPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>());</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> diffusePlug = lambert.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;diffuse&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    assert(!diffusePlug.isNull());</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> transparencyPlug = lambert.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;transparency&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    assert(!transparencyPlug.isNull());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (isPlugConnectedToTexture2d(colorPlug)) {</div>\n\
<div class=\"line\">                        diffuseColor = getTexture2dDefaultColor(colorPlug);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!isPlugConnectedToTextureNode(colorPlug)) {</div>\n\
<div class=\"line\">                        diffuseColor = lambert.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_lambert_shader.html#a213e6cfa59f4a1c0d0a8d57e04eab5e5\">color</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!isPlugConnectedToTextureNode(diffusePlug)) {</div>\n\
<div class=\"line\">                        diffuseColor *= lambert.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_lambert_shader.html#aeeae9be9c07edce952c47e0998e06123\">diffuseCoeff</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!isPlugConnectedToTextureNode(transparencyPlug)) {</div>\n\
<div class=\"line\">                        transparency = lambert.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_lambert_shader.html#a5d51389382a2d3602f491bd29e55cd53\">transparency</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Transparency RGB Luminance as alpha</span></div>\n\
<div class=\"line\">                diffuseColor.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4aec1a5be9d9a4a394a2e49e9744286e\">a</a> = 1.0f - (transparency.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> * 0.3f +</div>\n\
<div class=\"line\">                    transparency.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> * 0.59f + transparency.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> * 0.11f);</div>\n\
<div class=\"line\">                diffuseColors[pathIndex] = diffuseColor;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> getSceneName()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sceneName = <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a8dd71fbf4d71dacf626180777ba91a62\">MGlobal::executeCommandStringResult</a>(</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;basenameEx(`file -q -sceneName`)&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sceneName.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">            sceneName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a8dd71fbf4d71dacf626180777ba91a62\">MGlobal::executeCommandStringResult</a>(<span class=\"stringliteral\">&quot;untitledFileName&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sceneName;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> getSceneNameAsValidObjectName()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a8dd71fbf4d71dacf626180777ba91a62\">MGlobal::executeCommandStringResult</a>(<span class=\"stringliteral\">&quot;formValidObjectName \\&quot;&quot;</span> + EncodeString(getSceneName()) + <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> maxNumVerts(<span class=\"keyword\">const</span> ShapeData::Ptr&amp; geom)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> maxNumVerts = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> ShapeData::SampleMap::value_type&amp; smv : geom-&gt;getSamples()</div>\n\
<div class=\"line\">        ) {</div>\n\
<div class=\"line\">            maxNumVerts = std::max(maxNumVerts, smv.second-&gt;numVerts());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> maxNumVerts;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> toHumanUnits(MUint64 bytes, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; units)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MUint64 KB = 1024;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MUint64 MB = 1024 * KB;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MUint64 GB = 1024 * MB;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MUint64 TB = 1024 * GB;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  value;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (bytes &gt;= TB) {</div>\n\
<div class=\"line\">            units = <span class=\"stringliteral\">&quot;TB&quot;</span>;</div>\n\
<div class=\"line\">            value =  double(bytes)/TB;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (bytes &gt;= GB) {</div>\n\
<div class=\"line\">            units = <span class=\"stringliteral\">&quot;GB&quot;</span>;</div>\n\
<div class=\"line\">            value =  double(bytes)/GB;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (bytes &gt;= MB) {</div>\n\
<div class=\"line\">            units = <span class=\"stringliteral\">&quot;MB&quot;</span>;</div>\n\
<div class=\"line\">            value =  double(bytes)/MB;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (bytes &gt;= KB) {</div>\n\
<div class=\"line\">            units = <span class=\"stringliteral\">&quot;KB&quot;</span>;</div>\n\
<div class=\"line\">            value =  double(bytes)/KB;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            units = <span class=\"stringliteral\">&quot;bytes&quot;</span>;</div>\n\
<div class=\"line\">            value =  double(bytes);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> value;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS Baker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Baker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> std::shared_ptr&lt;Baker&gt; create(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;               <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">                                               <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; paths);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> isBakeable(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; dagNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Baker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; paths)</div>\n\
<div class=\"line\">            : fNode(<span class=\"keywordtype\">object</span>), fPaths(paths)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~Baker() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sample(<span class=\"keyword\">const</span> <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time) = 0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> SubNode::MPtr getNode(<span class=\"keywordtype\">size_t</span> instIndex) <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> setWriteMaterials() {}</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> setUseBaseTessellation() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>            fNode;</div>\n\
<div class=\"line\">        std::vector&lt;MDagPath&gt; fPaths;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS ShapeBaker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Base class for wrappers that encapsulate the logic necessary to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// bake particular types of shapes (meshes, nurbs, subds, etc.).</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ShapeBaker : <span class=\"keyword\">public</span> Baker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ~ShapeBaker()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> enableUVs() </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fCacheMeshSampler-&gt;enableUVs();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The function is called to sample the geometry at the specified time</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sample(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"comment\">// Sample the shape</span></div>\n\
<div class=\"line\">            MCheckReturn( sampleTopologyAndAttributes() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Sample the diffuse color</span></div>\n\
<div class=\"line\">            std::vector&lt;MColor&gt; diffuseColors;</div>\n\
<div class=\"line\">            MCheckReturn( getShapeDiffuseColors(fPaths, diffuseColors) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> diffuseColorsAnimated = (fPrevDiffuseColors != diffuseColors);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// add sample to geometry</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fCacheMeshSampler-&gt;isAnimated() || diffuseColorsAnimated) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fGeometryInstances.size(); i++) {</div>\n\
<div class=\"line\">                    fGeometryInstances[i]-&gt;addSample(</div>\n\
<div class=\"line\">                        fCacheMeshSampler-&gt;getSample(</div>\n\
<div class=\"line\">                            time.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>),</div>\n\
<div class=\"line\">                            diffuseColors[i]));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fPrevDiffuseColors.swap(diffuseColors);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The function is called at the end of baking process to get the baked geometry</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SubNode::MPtr getNode(<span class=\"keywordtype\">size_t</span> instIndex)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> SubNode::create(</div>\n\
<div class=\"line\">                fNode.name(),</div>\n\
<div class=\"line\">                fGeometryInstances[instIndex]</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        ShapeBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; paths)</div>\n\
<div class=\"line\">            : Baker(node, paths),</div>\n\
<div class=\"line\">              fCacheMeshSampler(</div>\n\
<div class=\"line\">                  <span class=\"comment\">// note: the UVs can always get enabled later by calling our method enableUVs()</span></div>\n\
<div class=\"line\">                  CacheMeshSampler::create(!Config::isIgnoringUVs())),</div>\n\
<div class=\"line\">              fGeometryInstances(paths.size())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Create one geometry for each instance</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; paths.size(); i++) {</div>\n\
<div class=\"line\">                fGeometryInstances[i] = ShapeData::create();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> setWriteMaterials()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"comment\">// Create one geometry for each instance</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fPaths.size(); i++) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set material to the shape data.</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> surfaceMaterial;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                InstanceMaterialLookup lookup(fPaths[i]);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (lookup.hasWholeObjectMaterial()) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Whole object material assignment.</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> material = lookup.findWholeObjectSurfaceMaterial();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!material.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgMaterial(material);</div>\n\
<div class=\"line\">                        surfaceMaterial = dgMaterial.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (lookup.hasComponentMaterials()) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Per-component material assignment.</span></div>\n\
<div class=\"line\">                    std::vector&lt;MObject&gt; materials;</div>\n\
<div class=\"line\">                    lookup.findSurfaceMaterials(materials);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Use the first surface material</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// TODO: Support per-component material assignment.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; material : materials) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!material.isNull()) {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dgMaterial(material);</div>\n\
<div class=\"line\">                            surfaceMaterial = dgMaterial.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (surfaceMaterial.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                    fGeometryInstances[i]-&gt;setMaterial(surfaceMaterial);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> setUseBaseTessellation()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            fCacheMeshSampler-&gt;setUseBaseTessellation();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sampleTopologyAndAttributes() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">        ShapeBaker(<span class=\"keyword\">const</span> ShapeBaker&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ShapeBaker&amp; operator=(<span class=\"keyword\">const</span> ShapeBaker&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;CacheMeshSampler&gt; fCacheMeshSampler;</div>\n\
<div class=\"line\">        std::vector&lt;MColor&gt;                       fPrevDiffuseColors;</div>\n\
<div class=\"line\">        std::vector&lt;ShapeData::MPtr&gt;              fGeometryInstances;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS XformBaker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Class for baking a transform MObject</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>XformBaker : <span class=\"keyword\">public</span> Baker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ~XformBaker()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        XformBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; xformNode, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; xformPaths)</div>\n\
<div class=\"line\">            : Baker(xformNode, xformPaths),</div>\n\
<div class=\"line\">              fCacheXformSamplers(CacheXformSampler::create(xformNode)),</div>\n\
<div class=\"line\">              fXformInstances(xformPaths.size())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fXformInstances.size(); i++) {</div>\n\
<div class=\"line\">                fXformInstances[i] = XformData::create();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sample(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; currentTime)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            fCacheXformSamplers-&gt;addSample();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fCacheXformSamplers-&gt;isAnimated()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fXformInstances.size(); i++) {</div>\n\
<div class=\"line\">                    fXformInstances[i]-&gt;addSample(</div>\n\
<div class=\"line\">                        fCacheXformSamplers-&gt;getSample(currentTime.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>)));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SubNode::MPtr getNode(<span class=\"keywordtype\">size_t</span> instIndex)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> SubNode::create(</div>\n\
<div class=\"line\">                fNode.name(),</div>\n\
<div class=\"line\">                fXformInstances[instIndex]</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        std::shared_ptr&lt;CacheXformSampler&gt; fCacheXformSamplers;</div>\n\
<div class=\"line\">        std::vector&lt;XformData::MPtr&gt;         fXformInstances;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS MeshDataBaker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Base class for baking a mesh MObject</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>MeshDataBaker : <span class=\"keyword\">public</span> ShapeBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ~MeshDataBaker()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sampleTopologyAndAttributes()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> meshData = getMeshData(&amp;status);</div>\n\
<div class=\"line\">            MStatError(status, <span class=\"stringliteral\">&quot;getMeshData()&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> shapeVisibility = ShapeVisibilityChecker(fNode.object()).isVisible();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Snapshot the topology and vertex attributes.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fCacheMeshSampler-&gt;addSample(meshData, shapeVisibility) ?</div>\n\
<div class=\"line\">                MS::kSuccess : MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> getMeshData(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>* status) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MeshDataBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; shapeNode, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; shapePaths)</div>\n\
<div class=\"line\">            : ShapeBaker(shapeNode, shapePaths)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">        MeshDataBaker(<span class=\"keyword\">const</span> MeshDataBaker&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MeshDataBaker&amp; operator=(<span class=\"keyword\">const</span> MeshDataBaker&amp;);</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS MeshBaker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>MeshBaker : <span class=\"keyword\">public</span> ShapeBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        MeshBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; meshNode, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; meshPaths)</div>\n\
<div class=\"line\">            : ShapeBaker(meshNode, meshPaths), fMeshNode(meshNode)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ~MeshBaker()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sampleTopologyAndAttributes()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fCacheMeshSampler-&gt;addSampleFromMesh(fMeshNode) ?</div>\n\
<div class=\"line\">                        MS::kSuccess : MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">        MeshBaker(<span class=\"keyword\">const</span> MeshBaker&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MeshBaker&amp; operator=(<span class=\"keyword\">const</span> MeshBaker&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fMeshNode;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS NurbsBaker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>NurbsBaker : <span class=\"keyword\">public</span> MeshDataBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        NurbsBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; nurbsNode, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; nurbsPaths)</div>\n\
<div class=\"line\">            : MeshDataBaker(nurbsNode, nurbsPaths)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Disable Viewport 2.0 updates while baking NURBS surfaces.</span></div>\n\
<div class=\"line\">            <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a36396613f85279a61dde9946bf5b9844\">MHWRender::MRenderer::disableChangeManagementUntilNextRefresh</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> getMeshData(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>* status)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> mesh;</div>\n\
<div class=\"line\">            <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> modifier;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html\">MFnNurbsSurface</a> nurbsNode(fNode.object());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> tessellator = modifier.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a4705595f671688d3a8148cfd0c8ab277\">createNode</a>(<span class=\"stringliteral\">&quot;nurbsTessellate&quot;</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> tessellatorNode(tessellator);</div>\n\
<div class=\"line\">            modifier.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;explicitTessellationAttributes&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;explicitTessellationAttributes&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;curvatureTolerance&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;curvatureTolerance&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;uDivisionsFactor&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;uDivisionsFactor&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;vDivisionsFactor&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;vDivisionsFactor&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;modeU&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;uType&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;modeV&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;vType&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;numberU&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;uNumber&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;numberV&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;vNumber&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;useChordHeight&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;useChordHeight&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;useChordHeightRatio&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;useChordHeightRatio&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;chordHeight&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;chordHeight&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;chordHeightRatio&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;chordHeightRatio&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;smoothEdge&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;smoothEdge&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;smoothEdgeRatio&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;smoothEdgeRatio&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;edgeSwap&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;edgeSwap&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(nurbsNode.findPlug(<span class=\"stringliteral\">&quot;local&quot;</span>, <span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">                             tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;inputSurface&quot;</span>, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// poly type - 0 means triangles</span></div>\n\
<div class=\"line\">            modifier.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#adbada2da21ea5ac50176ef14f3bc0df6\">newPlugValueInt</a>(tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;polygonType&quot;</span>, <span class=\"keyword\">true</span>), 0);</div>\n\
<div class=\"line\">            <span class=\"comment\">// format - 2 means general fit</span></div>\n\
<div class=\"line\">            modifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#adbada2da21ea5ac50176ef14f3bc0df6\">newPlugValueInt</a>(tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;format&quot;</span>, <span class=\"keyword\">true</span>), 2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            modifier.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">            tessellatorNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;outputPolygon&quot;</span>, <span class=\"keyword\">true</span>).<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(mesh);</div>\n\
<div class=\"line\">            modifier.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a0789a8d51244cad0495abb2b811c39db\">undoIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> mesh;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS SubdBaker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>SubdBaker : <span class=\"keyword\">public</span> MeshDataBaker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        SubdBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; subdNode, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; subdPaths)</div>\n\
<div class=\"line\">            : MeshDataBaker(subdNode, subdPaths)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> getMeshData(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>* status)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <a name=\"_a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_subd.html\">MFnSubd</a> subdNode(fNode.object());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html\">MFnMeshData</a> meshData;</div>\n\
<div class=\"line\">            meshData.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(status);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!*status) <span class=\"keywordflow\">return</span> meshData.object();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> format = -1;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> depth = -1;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> sampleCount = -1;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> formatPlug = subdNode.findPlug(<span class=\"stringliteral\">&quot;format&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> depthPlug = subdNode.findPlug(<span class=\"stringliteral\">&quot;depth&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> sampleCountPlug = subdNode.findPlug(<span class=\"stringliteral\">&quot;sampleCount&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            formatPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(format);</div>\n\
<div class=\"line\">            depthPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(depth);</div>\n\
<div class=\"line\">            sampleCountPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(sampleCount);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            subdNode.tesselate(</div>\n\
<div class=\"line\">                format==0, depth, sampleCount, meshData.object(), status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> meshData.object();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS RecursiveBaker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This class simply extracts the hierarchy from gpuCache node.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>RecursiveBaker : <span class=\"keyword\">public</span> Baker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        RecursiveBaker(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; shapeNode, <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; shapePaths)</div>\n\
<div class=\"line\">            : Baker(shapeNode, shapePaths)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the user node</span></div>\n\
<div class=\"line\">            <a name=\"_a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* userNode = fNode.userNode();</div>\n\
<div class=\"line\">            assert(userNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ShapeNode* bakedNode = userNode ?</div>\n\
<div class=\"line\">                <span class=\"keyword\">dynamic_cast&lt;</span>ShapeNode*<span class=\"keyword\">&gt;</span>(userNode) : NULL;</div>\n\
<div class=\"line\">            assert(bakedNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Extract the baked geometry</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (bakedNode) {</div>\n\
<div class=\"line\">                GlobalReaderCache::theCache().waitForRead(bakedNode-&gt;getCacheFileEntry().get());</div>\n\
<div class=\"line\">                fSrcTopNode = bakedNode-&gt;getCachedGeometry();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fSrcTopNode) {</div>\n\
<div class=\"line\">                    fSampleReplicator.reset(<span class=\"keyword\">new</span> SampleReplicator);</div>\n\
<div class=\"line\">                    fSrcTopNode-&gt;accept(*fSampleReplicator);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ~RecursiveBaker()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sample(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!fSrcTopNode) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fSampleReplicator-&gt;sample(time);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SubNode::MPtr getNode(<span class=\"keywordtype\">size_t</span> instIndex)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"comment\">// We ignore the material assigned to the gpuCache node.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fSrcTopNode &amp;&amp; !fDstTopNode) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// We replicate the hierarchy after all xform/shape data are</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// filled with samples.</span></div>\n\
<div class=\"line\">                HierarchyReplicator hierarchyReplicator(fSampleReplicator);</div>\n\
<div class=\"line\">                fSrcTopNode-&gt;accept(hierarchyReplicator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                RecursiveBaker* nonConstThis = <span class=\"keyword\">const_cast&lt;</span>RecursiveBaker*<span class=\"keyword\">&gt;</span>(<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">                nonConstThis-&gt;fDstTopNode = hierarchyReplicator.dstSubNode();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fDstTopNode;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">        RecursiveBaker(<span class=\"keyword\">const</span> RecursiveBaker&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> RecursiveBaker&amp; operator=(<span class=\"keyword\">const</span> RecursiveBaker&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">class </span>SampleReplicator : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::shared_ptr&lt;SampleReplicator&gt; MPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            SampleReplicator()</div>\n\
<div class=\"line\">            {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp; srcXform,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> SubNode&amp;   srcSubNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">            </span>{</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create a new xform data, it will be filled later in sample()</span></div>\n\
<div class=\"line\">                XformData::MPtr dstXform = XformData::create();</div>\n\
<div class=\"line\">                fXforms[&amp;srcXform] = std::make_pair(</div>\n\
<div class=\"line\">                        dstXform, std::shared_ptr&lt;const XformSample&gt;());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Recursively replicate xform/shape data in the child hierarchy</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; srcChild : srcSubNode.getChildren()) {</div>\n\
<div class=\"line\">                    srcChild-&gt;accept(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp; srcShape,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> SubNode&amp;   srcSubNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">            </span>{</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create a new shape data, it will be filled later in sample()</span></div>\n\
<div class=\"line\">                ShapeData::MPtr dstShape = ShapeData::create();</div>\n\
<div class=\"line\">                dstShape-&gt;setMaterials(srcShape.getMaterials());</div>\n\
<div class=\"line\">                fShapes[&amp;srcShape] = std::make_pair(</div>\n\
<div class=\"line\">                        dstShape, std::shared_ptr&lt;const ShapeSample&gt;());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> sample(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; time)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(XformMapping::value_type&amp; xform : fXforms) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get the already baked sample</span></div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const XformSample&gt; srcXformSample =</div>\n\
<div class=\"line\">                        xform.first-&gt;getSample(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Only add the sample if it&#39;s different than prev sample</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (xform.second.second != srcXformSample) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Create a new sample with the same content but different time</span></div>\n\
<div class=\"line\">                        std::shared_ptr&lt;XformSample&gt; dstXformSample =</div>\n\
<div class=\"line\">                            XformSample::create(</div>\n\
<div class=\"line\">                                time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>),</div>\n\
<div class=\"line\">                                srcXformSample-&gt;xform(),</div>\n\
<div class=\"line\">                                srcXformSample-&gt;boundingBox(),</div>\n\
<div class=\"line\">                                srcXformSample-&gt;visibility());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        xform.second.first-&gt;addSample(dstXformSample);</div>\n\
<div class=\"line\">                        xform.second.second = srcXformSample;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(ShapeMapping::value_type&amp; shape : fShapes) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get the already baked sample</span></div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const ShapeSample&gt; srcShapeSample =</div>\n\
<div class=\"line\">                        shape.first-&gt;getSample(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Only add the sample if it&#39;s different than prev sample</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (shape.second.second != srcShapeSample) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Create a new sample with the same content but different time</span></div>\n\
<div class=\"line\">                        std::shared_ptr&lt;ShapeSample&gt; dstShapeSample =</div>\n\
<div class=\"line\">                            ShapeSample::create(</div>\n\
<div class=\"line\">                                time.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;numWires(),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;numVerts(),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;wireVertIndices(),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;triangleVertexIndexGroups(),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;positions(),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;boundingBox(),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;diffuseColor(),</div>\n\
<div class=\"line\">                                srcShapeSample-&gt;visibility());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (srcShapeSample-&gt;normals()) {</div>\n\
<div class=\"line\">                            dstShapeSample-&gt;setNormals(srcShapeSample-&gt;normals());</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (srcShapeSample-&gt;uvs()) {</div>\n\
<div class=\"line\">                            dstShapeSample-&gt;setUVs(srcShapeSample-&gt;uvs());</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        shape.second.first-&gt;addSample(dstShapeSample);</div>\n\
<div class=\"line\">                        shape.second.second = srcShapeSample;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            XformData::MPtr xform(<span class=\"keyword\">const</span> XformData&amp; xform)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                XformMapping::iterator iter = fXforms.find(&amp;xform);</div>\n\
<div class=\"line\">                assert(iter != fXforms.end());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> (*iter).second.first;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ShapeData::MPtr shape(<span class=\"keyword\">const</span> ShapeData&amp; shape)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ShapeMapping::iterator iter = fShapes.find(&amp;shape);</div>\n\
<div class=\"line\">                assert(iter != fShapes.end());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> (*iter).second.first;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">            <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">            SampleReplicator(<span class=\"keyword\">const</span> SampleReplicator&amp;);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> SampleReplicator&amp; operator=(<span class=\"keyword\">const</span> SampleReplicator&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::pair&lt;XformData::MPtr,std::shared_ptr&lt;const XformSample&gt; &gt; XformWithPrev;</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::pair&lt;ShapeData::MPtr,std::shared_ptr&lt;const ShapeSample&gt; &gt; ShapeWithPrev;</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::map&lt;const XformData*,XformWithPrev&gt; XformMapping;</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::map&lt;const ShapeData*,ShapeWithPrev&gt; ShapeMapping;</div>\n\
<div class=\"line\">            XformMapping fXforms;</div>\n\
<div class=\"line\">            ShapeMapping fShapes;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">class </span>HierarchyReplicator : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">            HierarchyReplicator(SampleReplicator::MPtr sampleReplicator)</div>\n\
<div class=\"line\">                : fSampleReplicator(sampleReplicator)</div>\n\
<div class=\"line\">            {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp; srcXform,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> SubNode&amp;   srcSubNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">            </span>{</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create a new sub node for the xform</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// We rename &quot;|&quot; to &quot;top&quot; as we don&#39;t want &quot;|&quot; to appear in hierarchy.</span></div>\n\
<div class=\"line\">                XformData::MPtr dstXform = fSampleReplicator-&gt;xform(srcXform);</div>\n\
<div class=\"line\">                fDstSubNode = SubNode::create(srcSubNode.getName() != <span class=\"stringliteral\">&quot;|&quot;</span> ?</div>\n\
<div class=\"line\">                    srcSubNode.getName() : <span class=\"stringliteral\">&quot;top&quot;</span>, dstXform);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Recursively replicate the child hierarchy</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; srcChild : srcSubNode.getChildren())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    HierarchyReplicator replicator(fSampleReplicator);</div>\n\
<div class=\"line\">                    srcChild-&gt;accept(replicator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    SubNode::connect(fDstSubNode, replicator.dstSubNode());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp; srcShape,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> SubNode&amp;   srcSubNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">            </span>{</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create a new sub node for the shape</span></div>\n\
<div class=\"line\">                ShapeData::MPtr dstShape = fSampleReplicator-&gt;shape(srcShape);</div>\n\
<div class=\"line\">                fDstSubNode = SubNode::create(srcSubNode.getName(), dstShape);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            SubNode::MPtr dstSubNode()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">            </span>{ <span class=\"keywordflow\">return</span> fDstSubNode; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">            <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">            HierarchyReplicator(<span class=\"keyword\">const</span> HierarchyReplicator&amp;);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> HierarchyReplicator&amp; operator=(<span class=\"keyword\">const</span> HierarchyReplicator&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            SampleReplicator::MPtr fSampleReplicator;</div>\n\
<div class=\"line\">            SubNode::MPtr fDstSubNode;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        SubNode::Ptr            fSrcTopNode;</div>\n\
<div class=\"line\">        SubNode::MPtr           fDstTopNode;</div>\n\
<div class=\"line\">        SampleReplicator::MPtr  fSampleReplicator;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS Baker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> Baker::isBakeable(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; dagNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)</div>\n\
<div class=\"line\">            || dagNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)</div>\n\
<div class=\"line\">            || dagNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>)</div>\n\
<div class=\"line\">            || dagNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a305a1a7e615931a31f8d932bb4f3a4c1\">MFn::kSubdiv</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;Baker&gt; Baker::create(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;               shapeNode,</div>\n\
<div class=\"line\">                                           <span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; shapePaths)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shapeNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;XformBaker&gt;(shapeNode, shapePaths);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (shapeNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;MeshBaker&gt;(shapeNode, shapePaths);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (shapeNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;NurbsBaker&gt;(shapeNode, shapePaths);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (shapeNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a305a1a7e615931a31f8d932bb4f3a4c1\">MFn::kSubdiv</a>)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;SubdBaker&gt;(shapeNode, shapePaths);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> shape(shapeNode, &amp;status);</div>\n\
<div class=\"line\">        assert(status == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shape.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a1d0bbd4d50dae591f8e003c0aedc8135\">typeId</a>() == ShapeNode::id) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::make_shared&lt;RecursiveBaker&gt;(shapeNode, shapePaths);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::shared_ptr&lt;Baker&gt;();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS Writer</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Writer</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        Writer(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>       compressLevel,</div>\n\
<div class=\"line\">               <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp;     timePerCycle,</div>\n\
<div class=\"line\">               <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp;     startTime)</div>\n\
<div class=\"line\">          : fCompressLevel(compressLevel)</div>\n\
<div class=\"line\">          , fTimePerCycleInSeconds(timePerCycle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>))</div>\n\
<div class=\"line\">          , fStartTimeInSeconds(startTime.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>))</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        Writer(<span class=\"keyword\">const</span> Writer&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">        Writer&amp; operator=(<span class=\"keyword\">const</span> Writer&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Write a sub-node hierarchy to the specified file.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> writeNode(<span class=\"keyword\">const</span> SubNode::Ptr&amp;           subNode,</div>\n\
<div class=\"line\">                          <span class=\"keyword\">const</span> MaterialGraphMap::Ptr&amp;  materials,</div>\n\
<div class=\"line\">                          <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp;            targetFile)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::shared_ptr&lt;CacheWriter&gt; writer = createWriter(</div>\n\
<div class=\"line\">                targetFile,</div>\n\
<div class=\"line\">                fCompressLevel);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!writer) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            writer-&gt;writeSubNodeHierarchy(</div>\n\
<div class=\"line\">                subNode,</div>\n\
<div class=\"line\">                fTimePerCycleInSeconds,</div>\n\
<div class=\"line\">                fStartTimeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (materials) {</div>\n\
<div class=\"line\">                writer-&gt;writeMaterials(</div>\n\
<div class=\"line\">                    materials,</div>\n\
<div class=\"line\">                    fTimePerCycleInSeconds,</div>\n\
<div class=\"line\">                    fStartTimeInSeconds);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Write a list of sub-node hierarchies to the specified file.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> writeNodes(<span class=\"keyword\">const</span> std::vector&lt;SubNode::Ptr&gt;&amp; subNodes,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> MaterialGraphMap::Ptr&amp;     materials,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp;               targetFile)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::shared_ptr&lt;CacheWriter&gt; writer = createWriter(</div>\n\
<div class=\"line\">                targetFile,</div>\n\
<div class=\"line\">                fCompressLevel);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!writer) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; subNode : subNodes) {</div>\n\
<div class=\"line\">                writer-&gt;writeSubNodeHierarchy(</div>\n\
<div class=\"line\">                    subNode,</div>\n\
<div class=\"line\">                    fTimePerCycleInSeconds,</div>\n\
<div class=\"line\">                    fStartTimeInSeconds);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (materials) {</div>\n\
<div class=\"line\">                writer-&gt;writeMaterials(materials,</div>\n\
<div class=\"line\">                    fTimePerCycleInSeconds,</div>\n\
<div class=\"line\">                    fStartTimeInSeconds);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>     fCompressLevel;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>   fTimePerCycleInSeconds;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>   fStartTimeInSeconds;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS Stat</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Stat</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        Stat(MUint64 bytesPerUnit)</div>\n\
<div class=\"line\">            : fMin(std::numeric_limits&lt;MUint64&gt;::max()),</div>\n\
<div class=\"line\">              fMax(0),</div>\n\
<div class=\"line\">              fTotal(0),</div>\n\
<div class=\"line\">              fInstancedTotal(0),</div>\n\
<div class=\"line\">              fBytesPerUnit(bytesPerUnit)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addSample(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const IndexBuffer&gt; buffer, <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> indicesPerElem)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            addSample(buffer-&gt;numIndices() / indicesPerElem, buffer.get());</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addSample(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt; buffer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            addSample(buffer-&gt;numVerts(), buffer.get());</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addSample(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>* buffer, <span class=\"keywordtype\">size_t</span> numIndices)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            addSample(numIndices, (<span class=\"keywordtype\">void</span>*)buffer);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addSample(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* buffer, <span class=\"keywordtype\">size_t</span> numVertices)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            addSample(numVertices, (<span class=\"keywordtype\">void</span>*)buffer);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addSample(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const VBOBuffer&gt; buffer, <span class=\"keywordtype\">size_t</span> numPrimitives)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            addSample(numPrimitives, buffer.get());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MUint64 getNbSamples()<span class=\"keyword\"> const        </span>{ <span class=\"keywordflow\">return</span> fUniqueEntries.size(); }</div>\n\
<div class=\"line\">        MUint64 getMin()<span class=\"keyword\"> const              </span>{ <span class=\"keywordflow\">return</span> fMin;}</div>\n\
<div class=\"line\">        MUint64 getMax()<span class=\"keyword\"> const              </span>{ <span class=\"keywordflow\">return</span> fMin;}</div>\n\
<div class=\"line\">        MUint64 getTotal()<span class=\"keyword\"> const            </span>{ <span class=\"keywordflow\">return</span> fTotal;}</div>\n\
<div class=\"line\">        MUint64 getInstancedTotal()<span class=\"keyword\"> const   </span>{ <span class=\"keywordflow\">return</span> fInstancedTotal;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> getAverage()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> double(getTotal())/double(getNbSamples());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MUint64 getSize()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fTotal * fBytesPerUnit;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> print(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> result;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (getNbSamples() == 0) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsZeroBuffersMsg, status),</div>\n\
<div class=\"line\">                    name);</div>\n\
<div class=\"line\">                result = msg;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(getSize(), memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers += (double)getNbSamples();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_avrg;    msg_avrg    += (double)getAverage();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_min;     msg_min     += (double)fMin;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_max;     msg_max     += (double)fMax;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_total;   msg_total   += (double)fTotal;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsBuffersMsg, status),</div>\n\
<div class=\"line\">                    name, msg_buffers, msg_avrg,</div>\n\
<div class=\"line\">                    msg_min, msg_max, msg_total, msg_memSize, memUnit);</div>\n\
<div class=\"line\">                result = msg;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addSample(MUint64 value, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* buffer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fUniqueEntries.insert(buffer).second) {</div>\n\
<div class=\"line\">                fMin = std::min(fMin, value);</div>\n\
<div class=\"line\">                fMax = std::max(fMax, value);</div>\n\
<div class=\"line\">                fTotal += value;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fInstancedTotal += value;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::unordered_set&lt;const void*&gt; fUniqueEntries;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MUint64         fMin;</div>\n\
<div class=\"line\">        MUint64         fMax;</div>\n\
<div class=\"line\">        MUint64         fTotal;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MUint64   fBytesPerUnit;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Total number of instanced geometry.</span></div>\n\
<div class=\"line\">        MUint64         fInstancedTotal;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS Stats</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Stats</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        Stats()</div>\n\
<div class=\"line\">            : fNbNodes(0),</div>\n\
<div class=\"line\">              fNbSubNodes(0),</div>\n\
<div class=\"line\">              fWires(     2 * <span class=\"keyword\">sizeof</span>(IndexBuffer::index_t)),</div>\n\
<div class=\"line\">              fTriangles( 3 * <span class=\"keyword\">sizeof</span>(IndexBuffer::index_t)),</div>\n\
<div class=\"line\">              fVerts(     3 * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>)),</div>\n\
<div class=\"line\">              fNormals(   3 * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>)),</div>\n\
<div class=\"line\">              fUVs(       2 * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>)),</div>\n\
<div class=\"line\">              fVP2Index(  <span class=\"keyword\">sizeof</span>(IndexBuffer::index_t)),</div>\n\
<div class=\"line\">              fVP2Vertex( <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>)),</div>\n\
<div class=\"line\">              fVBOIndex(  <span class=\"keyword\">sizeof</span>(IndexBuffer::index_t)),</div>\n\
<div class=\"line\">              fVBOVertex( <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>)),</div>\n\
<div class=\"line\">              fNbMaterialGraphs(0),</div>\n\
<div class=\"line\">              fNbMaterialNodes(0)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulateNode()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++fNbNodes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulateMaterialGraph(<span class=\"keyword\">const</span> MaterialGraph::Ptr&amp;)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++fNbMaterialGraphs;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulateMaterialNode(<span class=\"keyword\">const</span> MaterialNode::Ptr&amp;)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++fNbMaterialNodes;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulate(<span class=\"keyword\">const</span> ShapeData&amp; shape)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++fNbSubNodes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::SampleMap::value_type&amp; v :</div>\n\
<div class=\"line\">                          shape.getSamples()) {</div>\n\
<div class=\"line\">                accumSample(v.second);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulate(<span class=\"keyword\">const</span> ShapeData&amp; shape,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> time)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ++fNbSubNodes;</div>\n\
<div class=\"line\">            accumSample(shape.getSample(time));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> print(<a name=\"_a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result, <span class=\"keywordtype\">bool</span> printInstancedInfo)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_nbGeom;     msg_nbGeom     += fNbNodes;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_nbSubNodes; msg_nbSubNodes += fNbSubNodes;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsNbGeomMsg, status),</div>\n\
<div class=\"line\">                    msg_nbGeom, msg_nbSubNodes);</div>\n\
<div class=\"line\">                result.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fWires.print(    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsWiresMsg,     status)));</div>\n\
<div class=\"line\">            result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fTriangles.print(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsTrianglesMsg, status)));</div>\n\
<div class=\"line\">            result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fVerts.print(    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsVerticesMsg,  status)));</div>\n\
<div class=\"line\">            result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fNormals.print(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsNormalsMsg,   status)));</div>\n\
<div class=\"line\">            result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fUVs.print(      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsUVsMsg,       status)));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (printInstancedInfo) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msgInstWires; msgInstWires += (double)fWires.getInstancedTotal();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msgInstTris;  msgInstTris  += (double)fTriangles.getInstancedTotal();</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsTotalInstancedMsg, status),</div>\n\
<div class=\"line\">                    msgInstWires, msgInstTris);</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                MUint64 totalMem = (fWires.getSize() +</div>\n\
<div class=\"line\">                                    fTriangles.getSize() +</div>\n\
<div class=\"line\">                                    fVerts.getSize() +</div>\n\
<div class=\"line\">                                    fNormals.getSize() +</div>\n\
<div class=\"line\">                                    fUVs.getSize());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(totalMem, memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsSystemTotalMsg, status),</div>\n\
<div class=\"line\">                    msg_memSize, memUnit);</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                MUint64 totalMem = (fVBOIndex.getSize() + fVBOVertex.getSize());</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fVBOIndex.print( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsVBOIndexMsg,  status)));</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fVBOVertex.print(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsVBOVertexMsg, status)));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (Config::vp2OverrideAPI() != Config::kMPxDrawOverride) {</div>\n\
<div class=\"line\">                    result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fVP2Index.print( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsVP2IndexMsg,  status)));</div>\n\
<div class=\"line\">                    result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(fVP2Vertex.print(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsVP2VertexMsg, status)));</div>\n\
<div class=\"line\">                    totalMem += (fVP2Index.getSize() + fVP2Vertex.getSize());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(totalMem, memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsVideoTotalMsg, status),</div>\n\
<div class=\"line\">                    msg_memSize, memUnit);</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_nbGraphs;</div>\n\
<div class=\"line\">                msg_nbGraphs += fNbMaterialGraphs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_nbNodes;</div>\n\
<div class=\"line\">                msg_nbNodes  += fNbMaterialNodes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">                msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsMaterialsMsg, status),</div>\n\
<div class=\"line\">                    msg_nbGraphs, msg_nbNodes);</div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumSample(<span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample) {</div>\n\
<div class=\"line\">            accumIndexBuffer(fWires, sample-&gt;wireVertIndices(), 2);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> i=0; i&lt;sample-&gt;numIndexGroups(); ++i) {</div>\n\
<div class=\"line\">                accumIndexBuffer(fTriangles, sample-&gt;triangleVertIndices(i), 3);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            accumVertexBuffer(fVerts, sample-&gt;positions());</div>\n\
<div class=\"line\">            accumVertexBuffer(fNormals, sample-&gt;normals());</div>\n\
<div class=\"line\">            accumVertexBuffer(fUVs, sample-&gt;uvs());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumIndexBuffer(</div>\n\
<div class=\"line\">            Stat&amp; stat,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const IndexBuffer&gt; indexBuffer,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> indicesPerElem</div>\n\
<div class=\"line\">        )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (indexBuffer &amp;&amp; indexBuffer != UnitBoundingBox::indices()) {</div>\n\
<div class=\"line\">                stat.addSample(indexBuffer, indicesPerElem);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>* vp2Buffer = </div>\n\
<div class=\"line\">                        SubSceneOverride::lookup(indexBuffer);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vp2Buffer)</div>\n\
<div class=\"line\">                        fVP2Index.addSample(vp2Buffer, indexBuffer-&gt;numIndices());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const VBOBuffer&gt; vboBuffer =</div>\n\
<div class=\"line\">                        VBOBuffer::lookup(indexBuffer);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboBuffer)</div>\n\
<div class=\"line\">                        fVBOIndex.addSample(vboBuffer, indexBuffer-&gt;numIndices());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumVertexBuffer(</div>\n\
<div class=\"line\">            Stat&amp; stat,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const VertexBuffer&gt; vertexBuffer</div>\n\
<div class=\"line\">        )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (vertexBuffer &amp;&amp; vertexBuffer != UnitBoundingBox::positions()) {</div>\n\
<div class=\"line\">                stat.addSample(vertexBuffer);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* vp2Buffer = </div>\n\
<div class=\"line\">                        SubSceneOverride::lookup(vertexBuffer);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vp2Buffer)</div>\n\
<div class=\"line\">                        fVP2Vertex.addSample(</div>\n\
<div class=\"line\">                            vp2Buffer, 3 * vertexBuffer-&gt;numVerts());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const VBOBuffer&gt; vboBuffer =</div>\n\
<div class=\"line\">                        VBOBuffer::lookup(vertexBuffer);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboBuffer)</div>\n\
<div class=\"line\">                        fVBOVertex.addSample(</div>\n\
<div class=\"line\">                            vboBuffer, 3 * vertexBuffer-&gt;numVerts());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const VBOBuffer&gt; vboBuffer =</div>\n\
<div class=\"line\">                        VBOBuffer::lookupFlippedNormals(vertexBuffer);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (vboBuffer)</div>\n\
<div class=\"line\">                        fVBOVertex.addSample(</div>\n\
<div class=\"line\">                            vboBuffer, 3 * vertexBuffer-&gt;numVerts());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>  fNbNodes;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>  fNbSubNodes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Stat fWires;</div>\n\
<div class=\"line\">        Stat fTriangles;</div>\n\
<div class=\"line\">        Stat fVerts;</div>\n\
<div class=\"line\">        Stat fNormals;</div>\n\
<div class=\"line\">        Stat fUVs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Stat fVP2Index;</div>\n\
<div class=\"line\">        Stat fVP2Vertex;</div>\n\
<div class=\"line\">        Stat fVBOIndex;</div>\n\
<div class=\"line\">        Stat fVBOVertex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>  fNbMaterialGraphs;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>  fNbMaterialNodes;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS StatsVisitor</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>StatsVisitor : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        StatsVisitor() : fAtGivenTime(<span class=\"keyword\">false</span>) {}</div>\n\
<div class=\"line\">        StatsVisitor(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> time) : fAtGivenTime(<span class=\"keyword\">true</span>), fTime(time) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulateNode(<span class=\"keyword\">const</span> SubNode::Ptr&amp; topNode)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fStats.accumulateNode();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (topNode) {</div>\n\
<div class=\"line\">                topNode-&gt;accept(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulateMaterialGraph(<span class=\"keyword\">const</span> MaterialGraphMap::Ptr&amp; materials)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (materials) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> MaterialGraphMap::NamedMap::value_type&amp; val :</div>\n\
<div class=\"line\">                        materials-&gt;getGraphs()) {</div>\n\
<div class=\"line\">                    fStats.accumulateMaterialGraph(val.second);</div>\n\
<div class=\"line\">                    accumulateMaterialNode(val.second);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> accumulateMaterialNode(<span class=\"keyword\">const</span> MaterialGraph::Ptr&amp; material)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (material) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> MaterialGraph::NamedMap::value_type&amp; val :</div>\n\
<div class=\"line\">                        material-&gt;getNodes()) {</div>\n\
<div class=\"line\">                    fStats.accumulateMaterialNode(val.second);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> print(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result, <span class=\"keywordtype\">bool</span> printInstancedInfo)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            fStats.print(result, printInstancedInfo);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp;   <span class=\"comment\">/*xform*/</span>,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"comment\">// Recurse into children sub nodes. Expand all instances.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; child :</div>\n\
<div class=\"line\">                          subNode.getChildren() ) {</div>\n\
<div class=\"line\">                child-&gt;accept(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp;   shape,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     <span class=\"comment\">/*subNode*/</span>)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fAtGivenTime) {</div>\n\
<div class=\"line\">                fStats.accumulate(shape, fTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                fStats.accumulate(shape);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>  fAtGivenTime;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> fTime;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Stats fStats;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS DumpHierarchyVisitor</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DumpHierarchyVisitor : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        DumpHierarchyVisitor(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result)</div>\n\
<div class=\"line\">            : fResult(result),</div>\n\
<div class=\"line\">              fLevel(0)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp;   xform,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;xform name = &quot;</span> &lt;&lt; subNode.getName().asChar()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, tt = &quot;</span>  &lt;&lt; subNode.transparentType()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)&amp;subNode</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot; {&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ++fLevel;</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string indent(kIndent*fLevel, <span class=\"charliteral\">&#39; &#39;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::SampleMap::value_type&amp; sample :</div>\n\
<div class=\"line\">                              xform.getSamples()) {</div>\n\
<div class=\"line\">                    ostringstream tmp;</div>\n\
<div class=\"line\">                    tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;time = &quot;</span> &lt;&lt; setw(10) &lt;&lt; sample.first</div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)sample.second.get()</div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;, vis = &quot;</span> &lt;&lt; sample.second-&gt;visibility()</div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;, bbox = (&quot;</span></div>\n\
<div class=\"line\">                        &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().min().x &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                        &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().min().y &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                        &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().min().z &lt;&lt; <span class=\"stringliteral\">&quot;) - (&quot;</span></div>\n\
<div class=\"line\">                        &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().max().x &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                        &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().max().y &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                        &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().max().z &lt;&lt; <span class=\"stringliteral\">&quot;)&quot;</span></div>\n\
<div class=\"line\">                        &lt;&lt; ends;</div>\n\
<div class=\"line\">                    fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Recurse into children sub nodes. Expand all instances.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; child :</div>\n\
<div class=\"line\">                              subNode.getChildren() ) {</div>\n\
<div class=\"line\">                    child-&gt;accept(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            --fLevel;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;}&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp;   shape,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;shape name = &quot;</span> &lt;&lt; subNode.getName().asChar()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, tt = &quot;</span>  &lt;&lt; subNode.transparentType()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)&amp;subNode</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot; {&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ++fLevel;</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string indent(kIndent*fLevel, <span class=\"charliteral\">&#39; &#39;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::SampleMap::value_type&amp; sample :</div>\n\
<div class=\"line\">                              shape.getSamples()) {</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        ostringstream tmp;</div>\n\
<div class=\"line\">                        tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;time = &quot;</span> &lt;&lt; setw(10) &lt;&lt; sample.first</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)sample.second.get()</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;, vis = &quot;</span> &lt;&lt; sample.second-&gt;visibility()</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;, nT = &quot;</span> &lt;&lt; sample.second-&gt;numTriangles()</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;, nW = &quot;</span> &lt;&lt; sample.second-&gt;numWires()</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;, nV = &quot;</span> &lt;&lt; sample.second-&gt;numVerts()</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                        fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        ostringstream tmp;</div>\n\
<div class=\"line\">                        tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;P = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)sample.second-&gt;positions().get()</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;, N = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)sample.second-&gt;normals().get()</div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                        fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        ostringstream tmp;</div>\n\
<div class=\"line\">                        tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;C = (&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;diffuseColor()[0] &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;diffuseColor()[1] &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;diffuseColor()[2] &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;diffuseColor()[3] &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;), bbox = (&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().min().x &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().min().y &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().min().z &lt;&lt; <span class=\"stringliteral\">&quot;) - (&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().max().x &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().max().y &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; setw(8) &lt;&lt; sample.second-&gt;boundingBox().max().z &lt;&lt; <span class=\"stringliteral\">&quot;)&quot;</span></div>\n\
<div class=\"line\">                            &lt;&lt; ends;</div>\n\
<div class=\"line\">                        fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        ostringstream tmp;</div>\n\
<div class=\"line\">                        tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                            &lt;&lt; <span class=\"stringliteral\">&quot;bbox place holder = &quot;</span> &lt;&lt; (sample.second-&gt;isBoundingBoxPlaceHolder() ? <span class=\"stringliteral\">&quot;yes&quot;</span> : <span class=\"stringliteral\">&quot;no&quot;</span>)</div>\n\
<div class=\"line\">                            &lt;&lt; ends;</div>\n\
<div class=\"line\">                        fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!shape.getMaterials().empty()) {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;materials = &quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; material : shape.getMaterials()) {</div>\n\
<div class=\"line\">                    tmp &lt;&lt; material.asChar() &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                tmp &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            --fLevel;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;}&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> kIndent = 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; fResult;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>           fLevel;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS DumpMaterialVisitor</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DumpMaterialVisitor</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        DumpMaterialVisitor(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result)</div>\n\
<div class=\"line\">            : fResult(result),</div>\n\
<div class=\"line\">              fLevel(0)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> dumpMaterials(<span class=\"keyword\">const</span> MaterialGraphMap::Ptr&amp; materials)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialGraphMap::NamedMap::value_type&amp; val : materials-&gt;getGraphs())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MaterialGraph::Ptr&amp; graph = val.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    ostringstream tmp;</div>\n\
<div class=\"line\">                    tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;material graph name = &quot;</span> &lt;&lt; graph-&gt;name().asChar()</div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;, nNodes = &quot;</span> &lt;&lt; graph-&gt;getNodes().size()</div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)graph.get()</div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot; {&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                    fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                ++fLevel;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialGraph::NamedMap::value_type&amp; val : graph-&gt;getNodes())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    dumpMaterialNode(val.second);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                --fLevel;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    ostringstream tmp;</div>\n\
<div class=\"line\">                    tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                        &lt;&lt; <span class=\"stringliteral\">&quot;}&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                    fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> dumpMaterialNode(<span class=\"keyword\">const</span> MaterialNode::Ptr&amp; node)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;material node name = &quot;</span> &lt;&lt; node-&gt;name().asChar()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, type = &quot;</span> &lt;&lt; node-&gt;type()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)node.get()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot; {&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ++fLevel;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialNode::PropertyMap::value_type&amp; val : node-&gt;properties())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                dumpMaterialProperty(val.second);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            --fLevel;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;}&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> dumpMaterialProperty(<span class=\"keyword\">const</span> MaterialProperty::Ptr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;prop name = &quot;</span> &lt;&lt; prop-&gt;name().asChar()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, type = &quot;</span> &lt;&lt; propertyTypeString(prop)</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)prop.get()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot; {&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ++fLevel;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialProperty::SampleMap::value_type&amp; val : prop-&gt;getSamples())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;time = &quot;</span> &lt;&lt; setw(10) &lt;&lt; val.first</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, value = &quot;</span> &lt;&lt; propertyValueString(val.first, prop)</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, ptr = &quot;</span> &lt;&lt; (<span class=\"keywordtype\">void</span>*)val.second.get()</div>\n\
<div class=\"line\">                    &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialNode::Ptr     srcNode = prop-&gt;srcNode();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialProperty::Ptr srcProp = prop-&gt;srcProp();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcNode &amp;&amp; srcProp) {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;src node = &quot;</span> &lt;&lt; srcNode-&gt;name().asChar()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, src prop = &quot;</span> &lt;&lt; srcProp-&gt;name().asChar()</div>\n\
<div class=\"line\">                    &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            --fLevel;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ostringstream tmp;</div>\n\
<div class=\"line\">                tmp &lt;&lt; setw(kIndent*fLevel) &lt;&lt; <span class=\"charliteral\">&#39; &#39;</span></div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;}&quot;</span> &lt;&lt; ends;</div>\n\
<div class=\"line\">                fResult.append(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(tmp.str().c_str()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string propertyTypeString(<span class=\"keyword\">const</span> MaterialProperty::Ptr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (prop-&gt;type()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kBool:   <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;bool&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kInt32:  <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;int32&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat:  <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;float&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat2: <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;float2&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat3: <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;float3&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kRGB:    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;rgb&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kString: <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;string&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:             assert(0); <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;unknown&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string propertyValueString(<span class=\"keywordtype\">double</span> seconds, <span class=\"keyword\">const</span> MaterialProperty::Ptr&amp; prop)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::ostringstream tmp;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (prop-&gt;type()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kBool:</div>\n\
<div class=\"line\">                tmp &lt;&lt; (prop-&gt;asBool(seconds) ? <span class=\"stringliteral\">&quot;true&quot;</span> : <span class=\"stringliteral\">&quot;false&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kInt32:</div>\n\
<div class=\"line\">                tmp &lt;&lt; prop-&gt;asInt32(seconds);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat:</div>\n\
<div class=\"line\">                tmp &lt;&lt; prop-&gt;asFloat(seconds);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat2:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> x, y;</div>\n\
<div class=\"line\">                    prop-&gt;asFloat2(seconds, x, y);</div>\n\
<div class=\"line\">                    tmp &lt;&lt; <span class=\"stringliteral\">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"stringliteral\">&quot;)&quot;</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat3:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> x, y, z;</div>\n\
<div class=\"line\">                    prop-&gt;asFloat3(seconds, x, y, z);</div>\n\
<div class=\"line\">                    tmp &lt;&lt; <span class=\"stringliteral\">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; z &lt;&lt; <span class=\"stringliteral\">&quot;)&quot;</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kRGB:</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> c = prop-&gt;asColor(seconds);</div>\n\
<div class=\"line\">                    tmp &lt;&lt; <span class=\"stringliteral\">&quot;rgb(&quot;</span> &lt;&lt; c.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; c.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> &lt;&lt; <span class=\"stringliteral\">&quot;,&quot;</span> &lt;&lt; c.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> &lt;&lt; <span class=\"stringliteral\">&quot;)&quot;</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kString:</div>\n\
<div class=\"line\">                tmp &lt;&lt; prop-&gt;asString(seconds).asChar();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                assert(0);</div>\n\
<div class=\"line\">                tmp &lt;&lt; <span class=\"stringliteral\">&quot;unknown type&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> tmp.str();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> kIndent = 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; fResult;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>           fLevel;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS ProgressBar</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ProgressBar</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ProgressBar(<span class=\"keyword\">const</span> <a name=\"_a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource_id.html\">MStringResourceId</a>&amp; msg, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> max)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Display a progress bar if Maya is running in UI mode</span></div>\n\
<div class=\"line\">            fShowProgress = (<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac7296da94b1d0b659833fc653a6af10e\">MGlobal::mayaState</a>() == <a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#afb0008b4212928b7913ba9cfc64fe88bafd5ecc6725f6695a70a949747cf89546\">MGlobal::kInteractive</a>);</div>\n\
<div class=\"line\">            reset(msg, max);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> reset(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource_id.html\">MStringResourceId</a>&amp; msg, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> max)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">            beginProgress(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(msg, status), max);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ~ProgressBar()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            endProgress();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> stepProgress()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fShowProgress) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;progressBar -e -s 1 $gMainProgressBar&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isCancelled()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> isCancelled = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fShowProgress) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;progressBar -q -ic $gMainProgressBar&quot;</span>, isCancelled);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isCancelled) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> interruptMsg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kInterruptedMsg, status);</div>\n\
<div class=\"line\">                <a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(interruptMsg);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Forbidden and not implemented.</span></div>\n\
<div class=\"line\">        ProgressBar(<span class=\"keyword\">const</span> ProgressBar&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ProgressBar&amp; operator=(<span class=\"keyword\">const</span> ProgressBar&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ProgressBar(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; msg, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> max)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            beginProgress(msg, max);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> beginProgress(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; msg, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> max)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fShowProgress) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> maxValue, progressBarCmd;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Progress from 0 to max</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (max &lt;= 0) {</div>\n\
<div class=\"line\">                    max = 1;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                maxValue += max;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Clear previous isCancelled flag</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;progressBar -e -bp -ii 1 $gMainProgressBar&quot;</span>);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;progressBar -e -ep $gMainProgressBar&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Initialize the progress bar</span></div>\n\
<div class=\"line\">                progressBarCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;progressBar -e -bp -ii 1 -st \\&quot;^1s\\&quot; -max ^2s $gMainProgressBar&quot;</span>,</div>\n\
<div class=\"line\">                    msg, maxValue);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(progressBarCmd);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> endProgress()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fShowProgress) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;progressBar -e -ep $gMainProgressBar&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> fShowProgress;  <span class=\"comment\">// whether to show the progress bar</span></div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS GroupCreator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>GroupCreator</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        GroupCreator() {}</div>\n\
<div class=\"line\">        ~GroupCreator() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> addChild(<span class=\"keyword\">const</span> SubNode::MPtr&amp; childNode)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            XformData::Ptr childXform = std::dynamic_pointer_cast&lt;<span class=\"keyword\">const</span> XformData&gt;(</div>\n\
<div class=\"line\">                    childNode-&gt;getData());</div>\n\
<div class=\"line\">            assert(childXform);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (childXform) {</div>\n\
<div class=\"line\">                fChildNodes.push_back(childNode);</div>\n\
<div class=\"line\">                fChildXforms.push_back(childXform);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> group()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            assert(!fGroup);</div>\n\
<div class=\"line\">            fGroup = XformData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Collect time samples</span></div>\n\
<div class=\"line\">            std::set&lt;double&gt; times;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::Ptr child : fChildXforms) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::SampleMap::value_type&amp; val : child-&gt;getSamples()) {</div>\n\
<div class=\"line\">                    times.insert(val.first);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::set&lt;double&gt;::const_iterator timeIt  = times.begin();</div>\n\
<div class=\"line\">            std::set&lt;double&gt;::const_iterator timeEnd = times.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (timeIt != timeEnd) {</div>\n\
<div class=\"line\">                fGroup-&gt;addSample(XformSample::create(</div>\n\
<div class=\"line\">                    *timeIt,</div>\n\
<div class=\"line\">                    <a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>,</div>\n\
<div class=\"line\">                    <a name=\"_a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(),</div>\n\
<div class=\"line\">                    <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        SubNode::MPtr getSubNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            SubNode::MPtr subNode = SubNode::create(name, fGroup);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::MPtr&amp; childNode : fChildNodes) {</div>\n\
<div class=\"line\">                SubNode::connect(subNode, childNode);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> subNode;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">        GroupCreator(<span class=\"keyword\">const</span> GroupCreator&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GroupCreator&amp; operator= (<span class=\"keyword\">const</span> GroupCreator&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt;SubNode::MPtr&gt;   fChildNodes;</div>\n\
<div class=\"line\">        std::vector&lt;XformData::Ptr&gt;  fChildXforms;</div>\n\
<div class=\"line\">        XformData::MPtr              fGroup;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS XformFreezer</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>XformFreezer : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::vector&lt;ShapeData::Ptr&gt;                            FrozenGeometries;</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::vector&lt;std::pair&lt;XformData::Ptr,ShapeData::Ptr&gt; &gt; AnimatedGeometries;</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::set&lt;double&gt;                                       TimeSet;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        XformFreezer(<span class=\"keyword\">const</span> XformData::Ptr&amp; parentXform,</div>\n\
<div class=\"line\">                     FrozenGeometries&amp;     frozenGeometries,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">bool</span>                  dontFreezeAnimatedObjects,</div>\n\
<div class=\"line\">                     AnimatedGeometries&amp;   animatedGeometries)</div>\n\
<div class=\"line\">            : fParentXform(parentXform),</div>\n\
<div class=\"line\">              fFrozenGeometries(frozenGeometries),</div>\n\
<div class=\"line\">              fDontFreezeAnimatedObjects(dontFreezeAnimatedObjects),</div>\n\
<div class=\"line\">              fAnimatedGeometries(animatedGeometries)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp; xform,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;   subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"comment\">// Aggregate the list of sample times.</span></div>\n\
<div class=\"line\">            TimeSet times;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                    fParentXform-&gt;getSamples() ) {</div>\n\
<div class=\"line\">                times.insert(val.first);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                    xform.getSamples()) {</div>\n\
<div class=\"line\">                times.insert(val.first);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Freeze xform sample</span></div>\n\
<div class=\"line\">            XformData::MPtr frozenXform = XformData::create();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>&amp; time : times) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Parent xform sample</span></div>\n\
<div class=\"line\">                std::shared_ptr&lt;const XformSample&gt; parentSample =</div>\n\
<div class=\"line\">                        fParentXform-&gt;getSample(time);</div>\n\
<div class=\"line\">                <span class=\"comment\">// Child xform sample</span></div>\n\
<div class=\"line\">                std::shared_ptr&lt;const XformSample&gt; sample =</div>\n\
<div class=\"line\">                        xform.getSample(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                frozenXform-&gt;addSample(XformSample::create(</div>\n\
<div class=\"line\">                    time,</div>\n\
<div class=\"line\">                    sample-&gt;xform() * parentSample-&gt;xform(),</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(),  <span class=\"comment\">// not used</span></div>\n\
<div class=\"line\">                    sample-&gt;visibility() &amp;&amp; parentSample-&gt;visibility()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Recursive into children</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; child : subNode.getChildren()) {</div>\n\
<div class=\"line\">                XformFreezer xformFreezer(frozenXform, fFrozenGeometries,</div>\n\
<div class=\"line\">                    fDontFreezeAnimatedObjects, fAnimatedGeometries);</div>\n\
<div class=\"line\">                child-&gt;accept(xformFreezer);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp; shape,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;   subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"comment\">// Don&#39;t freeze animated objects for motion blur.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fDontFreezeAnimatedObjects) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// If the shape matches all the following conditions, we don&#39;t freeze/consolidate it.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// 1) Any of the parents (direct,indirect) is animated.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// 2) Shape is not animated.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fParentXform-&gt;getSamples().size() &gt; 1 &amp;&amp; shape.getSamples().size() &lt;= 1) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Duplicate the xform data.</span></div>\n\
<div class=\"line\">                    XformData::MPtr animatedXform = XformData::create();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                            fParentXform-&gt;getSamples()) {</div>\n\
<div class=\"line\">                        animatedXform-&gt;addSample(val.second);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Duplicate the shape data.</span></div>\n\
<div class=\"line\">                    ShapeData::MPtr animatedShape = ShapeData::create();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                            shape.getSamples()) {</div>\n\
<div class=\"line\">                        animatedShape-&gt;addSample(val.second);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    animatedShape-&gt;setMaterials(shape.getMaterials());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Give up. We don&#39;t freeze and consolidate shapes with</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// animated xforms.</span></div>\n\
<div class=\"line\">                    fAnimatedGeometries.push_back(</div>\n\
<div class=\"line\">                        std::make_pair(animatedXform, animatedShape));</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Aggregate the list of sample times.</span></div>\n\
<div class=\"line\">            TimeSet times;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                    fParentXform-&gt;getSamples()) {</div>\n\
<div class=\"line\">                times.insert(val.first);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                    shape.getSamples()) {</div>\n\
<div class=\"line\">                times.insert(val.first);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Freeze shape sample</span></div>\n\
<div class=\"line\">            ShapeData::MPtr frozenShape = ShapeData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            TimeSet::const_iterator it  = times.begin();</div>\n\
<div class=\"line\">            TimeSet::const_iterator end = times.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != end) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// The first xform and shape sample</span></div>\n\
<div class=\"line\">                std::shared_ptr&lt;const XformSample&gt; xformSample =</div>\n\
<div class=\"line\">                        fParentXform-&gt;getSample(*it);</div>\n\
<div class=\"line\">                std::shared_ptr&lt;const ShapeSample&gt; shapeSample =</div>\n\
<div class=\"line\">                        shape.getSample(*it);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Freeze the shape sample</span></div>\n\
<div class=\"line\">                std::shared_ptr&lt;const ShapeSample&gt; frozenSample;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (xformSample-&gt;visibility() &amp;&amp; shapeSample-&gt;visibility()) {</div>\n\
<div class=\"line\">                    frozenSample = freezeSample(*it, xformSample, shapeSample);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    frozenSample = ShapeSample::createEmptySample(*it);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Add the frozen shape sample</span></div>\n\
<div class=\"line\">                frozenShape-&gt;addSample(frozenSample);</div>\n\
<div class=\"line\">                ++it;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (; it != end; ++it) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Save the previous sample</span></div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const XformSample&gt; prevXformSample = xformSample;</div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const ShapeSample&gt; prevShapeSample = shapeSample;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// The next xform and shape sample</span></div>\n\
<div class=\"line\">                    xformSample = fParentXform-&gt;getSample(*it);</div>\n\
<div class=\"line\">                    shapeSample = shape.getSample(*it);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (xformSample-&gt;visibility() &amp;&amp; shapeSample-&gt;visibility()) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!xformSample-&gt;xform().isEquivalent(prevXformSample-&gt;xform()) ||</div>\n\
<div class=\"line\">                            xformSample-&gt;visibility() != prevXformSample-&gt;visibility() ||</div>\n\
<div class=\"line\">                            shapeSample-&gt;wireVertIndices() != prevShapeSample-&gt;wireVertIndices() ||</div>\n\
<div class=\"line\">                            shapeSample-&gt;triangleVertexIndexGroups() != prevShapeSample-&gt;triangleVertexIndexGroups() ||</div>\n\
<div class=\"line\">                            shapeSample-&gt;positions() != prevShapeSample-&gt;positions() ||</div>\n\
<div class=\"line\">                            shapeSample-&gt;normals()   != prevShapeSample-&gt;normals() ||</div>\n\
<div class=\"line\">                            shapeSample-&gt;diffuseColor() != prevShapeSample-&gt;diffuseColor() ||</div>\n\
<div class=\"line\">                            shapeSample-&gt;visibility() != prevShapeSample-&gt;visibility())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// Something changed, need to re-freeze the shape sample</span></div>\n\
<div class=\"line\">                            frozenSample = freezeSample(*it, xformSample, shapeSample);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// Reuse the last freezeSample() result.</span></div>\n\
<div class=\"line\">                            std::shared_ptr&lt;ShapeSample&gt; newFrozenSample =</div>\n\
<div class=\"line\">                                ShapeSample::create(</div>\n\
<div class=\"line\">                                *it,</div>\n\
<div class=\"line\">                                shapeSample-&gt;numWires(),</div>\n\
<div class=\"line\">                                shapeSample-&gt;numVerts(),</div>\n\
<div class=\"line\">                                shapeSample-&gt;wireVertIndices(),</div>\n\
<div class=\"line\">                                shapeSample-&gt;triangleVertexIndexGroups(),</div>\n\
<div class=\"line\">                                frozenSample-&gt;positions(),</div>\n\
<div class=\"line\">                                frozenSample-&gt;boundingBox(),</div>\n\
<div class=\"line\">                                shapeSample-&gt;diffuseColor(),</div>\n\
<div class=\"line\">                                xformSample-&gt;visibility() &amp;&amp; shapeSample-&gt;visibility());</div>\n\
<div class=\"line\">                            newFrozenSample-&gt;setNormals(frozenSample-&gt;normals());</div>\n\
<div class=\"line\">                            newFrozenSample-&gt;setUVs(shapeSample-&gt;uvs());</div>\n\
<div class=\"line\">                            frozenSample = newFrozenSample;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        frozenSample = ShapeSample::createEmptySample(*it);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Add the frozen shape sample</span></div>\n\
<div class=\"line\">                    frozenShape-&gt;addSample(frozenSample);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            frozenShape-&gt;setMaterials(shape.getMaterials());</div>\n\
<div class=\"line\">            fFrozenGeometries.push_back(frozenShape);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        std::shared_ptr&lt;const ShapeSample&gt; freezeSample(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> time,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp; xform,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; shape)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numWires = shape-&gt;numWires();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numVerts = shape-&gt;numVerts();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt; wireVertIndices =</div>\n\
<div class=\"line\">                    shape-&gt;wireVertIndices();</div>\n\
<div class=\"line\">            std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; triangleVertexIndexGroups =</div>\n\
<div class=\"line\">                    shape-&gt;triangleVertexIndexGroups();</div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt; uvs =</div>\n\
<div class=\"line\">                    shape-&gt;uvs();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> diffuseColor = shape-&gt;diffuseColor();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> visibility = shape-&gt;visibility() &amp;&amp; xform-&gt;visibility();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Check bad polys</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numWires == 0 || numVerts == 0 || !wireVertIndices || </div>\n\
<div class=\"line\">                    triangleVertexIndexGroups.empty()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> ShapeSample::createEmptySample(time);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt; positions;</div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt; normals;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> boundingBox;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> xformMatrix = xform-&gt;xform();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (xformMatrix.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a08b908d18dfbdf508f082601e5ae7df5\">isEquivalent</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>)) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Nothing to bake for an identity transform.</span></div>\n\
<div class=\"line\">                positions    = shape-&gt;positions();</div>\n\
<div class=\"line\">                normals      = shape-&gt;normals();</div>\n\
<div class=\"line\">                boundingBox  = shape-&gt;boundingBox();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> xform[4][4];</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> xformIT[4][4];</div>\n\
<div class=\"line\">                xformMatrix.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#afc8a36464bb71526e9d2bc0361f643cf\">get</a>(xform);</div>\n\
<div class=\"line\">                xformMatrix.<a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>().<a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a6fadbac6023eb9d361176a87b73063dc\">transpose</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#afc8a36464bb71526e9d2bc0361f643cf\">get</a>(xformIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> isReflection = xformMatrix.<a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#adcbd22bb9bbae2691f231c12c4c8cca1\">det3x3</a>() &lt; 0.0;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (isReflection) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Change the winding order of the triangles if</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the matrix contains a reflection along one the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// axis to preserve front facing.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; newTriangleVertexIndexGroups;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp; srcIdxBuf :</div>\n\
<div class=\"line\">                                  triangleVertexIndexGroups) {</div>\n\
<div class=\"line\">                        <span class=\"keyword\">typedef</span> IndexBuffer::index_t index_t;</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numIndices = srcIdxBuf-&gt;numIndices();</div>\n\
<div class=\"line\">                        IndexBuffer::ReadInterfacePtr readable = srcIdxBuf-&gt;readableInterface();</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> index_t* srcIndices = readable-&gt;get();</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> GPUCache::shared_array&lt;IndexBuffer::index_t&gt; dstIndices(</div>\n\
<div class=\"line\">                            <span class=\"keyword\">new</span> index_t[numIndices]);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i=0; i&lt;numIndices; i+=3) {</div>\n\
<div class=\"line\">                            dstIndices[i + 0] = srcIndices[i + 2];</div>\n\
<div class=\"line\">                            dstIndices[i + 1] = srcIndices[i + 1];</div>\n\
<div class=\"line\">                            dstIndices[i + 2] = srcIndices[i + 0];</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        std::shared_ptr&lt;IndexBuffer&gt; dstIdxBuf(</div>\n\
<div class=\"line\">                            IndexBuffer::create(</div>\n\
<div class=\"line\">                                SharedArray&lt;index_t&gt;::create(dstIndices, numIndices)));</div>\n\
<div class=\"line\">                        newTriangleVertexIndexGroups.push_back(dstIdxBuf);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    triangleVertexIndexGroups.swap(newTriangleVertexIndexGroups);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                VertexBuffer::ReadInterfacePtr srcPosRead = shape-&gt;positions()-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* srcPositions = srcPosRead-&gt;get();</div>\n\
<div class=\"line\">                VertexBuffer::ReadInterfacePtr srcNormRead = shape-&gt;normals()-&gt;readableInterface();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* srcNormals   = srcNormRead-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                GPUCache::shared_array&lt;float&gt; dstPositions(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[3 * numVerts]);</div>\n\
<div class=\"line\">                GPUCache::shared_array&lt;float&gt; dstNormals(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[3 * numVerts]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> minX = +std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> minY = +std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> minZ = +std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> maxX = -std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> maxY = -std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> maxZ = -std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i=0; i&lt;numVerts; ++i) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> x = srcPositions[3*i + 0];</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> y = srcPositions[3*i + 1];</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> z = srcPositions[3*i + 2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> xp =</div>\n\
<div class=\"line\">                        xform[0][0] * x + xform[1][0] * y + xform[2][0] * z + xform[3][0];</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> yp =</div>\n\
<div class=\"line\">                        xform[0][1] * x + xform[1][1] * y + xform[2][1] * z + xform[3][1];</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> zp =</div>\n\
<div class=\"line\">                        xform[0][2] * x + xform[1][2] * y + xform[2][2] * z + xform[3][2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    minX = std::min(xp, minX);</div>\n\
<div class=\"line\">                    minY = std::min(yp, minY);</div>\n\
<div class=\"line\">                    minZ = std::min(zp, minZ);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    maxX = std::max(xp, maxX);</div>\n\
<div class=\"line\">                    maxY = std::max(yp, maxY);</div>\n\
<div class=\"line\">                    maxZ = std::max(zp, maxZ);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    dstPositions[3*i + 0] = xp;</div>\n\
<div class=\"line\">                    dstPositions[3*i + 1] = yp;</div>\n\
<div class=\"line\">                    dstPositions[3*i + 2] = zp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> nx = srcNormals[3*i + 0];</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ny = srcNormals[3*i + 1];</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> nz = srcNormals[3*i + 2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    dstNormals[3*i + 0] =</div>\n\
<div class=\"line\">                        xformIT[0][0] * nx + xformIT[1][0] * ny + xformIT[2][0] * nz + xformIT[3][0];</div>\n\
<div class=\"line\">                    dstNormals[3*i + 1] =</div>\n\
<div class=\"line\">                        xformIT[0][1] * nx + xformIT[1][1] * ny + xformIT[2][1] * nz + xformIT[3][1];</div>\n\
<div class=\"line\">                    dstNormals[3*i + 2] =</div>\n\
<div class=\"line\">                        xformIT[0][2] * nx + xformIT[1][2] * ny + xformIT[2][2] * nz + xformIT[3][2];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                positions = VertexBuffer::createPositions(</div>\n\
<div class=\"line\">                    SharedArray&lt;float&gt;::create(dstPositions, 3 * numVerts));</div>\n\
<div class=\"line\">                normals   = VertexBuffer::createNormals(</div>\n\
<div class=\"line\">                    SharedArray&lt;float&gt;::create(dstNormals, 3 * numVerts));</div>\n\
<div class=\"line\">                boundingBox = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(<a name=\"_a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(minX, minY, minZ),</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>(maxX, maxY, maxZ));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::shared_ptr&lt;ShapeSample&gt; frozenSample =</div>\n\
<div class=\"line\">                ShapeSample::create(</div>\n\
<div class=\"line\">                    time,</div>\n\
<div class=\"line\">                    numWires,</div>\n\
<div class=\"line\">                    numVerts,</div>\n\
<div class=\"line\">                    wireVertIndices,</div>\n\
<div class=\"line\">                    triangleVertexIndexGroups,</div>\n\
<div class=\"line\">                    positions,</div>\n\
<div class=\"line\">                    boundingBox,</div>\n\
<div class=\"line\">                    diffuseColor,</div>\n\
<div class=\"line\">                    visibility);</div>\n\
<div class=\"line\">            frozenSample-&gt;setNormals(normals);</div>\n\
<div class=\"line\">            frozenSample-&gt;setUVs(uvs);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> frozenSample;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">        XformFreezer(<span class=\"keyword\">const</span> XformFreezer&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> XformFreezer&amp; operator= (<span class=\"keyword\">const</span> XformFreezer&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        XformData::Ptr      fParentXform;</div>\n\
<div class=\"line\">        FrozenGeometries&amp;   fFrozenGeometries;</div>\n\
<div class=\"line\">        AnimatedGeometries&amp; fAnimatedGeometries;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                fDontFreezeAnimatedObjects;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS ConsolidateBuckets</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ConsolidateBuckets</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>BucketKey</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::map&lt;double,MColor&gt; DiffuseColorMap;</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::map&lt;double,bool&gt;   VisibilityMap;</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::map&lt;double,size_t&gt; IndexGroupMap;</div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> std::vector&lt;MString&gt;    MaterialsAssignment;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            BucketKey(<span class=\"keyword\">const</span> ShapeData::Ptr&amp; shape)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ShapeData::SampleMap::const_iterator it  = shape-&gt;getSamples().begin();</div>\n\
<div class=\"line\">                ShapeData::SampleMap::const_iterator end = shape-&gt;getSamples().end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (it != end) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> diffuseColor = (*it).second-&gt;diffuseColor();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span>   visibility   = (*it).second-&gt;visibility();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> indexGroups  = (*it).second-&gt;numIndexGroups();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    fDiffuseColor[(*it).first] = diffuseColor;</div>\n\
<div class=\"line\">                    fVisibility[(*it).first]    = visibility;</div>\n\
<div class=\"line\">                    fIndexGroup[(*it).first]   = indexGroups;</div>\n\
<div class=\"line\">                    ++it;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (; it != end; ++it) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> prevDiffuseColor = diffuseColor;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span>   prevVisibility   = visibility;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">size_t</span> prevIndexGroups  = indexGroups;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> diffuseColor = (*it).second-&gt;diffuseColor();</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span>   visibility   = (*it).second-&gt;visibility();</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">size_t</span> indexGroups  = (*it).second-&gt;numIndexGroups();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (prevDiffuseColor != diffuseColor) {</div>\n\
<div class=\"line\">                            fDiffuseColor[(*it).first] = diffuseColor;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (prevVisibility != visibility) {</div>\n\
<div class=\"line\">                            fVisibility[(*it).first]    = visibility;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (prevIndexGroups != indexGroups) {</div>\n\
<div class=\"line\">                            fIndexGroup[(*it).first]   = indexGroups;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fMaterials = shape-&gt;getMaterials();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">struct </span>Hash</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::size_t operator()(<span class=\"keyword\">const</span> BucketKey&amp; key)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">                </span>{</div>\n\
<div class=\"line\">                    std::size_t seed = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> DiffuseColorMap::value_type&amp; val : key.fDiffuseColor) {</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.first);</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.second.r);</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.second.g);</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.second.b);</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.second.a);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> VisibilityMap::value_type&amp; val : key.fVisibility) {</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.first);</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.second);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> IndexGroupMap::value_type&amp; val : key.fIndexGroup) {</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.first);</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, val.second);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; material : key.fMaterials) {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = material.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* begin = material.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">size_t</span> hash = GPUCache::hash_range(begin, begin + length);</div>\n\
<div class=\"line\">                        GPUCache::hash_combine(seed, hash);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> seed;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">struct </span>EqualTo</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> operator()(<span class=\"keyword\">const</span> BucketKey&amp; x, <span class=\"keyword\">const</span> BucketKey&amp; y)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">                </span>{</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> x.fDiffuseColor == y.fDiffuseColor &amp;&amp;</div>\n\
<div class=\"line\">                            x.fVisibility == y.fVisibility &amp;&amp;</div>\n\
<div class=\"line\">                            x.fIndexGroup == y.fIndexGroup &amp;&amp;</div>\n\
<div class=\"line\">                            x.fMaterials == y.fMaterials;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            DiffuseColorMap     fDiffuseColor;</div>\n\
<div class=\"line\">            VisibilityMap       fVisibility;</div>\n\
<div class=\"line\">            IndexGroupMap       fIndexGroup;</div>\n\
<div class=\"line\">            MaterialsAssignment fMaterials;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::multimap&lt;size_t,ShapeData::Ptr&gt;  Bucket;</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::unordered_map&lt;BucketKey,Bucket,BucketKey::Hash,BucketKey::EqualTo&gt; BucketMap;</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::list&lt;Bucket&gt; BucketList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ConsolidateBuckets(<span class=\"keyword\">const</span> XformFreezer::FrozenGeometries&amp; shapes)</div>\n\
<div class=\"line\">            : fShapes(shapes)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> divide()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::Ptr&amp; shape : fShapes) {</div>\n\
<div class=\"line\">                BucketKey key(shape);</div>\n\
<div class=\"line\">                std::pair&lt;BucketMap::iterator,bool&gt; ret =</div>\n\
<div class=\"line\">                        fBucketMap.insert(std::make_pair(key, Bucket()));</div>\n\
<div class=\"line\">                ret.first-&gt;second.insert(std::make_pair(maxNumVerts(shape), shape));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> getBucketList(BucketList&amp; bucketList)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            bucketList.clear();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> BucketMap::value_type&amp; val : fBucketMap) {</div>\n\
<div class=\"line\">                bucketList.push_back(val.second);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">        ConsolidateBuckets(<span class=\"keyword\">const</span> ConsolidateBuckets&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ConsolidateBuckets&amp; operator= (<span class=\"keyword\">const</span> ConsolidateBuckets&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> XformFreezer::FrozenGeometries&amp; fShapes;</div>\n\
<div class=\"line\">        BucketMap                             fBucketMap;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS FirstSampleTime</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>FirstSampleTime : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        FirstSampleTime()</div>\n\
<div class=\"line\">            : fTime(0)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp; xform,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;   subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            fTime = xform.getSamples().begin()-&gt;first;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp; shape,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;   subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            fTime = shape.getSamples().begin()-&gt;first;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> <span class=\"keyword\">get</span>()</div>\n\
<div class=\"line\">        { <span class=\"keywordflow\">return</span> fTime; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">        FirstSampleTime(<span class=\"keyword\">const</span> FirstSampleTime&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> FirstSampleTime&amp; operator= (<span class=\"keyword\">const</span> FirstSampleTime&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> fTime;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS Consolidator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Consolidator</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        Consolidator(SubNode::MPtr rootNode, <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> threshold, <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> motionBlur)</div>\n\
<div class=\"line\">            : fRootNode(rootNode), fThreshold(threshold), fMotionBlur(motionBlur)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ~Consolidator()</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> consolidate()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We currently unconditionally expand all instances. This is kind</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// of brute force as it assumes that the instances have a low poly</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// count so that consolidating them is worthwhile and that also</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the instance count is low so that the data expansion is</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// reasonable.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// FIXME: Obviously, a more intelligent heuristic would be needed</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// at one point.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the time of the first sample, useful when creating new xform</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// samples.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> firstSampleTime = 0;</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                FirstSampleTime firstSampleTimeVisitor;</div>\n\
<div class=\"line\">                fRootNode-&gt;accept(firstSampleTimeVisitor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                firstSampleTime = firstSampleTimeVisitor.get();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Freeze transforms.</span></div>\n\
<div class=\"line\">            XformFreezer::FrozenGeometries   frozenGeometries;</div>\n\
<div class=\"line\">            XformFreezer::AnimatedGeometries animatedGeometries;</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create an dummy identity xform data as the root of traversal</span></div>\n\
<div class=\"line\">                XformData::MPtr identityXformData = XformData::create();</div>\n\
<div class=\"line\">                identityXformData-&gt;addSample(XformSample::create(</div>\n\
<div class=\"line\">                    firstSampleTime,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>,</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(),  <span class=\"comment\">// not used when freeze transform</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Traversal the hierarchy to freeze transforms</span></div>\n\
<div class=\"line\">                XformFreezer xformFreezer(identityXformData, frozenGeometries,</div>\n\
<div class=\"line\">                    fMotionBlur, animatedGeometries);</div>\n\
<div class=\"line\">                fRootNode-&gt;accept(xformFreezer);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Divide shapes into buckets</span></div>\n\
<div class=\"line\">            ConsolidateBuckets::BucketList bucketList;</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                ConsolidateBuckets buckets(frozenGeometries);</div>\n\
<div class=\"line\">                buckets.divide();</div>\n\
<div class=\"line\">                buckets.getBucketList(bucketList);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set up consolidation progress bar</span></div>\n\
<div class=\"line\">            ProgressBar progressBar(kOptimizingMsg, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)frozenGeometries.size());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Consolidate each bucket</span></div>\n\
<div class=\"line\">            std::vector&lt;ShapeData::Ptr&gt; newShapes;</div>\n\
<div class=\"line\">            std::vector&lt;ShapeData::Ptr&gt; consolidatedShapes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(ConsolidateBuckets::Bucket&amp; bucket : bucketList) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Consolidate shapes until the bucket becomes empty</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">while</span> (!bucket.empty()) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> ConsolidateBuckets::Bucket::iterator largestNode = --bucket.end();</div>\n\
<div class=\"line\">                    MInt64 numRemainingVerts = fThreshold - largestNode-&gt;first;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (numRemainingVerts &lt; 0) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Already too large to be consolidated.</span></div>\n\
<div class=\"line\">                        newShapes.push_back(largestNode-&gt;second);</div>\n\
<div class=\"line\">                        bucket.erase(largestNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        MUpdateProgressAndCheckInterruption(progressBar);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Find nodes that could make up a consolidation group.</span></div>\n\
<div class=\"line\">                        consolidatedShapes.push_back(largestNode-&gt;second);</div>\n\
<div class=\"line\">                        bucket.erase(largestNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        MUpdateProgressAndCheckInterruption(progressBar);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">while</span> (numRemainingVerts &gt; 0 &amp;&amp; !bucket.empty()) {</div>\n\
<div class=\"line\">                            ConsolidateBuckets::Bucket::iterator node =</div>\n\
<div class=\"line\">                                    bucket.upper_bound((<span class=\"keywordtype\">size_t</span>)numRemainingVerts);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (node == bucket.begin()) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                            --node;</div>\n\
<div class=\"line\">                            numRemainingVerts -= (MInt64)node-&gt;first;</div>\n\
<div class=\"line\">                            consolidatedShapes.push_back(node-&gt;second);</div>\n\
<div class=\"line\">                            bucket.erase(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            MUpdateProgressAndCheckInterruption(progressBar);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Consolidate the consolidation group</span></div>\n\
<div class=\"line\">                        consolidateGeometry(newShapes, consolidatedShapes);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Attach a xform data to each new shape data</span></div>\n\
<div class=\"line\">            std::vector&lt;XformData::Ptr&gt; newXforms;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::Ptr&amp; newShape : newShapes) {</div>\n\
<div class=\"line\">                XformData::MPtr newXform = XformData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                ShapeData::SampleMap::const_iterator it  = newShape-&gt;getSamples().begin();</div>\n\
<div class=\"line\">                ShapeData::SampleMap::const_iterator end = newShape-&gt;getSamples().end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (it != end) {</div>\n\
<div class=\"line\">                    newXform-&gt;addSample(XformSample::create(</div>\n\
<div class=\"line\">                        (*it).first,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                newXforms.push_back(newXform);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Build a vector of all nodes (consolidated + animated nodes).</span></div>\n\
<div class=\"line\">            std::vector&lt;std::pair&lt;XformData::Ptr,ShapeData::Ptr&gt; &gt; finalXformsAndShapes;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; newXforms.size(); i++) {</div>\n\
<div class=\"line\">                finalXformsAndShapes.push_back(std::make_pair(newXforms[i], newShapes[i]));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            finalXformsAndShapes.insert(finalXformsAndShapes.end(),</div>\n\
<div class=\"line\">                animatedGeometries.begin(), animatedGeometries.end());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Done</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (finalXformsAndShapes.size() == 1) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Only one shape, use its xform node as the consolidation root</span></div>\n\
<div class=\"line\">                SubNode::MPtr xformNode = SubNode::create(</div>\n\
<div class=\"line\">                    fRootNode-&gt;getName(),</div>\n\
<div class=\"line\">                    finalXformsAndShapes[0].first);</div>\n\
<div class=\"line\">                SubNode::MPtr shapeNode = SubNode::create(</div>\n\
<div class=\"line\">                    fRootNode-&gt;getName() + <span class=\"stringliteral\">&quot;Shape&quot;</span>,</div>\n\
<div class=\"line\">                    finalXformsAndShapes[0].second);</div>\n\
<div class=\"line\">                SubNode::connect(xformNode, shapeNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fConsolidatedRootNode = xformNode;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (finalXformsAndShapes.size() &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// There are more than one shape</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// We create one more xform node as the consolidation root</span></div>\n\
<div class=\"line\">                XformData::MPtr topXform = XformData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::set&lt;double&gt; times;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; finalXformsAndShapes.size(); i++) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> XformData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                            finalXformsAndShapes[i].first-&gt;getSamples()) {</div>\n\
<div class=\"line\">                        times.insert(val.first);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::SampleMap::value_type&amp; val :</div>\n\
<div class=\"line\">                            finalXformsAndShapes[i].second-&gt;getSamples()) {</div>\n\
<div class=\"line\">                        times.insert(val.first);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::set&lt;double&gt;::const_iterator timeIt  = times.begin();</div>\n\
<div class=\"line\">                std::set&lt;double&gt;::const_iterator timeEnd = times.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (timeIt != timeEnd) {</div>\n\
<div class=\"line\">                    topXform-&gt;addSample(XformSample::create(</div>\n\
<div class=\"line\">                        *timeIt,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                SubNode::MPtr topXformNode = SubNode::create(</div>\n\
<div class=\"line\">                    fRootNode-&gt;getName(),</div>\n\
<div class=\"line\">                    topXform);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Create shapes&#39; parent xform sub nodes.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// They are children of the consolidation root.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; finalXformsAndShapes.size(); i++) {</div>\n\
<div class=\"line\">                    SubNode::MPtr xformNode = SubNode::create(</div>\n\
<div class=\"line\">                        fRootNode-&gt;getName() + (i + 1),</div>\n\
<div class=\"line\">                        finalXformsAndShapes[i].first);</div>\n\
<div class=\"line\">                    SubNode::MPtr shapeNode = SubNode::create(</div>\n\
<div class=\"line\">                        fRootNode-&gt;getName() + <span class=\"stringliteral\">&quot;Shape&quot;</span> + (i + 1),</div>\n\
<div class=\"line\">                        finalXformsAndShapes[i].second);</div>\n\
<div class=\"line\">                    SubNode::connect(xformNode, shapeNode);</div>\n\
<div class=\"line\">                    SubNode::connect(topXformNode, xformNode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fConsolidatedRootNode = topXformNode;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        SubNode::MPtr consolidatedRootNode()</div>\n\
<div class=\"line\">        { <span class=\"keywordflow\">return</span> fConsolidatedRootNode; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">        Consolidator(<span class=\"keyword\">const</span> Consolidator&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Consolidator&amp; operator= (<span class=\"keyword\">const</span> Consolidator&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> consolidateGeometry(std::vector&lt;ShapeData::Ptr&gt;&amp; newShapes,</div>\n\
<div class=\"line\">                                 std::vector&lt;ShapeData::Ptr&gt;&amp; consolidatedShapes)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Aggregate the list of sample times.</span></div>\n\
<div class=\"line\">            std::set&lt;double&gt; times;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::Ptr&amp; shape : consolidatedShapes) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapeData::SampleMap::value_type&amp; smv :</div>\n\
<div class=\"line\">                              shape-&gt;getSamples()) {</div>\n\
<div class=\"line\">                    times.insert(smv.first);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Consolidated geometry.</span></div>\n\
<div class=\"line\">            ShapeData::MPtr newShape = ShapeData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> nbShapes = consolidatedShapes.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::set&lt;double&gt;::const_iterator timeIt  = times.begin();</div>\n\
<div class=\"line\">            std::set&lt;double&gt;::const_iterator timeEnd = times.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Consolidate the first sample.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">typedef</span> IndexBuffer::index_t index_t;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            GPUCache::shared_array&lt;index_t&gt;               wireVertIndices;</div>\n\
<div class=\"line\">            std::vector&lt;GPUCache::shared_array&lt;index_t&gt; &gt; triangleVertIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            GPUCache::shared_array&lt;float&gt;   positions;</div>\n\
<div class=\"line\">            GPUCache::shared_array&lt;float&gt;   normals;</div>\n\
<div class=\"line\">            GPUCache::shared_array&lt;float&gt;   uvs;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> boundingBox;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> diffuseColor;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span>   visibility = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> totalWires = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> totalVerts = 0;</div>\n\
<div class=\"line\">                std::vector&lt;size_t&gt; totalTriangles;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> numIndexGroups = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> uvExists     = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; nbShapes; i++) {</div>\n\
<div class=\"line\">                    ShapeData::Ptr&amp; shape = consolidatedShapes[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample =</div>\n\
<div class=\"line\">                        shape-&gt;getSample(*timeIt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    totalWires += sample-&gt;numWires();</div>\n\
<div class=\"line\">                    totalVerts += sample-&gt;numVerts();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (numIndexGroups == 0) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Initialize totalTriangles, assume that</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// all shapes has the same number of index groups</span></div>\n\
<div class=\"line\">                        numIndexGroups = sample-&gt;numIndexGroups();</div>\n\
<div class=\"line\">                        totalTriangles.resize(numIndexGroups, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        diffuseColor = sample-&gt;diffuseColor();</div>\n\
<div class=\"line\">                        visibility   = sample-&gt;visibility();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Shapes with different number of index groups, diffuseColor and visibility</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// should be divided into separate buckets.</span></div>\n\
<div class=\"line\">                    assert(numIndexGroups == sample-&gt;numIndexGroups());</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> - sample-&gt;diffuseColor().r) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> - sample-&gt;diffuseColor().g) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> - sample-&gt;diffuseColor().b) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4aec1a5be9d9a4a394a2e49e9744286e\">a</a> - sample-&gt;diffuseColor().a) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(visibility == sample-&gt;visibility());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; totalTriangles.size(); j++) {</div>\n\
<div class=\"line\">                        totalTriangles[j] += sample-&gt;numTriangles(j);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Check whether UV exists</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!uvExists &amp;&amp; sample-&gt;uvs()) {</div>\n\
<div class=\"line\">                        uvExists = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                wireVertIndices = GPUCache::shared_array&lt;index_t&gt;(</div>\n\
<div class=\"line\">                    <span class=\"keyword\">new</span> index_t[2 * totalWires]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                triangleVertIndices.resize(totalTriangles.size());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; totalTriangles.size(); i++) {</div>\n\
<div class=\"line\">                    triangleVertIndices[i] = GPUCache::shared_array&lt;index_t&gt;(</div>\n\
<div class=\"line\">                        <span class=\"keyword\">new</span> index_t[3 * totalTriangles[i]]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                positions = GPUCache::shared_array&lt;float&gt;(</div>\n\
<div class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[3 * totalVerts]);</div>\n\
<div class=\"line\">                normals = GPUCache::shared_array&lt;float&gt;(</div>\n\
<div class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[3 * totalVerts]);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uvExists) {</div>\n\
<div class=\"line\">                    uvs = GPUCache::shared_array&lt;float&gt;(</div>\n\
<div class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[2 * totalVerts]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> wireIdx = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> vertIdx = 0;</div>\n\
<div class=\"line\">                    std::vector&lt;size_t&gt; triangleIdx(numIndexGroups, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; nbShapes; i++) {</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample =</div>\n\
<div class=\"line\">                            consolidatedShapes[i]-&gt;getSample(*timeIt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numWires     = sample-&gt;numWires();</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numVerts     = sample-&gt;numVerts();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Wires</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sample-&gt;wireVertIndices()) {</div>\n\
<div class=\"line\">                            IndexBuffer::ReadInterfacePtr readable = sample-&gt;wireVertIndices()-&gt;readableInterface();</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> index_t* srcWireVertIndices = readable-&gt;get();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numWires; j++) {</div>\n\
<div class=\"line\">                                wireVertIndices[2*(j + wireIdx) + 0] = index_t(srcWireVertIndices[2*j + 0] + vertIdx);</div>\n\
<div class=\"line\">                                wireVertIndices[2*(j + wireIdx) + 1] = index_t(srcWireVertIndices[2*j + 1] + vertIdx);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Triangles</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> group = 0; group &lt; numIndexGroups; group++) {</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numTriangles = sample-&gt;numTriangles(group);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (sample-&gt;triangleVertIndices(group)) {</div>\n\
<div class=\"line\">                                IndexBuffer::ReadInterfacePtr readable = sample-&gt;triangleVertIndices(group)-&gt;readableInterface();</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> index_t* srcTriangleVertIndices = readable-&gt;get();</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numTriangles; j++) {</div>\n\
<div class=\"line\">                                    triangleVertIndices[group][3*(j + triangleIdx[group]) + 0] = index_t(srcTriangleVertIndices[3*j + 0] + vertIdx);</div>\n\
<div class=\"line\">                                    triangleVertIndices[group][3*(j + triangleIdx[group]) + 1] = index_t(srcTriangleVertIndices[3*j + 1] + vertIdx);</div>\n\
<div class=\"line\">                                    triangleVertIndices[group][3*(j + triangleIdx[group]) + 2] = index_t(srcTriangleVertIndices[3*j + 2] + vertIdx);</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Positions</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sample-&gt;positions()) {</div>\n\
<div class=\"line\">                            VertexBuffer::ReadInterfacePtr readable = sample-&gt;positions()-&gt;readableInterface();</div>\n\
<div class=\"line\">                            memcpy(&amp;positions[3*vertIdx], readable-&gt;get(), 3*numVerts*<span class=\"keyword\">sizeof</span>(float));</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Normals</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sample-&gt;normals()) {</div>\n\
<div class=\"line\">                            VertexBuffer::ReadInterfacePtr readable = sample-&gt;normals()-&gt;readableInterface();</div>\n\
<div class=\"line\">                            memcpy(&amp;normals[3*vertIdx], readable-&gt;get(), 3*numVerts*<span class=\"keyword\">sizeof</span>(float));</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// UVs</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (sample-&gt;uvs()) {</div>\n\
<div class=\"line\">                            VertexBuffer::ReadInterfacePtr readable = sample-&gt;uvs()-&gt;readableInterface();</div>\n\
<div class=\"line\">                            memcpy(&amp;uvs[2*vertIdx], readable-&gt;get(), 2*numVerts*<span class=\"keyword\">sizeof</span>(float));</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (uvExists) {</div>\n\
<div class=\"line\">                            memset(&amp;uvs[2*vertIdx], 0, 2*numVerts*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        wireIdx += numWires;</div>\n\
<div class=\"line\">                        vertIdx += numVerts;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numIndexGroups; i++) {</div>\n\
<div class=\"line\">                            triangleIdx[i] += sample-&gt;numTriangles(i);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        boundingBox.<a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#aee704d46278fb5925a7bd814a5773ccd\">expand</a>(sample-&gt;boundingBox());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; newTriangleVertIndices(numIndexGroups);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numIndexGroups; i++) {</div>\n\
<div class=\"line\">                    newTriangleVertIndices[i] = IndexBuffer::create(</div>\n\
<div class=\"line\">                        SharedArray&lt;index_t&gt;::create(</div>\n\
<div class=\"line\">                            triangleVertIndices[i], 3 * totalTriangles[i]));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::shared_ptr&lt;ShapeSample&gt; newSample = ShapeSample::create(</div>\n\
<div class=\"line\">                        *timeIt,</div>\n\
<div class=\"line\">                        totalWires,</div>\n\
<div class=\"line\">                        totalVerts,</div>\n\
<div class=\"line\">                        IndexBuffer::create(</div>\n\
<div class=\"line\">                            SharedArray&lt;index_t&gt;::create(</div>\n\
<div class=\"line\">                                wireVertIndices, 2 * totalWires)),</div>\n\
<div class=\"line\">                        newTriangleVertIndices,</div>\n\
<div class=\"line\">                        VertexBuffer::createPositions(</div>\n\
<div class=\"line\">                            SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">                                positions, 3 * totalVerts)),</div>\n\
<div class=\"line\">                        boundingBox,</div>\n\
<div class=\"line\">                        diffuseColor,</div>\n\
<div class=\"line\">                        visibility);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (normals) {</div>\n\
<div class=\"line\">                    newSample-&gt;setNormals(</div>\n\
<div class=\"line\">                        VertexBuffer::createNormals(</div>\n\
<div class=\"line\">                            SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">                                normals, 3 * totalVerts)));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                    newSample-&gt;setUVs(</div>\n\
<div class=\"line\">                        VertexBuffer::createUVs(</div>\n\
<div class=\"line\">                            SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">                                uvs, 2 * totalVerts)));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                newShape-&gt;addSample(newSample);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Consolidate the remaining samples.</span></div>\n\
<div class=\"line\">            std::set&lt;double&gt;::const_iterator timePrev  = timeIt;</div>\n\
<div class=\"line\">            ++timeIt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; timeIt != timeEnd; ++timeIt) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> totalWires     = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> totalVerts     = 0;</div>\n\
<div class=\"line\">                std::vector&lt;size_t&gt; totalTriangles;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> numIndexGroups = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> uvExists       = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> wiresDirty     = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> trianglesDirty = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> positionsDirty = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> normalsDirty   = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> uvsDirty       = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; nbShapes; i++) {</div>\n\
<div class=\"line\">                    ShapeData::Ptr&amp; shape = consolidatedShapes[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample =</div>\n\
<div class=\"line\">                        shape-&gt;getSample(*timeIt);</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; prevSample =</div>\n\
<div class=\"line\">                        shape-&gt;getSample(*timePrev);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    totalWires += sample-&gt;numWires();</div>\n\
<div class=\"line\">                    totalVerts += sample-&gt;numVerts();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (numIndexGroups == 0) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Initialize totalTriangles, assume that</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// all shapes has the same number of index groups</span></div>\n\
<div class=\"line\">                        numIndexGroups = sample-&gt;numIndexGroups();</div>\n\
<div class=\"line\">                        totalTriangles.resize(numIndexGroups, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        diffuseColor = sample-&gt;diffuseColor();</div>\n\
<div class=\"line\">                        visibility   = sample-&gt;visibility();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Shapes with different number of index groups, diffuseColor and visibility</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// should be divided into separate buckets.</span></div>\n\
<div class=\"line\">                    assert(numIndexGroups == sample-&gt;numIndexGroups());</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> - sample-&gt;diffuseColor().r) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> - sample-&gt;diffuseColor().g) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> - sample-&gt;diffuseColor().b) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(fabs(diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4aec1a5be9d9a4a394a2e49e9744286e\">a</a> - sample-&gt;diffuseColor().a) &lt; 1e-5);</div>\n\
<div class=\"line\">                    assert(visibility == sample-&gt;visibility());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; totalTriangles.size(); j++) {</div>\n\
<div class=\"line\">                        totalTriangles[j] += sample-&gt;numTriangles(j);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Check whether UV exists</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!uvExists &amp;&amp; sample-&gt;uvs()) {</div>\n\
<div class=\"line\">                        uvExists = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numIndexGroups; j++) {</div>\n\
<div class=\"line\">                        trianglesDirty |= sample-&gt;triangleVertIndices(j) != prevSample-&gt;triangleVertIndices(j);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    wiresDirty     |= sample-&gt;wireVertIndices()     != prevSample-&gt;wireVertIndices();</div>\n\
<div class=\"line\">                    positionsDirty |= sample-&gt;positions()           != prevSample-&gt;positions();</div>\n\
<div class=\"line\">                    normalsDirty   |= sample-&gt;normals()             != prevSample-&gt;normals();</div>\n\
<div class=\"line\">                    uvsDirty       |= sample-&gt;uvs()                 != prevSample-&gt;uvs();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (wiresDirty || trianglesDirty ||</div>\n\
<div class=\"line\">                    positionsDirty || normalsDirty || uvsDirty) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (wiresDirty) {</div>\n\
<div class=\"line\">                            wireVertIndices = GPUCache::shared_array&lt;index_t&gt;(</div>\n\
<div class=\"line\">                                <span class=\"keyword\">new</span> index_t[2 * totalWires]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (trianglesDirty) {</div>\n\
<div class=\"line\">                            triangleVertIndices.resize(totalTriangles.size());</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; totalTriangles.size(); i++) {</div>\n\
<div class=\"line\">                                triangleVertIndices[i] = GPUCache::shared_array&lt;index_t&gt;(</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">new</span> index_t[3 * totalTriangles[i]]);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (positionsDirty) {</div>\n\
<div class=\"line\">                            positions = GPUCache::shared_array&lt;float&gt;(</div>\n\
<div class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[3 * totalVerts]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (normalsDirty) {</div>\n\
<div class=\"line\">                            normals = GPUCache::shared_array&lt;float&gt;(</div>\n\
<div class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[3 * totalVerts]);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (uvsDirty) {</div>\n\
<div class=\"line\">                            uvs.reset();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (uvExists) {</div>\n\
<div class=\"line\">                                uvs = GPUCache::shared_array&lt;float&gt;(</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[2 * totalVerts]);</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        boundingBox.<a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">size_t</span> wireIdx = 0;</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">size_t</span> vertIdx = 0;</div>\n\
<div class=\"line\">                            std::vector&lt;size_t&gt; triangleIdx(numIndexGroups, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; nbShapes; i++) {</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample =</div>\n\
<div class=\"line\">                                    consolidatedShapes[i]-&gt;getSample(*timeIt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numWires = sample-&gt;numWires();</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numVerts = sample-&gt;numVerts();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// Wires</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (wiresDirty &amp;&amp; sample-&gt;wireVertIndices()) {</div>\n\
<div class=\"line\">                                    IndexBuffer::ReadInterfacePtr readable = sample-&gt;wireVertIndices()-&gt;readableInterface();</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> index_t* srcWireVertIndices = readable-&gt;get();</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numWires; j++) {</div>\n\
<div class=\"line\">                                        wireVertIndices[2*(j + wireIdx) + 0] = index_t(srcWireVertIndices[2*j + 0] + vertIdx);</div>\n\
<div class=\"line\">                                        wireVertIndices[2*(j + wireIdx) + 1] = index_t(srcWireVertIndices[2*j + 1] + vertIdx);</div>\n\
<div class=\"line\">                                    }</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// Triangles</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (trianglesDirty) {</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> group = 0; group &lt; numIndexGroups; group++) {</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numTriangles = sample-&gt;numTriangles(group);</div>\n\
<div class=\"line\">                                        <span class=\"keywordflow\">if</span> (sample-&gt;triangleVertIndices(group)) {</div>\n\
<div class=\"line\">                                            IndexBuffer::ReadInterfacePtr readable = sample-&gt;triangleVertIndices(group)-&gt;readableInterface();</div>\n\
<div class=\"line\">                                            <span class=\"keyword\">const</span> index_t* srcTriangleVertIndices = readable-&gt;get();</div>\n\
<div class=\"line\">                                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numTriangles; j++) {</div>\n\
<div class=\"line\">                                                triangleVertIndices[group][3*(j + triangleIdx[group]) + 0] = index_t(srcTriangleVertIndices[3*j + 0] + vertIdx);</div>\n\
<div class=\"line\">                                                triangleVertIndices[group][3*(j + triangleIdx[group]) + 1] = index_t(srcTriangleVertIndices[3*j + 1] + vertIdx);</div>\n\
<div class=\"line\">                                                triangleVertIndices[group][3*(j + triangleIdx[group]) + 2] = index_t(srcTriangleVertIndices[3*j + 2] + vertIdx);</div>\n\
<div class=\"line\">                                            }</div>\n\
<div class=\"line\">                                        }</div>\n\
<div class=\"line\">                                    }</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// Positions</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (positionsDirty &amp;&amp; sample-&gt;positions()) {</div>\n\
<div class=\"line\">                                    VertexBuffer::ReadInterfacePtr readable = sample-&gt;positions()-&gt;readableInterface();</div>\n\
<div class=\"line\">                                    memcpy(&amp;positions[3*vertIdx], readable-&gt;get(),</div>\n\
<div class=\"line\">                                        3*numVerts*<span class=\"keyword\">sizeof</span>(float));</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// Normals</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (normalsDirty &amp;&amp; sample-&gt;normals()) {</div>\n\
<div class=\"line\">                                    VertexBuffer::ReadInterfacePtr readable = sample-&gt;normals()-&gt;readableInterface();</div>\n\
<div class=\"line\">                                    memcpy(&amp;normals[3*vertIdx], readable-&gt;get(),</div>\n\
<div class=\"line\">                                        3*numVerts*<span class=\"keyword\">sizeof</span>(float));</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// UVs</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (uvsDirty) {</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">if</span> (sample-&gt;uvs()) {</div>\n\
<div class=\"line\">                                        VertexBuffer::ReadInterfacePtr readable = sample-&gt;uvs()-&gt;readableInterface();</div>\n\
<div class=\"line\">                                        memcpy(&amp;uvs[2*vertIdx], readable-&gt;get(),</div>\n\
<div class=\"line\">                                            2*numVerts*<span class=\"keyword\">sizeof</span>(float));</div>\n\
<div class=\"line\">                                    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (uvExists) {</div>\n\
<div class=\"line\">                                        memset(&amp;uvs[2*vertIdx], 0, 2*numVerts*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">                                    }</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                wireIdx += numWires;</div>\n\
<div class=\"line\">                                vertIdx += numVerts;</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numIndexGroups; i++) {</div>\n\
<div class=\"line\">                                    triangleIdx[i] += sample-&gt;numTriangles(i);</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                boundingBox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#aee704d46278fb5925a7bd814a5773ccd\">expand</a>(sample-&gt;boundingBox());</div>\n\
<div class=\"line\">                            }    <span class=\"comment\">// for each nodes</span></div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                }    <span class=\"comment\">// if anything dirty</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; newTriangleVertIndices(numIndexGroups);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numIndexGroups; i++) {</div>\n\
<div class=\"line\">                    newTriangleVertIndices[i] = IndexBuffer::create(</div>\n\
<div class=\"line\">                        SharedArray&lt;index_t&gt;::create(</div>\n\
<div class=\"line\">                            triangleVertIndices[i], 3 * totalTriangles[i]));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::shared_ptr&lt;ShapeSample&gt; newSample = ShapeSample::create(</div>\n\
<div class=\"line\">                    *timeIt,</div>\n\
<div class=\"line\">                    totalWires,</div>\n\
<div class=\"line\">                    totalVerts,</div>\n\
<div class=\"line\">                    IndexBuffer::create(</div>\n\
<div class=\"line\">                        SharedArray&lt;index_t&gt;::create(</div>\n\
<div class=\"line\">                            wireVertIndices, 2 * totalWires)),</div>\n\
<div class=\"line\">                    newTriangleVertIndices,</div>\n\
<div class=\"line\">                    VertexBuffer::createPositions(</div>\n\
<div class=\"line\">                        SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">                            positions, 3 * totalVerts)),</div>\n\
<div class=\"line\">                    boundingBox,</div>\n\
<div class=\"line\">                    diffuseColor,</div>\n\
<div class=\"line\">                    visibility);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (normals) {</div>\n\
<div class=\"line\">                    newSample-&gt;setNormals(</div>\n\
<div class=\"line\">                        VertexBuffer::createNormals(</div>\n\
<div class=\"line\">                            SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">                                normals, 3 * totalVerts)));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uvs) {</div>\n\
<div class=\"line\">                    newSample-&gt;setUVs(</div>\n\
<div class=\"line\">                        VertexBuffer::createUVs(</div>\n\
<div class=\"line\">                            SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">                                uvs, 2 * totalVerts)));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                newShape-&gt;addSample(newSample);</div>\n\
<div class=\"line\">                timePrev = timeIt;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// All consolidated shapes should have the same materials.</span></div>\n\
<div class=\"line\">            newShape-&gt;setMaterials(consolidatedShapes[0]-&gt;getMaterials());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Re-use the largest node infos.</span></div>\n\
<div class=\"line\">            newShapes.push_back(newShape);</div>\n\
<div class=\"line\">            consolidatedShapes.clear();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        SubNode::MPtr fRootNode;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>     fThreshold;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>    fMotionBlur;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        SubNode::MPtr fConsolidatedRootNode;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS SelectionChecker</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>SelectionChecker</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        SelectionChecker(<span class=\"keyword\">const</span> <a name=\"_a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp; selection)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">            <a name=\"_a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// A selected node should be ignored</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// if its parent/grandparent is selected.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; selection.<a name=\"a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>(); i++) {</div>\n\
<div class=\"line\">                status = selection.<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(i, dagPath);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status == MS::kSuccess) {</div>\n\
<div class=\"line\">                    std::string fullDagPath = dagPath.<a name=\"a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">                    fSelectionPaths.insert(fullDagPath);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Check each selected DAG Path</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; selection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>(); i++) {</div>\n\
<div class=\"line\">                status = selection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(i, dagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status == MS::kSuccess &amp;&amp; check(dagPath)) {</div>\n\
<div class=\"line\">                    fSelection.add(dagPath);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp; selection()</div>\n\
<div class=\"line\">        { <span class=\"keywordflow\">return</span> fSelection; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">        SelectionChecker(<span class=\"keyword\">const</span> SelectionChecker&amp;);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SelectionChecker&amp; operator= (<span class=\"keyword\">const</span> SelectionChecker&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> check(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// This node should not have its parent/grandparent selected</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> parent = dagPath;</div>\n\
<div class=\"line\">            parent.<a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; parent.<a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#af321be336f1f2d96ac2273a87cb3c8ab\">length</a>() &gt; 0; parent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>()) {</div>\n\
<div class=\"line\">                std::string fullDagPath = parent.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fSelectionPaths.find(fullDagPath) != fSelectionPaths.end()) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> checkGeometry(dagPath);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> checkGeometry(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Check we have bakeable geometry</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dagPath);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span> = dagPath.<a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ((Baker::isBakeable(<span class=\"keywordtype\">object</span>) ||</div>\n\
<div class=\"line\">                dagNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a1d0bbd4d50dae591f8e003c0aedc8135\">typeId</a>() == ShapeNode::id) &amp;&amp;</div>\n\
<div class=\"line\">                !<span class=\"keywordtype\">object</span>.hasFn(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// At least one descendant must be bakeable geometry</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> hasGeometry = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; dagPath.<a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412\">childCount</a>(); i++) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> child = dagPath;</div>\n\
<div class=\"line\">                child.<a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a82ffa451bdebeba69b2c4c55f924980b\">push</a>(dagPath.<a name=\"a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#acf3680f39b19e4b44fe459efa2b76219\">child</a>(i));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> childNode(child);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (childNode.<a name=\"a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a7293b39df2aa5ccfe5ffa7f483fffcae\">isIntermediateObject</a>()) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (checkGeometry(child)) {</div>\n\
<div class=\"line\">                    hasGeometry= <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> hasGeometry;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>        fSelection;</div>\n\
<div class=\"line\">        std::set&lt;std::string&gt; fSelectionPaths;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS ScopedPauseWorkerThread</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ScopedPauseWorkerThread</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ScopedPauseWorkerThread()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GlobalReaderCache::theCache().pauseRead();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ~ScopedPauseWorkerThread()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GlobalReaderCache::theCache().resumeRead();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ScopedPauseWorkerThread(<span class=\"keyword\">const</span> ScopedPauseWorkerThread&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">        ScopedPauseWorkerThread&amp; operator=(<span class=\"keyword\">const</span> ScopedPauseWorkerThread&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS FileAndSubNodeList</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is a list of files and corresponding hierarchy roots.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The dummy flag means that the top-level transform is a dummy sub-node. The</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// dummy sub-node should be ignored and its children should be written instead.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>FileAndSubNode</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>   targetFile;</div>\n\
<div class=\"line\">        SubNode::MPtr subNode;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>          isDummy;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        FileAndSubNode()</div>\n\
<div class=\"line\">            : isDummy(<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        FileAndSubNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; f, <span class=\"keyword\">const</span> SubNode::MPtr&amp; n, <span class=\"keywordtype\">bool</span> d)</div>\n\
<div class=\"line\">            : targetFile(f), subNode(n), isDummy(d)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt;FileAndSubNode&gt; FileAndSubNodeList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS NodePathRegistry</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This class is responsible for re-constructing the sub-node hierarchy </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// according to the original dag paths.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This class should encapsulate all the logic to determine the file paths.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If we are going to write a single hierarchy, </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  targetFile = [directory] / [filePrefix] [fileName] [extension]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Assuming we are going to bake the following hierarchies:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// |-A</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   |-B</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// |-C</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   |-D</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We have 4 dag paths: |A, |A|B, |C and |C|D.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// In this case, we have two hierarchy roots: |A and |C</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 1) Either -allDagObjects or -saveMultipleFiles false is specified.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  We are going to write two hierarchies to a single file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  targetFile = [directory] / [filePrefix] [fileName] [extension]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  e.g. ... / filename_specified_by_fileName_arg.abc</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//          (containing |A, |A|B, |C and |C|D)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2) -saveMultipleFiles true is specified. (default)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  We are going to write two hierarchies to two files.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   2.1) -clashOption numericalIncrement</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     targetFile = [directory] / [filePrefix] [numericalIncrement] [extension]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     e.g. ... / scene1_0.abc  (containing |A and |A|B)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//          ... / scene1_1.abc  (containing |C and |C|D)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   2.2) -clashOption nodeName  (default)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     targetFile = [directory] / [filePrefix] [nodeName] [extension]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     [nodeName] is the name of the dag node. If there is any conflicts, the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     full dag path is used as [nodeName].</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//     e.g. ... / scene1_A.abc  (containing |A and |A|B)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//          ... / scene1_C.abc  (containing |C and |C|D)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>NodePathRegistry</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">enum</span> Stages {</div>\n\
<div class=\"line\">            kResolveStage,      <span class=\"comment\">// Adding MDagPath objects.</span></div>\n\
<div class=\"line\">            kConstructStage,    <span class=\"comment\">// Adding sub-node objects.</span></div>\n\
<div class=\"line\">            kComplete           <span class=\"comment\">// Get a list of files and hierarchy roots.</span></div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        NodePathRegistry(<span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>     allDagObjects,</div>\n\
<div class=\"line\">                         <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>     saveMultipleFiles,</div>\n\
<div class=\"line\">                         <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; directory,</div>\n\
<div class=\"line\">                         <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; filePrefix,</div>\n\
<div class=\"line\">                         <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName,</div>\n\
<div class=\"line\">                         <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; clashOption)</div>\n\
<div class=\"line\">            : fStage(kResolveStage),</div>\n\
<div class=\"line\">              fAllDagObjects(allDagObjects),</div>\n\
<div class=\"line\">              fSaveMultipleFiles(saveMultipleFiles),</div>\n\
<div class=\"line\">              fDirectory(directory),</div>\n\
<div class=\"line\">              fFilePrefix(filePrefix),</div>\n\
<div class=\"line\">              fFileName(fileName),</div>\n\
<div class=\"line\">              fClashOption(clashOption),</div>\n\
<div class=\"line\">              fExtension(<span class=\"stringliteral\">&quot;.abc&quot;</span>)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ~NodePathRegistry()</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        NodePathRegistry(<span class=\"keyword\">const</span> NodePathRegistry&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">        NodePathRegistry&amp; operator=(<span class=\"keyword\">const</span> NodePathRegistry&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add a MDagPath object to this class. When all MDagPath objects are added,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// call resolve() to move to the next stage.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> add(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We can only add dag paths at resolve stage.</span></div>\n\
<div class=\"line\">            assert(fStage == kResolveStage);</div>\n\
<div class=\"line\">            assert(dagPath.<a name=\"a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// The full path name of this dag path.</span></div>\n\
<div class=\"line\">            std::string fullPath = fullPathName(dagPath);</div>\n\
<div class=\"line\">            assert(fPathMap.find(fullPath) == fPathMap.end());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// The full path name of the parent dag path.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> parentPath = dagPath;</div>\n\
<div class=\"line\">            parentPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\">            std::string parentFullPath = fullPathName(parentPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Insert into path map.</span></div>\n\
<div class=\"line\">            PathEntry pathEntry;</div>\n\
<div class=\"line\">            pathEntry.dagPath    = dagPath;</div>\n\
<div class=\"line\">            pathEntry.parentPath = parentFullPath;</div>\n\
<div class=\"line\">            fPathMap[fullPath] = pathEntry;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Determine the hierarchy roots and file names based on all input dag paths.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Resolve the hierarchy root node name conflict.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> resolve()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We should be at resolve stage.</span></div>\n\
<div class=\"line\">            assert(fStage == kResolveStage);</div>\n\
<div class=\"line\">            fStage = kConstructStage;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find all hierarchy root nodes.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> PathMapType::value_type&amp; v : fPathMap) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// If the path doesn&#39;t have a parent, it&#39;s a hierarchy root.</span></div>\n\
<div class=\"line\">                PathMapType::const_iterator it = fPathMap.find(v.second.parentPath);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (it == fPathMap.end()) {</div>\n\
<div class=\"line\">                    assert(fRootMap.find(v.first) == fRootMap.end());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get the node name.</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(v.second.dagPath);</div>\n\
<div class=\"line\">                    std::string nodeName = dagNode.name().asChar();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Strip namespace &quot;:&quot; character.</span></div>\n\
<div class=\"line\">                    std::replace(nodeName.begin(), nodeName.end(), <span class=\"charliteral\">&#39;:&#39;</span>, <span class=\"charliteral\">&#39;_&#39;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Insert into root map.</span></div>\n\
<div class=\"line\">                    RootEntry rootEntry;</div>\n\
<div class=\"line\">                    rootEntry.nodeName   = nodeName;</div>\n\
<div class=\"line\">                    rootEntry.uniqueName = <span class=\"stringliteral\">&quot;Not_Specified&quot;</span>;</div>\n\
<div class=\"line\">                    rootEntry.sequence   = std::numeric_limits&lt;size_t&gt;::max();</div>\n\
<div class=\"line\">                    rootEntry.overwrite  = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    fRootMap[v.first] = rootEntry;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Count the occurance of base names of the hierarchy roots.</span></div>\n\
<div class=\"line\">            std::map&lt;std::string,size_t&gt; nameTable;     <span class=\"comment\">// name -&gt; occurance</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> RootMapType::value_type&amp; v : fRootMap) {</div>\n\
<div class=\"line\">                nameTable.insert(std::make_pair(v.second.nodeName, 0)).first-&gt;second++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Resolve root node name conflicts and compute sequences.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> counter = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(RootMapType::value_type&amp; v : fRootMap) {</div>\n\
<div class=\"line\">                std::string uniqueName = v.second.nodeName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// The name conflicts with other names.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// We use full path instead of its name.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (nameTable.find(uniqueName)-&gt;second &gt; 1) {</div>\n\
<div class=\"line\">                    uniqueName = v.first.substr(1);  <span class=\"comment\">// remove leading |</span></div>\n\
<div class=\"line\">                    std::replace(uniqueName.begin(), uniqueName.end(), <span class=\"charliteral\">&#39;|&#39;</span>, <span class=\"charliteral\">&#39;_&#39;</span>);</div>\n\
<div class=\"line\">                    std::replace(uniqueName.begin(), uniqueName.end(), <span class=\"charliteral\">&#39;:&#39;</span>, <span class=\"charliteral\">&#39;_&#39;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                v.second.uniqueName = uniqueName;</div>\n\
<div class=\"line\">                v.second.sequence   = counter++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Determine the directory we are going to export.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> singleFile = fAllDagObjects || !fSaveMultipleFiles || fRootMap.size() == 1;</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> directory = validatedDirectory();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName  = validatedFileName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Determine the absolute file path for hierarchy roots.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(RootMapType::value_type&amp; v : fRootMap) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> targetFileName = fFilePrefix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (singleFile) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We are going to save to a single file.</span></div>\n\
<div class=\"line\">                    targetFileName += fileName;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We are going to save each hierarchy root to a separate file.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fClashOption == <span class=\"stringliteral\">&quot;numericalIncrement&quot;</span>) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Clash Option: Numerical Increment</span></div>\n\
<div class=\"line\">                        targetFileName += (<span class=\"keywordtype\">unsigned</span> int)v.second.sequence;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Clash Option: Node Name</span></div>\n\
<div class=\"line\">                        targetFileName += v.second.uniqueName.c_str();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> targetFullName = directory + <span class=\"stringliteral\">&quot;/&quot;</span> + targetFileName + fExtension;</div>\n\
<div class=\"line\">                v.second.targetFile.setRawFullName(targetFullName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Pop up a dialog to prompt the user we are going to overwrite the file.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> promptOverwrite()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We have resolved hierarchy roots and their target files.</span></div>\n\
<div class=\"line\">            assert(fStage == kConstructStage);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Make sure we have the dialog proc.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;if (!(`exists showGpuCacheExportConfirmDialog`))\\n&quot;</span></div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;{\\n&quot;</span></div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;    eval(\\&quot;source \\\\\\&quot;doGpuCacheExportArgList.mel\\\\\\&quot;\\&quot;);\\n&quot;</span></div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;}\\n&quot;</span></div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Prompt every file or we remember the choice.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> singleFile = fAllDagObjects || !fSaveMultipleFiles || fRootMap.size() == 1;</div>\n\
<div class=\"line\">            <span class=\"keyword\">enum</span> OverwriteChoice { kUnknownOverwrite, kAlwaysOverwrite, kNeverOverwrite };</div>\n\
<div class=\"line\">            OverwriteChoice choice = kUnknownOverwrite;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(RootMapType::value_type&amp; v : fRootMap) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Skip non-exist files.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!v.second.targetFile.exists()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (choice == kUnknownOverwrite) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Show the dialog.</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> result = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a8dd71fbf4d71dacf626180777ba91a62\">MGlobal::executeCommandStringResult</a>(</div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;showGpuCacheExportConfirmDialog \\&quot;&quot;</span> + </div>\n\
<div class=\"line\">                        EncodeString(v.second.targetFile.resolvedFullName()) + </div>\n\
<div class=\"line\">                        <span class=\"stringliteral\">&quot;\\&quot;&quot;</span></div>\n\
<div class=\"line\">                    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (result == <span class=\"stringliteral\">&quot;yes&quot;</span>) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Overwrite this file.</span></div>\n\
<div class=\"line\">                        v.second.overwrite = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// All hierarchy roots are going to be written to a single file.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Pop up the dialog only once for all hierarchy roots.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (singleFile) choice = kAlwaysOverwrite;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == <span class=\"stringliteral\">&quot;no&quot;</span>) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Skip this file.</span></div>\n\
<div class=\"line\">                        v.second.overwrite = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// All hierarchy roots are going to be written to a single file.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Pop up the dialog only once for all hierarchy roots.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (singleFile) choice = kNeverOverwrite;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == <span class=\"stringliteral\">&quot;yesAll&quot;</span>) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Overwrite this file and all following files.</span></div>\n\
<div class=\"line\">                        v.second.overwrite = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        choice = kAlwaysOverwrite;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (result == <span class=\"stringliteral\">&quot;noAll&quot;</span> || result == <span class=\"stringliteral\">&quot;dismiss&quot;</span>) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Skip this file and all following files.</span></div>\n\
<div class=\"line\">                        v.second.overwrite = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        choice = kNeverOverwrite;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Something goes wrong with the dialog proc.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// We assume overwrite.</span></div>\n\
<div class=\"line\">                        assert(0);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (choice == kAlwaysOverwrite) {</div>\n\
<div class=\"line\">                    v.second.overwrite = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (choice == kNeverOverwrite) {</div>\n\
<div class=\"line\">                    v.second.overwrite = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    assert(0);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Associate the sub-node with the MDagPath object.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> associateSubNode(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath, <span class=\"keyword\">const</span> SubNode::MPtr&amp; subNode)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            assert(fStage == kConstructStage);</div>\n\
<div class=\"line\">            assert(dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>());</div>\n\
<div class=\"line\">            assert(subNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set the sub node member.</span></div>\n\
<div class=\"line\">            std::string fullPath = fullPathName(dagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            PathMapType::iterator it = fPathMap.find(fullPath);</div>\n\
<div class=\"line\">            assert(it != fPathMap.end());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != fPathMap.end()) {</div>\n\
<div class=\"line\">                it-&gt;second.subNode = subNode;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Construct sub-node hierarchy according to the MDagPath hierarchy.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> constructHierarchy()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            assert(fStage == kConstructStage);</div>\n\
<div class=\"line\">            fStage = kComplete;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Connect child with its parent.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Instances are already expanded.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> PathMapType::value_type&amp; v : fPathMap) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Find this sub node.</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> SubNode::MPtr&amp; thisSubNode = v.second.subNode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Find parent sub node.</span></div>\n\
<div class=\"line\">                PathMapType::iterator parentIt = fPathMap.find(v.second.parentPath);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (parentIt != fPathMap.end()) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Find a parent, connect them.</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> SubNode::MPtr&amp; parentSubNode = parentIt-&gt;second.subNode;</div>\n\
<div class=\"line\">                    SubNode::connect(parentSubNode, thisSubNode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// This must be a hierarchy root.</span></div>\n\
<div class=\"line\">                    RootMapType::iterator rootIt = fRootMap.find(v.first);</div>\n\
<div class=\"line\">                    assert(rootIt != fRootMap.end());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (rootIt != fRootMap.end()) {</div>\n\
<div class=\"line\">                        rootIt-&gt;second.subNode = thisSubNode;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get a list of file paths and corresponding hierarchy root sub-node.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> generateFileAndSubNodes(FileAndSubNodeList&amp; list)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Sub-node hierarchies are ready.</span></div>\n\
<div class=\"line\">            assert(fStage == kComplete);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// When -allDagObjects is set, we are going to save all dag objects in</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the scene to a single file.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// When -saveMultipleFiles is false, we are going to save all selected </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// dag objects to a single file.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// In both cases, we need to create a dummy root node (&quot;|&quot;) for root nodes.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fAllDagObjects || !fSaveMultipleFiles) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!fRootMap.empty() &amp;&amp; fRootMap.begin()-&gt;second.overwrite) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create the &quot;|&quot; node</span></div>\n\
<div class=\"line\">                    GroupCreator groupCreator;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> RootMapType::value_type&amp; v : fRootMap) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// We are going to write root nodes to a single file.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// To prevent root node name clash, we bake the unique name to the root node.</span></div>\n\
<div class=\"line\">                        v.second.subNode-&gt;setName(v.second.uniqueName.c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Add the root node to the dummy group.</span></div>\n\
<div class=\"line\">                        groupCreator.addChild(v.second.subNode);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    groupCreator.group();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Replace all nodes with a single &quot;|&quot; node.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// If there is one node, we use the node name as the &quot;|&quot; node name.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// If there are more than one node, we use the scene name as the &quot;|&quot; node name.</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> RootEntry&amp; rootEntry = fRootMap.begin()-&gt;second;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> rootNodeName = (fRootMap.size() == 1) ?</div>\n\
<div class=\"line\">                        rootEntry.subNode-&gt;getName() : getSceneNameAsValidObjectName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Only one file.</span></div>\n\
<div class=\"line\">                    list.push_back(FileAndSubNode(</div>\n\
<div class=\"line\">                        rootEntry.targetFile,</div>\n\
<div class=\"line\">                        groupCreator.getSubNode(rootNodeName),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">true</span> <span class=\"comment\">/* isDummy */</span></div>\n\
<div class=\"line\">                    ));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// One hierarchy root to one file.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> RootMapType::value_type&amp; v : fRootMap) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Skip files that we are not going to overwrite.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!v.second.overwrite) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    list.push_back(FileAndSubNode(</div>\n\
<div class=\"line\">                        v.second.targetFile,</div>\n\
<div class=\"line\">                        v.second.subNode,</div>\n\
<div class=\"line\">                        <span class=\"keyword\">false</span> <span class=\"comment\">/* isDummy */</span></div>\n\
<div class=\"line\">                    ));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> dump()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\">            stringstream out;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            out &lt;&lt; <span class=\"stringliteral\">&quot;Current Stage: &quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (fStage) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> kResolveStage:     out &lt;&lt; <span class=\"stringliteral\">&quot;ResolveStage&quot;</span>;      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> kConstructStage:   out &lt;&lt; <span class=\"stringliteral\">&quot;ConstructStage&quot;</span>;    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> kComplete:         out &lt;&lt; <span class=\"stringliteral\">&quot;Complete&quot;</span>;          <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            out &lt;&lt; endl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            out &lt;&lt; <span class=\"stringliteral\">&quot;Path Map: &quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> PathMapType::value_type&amp; v : fPathMap) {</div>\n\
<div class=\"line\">                out &lt;&lt; <span class=\"stringliteral\">&quot;Path: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.first</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, Parent: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.second.parentPath</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, SubNode: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; (<span class=\"keywordtype\">void</span>*)v.second.subNode.get()</div>\n\
<div class=\"line\">                    &lt;&lt; endl;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            out &lt;&lt; <span class=\"stringliteral\">&quot;Root Map: &quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> RootMapType::value_type&amp; v : fRootMap) {</div>\n\
<div class=\"line\">                out &lt;&lt; <span class=\"stringliteral\">&quot;Path: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.first</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, Node: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.second.nodeName</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, Unique: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.second.uniqueName</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, Sequence: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.second.sequence</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, Overwrite: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.second.overwrite</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, Target: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; v.second.targetFile.resolvedFullName().asChar()</div>\n\
<div class=\"line\">                    &lt;&lt; <span class=\"stringliteral\">&quot;, SubNode: &quot;</span></div>\n\
<div class=\"line\">                    &lt;&lt; (<span class=\"keywordtype\">void</span>*)v.second.subNode.get()</div>\n\
<div class=\"line\">                    &lt;&lt; endl;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            cout &lt;&lt; out.str() &lt;&lt; endl;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> std::string fullPathName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> buffer = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::string(buffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> validatedDirectory()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> directory;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fDirectory.length() &gt; 0) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// If there is a directory specified, we use that directory.</span></div>\n\
<div class=\"line\">                directory.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(fDirectory);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileRule, expandName;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> alembicFileRule = <span class=\"stringliteral\">&quot;alembicCache&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> alembicFilePath = <span class=\"stringliteral\">&quot;cache/alembic&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> queryFileRuleCmd;</div>\n\
<div class=\"line\">                queryFileRuleCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;workspace -q -fre \\&quot;^1s\\&quot;&quot;</span>, alembicFileRule);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> queryFolderCmd;</div>\n\
<div class=\"line\">                queryFolderCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;workspace -en `workspace -q -fre \\&quot;^1s\\&quot;`&quot;</span>, alembicFileRule);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Query the file rule for alembic cache</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(queryFileRuleCmd, fileRule);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fileRule.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We have alembic file rule, query the folder</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(queryFolderCmd, expandName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Alembic file rule does not exist, create it</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> addFileRuleCmd;</div>\n\
<div class=\"line\">                    addFileRuleCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;workspace -fr \\&quot;^1s\\&quot; \\&quot;^2s\\&quot;&quot;</span>, alembicFileRule, alembicFilePath);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(addFileRuleCmd);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Save the workspace. maya may discard file rules on exit</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;workspace -s&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Query the folder</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(queryFolderCmd, expandName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Resolve the expanded file rule</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (expandName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">                    expandName = alembicFilePath;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                directory.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(expandName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> directory.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> validatedFileName()</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fFileName.length() &gt; 0) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// If there is a file name specified, we use that file name.</span></div>\n\
<div class=\"line\">                fileName = fFileName;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Generate a default file name.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fRootMap.size() == 1) {</div>\n\
<div class=\"line\">                    fileName = fRootMap.begin()-&gt;second.uniqueName.c_str();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    fileName = getSceneName();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fileName;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// This map contains name/path info for all dag paths.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>PathEntry {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>      dagPath;</div>\n\
<div class=\"line\">            std::string   parentPath;</div>\n\
<div class=\"line\">            SubNode::MPtr subNode;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::unordered_map&lt;std::string,PathEntry&gt; PathMapType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// This map contains name/path info for all hierarchy roots.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>RootEntry {</div>\n\
<div class=\"line\">            std::string   nodeName;</div>\n\
<div class=\"line\">            std::string   uniqueName;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span>        sequence;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span>          overwrite;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>   targetFile;</div>\n\
<div class=\"line\">            SubNode::MPtr subNode;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::unordered_map&lt;std::string,RootEntry&gt; RootMapType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Stages      fStage;</div>\n\
<div class=\"line\">        PathMapType fPathMap;</div>\n\
<div class=\"line\">        RootMapType fRootMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>    fAllDagObjects;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>    fSaveMultipleFiles;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fDirectory;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fFilePrefix;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fFileName;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fClashOption;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fExtension;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS Command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* Command::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> Command();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> Command::cmdSyntax()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> syntax;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-dir&quot;</span>, <span class=\"stringliteral\">&quot;-directory&quot;</span>,              <a name=\"a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-f&quot;</span>,   <span class=\"stringliteral\">&quot;-fileName&quot;</span>,               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-smf&quot;</span>, <span class=\"stringliteral\">&quot;-saveMultipleFiles&quot;</span>,      <a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada8cfc0ab572a96edfc9db7c02f0d025d7\">MSyntax::kBoolean</a>  );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-fp&quot;</span>,  <span class=\"stringliteral\">&quot;-filePrefix&quot;</span>,             <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-clo&quot;</span>, <span class=\"stringliteral\">&quot;-clashOption&quot;</span>,            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-o&quot;</span>,   <span class=\"stringliteral\">&quot;-optimize&quot;</span>                                   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-ot&quot;</span>,  <span class=\"stringliteral\">&quot;-optimizationThreshold&quot;</span>,  <a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada499591c04ccb62ab4f6fc3a5450afd4c\">MSyntax::kUnsigned</a> );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-st&quot;</span>,  <span class=\"stringliteral\">&quot;-startTime&quot;</span>,              <a name=\"a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada65c3a8bb75ba1a57e36c86855169752e\">MSyntax::kTime</a>     );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-et&quot;</span>,  <span class=\"stringliteral\">&quot;-endTime&quot;</span>,                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada65c3a8bb75ba1a57e36c86855169752e\">MSyntax::kTime</a>     );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-smr&quot;</span>, <span class=\"stringliteral\">&quot;-simulationRate&quot;</span>,         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada65c3a8bb75ba1a57e36c86855169752e\">MSyntax::kTime</a>     );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-spm&quot;</span>, <span class=\"stringliteral\">&quot;-sampleMultiplier&quot;</span>,       <a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada762e1602488228e1b11b83501bb3832e\">MSyntax::kLong</a>     );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-cl&quot;</span>,  <span class=\"stringliteral\">&quot;-compressLevel&quot;</span>,          <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada762e1602488228e1b11b83501bb3832e\">MSyntax::kLong</a>     );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-df&quot;</span>,  <span class=\"stringliteral\">&quot;-dataFormat&quot;</span>,             <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-sf&quot;</span>,  <span class=\"stringliteral\">&quot;-showFailed&quot;</span>                                 );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-ss&quot;</span>,  <span class=\"stringliteral\">&quot;-showStats&quot;</span>                                  );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-sgs&quot;</span>, <span class=\"stringliteral\">&quot;-showGlobalStats&quot;</span>                            );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-dh&quot;</span>,  <span class=\"stringliteral\">&quot;-dumpHierarchy&quot;</span>,          <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2adafab53ea4a643325262b9c140af093279\">MSyntax::kString</a>   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-atr&quot;</span>, <span class=\"stringliteral\">&quot;-animTimeRange&quot;</span>                              );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-gma&quot;</span>, <span class=\"stringliteral\">&quot;-gpuManufacturer&quot;</span>                            );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-gmo&quot;</span>, <span class=\"stringliteral\">&quot;-gpuModel&quot;</span>                                   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-gdv&quot;</span>, <span class=\"stringliteral\">&quot;-gpuDriverVersion&quot;</span>                           );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-gms&quot;</span>, <span class=\"stringliteral\">&quot;-gpuMemorySize&quot;</span>                              );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-ado&quot;</span>, <span class=\"stringliteral\">&quot;-allDagObjects&quot;</span>                              );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-r&quot;</span>,   <span class=\"stringliteral\">&quot;-refresh&quot;</span>                                    );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-ra&quot;</span>,  <span class=\"stringliteral\">&quot;-refreshAll&quot;</span>                                 );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-rs&quot;</span>,  <span class=\"stringliteral\">&quot;-refreshSettings&quot;</span>                            );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-wbr&quot;</span>, <span class=\"stringliteral\">&quot;-waitForBackgroundReading&quot;</span>                   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-wm&quot;</span>,  <span class=\"stringliteral\">&quot;-writeMaterials&quot;</span>                             );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-wuv&quot;</span>, <span class=\"stringliteral\">&quot;-writeUVs&quot;</span>                                   );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-omb&quot;</span>, <span class=\"stringliteral\">&quot;-optimizeAnimationsForMotionBlur&quot;</span>            );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-ubt&quot;</span>, <span class=\"stringliteral\">&quot;-useBaseTessellation&quot;</span>                        );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-p&quot;</span>,   <span class=\"stringliteral\">&quot;-prompt&quot;</span>                                     );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-lfe&quot;</span>, <span class=\"stringliteral\">&quot;-listFileEntries&quot;</span>                            );</div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>(<span class=\"stringliteral\">&quot;-lse&quot;</span>, <span class=\"stringliteral\">&quot;-listShapeEntries&quot;</span>                           );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a2b8a4d7860614d895198e769b7c3ede9\">makeFlagQueryWithFullArgs</a>(<span class=\"stringliteral\">&quot;-dumpHierarchy&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a16e72b75488e20aafdc0c3c64e663bea\">useSelectionAsDefault</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    syntax.<a name=\"a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a299f2c91c864387f1b4208e99a72631d\">setObjectType</a>(<a name=\"a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a72b517c34c0de9b91ce4b5342675186baf19c7ad857ee046737f2d9c08e7bb70d\">MSyntax::kSelectionList</a>, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a414088ac458bc323845634fcf7663e69\">enableQuery</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    syntax.<a name=\"a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a2a329cd0b0d89bc1b9721c522d6d0006\">enableEdit</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> syntax;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Command::Command()</div>\n\
<div class=\"line\">    : fMode(kCreate)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Command::~Command()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Command::isUndoable()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Command::hasSyntax()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::AddHierarchy(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp;                      dagPath,</div>\n\
<div class=\"line\">    std::map&lt;std::string, int&gt;*          idMap,</div>\n\
<div class=\"line\">    std::vector&lt;MObject&gt;*                sourceNodes,</div>\n\
<div class=\"line\">    std::vector&lt;std::vector&lt;MDagPath&gt; &gt;* sourcePaths,</div>\n\
<div class=\"line\">    std::vector&lt;MObject&gt;*                gpuCacheNodes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> firstDagPath;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = dagNode.getPath(firstDagPath);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    std::string firstPath(firstDagPath.partialPathName().asChar());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::map&lt;std::string, int&gt;::iterator pos = idMap-&gt;find(firstPath);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pos != idMap-&gt;end()){</div>\n\
<div class=\"line\">        <span class=\"comment\">// Already traversed. Only store its DAG Path.</span></div>\n\
<div class=\"line\">        (*sourcePaths)[pos-&gt;second].push_back(dagPath);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> object(dagNode.object());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msgFmt;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isWarning = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNode.typeId() == ShapeNode::id) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fMode == kCreate) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Recursive bake a gpuCache node</span></div>\n\
<div class=\"line\">                (*idMap)[firstPath] = (int)sourceNodes-&gt;size();</div>\n\
<div class=\"line\">                sourceNodes-&gt;push_back(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\">                sourcePaths-&gt;push_back(std::vector&lt;MDagPath&gt;(1, dagPath));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Query flag is set</span></div>\n\
<div class=\"line\">                gpuCacheNodes-&gt;push_back(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Baker::isBakeable(<span class=\"keywordtype\">object</span>)) {</div>\n\
<div class=\"line\">            (*idMap)[firstPath] = (int)sourceNodes-&gt;size();</div>\n\
<div class=\"line\">            sourceNodes-&gt;push_back(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\">            sourcePaths-&gt;push_back(std::vector&lt;MDagPath&gt;(1, dagPath));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fMode != kCreate &amp;&amp; fShowFailedFlag.isSet()) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">                msgFmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNodeWontBakeErrorMsg, status);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fShowFailedFlag.isSet()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">            msgFmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNodeBakedFailedErrorMsg, status);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (msgFmt.length() &gt; 0) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeName = firstDagPath.fullPathName();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">            msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(msgFmt, nodeName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isWarning) {</div>\n\
<div class=\"line\">                <a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(msg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChild = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412\">childCount</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numChild; ++i) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> childPath = dagPath;</div>\n\
<div class=\"line\">        childPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a82ffa451bdebeba69b2c4c55f924980b\">push</a>(dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#acf3680f39b19e4b44fe459efa2b76219\">child</a>(i));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> childNode(childPath);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!childNode.isIntermediateObject())</div>\n\
<div class=\"line\">            AddHierarchy(childPath, idMap, sourceNodes, sourcePaths, gpuCacheNodes);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Command::AddSelected(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp;                objects,</div>\n\
<div class=\"line\">    std::vector&lt;MObject&gt;*                sourceNodes,</div>\n\
<div class=\"line\">    std::vector&lt;std::vector&lt;MDagPath&gt; &gt;* sourcePaths,</div>\n\
<div class=\"line\">    std::vector&lt;MObject&gt;*                gpuCacheNodes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// map first DAG path to node index</span></div>\n\
<div class=\"line\">    std::map&lt;std::string, int&gt; idMap;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i&lt;objects.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>(); ++i) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> sourceDagPath;</div>\n\
<div class=\"line\">        status = objects.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(i, sourceDagPath);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status == MS::kSuccess) {</div>\n\
<div class=\"line\">            AddHierarchy(sourceDagPath, &amp;idMap, sourceNodes, sourcePaths, gpuCacheNodes);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fMode == kCreate) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sourceNodes-&gt;empty()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (gpuCacheNodes-&gt;empty()) {</div>\n\
<div class=\"line\">                msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNoObjBakable2ErrorMsg, stat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNoObjBakable1ErrorMsg, stat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            displayWarning(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fRefreshSettingsFlag.isSet() &amp;&amp; gpuCacheNodes-&gt;empty()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sourceNodes-&gt;empty()) {</div>\n\
<div class=\"line\">                msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNoObjBaked2ErrorMsg, stat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNoObjBaked1ErrorMsg, stat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            displayWarning(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> Command::doIt(<span class=\"keyword\">const</span> <a name=\"_a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html\">MArgDatabase</a> argsDb(syntax(), args, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numFlags = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Save the command arguments for undo/redo purposes.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (argsDb.isEdit()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (argsDb.isQuery()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kEditQueryFlagErrorMsg, stat);</div>\n\
<div class=\"line\">            displayError(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fMode = kEdit;</div>\n\
<div class=\"line\">        numFlags++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (argsDb.isQuery()) {</div>\n\
<div class=\"line\">        fMode = kQuery;</div>\n\
<div class=\"line\">        numFlags++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fDirectoryFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-directory&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fDirectoryFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kDirectoryWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fFileNameFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-fileName&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fFileNameFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kFileNameWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fSaveMultipleFilesFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-saveMultipleFiles&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fSaveMultipleFilesFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kSaveMultipleFilesWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fFilePrefixFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-filePrefix&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fFilePrefixFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kFilePrefixWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fClashOptionFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-clashOption&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fClashOptionFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kClashOptionWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fOptimizeFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-optimize&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fOptimizeFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kOptimizeWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fOptimizationThresholdFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-optimizationThreshold&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fOptimizationThresholdFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kOptimizationThresholdWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fStartTimeFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-startTime&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fStartTimeFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStartTimeWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fEndTimeFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-endTime&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fEndTimeFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kEndTimeWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fSimulationRateFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-simulationRate&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fSimulationRateFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kSimulationRateWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSimulationRateFlag.isSet()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> minRate(0.004, <a name=\"a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda28ce0398d2e7274904c6359ef92ed94a\">MTime::kFilm</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fSimulationRateFlag.arg() &lt; minRate) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Simulation rate was below 1 tick, issue an appropriate error message.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg, fmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kSimulationRateWrongValueMsg, stat);</div>\n\
<div class=\"line\">            msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(fmt, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>() + minRate.as(<a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>()));</div>\n\
<div class=\"line\">            displayError(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fSampleMultiplierFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-sampleMultiplier&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fSampleMultiplierFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kSampleMultiplierWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSampleMultiplierFlag.isSet() &amp;&amp; fSampleMultiplierFlag.arg() &lt;= 0) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kSampleMultiplierWrongValueMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fCompressLevelFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-compressLevel&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fCompressLevelFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kCompressLevelWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fDataFormatFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-dataFormat&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fDataFormatFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kDataFormatWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fShowFailedFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-showFailed&quot;</span>);</div>\n\
<div class=\"line\">    assert(fShowFailedFlag.isModeValid(fMode));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fShowStats.parse(argsDb, <span class=\"stringliteral\">&quot;-showStats&quot;</span>);</div>\n\
<div class=\"line\">    assert(fShowStats.isModeValid(fMode));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fShowGlobalStats.parse(argsDb, <span class=\"stringliteral\">&quot;-showGlobalStats&quot;</span>);</div>\n\
<div class=\"line\">    assert(fShowGlobalStats.isModeValid(fMode));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fDumpHierarchy.parse(argsDb, <span class=\"stringliteral\">&quot;-dumpHierarchy&quot;</span>);</div>\n\
<div class=\"line\">    assert(fDumpHierarchy.isModeValid(fMode));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fAnimTimeRangeFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-animTimeRange&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fAnimTimeRangeFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kAnimTimeRangeWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fAllDagObjectsFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-allDagObjects&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fAllDagObjectsFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kAllDagObjectsWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fRefreshFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-refresh&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fRefreshFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kRefreshWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fRefreshAllFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-refreshAll&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fRefreshAllFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kRefreshAllWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fListFileEntriesFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-listFileEntries&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fListFileEntriesFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kListFileEntriesWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fListShapeEntriesFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-listShapeEntries&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fListShapeEntriesFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kListShapeEntriesWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fRefreshSettingsFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-refreshSettings&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fRefreshSettingsFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kRefreshSettingsWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fGpuManufacturerFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-gpuManufacturer&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fGpuManufacturerFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGpuManufacturerWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fGpuModelFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-gpuModel&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fGpuModelFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGpuModelWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fGpuDriverVersion.parse(argsDb, <span class=\"stringliteral\">&quot;-gpuDriverVersion&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fGpuDriverVersion.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGpuDriverVersionWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fGpuMemorySize.parse(argsDb, <span class=\"stringliteral\">&quot;-gpuMemorySize&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fGpuMemorySize.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGpuMemorySizeWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fWaitForBackgroundReadingFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-waitForBackgroundReading&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWaitForBackgroundReadingFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kWaitForBackgroundReadingWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fWriteMaterials.parse(argsDb, <span class=\"stringliteral\">&quot;-writeMaterials&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWriteMaterials.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kWriteMaterialsWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fUVsFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-writeUVs&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !fUVsFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kWriteUVsWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fOptimizeAnimationsForMotionBlurFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-optimizeAnimationsForMotionBlur&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fOptimizeAnimationsForMotionBlurFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kOptimizeAnimationsForMotionBlurWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fUseBaseTessellationFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-useBaseTessellation&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fUseBaseTessellationFlag.isModeValid(fMode)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kUseBaseTessellationWrongModeMsg, stat);</div>\n\
<div class=\"line\">        displayError(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    numFlags += fPromptFlag.parse(argsDb, <span class=\"stringliteral\">&quot;-prompt&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fRefreshAllFlag.isSet())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Ideally, we would use MArgParser to determine number of other flags used.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// However, MArgParser returns an error when usesSelectionAsDefault() == true</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and no objects are found.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Instead, we manually test for the presence of other flags.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numFlags &gt; 1 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kRefreshAllOtherFlagsMsg, stat);</div>\n\
<div class=\"line\">            displayError(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        refreshAll();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fListFileEntriesFlag.isSet())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numFlags &gt; 1 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kListFileEntriesOtherFlagsMsg, stat);</div>\n\
<div class=\"line\">            displayError(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        listFileEntries();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fListShapeEntriesFlag.isSet())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numFlags &gt; 1 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kListShapeEntriesOtherFlagsMsg, stat);</div>\n\
<div class=\"line\">            displayError(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        listShapeEntries();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Backup the current selection</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selectionBackup;</div>\n\
<div class=\"line\">    <a name=\"a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>(selectionBackup);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> objects;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fAllDagObjectsFlag.isSet()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// -allDagObjects flag is set, export all the top-level DAG Nodes</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> result;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;ls -assemblies -long&quot;</span>, result);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; result.<a name=\"a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">            objects.<a name=\"a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(result[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// -allDagObjects flag is not set, export the selection or gpuCache arguments</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Duplicates are removed by merge().</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selectedObjectArgs;</div>\n\
<div class=\"line\">        status = argsDb.getObjects(selectedObjectArgs);</div>\n\
<div class=\"line\">        MStatError(status, <span class=\"stringliteral\">&quot;argsDb.getObjects()&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!selectedObjectArgs.<a name=\"a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a8174b25717a6f860d40f2ca259442df5\">isEmpty</a>()) {</div>\n\
<div class=\"line\">            status = objects.<a name=\"a122\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a92c9d648de48c0e6535fc814d32bb72c\">merge</a>(selectedObjectArgs, <a name=\"a123\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a2c76c3f8b54a741ba9fdbfe6b5e0ee5cae05c98447368025f36e540e462724d18\">MSelectionList::kMergeNormal</a>);</div>\n\
<div class=\"line\">            MStatError(status, <span class=\"stringliteral\">&quot;objects.merge()&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (objects.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() == 0 &amp;&amp;</div>\n\
<div class=\"line\">            !(fMode == kQuery &amp;&amp; fShowGlobalStats.isSet()) &amp;&amp;</div>\n\
<div class=\"line\">            !(fMode == kEdit &amp;&amp; fRefreshSettingsFlag.isSet()) &amp;&amp;</div>\n\
<div class=\"line\">            !(fMode == kQuery &amp;&amp; fGpuManufacturerFlag.isSet()) &amp;&amp;</div>\n\
<div class=\"line\">            !(fMode == kQuery &amp;&amp; fGpuModelFlag.isSet()) &amp;&amp;</div>\n\
<div class=\"line\">            !(fMode == kQuery &amp;&amp; fGpuDriverVersion.isSet()) &amp;&amp;</div>\n\
<div class=\"line\">            !(fMode == kQuery &amp;&amp; fGpuMemorySize.isSet())</div>\n\
<div class=\"line\">            ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kNoObjectsMsg,status);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        SelectionChecker selectionChecker(objects);</div>\n\
<div class=\"line\">        objects = selectionChecker.selection();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;MObject&gt;                sourceNodes;</div>\n\
<div class=\"line\">    std::vector&lt;std::vector&lt;MDagPath&gt; &gt; sourcePaths;</div>\n\
<div class=\"line\">    std::vector&lt;MObject&gt;                gpuCacheNodes;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fMode == kCreate || fMode == kEdit || fShowStats.isSet() ||</div>\n\
<div class=\"line\">            fDumpHierarchy.isSet() || fAnimTimeRangeFlag.isSet() ||</div>\n\
<div class=\"line\">            fWaitForBackgroundReadingFlag.isSet()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!AddSelected(objects, &amp;sourceNodes, &amp;sourcePaths, &amp;gpuCacheNodes))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We flush the selection list before executing any MEL command</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// through MDGModifier::commandToExecute. This saves a LOT of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// memory!!! This is due to the fact that each executed MEL</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// command might take a copy of the selection list to restore it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// on undo. But, this is totally unnecessary since we invoking</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// them from another MEL command that already takes care of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// restoring the selection list on undo!!!</span></div>\n\
<div class=\"line\">    <a name=\"a124\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a33e6a7c8fa1c06fd64063bd08d4e4aef\">MGlobal::setActiveSelectionList</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>(), <a name=\"a125\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a5b77552a306fb2b916ef75e34e1298d4a7f418bb5928b79c7e0222251461055a6\">MGlobal::kReplaceList</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (fMode) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kCreate:   status = doCreate(sourceNodes, sourcePaths, objects); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kEdit:     status = doEdit(gpuCacheNodes);     <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kQuery:    status = doQuery(gpuCacheNodes);    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore the selection.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a33e6a7c8fa1c06fd64063bd08d4e4aef\">MGlobal::setActiveSelectionList</a>(selectionBackup, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a5b77552a306fb2b916ef75e34e1298d4a7f418bb5928b79c7e0222251461055a6\">MGlobal::kReplaceList</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> Command::doCreate(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp;                sourceNodes,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> std::vector&lt;std::vector&lt;MDagPath&gt; &gt;&amp; sourcePaths,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>&amp;                      objects)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute the baked mesh before committing the Dag modifier so</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// that the Dag modifier includes the baking.</span></div>\n\
<div class=\"line\">    MCheckReturn(</div>\n\
<div class=\"line\">        Command::doBaking(</div>\n\
<div class=\"line\">            sourceNodes,</div>\n\
<div class=\"line\">            sourcePaths,</div>\n\
<div class=\"line\">            fStartTimeFlag.arg(<a name=\"a126\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#aad65deeba716641e7c1803f00d157753\">MAnimControl::animationStartTime</a>()),</div>\n\
<div class=\"line\">            fEndTimeFlag.arg(<a name=\"a127\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#ae8b44c40ec020b0779a34dc748a74366\">MAnimControl::animationEndTime</a>()),</div>\n\
<div class=\"line\">            fSimulationRateFlag.arg(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(1, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>())),</div>\n\
<div class=\"line\">            fSampleMultiplierFlag.arg(1)));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> Command::doQuery(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// set the result of gpuCache command</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fShowStats.isSet() ||</div>\n\
<div class=\"line\">        fShowGlobalStats.isSet() ||</div>\n\
<div class=\"line\">        fDumpHierarchy.isSet()</div>\n\
<div class=\"line\">    ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// String array result is incompatible with double[2]</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fAnimTimeRangeFlag.isSet()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kIncompatibleQueryMsg,stat);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> result;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fShowStats.isSet()) {</div>\n\
<div class=\"line\">            showStats(gpuCacheNodes, result);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fShowGlobalStats.isSet()) {</div>\n\
<div class=\"line\">            showGlobalStats(result);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fDumpHierarchy.isSet()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fDumpHierarchy.isArgValid()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Dump to a text file</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> file;</div>\n\
<div class=\"line\">                file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(fDumpHierarchy.arg());</div>\n\
<div class=\"line\">                MCheckReturn( dumpHierarchyToFile(gpuCacheNodes, file) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<span class=\"stringliteral\">&quot;Dumping hierarchy to: &quot;</span> + file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Dump to script editor</span></div>\n\
<div class=\"line\">                dumpHierarchy(gpuCacheNodes, result);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> output;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i &gt; 0) output += <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">                output += result[i];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a name=\"a128\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>(output);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fAnimTimeRangeFlag.isSet()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// -animTimeRange will return double[2] in current time unit</span></div>\n\
<div class=\"line\">        <a name=\"_a129\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> animTimeRange;</div>\n\
<div class=\"line\">        showAnimTimeRange(gpuCacheNodes, animTimeRange);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>(animTimeRange);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fGpuManufacturerFlag.isSet()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>(VramQuery::manufacturer());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fGpuModelFlag.isSet()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>(VramQuery::model());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fGpuDriverVersion.isSet()) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> driverVersion[3];</div>\n\
<div class=\"line\">        VramQuery::driverVersion(driverVersion);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> verionStr;</div>\n\
<div class=\"line\">        verionStr += driverVersion[0];</div>\n\
<div class=\"line\">        verionStr += <span class=\"stringliteral\">&quot;.&quot;</span>;</div>\n\
<div class=\"line\">        verionStr += driverVersion[1];</div>\n\
<div class=\"line\">        verionStr += <span class=\"stringliteral\">&quot;.&quot;</span>;</div>\n\
<div class=\"line\">        verionStr += driverVersion[2];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>(verionStr);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fGpuMemorySize.isSet()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>((<span class=\"keywordtype\">int</span>)(VramQuery::queryVram() / 1024 / 1024));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fWaitForBackgroundReadingFlag.isSet()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Wait until the background reading is finished.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node : gpuCacheNodes) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Request the geometry to begin reading</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(node);</div>\n\
<div class=\"line\">            ShapeNode* shapeNode = (ShapeNode*)dagNode.userNode();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shapeNode) {</div>\n\
<div class=\"line\">                shapeNode-&gt;getCachedGeometry();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Wait for the reading</span></div>\n\
<div class=\"line\">            GlobalReaderCache::theCache().waitForRead(shapeNode-&gt;getCacheFileEntry().get());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Pull the data</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shapeNode) {</div>\n\
<div class=\"line\">                shapeNode-&gt;getCachedGeometry();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> Command::doEdit(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fRefreshSettingsFlag.isSet()) {</div>\n\
<div class=\"line\">        Config::refresh();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fRefreshFlag.isSet()) {</div>\n\
<div class=\"line\">        refresh(gpuCacheNodes);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> Command::doBaking(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp;                sourceNodes,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;std::vector&lt;MDagPath&gt; &gt;&amp; sourcePaths,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>                       startTime,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>                       endTime,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>                       simulationRate,<span class=\"comment\">// The time interval to do the simulation.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                         samplingRate   <span class=\"comment\">// How many time intervals to sample once.</span></div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Check the start time and end time.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (startTime &gt; endTime) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStartEndTimeErrorMsg, stat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find out the file names that we are going to write to.</span></div>\n\
<div class=\"line\">    NodePathRegistry pathRegistry(</div>\n\
<div class=\"line\">        fAllDagObjectsFlag.isSet(),</div>\n\
<div class=\"line\">        fSaveMultipleFilesFlag.arg(<span class=\"keyword\">true</span>),</div>\n\
<div class=\"line\">        fDirectoryFlag.arg(),</div>\n\
<div class=\"line\">        fFilePrefixFlag.arg(),</div>\n\
<div class=\"line\">        fFileNameFlag.arg(),</div>\n\
<div class=\"line\">        fClashOptionFlag.arg()</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> std::vector&lt;MDagPath&gt;&amp; dagPaths : sourcePaths) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path : dagPaths) {</div>\n\
<div class=\"line\">            pathRegistry.add(path);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    pathRegistry.resolve();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prompt for overwriting files. (Default is overwrite)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac7296da94b1d0b659833fc653a6af10e\">MGlobal::mayaState</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#afb0008b4212928b7913ba9cfc64fe88bafd5ecc6725f6695a70a949747cf89546\">MGlobal::kInteractive</a> &amp;&amp; fPromptFlag.isSet()) {</div>\n\
<div class=\"line\">        pathRegistry.promptOverwrite();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set up the progress bar for baking</span></div>\n\
<div class=\"line\">    ProgressBar progressBar(kExportingMsg,</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)(sourceNodes.size() * (int)(</div>\n\
<div class=\"line\">        (endTime - startTime + simulationRate).as(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>) /</div>\n\
<div class=\"line\">        simulationRate.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>)) / samplingRate));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// First save the current time, so we can restore it later.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> previousTime = <a name=\"a130\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a8cb1e013d828c1d012fee789b14e0060\">MAnimControl::currentTime</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For go to start time.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> currentTime = startTime;</div>\n\
<div class=\"line\">    <a name=\"a131\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a5783fae1452763e794aba5d5afdc95b0\">MAnimControl::setCurrentTime</a>(currentTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The DAG object bakers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt; std::shared_ptr&lt;Baker&gt; &gt; Bakers;</div>\n\
<div class=\"line\">    Bakers bakers;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The top-level baker for materials.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;MaterialBaker&gt; materialBaker;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fWriteMaterials.isSet()) {</div>\n\
<div class=\"line\">        materialBaker = std::make_shared&lt;MaterialBaker&gt;();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sourceNodes.size(); i++) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a new DAG object baker.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Baker&gt; baker(</div>\n\
<div class=\"line\">            Baker::create(sourceNodes[i], sourcePaths[i]));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!baker) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kCreateBakerErrorMsg, stat);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;ShapeBaker&gt; shapeBaker = std::dynamic_pointer_cast&lt;ShapeBaker,Baker&gt;( baker );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( shapeBaker &amp;&amp; fUVsFlag.isSet() ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            shapeBaker-&gt;enableUVs();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (materialBaker) {</div>\n\
<div class=\"line\">            baker-&gt;setWriteMaterials();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUseBaseTessellationFlag.isSet()) {</div>\n\
<div class=\"line\">            baker-&gt;setUseBaseTessellation();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        bakers.push_back(baker);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// sample all shapes at start time</span></div>\n\
<div class=\"line\">        MCheckReturn(baker-&gt;sample(currentTime));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the connected shaders to the material baker.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (materialBaker) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path : sourcePaths[i]) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (path.node().hasFn(<a name=\"a132\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a750b5e8123336c2306a300249b57201d\">MFn::kShape</a>)) {</div>\n\
<div class=\"line\">                    MCheckReturn( materialBaker-&gt;addShapePath(path) );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MUpdateProgressAndCheckInterruption(progressBar);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Sample all materials at start time.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (materialBaker) {</div>\n\
<div class=\"line\">        MCheckReturn( materialBaker-&gt;sample(currentTime) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Sample the vertex attributes over time.</span></div>\n\
<div class=\"line\">    currentTime += simulationRate;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> sampleIdx = 1; currentTime&lt;=endTime;</div>\n\
<div class=\"line\">         currentTime += simulationRate, ++sampleIdx) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Advance time.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a5783fae1452763e794aba5d5afdc95b0\">MAnimControl::setCurrentTime</a>(currentTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sampleIdx % samplingRate == 0) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> std::shared_ptr&lt;Baker&gt;&amp; baker : bakers) {</div>\n\
<div class=\"line\">                MCheckReturn(baker-&gt;sample(currentTime));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                MUpdateProgressAndCheckInterruption(progressBar);</div>\n\
<div class=\"line\">            }    <span class=\"comment\">// for each baker</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (materialBaker) {</div>\n\
<div class=\"line\">                MCheckReturn( materialBaker-&gt;sample(currentTime) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }    <span class=\"comment\">// for each time sample</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Construct the material graphs</span></div>\n\
<div class=\"line\">    MaterialGraphMap::Ptr materials;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (materialBaker) {</div>\n\
<div class=\"line\">        materialBaker-&gt;buildGraph();</div>\n\
<div class=\"line\">        materials = materialBaker-&gt;get();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Construct SubNode hierarchy.</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        assert(bakers.size() == sourceNodes.size());</div>\n\
<div class=\"line\">        assert(bakers.size() == sourcePaths.size());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a SubNode for each instance.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sourcePaths.size(); i++) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; sourcePaths[i].size(); j++) {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path  = sourcePaths[i][j];</div>\n\
<div class=\"line\">                SubNode::MPtr subNode = bakers[i]-&gt;getNode(j);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                pathRegistry.associateSubNode(path, subNode);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pathRegistry.constructHierarchy();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We are done with the bakers now.</span></div>\n\
<div class=\"line\">    bakers.clear();</div>\n\
<div class=\"line\">    materialBaker.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore current time.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a5783fae1452763e794aba5d5afdc95b0\">MAnimControl::setCurrentTime</a>(previousTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Preparing the root nodes and files to write.</span></div>\n\
<div class=\"line\">    FileAndSubNodeList fileList;</div>\n\
<div class=\"line\">    pathRegistry.generateFileAndSubNodes(fileList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Do consolidation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fOptimizeFlag.isSet()) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>  threshold  = fOptimizationThresholdFlag.arg(40000);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> motionBlur = fOptimizeAnimationsForMotionBlurFlag.isSet();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(FileAndSubNode&amp; v : fileList) {</div>\n\
<div class=\"line\">            Consolidator consolidator(v.subNode, threshold, motionBlur);</div>\n\
<div class=\"line\">            MCheckReturn( consolidator.consolidate() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            SubNode::MPtr consolidatedRootNode = consolidator.consolidatedRootNode();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (consolidatedRootNode) {</div>\n\
<div class=\"line\">                v.subNode = consolidatedRootNode;</div>\n\
<div class=\"line\">                v.isDummy = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set up progress bar for writing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// FIXME: The cache writer should provide more granularity for</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// updating the progress bar.</span></div>\n\
<div class=\"line\">    progressBar.reset(kWritingMsg, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)fileList.size());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write the baked geometry to the cache file.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> timePerCycle = simulationRate * samplingRate;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Writer gpuCacheWriter(</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">char</span>)fCompressLevelFlag.arg(-1),</div>\n\
<div class=\"line\">        timePerCycle,</div>\n\
<div class=\"line\">        startTime</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> FileAndSubNode&amp; v : fileList) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (v.isDummy) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// This is a dummy root node. We are going to write its children.</span></div>\n\
<div class=\"line\">            MCheckReturn(</div>\n\
<div class=\"line\">                gpuCacheWriter.writeNodes(</div>\n\
<div class=\"line\">                    v.subNode-&gt;getChildren(),</div>\n\
<div class=\"line\">                    materials,</div>\n\
<div class=\"line\">                    v.targetFile</div>\n\
<div class=\"line\">                )</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We write the node to its taget file.</span></div>\n\
<div class=\"line\">            MCheckReturn(</div>\n\
<div class=\"line\">                gpuCacheWriter.writeNode(</div>\n\
<div class=\"line\">                    v.subNode,</div>\n\
<div class=\"line\">                    materials,</div>\n\
<div class=\"line\">                    v.targetFile</div>\n\
<div class=\"line\">                )</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        appendToResult(v.targetFile.resolvedFullName());</div>\n\
<div class=\"line\">        MUpdateProgressAndCheckInterruption(progressBar);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::showStats(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsAllFramesMsg, status));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        StatsVisitor stats;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; gpuCacheObject : gpuCacheNodes) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> gpuCacheFn(gpuCacheObject);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* node = gpuCacheFn.userNode();</div>\n\
<div class=\"line\">            assert(node);</div>\n\
<div class=\"line\">            assert(dynamic_cast&lt;ShapeNode*&gt;(node));</div>\n\
<div class=\"line\">            ShapeNode* gpuCacheNode =</div>\n\
<div class=\"line\">                <span class=\"keyword\">static_cast&lt;</span>ShapeNode*<span class=\"keyword\">&gt;</span>(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            stats.accumulateNode(gpuCacheNode-&gt;getCachedGeometry());</div>\n\
<div class=\"line\">            stats.accumulateMaterialGraph(gpuCacheNode-&gt;getCachedMaterial());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        stats.print(result, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kStatsCurrentFrameMsg, status));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        StatsVisitor stats(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a8cb1e013d828c1d012fee789b14e0060\">MAnimControl::currentTime</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; gpuCacheObject : gpuCacheNodes) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> gpuCacheFn(gpuCacheObject);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* node = gpuCacheFn.userNode();</div>\n\
<div class=\"line\">            assert(node);</div>\n\
<div class=\"line\">            assert(dynamic_cast&lt;ShapeNode*&gt;(node));</div>\n\
<div class=\"line\">            ShapeNode* gpuCacheNode =</div>\n\
<div class=\"line\">                <span class=\"keyword\">static_cast&lt;</span>ShapeNode*<span class=\"keyword\">&gt;</span>(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            stats.accumulateNode(gpuCacheNode-&gt;getCachedGeometry());</div>\n\
<div class=\"line\">            stats.accumulateMaterialGraph(gpuCacheNode-&gt;getCachedMaterial());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        stats.print(result, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::showGlobalStats(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Exclude internal unit bounding box</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> unitBoundingBoxIndicesBytes = UnitBoundingBox::indices()-&gt;bytes();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> unitBoundingBoxPositionsBytes = UnitBoundingBox::positions()-&gt;bytes();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> unitBoundingBoxBytes = unitBoundingBoxIndicesBytes + unitBoundingBoxPositionsBytes;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> unitBoundingBoxNbIndices = 1;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> unitBoundingBoxNbVertices = 1;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> unitBoundingBoxNbBuffers = unitBoundingBoxNbIndices + unitBoundingBoxNbVertices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// System memory buffers</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize =</div>\n\
<div class=\"line\">            toHumanUnits(IndexBuffer::nbAllocatedBytes() +</div>\n\
<div class=\"line\">                         VertexBuffer::nbAllocatedBytes() -</div>\n\
<div class=\"line\">                         unitBoundingBoxBytes,</div>\n\
<div class=\"line\">                         memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers += (double)(IndexBuffer::nbAllocated() +</div>\n\
<div class=\"line\">                                                     VertexBuffer::nbAllocated() -</div>\n\
<div class=\"line\">                                                     unitBoundingBoxNbBuffers);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalSystemStatsMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize =</div>\n\
<div class=\"line\">            toHumanUnits(IndexBuffer::nbAllocatedBytes() - unitBoundingBoxIndicesBytes, memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers += (double)(IndexBuffer::nbAllocated() - unitBoundingBoxNbIndices);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalSystemStatsIndexMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize =</div>\n\
<div class=\"line\">            toHumanUnits(VertexBuffer::nbAllocatedBytes() - unitBoundingBoxPositionsBytes, memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers +=</div>\n\
<div class=\"line\">                                 (double)(VertexBuffer::nbAllocated() - unitBoundingBoxNbVertices);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalSystemStatsVertexMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Video memory buffers</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(VBOBuffer::nbAllocatedBytes(),</div>\n\
<div class=\"line\">                                       memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers += (double)(VBOBuffer::nbAllocated());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalVideoStatsMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(VBOBuffer::nbIndexAllocatedBytes(),</div>\n\
<div class=\"line\">                                       memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers +=</div>\n\
<div class=\"line\">                                 (double)VBOBuffer::nbIndexAllocated();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalVideoStatsIndexMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(VBOBuffer::nbVertexAllocatedBytes(),</div>\n\
<div class=\"line\">                                       memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers +=</div>\n\
<div class=\"line\">                                 (double)VBOBuffer::nbVertexAllocated();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalVideoStatsVertexMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Last refresh statistics</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalRefreshStatsMsg, status));</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(VBOBuffer::nbUploadedBytes(),</div>\n\
<div class=\"line\">                                       memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers +=</div>\n\
<div class=\"line\">                                 (double)VBOBuffer::nbUploaded();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalRefreshStatsUploadMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> memUnit;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>  memSize = toHumanUnits(VBOBuffer::nbEvictedBytes(),</div>\n\
<div class=\"line\">                                       memUnit);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_buffers; msg_buffers +=</div>\n\
<div class=\"line\">                                 (double)VBOBuffer::nbEvicted();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg_memSize; msg_memSize += memSize;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kGlobalRefreshStatsEvictionMsg, status),</div>\n\
<div class=\"line\">            msg_buffers, msg_memSize, memUnit);</div>\n\
<div class=\"line\">        result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::dumpHierarchy(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; result</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; gpuCacheObject : gpuCacheNodes) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> gpuCacheFn(gpuCacheObject);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* node = gpuCacheFn.userNode();</div>\n\
<div class=\"line\">        assert(node);</div>\n\
<div class=\"line\">        assert(dynamic_cast&lt;ShapeNode*&gt;(node));</div>\n\
<div class=\"line\">        ShapeNode* gpuCacheNode =</div>\n\
<div class=\"line\">            <span class=\"keyword\">static_cast&lt;</span>ShapeNode*<span class=\"keyword\">&gt;</span>(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        SubNode::Ptr rootNode = gpuCacheNode-&gt;getCachedGeometry();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (rootNode) {</div>\n\
<div class=\"line\">            DumpHierarchyVisitor visitor(result);</div>\n\
<div class=\"line\">            rootNode-&gt;accept(visitor);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialGraphMap::Ptr materials = gpuCacheNode-&gt;getCachedMaterial();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (materials) {</div>\n\
<div class=\"line\">            DumpMaterialVisitor visitor(result);</div>\n\
<div class=\"line\">            visitor.dumpMaterials(materials);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> Command::dumpHierarchyToFile(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> result;</div>\n\
<div class=\"line\">    dumpHierarchy(gpuCacheNodes, result);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::ofstream output(file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!output.is_open()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kCouldNotSaveFileMsg, stat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg;</div>\n\
<div class=\"line\">        msg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(fmt, file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a1e6852f0e7bd3a71803c25f4d65e7a81\">MPxCommand::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">        output &lt;&lt; result[i].asChar() &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    output.close();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::showAnimTimeRange(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a>&amp; result</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    TimeInterval animTimeRange(TimeInterval::kInvalid);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node : gpuCacheNodes) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(node);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNode.typeId() != ShapeNode::id) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ShapeNode* userNode = <span class=\"keyword\">dynamic_cast&lt;</span>ShapeNode*<span class=\"keyword\">&gt;</span>(dagNode.userNode());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (userNode == NULL) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SubNode::Ptr topNode = userNode-&gt;getCachedGeometry();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (userNode-&gt;backgroundReadingState() != CacheFileEntry::kReadingDone) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Background reading in progress but we need the animation time</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// range information immediately.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cacheFileName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>(node, ShapeNode::aCacheFileName).<a name=\"a133\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> cacheFile;</div>\n\
<div class=\"line\">            cacheFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(cacheFileName);</div>\n\
<div class=\"line\">            cacheFile.<a name=\"a134\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a4b3d5deec3dc9475f712c8e0f2f4d9a2\">setResolveMethod</a>(<a name=\"a135\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#af71e719034e8e9a4c69adcc174ca9049ac1ce1604eaae6e61df873510a9254fb3\">MFileObject::kInputFile</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (cacheFileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 &amp;&amp; cacheFile.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#aa9100e4c626877b706ca9fc67a35c562\">exists</a>()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Temporarily pause the worker thread and read the time range.</span></div>\n\
<div class=\"line\">                ScopedPauseWorkerThread pause;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                GlobalReaderCache::CacheReaderProxy::Ptr proxy =</div>\n\
<div class=\"line\">                    GlobalReaderCache::theCache().getCacheReaderProxy(cacheFile);</div>\n\
<div class=\"line\">                GlobalReaderCache::CacheReaderHolder holder(proxy);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                std::shared_ptr&lt;CacheReader&gt; reader = holder.getCacheReader();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (reader &amp;&amp; reader-&gt;valid()) {</div>\n\
<div class=\"line\">                    TimeInterval interval(TimeInterval::kInvalid);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (reader-&gt;readAnimTimeRange(interval)) {</div>\n\
<div class=\"line\">                        animTimeRange |= interval;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (topNode) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> SubNodeData::Ptr data = topNode-&gt;getData();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (data) {</div>\n\
<div class=\"line\">                animTimeRange |= data-&gt;animTimeRange();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    result.<a name=\"a136\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(2);</div>\n\
<div class=\"line\">    result[0] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(animTimeRange.startTime(), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>).as(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>());</div>\n\
<div class=\"line\">    result[1] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>(animTimeRange.endTime(),   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>).as(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::refresh(<span class=\"keyword\">const</span> std::vector&lt;MObject&gt;&amp; gpuCacheNodes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; node : gpuCacheNodes) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(node);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNode.typeId() != ShapeNode::id) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ShapeNode* userNode = <span class=\"keyword\">dynamic_cast&lt;</span>ShapeNode*<span class=\"keyword\">&gt;</span>(dagNode.userNode());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (userNode == NULL) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        userNode-&gt;refreshCachedGeometry( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Schedule an idle refresh. A normal refresh will cause the Alembic file to be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// loaded immediately. We want this load operation to happen later.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac7296da94b1d0b659833fc653a6af10e\">MGlobal::mayaState</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#afb0008b4212928b7913ba9cfc64fe88bafd5ecc6725f6695a70a949747cf89546\">MGlobal::kInteractive</a>) {</div>\n\
<div class=\"line\">        <a name=\"a137\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a2c877a6e116f8fd3a6e76387403c023a\">MGlobal::executeCommandOnIdle</a>(<span class=\"stringliteral\">&quot;refresh&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::refreshAll()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear the CacheFileRegistry</span></div>\n\
<div class=\"line\">    CacheFileRegistry::theCache().clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Force a refresh on all ShapeNodes</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> nodeFn;</div>\n\
<div class=\"line\">    std::vector&lt;MObjectHandle&gt; shapes;</div>\n\
<div class=\"line\">    CacheShapeRegistry::theCache().getAll( shapes );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; shapes.size(); i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !shapes[i].isValid() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        nodeFn.<a name=\"a138\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>( shapes[i].<span class=\"keywordtype\">object</span>() );</div>\n\
<div class=\"line\">        assert( nodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a1d0bbd4d50dae591f8e003c0aedc8135\">typeId</a>() == ShapeNode::id );</div>\n\
<div class=\"line\">        ShapeNode* shape = (ShapeNode*) nodeFn.<a name=\"a139\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a4f2c53c9d1dcf25a6462c70fb25aead1\">userNode</a>();</div>\n\
<div class=\"line\">        assert( shape );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// File cache has already been cleared, do not request clearFileCache</span></div>\n\
<div class=\"line\">        shape-&gt;refreshCachedGeometry( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Schedule an idle refresh. A normal refresh will cause the Alembic file to be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// loaded immediately. We want this load operation to happen later.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac7296da94b1d0b659833fc653a6af10e\">MGlobal::mayaState</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#afb0008b4212928b7913ba9cfc64fe88bafd5ecc6725f6695a70a949747cf89546\">MGlobal::kInteractive</a>) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a2c877a6e116f8fd3a6e76387403c023a\">MGlobal::executeCommandOnIdle</a>(<span class=\"stringliteral\">&quot;refresh&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::listFileEntries()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> output;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;CacheFileEntry::MPtr&gt; entries;</div>\n\
<div class=\"line\">    CacheFileRegistry::theCache().getAll(entries);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nEntries = entries.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; nEntries; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        output.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( entries[i]-&gt;fResolvedCacheFileName );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>(output);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Command::listShapeEntries()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> output;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;MObjectHandle&gt; shapes;</div>\n\
<div class=\"line\">    CacheShapeRegistry::theCache().getAll(shapes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> nodeFn;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nShapes = shapes.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; nShapes; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> str;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj = shapes[i].object();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = nodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(obj);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( stat )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ShapeNode* shapeNode = (ShapeNode*) nodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a4f2c53c9d1dcf25a6462c70fb25aead1\">userNode</a>();</div>\n\
<div class=\"line\">            CacheFileEntry::MPtr entry = shapeNode-&gt;getCacheFileEntry();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            str += nodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">            str += <span class=\"stringliteral\">&quot;:&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( entry )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                str += entry-&gt;fResolvedCacheFileName;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            str += <span class=\"stringliteral\">&quot;kNullObj:&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        output.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( str );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a6c6cf288906d72135b4a25baa66b42b5\">MPxCommand::setResult</a>(output);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";