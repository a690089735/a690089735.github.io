var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheSample.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_sample_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheSample.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheSample.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _gpuCacheSample_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _gpuCacheSample_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ShapeSample</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Topology and attribute samples.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MBoundingBox.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/Util/Digest.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;mutex&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheConfig.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS ArrayBase</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Non-templated base class for hash-consed arrays. </span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ArrayBase</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> Alembic::Util::Digest Digest;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- classes -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Helper classes for implementing std::unordered_map of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// IndexBuffers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Key </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Key(<span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span>  bytes,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Digest&amp; digest</div>\n\
<div class=\"line\">        ) : fBytes(bytes),</div>\n\
<div class=\"line\">            fDigest(digest)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> fBytes;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest fDigest;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>KeyHash</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::size_t operator()(Key <span class=\"keyword\">const</span>&amp; key)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::size_t seed = 0;</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fBytes);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fDigest.words[0]);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fDigest.words[1]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> seed;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>KeyEqualTo</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> operator()(Key <span class=\"keyword\">const</span>&amp; x,</div>\n\
<div class=\"line\">                        Key <span class=\"keyword\">const</span>&amp; y)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (x.fBytes  == y.fBytes &amp;&amp;</div>\n\
<div class=\"line\">                    x.fDigest == y.fDigest);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (*Callback)(<span class=\"keyword\">const</span> Key&amp; array);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Registers a callback that will be invoked each time a new array is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// created.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> registerCreationCallback(Callback callback);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Unregisters a previously registered creation callback.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> unregisterCreationCallback(Callback callback);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Registers a callback that will be invoked each time an array is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// destructed.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> registerDestructionCallback(Callback callback);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Unregisters a previously registered destruction callback.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> unregisterDestructionCallback(Callback callback);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~ArrayBase();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The number of bytes in the array.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> bytes()<span class=\"keyword\"> const    </span>{ <span class=\"keywordflow\">return</span> fKey.fBytes; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns the Murmur3 checksum of the array. This is used to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// accelerate lookups in containers.</span></div>\n\
<div class=\"line\">    Digest digest()<span class=\"keyword\"> const   </span>{ <span class=\"keywordflow\">return</span> fKey.fDigest; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns the key of the array. This is used to accelerate</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// lookups in containers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Key&amp; key()<span class=\"keyword\"> const  </span>{ <span class=\"keywordflow\">return</span> fKey; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns true if this instance directly implements the ReadableArray</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// interface.  See Array::getReadable()</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isReadable()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fIsReadable; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ArrayBase(<span class=\"keywordtype\">size_t</span> bytes, <span class=\"keyword\">const</span> Digest&amp; digest, <span class=\"keywordtype\">bool</span> isReadable);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prohibited and not implemented.</span></div>\n\
<div class=\"line\">    ArrayBase(<span class=\"keyword\">const</span> ArrayBase&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ArrayBase&amp; operator= (<span class=\"keyword\">const</span> ArrayBase&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We need to store this data member in the base class because</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// they are used by the destructor.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Key fKey;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Is the data in this array owned by the gpuCache plugin?  If not then the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// raw contents may only be accessed from the main thread.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> fIsReadable;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS ArrayReadInterface</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Provides a minimal interface for accessing the data of an Array.  Hides the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// more complicated process of temporarily accessing the data in a</span></div>\n\
<div class=\"line\"><span class=\"comment\">// non-ReadableArray.  When one of these is returned, the data will be accessible</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and the pointer returned by get() will be valid, only until this instance is</span></div>\n\
<div class=\"line\"><span class=\"comment\">// deleted.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ArrayReadInterface</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> T* <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~ArrayReadInterface() {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS Array</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt; <span class=\"keyword\">class </span>ReadableArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A class that provides a minimalistic virtual interface to an</span></div>\n\
<div class=\"line\"><span class=\"comment\">// array. This is used to encapsulate various memory management</span></div>\n\
<div class=\"line\"><span class=\"comment\">// schemes.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>Array : <span class=\"keyword\">public</span> ArrayBase</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Free this reference to the array. It might or might not delete</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the encapsulated array depending on the detail of the memory</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// management. The destructor also takes care of removing its</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// entry from the ArrayRegistry.</span></div>\n\
<div class=\"line\">    ~Array() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Gets a pointer to a readable array or basic read-interface.  If this array is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// internally in a readable format then this is a simple cast.  If this is a</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// non-readable array, then this will convert back to a new readable array which</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// may not be fast and is not safe outside the main thread.  So these functions may</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// not be called except on the main thread.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// See the comment in MayaBufferArray for more details.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> std::shared_ptr&lt;const ArrayReadInterface&lt;T&gt; &gt; getReadable() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; getReadableArray() <span class=\"keyword\">const</span> = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The number of elements in the array.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> size()<span class=\"keyword\"> const     </span>{ <span class=\"keywordflow\">return</span> bytes() / <span class=\"keyword\">sizeof</span>(T); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Array(<span class=\"keywordtype\">size_t</span> size, <span class=\"keyword\">const</span> Digest&amp; digest, <span class=\"keywordtype\">bool</span> isReadable)</div>\n\
<div class=\"line\">        : ArrayBase(size * <span class=\"keyword\">sizeof</span>(T), digest, isReadable)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// An array where the contents are available for reading from system memory.  These are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// safe to use from outside the main thread.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ReadableArray : <span class=\"keyword\">public</span> Array&lt;T&gt;, <span class=\"keyword\">public</span> ArrayReadInterface&lt;T&gt;, <span class=\"keyword\">public</span> std::enable_shared_from_this&lt;ReadableArray&lt;T&gt; &gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Array&lt;T&gt;::Digest Digest;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~ReadableArray()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If overhead from enable_shared_from_this is a problem, then an alternative is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to lookup using our own ArrayBase key into the ArrayRegistry.  Or possibly to </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// take a shared_ptr&lt;Array&gt; as a parameter and cast it to shared_ptr&lt;ReadableArray&gt;, </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// verifying that it equals this.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;const ArrayReadInterface&lt;T&gt; &gt; getReadable()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// enable_shared_from_this&lt;ReadableArray&lt;T&gt;&gt; is a dependant base, sp shared_from_this()</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// fails to compile on Linux gcc as an unqualified symbol unless we add this-&gt;</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> this-&gt;shared_from_this();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; getReadableArray()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// shared_from_this tries to stick you with a shared_ptr&lt;const T&gt; for const functions.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">const_cast&lt;</span>ReadableArray&lt;T&gt; *<span class=\"keyword\">&gt;</span>(<span class=\"keyword\">this</span>)-&gt;shared_from_this();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    ReadableArray(<span class=\"keywordtype\">size_t</span> size, <span class=\"keyword\">const</span> Digest&amp; digest)</div>\n\
<div class=\"line\">        : Array&lt;T&gt;(size, digest, <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS ArrayRegistry</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A registry of all Array currently allocated in the process. This</span></div>\n\
<div class=\"line\"><span class=\"comment\">// registry is used to ensure that we share arrays that have the same</span></div>\n\
<div class=\"line\"><span class=\"comment\">// contents. The digest cryptographic hash-key is used to determine if</span></div>\n\
<div class=\"line\"><span class=\"comment\">// two buffers have the same content.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Note that using cryptographic hash-keys avoids the cost of having</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to compare full buffers but it opens-up the very small possibility</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that we end-up sharing unrelated buffers due to a hash-key</span></div>\n\
<div class=\"line\"><span class=\"comment\">// collision. We therefore also include the size of the arrays in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// lookup to make sure that a hash-key collision won&#39;t lead to access</span></div>\n\
<div class=\"line\"><span class=\"comment\">// violations.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ArrayRegistry is currently instantiated only for</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the index_t and float types.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ArrayRegistry is thread-safe.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ArrayRegistry</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> Alembic::Util::Digest Digest;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns the registry mutex. It must be held while calling</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// lookup() and insert().</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::mutex&amp; mutex();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// If an array with the same digest and size is found in the registry,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a pointer to that array is returned. Otherwise, a null pointer</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is returned.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// NOTE: the registry mutex must be held by the current thread</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// while calling lookup().</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We store two separate sets of Arrays.  One for readable arrays</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and one for non-readable.  Callers specify which type they can accept</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (or both if they can take either) by selecting the appropriate lookup</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// function.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// A readable and non-readable array with the same key are allowed to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// exist at the same time, though that should be a rare occurrence.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// See the comment in MayaBufferArray for more details on this.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;Array&lt;T&gt; &gt; lookup(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;Array&lt;T&gt; &gt; lookupNonReadable(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; lookupReadable(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Inserts the given array into the registry. This function</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// assumes that lookup() has been called before to ensure that an</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// array with the same content is not already present in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// registry.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// NOTE: the registry mutex must be held by the current thread</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// while calling insert().</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> insert(std::shared_ptr&lt;Array&lt;T&gt; &gt; array);</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS SharedArray</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A wrapper around boost shared_array smart pointers.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>SharedArray : <span class=\"keyword\">public</span> ReadableArray&lt;T&gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Array&lt;T&gt;::Digest Digest;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns a pointer to a Array that has the same</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// content as the buffer passed-in as determined by the computed</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// digest hash-key. </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::shared_array&lt;T&gt;&amp; data, <span class=\"keywordtype\">size_t</span> size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Alternate faster version if you already know the Digest hash.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::shared_array&lt;T&gt;&amp; data, Digest digest, <span class=\"keywordtype\">size_t</span> size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~SharedArray() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> T* <span class=\"keyword\">get</span>() <span class=\"keyword\">const</span> <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The constructor is declare private to force user to go through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the create() factory member function.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\"> </div>\n\
<div class=\"line\">    SharedArray(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::shared_array&lt;T&gt;&amp; data,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> size,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest&amp; digest</div>\n\
<div class=\"line\">    ) : ReadableArray&lt;T&gt;(size, digest),</div>\n\
<div class=\"line\">        fData(data)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"> </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::shared_array&lt;T&gt; fData;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS IndexBuffer</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A buffer containing vertex attribute data.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>IndexBuffer</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> Alembic::Util::Digest Digest;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index_t;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const ReadableArray&lt;index_t&gt; &gt; ReadableArrayPtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const ArrayReadInterface&lt;index_t&gt; &gt; ReadInterfacePtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- classes -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Helper classes for implementing std::unordered_map of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// IndexBuffers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Key </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Key(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> beginIdx,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> endIdx</div>\n\
<div class=\"line\">        ) : fArrayKey(array-&gt;key()),</div>\n\
<div class=\"line\">            fBeginIdx(beginIdx),</div>\n\
<div class=\"line\">            fEndIdx(endIdx)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ArrayBase::Key                        fArrayKey;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span>                                fBeginIdx;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span>                                fEndIdx;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>KeyHash</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::size_t operator()(Key <span class=\"keyword\">const</span>&amp; key)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::size_t seed = 0;</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, ArrayBase::KeyHash()(key.fArrayKey));</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fBeginIdx);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fEndIdx);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> seed;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>KeyEqualTo</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> operator()(Key <span class=\"keyword\">const</span>&amp; x,</div>\n\
<div class=\"line\">                        Key <span class=\"keyword\">const</span>&amp; y)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (ArrayBase::KeyEqualTo()(x.fArrayKey, y.fArrayKey) &amp;&amp;</div>\n\
<div class=\"line\">                    x.fBeginIdx == y.fBeginIdx &amp;&amp;</div>\n\
<div class=\"line\">                    x.fEndIdx   == y.fEndIdx);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;IndexBuffer&gt; create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array</div>\n\
<div class=\"line\">    ) </div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> create( array, 0, array-&gt;size() ); }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that the endIdx is exclusive following the STL iterator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// convention.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;IndexBuffer&gt; create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> beginIdx,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> endIdx</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the number of currently allocated IndexBuffer</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// within the process.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> nbAllocated();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the number of bytes occupied by the currently allocated</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// IndexBuffer&#39;s within the process.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> nbAllocatedBytes();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~IndexBuffer();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ReadInterfacePtr readableInterface()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fArray-&gt;getReadable(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numIndices()<span class=\"keyword\"> const       </span>{ <span class=\"keywordflow\">return</span> fEndIdx - fBeginIdx; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> bytes()<span class=\"keyword\"> const            </span>{ <span class=\"keywordflow\">return</span> numIndices() * <span class=\"keyword\">sizeof</span>(index_t); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fArray; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> beginIdx()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fBeginIdx; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> endIdx()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fEndIdx; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Graft an alternate array instance into this IndexBuffer.  This allows the source</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// internal data to be converted to Maya-managed hardware buffers after the ShapeSample</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// structure is already in place (or vice-versa).  The new buffer should represent the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// same contents as the old buffer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note:  this breaks const conventions.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> ReplaceArrayInstance(std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; newArray) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The constructor is declare private to force user to go through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the create() factory member function.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    IndexBuffer(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> beginIdx,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> endIdx</div>\n\
<div class=\"line\">    ) : fArray(array),</div>\n\
<div class=\"line\">        fBeginIdx(beginIdx),</div>\n\
<div class=\"line\">        fEndIdx(endIdx)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span>   std::shared_ptr&lt;Array&lt;index_t&gt; &gt;          fArray;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span>   <span class=\"keywordtype\">size_t</span>                                      fBeginIdx;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span>   <span class=\"keywordtype\">size_t</span>                                      fEndIdx;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS VertexBuffer</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A buffer containing vertex attribute data.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>VertexBuffer</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> Alembic::Util::Digest Digest;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const ReadableArray&lt;float&gt; &gt; ReadableArrayPtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::shared_ptr&lt;const ArrayReadInterface&lt;float&gt; &gt; ReadInterfacePtr;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- classes -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Helper classes for implementing std::unordered_map of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// VertexBuffers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Key </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Key(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp;     array,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp;   desc</div>\n\
<div class=\"line\">        ) : fArrayKey(array-&gt;key()),</div>\n\
<div class=\"line\">            fName(desc.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aca2cba4630391c78dcf1a828986160da\">name</a>().<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()),</div>\n\
<div class=\"line\">            fSemantic(desc.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>()),</div>\n\
<div class=\"line\">            fDataType(desc.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>()),</div>\n\
<div class=\"line\">            fDimension(desc.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>()),</div>\n\
<div class=\"line\">            fOffset(desc.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aaa02ea556dee3025f49406b9d3fb662c\">offset</a>()),</div>\n\
<div class=\"line\">            fStride(desc.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#a2f0529f7f5ff03b8a26e3a3d1925bb2b\">stride</a>())</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ArrayBase::Key fArrayKey;</div>\n\
<div class=\"line\">        std::string fName;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4\">MHWRender::MGeometry::Semantic</a> fSemantic;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MHWRender::MGeometry::DataType</a> fDataType;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> fDimension;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> fOffset;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> fStride;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>KeyHash</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::size_t operator()(Key <span class=\"keyword\">const</span>&amp; key)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::size_t seed = 0;</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, ArrayBase::KeyHash()(key.fArrayKey));</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fName);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fSemantic);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fDataType);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fDimension);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fOffset);</div>\n\
<div class=\"line\">            GPUCache::hash_combine(seed, key.fStride);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> seed;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>KeyEqualTo</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> operator()(Key <span class=\"keyword\">const</span>&amp; x,</div>\n\
<div class=\"line\">                        Key <span class=\"keyword\">const</span>&amp; y)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (ArrayBase::KeyEqualTo()(x.fArrayKey, y.fArrayKey) &amp;&amp;</div>\n\
<div class=\"line\">                    x.fName      == y.fName &amp;&amp;</div>\n\
<div class=\"line\">                    x.fSemantic  == y.fSemantic &amp;&amp;</div>\n\
<div class=\"line\">                    x.fDataType  == y.fDataType &amp;&amp;</div>\n\
<div class=\"line\">                    x.fDimension == y.fDimension &amp;&amp;</div>\n\
<div class=\"line\">                    x.fOffset    == y.fOffset &amp;&amp;</div>\n\
<div class=\"line\">                    x.fStride    == y.fStride);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;VertexBuffer&gt; createPositions(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; array);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;VertexBuffer&gt; createNormals(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; array);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;VertexBuffer&gt; createUVs(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; array);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the number of currently allocated IndexBuffer</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// within the process.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> nbAllocated();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the number of bytes occupied by the currently allocated</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// IndexBuffer&#39;s within the process.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> nbAllocatedBytes();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~VertexBuffer();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ReadInterfacePtr readableInterface()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fArray-&gt;getReadable(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fArray-&gt;size() / fDescriptor.dimension(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> bytes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fArray-&gt;bytes(); }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; array()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fArray; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span>   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp; descriptor()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fDescriptor; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Graft an alternate array instance into this VertexBuffer.  This allows the source</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// internal data to be converted to Maya-managed hardware buffers after the ShapeSample</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// structure is already in place (or vice-versa).  The new buffer should represent the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// same contents as the old buffer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note:  this breaks const conventions.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> ReplaceArrayInstance(std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; newArray) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The constructor is declare private to force user to go through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the create() factory member function.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;VertexBuffer&gt; create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp;     array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp;   desc</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    VertexBuffer(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp;     array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp;   desc</div>\n\
<div class=\"line\">    ) </div>\n\
<div class=\"line\">        : fArray(array),</div>\n\
<div class=\"line\">          fDescriptor(desc)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span>   std::shared_ptr&lt;Array&lt;float&gt; &gt;            fArray;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span>   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>          fDescriptor;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS ShapeSample</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A sample of the topology and vertex attributes for a given time.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ShapeSample</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ShapeSample&gt; create(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ShapeSample&gt; create(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ShapeSample&gt; createEmptySample( </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ShapeSample::create(</div>\n\
<div class=\"line\">            timeInSeconds,</div>\n\
<div class=\"line\">            0,</div>\n\
<div class=\"line\">            0,</div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt;(),</div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt;(),</div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(),</div>\n\
<div class=\"line\">            GPUCache::Config::kDefaultGrayColor,</div>\n\
<div class=\"line\">            <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;ShapeSample&gt; createBoundingBoxPlaceHolderSample(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; bbox, <span class=\"keywordtype\">bool</span> visibility)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ShapeSample&gt; sample = ShapeSample::create(</div>\n\
<div class=\"line\">            timeInSeconds,</div>\n\
<div class=\"line\">            0,</div>\n\
<div class=\"line\">            0,</div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt;(),</div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt;(),</div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt;(),</div>\n\
<div class=\"line\">            bbox,</div>\n\
<div class=\"line\">            GPUCache::Config::kDefaultGrayColor,</div>\n\
<div class=\"line\">            visibility);</div>\n\
<div class=\"line\">        sample-&gt;setBoundingBoxPlaceHolder();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~ShapeSample();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setNormals(<span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; normals);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setUVs(<span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; uvs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds()<span class=\"keyword\"> const    </span>{ <span class=\"keywordflow\">return</span> fTimeInSeconds; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> visibility()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fVisibility; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numWires()<span class=\"keyword\"> const         </span>{ <span class=\"keywordflow\">return</span> fNumWires; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numTriangles(<span class=\"keywordtype\">size_t</span> groupId)<span class=\"keyword\"> const </span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fTriangleVertIndices[groupId] ? fTriangleVertIndices[groupId]-&gt;numIndices()/3 : 0; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numTriangles() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts()<span class=\"keyword\"> const         </span>{ <span class=\"keywordflow\">return</span> fNumVerts; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp; wireVertIndices()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fWireVertIndices; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp; triangleVertIndices(<span class=\"keywordtype\">size_t</span> groupId)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fTriangleVertIndices[groupId]; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;&amp; triangleVertexIndexGroups()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fTriangleVertIndices; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numIndexGroups()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fTriangleVertIndices.size(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fPositions; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fBoundingBox; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; diffuseColor()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fDiffuseColor; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; normals()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fNormals; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; uvs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fUVs; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isBoundingBoxPlaceHolder()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> fBoundingBoxPlaceHolder; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setBoundingBoxPlaceHolder()</div>\n\
<div class=\"line\">    { fBoundingBoxPlaceHolder = <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The constructor is declare private to force user to go through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the create() factory member function.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ShapeSample(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ShapeSample(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>  fTimeInSeconds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> fNumWires;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> fNumVerts;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mandatory attributes</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;                fWireVertIndices;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;  fTriangleVertIndices;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;               fPositions;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>                                  fBoundingBox;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>                                        fDiffuseColor;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>                                          fVisibility;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Optional attributes</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;VertexBuffer&gt;                     fNormals;</div>\n\
<div class=\"line\">    std::shared_ptr&lt;VertexBuffer&gt;                     fUVs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Flag that this sample is a bounding box place holder for the real geometry sample</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                                                fBoundingBoxPlaceHolder;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS XformSample</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// A sample of the transform matrix for a given time.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>XformSample</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> std::shared_ptr&lt;XformSample&gt; create(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>              timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;      xform,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~XformSample() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds()<span class=\"keyword\"> const            </span>{ <span class=\"keywordflow\">return</span> fTimeInSeconds; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; xform()<span class=\"keyword\"> const            </span>{ <span class=\"keywordflow\">return</span> fXform; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isReflection()<span class=\"keyword\"> const               </span>{ <span class=\"keywordflow\">return</span> fIsReflection; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fBoundingBox; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> visibility()<span class=\"keyword\"> const                 </span>{ <span class=\"keywordflow\">return</span> fVisibility; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The constructor is declare private to force user to go through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the create() factory member function.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MakeSharedEnabler;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    XformSample(<span class=\"keywordtype\">double</span>                 timeInSeconds,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;         xform,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp;    boundingBox,</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span>                   visibility)</div>\n\
<div class=\"line\">        : fTimeInSeconds(timeInSeconds),</div>\n\
<div class=\"line\">          fXform(xform),</div>\n\
<div class=\"line\">          fIsReflection(xform.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#adcbd22bb9bbae2691f231c12c4c8cca1\">det3x3</a>() &lt; 0.0f),</div>\n\
<div class=\"line\">          fBoundingBox(boundingBox),</div>\n\
<div class=\"line\">          fVisibility(visibility)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>        fTimeInSeconds;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>       fXform;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>          fIsReflection;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>  fBoundingBox;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>          fVisibility;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";