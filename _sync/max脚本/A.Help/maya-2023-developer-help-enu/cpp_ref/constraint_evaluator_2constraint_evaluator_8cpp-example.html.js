var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: constraintEvaluator/constraintEvaluator.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'constraint_evaluator_2constraint_evaluator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: constraintEvaluator/constraintEvaluator.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">constraintEvaluator/constraintEvaluator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2016 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\"># This custom evaluator is used to replace evaluation clusters consisting of </span></div>\n\
<div class=\"line\"><span class=\"comment\"># point and orient constraints. Since cycles are introduced between those </span></div>\n\
<div class=\"line\"><span class=\"comment\"># constraints, evaluation inefficiency can arise. By replacing those clusters </span></div>\n\
<div class=\"line\"><span class=\"comment\"># with a custom evaluator we are able to evaluate the position and orientation</span></div>\n\
<div class=\"line\"><span class=\"comment\"># of the given object faster.</span></div>\n\
<div class=\"line\"><span class=\"comment\">#</span></div>\n\
<div class=\"line\"><span class=\"comment\"># The code sample below creates a cone that is point and orient constrained</span></div>\n\
<div class=\"line\"><span class=\"comment\"># to an animated locator. The evaluator detects this setup and claims </span></div>\n\
<div class=\"line\"><span class=\"comment\"># the transform for evaluation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">#</span></div>\n\
<div class=\"line\"><span class=\"comment\"># During evaluation, the evaluator does the requisite math that the </span></div>\n\
<div class=\"line\"><span class=\"comment\"># constraints would normally do, thus saving the cost of computation</span></div>\n\
<div class=\"line\"><span class=\"comment\"># of the constraints </span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\"># NOTE: This is a limited example and is not intended for a more complex</span></div>\n\
<div class=\"line\"><span class=\"comment\"># setup. The setup is, while common, deliberately simple. The evaluator</span></div>\n\
<div class=\"line\"><span class=\"comment\"># checks only if a source transform is basically constrained by a </span></div>\n\
<div class=\"line\"><span class=\"comment\"># point and orient constraint. It doesn&#39;t check additions to this scenario</span></div>\n\
<div class=\"line\"><span class=\"comment\"># (offsets, constraint axes, etc). </span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\"># setup the scene </span></div>\n\
<div class=\"line\"><span class=\"comment\">import maya.cmds as cmds</span></div>\n\
<div class=\"line\"><span class=\"comment\">import math</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">def getConstraintSetup():</span></div>\n\
<div class=\"line\"><span class=\"comment\">    constraintPair = {} # 0-src, 1-dst</span></div>\n\
<div class=\"line\"><span class=\"comment\">    constraintPair[0] = cmds.spaceLocator()[0]</span></div>\n\
<div class=\"line\"><span class=\"comment\">    constraintPair[1] = cmds.polyCone()[0]</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.select(constraintPair.values(), r=True)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.pointConstraint(offset=[0,0,0], weight=1)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.orientConstraint(offset=[0,0,0], weight=1)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.select(clear=True)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    </span></div>\n\
<div class=\"line\"><span class=\"comment\">    return constraintPair</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">def animate(transform, step, ampT, ampR):</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;translateX&#39;, t=&#39;0sec&#39;, v=0 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;translateZ&#39;, t=&#39;0sec&#39;, v=0 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;translateX&#39;, t=&#39;2sec&#39;, v=(math.cos(step) * ampT) )</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;translateZ&#39;, t=&#39;2sec&#39;, v=(math.sin(step) * ampT) )</span></div>\n\
<div class=\"line\"><span class=\"comment\">    </span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;rotateX&#39;, t=&#39;0sec&#39;, v=0 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;rotateZ&#39;, t=&#39;0sec&#39;, v=0 )</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;rotateX&#39;, t=&#39;2sec&#39;, v=ampR )</span></div>\n\
<div class=\"line\"><span class=\"comment\">    cmds.setKeyframe( transform, attribute=&#39;rotateZ&#39;, t=&#39;2sec&#39;, v=ampR )</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">def createPointOrientSetup(numberOfInstances):</span></div>\n\
<div class=\"line\"><span class=\"comment\">    increment = 360.0/numberOfInstances</span></div>\n\
<div class=\"line\"><span class=\"comment\">    step = 0</span></div>\n\
<div class=\"line\"><span class=\"comment\">    for i in range(numberOfInstances):</span></div>\n\
<div class=\"line\"><span class=\"comment\">        constraintPair = getConstraintSetup()</span></div>\n\
<div class=\"line\"><span class=\"comment\">        animate(constraintPair[0], math.radians(step), 15, 180)</span></div>\n\
<div class=\"line\"><span class=\"comment\">        step += increment</span></div>\n\
<div class=\"line\"><span class=\"comment\">        </span></div>\n\
<div class=\"line\"><span class=\"comment\"># Create 100 constrainted objects with point and orient constraints</span></div>\n\
<div class=\"line\"><span class=\"comment\">createPointOrientSetup(100)</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\"># load and register the evaluator</span></div>\n\
<div class=\"line\"><span class=\"comment\">cmds.loadPlugin(&quot;constraintEvaluator.mll&quot;)</span></div>\n\
<div class=\"line\"><span class=\"comment\">cmds.evaluator(enable=True, name=&quot;ConstraintEvaluator&quot;)</span></div>\n\
<div class=\"line\"><span class=\"comment\">cmds.evaluator(query=True, name=&quot;ConstraintEvaluator&quot;, clusters=True)</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\"># clear the scene, de-register and unload the evaluator</span></div>\n\
<div class=\"line\"><span class=\"comment\">cmds.file(force=True, new=True)</span></div>\n\
<div class=\"line\"><span class=\"comment\">cmds.evaluator(enable=False, name=&quot;ConstraintEvaluator&quot;)</span></div>\n\
<div class=\"line\"><span class=\"comment\">cmds.unloadPlugin(&quot;constraintEvaluator&quot;)</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCustomEvaluator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MCustomEvaluatorClusterNode.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MProfiler.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGraphNodeIterator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectHandle.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _profilerCategory = <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiler.html#a0a16b68268bd93a67d404e9ecb77c5a5\">MProfiler::addCategory</a>(<span class=\"stringliteral\">&quot;Constraint Evaluator&quot;</span>, <span class=\"stringliteral\">&quot;Events from the EM constraint evaluator&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Evaluator class declaration</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"keyword\">class </span>constraintEvaluator : <span class=\"keyword\">public</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_custom_evaluator.html\">MPxCustomEvaluator</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;unsigned int, MObject&gt; TargetMapHash;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~constraintEvaluator() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_custom_evaluator.html#ab796c49be826aa53c78faf09f05ab0c8\">markIfSupported</a>(<span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>* node) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html#aa4dfc80e0475312169cf7a2b4299b825\">MCustomEvaluatorClusterNode::SchedulingType</a> schedulingType(<span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html\">MCustomEvaluatorClusterNode</a>* cluster) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_custom_evaluator.html#a9bded60be46fea26c410402438aa331a\">clusterEvaluate</a>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html\">MCustomEvaluatorClusterNode</a>* cluster) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_custom_evaluator.html#a93f7f73d9a911cd75458e64fa9b4a29b\">clusterTerminate</a>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html\">MCustomEvaluatorClusterNode</a>* cluster) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_custom_evaluator.html\">MPxCustomEvaluator</a>* creator();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TargetMapHash fTransformTargetHash;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// reset any data we&#39;re storing</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> constraintEvaluator::reset()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fTransformTargetHash.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Check the provided node (and its local network) to see</span></div>\n\
<div class=\"line\"><span class=\"comment\">// if it&#39;s something we can support. In this case, we want to claim</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the transform that&#39;s constrained to a target by two constraints. Once</span></div>\n\
<div class=\"line\"><span class=\"comment\">// we&#39;ve ascertained that the provided node is the one we want, we&#39;ll store</span></div>\n\
<div class=\"line\"><span class=\"comment\">// it (via a hashcode) and its target node.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> constraintEvaluator::markIfSupported(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>* node)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode = node-&gt;<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat == MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNodeFn(thisNode, &amp;stat);</div>\n\
<div class=\"line\">        <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeName = depNodeFn.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (depNodeFn.typeName() == <span class=\"stringliteral\">&quot;transform&quot;</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// check the source of any connections to the translate</span></div>\n\
<div class=\"line\">            <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> translateXPlug = depNodeFn.findPlug(<span class=\"stringliteral\">&quot;translateX&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> sources;</div>\n\
<div class=\"line\">            translateXPlug.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(sources, <span class=\"keyword\">true</span> <span class=\"comment\">/* asDst */</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/* asSrc */</span>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sources.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != 1) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sources[0].node().hasFn(<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab7ec4db4e20394eaf6b695cab4465ba0\">MFn::kPointConstraint</a>) != <span class=\"keyword\">true</span>) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// is this a point constraint?</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// store the point constraint</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> pointConstraintNode(sources[0].node());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            sources.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> rotateXPlug = depNodeFn.findPlug(<span class=\"stringliteral\">&quot;rotateX&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            rotateXPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(sources, <span class=\"keyword\">true</span> <span class=\"comment\">/* asDst */</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/* asSrc */</span>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sources.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sources[0].node().hasFn(<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6238013a3ded4d9484fa775437874b27\">MFn::kOrientConstraint</a>) != <span class=\"keyword\">true</span>) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// is this an orient constraint?</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// store the orient constraint</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> orientConstraintNode(sources[0].node());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// check if the point and orient constraint have the same target</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> pointConstraintTargetTranslatePlug = pointConstraintNode.findPlug(<span class=\"stringliteral\">&quot;targetTranslate&quot;</span>, <span class=\"keyword\">true</span>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> sourceNode(pointConstraintTargetTranslatePlug.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae1a22944dd4daea3988e3a04ff4d10a8\">source</a>().<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> targetNodeName = sourceNode.name(); <span class=\"comment\">// we&#39;ll need this target&#39;s name to see if the other constraint uses this</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> orientConstraintTargetRotatePlug = orientConstraintNode.findPlug(<span class=\"stringliteral\">&quot;targetRotate&quot;</span>, <span class=\"keyword\">true</span>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            stat = sourceNode.setObject(orientConstraintTargetRotatePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae1a22944dd4daea3988e3a04ff4d10a8\">source</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (targetNodeName != sourceNode.name()) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fTransformTargetHash[<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_handle.html#addc1c7628b6f11fdc67e53c02746b7fe\">MObjectHandle::objectHashCode</a>(thisNode)] = orientConstraintTargetRotatePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae1a22944dd4daea3988e3a04ff4d10a8\">source</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// this is a transform constrained by a point and an orient constraint, claim it</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ((depNodeFn.typeName() == <span class=\"stringliteral\">&quot;pointConstraint&quot;</span>) || (depNodeFn.typeName() == <span class=\"stringliteral\">&quot;orientConstraint&quot;</span>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Marking all point and orient constraints as supported since they will </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// always be in a cycle with destination node, and we will be able to </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// override the entire cycle only if we mark all nodes forming it. When </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// processing destination we will test connectivity and decide if we support </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// this cycle cluster</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// return the scheduling type of the provided cluster</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html#aa4dfc80e0475312169cf7a2b4299b825\">MCustomEvaluatorClusterNode::SchedulingType</a> constraintEvaluator::schedulingType(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html\">MCustomEvaluatorClusterNode</a>* cluster)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> cluster-&gt;<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html#aaaceae2c8e44fe97940fd1d625389ac2\">schedulingType</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// During evaluation, we first make sure we&#39;re called on our cone&#39;s transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and grab the information we need from its target node, as well as some of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// its attributes. We then make the appropriate calculations and evaluate only</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the transform node (thus avoiding evaluating the constraints).</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> constraintEvaluator::clusterEvaluate(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html\">MCustomEvaluatorClusterNode</a>* cluster)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScope(_profilerCategory, MProfiler::kColorD_L1, <span class=\"stringliteral\">&quot;Evaluate constraint cluster&quot;</span>);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_graph_node_iterator.html\">MGraphNodeIterator</a> iterator(cluster, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat == MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (!iterator.isDone())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            iterator.next(&amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> currEvalNode = iterator.currentEvaluationNode(&amp;stat);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> currObject = currEvalNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aa5993ce527f6ca41e8532d4bb848ac97\">dependencyNode</a>(&amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( currObject.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> piMatrix, wMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// We&#39;re forcing a call to pre-evaluate on the current node.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// The idea here is to ask an attribute on the given transform</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// for its dirty status to force a call to that node&#39;s preEvaluate(...)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// call. This is typically not required, however in the case of</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// transform nodes, in order for them to *not* re-dirty and re-evaluate</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// anything, we force a pre-evaluation before setting anything in</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the plug and/or datablock</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> worldMatrixForPreEval(currObject, <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#aae8765de146707c69dc4c25709b15456\">MPxTransform::worldMatrix</a>);</div>\n\
<div class=\"line\">                currEvalNode.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a8020acf5e607c87d867f1707544505e8\">datablock</a>(&amp;stat).<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a09f4b5726085e604cb22c22a25aaf6b9\">isClean</a>(worldMatrixForPreEval);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeParent(_profilerCategory, MProfiler::kColorD_L1, <span class=\"stringliteral\">&quot;Get parent inverse matrix&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Read parent inverse matrix. Use inputValue call to get the most up to </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// date value and allow preEvaluation to happen before we write anything </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// back to data block.</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentInverseMatrixPlug(currObject, <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a60307c6c66af3a3e889bf0dde83ef54e\">MPxTransform::parentInverseMatrix</a>);</div>\n\
<div class=\"line\">                    <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> parentInverseMatrixArrayHandle = currEvalNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a8020acf5e607c87d867f1707544505e8\">datablock</a>(&amp;stat).<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a6ba8ea2b4af93fabd2a7c846a1625587\">inputArrayValue</a>(parentInverseMatrixPlug.attribute());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ((stat != MS::kSuccess) || (parentInverseMatrixArrayHandle.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a5f3dd1d27853eccbbe78b6d4383ccb79\">elementCount</a>() == 0)) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// We don&#39;t support instancing for now, so grab only first instance</span></div>\n\
<div class=\"line\">                    stat = parentInverseMatrixArrayHandle.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a8d77f0fea87bb6854b60cd199bf26240\">jumpToElement</a>(0); </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> elementHandle = parentInverseMatrixArrayHandle.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a81d24dca6d647d8d0a8fe0ef2c63b170\">inputValue</a>(&amp;stat);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> parentInverseMatrixData = elementHandle.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">                    <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> fnMatrixData(parentInverseMatrixData, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                    piMatrix = fnMatrixData.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>(&amp;stat);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get target world matrix</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeTarget(_profilerCategory, MProfiler::kColorD_L1, <span class=\"stringliteral\">&quot;Get target matrix&quot;</span>);</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> targetObject = fTransformTargetHash[<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_handle.html#addc1c7628b6f11fdc67e53c02746b7fe\">MObjectHandle::objectHashCode</a>(currObject)];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> worldMatrixPlug(targetObject, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#aae8765de146707c69dc4c25709b15456\">MPxTransform::worldMatrix</a>);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> worldMatrixPlugElement = worldMatrixPlug.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a17852838d9f319e8bbebaa723969d02c\">elementByLogicalIndex</a>(0, &amp;stat);</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> targetWorldMatrixHandle = worldMatrixPlugElement.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a8c808b891c9b65d2318f4ab8e0a5a27d\">asMDataHandle</a>();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> targetWorldMatrixData = targetWorldMatrixHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> fnTargetWorldMatrixData(targetWorldMatrixData, &amp;stat);</div>\n\
<div class=\"line\">                    worldMatrixPlugElement.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a6aa7f128d0023ffd24e071b257bd0b7a\">destructHandle</a>(targetWorldMatrixHandle);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    wMatrix = fnTargetWorldMatrixData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>(&amp;stat);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We don&#39;t support in this simple example offsets</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeDestination(_profilerCategory, MProfiler::kColorD_L1, <span class=\"stringliteral\">&quot;Compute and write TR&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> currLocalMatrix = wMatrix * piMatrix;</div>\n\
<div class=\"line\">                    <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a> transformer(currLocalMatrix);</div>\n\
<div class=\"line\">                    <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> translate = transformer.getTranslation(<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> rotateVals[3];</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bc\">MTransformationMatrix::RotationOrder</a> ro = <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bcacfa82ee0eaf4075f3cda4152dd020d99\">MTransformationMatrix::kXYZ</a>;</div>\n\
<div class=\"line\">                    stat = transformer.getRotation(rotateVals, ro);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Put the computed data back to data block. We&#39;ll set the </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// translate and rotate plugs directly since these will affect</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the world space matrix (which we can&#39;t set directly).</span></div>\n\
<div class=\"line\">                    <a name=\"_a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> currDataBlock = currEvalNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#a8020acf5e607c87d867f1707544505e8\">datablock</a>(&amp;stat);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (stat != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> tPlug(currObject, <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a552fb7f80b36a9e0b0c500d00153409b\">MPxTransform::translate</a>);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> currTranslateHandle = currDataBlock.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(tPlug);</div>\n\
<div class=\"line\">                    currTranslateHandle.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ae204e3f02340f8714425a949a2195dbe\">set3Double</a>(translate.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, translate.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>, translate.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">                    currTranslateHandle.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> rPlug(currObject, <a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a929db3d0bef90b2cfb29a1a6c4bff827\">MPxTransform::rotate</a>);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> currRotateHandle = currDataBlock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(rPlug);</div>\n\
<div class=\"line\">                    currRotateHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ae204e3f02340f8714425a949a2195dbe\">set3Double</a>(rotateVals[0], rotateVals[1], rotateVals[2]);</div>\n\
<div class=\"line\">                    currRotateHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\">                   </div>\n\
<div class=\"line\">                    <span class=\"comment\">// We can&#39;t set the world matrix directly, so put</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the computed data back onto the data block by</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// manually setting the translate and rotate plugs.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// We do this to make sure the transform knows the values</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// have been computed and updated properly, and so won&#39;t</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// have to trigger an evaluation with the constraints</span></div>\n\
<div class=\"line\">                    tPlug.setValue(currTranslateHandle);</div>\n\
<div class=\"line\">                    rPlug.setValue(currRotateHandle);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Call evaluation on the current node to compute what remains to be </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// computed and notify renderer. In this particular case we have written </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// TR values to transform and will let default code recompute and cache </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// world matrix. Many non-drawable nodes will not require this call, </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// e.g. the two constraints that we completely ignored.</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeUpdate(_profilerCategory, MProfiler::kColorD_L1, <span class=\"stringliteral\">&quot;Finalize evaluation and render update&quot;</span>);</div>\n\
<div class=\"line\">                    cluster-&gt;<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html#a8b7dfa5083f66d442a0ca339c733ea83\">evaluateNode</a>(currEvalNode, &amp;stat);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We failed to evaluate, use native compute</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(stat != MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_profiling_scope.html\">MProfilingScope</a> profilingScopeFallback(_profilerCategory, MProfiler::kColorD_L2, <span class=\"stringliteral\">&quot;Fall back to native&quot;</span>);</div>\n\
<div class=\"line\">        cluster-&gt;<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html#ad188df5aadbf5bdbc691f3d82e2e371d\">evaluate</a>(&amp;stat);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> constraintEvaluator::clusterTerminate(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_custom_evaluator_cluster_node.html\">MCustomEvaluatorClusterNode</a>* cluster)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear this map when topology gets invalidated</span></div>\n\
<div class=\"line\">    reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_custom_evaluator.html\">MPxCustomEvaluator</a>* constraintEvaluator::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    constraintEvaluator* newEval = <span class=\"keyword\">new</span> constraintEvaluator();</div>\n\
<div class=\"line\">    newEval-&gt;reset();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> newEval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">constraintEvaluator::~constraintEvaluator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The following routines are used to register/unregister</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the evaluator we are creating within Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerEvaluator(<span class=\"stringliteral\">&quot;ConstraintEvaluator&quot;</span>, 42, constraintEvaluator::creator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerEvaluator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status =  plugin.deregisterEvaluator( <span class=\"stringliteral\">&quot;ConstraintEvaluator&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deRegisterEvaluator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";