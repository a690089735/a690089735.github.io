var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: customPrimitiveGenerator/customPrimitiveGenerator.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'custom_primitive_generator_2custom_primitive_generator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: customPrimitiveGenerator/customPrimitiveGenerator.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">customPrimitiveGenerator/customPrimitiveGenerator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2012 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Example plugin: customPrimitiveGenerator.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in is an example of a custom MPxPrimitiveGenerator.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It provides custom primitives based on shader requirements coming from </span></div>\n\
<div class=\"line\"><span class=\"comment\">// an MPxShaderOverride.  The name() in the MIndexBufferDescriptor is used </span></div>\n\
<div class=\"line\"><span class=\"comment\">// to signify a unique identifier for a custom buffer.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This primitive generator is provided for demonstration purposes only.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It simply provides a triangle list for mesh objects with no vertex sharing.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A more sophisticated primitive provider could be used to provide patch primitives</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for GPU tessellation.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This plugin is meant to be used in conjunction with the dx11Shader, cgfxShader, glslShader or the hwPhongShader plugins.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The customPrimitiveGeneratorDX11.fx (dx11Shader), customPrimitiveGeneratorGL.cgfx (cgfxShader)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and customPrimitiveGenerator.osgfx (glslShader) files accompanying this sample</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can be loaded using the appropriate shader plugin.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In any case, the environment variable MAYA_USE_CUSTOMPRIMITIVEGENERATOR needs to be set (any value is fine) for it to be enabled.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStatus.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVectorArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxPrimitiveGenerator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxVertexBufferGenerator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MApiVersion.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;list&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MyCustomPrimitiveGenerator : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_primitive_generator.html\">MPxPrimitiveGenerator</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MyCustomPrimitiveGenerator() {}</div>\n\
<div class=\"line\">    ~MyCustomPrimitiveGenerator()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> computeIndexCount(<span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; component)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> 0; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> mesh.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MGeometry::Primitive</a> generateIndexing(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; component,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing_list.html\">MComponentDataIndexingList</a>&amp; <span class=\"comment\">/*sourceIndexing*/</span>,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing_list.html\">MComponentDataIndexingList</a>&amp; targetIndexing,</div>\n\
<div class=\"line\">        <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MIndexBuffer</a>&amp; indexBuffer,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>&amp; primitiveStride)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea7354c5e6b4c4c152b77e663e2e59e0c3\">MGeometry::kInvalidPrimitive</a>; <span class=\"comment\">// failed </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> x = 0; x &lt; targetIndexing.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>(); ++x)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>* target = targetIndexing[x];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (target-&gt;<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#ac202a561bbc84c7bf85e97d36a151be3\">componentType</a>() == MComponentDataIndexing::kFaceVertex)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Get Triangles</span></div>\n\
<div class=\"line\">                <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> triCounts;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> triVertIDs;</div>\n\
<div class=\"line\">                mesh.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a21f54d9e1ca3cbed6492f576f9f61215\">getTriangleOffsets</a>(triCounts, triVertIDs);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriVerts = triVertIDs.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">  </div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> customNumTriVerts = numTriVerts * 2;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* indexData = indexBuffer.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(customNumTriVerts, <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly - we don&#39;t need the current buffer values*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (indexData == NULL)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea7354c5e6b4c4c152b77e663e2e59e0c3\">MGeometry::kInvalidPrimitive</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; sharedIndices = target-&gt;<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Crawl the sharedIndices array to find the last</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// The new vertices will be added at the end</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nextNewVertexIndex = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> idx = 0; idx &lt; sharedIndices.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++idx)</div>\n\
<div class=\"line\">                    nextNewVertexIndex = std::max(nextNewVertexIndex, sharedIndices[idx]);</div>\n\
<div class=\"line\">                ++nextNewVertexIndex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> newTriId = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> triId = 0; triId &lt; numTriVerts; )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// split each triangle in two : add new vertex between vertexId1 and vertexId2</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId0 = sharedIndices[triVertIDs[triId++]];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId1 = sharedIndices[triVertIDs[triId++]];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId2 = sharedIndices[triVertIDs[triId++]];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> newVertexIndex = nextNewVertexIndex++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Triangle 0 1 2 become two triangles : 0 1 X and 0 X 2</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (indexBuffer.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>() == <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MGeometry::kUnsignedInt32</a>) {</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = vertexId0;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = vertexId1;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = newVertexIndex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = vertexId0;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = newVertexIndex;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexData)[newTriId++] = vertexId2;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (indexBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>() == <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a771a88748799bba09da625ffee5c6945\">MGeometry::kUnsignedChar</a>) {</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)vertexId0;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)vertexId1;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)newVertexIndex;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)vertexId0;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)newVertexIndex;</div>\n\
<div class=\"line\">                        ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>*)indexData)[newTriId++] = (<span class=\"keywordtype\">unsigned</span> short)vertexId2;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                indexBuffer.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(indexData);</div>\n\
<div class=\"line\">                primitiveStride = 3;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1eaa2c70dd76c8172a9298334473c914304\">MGeometry::kTriangles</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea7354c5e6b4c4c152b77e663e2e59e0c3\">MGeometry::kInvalidPrimitive</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the primitive generator creation function registered with the DrawRegistry.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Used to initialize a custom primitive generator.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_primitive_generator.html\">MPxPrimitiveGenerator</a>* createMyCustomPrimitiveGenerator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> MyCustomPrimitiveGenerator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MyCustomPositionBufferGenerator : <span class=\"keyword\">public</span> <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MPxVertexBufferGenerator</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MyCustomPositionBufferGenerator() {}</div>\n\
<div class=\"line\">    ~MyCustomPositionBufferGenerator()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> getSourceIndexing(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>, </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; sourceIndexing)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexCount, vertexList;</div>\n\
<div class=\"line\">        mesh.getVertices(vertexCount, vertexList);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertCount = vertexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; vertices = sourceIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\">        vertices.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(vertCount);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; vertCount; ++i)</div>\n\
<div class=\"line\">            vertices[i] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)vertexList[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// assign the source indexing</span></div>\n\
<div class=\"line\">        sourceIndexing.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#a5a0c45f0f5203d71fc23d2ca2a8976d4\">setComponentType</a>(MComponentDataIndexing::kFaceVertex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> getSourceStreams(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;sourceStreams)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// No source stream needed</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> createVertexStream(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MVertexBuffer</a>&amp; vertexBuffer, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; targetIndexing, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; sharedIndexing, <span class=\"keyword\">const</span> <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html\">MVertexBufferArray</a>&amp; <span class=\"comment\">/*sourceStreams*/</span>)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the descriptor from the vertex buffer.  </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// It describes the format and layout of the stream.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MVertexBufferDescriptor</a>&amp; descriptor = vertexBuffer.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a float stream.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MGeometry::DataType</a> dataType = descriptor.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dataType != <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MGeometry::kFloat</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a dimension of 3</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> dimension = descriptor.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dimension != 3)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a position channel</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (descriptor.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() != <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MGeometry::kPosition</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; indices = targetIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexCount = indices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vertexCount &lt;= 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Keep track of the vertices that will be used to created a new vertex in-between</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::list&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; ExtraVerticesList;</div>\n\
<div class=\"line\">        ExtraVerticesList extraVertices;</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get Triangles</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> triCounts;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> triVertIDs;</div>\n\
<div class=\"line\">            mesh.getTriangleOffsets(triCounts, triVertIDs);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriVerts = triVertIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; sharedIndices = sharedIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> triId = 0; triId &lt; numTriVerts; )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// split each triangle in two : add new vertex between vertexId1 and vertexId2</span></div>\n\
<div class=\"line\">                triId++; <span class=\"comment\">//unsigned int vertexId0 = sharedIndices[triVertIDs[triId++]];</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId1 = sharedIndices[triVertIDs[triId++]];</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId2 = sharedIndices[triVertIDs[triId++]];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                extraVertices.push_back( std::make_pair(vertexId1, vertexId2) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> newVertexCount = vertexCount + (<span class=\"keywordtype\">unsigned</span> int)extraVertices.size();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>* customBuffer = (<span class=\"keywordtype\">float</span>*)vertexBuffer.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(newVertexCount, <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly - we don&#39;t need the current buffer values*/</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(customBuffer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span>* customBufferStart = customBuffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Append &#39;real&#39; vertices position</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertId = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(; vertId &lt; vertexCount; ++vertId)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId = indices[vertId];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point;</div>\n\
<div class=\"line\">                mesh.getPoint(vertexId, point);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                customBuffer[vertId * dimension] = (float)point.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 1] = (<span class=\"keywordtype\">float</span>)point.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 2] = (float)point.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Append the new vertices position, interpolated from vert1 and vert2</span></div>\n\
<div class=\"line\">            ExtraVerticesList::const_iterator it = extraVertices.begin();</div>\n\
<div class=\"line\">            ExtraVerticesList::const_iterator itEnd = extraVertices.end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(; it != itEnd; ++it, ++vertId)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId1 = indices[it-&gt;first];</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId2 = indices[it-&gt;second];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point1, point2;</div>\n\
<div class=\"line\">                mesh.getPoint(vertexId1, point1);</div>\n\
<div class=\"line\">                mesh.getPoint(vertexId2, point2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point = (point1 + point2) / 2.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                customBuffer[vertId * dimension] = (float)point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 1] = (<span class=\"keywordtype\">float</span>)point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 2] = (float)point.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            vertexBuffer.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(customBufferStart);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the buffer generator creation function registered with the DrawRegistry.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Used to initialize the generator.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MPxVertexBufferGenerator</a>* createMyCustomPositionBufferGenerator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> MyCustomPositionBufferGenerator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MyCustomNormalBufferGenerator : <span class=\"keyword\">public</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MPxVertexBufferGenerator</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MyCustomNormalBufferGenerator() {}</div>\n\
<div class=\"line\">    ~MyCustomNormalBufferGenerator()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> getSourceIndexing(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>, </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; sourceIndexing)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexCount, vertexList;</div>\n\
<div class=\"line\">        mesh.getVertices(vertexCount, vertexList);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertCount = vertexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; vertices = sourceIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\">        vertices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(vertCount);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; vertCount; ++i)</div>\n\
<div class=\"line\">            vertices[i] = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)vertexList[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// assign the source indexing</span></div>\n\
<div class=\"line\">        sourceIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#a5a0c45f0f5203d71fc23d2ca2a8976d4\">setComponentType</a>(MComponentDataIndexing::kFaceVertex);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> getSourceStreams(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;sourceStreams)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// No source stream needed</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> createVertexStream(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MVertexBuffer</a>&amp; vertexBuffer, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; targetIndexing, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; sharedIndexing, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html\">MVertexBufferArray</a>&amp; <span class=\"comment\">/*sourceStreams*/</span>)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the descriptor from the vertex buffer.  </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// It describes the format and layout of the stream.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MVertexBufferDescriptor</a>&amp; descriptor = vertexBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a float stream.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MGeometry::DataType</a> dataType = descriptor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dataType != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MGeometry::kFloat</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a dimension of 3</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> dimension = descriptor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dimension != 3)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a normal channel</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (descriptor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() != <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a227e8416235cd3b43077ca91504a463f\">MGeometry::kNormal</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; indices = targetIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexCount = indices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vertexCount &lt;= 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Keep track of the vertices that will be used to created a new vertex in-between</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::list&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; ExtraVerticesList;</div>\n\
<div class=\"line\">        ExtraVerticesList extraVertices;</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get Triangles</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> triCounts;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> triVertIDs;</div>\n\
<div class=\"line\">            mesh.getTriangleOffsets(triCounts, triVertIDs);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriVerts = triVertIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; sharedIndices = sharedIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> triId = 0; triId &lt; numTriVerts;)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// split each triangle in two : add new vertex between vertexId1 and vertexId2</span></div>\n\
<div class=\"line\">                triId++; <span class=\"comment\">//unsigned int vertexId0 = sharedIndices[triVertIDs[triId++]];</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId1 = sharedIndices[triVertIDs[triId++]];</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId2 = sharedIndices[triVertIDs[triId++]];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                extraVertices.push_back( std::make_pair(vertexId1, vertexId2) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> newVertexCount = vertexCount + (<span class=\"keywordtype\">unsigned</span> int)extraVertices.size();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>* customBuffer = (<span class=\"keywordtype\">float</span>*)vertexBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(newVertexCount, <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly - we don&#39;t need the current buffer values*/</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(customBuffer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span>* customBufferStart = customBuffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector_array.html\">MFloatVectorArray</a> normals;</div>\n\
<div class=\"line\">            mesh.getNormals(normals);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Append &#39;real&#39; vertices normal</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertId = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(; vertId &lt; vertexCount; ++vertId)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>&amp; normal = normals[vertId];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                customBuffer[vertId * dimension] = normal.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 1] = normal.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 2] = normal.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Append the new vertices normal, interpolated from vert1 and vert2</span></div>\n\
<div class=\"line\">            ExtraVerticesList::const_iterator it = extraVertices.begin();</div>\n\
<div class=\"line\">            ExtraVerticesList::const_iterator itEnd = extraVertices.end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(; it != itEnd; ++it, ++vertId)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId1 = it-&gt;first;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexId2 = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>&amp; normal1 = normals[vertexId1];</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>&amp; normal2 = normals[vertexId2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> normal = (normal1 + normal2) / 2.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                customBuffer[vertId * dimension] = normal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 1] = normal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>;</div>\n\
<div class=\"line\">                customBuffer[vertId * dimension + 2] = normal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            vertexBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(customBufferStart);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the buffer generator creation function registered with the DrawRegistry.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Used to initialize the generator.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MPxVertexBufferGenerator</a>* createMyCustomNormalBufferGenerator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> MyCustomNormalBufferGenerator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The following routines are used to register/unregister</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the vertex mutators with Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a3c98934dba009882c753986dcfeaa422\">MDrawRegistry::registerPrimitiveGenerator</a>(<span class=\"stringliteral\">&quot;customPrimitiveTest&quot;</span>, createMyCustomPrimitiveGenerator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#aad2a7378bd3b995cf222d665030a08f0\">MDrawRegistry::registerVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;customPositionStream&quot;</span>, createMyCustomPositionBufferGenerator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#aad2a7378bd3b995cf222d665030a08f0\">MDrawRegistry::registerVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;customNormalStream&quot;</span>, createMyCustomNormalBufferGenerator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#af120d99c2aa438645f361c625f5975a5\">MDrawRegistry::deregisterPrimitiveGenerator</a>(<span class=\"stringliteral\">&quot;customPrimitiveTest&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a9c4ddee2564a6aa587a2407f8ba301b8\">MDrawRegistry::deregisterVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;customPositionStream&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a9c4ddee2564a6aa587a2407f8ba301b8\">MDrawRegistry::deregisterVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;customNormalStream&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";