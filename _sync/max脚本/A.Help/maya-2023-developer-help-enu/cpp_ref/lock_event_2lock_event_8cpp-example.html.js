var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: lockEvent/lockEvent.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'lock_event_2lock_event_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: lockEvent/lockEvent.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">lockEvent/lockEvent.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// lockEvent.cpp </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in demonstrates the API callbacks for node and plug locking. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// These callbacks allow you to receive notification when the locked </span></div>\n\
<div class=\"line\"><span class=\"comment\">// status of a plug or node is queried internally. The API programmer has </span></div>\n\
<div class=\"line\"><span class=\"comment\">// option, upon receipt of the callback, to &#39;override&#39; the lock state of </span></div>\n\
<div class=\"line\"><span class=\"comment\">// node or plug.  This is &#39;override&#39; is controlled via a &#39;decision&#39; variable </span></div>\n\
<div class=\"line\"><span class=\"comment\">// passed into the callback function.  The variable can hold two values </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  1) decision = true  --&gt; You want to accept the lock state and do  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     whatever the internal default behavior is. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  2) decision = false --&gt; You want to deny the lock state and do the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     opposite of what Maya would usually do. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The flow of execution would be as follows ... </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 1) Received a callback from Maya.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">// 2) What kind of event is this?</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 3) Do I want to allow this event?</span></div>\n\
<div class=\"line\"><span class=\"comment\">// |-- 4) Yes, I do not want to OVERRIDE this event. decision = true.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// |-- 4) No, I want to OVERRIDE this event. decision = false.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 5) Return from callback.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Example usage: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   sphere ; </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   // Watch the translateX plug on the sphere we just created ...</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   lockEvent -a 3 nurbsSphere1.translateX; </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   // Do not allow any changes to the plug. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   lockEvent -o true </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   // Now you can try changes nurbsSphere1.translateX &#39;s value </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   // but you will not be allowed to do so.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   // </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   setAttr &quot;nurbsSphere1.translateX&quot; 22</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSyntax.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgDatabase.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMessage.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MLockMessage.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFn.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MCallbackIdArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Macro Definitions </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MEL_COMMAND_NAME  &quot;lockEvent&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define VENDOR_TAG        &quot;Autodesk&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PLUGIN_VERSION    &quot;1.0&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define checkStdError(stat,msg)     \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    if ( MS::kSuccess != stat ) {   \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            cerr &lt;&lt; msg;            \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            return MS::kFailure;    \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Flags </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Clear the registered callbacks ... </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kClearCBLong      &quot;-clearCB&quot; </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kClearCB          &quot;-ccb&quot; </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kClearCBDV        false</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Toggle the override flag. Dictates if we should </span></div>\n\
<div class=\"line\"><span class=\"comment\">// obey the lock or override the lock </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kOverrideLong     &quot;-override&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kOverride         &quot;-o&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kOverrideDV       false  </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Attach a new callback to a node. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kAttachLong       &quot;-attach&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kAttach           &quot;-a&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kAttachDV         0</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Macro used to save a little typing </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MLM               MLockMessage</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Class Definition </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>lockEvent : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a> </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>: </div>\n\
<div class=\"line\">    lockEvent( ); </div>\n\
<div class=\"line\">    ~lockEvent( ) <span class=\"keyword\">override</span>; </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>        <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#ade7d0a873cbe811d6eab464e695390a9\">doIt</a>( <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp; ) <span class=\"keyword\">override</span>; </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>        parseArgs( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp;args ); </div>\n\
<div class=\"line\">    MCallbackId    installCallback( <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> &amp; ); </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> newSyntax( );    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>*   creator( ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear callback ids </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span>    clearCallbackIds();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>: </div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> theList; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fAttach;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fOverrideFlag, fOverrideVal, fClearCB; </div>\n\
<div class=\"line\">}; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_callback_id_array.html\">MCallbackIdArray</a> callbackIds; </div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> overrideMode = <span class=\"keyword\">false</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Callback for DAG locking events. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lockDagDecision( <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;path, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;other, </div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">void</span> *clientData, MLM::LockDAGEvent,</div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">bool</span> &amp;decision ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Other, node related events ..  </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lockDecision( <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;aux, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">void</span> *clientData, MLM::LockEvent, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">bool</span> &amp;decision ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Events relating to plugs. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> plugDecision( <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p1, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p2, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">void</span> *clientData, MLM::LockPlugEvent, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">bool</span> &amp;decision ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Callback for global watchers (i.e. watch all plugs on a node).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> nodePlugDecision( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p1, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p2, </div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">void</span> *clientData, MLM::LockPlugEvent, </div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> &amp;decision ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Standard API entry and exit points. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj );</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// -------- </span></div>\n\
<div class=\"line\"><span class=\"comment\">// METHODS </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">lockEvent::lockEvent( ) : </div>\n\
<div class=\"line\">    fOverrideFlag(kOverrideDV), </div>\n\
<div class=\"line\">    fOverrideVal(false),</div>\n\
<div class=\"line\">    fAttach(kAttachDV)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">lockEvent::~lockEvent( ) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MCallbackId lockEvent::installCallback( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> &amp;iter )</div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Uses given iterator and callback type to attach a new callback on</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  a node, dag path, or plug. The selection iterator must contain a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  valid selection item for the target callback type (fAttach). That is, </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  if the callback type is three, then the iterator must contain </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  a dependency node on it the next list item. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MCallbackId <span class=\"keywordtype\">id</span> = 0; </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node, component; </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (fAttach) { </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 1: { </div>\n\
<div class=\"line\">        status = iter.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#af11062c06466369057c68ed59b9637db\">getDependNode</a>( node ); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status ) { </div>\n\
<div class=\"line\">            <span class=\"comment\">// Try to set the callback. Note: we check the status</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// flag at the end of the switch statement. </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// </span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">id</span> = MLM::setNodeLockQueryCallback( node, lockDecision, </div>\n\
<div class=\"line\">                                                NULL, &amp;status );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 2: { </div>\n\
<div class=\"line\">        status = iter.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#acea3f9b4576b874442d489458ac310c0\">getDagPath</a>( path, component );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status ) { </div>\n\
<div class=\"line\">            <span class=\"comment\">// Try to set the callback. Note: we check the status</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// flag at the end of the switch statement. </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// </span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">id</span> = MLM::setNodeLockDAGQueryCallback( path, lockDagDecision, </div>\n\
<div class=\"line\">                                                   NULL, &amp;status ); </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 3: { </div>\n\
<div class=\"line\">        status = iter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#af11062c06466369057c68ed59b9637db\">getDependNode</a>( node ); </div>\n\
<div class=\"line\">        <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> plugName; </div>\n\
<div class=\"line\">        iter.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#a2785477a3ed3940936795cc3b3f72128\">getStrings</a>( plugName ); </div>\n\
<div class=\"line\">        <span class=\"comment\">// Now we have to parse the plug string. </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status &amp;&amp; plugName.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 ) { </div>\n\
<div class=\"line\">            <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNode( node ); </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> attrName; </div>\n\
<div class=\"line\">            plugName[0].split( <span class=\"charliteral\">&#39;.&#39;</span>, attrName ); </div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = depNode.findPlug( attrName[1],  <span class=\"keyword\">true</span>,  &amp;status ); </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( status ) { </div>\n\
<div class=\"line\">                <span class=\"comment\">// Try to set the callback. Note: we check the status</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// flag at the end of the switch statement. </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// </span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">id</span> = MLM::setPlugLockQueryCallback( plug, plugDecision, </div>\n\
<div class=\"line\">                                                    NULL,&amp;status );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> { </div>\n\
<div class=\"line\">            status = MS::kFailure; </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">break</span>;    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 4: {</div>\n\
<div class=\"line\">        status = iter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#af11062c06466369057c68ed59b9637db\">getDependNode</a>( node ); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status ) { </div>\n\
<div class=\"line\">            <span class=\"comment\">// Try to set the callback. Note: we check the status</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// flag at the end of the switch statement. </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// </span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">id</span> = MLM::setPlugLockQueryCallback( node, nodePlugDecision, </div>\n\
<div class=\"line\">                                                NULL, &amp;status ); </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>: </div>\n\
<div class=\"line\">        <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;Invalid callback attach type&quot;</span> ); </div>\n\
<div class=\"line\">        status = MS::kFailure; </div>\n\
<div class=\"line\">    };  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( node ); </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Check the status flag here and report any particular problems </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// encountered.  It is possible for the callback attach routines </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to fail.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This typically occurs when a callback has already been attached</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to the node or plug. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status || !<span class=\"keywordtype\">id</span> ) { </div>\n\
<div class=\"line\">        <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg; </div>\n\
<div class=\"line\">        msg = <span class=\"stringliteral\">&quot;Unable to add callback for node &quot;</span>; </div>\n\
<div class=\"line\">        msg += fnNode.name(); </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( msg );</div>\n\
<div class=\"line\">        status.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>( msg ); </div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> { </div>\n\
<div class=\"line\">        <span class=\"comment\">// Store the result -- so we can clean up later -- and </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// echo some useful information. </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// </span></div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Callback attached to &quot;</span> &lt;&lt; fnNode.name();   </div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;; attachment type = &quot;</span> &lt;&lt; fAttach &lt;&lt; endl;  </div>\n\
<div class=\"line\">        callbackIds.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_callback_id_array.html#a21e9b777b17a3dfd715d96599376ecfa\">append</a>( (<span class=\"keywordtype\">int</span>)<span class=\"keywordtype\">id</span> ); </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> id; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> lockEvent::doIt( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp;args ) </div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Entry point </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> result = 0;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// First check our arguments </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !parseArgs( args ) ) { </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fAttach ) { </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> iter( theList, <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>, &amp;status ); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; status &amp;&amp; !iter.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#ac0f0d6fc806b11d246e05cb94e886b38\">isDone</a>(); iter.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#a73616f002814b8abe6d921db72d7a496\">next</a>() ) { </div>\n\
<div class=\"line\">            MCallbackId <span class=\"keywordtype\">id</span> = installCallback( iter ); </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( <span class=\"keywordtype\">id</span> ) { </div>\n\
<div class=\"line\">                result ++; </div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> { </div>\n\
<div class=\"line\">                status = MS::kFailure; </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fOverrideFlag ) { </div>\n\
<div class=\"line\">        <span class=\"comment\">// What to do when callback occurs. </span></div>\n\
<div class=\"line\">        overrideMode = fOverrideVal; </div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( fClearCB ) { </div>\n\
<div class=\"line\">        clearCallbackIds(); </div>\n\
<div class=\"line\">        result++; </div>\n\
<div class=\"line\">    }    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    clearResult(); </div>\n\
<div class=\"line\">    <span class=\"comment\">// Let the caller know if the operation was successful. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We just use an integer value here.  Anything &gt; 0 is </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a success. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    setResult( result ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *lockEvent::creator( )</div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Create a new instance of this command. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> lockEvent; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> lockEvent::parseArgs( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp;args )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status; </div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_database.html\">MArgDatabase</a> argData( syntax(), args ); </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fAttach = kAttachDV; </div>\n\
<div class=\"line\">    fOverrideFlag = kOverrideDV; </div>\n\
<div class=\"line\">    fClearCB = kClearCBDV; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// begin-parse-args </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( argData.isFlagSet( kClearCB ) ) { </div>\n\
<div class=\"line\">        fClearCB = !kClearCBDV; </div>\n\
<div class=\"line\">    }   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( argData.isFlagSet( kOverride ) ) { </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> tmp;</div>\n\
<div class=\"line\">        status = argData.getFlagArgument( kOverride, 0, tmp ); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !status ) { </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;override flag parsing failed&quot;</span> ); </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fOverrideFlag = !kOverrideDV; </div>\n\
<div class=\"line\">        fOverrideVal = tmp; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( argData.isFlagSet( kAttach ) ) { </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> tmp;</div>\n\
<div class=\"line\">        status = argData.getFlagArgument( kAttach, 0, tmp ); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !status ) { </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;attach flag parsing failed&quot;</span> ); </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fAttach = tmp; </div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( fAttach ) { </div>\n\
<div class=\"line\">        status = argData.getObjects( theList ); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( theList.length() == 0 ) { </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;You must specify a node/plug to attach to!&quot;</span>; </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg); </div>\n\
<div class=\"line\">            status = MS::kFailure; </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Ensure that the caller did not specify too many arguments! </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( status &amp;&amp; fAttach &amp;&amp; fOverrideFlag ) { </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;You specified too many flags!&quot;</span> ;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);  </div>\n\
<div class=\"line\">        status = MS::kFailure; </div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// end-parse-args </span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> lockEvent::newSyntax( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html\">MSyntax</a> syntax; </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// begin-syntax</span></div>\n\
<div class=\"line\">    syntax.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kClearCB, kClearCBLong ); </div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kOverride, kOverrideLong, <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada8cfc0ab572a96edfc9db7c02f0d025d7\">MSyntax::kBoolean</a> ); </div>\n\
<div class=\"line\">    syntax.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#aeaeaac3794bb4de8004afb1ac1829488\">addFlag</a>( kAttach, kAttachLong, <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#ae6f2057f0d0419845a48c1eb6813f2ada499591c04ccb62ab4f6fc3a5450afd4c\">MSyntax::kUnsigned</a> ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syntax.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a16e72b75488e20aafdc0c3c64e663bea\">useSelectionAsDefault</a>( <span class=\"keyword\">true</span> ); </div>\n\
<div class=\"line\">    syntax.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a299f2c91c864387f1b4208e99a72631d\">setObjectType</a>( <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_syntax.html#a72b517c34c0de9b91ce4b5342675186baf19c7ad857ee046737f2d9c08e7bb70d\">MSyntax::kSelectionList</a>, 0 ); </div>\n\
<div class=\"line\">    <span class=\"comment\">// end-syntax </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> syntax; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> nodePlugDecision( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p1, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p2, </div>\n\
<div class=\"line\">                       <span class=\"keywordtype\">void</span> *clientData, MLM::LockPlugEvent event, </div>\n\
<div class=\"line\">                       <span class=\"keywordtype\">bool</span> &amp;decision )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The watcher for plug callbacks on entire nodes. This callback</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  is invoked whenever lock query occurs on any plug in a node. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg, eventString;</div>\n\
<div class=\"line\">    msg = <span class=\"stringliteral\">&quot;nodePlugDecision called&quot;</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Echo the received event type. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (event) { </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugLockAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugLockAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugUnlockAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugUnlockAttr&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugAttrValChange:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugAttrValChange&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugRemoveAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugRemoveAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugRenameAttr:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugRenameAttr&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugConnect: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugConnect&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugDisconnect: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugDisconnect&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kLastPlug&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }; </div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">    cerr &lt;&lt; msg &lt;&lt; <span class=\"stringliteral\">&quot;; event = &quot;</span> &lt;&lt; eventString; </div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;; override = &quot;</span> &lt;&lt; overrideMode &lt;&lt; endl; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    decision = !overrideMode; </div>\n\
<div class=\"line\">}   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> plugDecision( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p1, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;p2, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">void</span> *clientData, MLM::LockPlugEvent event, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">bool</span> &amp;decision )</div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   Callback function for plug locking events.  This callback </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   is only invoked when the plug, p1, has its lock status </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   queried. This callback shares the same event types </span></div>\n\
<div class=\"line\"><span class=\"comment\">//   as the nodePlugDecision callback. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg, eventString;</div>\n\
<div class=\"line\">    msg = <span class=\"stringliteral\">&quot;plugDecision called&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (event) { </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugLockAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugLockAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugUnlockAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugUnlockAttr&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugAttrValChange:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugAttrValChange&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugRemoveAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugRemoveAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugRenameAttr:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugRenameAttr&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugConnect: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugConnect&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kPlugDisconnect: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kPlugDisconnect&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kInvalidPlug&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }; </div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">    cerr &lt;&lt; msg &lt;&lt; <span class=\"stringliteral\">&quot;; event = &quot;</span> &lt;&lt; eventString; </div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;; override = &quot;</span> &lt;&lt; overrideMode &lt;&lt; endl; </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    decision = !overrideMode;  </div>\n\
<div class=\"line\">}   </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lockDagDecision( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;path, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;other, </div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">void</span> *clientData, MLM::LockDAGEvent event, </div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">bool</span> &amp;decision )</div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Callback that is invoked whenever a DAG element is involved</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  in a locking event. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> eventString; </div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;lockDagDecision called &quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (event) { </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kGroup: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kGroup&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kUnGroup:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kUnGroup&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kReparent: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kReparent&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kChildReorder: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kChildReorder&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kCreateNodeInstance: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kCreateNodeInstance&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kCreateChildInstance:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kCreateChildInstance&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kCreateParentInstance:</div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kCreateParentInstance&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kInvalidDAG: </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kInvalid&quot;</span>;   </div>\n\
<div class=\"line\">    }; </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;on &quot;</span> &lt;&lt; eventString &lt;&lt; <span class=\"stringliteral\">&quot; event&quot;</span>; </div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;; overrideMode = &quot;</span> &lt;&lt; overrideMode &lt;&lt; endl; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    decision = !overrideMode; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> lockDecision( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;node, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;attr, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">void</span> *clientData, MLM::LockEvent event,</div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">bool</span> &amp;decision )</div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  All other lock callback events are convered in this routine. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This includes everything that is not DAG related.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> eventString; </div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;lockDecision called &quot;</span>; </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> ( event ) { </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kDelete: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kDelete&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kRename: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kRename&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kLockNode: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kLockNode&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kUnlockNode: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kUnlockNode&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kAddAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kAddAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kRemoveAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kRemoveAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kRenameAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kRemoveAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kUnlockAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kUnlockAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kLockAttr: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kLockAttr&quot;</span>; </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> MLM::kInvalid: </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>: </div>\n\
<div class=\"line\">        eventString = <span class=\"stringliteral\">&quot;kInvalid&quot;</span>; </div>\n\
<div class=\"line\">    }; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;on &quot;</span> &lt;&lt; eventString &lt;&lt; <span class=\"stringliteral\">&quot; event&quot;</span>;</div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;; overrideMode = &quot;</span> &lt;&lt; overrideMode &lt;&lt; endl; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    decision = !overrideMode; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> lockEvent::clearCallbackIds( ) </div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Removes all currently attached callbacks.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> idCount = callbackIds.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_callback_id_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; idCount; i ++ ) { </div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;callback #&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"stringliteral\">&quot;; id = &quot;</span> &lt;&lt; (unsigned)callbackIds[i] &lt;&lt; endl; </div>\n\
<div class=\"line\">        <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( (MCallbackId) callbackIds[i] );</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    callbackIds.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_callback_id_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>(); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Load the plugin ...</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, VENDOR_TAG, PLUGIN_VERSION, <span class=\"stringliteral\">&quot;Any&quot;</span> ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerCommand( MEL_COMMAND_NAME, </div>\n\
<div class=\"line\">                                     lockEvent::creator, </div>\n\
<div class=\"line\">                                     lockEvent::newSyntax ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    callbackIds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_callback_id_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>(); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Unload the plugin ...</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj ); </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterCommand( MEL_COMMAND_NAME ); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( status ) { </div>\n\
<div class=\"line\">        lockEvent::clearCallbackIds(); </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status; </div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";