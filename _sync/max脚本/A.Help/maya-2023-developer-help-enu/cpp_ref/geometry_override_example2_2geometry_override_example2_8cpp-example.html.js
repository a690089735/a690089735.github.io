var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: geometryOverrideExample2/geometryOverrideExample2.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'geometry_override_example2_2geometry_override_example2_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: geometryOverrideExample2/geometryOverrideExample2.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">geometryOverrideExample2/geometryOverrideExample2.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2018 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in shows how to use MPxGeometryOverride to render geometry with Maya shader network.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It will register a new type of node &quot;geometryOverrideExample2_shape&quot; that will generate </span></div>\n\
<div class=\"line\"><span class=\"comment\">// the geometry and connect it to a MPxGeometryOverride.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// The GeometryOverrideExample2_shape class derives from MPxSurfaceShape and it is responsible </span></div>\n\
<div class=\"line\"><span class=\"comment\">// to generate the geometry data (Cube) and also enable the shape to be selectable in</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Viewport 2.0.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The GeometryOverrideExample2 class derives from MPxGeometryOverride and shows how to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// create / update different render items and fill vertex / index buffers to render the geometry </span></div>\n\
<div class=\"line\"><span class=\"comment\">// of geometryOverrideExample2_shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To use this plugin run the following mel or python commands once the plugin is loaded</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Mel script:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          </span></div>\n\
<div class=\"line\"><span class=\"comment\">//          $shapeNodeName = `createNode geometryOverrideExample2_shape`;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          sets -add initialShadingGroup $shapeNodeName;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Python script:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          shapeNodeName = maya.cmds.createNode(&#39;geometryOverrideExample2_shape&#39;)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          maya.cmds.sets(shapeNodeName, add = &#39;initialShadingGroup&#39;)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Once the mel/python commands are executed, a lambert shader will be attached to the shading group</span></div>\n\
<div class=\"line\"><span class=\"comment\">// of the shape. Of course, you can change the lambert shader to a different one.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;geometryOverrideExample2.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MShaderManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionMask.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> instancingChangedCallback(<a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; child, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; parent, <span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;GeometryOverrideExample2 does&#39;t support instancing !&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              geometryOverrideExample2_shape implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//===========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> GeometryOverrideExample2_shape::id = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>(0x8003D);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">GeometryOverrideExample2_shape::GeometryOverrideExample2_shape()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> cubeWidth = 1.0f;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> cubeHeight= 1.0f;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> cubeDepth = 1.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Define the cube&#39;s vertices data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth, -cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth,  cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth,  cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth, -cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth, -cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth, -cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth,  cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth,  cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth,  cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth,  cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth,  cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth,  cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth, -cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth, -cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth, -cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth, -cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth, -cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth,  cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth,  cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back(-cubeWidth, -cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth, -cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth,  cubeHeight, -cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth,  cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\">    fPositions.emplace_back( cubeWidth, -cubeHeight,  cubeDepth);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f, -1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f, -1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f, -1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f, -1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f,  1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f,  1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f,  1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  0.0f,  1.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f,  1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f, -1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f, -1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f, -1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 0.0f, -1.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back(-1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back(-1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back(-1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back(-1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\">    fNormals.emplace_back( 1.0f,  0.0f,  0.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back(-1.0f, 0.0f,  0.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f, -1.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f, -1.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f, -1.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f, -1.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f,  1.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f,  1.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f,  1.0f);</div>\n\
<div class=\"line\">    fTangents.emplace_back( 0.0f, 0.0f,  1.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 1.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(0.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 0.0f);</div>\n\
<div class=\"line\">    fTextureCoords.emplace_back(1.0f, 1.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fBiTangents.resize(24);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; 24; i++) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// cross product</span></div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> biTangents = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>(fNormals[i].x,  fNormals[i].y,  fNormals[i]. z) ^ </div>\n\
<div class=\"line\">                                  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>(fTangents[i].x, fTangents[i].y, fTangents[i].z);</div>\n\
<div class=\"line\">        fBiTangents[i].x = biTangents.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>;</div>\n\
<div class=\"line\">        fBiTangents[i].y = biTangents.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>;</div>\n\
<div class=\"line\">        fBiTangents[i].z = biTangents.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fShadedIndices =</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        12, 13, 14, 12, 14, 15, <span class=\"comment\">// bottom</span></div>\n\
<div class=\"line\">         8,  9, 10,  8, 10, 11, <span class=\"comment\">// top</span></div>\n\
<div class=\"line\">        16, 17, 18, 16, 18, 19, <span class=\"comment\">// left</span></div>\n\
<div class=\"line\">        20, 21, 22, 20, 22, 23, <span class=\"comment\">// right</span></div>\n\
<div class=\"line\">         4,  5,  6,  4,  6,  7, <span class=\"comment\">// back</span></div>\n\
<div class=\"line\">         0,  1,  2,  0,  2,  3, <span class=\"comment\">// front</span></div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fWireFrameIndices =</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        0, 1, 1, 2, 2, 3, 3, 0, <span class=\"comment\">// bottom</span></div>\n\
<div class=\"line\">        4, 5, 5, 6, 6, 7, 7, 4, <span class=\"comment\">// top</span></div>\n\
<div class=\"line\">        0, 4, 3, 5, 1, 7, 2, 6, <span class=\"comment\">// left / right</span></div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">GeometryOverrideExample2_shape::~GeometryOverrideExample2_shape()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mInstanceAddedCallbackId);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  When instances of this node are created internally, the MObject associated</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  with the instance is not created until after the constructor of this class</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  is called. This means that no member functions of MPxSurfaceShape can</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  be called in the constructor.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The postConstructor solves this problem. Maya will call this function</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  after the internal object has been created.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  As a general rule do all of your initialization in the postConstructor.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxSurfaceShape::postConstructor()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GeometryOverrideExample2_shape::postConstructor()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// This call allows the shape to have shading groups assigned</span></div>\n\
<div class=\"line\">    setRenderable(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add a callback that will be called when instance are added.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">    <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>(thisMObject(), path);</div>\n\
<div class=\"line\">    mInstanceAddedCallbackId = <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_message.html#a9c301d5a30d9424eea522166b283a98d\">MDagMessage::addInstanceAddedDagPathCallback</a>(const_cast&lt;MDagPath&amp;&gt;(path), &amp;instancingChangedCallback);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method is overriden to support interactive object selection in Viewport 2.0</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Returns The selection mask of the shaper.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxSurfaceShape::getShapeSelectionMask()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a>  GeometryOverrideExample2_shape::getShapeSelectionMask()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879d\">MSelectionMask::SelectionType</a> selType = <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#acffca3b33fddce63d3220bc7487e879da4e61eacbb5f904df37be9e14d36286b1\">MSelectionMask::kSelectMeshes</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a>(selType);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Returns the bounding box for this object.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  It is a good idea not to recompute here as this funcion is called often.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : This function is only called if MPxSurfaceShape::isBounded() return true.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         For more information, see MPxSurfaceShape::boundingBox()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> GeometryOverrideExample2_shape::boundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> corner1Point(fPositions[0].x, fPositions[0].y, fPositions[0].z); <span class=\"comment\">// back-left-bottom vertex position</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> corner2Point(fPositions[6].x, fPositions[6].y, fPositions[6].z); <span class=\"comment\">// front-right-top  vertex position</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>(corner1Point, corner2Point);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              GeometryOverrideExample2 implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//===========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* GeometryOverrideExample2::sActiveWireframeRenderItemName = <span class=\"stringliteral\">&quot;GeometryOverrideExample2_ActiveWireframe&quot;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* GeometryOverrideExample2::sDormantWireframeRenderItemName = <span class=\"stringliteral\">&quot;GeometryOverrideExample2_DormantWireframe&quot;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* GeometryOverrideExample2::sShadedRenderItemName = <span class=\"stringliteral\">&quot;GeometryOverrideExample2_shaded&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">GeometryOverrideExample2::GeometryOverrideExample2(<span class=\"keyword\">const</span> <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>::MPxGeometryOverride(obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// get the real mesh object from the MObject</span></div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> node(obj, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fMesh = <span class=\"keyword\">dynamic_cast&lt;</span>GeometryOverrideExample2_shape*<span class=\"keyword\">&gt;</span>(node.userNode());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">GeometryOverrideExample2::~GeometryOverrideExample2()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This function return draw API that is supported by this plugin.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxGeometryOverride::supportedDrawAPIs()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\">MHWRender::DrawAPI GeometryOverrideExample2::supportedDrawAPIs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>  (MHWRender::kOpenGL | MHWRender::kDirectX11 | MHWRender::kOpenGLCoreProfile);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Perform any work required to translate the geometry data that needs to get</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  information from the dependency graph.This should be the only place that</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  dependency graph evaluation occurs.Any data retrieved should be cached for</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  later stages.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxGeometryOverride::updateDG()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GeometryOverrideExample2::updateDG()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// In this example, there is nothing to do here</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method is called once during each draw-preparation phase.  If this method returns true </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  then the associated DAG object will have a chance to update its render geometry this frame.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  (Maya will call populateGeometry())</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxGeometryOverride::requiresGeometryUpdate()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GeometryOverrideExample2::requiresGeometryUpdate()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// In this example, we always return false because the node doesn&#39;t have </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attributes that affect the geometry.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  If this method returns true then the MPxGeometryOverride will be considered</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  for Evaluation Manager Parallel Update.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxGeometryOverride::supportsEvaluationManagerParallelUpdate()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GeometryOverrideExample2::supportsEvaluationManagerParallelUpdate()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method is called for each instance of the associated DAG object whenever </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  the object changes and receive the path to the instance and the current list </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  of render items associated with that instance. Implementations of this method </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  may add, remove or modify items in the list. As an alternative this method </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  can enable or disable items that must be used or not based on some properties.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  A render item represents a single renderable entity and contain many properties </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  to let the Viewport 2.0 to know how to render the entity. By example, A render </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  item contain a name, a type, the geometry primitive type, a set of geometry </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  buffers and a shader instance. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  In this example, this functions will create 2 render items to render the object&#39;s </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  geometry in wireframe mode. The first render item will be use to display the object </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  in wireframe with a single color only when the Viewport 2.0 is in wireframe mode. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The second render item will be use to render the object with a single color in </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  wireframe only when the object is selected independing of the Viewport 2.0 display </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  mode. Both wireframe render item will be enable or disable depending of the object </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  selection state. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This example will not create a render item to display the geometry in shaded or </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  textured mode because Maya will do it when a material / shader will be assigned </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  to the object. This render item will be added in the list and can be edited </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  if desired. If no material is assigned, the object will not be visible in </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Viewport 2.0 except if the node is selected in the outliner. In this situation,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  only the edges of the object will be displayed because we are creating</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  a wireframe render item that will be used when the object is selected.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxGeometryOverride::updateRenderItems()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GeometryOverrideExample2::updateRenderItems(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path, <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItems)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!path.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MRenderer* renderer = MRenderer::theRenderer();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!renderer)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MShaderManager* shaderManager = renderer-&gt;getShaderManager();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!shaderManager)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the inherited DAG display properties.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">auto</span> wireframeColor = <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#a6221bc7407b14246b14f79a751496276\">MHWRender::MGeometryUtilities::wireframeColor</a>(path);</div>\n\
<div class=\"line\">    <span class=\"keyword\">auto</span> displayStatus         = <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#aa2838b92c9f7db4a810690a986199134\">MHWRender::MGeometryUtilities::displayStatus</a>(path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the wireframe render item used when the object will be selected</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isWireFrameRenderItemEnabled = displayStatus == MHWRender::kLead || displayStatus == MHWRender::kActive;</div>\n\
<div class=\"line\">    updateWireframeItems(sActiveWireframeRenderItemName,</div>\n\
<div class=\"line\">        <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a9a325db332d24e6105fe3b48a94604c3a8d857bf5569760ac7306382a558cb092\">MHWRender::MGeometry::kAll</a>,</div>\n\
<div class=\"line\">        <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#abf0686a71845159b7a473312fe05044a\">MHWRender::MRenderItem::sSelectionDepthPriority</a>,</div>\n\
<div class=\"line\">        wireframeColor,</div>\n\
<div class=\"line\">        isWireFrameRenderItemEnabled,</div>\n\
<div class=\"line\">        renderItems,</div>\n\
<div class=\"line\">        *shaderManager);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the wireframe render item used when the object will not be selected</span></div>\n\
<div class=\"line\">    isWireFrameRenderItemEnabled = displayStatus == MHWRender::kDormant;</div>\n\
<div class=\"line\">    updateWireframeItems(sDormantWireframeRenderItemName,</div>\n\
<div class=\"line\">        <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a9a325db332d24e6105fe3b48a94604c3a62a997a862929eb62b0273d1db9e8e0d\">MHWRender::MGeometry::kWireframe</a>,</div>\n\
<div class=\"line\">        <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a6915079c9389d5b9354d5b40fb8112ca\">MHWRender::MRenderItem::sDormantWireDepthPriority</a>,</div>\n\
<div class=\"line\">        wireframeColor,</div>\n\
<div class=\"line\">        isWireFrameRenderItemEnabled,</div>\n\
<div class=\"line\">        renderItems,</div>\n\
<div class=\"line\">        *shaderManager);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Fill in data and index streams based on the requirements passed in.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Associate indexing with the render items passed in.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxGeometryOverride::populateGeometry()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GeometryOverrideExample2::populateGeometry(<span class=\"keyword\">const</span> <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html\">MHWRender::MGeometryRequirements</a>&amp; requirements, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItems, <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html\">MHWRender::MGeometry</a>&amp; data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fMesh)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MVertexBufferDescriptorList&amp;  vertexBufferDescriptorList = requirements.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html#a960f411f65fde2d97da465a6b276d774\">vertexRequirements</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; vertexBufferDescriptorList.length(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        MVertexBufferDescriptor desc{};</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!vertexBufferDescriptorList.getDescriptor(i, desc))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::cout &lt;&lt; desc.semanticName().asChar() &lt;&lt; std::endl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (desc.semantic())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kPosition:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create and fill the vertex position buffer</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* positionBuffer = data.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#acf6369e390e9831c0e180cc60c7db618\">createVertexBuffer</a>(desc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (positionBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                GeometryOverrideExample2_shape::Float3Array positions = fMesh-&gt;getPositions();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* buffer = positionBuffer-&gt;<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(positions.size(), <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly */</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::size_t bufferSizeInByte =</div>\n\
<div class=\"line\">                        <span class=\"keyword\">sizeof</span>(GeometryOverrideExample2_shape::Float3Array::value_type) * positions.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    memcpy(buffer, positions.data(), bufferSizeInByte);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Transfer from CPU to GPU memory.</span></div>\n\
<div class=\"line\">                    positionBuffer-&gt;<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(buffer);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kNormal:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create and fill the vertex normal buffer</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* normalsBuffer = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#acf6369e390e9831c0e180cc60c7db618\">createVertexBuffer</a>(desc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (normalsBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                GeometryOverrideExample2_shape::Float3Array normals = fMesh-&gt;getNormals();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* buffer = normalsBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(normals.size(), <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::size_t bufferSizeInByte =</div>\n\
<div class=\"line\">                        <span class=\"keyword\">sizeof</span>(GeometryOverrideExample2_shape::Float3Array::value_type) * normals.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    memcpy(buffer, normals.data(), bufferSizeInByte);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Transfer from CPU to GPU memory.</span></div>\n\
<div class=\"line\">                    normalsBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(buffer);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kTangent:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* tangentBuffer = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#acf6369e390e9831c0e180cc60c7db618\">createVertexBuffer</a>(desc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (tangentBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                GeometryOverrideExample2_shape::Float3Array tangents = fMesh-&gt;getTangents();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* buffer = tangentBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(tangents.size(), <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::size_t bufferSizeInByte =</div>\n\
<div class=\"line\">                        <span class=\"keyword\">sizeof</span>(GeometryOverrideExample2_shape::Float3Array::value_type) * tangents.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    memcpy(buffer, tangents.data(), bufferSizeInByte);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Transfer from CPU to GPU memory.</span></div>\n\
<div class=\"line\">                    tangentBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(buffer);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kBitangent:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* tangentBuffer = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#acf6369e390e9831c0e180cc60c7db618\">createVertexBuffer</a>(desc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (tangentBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                GeometryOverrideExample2_shape::Float3Array tangents = fMesh-&gt;getBiTangents();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* buffer = tangentBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(tangents.size(), <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::size_t bufferSizeInByte =</div>\n\
<div class=\"line\">                        <span class=\"keyword\">sizeof</span>(GeometryOverrideExample2_shape::Float3Array::value_type) * tangents.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    memcpy(buffer, tangents.data(), bufferSizeInByte);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Transfer from CPU to GPU memory.</span></div>\n\
<div class=\"line\">                    tangentBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(buffer);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kTexture:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create and fill the vertex texture coords buffer</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* texCoordsBuffer = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#acf6369e390e9831c0e180cc60c7db618\">createVertexBuffer</a>(desc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (texCoordsBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                GeometryOverrideExample2_shape::Float2Array texCoords = fMesh-&gt;getTexCoords();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* buffer = texCoordsBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(texCoords.size(), <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::size_t bufferSizeInByte =</div>\n\
<div class=\"line\">                        <span class=\"keyword\">sizeof</span>(GeometryOverrideExample2_shape::Float2Array::value_type) * texCoords.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    memcpy(buffer, texCoords.data(), bufferSizeInByte);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Transfer from CPU to GPU memory.</span></div>\n\
<div class=\"line\">                    texCoordsBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(buffer);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kTangentWithSign:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MGeometry::kInvalidSemantic:   <span class=\"comment\">// avoid compiling error</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// In this example, we don&#39;t need to used those vertex informantions.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//   Update indexing data for all appropriate render items</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numItems = renderItems.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numItems; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* item = renderItems.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a82ed5d7ae96a2890f5f54f697bb0bab0\">itemAt</a>(i);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!item)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item-&gt;<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a0005764259795847274dba4c66e3661b\">primitive</a>() == <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1eaa2c70dd76c8172a9298334473c914304\">MHWRender::MGeometry::kTriangles</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create and fill the index buffer used to render triangles</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>* indexBuffer = data.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a649d0f008cdfbd368a4157dcd47ede67\">createIndexBuffer</a>(<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (indexBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                GeometryOverrideExample2_shape::IndexList indices = fMesh-&gt;getShadedIndices();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* buffer = indexBuffer-&gt;<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(indices.size(), <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::size_t bufferSizeInByte =</div>\n\
<div class=\"line\">                        <span class=\"keyword\">sizeof</span>(GeometryOverrideExample2_shape::IndexList::value_type) * indices.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    memcpy(buffer, indices.data(), bufferSizeInByte);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Transfer from CPU to GPU memory.</span></div>\n\
<div class=\"line\">                    indexBuffer-&gt;<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(buffer);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Associate index buffer with render item</span></div>\n\
<div class=\"line\">                    item-&gt;<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a7d0f067f76206a54f4f716f63bcb6b19\">associateWithIndexBuffer</a>(indexBuffer);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (item-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a0005764259795847274dba4c66e3661b\">primitive</a>() == <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea9808e481c6346dfc333afb4c52890ac9\">MHWRender::MGeometry::kLines</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create and fill the index buffer used to render lines (Wireframe)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>* indexBuffer = data.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a649d0f008cdfbd368a4157dcd47ede67\">createIndexBuffer</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (indexBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                GeometryOverrideExample2_shape::IndexList indices = fMesh-&gt;getWireFrameIndices();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* buffer = indexBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(indices.size(), <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (buffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> std::size_t bufferSizeInByte =</div>\n\
<div class=\"line\">                        <span class=\"keyword\">sizeof</span>(GeometryOverrideExample2_shape::IndexList::value_type) * indices.size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    memcpy(buffer, indices.data(), bufferSizeInByte);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Transfer from CPU to GPU memory.</span></div>\n\
<div class=\"line\">                    indexBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(buffer);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Associate index buffer with render item</span></div>\n\
<div class=\"line\">                    item-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a7d0f067f76206a54f4f716f63bcb6b19\">associateWithIndexBuffer</a>(indexBuffer);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Clean up any cached data stored from the updateDG() phase.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : For more information, see MPxGeometryOverride::cleanUp()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GeometryOverrideExample2::cleanUp()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Nothing here because the plugin doesn&#39;t keep any temporary data.</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Update the wireframe render item named &#39;renderItemName&#39; or create it</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  if it doesn&#39;t exists.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Note : Arguments drawMode and depthPriority are only used for creation of </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         the render item.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ============================================================</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GeometryOverrideExample2::updateWireframeItems(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* renderItemName, MGeometry::DrawMode drawMode,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> depthPriority, <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> color, <span class=\"keywordtype\">bool</span> isEnable,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>&amp; shaderManager)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* renderItem = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Try to find the active wireframe render item.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the returning index is smaller than 0, that means </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the render item does&#39;t exists yet. So, create it.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">auto</span> renderItemIndex = renderItemList.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a4cfe9fc51a24bca06d2619a55542f689\">indexOf</a>(renderItemName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderItemIndex &lt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the new render item with the given name.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// We designate this item as a UI &quot;decoration&quot; and will not be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// involved in rendering aspects such as casting shadows</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The &quot;topology&quot; for the render item is a line list.</span></div>\n\
<div class=\"line\">        renderItem = <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ac74a014f3346d8ddac693b7f034fa228\">MHWRender::MRenderItem::Create</a>(renderItemName,</div>\n\
<div class=\"line\">            <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a688a4360e982358b90610f58d4eef49eab87ea4b9433d4e99398728f2cf29b881\">MHWRender::MRenderItem::DecorationItem</a>,</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea9808e481c6346dfc333afb4c52890ac9\">MHWRender::MGeometry::kLines</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We want this render item to show up when in all mode ( Wireframe, Shaded, Textured and BoundingBox)</span></div>\n\
<div class=\"line\">        renderItem-&gt;<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a8e28487092f00765128c2ffdd43d0fe4\">setDrawMode</a>(drawMode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set selection priority: on top of everything</span></div>\n\
<div class=\"line\">        renderItem-&gt;<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a6e865e2cf5c9d818b1cbb99af2360c47\">depthPriority</a>(depthPriority);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get an instance of a 3dSolidShader from the shader manager.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The shader tells the graphics hardware how to draw the geometry. </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The MShaderInstance is a reference to a shader along with the values for the shader parameters.</span></div>\n\
<div class=\"line\">        MShaderInstance* shader = shaderManager.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a8e4ad27d691969622af2b05d8c6213d9\">getStockShader</a>(MShaderManager::k3dSolidShader);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Assign the shader to the render item. This adds a reference to that</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// shader.</span></div>\n\
<div class=\"line\">            renderItem-&gt;<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ad283b157fa4f6c40bceb9d398c53a72a\">setShader</a>(shader);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Once assigned, no need to hold on to shader instance</span></div>\n\
<div class=\"line\">            shaderManager.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(shader);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The item must be added to the persistent list to be considered</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// for update / rendering</span></div>\n\
<div class=\"line\">        renderItemList.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a238f55e85f694b4f74535aaedc6ebe01\">append</a>(renderItem);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        renderItem = renderItemList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a82ed5d7ae96a2890f5f54f697bb0bab0\">itemAt</a>(renderItemIndex);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderItem)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* shader = renderItem-&gt;<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#aa606047c9ccc32d66b93d07327b65be9\">getShader</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Set the shader color parameter</span></div>\n\
<div class=\"line\">            shader-&gt;<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;solidColor&quot;</span>, &amp;color.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        renderItem-&gt;<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a1e9d2a5708b2231a8e72d22dc3be53fe\">enable</a>(isEnable);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              initialize / uninitialize plugin</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//===========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sDrawDbClassification(<span class=\"stringliteral\">&quot;drawdb/geometry/geometryOverrideExample2&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sDrawRegistrantId(<span class=\"stringliteral\">&quot;geometryOverrideExample2Plugin&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerShape(<span class=\"stringliteral\">&quot;geometryOverrideExample2_shape&quot;</span>,             <span class=\"comment\">// the name of the new type of user defined shape node</span></div>\n\
<div class=\"line\">        GeometryOverrideExample2_shape::id,             <span class=\"comment\">// a unique id that identifies this node</span></div>\n\
<div class=\"line\">        &amp;GeometryOverrideExample2_shape::creator,       <span class=\"comment\">// function that will return a pointer to a new instance of the class </span></div>\n\
<div class=\"line\">                                                        <span class=\"comment\">// (derived from MPxSurfaceNode) that implements the new shape node type</span></div>\n\
<div class=\"line\">        &amp;GeometryOverrideExample2_shape::initialize,    <span class=\"comment\">// function that will initialize all the attributes of the new shape node type</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">nullptr</span>,</div>\n\
<div class=\"line\">        &amp;sDrawDbClassification);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register geometryOverrideExample2_shape.&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a36f6ac92077e5064d897187608c9e548\">MHWRender::MDrawRegistry::registerGeometryOverrideCreator</a>(sDrawDbClassification,</div>\n\
<div class=\"line\">        sDrawRegistrantId,</div>\n\
<div class=\"line\">        GeometryOverrideExample2::Creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to register Viewport 2.0 geometry override.&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a24f600902d1e1a22ccd8985f9eee39a1\">MHWRender::MDrawRegistry::deregisterGeometryOverrideCreator</a>(sDrawDbClassification, sDrawRegistrantId);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister geometry override.&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterNode(GeometryOverrideExample2_shape::id);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to deregister GeometryOverrideExample2_shape.&quot;</span> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";