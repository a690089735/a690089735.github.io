var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: cgFx/nv_dds.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2nv_dds_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: cgFx/nv_dds.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/nv_dds.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (C) 2002-2003 NVIDIA </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// File: nv_dds.h</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef __NV_DDS_H__</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define __NV_DDS_H__</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  include &lt;windows.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;GL/gl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #if defined(_WIN32)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        #include &lt;QtGui/qopenglext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;OpenGL/gl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>nv_dds</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> DDS_FOURCC = 0x00000004;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> DDS_RGB    = 0x00000040;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> DDS_RGBA   = 0x00000041;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> DDS_DEPTH  = 0x00800000;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> DDS_COMPLEX = 0x00000008;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> DDS_CUBEMAP = 0x00000200;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> DDS_VOLUME  = 0x00200000;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> FOURCC_DXT1 = 0x31545844; <span class=\"comment\">//(MAKEFOURCC(&#39;D&#39;,&#39;X&#39;,&#39;T&#39;,&#39;1&#39;))</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> FOURCC_DXT3 = 0x33545844; <span class=\"comment\">//(MAKEFOURCC(&#39;D&#39;,&#39;X&#39;,&#39;T&#39;,&#39;3&#39;))</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> FOURCC_DXT5 = 0x35545844; <span class=\"comment\">//(MAKEFOURCC(&#39;D&#39;,&#39;X&#39;,&#39;T&#39;,&#39;5&#39;))</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>DDS_PIXELFORMAT</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwSize;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwFlags;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwFourCC;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwRGBBitCount;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwRBitMask;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwGBitMask;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwBBitMask;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwABitMask;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>DXTColBlock</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> col0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> col1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> row[4];</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>DXT3AlphaBlock</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> row[4];</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>DXT5AlphaBlock</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> alpha0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> alpha1;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> row[6];</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>DDS_HEADER</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwSize;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwFlags;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwHeight;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwWidth;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwPitchOrLinearSize;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwDepth;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwMipMapCount;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwReserved1[11];</div>\n\
<div class=\"line\">        DDS_PIXELFORMAT ddspf;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwCaps1;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwCaps2;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dwReserved2[3];</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CSurface</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>CTexture;</div>\n\
<div class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>CDDSImage;    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">            CSurface();</div>\n\
<div class=\"line\">            CSurface(<span class=\"keywordtype\">int</span> w, <span class=\"keywordtype\">int</span> h, <span class=\"keywordtype\">int</span> d, <span class=\"keywordtype\">int</span> imgsize);</div>\n\
<div class=\"line\">            CSurface(<span class=\"keyword\">const</span> CSurface &amp;copy);</div>\n\
<div class=\"line\">            CSurface &amp;operator= (<span class=\"keyword\">const</span> CSurface &amp;rhs);</div>\n\
<div class=\"line\">            <span class=\"keyword\">virtual</span> ~CSurface();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">operator</span> <span class=\"keywordtype\">char</span>*();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> create(<span class=\"keywordtype\">int</span> w, <span class=\"keywordtype\">int</span> h, <span class=\"keywordtype\">int</span> d, <span class=\"keywordtype\">int</span> imgsize);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_width() { <span class=\"keywordflow\">return</span> width; }</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_height() { <span class=\"keywordflow\">return</span> height; }</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_depth() { <span class=\"keywordflow\">return</span> depth; }</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_size() { <span class=\"keywordflow\">return</span> size; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> width;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> height;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> depth;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> size;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span> *pixels;       </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CTexture : <span class=\"keyword\">public</span> CSurface</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>CDDSImage;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">            CTexture();</div>\n\
<div class=\"line\">            CTexture(<span class=\"keywordtype\">int</span> w, <span class=\"keywordtype\">int</span> h, <span class=\"keywordtype\">int</span> d, <span class=\"keywordtype\">int</span> imgSize);</div>\n\
<div class=\"line\">            CTexture(<span class=\"keyword\">const</span> CTexture &amp;copy);</div>\n\
<div class=\"line\">            CTexture &amp;operator= (<span class=\"keyword\">const</span> CTexture &amp;rhs);</div>\n\
<div class=\"line\">            ~CTexture() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> CSurface &amp;get_mipmap(<span class=\"keywordtype\">int</span> index) </div>\n\
<div class=\"line\">            { </div>\n\
<div class=\"line\">                assert(index &lt; (<span class=\"keywordtype\">int</span>)mipmaps.size());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> mipmaps[index]; </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_num_mipmaps() { <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">int</span>)mipmaps.size(); }</div>\n\
<div class=\"line\">        <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">            vector&lt;CSurface&gt; mipmaps;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CDDSImage</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">            CDDSImage();</div>\n\
<div class=\"line\">            ~CDDSImage();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> load(<span class=\"keywordtype\">string</span> filename, <span class=\"keywordtype\">bool</span> flipImage = <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> clear();</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keyword\">operator</span> <span class=\"keywordtype\">char</span>*();</div>\n\
<div class=\"line\">            CTexture &amp;operator[](<span class=\"keywordtype\">int</span> index);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> upload_texture1D();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> upload_texture2D(<span class=\"keywordtype\">int</span> imageIndex = 0, GLenum target = GL_TEXTURE_2D);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef GL_NV_texture_rectangle           </span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> upload_textureRectangle();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> upload_texture3D();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> upload_textureCubemap();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_width() </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                assert(valid);</div>\n\
<div class=\"line\">                assert(images.size() &gt; 0);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> images[0].get_width(); </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_height()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                assert(valid);</div>\n\
<div class=\"line\">                assert(images.size() &gt; 0);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> images[0].get_height(); </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_depth()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                assert(valid);</div>\n\
<div class=\"line\">                assert(images.size() &gt; 0);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> images[0].get_depth(); </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_size()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                assert(valid);</div>\n\
<div class=\"line\">                assert(images.size() &gt; 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> images[0].get_size();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_num_mipmaps() </div>\n\
<div class=\"line\">            { </div>\n\
<div class=\"line\">                assert(valid);</div>\n\
<div class=\"line\">                assert(images.size() &gt; 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> images[0].get_num_mipmaps(); </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> CSurface &amp;get_mipmap(<span class=\"keywordtype\">int</span> index) </div>\n\
<div class=\"line\">            { </div>\n\
<div class=\"line\">                assert(valid);</div>\n\
<div class=\"line\">                assert(images.size() &gt; 0);</div>\n\
<div class=\"line\">                assert(index &lt; images[0].get_num_mipmaps());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> images[0].get_mipmap(index); </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_components() { <span class=\"keywordflow\">return</span> components; }</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> get_format() { <span class=\"keywordflow\">return</span> format; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> is_compressed() { <span class=\"keywordflow\">return</span> compressed; }</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> is_cubemap() { <span class=\"keywordflow\">return</span> cubemap; }</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> is_volume() { <span class=\"keywordflow\">return</span> volume; }</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> is_valid() { <span class=\"keywordflow\">return</span> valid; }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> clamp_size(<span class=\"keywordtype\">int</span> size);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> get_line_width(<span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> bpp);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> size_dxtc(<span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> height);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> size_rgb(<span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> height);</div>\n\
<div class=\"line\">            <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> swap_endian(<span class=\"keywordtype\">void</span> *val);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> align_memory(CTexture *surface);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> flip(<span class=\"keywordtype\">char</span> *image, <span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> height, <span class=\"keywordtype\">int</span> depth, <span class=\"keywordtype\">int</span> size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> swap(<span class=\"keywordtype\">void</span> *byte1, <span class=\"keywordtype\">void</span> *byte2, <span class=\"keywordtype\">int</span> size);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> flip_blocks_dxtc1(DXTColBlock *line, <span class=\"keywordtype\">int</span> numBlocks);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> flip_blocks_dxtc3(DXTColBlock *line, <span class=\"keywordtype\">int</span> numBlocks);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> flip_blocks_dxtc5(DXTColBlock *line, <span class=\"keywordtype\">int</span> numBlocks);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span> flip_dxt5_alpha(DXT5AlphaBlock *block);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> format;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> components;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> compressed;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> cubemap;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> volume;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> valid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            vector&lt;CTexture&gt; images;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> PFNGLTEXIMAGE3DEXTPROC glTexImage3D;</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB;</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB;</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";