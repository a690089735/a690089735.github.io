var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: dx11Shader/dx11ShaderUniformParamBuilder.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'dx11_shader_2dx11_shader_uniform_param_builder_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: dx11Shader/dx11ShaderUniformParamBuilder.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">dx11Shader/dx11ShaderUniformParamBuilder.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &gt;= 1700</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable: 4005 )</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderUniformParamBuilder.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11Shader.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderStrings.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderCompileHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;dx11ShaderSemantics.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Find a substring, if not found also try for lowercase substring</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> findSubstring(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; haystack, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; needle)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> at = haystack.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aaa76dfd27998dc2ff937d3690d11391c\">indexW</a>(needle);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(at &lt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> needleLowerCase = needle;</div>\n\
<div class=\"line\">            needleLowerCase.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>();</div>\n\
<div class=\"line\">            at = haystack.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aaa76dfd27998dc2ff937d3690d11391c\">indexW</a>(needleLowerCase);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> at;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CUniformParameterBuilder::CUniformParameterBuilder()</div>\n\
<div class=\"line\">    :mEffectVariable(NULL)</div>\n\
<div class=\"line\">    ,mShader(NULL)</div>\n\
<div class=\"line\">    ,mParamType(eUndefined)</div>\n\
<div class=\"line\">    ,mLightType(eNotLight)</div>\n\
<div class=\"line\">    ,mLightIndex(-1)</div>\n\
<div class=\"line\">    ,mUIGroupIndex(-1)</div>\n\
<div class=\"line\">    ,mValidUniformParameter(false)</div>\n\
<div class=\"line\">    ,mUIOrder(-1)</div>\n\
<div class=\"line\">    ,mAnnotationIndex()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CUniformParameterBuilder::init(ID3DX11EffectVariable* inEffectVariable,dx11ShaderNode* inShader, <span class=\"keywordtype\">int</span> order)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mEffectVariable = inEffectVariable;</div>\n\
<div class=\"line\">    mShader = inShader;</div>\n\
<div class=\"line\">    mUIOrder = order;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(mEffectVariable)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mEffectVariable-&gt;GetDesc(&amp;mDesc);</div>\n\
<div class=\"line\">        mEffectVariable-&gt;GetType()-&gt;GetDesc(&amp;mDescType);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Annotations are constantly evolving. For the latest</span></div>\n\
<div class=\"line\"><span class=\"comment\">    standards, there are two sources of documentation to follow:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    1- MSDN: http://msdn.microsoft.com/en-us/library/windows/desktop/bb206291%28v=vs.85%29.aspx</span></div>\n\
<div class=\"line\"><span class=\"comment\">             (or search for &quot;DirectX Standard Annotations and Semantics Reference&quot;)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    2- NVidia: http://developer.download.nvidia.com/assets/gamedev/docs/Using_SAS_v1_03.pdf</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    The code also tries to be compatible with annotations from</span></div>\n\
<div class=\"line\"><span class=\"comment\">    previous versions of the standards.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CUniformParameterBuilder::build()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//assert(mEffectVariable);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// building the uniform based on the type</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// ---------------------------------------</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MUniformParameter::DataType</a>     type        = convertType    ();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> semantic    = convertSemantic();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    updateLightInfoFromSemantic();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If we don&#39;t know what this parameter is, and we&#39;ve been told to hide it, do so</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// NOTE that for now, we only hide simple constants as hiding everything we&#39;re</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// told to hide actually starts hiding textures and things the artist wants to see.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (semantic == <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a> &amp;&amp; (type == <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae59341821f9cdc0608d1f8775fb3eb7a\">MUniformParameter::kTypeFloat</a> || type == <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a00d1e209478ab74cbadfbe8435e32e81\">MUniformParameter::kTypeString</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mDesc.Semantic &amp;&amp; _stricmp(mDesc.Semantic, dx11ShaderSemantic::kSTANDARDSGLOBAL)==0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        The UIGroup annotation is used to groups multiple parameters in a single</span></div>\n\
<div class=\"line\"><span class=\"comment\">        collapsible panel in the attribute editor. This helps organize related</span></div>\n\
<div class=\"line\"><span class=\"comment\">        parameters.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        - All parameters sharing the same UIGroup annotation string will group together</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The name of the group, as shown as the header of the collapsible panel, will</span></div>\n\
<div class=\"line\"><span class=\"comment\">           be the value of the annotation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The order of the panels in the attribute editor will be sorted according to</span></div>\n\
<div class=\"line\"><span class=\"comment\">            the parameter with the lowest UIOrder in that group</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - UIGroups win over UIOrder, this means all parameters will be grouped in a</span></div>\n\
<div class=\"line\"><span class=\"comment\">            single panel even if there are non grouped parameters that have a UIOrder</span></div>\n\
<div class=\"line\"><span class=\"comment\">            that falls within the range of UIOrders for parameters in that group</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - This commands lists all UIGroups: dx11Shader -listUIGroupInformation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - This command lists all parameters for a group: dx11Shader -listUIGroupParameters &lt;group&gt;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mUIGroupIndex == -1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LPCSTR pszUIGroupName;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( getAnnotation( dx11ShaderAnnotation::kUIGroup, pszUIGroupName) &amp;&amp; *pszUIGroupName)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uiGroupName(pszUIGroupName);</div>\n\
<div class=\"line\">            mUIGroupIndex = mShader-&gt;getIndexForUIGroupName(uiGroupName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        The name of the parameter in the attribute editor defaults to</span></div>\n\
<div class=\"line\"><span class=\"comment\">        the name of the variable associated with the parameter. If there</span></div>\n\
<div class=\"line\"><span class=\"comment\">        is a UIName attribute on the parameter, and the &#39;kVariableNameAsAttributeName&#39;</span></div>\n\
<div class=\"line\"><span class=\"comment\">        semantic is not set, this name will be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">        define all three of the parameter short/long/nice name. If the</span></div>\n\
<div class=\"line\"><span class=\"comment\">        UIName contains spaces or other script unfriendly characters,</span></div>\n\
<div class=\"line\"><span class=\"comment\">        those will be replaced by underscores in the short and long names</span></div>\n\
<div class=\"line\"><span class=\"comment\">        used in scripting.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        Using UIName as attribute name can lead to ambiguity since UIName annotations </span></div>\n\
<div class=\"line\"><span class=\"comment\">        are not required to be unique by the compiler. The MPxHardwareShader class</span></div>\n\
<div class=\"line\"><span class=\"comment\">        will add numbers at the end of the short/long names as required to</span></div>\n\
<div class=\"line\"><span class=\"comment\">        make them unique.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    LPCSTR paramName = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> varAsAttr = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mShader)</div>\n\
<div class=\"line\">        varAsAttr = mShader-&gt;getVariableNameAsAttributeName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    LPCSTR uiName = NULL ;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasUIName = getAnnotation( dx11ShaderAnnotation::kUIName, uiName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( varAsAttr || !hasUIName )</div>\n\
<div class=\"line\">        paramName = mDesc.Name;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        paramName = uiName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        If an integer parameter has a UIFieldNames annotation, then the</span></div>\n\
<div class=\"line\"><span class=\"comment\">        annotation contents will be used to populate a dropdown menu when the</span></div>\n\
<div class=\"line\"><span class=\"comment\">        parameter is shown in the attribute editor. The parameter type is</span></div>\n\
<div class=\"line\"><span class=\"comment\">        changed from integer to enum.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    LPCSTR uiFieldNames = NULL ;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fieldNames;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(type == <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ab6e6fe667e0718b58ca5f6ac419c7cf7\">MUniformParameter::kTypeInt</a> &amp;&amp; getAnnotation(dx11ShaderAnnotation::kUIFieldNames,uiFieldNames) &amp;&amp; uiFieldNames)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fieldNames = uiFieldNames;</div>\n\
<div class=\"line\">        type = <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af9dad01c655cbd183b93acbd5fcaf72d\">MUniformParameter::kTypeEnum</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> uniform( paramName, type, semantic, mDescType.Rows, mDescType.Columns, (<span class=\"keywordtype\">void</span>*)mEffectVariable);</div>\n\
<div class=\"line\">    mParam = uniform;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If shader author has specified to use var as attribute name and provided a UIName, then</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// tell Maya to use the UIName for the attribute&#39;s &#39;Nice Name&#39;:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (varAsAttr &amp;&amp; hasUIName)</div>\n\
<div class=\"line\">        mParam.setUINiceName( uiName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    updateRangeFromAnnotation();</div>\n\
<div class=\"line\">    updateUIVisibilityFromAnnotation();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fieldNames.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mParam.setEnumFieldNames(fieldNames);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        The UIOrder annotation can be used to make sure all parameters</span></div>\n\
<div class=\"line\"><span class=\"comment\">        appear in a predictable sequence in the attribute editors even</span></div>\n\
<div class=\"line\"><span class=\"comment\">        if the compiler decides to reorder them is the input block.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The content of the annotation is an integer</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - Parameters will be sorted according to increasing values of</span></div>\n\
<div class=\"line\"><span class=\"comment\">          UIOrder annotation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The sort is stable, so parameters with identical UIOrder will</span></div>\n\
<div class=\"line\"><span class=\"comment\">          appear in the order the compiler outputs them (which is not as</span></div>\n\
<div class=\"line\"><span class=\"comment\">          stable as the sort)</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    getAnnotation(dx11ShaderAnnotation::kUIOrder, mUIOrder);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set keyable for visible attributes other than textures</span></div>\n\
<div class=\"line\">    mParam.setKeyable(!mParam.UIHidden() &amp;&amp; !mParam.isATexture());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = setParameterValueFromEffect();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(result)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mValidUniformParameter = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    This function tests for any annotation that can be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    control the visibility of a parameter:</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CUniformParameterBuilder::updateUIVisibilityFromAnnotation()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    BOOL visible = TRUE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( getBOOLAnnotation( dx11ShaderAnnotation::kSasUiVisible, visible))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mParam.setUIHidden(!visible);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LPCSTR uiTypeValue = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>  foundUIType = getAnnotation( dx11ShaderAnnotation::kUIType,uiTypeValue);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (foundUIType &amp;&amp; !_stricmp(uiTypeValue, dx11ShaderAnnotationValue::kNone))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParam.setUIHidden(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// As per NVidia SAS docs v1.0.3:</span></div>\n\
<div class=\"line\">        foundUIType = getAnnotation( dx11ShaderAnnotation::kUIWidget,uiTypeValue);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (foundUIType &amp;&amp; !_stricmp(uiTypeValue, dx11ShaderAnnotationValue::kNone))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParam.setUIHidden(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    These annotations can be used to control the numeric range of</span></div>\n\
<div class=\"line\"><span class=\"comment\">    a slider. The hard min/max are defined as per documented standards,</span></div>\n\
<div class=\"line\"><span class=\"comment\">    and we introduced the soft min/max notion to match the normal</span></div>\n\
<div class=\"line\"><span class=\"comment\">    behavior of Maya attributes. A slider range will be limited to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    values between min and max, but the initial slider displayed in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    UI will go from soft min to soft max.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CUniformParameterBuilder::updateRangeFromAnnotation()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>(mParam.type())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae59341821f9cdc0608d1f8775fb3eb7a\">MUniformParameter::kTypeFloat</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ab6e6fe667e0718b58ca5f6ac419c7cf7\">MUniformParameter::kTypeInt</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> uiMinFloat = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(getAnnotation( dx11ShaderAnnotation::kSasUiMin,uiMinFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kUIMin,uiMinFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kuimin,uiMinFloat) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mParam.setRangeMin(uiMinFloat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> uiMaxFloat = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(getAnnotation( dx11ShaderAnnotation::kSasUiMax,uiMaxFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kUIMax,uiMaxFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kuimax,uiMaxFloat) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mParam.setRangeMax(uiMaxFloat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> uiSoftMinFloat = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(getAnnotation( dx11ShaderAnnotation::kSasUiSoftMin,uiSoftMinFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kUISoftMin,uiSoftMinFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kuisoftmin,uiSoftMinFloat) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mParam.setSoftRangeMin(uiSoftMinFloat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> uiSoftMaxFloat = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(getAnnotation( dx11ShaderAnnotation::kSasUiSoftMax,uiSoftMaxFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kUISoftMax,uiSoftMaxFloat) ||</div>\n\
<div class=\"line\">               getAnnotation( dx11ShaderAnnotation::kuisoftmax,uiSoftMaxFloat) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mParam.setSoftRangeMax(uiSoftMaxFloat);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Here we retrieve the initial value for an effect parameter.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    This value will be set as the default value of the corresponding</span></div>\n\
<div class=\"line\"><span class=\"comment\">    uniform parameter attribute and can be used to test if the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    current value of a parameter is different from the default or</span></div>\n\
<div class=\"line\"><span class=\"comment\">    not.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CUniformParameterBuilder::setParameterValueFromEffect()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> length = getLength();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MUniformParameter::DataType</a> type = mParam.type();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( type )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae59341821f9cdc0608d1f8775fb3eb7a\">MUniformParameter::kTypeFloat</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::vector&lt;FLOAT&gt; values;</div>\n\
<div class=\"line\">            values.resize(length);</div>\n\
<div class=\"line\">            FLOAT* Value = &amp;values[0];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span>(mDescType.Class)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D10_SVC_SCALAR:</div>\n\
<div class=\"line\">                mEffectVariable-&gt;AsScalar()-&gt;GetFloat( Value );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D10_SVC_VECTOR:</div>\n\
<div class=\"line\">                mEffectVariable-&gt;AsVector()-&gt;GetFloatVector( Value );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D10_SVC_MATRIX_COLUMNS:</div>\n\
<div class=\"line\">                mEffectVariable-&gt;AsMatrix()-&gt;GetMatrix( Value );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> D3D10_SVC_MATRIX_ROWS:</div>\n\
<div class=\"line\">                mEffectVariable-&gt;AsMatrix()-&gt;GetMatrixTranspose( Value );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mParam.setAsFloatArray( Value, length);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a00d1e209478ab74cbadfbe8435e32e81\">MUniformParameter::kTypeString</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (length==1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                LPCSTR Value;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( mEffectVariable-&gt;AsString()-&gt;GetString( &amp;Value) == S_OK)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParam.setAsString( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>( Value));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                logUnsupportedTypeWarning(dx11ShaderStrings::kTypeStringVector);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a52b0938c028df56b62bc9e9080475e7f\">MUniformParameter::kTypeBool</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (length==1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(USE_BOOL)</span></div>\n\
<div class=\"line\">                BOOL Value;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> Value;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( mEffectVariable-&gt;AsScalar()-&gt;GetBool( &amp;Value) == S_OK)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParam.setAsBool( Value ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                logUnsupportedTypeWarning(dx11ShaderStrings::kTypeBoolVector);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ab6e6fe667e0718b58ca5f6ac419c7cf7\">MUniformParameter::kTypeInt</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af9dad01c655cbd183b93acbd5fcaf72d\">MUniformParameter::kTypeEnum</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (length==1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                INT Value;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( mEffectVariable-&gt;AsScalar()-&gt;GetInt( &amp;Value) == S_OK)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParam.setAsInt( Value);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                logUnsupportedTypeWarning(dx11ShaderStrings::kTypeIntVector);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( type &gt;= <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a9eafb8c812a708ea65bcbc4cab43bb8a\">MUniformParameter::kType1DTexture</a> &amp;&amp; type &lt;= <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a098a1abcb5c2e8a76899d650a6425562\">MUniformParameter::kTypeEnvTexture</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We have a texture name but no resource view. Try and load in</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// a new texture and get a new resource view.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> textureFile;</div>\n\
<div class=\"line\">            LPCSTR resource;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> paramName = mParam.name();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( mShader-&gt;getTextureFile( paramName, textureFile ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mParam.setAsString( textureFile );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( getAnnotation( dx11ShaderAnnotation::kResourceName, resource) &amp;&amp; *resource)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mParam.setAsString( mShader-&gt;findResource( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>( resource), CDX11EffectCompileHelper::resolveShaderFileName(mShader-&gt;effectName()) ));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( getAnnotation( dx11ShaderAnnotation::kSasResourceAddress, resource) &amp;&amp; *resource)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mParam.setAsString( mShader-&gt;findResource( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>( resource), CDX11EffectCompileHelper::resolveShaderFileName(mShader-&gt;effectName()) ));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MUniformParameter::DataType</a> CUniformParameterBuilder::convertType()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MUniformParameter::DataType</a>     paramType = <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa3016cbceb721f8a4e567dc4d54d6dc6\">MUniformParameter::kTypeUnknown</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( mDescType.Type) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_BOOL:            paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a52b0938c028df56b62bc9e9080475e7f\">MUniformParameter::kTypeBool</a>;   <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_INT:             paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ab6e6fe667e0718b58ca5f6ac419c7cf7\">MUniformParameter::kTypeInt</a>;    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_FLOAT:           paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae59341821f9cdc0608d1f8775fb3eb7a\">MUniformParameter::kTypeFloat</a>;  <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_STRING:          paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a00d1e209478ab74cbadfbe8435e32e81\">MUniformParameter::kTypeString</a>; <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_UINT:            paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ab6e6fe667e0718b58ca5f6ac419c7cf7\">MUniformParameter::kTypeInt</a>;    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_UINT8:</div>\n\
<div class=\"line\">        logUnsupportedTypeWarning(dx11ShaderStrings::kTypeIntUInt8);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_DOUBLE:</div>\n\
<div class=\"line\">        logUnsupportedTypeWarning(dx11ShaderStrings::kTypeDouble);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWTEXTURE1D:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE1D:           paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a9eafb8c812a708ea65bcbc4cab43bb8a\">MUniformParameter::kType1DTexture</a>;      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWTEXTURE2D:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE2D:           paramType = <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a7d3972f1f1ee99452d3c715b157b5cad\">MUniformParameter::kType2DTexture</a>;      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWTEXTURE3D:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE3D:           paramType = <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a1f0476b91ae65b4ea6d0ce691f58be83\">MUniformParameter::kType3DTexture</a>;      <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURECUBE:         paramType = <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af5ef31be5108f486d286c06c13df0578\">MUniformParameter::kTypeCubeTexture</a>;    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// The shader hasn&#39;t used a typed texture, so first see if there&#39;s an annotation</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// that tells us which type to use.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// -------------------------------------</span></div>\n\
<div class=\"line\">            LPCSTR  textureType;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( ( getAnnotation( dx11ShaderAnnotation::kTextureType, textureType) || getAnnotation( dx11ShaderAnnotation::kResourceType, textureType)) &amp;&amp; textureType) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Grab the type off from the annotation</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// -------------------------------------</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( !_stricmp( textureType, dx11ShaderAnnotationValue::k1D)) paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a9eafb8c812a708ea65bcbc4cab43bb8a\">MUniformParameter::kType1DTexture</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( textureType, dx11ShaderAnnotationValue::k2D)) paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a7d3972f1f1ee99452d3c715b157b5cad\">MUniformParameter::kType2DTexture</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( textureType, dx11ShaderAnnotationValue::k3D)) paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a1f0476b91ae65b4ea6d0ce691f58be83\">MUniformParameter::kType3DTexture</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( textureType, dx11ShaderAnnotationValue::kCube)) paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af5ef31be5108f486d286c06c13df0578\">MUniformParameter::kTypeCubeTexture</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">                    args.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(textureType);</div>\n\
<div class=\"line\">                    args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(mDesc.Name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    mWarnings += dx11ShaderStrings::getString( dx11ShaderStrings::kUnknownTextureSemantic, args );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( paramType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa3016cbceb721f8a4e567dc4d54d6dc6\">MUniformParameter::kTypeUnknown</a>) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// No explicit type. At this stage, it would be nice to take a look at the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// sampler which uses the texture and grab the type of that, but I can&#39;t see</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// any way to query for the sampler -&gt; texture bindings through the effect</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// API.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                paramType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a7d3972f1f1ee99452d3c715b157b5cad\">MUniformParameter::kType2DTexture</a>;</div>\n\
<div class=\"line\">                mWarnings += dx11ShaderStrings::getString( dx11ShaderStrings::kNoTextureType, mDesc.Name );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE1DARRAY:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE2DARRAY:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE2DMS:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURE2DMSARRAY:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TEXTURECUBEARRAY:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWTEXTURE1DARRAY:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWTEXTURE2DARRAY:</div>\n\
<div class=\"line\">        logUnsupportedTypeWarning(dx11ShaderStrings::kTypeTextureArray);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_VOID:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_SAMPLER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_PIXELSHADER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_VERTEXSHADER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_GEOMETRYSHADER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_RASTERIZER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_DEPTHSTENCIL:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_BLEND:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_BUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_CBUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_TBUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_HULLSHADER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_DOMAINSHADER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_INTERFACE_POINTER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_COMPUTESHADER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_BYTEADDRESS_BUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWBYTEADDRESS_BUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_STRUCTURED_BUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWSTRUCTURED_BUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_APPEND_STRUCTURED_BUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_CONSUME_STRUCTURED_BUFFER:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_RENDERTARGETVIEW:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D10_SVT_DEPTHSTENCILVIEW:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> D3D11_SVT_RWBUFFER:</div>\n\
<div class=\"line\">        <span class=\"comment\">// ignored variable definitions</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// ------------------------------</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> paramType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Convert a DX space into a Maya space</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> CUniformParameterBuilder::convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> defaultSpace)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> space = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    LPCSTR ann;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( getAnnotation( dx11ShaderAnnotation::kSpace, ann) &amp;&amp; ann)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !_stricmp( ann, dx11ShaderAnnotationValue::kObject))        space = defaultSpace &gt;= <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a>   : <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa09d1a594e9e76ff19ada1f447328882e\">MUniformParameter::kSemanticObjectDir</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( ann, dx11ShaderAnnotationValue::kWorld))    space = defaultSpace &gt;= <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>    : <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad606c99fe89502591358e64f4f7a589b\">MUniformParameter::kSemanticWorldDir</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( ann, dx11ShaderAnnotationValue::kView))     space = defaultSpace &gt;= <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5f7f2dd48bf94ec26eba9f19290eb3ba\">MUniformParameter::kSemanticViewPos</a>     : <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( ann, dx11ShaderAnnotationValue::kCamera))   space = defaultSpace &gt;= <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5f7f2dd48bf94ec26eba9f19290eb3ba\">MUniformParameter::kSemanticViewPos</a>     : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">            args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(ann);</div>\n\
<div class=\"line\">            args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(mDesc.Name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mWarnings += dx11ShaderStrings::getString( dx11ShaderStrings::kUnknowSpace, args );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> space;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Convert a DX semantic into a Maya semantic</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> CUniformParameterBuilder::convertSemantic( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// @@@@ maybe useful to validate</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// MHWRender::MShaderManager::isSupportedShaderSemantic( semantic );</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Convert all semantics to lower case for faster</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// mtype = MHWRender::MFrameContext::semanticToMatrixType( semantic, &amp;status );</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// First try the explicit semantic</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( mDesc.Semantic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(      !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorld))                                paramSemantic = <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaebbf84be5dd7360e2bbf5eb369fc97c0\">MUniformParameter::kSemanticWorldMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldTranspose))                       paramSemantic = <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa0cacba54dfb174acff612639f8d43b1c\">MUniformParameter::kSemanticWorldTransposeMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldInverse))                         paramSemantic = <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa2b32c47f701e1aee06ad4da2308b1e5b\">MUniformParameter::kSemanticWorldInverseMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldInverseTranspose))                paramSemantic = <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae4206f3e87fcc5e8aaca57f71b488f74\">MUniformParameter::kSemanticWorldInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kView))                                 paramSemantic = <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa9286c5e650ac955bb9239a33fc8a6881\">MUniformParameter::kSemanticViewMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewTranspose))                        paramSemantic = <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa08a64cde1043fe74b4d19b75e01b8007\">MUniformParameter::kSemanticViewTransposeMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewInverse))                          paramSemantic = <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa18c403ade6b055399d73781ec5525ec8\">MUniformParameter::kSemanticViewInverseMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewInverseTranspose))                 paramSemantic = <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efac2fd760682e8b70a19fbb00d9fbbca10\">MUniformParameter::kSemanticViewInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kProjection))                           paramSemantic = <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5ee9d38749ff3eecb39e8a5d7939bf12\">MUniformParameter::kSemanticProjectionMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kProjectionTranspose))                  paramSemantic = <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaded6834b41888a78a7e4cc73ded9dca2\">MUniformParameter::kSemanticProjectionTransposeMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kProjectionInverse))                    paramSemantic = <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa50da21dea2dc0c66c65447c4064aeab4\">MUniformParameter::kSemanticProjectionInverseMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kProjectionInverseTranspose))           paramSemantic = <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa2db728cf9d48ad6eef29c86811633aa2\">MUniformParameter::kSemanticProjectionInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldView))                            paramSemantic = <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efafed2a73eecf453663e5049f7b91ab454\">MUniformParameter::kSemanticWorldViewMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldViewTranspose))                   paramSemantic = <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa660072ee0da5aac32d009d54390a7d2c\">MUniformParameter::kSemanticWorldViewTransposeMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldViewInverse))                     paramSemantic = <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa82582b0dacdb426a631d6b6d6e7bd318\">MUniformParameter::kSemanticWorldViewInverseMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldViewInverseTranspose))            paramSemantic = <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa882552cd5dbb4f1e79fbf6f191a519b6\">MUniformParameter::kSemanticWorldViewInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewProjection))                       paramSemantic = <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa3cc9931234978575495baabcc35d77ac\">MUniformParameter::kSemanticViewProjectionMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewProjectionTranspose))              paramSemantic = <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab8ede271141deff09669de8301b275cd\">MUniformParameter::kSemanticViewProjectionTransposeMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewProjectionInverse))                paramSemantic = <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa8aa624322655ec7433a8c9be4de62042\">MUniformParameter::kSemanticViewProjectionInverseMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewProjectionInverseTranspose))       paramSemantic = <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa53bf454430df7cfd9d82a540cc6f4d89\">MUniformParameter::kSemanticViewProjectionInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldViewProjection))                  paramSemantic = <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efac2845cd2c335834608660c432a75bfc7\">MUniformParameter::kSemanticWorldViewProjectionMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldViewProjectionTranspose))         paramSemantic = <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa65cde354d11cfcd732bf2b5e6a9ecc4f\">MUniformParameter::kSemanticWorldViewProjectionTransposeMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldViewProjectionInverse))           paramSemantic = <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa87ea4b79868f0697c3044d0e8e20c3cf\">MUniformParameter::kSemanticWorldViewProjectionInverseMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kWorldViewProjectionInverseTranspose))  paramSemantic = <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad5142de73b4e8966659887132402b4b0\">MUniformParameter::kSemanticWorldViewProjectionInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewDirection))                        paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewPosition))                         paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5f7f2dd48bf94ec26eba9f19290eb3ba\">MUniformParameter::kSemanticViewPos</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLocalViewer))                          paramSemantic = <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efafb1168559308955b919faf054f1471d2\">MUniformParameter::kSemanticLocalViewer</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kViewportPixelSize))                    paramSemantic = <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae3e697f1682b81aab2f7b1e205ece4df\">MUniformParameter::kSemanticViewportPixelSize</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kBackgroundColor))                      paramSemantic = <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa0136b63d752ea317d53b36b72331af70\">MUniformParameter::kSemanticBackgroundColor</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kFrame))                                paramSemantic = <a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa47a4db04fc454d43cb0effa28e055304\">MUniformParameter::kSemanticFrameNumber</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kFrameNumber))                          paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa47a4db04fc454d43cb0effa28e055304\">MUniformParameter::kSemanticFrameNumber</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAnimationTime))                        paramSemantic = <a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa78f71ae1aff5a5ac40249feae9951768\">MUniformParameter::kSemanticTime</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kTime))                                 paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa78f71ae1aff5a5ac40249feae9951768\">MUniformParameter::kSemanticTime</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kNearClipPlane))                        paramSemantic = <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaea6ef2e23bb54f3a8cbe2ee20f806b81\">MUniformParameter::kSemanticNearClipPlane</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kFarClipPlane))                         paramSemantic = <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa4cc42ecfffec0584e050a06153497a8b\">MUniformParameter::kSemanticFarClipPlane</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kColor))                                paramSemantic = <a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightColor))                           paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAmbient))                              paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightAmbientColor))                    paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kSpecular))                             paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightSpecularColor))                   paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kDiffuse))                              paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kNormal))                               paramSemantic = <a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa902d41d2f20092eb5696141b60e42b25\">MUniformParameter::kSemanticNormal</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kBump))                                 paramSemantic = <a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae867e160beb59794a5b46005abdfec40\">MUniformParameter::kSemanticBump</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kEnvironment))                          paramSemantic = <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa37192c0f651ef717c41cbc9678d1f5d4\">MUniformParameter::kSemanticEnvironment</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kPosition))                             paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition0))                        paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition1))                        paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition2))                        paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition3))                        paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kDirection))                            paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMap))                            paramSemantic = <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa3f1e3514b18259f9f74387bf25ce9af2\">MUniformParameter::kSemanticColorTexture</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowColor))                          paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowFlag))                           paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMapBias))                        paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMapMatrix))                      paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMapXForm))                       paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kStandardsGlobal))                      paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kTranspDepthTexture))                   paramSemantic = <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa812025dab4ab6e8be46ea315d6a84714\">MUniformParameter::kSemanticTranspDepthTexture</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kOpaqueDepthTexture))                   paramSemantic = <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa539b874523c9051e0d0b5c56e0864bd8\">MUniformParameter::kSemanticOpaqueDepthTexture</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionPrimitiveBase))             paramSemantic = <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab8daccb56565fad7fc02480d7dab7318\">MUniformParameter::kSemanticHWSPrimitiveBase</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionPrimitiveCountPerInstance)) paramSemantic = <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa19ede7e9c96c745a5baf4d472bcbee30\">MUniformParameter::kSemanticHWSPrimitiveCountPerInstance</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionObjectLevel))               paramSemantic = <a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa9ae5129e8307f82f30a974a90df0b0dc\">MUniformParameter::kSemanticHWSObjectLevel</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionFaceLevel))                 paramSemantic = <a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efac45a48fb7f637905ebe3bb02d1a14c28\">MUniformParameter::kSemanticHWSFaceLevel</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionEdgeLevel))                 paramSemantic = <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efac2bae87c6cbd696a7dcee3b628854054\">MUniformParameter::kSemanticHWSEdgeLevel</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionVertexLevel))               paramSemantic = <a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa6725ffebe0b4e9ad08714dcc183d7fd9\">MUniformParameter::kSemanticHWSVertexLevel</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionOccluder))                  paramSemantic = <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa99dd4f73f4772598ca90cb38261ace67\">MUniformParameter::kSemanticHWSOccluder</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionFrontCCW))                  paramSemantic = <a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae6a84c9ffcab9c4e7b10ea4dfc11ce15\">MUniformParameter::kSemanticHWSFrontCCW</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionInstancedDraw))             paramSemantic = <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa84725c45db5f812a8903ef714e030f45\">MUniformParameter::kSemanticHWSInstancedDraw</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHwSelectionHighlighting))              paramSemantic = <a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa984abede831dd799e180a0295b18d768\">MUniformParameter::kSemanticHWSHighlighting</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            logUnrecognisedSemantic(mDesc.Semantic);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Next, try annotation semantic</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( paramSemantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LPCSTR sasSemantic;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( getAnnotation( dx11ShaderAnnotation::kSasBindAddress, sasSemantic) &amp;&amp; sasSemantic &amp;&amp; *sasSemantic)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> str( sasSemantic);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(      !_stricmp( sasSemantic, dx11ShaderAnnotationValue::kSas_Skeleton_MeshToJointToWorld_0_))   paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaebbf84be5dd7360e2bbf5eb369fc97c0\">MUniformParameter::kSemanticWorldMatrix</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( sasSemantic, dx11ShaderAnnotationValue::kSas_Camera_WorldToView))               paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa9286c5e650ac955bb9239a33fc8a6881\">MUniformParameter::kSemanticViewMatrix</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( sasSemantic, dx11ShaderAnnotationValue::kSas_Camera_Projection))                paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5ee9d38749ff3eecb39e8a5d7939bf12\">MUniformParameter::kSemanticProjectionMatrix</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( sasSemantic, dx11ShaderAnnotationValue::kSas_Time_Now))                         paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa78f71ae1aff5a5ac40249feae9951768\">MUniformParameter::kSemanticTime</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( str.rindexW( dx11ShaderAnnotationValue::k_Position) &gt;= 0)                                  paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( str.rindexW( dx11ShaderAnnotationValue::k_Direction) &gt;= 0 &amp;&amp;</div>\n\
<div class=\"line\">                     str.rindexW( dx11ShaderAnnotationValue::k_Direction) != str.rindexW( dx11ShaderAnnotationValue::k_Directional))    paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                logUnrecognisedSemantic(sasSemantic);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Next try control type</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( paramSemantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LPCSTR sasSemantic;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( (getAnnotation( dx11ShaderAnnotation::kSasUiControl, sasSemantic) || getAnnotation( dx11ShaderAnnotation::kUIWidget, sasSemantic)) &amp;&amp; *sasSemantic)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !_stricmp( sasSemantic, dx11ShaderAnnotationValue::kColorPicker))                           paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// As a last ditch effort, look for an obvious parameter name</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( paramSemantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a> &amp;&amp; !mDesc.Semantic &amp;&amp;</div>\n\
<div class=\"line\">        mDescType.Class == D3D_SVC_VECTOR &amp;&amp; (mDescType.Type == D3D_SVT_FLOAT || mDescType.Type == D3D_SVT_DOUBLE) &amp;&amp;</div>\n\
<div class=\"line\">        mDescType.Rows == 1 &amp;&amp; mDescType.Columns &gt;= 3 &amp;&amp; mDescType.Columns &lt;= 4 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name( mDesc.Name);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(      name.rindexW( dx11ShaderAnnotationValue::kPosition) &gt;= 0)                              paramSemantic = convertSpace( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( name.rindexW( dx11ShaderAnnotationValue::kDirection) &gt;= 0 &amp;&amp;</div>\n\
<div class=\"line\">                 name.rindexW( dx11ShaderAnnotationValue::kDirection) != name.rindexW( dx11ShaderAnnotationValue::kDirectional))    paramSemantic = convertSpace(  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad606c99fe89502591358e64f4f7a589b\">MUniformParameter::kSemanticWorldDir</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( name.rindexW( dx11ShaderAnnotationValue::kColor) &gt;= 0 ||</div>\n\
<div class=\"line\">                 name.rindexW( dx11ShaderAnnotationValue::kColour) &gt;= 0 ||</div>\n\
<div class=\"line\">                 name.rindexW( dx11ShaderAnnotationValue::kDiffuse) &gt;= 0 ||</div>\n\
<div class=\"line\">                 name.rindexW( dx11ShaderAnnotationValue::kSpecular) &gt;= 0 ||</div>\n\
<div class=\"line\">                 name.rindexW( dx11ShaderAnnotationValue::kAmbient) &gt;= 0)                               paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> paramSemantic;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Here we find light specific semantics on parameters. This will be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">    to properly transfer values from a Maya light to the effect. Parameters</span></div>\n\
<div class=\"line\"><span class=\"comment\">    that have semantics that are not light-like will get the light type</span></div>\n\
<div class=\"line\"><span class=\"comment\">    eNotALight and will not participate in light related code paths.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    We also try to detect the light type that best match this parameter based</span></div>\n\
<div class=\"line\"><span class=\"comment\">    on a substring match for point/spot/directional/ambient strings. We can also</span></div>\n\
<div class=\"line\"><span class=\"comment\">    deduce the light type from extremely specialized semantics like cone angle and</span></div>\n\
<div class=\"line\"><span class=\"comment\">    falloff for a spot light or LP0 for an area light.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    We finally try to group light parameters together into a single logical light</span></div>\n\
<div class=\"line\"><span class=\"comment\">    group using either an &quot;Object&quot; annotation or a substring of the parameter name.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    The light group name is one of:</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The string value of the &quot;Object&quot; annotation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The prefix part of a parameter name that contains either &quot;Light&quot;, &quot;light&quot;,</span></div>\n\
<div class=\"line\"><span class=\"comment\">           or a number:</span></div>\n\
<div class=\"line\"><span class=\"comment\">                DirectionalLightColor  -&gt;   DirectionalLight</span></div>\n\
<div class=\"line\"><span class=\"comment\">                scene_light_position   -&gt;   scene_light</span></div>\n\
<div class=\"line\"><span class=\"comment\">                Lamp0Color             -&gt;   Lamp0</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    - All light parameters that share a common light group name will be grouped together</span></div>\n\
<div class=\"line\"><span class=\"comment\">        into a single logical light</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - When a logical light is bound to a scene light, all parameter values will be</span></div>\n\
<div class=\"line\"><span class=\"comment\">        transferred in block from the scene light to the logical light</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - The Attribute Editor will show one extra control per logical light that will allow</span></div>\n\
<div class=\"line\"><span class=\"comment\">        to quickly specify how this logical light should be handled by Maya. Options are</span></div>\n\
<div class=\"line\"><span class=\"comment\">        to explicitely bind a scene light, allow automatic binding to any compatible scene</span></div>\n\
<div class=\"line\"><span class=\"comment\">        light, or ignore scene lights and use values stored in the effect parameters.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - The Attribute Editor will also group all light parameters in separate panels as if</span></div>\n\
<div class=\"line\"><span class=\"comment\">        they were grouped using the UIGroup annotation. See comments on UIGroup annotation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        for more details.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CUniformParameterBuilder::updateLightInfoFromSemantic()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//Check for light type from object type</span></div>\n\
<div class=\"line\">    LPCSTR objectType;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( getAnnotation( dx11ShaderAnnotation::kObject, objectType) &amp;&amp; *objectType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> objectAnnotation(objectType);</div>\n\
<div class=\"line\">        mLightIndex = mShader-&gt;getIndexForLightName(objectAnnotation, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        mUIGroupIndex = mShader-&gt;getIndexForUIGroupName(objectAnnotation, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(objectAnnotation.rindexW(dx11ShaderAnnotationValue::kLight) &gt;= 0 || objectAnnotation.rindexW(dx11ShaderAnnotationValue::kLamp) &gt;= 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mLightType = eUndefinedLight;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(objectAnnotation.rindexW(dx11ShaderAnnotationValue::kPoint) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mLightType = ePointLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(objectAnnotation.rindexW(dx11ShaderAnnotationValue::kSpot) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mLightType = eSpotLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(objectAnnotation.rindexW(dx11ShaderAnnotationValue::kDirectional) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mLightType = eDirectionalLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(objectAnnotation.rindexW(dx11ShaderAnnotationValue::kAmbient) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mLightType = eAmbientLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( mDesc.Semantic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name( mDesc.Name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightEnable))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightEnable;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightIntensity))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightIntensity;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightFalloff) ||</div>\n\
<div class=\"line\">                 !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kFalloff))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mLightType = eSpotLight;</div>\n\
<div class=\"line\">            mParamType = eLightFalloff;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightDiffuseColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightDiffuseColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightAmbientColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightAmbientColor;</div>\n\
<div class=\"line\">            mLightType = eAmbientLight;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightSpecularColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightSpecularColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMap))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightShadowMap;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMapBias))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightShadowMapBias;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightShadowOn;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMapMatrix) ||</div>\n\
<div class=\"line\">                 !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowMapXForm))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//View transformation matrix of the light</span></div>\n\
<div class=\"line\">            mParamType = eLightShadowViewProj;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kShadowColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightShadowColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kHotspot))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightHotspot;</div>\n\
<div class=\"line\">            mLightType = eSpotLight;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kLightType))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eLightType;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!_stricmp( mDesc.Semantic, dx11ShaderSemantic::kDecayRate))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mParamType = eDecayRate;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> isLight = (mLightType != eNotLight || findSubstring(name, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(dx11ShaderAnnotationValue::kLight)) &gt;= 0);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(isLight)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kPosition))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightPosition;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition0))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightAreaPosition0;</div>\n\
<div class=\"line\">                    mLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition1))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightAreaPosition1;</div>\n\
<div class=\"line\">                    mLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition2))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightAreaPosition2;</div>\n\
<div class=\"line\">                    mLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAreaPosition3))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightAreaPosition3;</div>\n\
<div class=\"line\">                    mLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kDirection))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightDirection;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kColor))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    mParamType = eLightColor;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kAmbient))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightAmbientColor;</div>\n\
<div class=\"line\">                    mLightType = eAmbientLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kDiffuse))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightDiffuseColor;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !_stricmp( mDesc.Semantic, dx11ShaderSemantic::kSpecular))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mParamType = eLightSpecularColor;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//Compute light index</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(mParamType != eUndefined &amp;&amp; mLightIndex ==  -1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//Check object semantic for index</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//Check name for index</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(mLightType == eNotLight)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mLightType = eUndefinedLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* objectName = name.asChar();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> truncationPos = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lightPos = findSubstring(name, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(dx11ShaderAnnotationValue::kLight));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lightPos &gt;= 0)</div>\n\
<div class=\"line\">                truncationPos = lightPos + 5;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(truncationPos &lt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// last effort, see if there is any digit in the parameter name:</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> digitPos = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( ; digitPos &lt; name.numChars(); ++digitPos)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( isdigit(objectName[digitPos]) )</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( digitPos &lt; name.numChars() )</div>\n\
<div class=\"line\">                    truncationPos = digitPos;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (truncationPos &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Need to also skip any digits found after the &quot;light&quot;</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> maxChars = int(name.numChars());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">while</span> (truncationPos &lt; maxChars &amp;&amp; isdigit(objectName[truncationPos]))</div>\n\
<div class=\"line\">                    truncationPos++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                mLightIndex = mShader-&gt;getIndexForLightName(name.substring(0,truncationPos-1), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                mUIGroupIndex = mShader-&gt;getIndexForUIGroupName(name.substring(0,truncationPos-1), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get semantic string back from enum:</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; CUniformParameterBuilder::getLightParameterSemantic(<span class=\"keywordtype\">int</span> lightParameterType) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lightParameterType &lt; 0 || lightParameterType &gt;= eLastParameterType)</div>\n\
<div class=\"line\">        lightParameterType = eUndefined;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> semanticNames;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!semanticNames.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) {</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kUndefined);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kPosition);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kDirection);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightSpecularColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightAmbientColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightDiffuseColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightRange);          <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kFalloff);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightAttenuation0);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightAttenuation1);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightAttenuation2);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightTheta);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightPhi);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kShadowMap);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kShadowMapBias);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kShadowColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kShadowMapMatrix);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kShadowFlag);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightIntensity);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kHotspot);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightEnable);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kLightType);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kDecayRate);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kAreaPosition0);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kAreaPosition1);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kAreaPosition2);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(dx11ShaderSemantic::kAreaPosition3);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> semanticNames[lightParameterType];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ID3DX11EffectVariable* CUniformParameterBuilder::findAnnotationByName(ID3DX11EffectVariable *effectVariable, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// The latest effect 11 library is very verbose when an annotation</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is not found by name. This version will stay quiet if the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// annotation is not found.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAnnotationIndex.empty())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        D3DX11_EFFECT_VARIABLE_DESC varDesc;</div>\n\
<div class=\"line\">        effectVariable-&gt;GetDesc(&amp;varDesc);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (uint32_t idx = 0; idx &lt; varDesc.Annotations; ++idx)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ID3DX11EffectVariable* var = effectVariable-&gt;GetAnnotationByIndex(idx);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (var)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                D3DX11_EFFECT_VARIABLE_DESC varDesc;</div>\n\
<div class=\"line\">                var-&gt;GetDesc(&amp;varDesc);</div>\n\
<div class=\"line\">                mAnnotationIndex.<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a3db31367f989449bb9b121cd734dc0df\">insert</a>(TAnnotationIndex::value_type(std::string(varDesc.Name), idx));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mAnnotationIndex.insert(TAnnotationIndex::value_type(std::string(<span class=\"stringliteral\">&quot;Done!&quot;</span>), 0));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TAnnotationIndex::const_iterator index = mAnnotationIndex.find(std::string(name));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (index != mAnnotationIndex.end())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> effectVariable-&gt;GetAnnotationByIndex((*index).second);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CUniformParameterBuilder::getAnnotation(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name,LPCSTR&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ID3DX11EffectVariable* annotationVariable= findAnnotationByName(mEffectVariable, name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (annotationVariable) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (annotationVariable-&gt;AsString()-&gt;GetString(&amp;value)==S_OK) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CUniformParameterBuilder::getAnnotation(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name,<span class=\"keywordtype\">float</span>&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ID3DX11EffectVariable* annotationVariable= findAnnotationByName(mEffectVariable, name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (annotationVariable) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (annotationVariable-&gt;AsScalar()-&gt;GetFloat(&amp;value)==S_OK) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CUniformParameterBuilder::getAnnotation(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name,<span class=\"keywordtype\">int</span>&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ID3DX11EffectVariable* annotationVariable= findAnnotationByName(mEffectVariable, name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (annotationVariable) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (annotationVariable-&gt;AsScalar()-&gt;GetInt(&amp;value)==S_OK) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CUniformParameterBuilder::getBOOLAnnotation(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name,BOOL&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ID3DX11EffectVariable* annotationVariable= findAnnotationByName(mEffectVariable, name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (annotationVariable) {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(USE_BOOL)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (annotationVariable-&gt;AsScalar()-&gt;GetBool(&amp;value)==S_OK) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (annotationVariable-&gt;AsScalar()-&gt;GetBool((<span class=\"keywordtype\">bool</span>*)&amp;value)==S_OK) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CUniformParameterBuilder::logUnsupportedTypeWarning(<span class=\"keyword\">const</span> <a name=\"_a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource_id.html\">MStringResourceId</a>&amp; typeId)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> typeStr = dx11ShaderStrings::getString( typeId );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">    args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(typeStr);</div>\n\
<div class=\"line\">    args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(mDesc.Name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mWarnings += dx11ShaderStrings::getString( dx11ShaderStrings::kUnsupportedType, args );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CUniformParameterBuilder::logUnrecognisedSemantic(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* pSemantic)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> args;</div>\n\
<div class=\"line\">    args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(pSemantic);</div>\n\
<div class=\"line\">    args.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(mDesc.Name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mWarnings += dx11ShaderStrings::getString( dx11ShaderStrings::kUnknowSemantic, args );</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";