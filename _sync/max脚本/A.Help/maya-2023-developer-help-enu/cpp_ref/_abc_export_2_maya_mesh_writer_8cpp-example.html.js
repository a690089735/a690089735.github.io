var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcExport/MayaMeshWriter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_export_2_maya_mesh_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcExport/MayaMeshWriter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcExport/MayaMeshWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2014,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaMeshWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSingleIndexedComponent.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> getColorSet(<a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; iMesh, <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> * iColorSet, <span class=\"keywordtype\">bool</span> isRGBA,</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; &amp; oColors,</div>\n\
<div class=\"line\">    std::vector&lt; Alembic::Util::uint32_t &gt; &amp; oColorIndices)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html\">MColorArray</a> colorArray;</div>\n\
<div class=\"line\">    iMesh.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a01a4bbfbbe031efd14ee58771d38d236\">getColors</a>(colorArray, iColorSet);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> addDefaultColor = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numFaces = iMesh.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexList;</div>\n\
<div class=\"line\">        iMesh.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a469fc8126bc4424cd00853821d78a55a\">getPolygonVertices</a>(faceIndex, vertexList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numVertices = iMesh.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a4ca016a3feb28fee0b9f373f86aebced\">polygonVertexCount</a>(faceIndex);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> v = numVertices-1; v &gt;=0; v-- )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> colorIndex = 0;</div>\n\
<div class=\"line\">            iMesh.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#adcc83c6ccc1cbd3cdd5ed6668a149d1f\">getColorIndex</a>(faceIndex, v, colorIndex, iColorSet);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (colorIndex == -1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (addDefaultColor)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    addDefaultColor = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    colorArray.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a9740f98aca5891832ee7b8bfc5839106\">append</a>(<a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(1.0, 1.0, 1.0, 1.0));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                colorIndex = colorArray.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() - 1;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            oColorIndices.push_back(colorIndex);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> colorLen = colorArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; colorLen; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> color = colorArray[i];</div>\n\
<div class=\"line\">        oColors.push_back(color.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a>);</div>\n\
<div class=\"line\">        oColors.push_back(color.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a>);</div>\n\
<div class=\"line\">        oColors.push_back(color.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isRGBA)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oColors.push_back(color.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4aec1a5be9d9a4a394a2e49e9744286e\">a</a>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> getUVSet(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; iMesh, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iUVSetName,</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; &amp; oUVs, std::vector&lt;Alembic::Util::uint32_t&gt; &amp; oIndices)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> uArray, vArray;</div>\n\
<div class=\"line\">    iMesh.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#aa41349e47d082451f1744cff85412159\">getUVs</a>(uArray, vArray, &amp;iUVSetName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( uArray.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != vArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;UV Set &quot;</span> + iUVSetName +</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot; uArray and vArray not the same length&quot;</span>;</div>\n\
<div class=\"line\">        <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> arLen = uArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    oUVs.clear();</div>\n\
<div class=\"line\">    oUVs.reserve(arLen * 2);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; arLen; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        oUVs.push_back(uArray[i]);</div>\n\
<div class=\"line\">        oUVs.push_back(vArray[i]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    oIndices.clear();</div>\n\
<div class=\"line\">    oIndices.reserve(iMesh.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> faceCount = iMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> uvId = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; faceCount; ++j)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> vc = iMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a4ca016a3feb28fee0b9f373f86aebced\">polygonVertexCount</a>(j);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = vc - 1; i &gt;= 0; i--)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            iMesh.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a1d2b8c1536e8f4ec330ff9d83661f9bd\">getPolygonUVid</a>(j, i, uvId, &amp;iUVSetName);</div>\n\
<div class=\"line\">            oIndices.push_back(uvId);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// --------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// getOutConnectedSG( const MObject &amp;shape )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Return the output connected shading groups from a shape object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a></div>\n\
<div class=\"line\">getOutConnectedSG( <span class=\"keyword\">const</span> <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;shapeDPath )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Array of connected Shaging Engines</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> connSG;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Iterator through the dependency graph to find if there are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// shading engines connected</span></div>\n\
<div class=\"line\">    <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj(shapeDPath.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>()); <span class=\"comment\">// non const MObject</span></div>\n\
<div class=\"line\">    <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html\">MItDependencyGraph</a> itDG( obj, <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1fe410ba33fcc24e08a319ee3db38896\">MFn::kShadingEngine</a>,</div>\n\
<div class=\"line\">                             <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#a224b9163917ac32fc95a60d8c1eec3aaa1eaa6232753ec5bb4249cf82bc612992\">MItDependencyGraph::kDownstream</a>,</div>\n\
<div class=\"line\">                             <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#a5d3b8e489d2892096e6d65b9d9b72b65a8ad4d0a286855b50181b12df48942291\">MItDependencyGraph::kBreadthFirst</a>,</div>\n\
<div class=\"line\">                             <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#a221b779e6bb7b8d40677d7642bfefac5a328f00ae2a12674d627e8080cc5f80a4\">MItDependencyGraph::kNodeLevel</a>, &amp;status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status == MS::kFailure )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> connSG;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// we want to prune the iteration if the node is not a shading engine</span></div>\n\
<div class=\"line\">    itDG.enablePruningOnFilter();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// iterate through the output connected shading engines</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( ; itDG.isDone()!= <span class=\"keyword\">true</span>; itDG.next() )</div>\n\
<div class=\"line\">        connSG.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a3694392863ba632bca5d76cbbf190ef5\">append</a>( itDG.currentItem() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> connSG;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// -----------------------------------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// getSetComponents( const MDagPath &amp;dagPath, const MObject &amp;SG, GetMembersMap&amp; gmMap, MObject &amp;compObj )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Return the members of a shading engine for a specific dagpath.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// GetMembersMap is a caching mechanism.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// If it&#39;s face mapping, return the indices, otherwise it&#39;s the whole object, and so we</span></div>\n\
<div class=\"line\"><span class=\"comment\">// return kFailure.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">getSetComponents( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;dagPath, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;SG, GetMembersMap&amp; gmMap, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;compObj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> instObjGroupsAttrName( <span class=\"stringliteral\">&quot;instObjGroups&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check if SG is really a shading engine</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( SG.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1fe410ba33fcc24e08a319ee3db38896\">MFn::kShadingEngine</a>) != true )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDepNode( SG );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> message;</div>\n\
<div class=\"line\">        message.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(<span class=\"stringliteral\">&quot;Node ^1s is not a valid shading engine...&quot;</span>, fnDepNode.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>() );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(message);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the instObjGroups iog plug</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNode(dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>());</div>\n\
<div class=\"line\">    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> iogPlug( depNode.findPlug(instObjGroupsAttrName, <span class=\"keyword\">false</span>, &amp;status) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status == MS::kFailure )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if there are no elements,  this shading group is not connected as a face set</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( iogPlug.numElements()&lt;=0 )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// the first element should always be connected as a source</span></div>\n\
<div class=\"line\">    <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> iogConnections;</div>\n\
<div class=\"line\">    iogPlug.elementByLogicalIndex(0, &amp;status).connectedTo(iogConnections, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status == MS::kFailure )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Function set for the shading engine</span></div>\n\
<div class=\"line\">    <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> fnSet( SG );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve members</span></div>\n\
<div class=\"line\">    <a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selList;</div>\n\
<div class=\"line\">    GetMembersMap::iterator it = gmMap.find(SG);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(it != gmMap.end())</div>\n\
<div class=\"line\">        selList = it-&gt;second;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fnSet.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#a4816acf44a8c21134cbe3d92a3f60925\">getMembers</a>(selList, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        gmMap[SG] = selList;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Iteration through the list</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>            curDagPath;</div>\n\
<div class=\"line\">    <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a>    itSelList( selList );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( ; itSelList.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#ac0f0d6fc806b11d246e05cb94e886b38\">isDone</a>()!=<span class=\"keyword\">true</span>; itSelList.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#a73616f002814b8abe6d921db72d7a496\">next</a>() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Test if it&#39;s a face mapping</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( itSelList.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#a92d079398d0738af52f0ef1cead18c0e\">hasComponents</a>() == true )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            itSelList.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html#acea3f9b4576b874442d489458ac310c0\">getDagPath</a>( curDagPath, compObj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Test if component object is valid and if it&#39;s the right object</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( (compObj.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()==<span class=\"keyword\">false</span>) &amp;&amp; (curDagPath==dagPath) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// SG is a shading engine but has no components connected to the dagPath.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This means we have a whole object mapping!</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::getUVs(std::vector&lt;float&gt; &amp; uvs,</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::uint32_t&gt; &amp; indices,</div>\n\
<div class=\"line\">    std::string &amp; name)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uvSetName = lMesh.currentUVSetName(&amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uvSetName.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> uArray, vArray;</div>\n\
<div class=\"line\">        status = lMesh.getUVs(uArray, vArray, &amp;uvSetName);</div>\n\
<div class=\"line\">        <span class=\"comment\">// convert the raw uv list into vector uvsvec.clear();</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( uArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != vArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;uv Set&quot;</span> + uvSetName +</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;uArray and vArray not the same length&quot;</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uvSetName != <span class=\"stringliteral\">&quot;map1&quot;</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            name = uvSetName.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = uArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        uvs.clear();</div>\n\
<div class=\"line\">        uvs.reserve(len * 2);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; len; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uvs.push_back(uArray[i]);</div>\n\
<div class=\"line\">            uvs.push_back(vArray[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        indices.clear();</div>\n\
<div class=\"line\">        indices.reserve(lMesh.numFaceVertices());</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> faceCount = lMesh.numPolygons();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> uvId = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> f = 0; f &lt; faceCount; f++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> len = lMesh.polygonVertexCount(f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = len-1; i &gt;= 0; i--)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                lMesh.getPolygonUVid(f, i, uvId, &amp;uvSetName);</div>\n\
<div class=\"line\">                indices.push_back(uvId);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaMeshWriter::MayaMeshWriter(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; iDag,</div>\n\
<div class=\"line\">    Alembic::Abc::OObject &amp; iParent, Alembic::Util::uint32_t iTimeIndex,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> JobArgs &amp; iArgs, GetMembersMap&amp; gmMap)</div>\n\
<div class=\"line\">  : mNoNormals(iArgs.noNormals),</div>\n\
<div class=\"line\">    mWriteGeometry(iArgs.writeGeometry),</div>\n\
<div class=\"line\">    mWriteUVs(iArgs.writeUVs),</div>\n\
<div class=\"line\">    mWriteColorSets(iArgs.writeColorSets),</div>\n\
<div class=\"line\">    mWriteUVSets(iArgs.writeUVSets),</div>\n\
<div class=\"line\">    mIsGeometryAnimated(false),</div>\n\
<div class=\"line\">    mDagPath(iDag)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// intermediate objects aren&#39;t translated</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> surface = iDag.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iTimeIndex != 0 &amp;&amp; util::isAnimated(surface))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mIsGeometryAnimated = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        iTimeIndex = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;float&gt; uvs;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::uint32_t&gt; indices;</div>\n\
<div class=\"line\">    std::string uvSetName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = lMesh.name();</div>\n\
<div class=\"line\">    name = util::stripNamespaces(name, iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check to see if this poly has been tagged as a SubD</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = lMesh.findPlug(<span class=\"stringliteral\">&quot;SubDivisionMesh&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if there is flag &quot;autoSubd&quot;, and NO &quot;SubDivisionMesh&quot; was defined,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// let&#39;s check whether the mesh has crease edge, crease vertex or holes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// then the mesh will be treated as SubD</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasToWriteSubd = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( plug.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() &amp;&amp; iArgs.autoSubd )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> edgeIds, vertexIds;</div>\n\
<div class=\"line\">        <a name=\"_a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> edgeCreaseData, vertexCreaseData;</div>\n\
<div class=\"line\">        lMesh.getCreaseEdges(edgeIds, edgeCreaseData);</div>\n\
<div class=\"line\">        lMesh.getCreaseVertices(vertexIds, vertexCreaseData);</div>\n\
<div class=\"line\">        hasToWriteSubd = ( (edgeIds.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) || (vertexIds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if MAYA_API_VERSION &gt;= 201100</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!hasToWriteSubd)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> invisibleFaceIds = lMesh.getInvisibleFaces();</div>\n\
<div class=\"line\">            hasToWriteSubd = ( hasToWriteSubd || (invisibleFaceIds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::SparseFlag sf = Alembic::Abc::kFull;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !mWriteGeometry )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        sf = Alembic::Abc::kSparse;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() &amp;&amp; plug.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>()) || hasToWriteSubd )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::OSubD obj(iParent, name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), sf, iTimeIndex);</div>\n\
<div class=\"line\">        mSubDSchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OV2fGeomParam::Sample uvSamp;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mWriteUVs || mWriteUVSets)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            getUVs(uvs, indices, uvSetName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!uvs.empty())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!uvSetName.empty())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mSubDSchema.setUVSourceName(uvSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                uvSamp.setScope( Alembic::AbcGeom::kFacevaryingScope );</div>\n\
<div class=\"line\">                uvSamp.setVals(Alembic::AbcGeom::V2fArraySample(</div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const</span> Imath::V2f *) &amp;uvs.front(), uvs.size() / 2));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!indices.empty())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uvSamp.setIndices(Alembic::Abc::UInt32ArraySample(</div>\n\
<div class=\"line\">                        &amp;indices.front(), indices.size()));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(lMesh, iArgs))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cp = mSubDSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            up = mSubDSchema.getUserProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, lMesh,</div>\n\
<div class=\"line\">            iTimeIndex, iArgs, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mIsGeometryAnimated || iArgs.setFirstAnimShape)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            writeSubD(uvSamp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::OPolyMesh obj(iParent, name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), sf, iTimeIndex);</div>\n\
<div class=\"line\">        mPolySchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OV2fGeomParam::Sample uvSamp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mWriteUVs || mWriteUVSets)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            getUVs(uvs, indices, uvSetName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!uvs.empty())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!uvSetName.empty())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mPolySchema.setUVSourceName(uvSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                uvSamp.setScope( Alembic::AbcGeom::kFacevaryingScope );</div>\n\
<div class=\"line\">                uvSamp.setVals(Alembic::AbcGeom::V2fArraySample(</div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const</span> Imath::V2f *) &amp;uvs.front(), uvs.size() / 2));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!indices.empty())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uvSamp.setIndices(Alembic::Abc::UInt32ArraySample(</div>\n\
<div class=\"line\">                        &amp;indices.front(), indices.size()));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(lMesh, iArgs))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cp = mPolySchema.getArbGeomParams();</div>\n\
<div class=\"line\">            up = mPolySchema.getUserProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// set the rest of the props and write to the writer node</span></div>\n\
<div class=\"line\">        mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, lMesh,</div>\n\
<div class=\"line\">            iTimeIndex, iArgs, <span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mIsGeometryAnimated || iArgs.setFirstAnimShape)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            writePoly(uvSamp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mWriteColorSets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> colorSetNames;</div>\n\
<div class=\"line\">        lMesh.getColorSetNames(colorSetNames);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (colorSetNames.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create the color sets compound prop</span></div>\n\
<div class=\"line\">            Alembic::Abc::OCompoundProperty arbParams;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mPolySchema.valid())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                arbParams =  mPolySchema.getArbGeomParams();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                arbParams =  mSubDSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            std::string currentColorSet = lMesh.currentColorSetName().asChar();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i &lt; colorSetNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create an array property for each color set</span></div>\n\
<div class=\"line\">                std::string colorSetPropName = colorSetNames[i].asChar();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Alembic::AbcCoreAbstract::MetaData md;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (currentColorSet == colorSetPropName)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    md.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad28f02905011d9f0693e8c8dc2777ddd\">set</a>(<span class=\"stringliteral\">&quot;mayaColorSet&quot;</span>, <span class=\"stringliteral\">&quot;1&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    md.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad8887c924f0cc954364fd532c7867d86\">set</a>(<span class=\"stringliteral\">&quot;mayaColorSet&quot;</span>, <span class=\"stringliteral\">&quot;0&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (lMesh.getColorRepresentation(colorSetNames[i]) ==</div>\n\
<div class=\"line\">                    <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a80dc8673cdbdbb813c71dfa32e0643f2a8cadb7b1406f2e3233ddf5276c8c07ed\">MFnMesh::kRGB</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::OC3fGeomParam colorProp(arbParams,</div>\n\
<div class=\"line\">                        colorSetPropName, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">                        Alembic::AbcGeom::kFacevaryingScope, 1, iTimeIndex, md);</div>\n\
<div class=\"line\">                    mRGBParams.push_back(colorProp);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::OC4fGeomParam colorProp(arbParams,</div>\n\
<div class=\"line\">                        colorSetPropName, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">                        Alembic::AbcGeom::kFacevaryingScope, 1, iTimeIndex, md);</div>\n\
<div class=\"line\">                    mRGBAParams.push_back(colorProp);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!mIsGeometryAnimated || iArgs.setFirstAnimShape)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                writeColor();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mWriteUVSets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> uvSetNames;</div>\n\
<div class=\"line\">        lMesh.getUVSetNames(uvSetNames);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> uvSetNamesLen = uvSetNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uvSetNamesLen &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Create the uv sets compound prop</span></div>\n\
<div class=\"line\">            Alembic::Abc::OCompoundProperty arbParams;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mPolySchema.valid())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                arbParams =  mPolySchema.getArbGeomParams();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                arbParams =  mSubDSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> currentUV = lMesh.currentUVSetName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; uvSetNamesLen; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create an array property for each uv set</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uvSetPropName = uvSetNames[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// the current UV set gets mapped to the primary UVs</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (currentUV == uvSetPropName)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uvSetPropName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 &amp;&amp;</div>\n\
<div class=\"line\">                    lMesh.numUVs(uvSetPropName) &gt; 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mUVparams.push_back(Alembic::AbcGeom::OV2fGeomParam(</div>\n\
<div class=\"line\">                        arbParams, uvSetPropName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">                        Alembic::AbcGeom::kFacevaryingScope, 1, iTimeIndex));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!mIsGeometryAnimated || iArgs.setFirstAnimShape)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                writeUVSets();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write out facesets</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!iArgs.writeFaceSets)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the connected shading engines</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> connSGObjs (getOutConnectedSG(mDagPath));</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sgCount = connSGObjs.length();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sgCount; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> connSGObj, compObj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        connSGObj = connSGObjs[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDepNode(connSGObj);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> connSgObjName = fnDepNode.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// retrive the component MObject</span></div>\n\
<div class=\"line\">        status = getSetComponents(mDagPath, connSGObj, gmMap, compObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// for some reason the shading group doesn&#39;t represent a face set</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// retrieve the face indices</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> indices;</div>\n\
<div class=\"line\">        <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html\">MFnSingleIndexedComponent</a> compFn;</div>\n\
<div class=\"line\">        compFn.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(compObj);</div>\n\
<div class=\"line\">        compFn.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_single_indexed_component.html#af46c6b65dba2489debae349dab66e127\">getElements</a>(indices);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numData = indices.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// encountered the whole object mapping. skip it.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numData == 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt;Alembic::Util::int32_t&gt; faceIndices(numData);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; numData; ++j)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            faceIndices[j] = indices[j];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        connSgObjName = util::stripNamespaces(connSgObjName,</div>\n\
<div class=\"line\">                                              iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OFaceSet faceSet;</div>\n\
<div class=\"line\">        std::string faceSetName(connSgObjName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> abcFacesetNamePlug = fnDepNode.findPlug(<span class=\"stringliteral\">&quot;AbcFacesetName&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!abcFacesetNamePlug.isNull())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            faceSetName = abcFacesetNamePlug.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a445750444a9e8c22b8b2366f19d7264a\">asString</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mPolySchema.valid())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mPolySchema.hasFaceSet(faceSetName))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                faceSet = mPolySchema.getFaceSet(faceSetName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                faceSet = mPolySchema.createFaceSet(faceSetName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mSubDSchema.hasFaceSet(faceSetName))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                faceSet = mSubDSchema.getFaceSet(faceSetName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                faceSet = mSubDSchema.createFaceSet(faceSetName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        Alembic::AbcGeom::OFaceSetSchema::Sample samp;</div>\n\
<div class=\"line\">        samp.setFaces(Alembic::Abc::Int32ArraySample(faceIndices));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OFaceSetSchema faceSetSchema = faceSet.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        faceSetSchema.set(samp);</div>\n\
<div class=\"line\">        faceSetSchema.setFaceExclusivity(Alembic::AbcGeom::kFaceSetExclusive);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> iNode(connSGObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(iNode, iArgs))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cp = faceSetSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            up = faceSetSchema.getUserProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// last argument false so we set the animated attrs at least once</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// because we don&#39;t appear to support animated facesets yet</span></div>\n\
<div class=\"line\">        AttributesWriter attrWriter(cp, up, faceSet, iNode, iTimeIndex,</div>\n\
<div class=\"line\">                                    iArgs, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MayaMeshWriter::isSubD()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mSubDSchema.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> MayaMeshWriter::getNumCVs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> lMesh.numVertices();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> MayaMeshWriter::getNumFaces()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> lMesh.numPolygons();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::getPolyNormals(std::vector&lt;float&gt; &amp; oNormals)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// no normals bail early</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mNoNormals)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = lMesh.findPlug(<span class=\"stringliteral\">&quot;noNormals&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status == MS::kSuccess &amp;&amp; plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>() == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// we need to check the locked state of the normals</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( status != MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> userSetNormals = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// go through all per face-vertex normals and verify if any of them</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// has been tweaked by users</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numFaces = lMesh.numPolygons();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> normals;</div>\n\
<div class=\"line\">            lMesh.getFaceNormalIds(faceIndex, normals);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numNormals = normals.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> n = 0; n &lt; numNormals; n++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (lMesh.isNormalLocked(normals[n]))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    userSetNormals = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we looped over all the normals and they were all calculated by Maya</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so we just need to check to see if any of the edges are hard</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// before we decide not to write the normals.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!userSetNormals)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> hasHardEdges   = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// go through all edges and verify if any of them is hard edge</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numEdges = lMesh.numEdges();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> edgeIndex = 0; edgeIndex &lt; numEdges; edgeIndex++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!lMesh.isEdgeSmooth(edgeIndex))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    hasHardEdges = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// all the edges were smooth, we don&#39;t need to write the normals</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!hasHardEdges)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> flipNormals = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    plug = lMesh.findPlug(<span class=\"stringliteral\">&quot;flipNormals&quot;</span>, <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( status == MS::kSuccess )</div>\n\
<div class=\"line\">        flipNormals = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the per vertex per face normals (aka vertex)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numFaces = lMesh.numPolygons();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexList;</div>\n\
<div class=\"line\">        lMesh.getPolygonVertices(faceIndex, vertexList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// re-pack the order of normals in this vector before writing into prop</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so that Renderman can also use it</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numVertices = vertexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> v = numVertices-1; v &gt;=0; v-- )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexIndex = vertexList[v];</div>\n\
<div class=\"line\">            <a name=\"_a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> normal;</div>\n\
<div class=\"line\">            lMesh.getFaceVertexNormal(faceIndex, vertexIndex, normal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (flipNormals)</div>\n\
<div class=\"line\">                normal = -normal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            oNormals.push_back(static_cast&lt;float&gt;(normal[0]));</div>\n\
<div class=\"line\">            oNormals.push_back(static_cast&lt;float&gt;(normal[1]));</div>\n\
<div class=\"line\">            oNormals.push_back(static_cast&lt;float&gt;(normal[2]));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::writeUVSets()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh(mDagPath, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter::writeUV&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//Write uvs</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> UVParamsVec::const_iterator uvItEnd = mUVparams.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (UVParamsVec::iterator uvIt = mUVparams.begin();</div>\n\
<div class=\"line\">        uvIt != uvItEnd; ++uvIt)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::vector&lt;float&gt; uvs;</div>\n\
<div class=\"line\">        std::vector&lt;Alembic::Util::uint32_t&gt; indices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uvSetName(uvIt-&gt;getName().c_str());</div>\n\
<div class=\"line\">        getUVSet(lMesh, uvSetName, uvs, indices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//cast the vector to the sample type</span></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OV2fGeomParam::Sample sample(</div>\n\
<div class=\"line\">            Alembic::Abc::V2fArraySample(</div>\n\
<div class=\"line\">                (<span class=\"keyword\">const</span> Imath::V2f *) &amp;uvs.front(), uvs.size() / 2),</div>\n\
<div class=\"line\">            Alembic::Abc::UInt32ArraySample(indices),</div>\n\
<div class=\"line\">            Alembic::AbcGeom::kFacevaryingScope);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        uvIt-&gt;set(sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::writeColor()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter::writeColor&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//Write colors</span></div>\n\
<div class=\"line\">    std::vector&lt;Alembic::AbcGeom::OC4fGeomParam&gt;::iterator rgbaIt;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::AbcGeom::OC4fGeomParam&gt;::iterator rgbaItEnd;</div>\n\
<div class=\"line\">    rgbaIt = mRGBAParams.begin();</div>\n\
<div class=\"line\">    rgbaItEnd = mRGBAParams.end();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; rgbaIt != rgbaItEnd; ++rgbaIt)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::vector&lt;float&gt; colors;</div>\n\
<div class=\"line\">        std::vector&lt; Alembic::Util::uint32_t &gt; colorIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorSetName(rgbaIt-&gt;getName().c_str());</div>\n\
<div class=\"line\">        getColorSet(lMesh, &amp;colorSetName, <span class=\"keyword\">true</span>, colors, colorIndices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//cast the vector to the sample type</span></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OC4fGeomParam::Sample samp(</div>\n\
<div class=\"line\">            Alembic::Abc::C4fArraySample(</div>\n\
<div class=\"line\">                (<span class=\"keyword\">const</span> Imath::C4f *) &amp;colors.front(), colors.size()/4),</div>\n\
<div class=\"line\">            Alembic::Abc::UInt32ArraySample(colorIndices),</div>\n\
<div class=\"line\">            Alembic::AbcGeom::kFacevaryingScope );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        rgbaIt-&gt;set(samp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;Alembic::AbcGeom::OC3fGeomParam&gt;::iterator rgbIt;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::AbcGeom::OC3fGeomParam&gt;::iterator rgbItEnd;</div>\n\
<div class=\"line\">    rgbIt = mRGBParams.begin();</div>\n\
<div class=\"line\">    rgbItEnd = mRGBParams.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; rgbIt != rgbItEnd; ++rgbIt)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt;float&gt; colors;</div>\n\
<div class=\"line\">        std::vector&lt; Alembic::Util::uint32_t &gt; colorIndices;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorSetName(rgbIt-&gt;getName().c_str());</div>\n\
<div class=\"line\">        getColorSet(lMesh, &amp;colorSetName, <span class=\"keyword\">false</span>, colors, colorIndices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//cast the vector to the sample type</span></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OC3fGeomParam::Sample samp(</div>\n\
<div class=\"line\">            Alembic::Abc::C3fArraySample(</div>\n\
<div class=\"line\">                (<span class=\"keyword\">const</span> Imath::C3f *) &amp;colors.front(), colors.size()/3),</div>\n\
<div class=\"line\">            Alembic::Abc::UInt32ArraySample(colorIndices),</div>\n\
<div class=\"line\">            Alembic::AbcGeom::kFacevaryingScope);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        rgbIt-&gt;set(samp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::write()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OV2fGeomParam::Sample uvSamp;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; uvs;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::uint32_t&gt; indices;</div>\n\
<div class=\"line\">    std::string uvSetName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mWriteUVs || mWriteUVSets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        getUVs(uvs, indices, uvSetName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!uvs.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!uvSetName.empty())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (mPolySchema.valid())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mPolySchema.setUVSourceName(uvSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (mSubDSchema.valid())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mSubDSchema.setUVSourceName(uvSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            uvSamp.setScope( Alembic::AbcGeom::kFacevaryingScope );</div>\n\
<div class=\"line\">            uvSamp.setVals(Alembic::AbcGeom::V2fArraySample(</div>\n\
<div class=\"line\">                (<span class=\"keyword\">const</span> Imath::V2f *) &amp;uvs.front(), uvs.size() / 2));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!indices.empty())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                uvSamp.setIndices(Alembic::Abc::UInt32ArraySample(</div>\n\
<div class=\"line\">                    &amp;indices.front(), indices.size()));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;float&gt; points;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; facePoints;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; faceList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mPolySchema.valid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        writePoly(uvSamp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (mSubDSchema.valid())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        writeSubD(uvSamp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MayaMeshWriter::isAnimated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mIsGeometryAnimated;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::writePoly(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Alembic::AbcGeom::OV2fGeomParam::Sample &amp; iUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;float&gt; points;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; facePoints;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; pointCounts;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( mWriteGeometry )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">       fillTopology(points, facePoints, pointCounts);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::ON3fGeomParam::Sample normalsSamp;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; normals;</div>\n\
<div class=\"line\">    getPolyNormals(normals);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!normals.empty())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        normalsSamp.setScope( Alembic::AbcGeom::kFacevaryingScope );</div>\n\
<div class=\"line\">        normalsSamp.setVals(Alembic::AbcGeom::N3fArraySample(</div>\n\
<div class=\"line\">            (<span class=\"keyword\">const</span> Imath::V3f *) &amp;normals.front(), normals.size() / 3));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample samp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( mWriteGeometry )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        samp.setPositions(Alembic::Abc::V3fArraySample(</div>\n\
<div class=\"line\">            (<span class=\"keyword\">const</span> Imath::V3f *)&amp;points.front(), points.size() / 3) );</div>\n\
<div class=\"line\">        samp.setFaceIndices(Alembic::Abc::Int32ArraySample(facePoints));</div>\n\
<div class=\"line\">        samp.setFaceCounts(Alembic::Abc::Int32ArraySample(pointCounts));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    samp.setUVs( iUVs );</div>\n\
<div class=\"line\">    samp.setNormals( normalsSamp );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mPolySchema.set(samp);</div>\n\
<div class=\"line\">    writeColor();</div>\n\
<div class=\"line\">    writeUVSets();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::writeSubD(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Alembic::AbcGeom::OV2fGeomParam::Sample &amp; iUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;float&gt; points;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; facePoints;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; pointCounts;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( mWriteGeometry )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fillTopology(points, facePoints, pointCounts);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OSubDSchema::Sample samp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !mWriteGeometry )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        samp.setUVs( iUVs );</div>\n\
<div class=\"line\">        mSubDSchema.set(samp);</div>\n\
<div class=\"line\">        writeColor();</div>\n\
<div class=\"line\">        writeUVSets();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    samp.setPositions(Alembic::AbcGeom::V3fArraySample(</div>\n\
<div class=\"line\">        (<span class=\"keyword\">const</span> Imath::V3f *)&amp;points.front(), points.size() / 3));</div>\n\
<div class=\"line\">    samp.setFaceIndices(Alembic::Abc::Int32ArraySample(facePoints));</div>\n\
<div class=\"line\">    samp.setFaceCounts(Alembic::Abc::Int32ArraySample(pointCounts));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = lMesh.findPlug(<span class=\"stringliteral\">&quot;faceVaryingInterpolateBoundary&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        samp.setFaceVaryingInterpolateBoundary(plug.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    plug = lMesh.findPlug(<span class=\"stringliteral\">&quot;interpolateBoundary&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        samp.setInterpolateBoundary(plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    plug = lMesh.findPlug(<span class=\"stringliteral\">&quot;faceVaryingPropagateCorners&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        samp.setFaceVaryingPropagateCorners(plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad99f1dea3721139cdcb457b2a2ba32e1\">asInt</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector &lt;Alembic::Util::int32_t&gt; creaseIndices;</div>\n\
<div class=\"line\">    std::vector &lt;Alembic::Util::int32_t&gt; creaseLengths;</div>\n\
<div class=\"line\">    std::vector &lt;float&gt; creaseSharpness;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector &lt;Alembic::Util::int32_t&gt; cornerIndices;</div>\n\
<div class=\"line\">    std::vector &lt;float&gt; cornerSharpness;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> edgeIds;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> creaseData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lMesh.getCreaseEdges(edgeIds, creaseData) == MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCreases = creaseData.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        creaseIndices.resize(numCreases * 2);</div>\n\
<div class=\"line\">        creaseLengths.resize(numCreases, 2);</div>\n\
<div class=\"line\">        creaseSharpness.resize(numCreases);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numCreases; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> verts[2];</div>\n\
<div class=\"line\">            lMesh.getEdgeVertices(edgeIds[i], verts);</div>\n\
<div class=\"line\">            creaseIndices[2 * i] = verts[0];</div>\n\
<div class=\"line\">            creaseIndices[2 * i + 1] = verts[1];</div>\n\
<div class=\"line\">            creaseSharpness[i] = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">float</span><span class=\"keyword\">&gt;</span>(creaseData[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        samp.setCreaseIndices(Alembic::Abc::Int32ArraySample(creaseIndices));</div>\n\
<div class=\"line\">        samp.setCreaseLengths(Alembic::Abc::Int32ArraySample(creaseLengths));</div>\n\
<div class=\"line\">        samp.setCreaseSharpnesses(</div>\n\
<div class=\"line\">            Alembic::Abc::FloatArraySample(creaseSharpness));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> cornerIds;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> cornerData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lMesh.getCreaseVertices(cornerIds, cornerData) == MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCorners = cornerIds.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        cornerIndices.resize(numCorners);</div>\n\
<div class=\"line\">        cornerSharpness.resize(numCorners);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numCorners; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cornerIndices[i] = cornerIds[i];</div>\n\
<div class=\"line\">            cornerSharpness[i] = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">float</span><span class=\"keyword\">&gt;</span>(cornerData[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        samp.setCornerSharpnesses(</div>\n\
<div class=\"line\">            Alembic::Abc::FloatArraySample(cornerSharpness));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        samp.setCornerIndices(</div>\n\
<div class=\"line\">            Alembic::Abc::Int32ArraySample(cornerIndices));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if MAYA_API_VERSION &gt;= 201100</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> holes = lMesh.getInvisibleFaces();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numHoles = holes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    std::vector &lt;Alembic::Util::int32_t&gt; holeIndices(numHoles);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numHoles; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        holeIndices[i] = holes[i];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!holeIndices.empty())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        samp.setHoles(holeIndices);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    samp.setUVs( iUVs );</div>\n\
<div class=\"line\">    mSubDSchema.<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#ac08c5c3c225a89bdedd37c833342ce44\">set</a>(samp);</div>\n\
<div class=\"line\">    writeColor();</div>\n\
<div class=\"line\">    writeUVSets();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// the arrays being passed in are assumed to be empty</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaMeshWriter::fillTopology(</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; &amp; oPoints,</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; &amp; oFacePoints,</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Util::int32_t&gt; &amp; oPointCounts)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> lMesh( mDagPath, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>( <span class=\"stringliteral\">&quot;MFnMesh() failed for MayaMeshWriter&quot;</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> pts;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    lMesh.getPoints(pts);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pts.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt; 3 &amp;&amp; pts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = lMesh.fullPathName() +</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot; is not a valid mesh, because it only has &quot;</span>;</div>\n\
<div class=\"line\">        err += pts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        err += <span class=\"stringliteral\">&quot; points.&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPolys = lMesh.numPolygons();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numPolys == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(lMesh.fullPathName() + <span class=\"stringliteral\">&quot; has no polygons.&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> j;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    oPoints.resize(pts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() * 3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// repack the float</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; pts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> local = i * 3;</div>\n\
<div class=\"line\">        oPoints[local] = pts[i].x;</div>\n\
<div class=\"line\">        oPoints[local+1] = pts[i].y;</div>\n\
<div class=\"line\">        oPoints[local+2] = pts[i].z;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        oPoints -</span></div>\n\
<div class=\"line\"><span class=\"comment\">        oFacePoints - vertex list</span></div>\n\
<div class=\"line\"><span class=\"comment\">        oPointCounts - number of points per polygon</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> faceArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numPolys; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        lMesh.getPolygonVertices(i, faceArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (faceArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt; 3)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Skipping degenerate polygon&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// write backwards cause polygons in Maya are in a different order</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// from Renderman (clockwise vs counter-clockwise?)</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> faceArrayLength = faceArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() - 1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (j = faceArrayLength; j &gt; -1; j--)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oFacePoints.push_back(faceArray[j]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        oPointCounts.push_back(faceArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";