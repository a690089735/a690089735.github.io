var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheSpatialSubdivision.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_spatial_subdivision_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheSpatialSubdivision.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheSpatialSubdivision.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _gpuCacheSpatialSubdivision</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _gpuCacheSpatialSubdivision</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The gpuCacheSpatialSubdivision class represents a spatial subdivision </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      structure that subdivides the bounding box for a gpuCache into cells.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Each cell stores a list of the triangles of the gpuCache that at least </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      partially intersects the cell.  An iterator is provided that will walk </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      through the cells intersected by a ray.  This structure can be used to </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      perform fast intersection tests between a ray and the gpuCache.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The gpuCacheIsectAccelParams class encapsulates the parameters of the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      intersection acceleration structure, including how the cells are</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      organized, and how many cells are used to fill the mesh bounding</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      box.  Currently, the only option is a uniform grid, with a variable</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      number of grid cells along the X, Y, and Z axes.  In the future, other</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      schemes such as octrees could potentially be incorporated.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSample.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSpatialGrid.h&quot;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSpatialGridWalker.h&quot;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheIsectUtil.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> IndexBuffer::index_t index_t;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ShapeNode;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>gpuCacheVoxelGrid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//=============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Class: gpuCacheIsectAccelParams</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Purpose: Encapsulates parameters describing the configuration of a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           spatial acceleration structure.  Passed as a parameter to </span></div>\n\
<div class=\"line\"><span class=\"comment\">//           gpuCacheSpatialSubdivision to control construction of the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//           acceleration structure.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//=============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>gpuCacheIsectAccelParams</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  default constructor for arrays</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    gpuCacheIsectAccelParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  comparing acceleration structure configurations</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  (necessary to know if an acceleration structure needs</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  to be rebuilt)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> operator==( <span class=\"keyword\">const</span> gpuCacheIsectAccelParams&amp; rhs );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> operator!=( <span class=\"keyword\">const</span> gpuCacheIsectAccelParams&amp; rhs );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Use the *Params methods to create acceleration param structures.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  There are currently two algorithms available:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  1) uniformGrid: triangles are organized into a uniform grid.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  with the user specifying the number of grid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                  divisions in x, y, and z</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  2) autoUniformGrid: also a uniform grid strategy, but</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                      the number of divisions is chosen automatically</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                      based on the average triangle area of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//                      mesh, and using some heuristics.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  create a uniform grid configuration object</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> gpuCacheIsectAccelParams uniformGridParams( <span class=\"keywordtype\">int</span> divX = 10,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> divY = 10,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> divZ = 10 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  create an auto uniform grid configuration object</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> gpuCacheIsectAccelParams autoUniformGridParams();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>gpuCacheSpatialSubdivision;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// types of acceleration structures</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        kUniformGrid,</div>\n\
<div class=\"line\">        kAutoUniformGrid,</div>\n\
<div class=\"line\">        kInvalid</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  constructor is intentionally private, to force clients to go through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  the *Param methods above.  Seems like a better way to leave room</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  for future extensions.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    gpuCacheIsectAccelParams( <span class=\"keywordtype\">int</span>    alg, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>      divX,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>      divY,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>      divZ );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>     fAlgorithm; <span class=\"comment\">// type of acceleration structure</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>         fDivX;      <span class=\"comment\">// number of grid cells along X axis</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>         fDivY;      <span class=\"comment\">// number of grid cells along Y axis</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>         fDivZ;      <span class=\"comment\">// number of grid cells along Z axis</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//=============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Class: gpuCacheSpatialSubdivision</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Purpose: Organizes the triangles of a poly mesh into the cells of a 3d</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           spatial subdivision of the mesh bounding box.  Provides a routine</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           for intersecting a ray with the mesh.  This intersection operation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           only considers intersections with triangles that intersect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           cells that lie along the ray&#39;s path, therefore it can be much</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           faster than testing the ray against each triangle.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           The gpuCacheIsectAccelParams class contains the parameters that</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           describe the spatial subdivision.  Currently, we only support</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           a uniform Nx by Ny by Nz uniform grid, but the class could be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//           generalized later to use other subdivision schemes such as </span></div>\n\
<div class=\"line\"><span class=\"comment\">//           octrees or BSP trees.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//=============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>gpuCacheSpatialSubdivision</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  The subdivision doesn&#39;t actually get built until the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  first call to closestIntersection()</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    gpuCacheSpatialSubdivision( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles, <span class=\"keyword\">const</span> index_t* srcTriangleVertIndices, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* srcPositions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> bounds, <span class=\"keyword\">const</span> gpuCacheIsectAccelParams&amp; accelParams );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  frees memory for the subdivision structure</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    ~gpuCacheSpatialSubdivision();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  find closest intersection, if any, of a ray within the triangles of triArray</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> closestIntersection( </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> index_t*  srcTriangleVertIndices, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*    srcPositions,   </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;   origin,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp;  direction,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp;triArray,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>           maxParam,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;         closestIsect,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp;        isectNormal );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  find closest intersection of a ray with entire grid contents</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> closestIntersection( </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> index_t*  srcTriangleVertIndices, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*    srcPositions,   </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;   origin,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp;  direction,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>           maxParam,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;         closestIsect,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp;        isectNormal );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  find closest point to a point on a set of triangles</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> closestPointToPoint(<span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> index_t*  srcTriangleVertIndices, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*    srcPositions,   </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;   queryPoint,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp;      triArray,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; closestPoint);</div>\n\
<div class=\"line\">    <span class=\"comment\">//  find closest point to a point on the entire surface</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> closestPointToPoint(<span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> index_t*  srcTriangleVertIndices, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*    srcPositions,   </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;   queryPoint,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; closestPoint);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  find edge snap point on a set of triangles</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> getEdgeSnapPoint(<span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> index_t*  srcTriangleVertIndices, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*    srcPositions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;   rayPoint,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp;  rayDirection,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp;      triArray,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; closestPoint);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  find edge snap point on the entire surface</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> getEdgeSnapPoint(<span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTriangles, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> index_t*  srcTriangleVertIndices, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*    srcPositions,   </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp;   rayPoint,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp;  rayDirection,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>&amp; closestPoint);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  determines if the grid was created with parameters compatible with</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  the given params</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> matchesParams( <span class=\"keyword\">const</span> gpuCacheIsectAccelParams&amp; accelParams );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  returns the total amount of memory (in KB) used by the spatial</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  subdivision structure</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> getMemoryFootprint();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  retrieves the amount of time that was used to build the structure</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  (in seconds)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> getBuildTime();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  returns a string describing the structure and its parameters</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> getDescription( <span class=\"keywordtype\">bool</span> includeStats );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  diagnostic stats for all acceleration structures in the system</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  (how many, total memory footprint, total time required to build them)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> totalNumActive();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> totalNumCreated();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span> totalFootprints();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span> totalBuildTimes();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  returns a string describing the total resource usage for all</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  gpuCacheSpatialSubdivisions in the system.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> systemStats(); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  resets the count of number of spatial subdivisions created (but doesn&#39;t</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  lose track of ones currently allocated), as well as the peak memory</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  usage and build times.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> resetSystemStats(); </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  deletes the grid, does appropriate accounting</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> deleteVoxelGrid();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  poly object on which we are doing the lookups</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    gpuCacheIsectAccelParams    fAccelParams;</div>\n\
<div class=\"line\">    gpuCacheVoxelGrid*          fVoxelGrid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  describes the structure</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>     fDescription;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  time that was used to construct the structure (in seconds)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>       fMemoryFootprint;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>       fBuildTime;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  static data for accounting purposes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span>          fsTotalNumActiveSpatialSubdivisions;    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span>          fsTotalNumCreatedSpatialSubdivisions;   </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span>            fsTotalMemoryFootprint; </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span>            fsTotalBuildTime; </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span>            fsPeakMemoryFootprint;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";