var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/CacheReaderAlembic.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2_cache_reader_alembic_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/CacheReaderAlembic.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/CacheReaderAlembic.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheReaderAlembic.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheAlembicUtil.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheUtil.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheStrings.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcCoreFactory/IFactory.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/Visibility.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/ArchiveBounds.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimControl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsCurve.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNurbsCurveData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTrimBoundaryArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVectorArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUintArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;utility&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> std::pair&lt; int, int &gt; TEdge;</div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>std</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>hash&lt;TEdge&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> operator()(TEdge <span class=\"keyword\">const</span>&amp; v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::size_t h = std::hash&lt;int&gt;()(v.first);</div>\n\
<div class=\"line\">            GPUCache::hash_combine&lt;int&gt;(h, v.second);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> h;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>CacheAlembicUtil;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>CacheReaderAlembicPrivate {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicArray</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> ArrayProperty&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>AlembicArray&lt;ArrayProperty&gt;::MakeSharedEnabler: <span class=\"keyword\">public</span> AlembicArray&lt;ArrayProperty&gt; {</div>\n\
<div class=\"line\">    MakeSharedEnabler(<span class=\"keyword\">const</span> ArraySamplePtr&amp; arraySamplePtr, <span class=\"keyword\">const</span> Digest&amp; digest)</div>\n\
<div class=\"line\">            : AlembicArray&lt;ArrayProperty&gt;(arraySamplePtr,digest){}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> ArrayProperty&gt;</div>\n\
<div class=\"line\">std::shared_ptr&lt;ReadableArray&lt;typename AlembicArray&lt;ArrayProperty&gt;::T&gt; &gt;</div>\n\
<div class=\"line\">AlembicArray&lt;ArrayProperty&gt;::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ArraySamplePtr&amp; arraySamplePtr, <span class=\"keyword\">const</span> Digest&amp; digest ) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> size = (arraySamplePtr-&gt;size() *</div>\n\
<div class=\"line\">                         ArrayProperty::traits_type::dataType().getExtent());</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute the Murmur3 cryptographic hash-key and make sure</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// that the digest found in the Alembic file is correct.</span></div>\n\
<div class=\"line\">    Digest checkDigest;</div>\n\
<div class=\"line\">    Alembic::Util::MurmurHash3_x64_128(</div>\n\
<div class=\"line\">        arraySamplePtr-&gt;get(), size * <span class=\"keyword\">sizeof</span>(T), <span class=\"keyword\">sizeof</span>(T), checkDigest.words);</div>\n\
<div class=\"line\">    assert(digest == checkDigest);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// We first look if a similar array already exists in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cache. If so, we return the cached array to promote sharing as</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// much as possible.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; ret;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; lock(ArrayRegistry&lt;T&gt;::mutex());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Only accept arrays which contain data we own.  This array may happen on a</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// worker thread, so non-readable arrays can&#39;t be converted to readable.</span></div>\n\
<div class=\"line\">        ret = ArrayRegistry&lt;T&gt;::lookupReadable(digest, size);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">            ret = std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">                arraySamplePtr, digest);</div>\n\
<div class=\"line\">            ArrayRegistry&lt;T&gt;::insert(ret);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> ArrayProperty&gt;</div>\n\
<div class=\"line\">AlembicArray&lt;ArrayProperty&gt;::~AlembicArray() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> ArrayProperty&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">typename</span> AlembicArray&lt;ArrayProperty&gt;::T*</div>\n\
<div class=\"line\">AlembicArray&lt;ArrayProperty&gt;::get()<span class=\"keyword\"> const </span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>T*<span class=\"keyword\">&gt;</span>(fArraySamplePtr-&gt;get());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ArrayPropertyCacheWithConverter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PROPERTY&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">typename</span> ArrayPropertyCacheWithConverter&lt;PROPERTY&gt;::ConvertionMap</div>\n\
<div class=\"line\">ArrayPropertyCacheWithConverter&lt;PROPERTY&gt;::fsConvertionMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ArrayPropertyCacheWithConverter&lt;</div>\n\
<div class=\"line\">    Alembic::Abc::IInt32ArrayProperty&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ScopedUnlockAlembic</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ScopedUnlockAlembic</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    ScopedUnlockAlembic()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        gsAlembicMutex.unlock();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~ScopedUnlockAlembic()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        gsAlembicMutex.lock();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ScopedUnlockAlembic(<span class=\"keyword\">const</span> ScopedUnlockAlembic&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    ScopedUnlockAlembic&amp; operator=(<span class=\"keyword\">const</span> ScopedUnlockAlembic&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This function is the checkpoint of the worker thread&#39;s interrupt and pause state.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CheckInterruptAndPause(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* state)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GlobalReaderCache&amp; readerCache = GlobalReaderCache::theCache();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (readerCache.isInterrupted()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Interrupted. Throw an exception to terminate this reader.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span> CacheReaderInterruptException(state);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (readerCache.isPaused()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Paused. Unlock the Alembic lock and return the control.</span></div>\n\
<div class=\"line\">        ScopedUnlockAlembic unlock;</div>\n\
<div class=\"line\">        readerCache.pauseUntilNotified();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS DataProvider</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> INFO&gt;</div>\n\
<div class=\"line\">DataProvider::DataProvider(</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IGeomBaseSchema&lt;INFO&gt;&amp; abcGeom,</div>\n\
<div class=\"line\">        Alembic::Abc::TimeSamplingPtr            timeSampling,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numSamples,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>   needUVs)</div>\n\
<div class=\"line\">    : fAnimTimeRange(TimeInterval::kInvalid),</div>\n\
<div class=\"line\">      fBBoxAndVisValidityInterval(TimeInterval::kInvalid),</div>\n\
<div class=\"line\">      fValidityInterval(TimeInterval::kInvalid),</div>\n\
<div class=\"line\">      fNeedUVs(needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::IObject shapeObject = abcGeom.getObject();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// shape visibility</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IVisibilityProperty visibility = </div>\n\
<div class=\"line\">                    Alembic::AbcGeom::GetVisibilityProperty(shapeObject);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (visibility) {</div>\n\
<div class=\"line\">        fVisibilityCache.init(visibility);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// bounding box</span></div>\n\
<div class=\"line\">    fBoundingBoxCache.init(abcGeom.getSelfBoundsProperty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find parent IObjects</span></div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Abc::IObject&gt; parents;</div>\n\
<div class=\"line\">    Alembic::Abc::IObject current = shapeObject.getParent();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (current.valid()) {</div>\n\
<div class=\"line\">        parents.push_back(current);</div>\n\
<div class=\"line\">        current = current.getParent();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// parent visibility</span></div>\n\
<div class=\"line\">    fParentVisibilityCache.resize(parents.size());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fParentVisibilityCache.size(); i++) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IVisibilityProperty visibilityProp = </div>\n\
<div class=\"line\">            Alembic::AbcGeom::GetVisibilityProperty(parents[i]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (visibilityProp) {</div>\n\
<div class=\"line\">            fParentVisibilityCache[i].init(visibilityProp);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// exact animation time range</span></div>\n\
<div class=\"line\">    fAnimTimeRange = TimeInterval(</div>\n\
<div class=\"line\">        timeSampling-&gt;getSampleTime(0),</div>\n\
<div class=\"line\">        timeSampling-&gt;getSampleTime(numSamples &gt; 0 ? numSamples-1 : 0)</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">DataProvider::~DataProvider()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fValidityInterval = TimeInterval::kInvalid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// free the property readers</span></div>\n\
<div class=\"line\">    fVisibilityCache.reset();</div>\n\
<div class=\"line\">    fBoundingBoxCache.reset();</div>\n\
<div class=\"line\">    fParentVisibilityCache.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DataProvider::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBoundingBoxCache.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const ShapeSample&gt; </div>\n\
<div class=\"line\">DataProvider::getBBoxPlaceHolderSample(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ShapeSample&gt; sample = </div>\n\
<div class=\"line\">        ShapeSample::createBoundingBoxPlaceHolderSample(</div>\n\
<div class=\"line\">            seconds,</div>\n\
<div class=\"line\">            getBoundingBox(),</div>\n\
<div class=\"line\">            isVisible()</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DataProvider::fillBBoxAndVisSample(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fBBoxAndVisValidityInterval = updateBBoxAndVisCache(time);</div>\n\
<div class=\"line\">    assert(fBBoxAndVisValidityInterval.valid());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DataProvider::fillTopoAndAttrSample(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fValidityInterval = updateCache(time);</div>\n\
<div class=\"line\">    assert(fValidityInterval.valid());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval DataProvider::updateBBoxAndVisCache(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Notes:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// When possible, we try to reuse the samples from the previously</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// read sample.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update caches</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibilityCache.valid()) {</div>\n\
<div class=\"line\">        fVisibilityCache.setTime(time);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fBoundingBoxCache.setTime(time);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarPropertyCache&lt;Alembic::Abc::ICharProperty&gt;&amp; </div>\n\
<div class=\"line\">            parentVisPropCache : fParentVisibilityCache) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (parentVisPropCache.valid()) { </div>\n\
<div class=\"line\">            parentVisPropCache.setTime(time);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// return the new cache valid interval</span></div>\n\
<div class=\"line\">    TimeInterval validityInterval(TimeInterval::kInfinite);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibilityCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fVisibilityCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    validityInterval &amp;= fBoundingBoxCache.getValidityInterval();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarPropertyCache&lt;Alembic::Abc::ICharProperty&gt;&amp; </div>\n\
<div class=\"line\">            parentVisPropCache : fParentVisibilityCache) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (parentVisPropCache.valid()) { </div>\n\
<div class=\"line\">            validityInterval &amp;= parentVisPropCache.getValidityInterval();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval DataProvider::updateCache(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> updateBBoxAndVisCache(time);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DataProvider::isVisible()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// shape invisible</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibilityCache.valid() &amp;&amp; </div>\n\
<div class=\"line\">            fVisibilityCache.getValue() == char(Alembic::AbcGeom::kVisibilityHidden)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// parent invisible</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ScalarPropertyCache&lt;Alembic::Abc::ICharProperty&gt;&amp; </div>\n\
<div class=\"line\">            parentVisPropCache : fParentVisibilityCache) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (parentVisPropCache.valid() &amp;&amp; </div>\n\
<div class=\"line\">                parentVisPropCache.getValue() == char(Alembic::AbcGeom::kVisibilityHidden)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// visible</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS PolyDataProvider</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> SCHEMA&gt;</div>\n\
<div class=\"line\">PolyDataProvider::PolyDataProvider(</div>\n\
<div class=\"line\">    SCHEMA&amp;                         abcMesh,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>                      needUVs)</div>\n\
<div class=\"line\">  : DataProvider(abcMesh, abcMesh.getTimeSampling(), </div>\n\
<div class=\"line\">                 abcMesh.getNumSamples(), needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// polygon counts</span></div>\n\
<div class=\"line\">    fFaceCountsCache.init(abcMesh.getFaceCountsProperty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// positions</span></div>\n\
<div class=\"line\">    fPositionsCache.init(abcMesh.getPositionsProperty());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PolyDataProvider::~PolyDataProvider()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// free the property readers</span></div>\n\
<div class=\"line\">    fFaceCountsCache.reset();</div>\n\
<div class=\"line\">    fPositionsCache.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PolyDataProvider::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> DataProvider::valid() &amp;&amp;</div>\n\
<div class=\"line\">            fFaceCountsCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fPositionsCache.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval</div>\n\
<div class=\"line\">PolyDataProvider::updateCache(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TimeInterval validityInterval(DataProvider::updateCache(time));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update caches</span></div>\n\
<div class=\"line\">    fFaceCountsCache.setTime(time);</div>\n\
<div class=\"line\">    fPositionsCache.setTime(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// return the new cache valid interval</span></div>\n\
<div class=\"line\">    validityInterval &amp;= fFaceCountsCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fPositionsCache.getValidityInterval();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS RawDataProvider</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">RawDataProvider::RawDataProvider(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::IPolyMeshSchema&amp; abcMesh,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">    : PolyDataProvider(abcMesh, needUVs),</div>\n\
<div class=\"line\">      fFaceIndicesCache(correctPolygonWinding)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// triangle indices</span></div>\n\
<div class=\"line\">    fFaceIndicesCache.init(abcMesh.getFaceIndicesProperty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// custom reader for wireframe indices</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (abcMesh.getPropertyHeader(kCustomPropertyWireIndices) != NULL) {</div>\n\
<div class=\"line\">        fWireIndicesCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IInt32ArrayProperty(abcMesh.getPtr(), kCustomPropertyWireIndices));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (abcMesh.getPropertyHeader(kCustomPropertyWireIndicesOld) != NULL) {</div>\n\
<div class=\"line\">        fWireIndicesCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IInt32ArrayProperty(abcMesh.getPtr(), kCustomPropertyWireIndicesOld));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// custom reader for group info</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (abcMesh.getPropertyHeader(kCustomPropertyShadingGroupSizes) != NULL) {</div>\n\
<div class=\"line\">        fGroupSizesCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IInt32ArrayProperty(abcMesh.getPtr(), kCustomPropertyShadingGroupSizes));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// custom reader for diffuse color</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (abcMesh.getPropertyHeader(kCustomPropertyDiffuseColor) != NULL) {</div>\n\
<div class=\"line\">        fDiffuseColorCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IC4fProperty(abcMesh.getPtr(), kCustomPropertyDiffuseColor));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// normals, we do not support indexed/facevarying normals</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IN3fGeomParam normals = abcMesh.getNormalsParam();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (normals.valid()) {</div>\n\
<div class=\"line\">        assert(!normals.isIndexed());</div>\n\
<div class=\"line\">        assert(normals.getScope() == Alembic::AbcGeom::kVertexScope);</div>\n\
<div class=\"line\">        fNormalsCache.init(normals.getValueProperty());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNeedUVs) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// UVs, we do not support indexed/facevarying UVs</span></div>\n\
<div class=\"line\">        Alembic::AbcGeom::IV2fGeomParam UVs = abcMesh.getUVsParam();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (UVs.valid()) {</div>\n\
<div class=\"line\">            assert(!UVs.isIndexed());</div>\n\
<div class=\"line\">            assert(UVs.getScope() == Alembic::AbcGeom::kVertexScope);</div>\n\
<div class=\"line\">            fUVsCache.init(UVs.getValueProperty());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">RawDataProvider::~RawDataProvider()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// free the property readers</span></div>\n\
<div class=\"line\">    fFaceIndicesCache.reset();</div>\n\
<div class=\"line\">    fWireIndicesCache.reset();</div>\n\
<div class=\"line\">    fGroupSizesCache.reset();</div>\n\
<div class=\"line\">    fDiffuseColorCache.reset();</div>\n\
<div class=\"line\">    fNormalsCache.reset();</div>\n\
<div class=\"line\">    fUVsCache.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> RawDataProvider::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> PolyDataProvider::valid() &amp;&amp;</div>\n\
<div class=\"line\">            fFaceIndicesCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fWireIndicesCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fDiffuseColorCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fNormalsCache.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const ShapeSample&gt; </div>\n\
<div class=\"line\">RawDataProvider::getSample(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; triangleVertIndices;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; indexBuffer =</div>\n\
<div class=\"line\">        fFaceIndicesCache.getValue();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGroupSizesCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; groupSizes =</div>\n\
<div class=\"line\">            fGroupSizesCache.getValue();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> IndexBuffer::index_t* groupSizesPtr = groupSizes-&gt;get();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> i=0, offset=0; i&lt;groupSizes-&gt;size(); offset+=3*groupSizesPtr[i], ++i) {</div>\n\
<div class=\"line\">            triangleVertIndices.push_back(</div>\n\
<div class=\"line\">                IndexBuffer::create(</div>\n\
<div class=\"line\">                    indexBuffer, offset, offset+3*groupSizesPtr[i]));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        triangleVertIndices.push_back(IndexBuffer::create(indexBuffer));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::C4f diffuseColor = fDiffuseColorCache.getValue();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ShapeSample&gt; sample = ShapeSample::create(</div>\n\
<div class=\"line\">        seconds,                                                   <span class=\"comment\">// time (in seconds)</span></div>\n\
<div class=\"line\">        fWireIndicesCache.getValue()-&gt;size() / 2,                  <span class=\"comment\">// number of wireframes</span></div>\n\
<div class=\"line\">        fPositionsCache.getValue()-&gt;size() / 3,                    <span class=\"comment\">// number of vertices</span></div>\n\
<div class=\"line\">        IndexBuffer::create(fWireIndicesCache.getValue()),         <span class=\"comment\">// wireframe indices</span></div>\n\
<div class=\"line\">        triangleVertIndices,                                       <span class=\"comment\">// triangle indices</span></div>\n\
<div class=\"line\">        VertexBuffer::createPositions(fPositionsCache.getValue()), <span class=\"comment\">// position</span></div>\n\
<div class=\"line\">        getBoundingBox(),                                          <span class=\"comment\">// bounding box</span></div>\n\
<div class=\"line\">        <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(diffuseColor.r, diffuseColor.g, diffuseColor.b, diffuseColor.a),</div>\n\
<div class=\"line\">        isVisible()</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormalsCache.valid()) {</div>\n\
<div class=\"line\">        sample-&gt;setNormals(</div>\n\
<div class=\"line\">            VertexBuffer::createNormals(fNormalsCache.getValue()));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        sample-&gt;setUVs(</div>\n\
<div class=\"line\">            VertexBuffer::createUVs(fUVsCache.getValue()));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt;</div>\n\
<div class=\"line\">    RawDataProvider::correctPolygonWinding(<span class=\"keyword\">const</span> Alembic::Abc::Int32ArraySamplePtr&amp; indices)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> count = (*indices).size();</div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;IndexBuffer::index_t&gt; faceIndicesCCW(</div>\n\
<div class=\"line\">        <span class=\"keyword\">new</span> IndexBuffer::index_t[count]);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; count; i += 3) {</div>\n\
<div class=\"line\">        faceIndicesCCW[i + 2] = (*indices)[i + 0];</div>\n\
<div class=\"line\">        faceIndicesCCW[i + 1] = (*indices)[i + 1];</div>\n\
<div class=\"line\">        faceIndicesCCW[i + 0] = (*indices)[i + 2];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> SharedArray&lt;IndexBuffer::index_t&gt;::create(</div>\n\
<div class=\"line\">        faceIndicesCCW, count);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval RawDataProvider::updateCache(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TimeInterval validityInterval(PolyDataProvider::updateCache(time));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update caches</span></div>\n\
<div class=\"line\">    fFaceIndicesCache.setTime(time);</div>\n\
<div class=\"line\">    fWireIndicesCache.setTime(time);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGroupSizesCache.valid()) {</div>\n\
<div class=\"line\">        fGroupSizesCache.setTime(time);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fNormalsCache.setTime(time);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        fUVsCache.setTime(time);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fDiffuseColorCache.setTime(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// return the new cache valid interval</span></div>\n\
<div class=\"line\">    validityInterval &amp;= fFaceIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fWireIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGroupSizesCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fGroupSizesCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    validityInterval &amp;= fNormalsCache.getValidityInterval();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fUVsCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    validityInterval &amp;= fDiffuseColorCache.getValidityInterval();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check sample consistency</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts     = fPositionsCache.getValue()-&gt;size() / 3;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numTriangles = fFaceIndicesCache.getValue()-&gt;size() / 3;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fFaceCountsCache.getValue()-&gt;size() != numTriangles) {</div>\n\
<div class=\"line\">        assert(fFaceCountsCache.getValue()-&gt;size() == numTriangles);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> TimeInterval::kInvalid;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormalsCache.getValue()-&gt;size() / 3 != numVerts) {</div>\n\
<div class=\"line\">        assert(fNormalsCache.getValue()-&gt;size() / 3 == numVerts);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> TimeInterval::kInvalid;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVsCache.getValue()-&gt;size() / 2 != numVerts) {</div>\n\
<div class=\"line\">            assert(fUVsCache.getValue()-&gt;size() / 2 == numVerts);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> TimeInterval::kInvalid;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS Triangulator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Triangulator::Triangulator(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::IPolyMeshSchema&amp; abcMesh,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">    : PolyDataProvider(abcMesh, needUVs),</div>\n\
<div class=\"line\">    fNormalsScope(Alembic::AbcGeom::kUnknownScope), fUVsScope(Alembic::AbcGeom::kUnknownScope)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// polygon indices</span></div>\n\
<div class=\"line\">    fFaceIndicesCache.init(abcMesh.getFaceIndicesProperty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// optional normals</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IN3fGeomParam normals = abcMesh.getNormalsParam();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (normals.valid()) {</div>\n\
<div class=\"line\">        fNormalsScope = normals.getScope();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNormalsScope == Alembic::AbcGeom::kVaryingScope ||</div>\n\
<div class=\"line\">                fNormalsScope == Alembic::AbcGeom::kVertexScope ||</div>\n\
<div class=\"line\">                fNormalsScope == Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">            fNormalsCache.init(normals.getValueProperty());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (normals.isIndexed()) {</div>\n\
<div class=\"line\">                fNormalIndicesCache.init(normals.getIndexProperty());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// optional UVs</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNeedUVs) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IV2fGeomParam UVs = abcMesh.getUVsParam();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (UVs.valid()) {</div>\n\
<div class=\"line\">            fUVsScope = UVs.getScope();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fUVsScope == Alembic::AbcGeom::kVaryingScope ||</div>\n\
<div class=\"line\">                fUVsScope == Alembic::AbcGeom::kVertexScope ||</div>\n\
<div class=\"line\">                fUVsScope == Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">                fUVsCache.init(UVs.getValueProperty());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (UVs.isIndexed()) {</div>\n\
<div class=\"line\">                    fUVIndicesCache.init(UVs.getIndexProperty());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Triangulator::~Triangulator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// free the property readers</span></div>\n\
<div class=\"line\">    fFaceIndicesCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fNormalsScope = Alembic::AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\">    fNormalsCache.reset();</div>\n\
<div class=\"line\">    fNormalIndicesCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fUVsScope = Alembic::AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\">    fUVsCache.reset();</div>\n\
<div class=\"line\">    fUVIndicesCache.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Triangulator::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> PolyDataProvider::valid() &amp;&amp;</div>\n\
<div class=\"line\">            fFaceIndicesCache.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const ShapeSample&gt; </div>\n\
<div class=\"line\">Triangulator::getSample(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// empty mesh</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWireIndices || !fTriangleIndices) {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ShapeSample&gt; sample =</div>\n\
<div class=\"line\">            ShapeSample::createEmptySample(seconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// triangle indices</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Currently, we only have 1 group</span></div>\n\
<div class=\"line\">    std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; triangleVertIndices;</div>\n\
<div class=\"line\">    triangleVertIndices.push_back(IndexBuffer::create(fTriangleIndices));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ShapeSample&gt; sample = ShapeSample::create(</div>\n\
<div class=\"line\">        seconds,                                           <span class=\"comment\">// time (in seconds)</span></div>\n\
<div class=\"line\">        fWireIndices-&gt;size() / 2,                          <span class=\"comment\">// number of wireframes</span></div>\n\
<div class=\"line\">        fMappedPositions-&gt;size() / 3,                      <span class=\"comment\">// number of vertices</span></div>\n\
<div class=\"line\">        IndexBuffer::create(fWireIndices),                 <span class=\"comment\">// wireframe indices</span></div>\n\
<div class=\"line\">        triangleVertIndices,                               <span class=\"comment\">// triangle indices (1 group)</span></div>\n\
<div class=\"line\">        VertexBuffer::createPositions(fMappedPositions),   <span class=\"comment\">// position</span></div>\n\
<div class=\"line\">        getBoundingBox(),                                  <span class=\"comment\">// bounding box</span></div>\n\
<div class=\"line\">        Config::kDefaultGrayColor,                         <span class=\"comment\">// diffuse color</span></div>\n\
<div class=\"line\">        isVisible()</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fMappedNormals) {</div>\n\
<div class=\"line\">        sample-&gt;setNormals(</div>\n\
<div class=\"line\">            VertexBuffer::createNormals(fMappedNormals));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fMappedUVs) {</div>\n\
<div class=\"line\">        sample-&gt;setUVs(</div>\n\
<div class=\"line\">            VertexBuffer::createUVs(fMappedUVs));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval Triangulator::updateCache(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// update faceCounts/position cache here so that we can detect topology/position change.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// next setTime() in DataProvider::updateCache() simply returns early</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> topologyChanged = fFaceCountsCache.setTime(time);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> positionChanged = fPositionsCache.setTime(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval validityInterval(PolyDataProvider::updateCache(time));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update caches</span></div>\n\
<div class=\"line\">    topologyChanged = fFaceIndicesCache.setTime(time) || topologyChanged;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormalsCache.valid()) {</div>\n\
<div class=\"line\">        fNormalsCache.setTime(time);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNormalIndicesCache.valid()) {</div>\n\
<div class=\"line\">            fNormalIndicesCache.setTime(time);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        fUVsCache.setTime(time);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">            fUVIndicesCache.setTime(time);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// return the new cache valid interval</span></div>\n\
<div class=\"line\">    validityInterval &amp;= fFaceIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormalsCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fNormalsCache.getValidityInterval();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNormalIndicesCache.valid()) {</div>\n\
<div class=\"line\">            validityInterval &amp;= fNormalIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fUVsCache.getValidityInterval();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">            validityInterval &amp;= fUVIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// do a minimal check for the consistency</span></div>\n\
<div class=\"line\">    check();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// convert the mesh to display-friend format</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (positionChanged || topologyChanged || !fComputedNormals) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// recompute normals on position/topology change</span></div>\n\
<div class=\"line\">        computeNormals();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (topologyChanged || !fVertAttribsIndices) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// convert multi-indexed streams on topology change</span></div>\n\
<div class=\"line\">        convertMultiIndexedStreams();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    remapVertAttribs();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (topologyChanged || !fWireIndices) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// recompute wireframe indices on topology change</span></div>\n\
<div class=\"line\">        computeWireIndices();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (topologyChanged || !fTriangleIndices) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// recompute triangulation on topology change</span></div>\n\
<div class=\"line\">        triangulate();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keywordtype\">size_t</span> SIZE&gt;</div>\n\
<div class=\"line\">std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt; Triangulator::convertMultiIndexedStream(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;float&gt; &gt; attribArray,</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;IndexBuffer::index_t&gt; &gt; indexArray)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// map the indexed array to direct array</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts                                 = indexArray-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* srcAttribs                         = attribArray-&gt;get();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* srcIndices          = indexArray-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;float&gt; mappedAttribs(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numVerts * SIZE]);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numVerts; i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; SIZE; j++) {</div>\n\
<div class=\"line\">            mappedAttribs[i * SIZE + j] = srcAttribs[srcIndices[i] * SIZE + j];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> SharedArray&lt;float&gt;::create(mappedAttribs, numVerts * SIZE);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Triangulator::check()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numFaceIndices = fFaceIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts       = fPositionsCache.getValue()-&gt;size() / 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Normals</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numExpectedNormals = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormalsScope == Alembic::AbcGeom::kVaryingScope ||</div>\n\
<div class=\"line\">            fNormalsScope == Alembic::AbcGeom::kVertexScope) {</div>\n\
<div class=\"line\">        numExpectedNormals = numVerts;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fNormalsScope == Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">        numExpectedNormals = numFaceIndices;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numActualNormals = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormalsCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNormalIndicesCache.valid()) {</div>\n\
<div class=\"line\">            numActualNormals = fNormalIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            numActualNormals = fNormalsCache.getValue()-&gt;size() / 3;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear previous result</span></div>\n\
<div class=\"line\">    fCheckedNormalsScope = Alembic::AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\">    fCheckedNormals.reset();</div>\n\
<div class=\"line\">    fCheckedNormalIndices.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// forward </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numExpectedNormals == numActualNormals) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNormalsCache.valid()) {</div>\n\
<div class=\"line\">            fCheckedNormalsScope = fNormalsScope;</div>\n\
<div class=\"line\">            fCheckedNormals      = fNormalsCache.getValue();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fNormalIndicesCache.valid()) {</div>\n\
<div class=\"line\">                fCheckedNormalIndices = fNormalIndicesCache.getValue();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        DisplayWarning(kBadNormalsMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// UVs</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numExpectedUVs = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsScope == Alembic::AbcGeom::kVaryingScope ||</div>\n\
<div class=\"line\">        fUVsScope == Alembic::AbcGeom::kVertexScope) {</div>\n\
<div class=\"line\">            numExpectedUVs = numVerts;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fUVsScope == Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">        numExpectedUVs = numFaceIndices;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numActualUVs = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">            numActualUVs = fUVIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            numActualUVs = fUVsCache.getValue()-&gt;size() / 2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear previous result</span></div>\n\
<div class=\"line\">    fCheckedUVsScope = Alembic::AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\">    fCheckedUVs.reset();</div>\n\
<div class=\"line\">    fCheckedUVIndices.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// forward </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numExpectedUVs == numActualUVs) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">            fCheckedUVsScope = fUVsScope;</div>\n\
<div class=\"line\">            fCheckedUVs      = fUVsCache.getValue();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">                fCheckedUVIndices = fUVIndicesCache.getValue();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        DisplayWarning(kBadUVsMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Triangulator::computeNormals()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// compute normals if the normals are missing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// later on, we can safely assume that the normals always exist</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCheckedNormals &amp;&amp; (fCheckedNormalsScope == Alembic::AbcGeom::kVaryingScope</div>\n\
<div class=\"line\">            || fCheckedNormalsScope == Alembic::AbcGeom::kVertexScope</div>\n\
<div class=\"line\">            || fCheckedNormalsScope == Alembic::AbcGeom::kFacevaryingScope)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// the normals exist and we recognize these normals</span></div>\n\
<div class=\"line\">        fComputedNormals      = fCheckedNormals;</div>\n\
<div class=\"line\">        fComputedNormalsScope = fCheckedNormalsScope;</div>\n\
<div class=\"line\">        fComputedNormalIndices.reset();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fCheckedNormalIndices) {</div>\n\
<div class=\"line\">            fComputedNormalIndices = fCheckedNormalIndices;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numFaceCounts           = fFaceCountsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* faceCounts = fFaceCountsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* faceIndices = fFaceIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>    numPositions = fPositionsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positions = fPositionsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts = numPositions / 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numVerts == 0) {</div>\n\
<div class=\"line\">        fComputedNormalsScope = Alembic::AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\">        fComputedNormals.reset();</div>\n\
<div class=\"line\">        fComputedNormalIndices.reset();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// allocate buffers for the new normals</span></div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;float&gt; computedFaceNormals(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numFaceCounts * 3]);</div>\n\
<div class=\"line\">    GPUCache::shared_array&lt;float&gt; computedNormals(<span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numVerts * 3]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute the face normals</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0, polyVertOffset = 0; i &lt; numFaceCounts; polyVertOffset += faceCounts[i], i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numPoints = faceCounts[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Newell&#39;s Method</span></div>\n\
<div class=\"line\">        <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> faceNormal(0.0f, 0.0f, 0.0f);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numPoints; j++) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> thisJ = numPoints - j - 1;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> nextJ = numPoints - ((j + 1) % numPoints) - 1;</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* thisPoint = &amp;positions[faceIndices[polyVertOffset + thisJ] * 3];</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* nextPoint = &amp;positions[faceIndices[polyVertOffset + nextJ] * 3];</div>\n\
<div class=\"line\">            faceNormal.x += (thisPoint[1] - nextPoint[1]) * (thisPoint[2] + nextPoint[2]);</div>\n\
<div class=\"line\">            faceNormal.y += (thisPoint[2] - nextPoint[2]) * (thisPoint[0] + nextPoint[0]);</div>\n\
<div class=\"line\">            faceNormal.z += (thisPoint[0] - nextPoint[0]) * (thisPoint[1] + nextPoint[1]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        faceNormal.normalize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        computedFaceNormals[i * 3 + 0] = faceNormal.x;</div>\n\
<div class=\"line\">        computedFaceNormals[i * 3 + 1] = faceNormal.y;</div>\n\
<div class=\"line\">        computedFaceNormals[i * 3 + 2] = faceNormal.z;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute the normals</span></div>\n\
<div class=\"line\">    memset(&amp;computedNormals[0], 0, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>) * numVerts * 3);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0, polyVertOffset = 0; i &lt; numFaceCounts; polyVertOffset += faceCounts[i], i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numPoints = faceCounts[i];</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* faceNormal = &amp;computedFaceNormals[i * 3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// accumulate the face normal</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> j = 0; j &lt; numPoints; j++) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span>* normal = &amp;computedNormals[faceIndices[polyVertOffset + j] * 3];</div>\n\
<div class=\"line\">            normal[0] += faceNormal[0];</div>\n\
<div class=\"line\">            normal[1] += faceNormal[1];</div>\n\
<div class=\"line\">            normal[2] += faceNormal[2];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// normalize normals, MFloatVector functions are inline functions</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numVerts; i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>* normal = &amp;computedNormals[i * 3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> vector(normal[0], normal[1], normal[2]);</div>\n\
<div class=\"line\">        vector.normalize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        normal[0] = vector.x;</div>\n\
<div class=\"line\">        normal[1] = vector.y;</div>\n\
<div class=\"line\">        normal[2] = vector.z;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fComputedNormalsScope = Alembic::AbcGeom::kVertexScope;</div>\n\
<div class=\"line\">    fComputedNormals      = SharedArray&lt;float&gt;::create(computedNormals, numVerts * 3);</div>\n\
<div class=\"line\">    fComputedNormalIndices.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Triangulator::convertMultiIndexedStreams()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// convert multi-indexed streams to single-indexed streams</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// assume the scope is kVarying/kVertex/kFacevarying</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input polygons data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                      numFaceIndices = fFaceIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* faceIndices = fFaceIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input normals</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                        normalFaceVarying = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* normalIndices     = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fComputedNormals) {</div>\n\
<div class=\"line\">        normalFaceVarying = (fComputedNormalsScope == Alembic::AbcGeom::kFacevaryingScope);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fComputedNormalIndices) {</div>\n\
<div class=\"line\">            normalIndices = fComputedNormalIndices-&gt;get();</div>\n\
<div class=\"line\">            assert(fComputedNormalIndices-&gt;size() == numFaceIndices);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input UV indices</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                        uvFaceVarying = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* uvIndices     = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCheckedUVs) {</div>\n\
<div class=\"line\">        uvFaceVarying = (fCheckedUVsScope == Alembic::AbcGeom::kFacevaryingScope);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fCheckedUVIndices) {</div>\n\
<div class=\"line\">            uvIndices = fCheckedUVIndices-&gt;get();</div>\n\
<div class=\"line\">            assert(fCheckedUVIndices-&gt;size() == numFaceIndices);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// determine the number of multi-indexed streams</span></div>\n\
<div class=\"line\">    MultiIndexedStreamsConverter&lt;IndexBuffer::index_t&gt; converter(</div>\n\
<div class=\"line\">            numFaceIndices, faceIndices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (normalFaceVarying) {</div>\n\
<div class=\"line\">        converter.addMultiIndexedStream(normalIndices);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uvFaceVarying) {</div>\n\
<div class=\"line\">        converter.addMultiIndexedStream(uvIndices);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// only one multi-indexed streams, no need to convert it</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (converter.numStreams() == 1) {</div>\n\
<div class=\"line\">        fVertAttribsIndices.reset();</div>\n\
<div class=\"line\">        fMappedFaceIndices = fFaceIndicesCache.getValue();</div>\n\
<div class=\"line\">        fNumVertices       = fPositionsCache.getValue()-&gt;size() / 3;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// convert the multi-indexed streams</span></div>\n\
<div class=\"line\">    converter.compute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// the mapped face indices</span></div>\n\
<div class=\"line\">    fMappedFaceIndices = SharedArray&lt;IndexBuffer::index_t&gt;::create(</div>\n\
<div class=\"line\">        converter.mappedFaceIndices(), numFaceIndices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// indices to remap streams</span></div>\n\
<div class=\"line\">    fVertAttribsIndices = converter.vertAttribsIndices();</div>\n\
<div class=\"line\">    fNumVertices        = converter.numVertices();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Triangulator::remapVertAttribs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// remap vertex attribute streams according to the result of convertMultiIndexedStreams()</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// assume the scope is kVarying/kVertex/kFacevarying</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// no multi-index streams, just drop indices</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fVertAttribsIndices) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// positions is the only stream, just use it</span></div>\n\
<div class=\"line\">        fMappedPositions = fPositionsCache.getValue();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get rid of normal indices</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fComputedNormals) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fComputedNormalIndices) {</div>\n\
<div class=\"line\">                fMappedNormals = convertMultiIndexedStream&lt;3&gt;(</div>\n\
<div class=\"line\">                    fComputedNormals, fComputedNormalIndices);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                fMappedNormals = fComputedNormals;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get rid of UV indices</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fCheckedUVs) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fCheckedUVIndices) {</div>\n\
<div class=\"line\">                fMappedUVs = convertMultiIndexedStream&lt;2&gt;(</div>\n\
<div class=\"line\">                    fCheckedUVs, fCheckedUVIndices);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                fMappedUVs = fCheckedUVs;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input polygons data</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*                positions   = fPositionsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* faceIndices = fFaceIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input normals</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*                normals       = NULL;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* normalIndices = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fComputedNormals) {</div>\n\
<div class=\"line\">        normals = fComputedNormals-&gt;get();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fComputedNormalIndices) {</div>\n\
<div class=\"line\">            normalIndices = fComputedNormalIndices-&gt;get();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input UV indices</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*                UVs       = NULL;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* uvIndices = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCheckedUVs) {</div>\n\
<div class=\"line\">        UVs = fCheckedUVs-&gt;get();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fCheckedUVIndices) {</div>\n\
<div class=\"line\">            uvIndices = fCheckedUVIndices-&gt;get();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set up multi-indexed streams remapper</span></div>\n\
<div class=\"line\">    MultiIndexedStreamsRemapper&lt;IndexBuffer::index_t&gt; remapper(</div>\n\
<div class=\"line\">        faceIndices, fNumVertices, fVertAttribsIndices.get());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    remapper.addMultiIndexedStream(positions, NULL, <span class=\"keyword\">false</span>, 3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (normals) {</div>\n\
<div class=\"line\">        remapper.addMultiIndexedStream(normals, normalIndices,</div>\n\
<div class=\"line\">            fComputedNormalsScope == Alembic::AbcGeom::kFacevaryingScope, 3);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (UVs) {</div>\n\
<div class=\"line\">        remapper.addMultiIndexedStream(UVs, uvIndices, </div>\n\
<div class=\"line\">            fCheckedUVsScope == Alembic::AbcGeom::kFacevaryingScope, 2);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// remap streams</span></div>\n\
<div class=\"line\">    remapper.compute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fMappedPositions = SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">        remapper.mappedVertAttribs(0), fNumVertices * 3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> streamIndex = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (normals) {</div>\n\
<div class=\"line\">        fMappedNormals = SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">            remapper.mappedVertAttribs(streamIndex++), fNumVertices * 3);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (UVs) {</div>\n\
<div class=\"line\">        fMappedUVs = SharedArray&lt;float&gt;::create(</div>\n\
<div class=\"line\">            remapper.mappedVertAttribs(streamIndex++), fNumVertices * 2);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Triangulator::computeWireIndices()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// compute the wireframe indices</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>           numFaceCounts = fFaceCountsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* faceCounts = fFaceCountsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                   numFaceIndices = fFaceIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* faceIndices = fFaceIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* mappedFaceIndices = fMappedFaceIndices-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute wireframe indices</span></div>\n\
<div class=\"line\">    WireIndicesGenerator&lt;IndexBuffer::index_t&gt; wireIndicesGenerator(</div>\n\
<div class=\"line\">            numFaceCounts, faceCounts, numFaceIndices, faceIndices, mappedFaceIndices);</div>\n\
<div class=\"line\">    wireIndicesGenerator.compute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (wireIndicesGenerator.numWires() == 0) {</div>\n\
<div class=\"line\">        fWireIndices.reset();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fWireIndices = SharedArray&lt;IndexBuffer::index_t&gt;::create(</div>\n\
<div class=\"line\">        wireIndicesGenerator.wireIndices(), wireIndicesGenerator.numWires() * 2);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Triangulator::triangulate()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// triangulate the polygons</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// assume that there are no holes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>           numFaceCounts = fFaceCountsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* faceCounts = fFaceCountsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* faceIndices = fMappedFaceIndices-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positions = fMappedPositions-&gt;get();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* normals   = fMappedNormals ? fMappedNormals-&gt;get() : NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numFaceCounts == 0) {</div>\n\
<div class=\"line\">        fTriangleIndices.reset();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Triangulate polygons</span></div>\n\
<div class=\"line\">    PolyTriangulator&lt;IndexBuffer::index_t&gt; polyTriangulator(</div>\n\
<div class=\"line\">        numFaceCounts, faceCounts, faceIndices, <span class=\"keyword\">true</span>, positions, normals);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    polyTriangulator.compute();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fTriangleIndices = SharedArray&lt;IndexBuffer::index_t&gt;::create(</div>\n\
<div class=\"line\">        polyTriangulator.triangleIndices(), polyTriangulator.numTriangles() * 3);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS NurbsTessellator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">NurbsTessellator::NurbsTessellator(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::INuPatchSchema&amp; abcNurbs,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">    : DataProvider(abcNurbs, abcNurbs.getTimeSampling(),</div>\n\
<div class=\"line\">                   abcNurbs.getNumSamples(), needUVs),</div>\n\
<div class=\"line\">    fSurfaceValid(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Control point positions</span></div>\n\
<div class=\"line\">    fPositionsCache.init(abcNurbs.getPositionsProperty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Number of control points</span></div>\n\
<div class=\"line\">    fNumUCache.init(Alembic::Abc::IInt32Property(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;nu&quot;</span>));</div>\n\
<div class=\"line\">    fNumVCache.init(Alembic::Abc::IInt32Property(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;nv&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Order (Degree + 1)</span></div>\n\
<div class=\"line\">    fUOrderCache.init(Alembic::Abc::IInt32Property(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;uOrder&quot;</span>));</div>\n\
<div class=\"line\">    fVOrderCache.init(Alembic::Abc::IInt32Property(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;vOrder&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Knots</span></div>\n\
<div class=\"line\">    fUKnotCache.init(abcNurbs.getUKnotsProperty());</div>\n\
<div class=\"line\">    fVKnotCache.init(abcNurbs.getVKnotsProperty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Control point weights</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IFloatArrayProperty positionWeights = abcNurbs.getPositionWeightsProperty();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (positionWeights.valid()) {</div>\n\
<div class=\"line\">        fPositionWeightsCache.init(positionWeights);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Trim curves</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (abcNurbs.hasTrimCurve()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Number of loops</span></div>\n\
<div class=\"line\">        fTrimNumLoopsCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IInt32Property(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_nloops&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Number of curves</span></div>\n\
<div class=\"line\">        fTrimNumCurvesCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IInt32ArrayProperty(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_ncurves&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Number of control points</span></div>\n\
<div class=\"line\">        fTrimNumVerticesCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IInt32ArrayProperty(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_n&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Curve Orders</span></div>\n\
<div class=\"line\">        fTrimOrderCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IInt32ArrayProperty(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_order&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Curve Knots</span></div>\n\
<div class=\"line\">        fTrimKnotCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IFloatArrayProperty(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_knot&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Curve U</span></div>\n\
<div class=\"line\">        fTrimUCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IFloatArrayProperty(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_u&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Curve V</span></div>\n\
<div class=\"line\">        fTrimVCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IFloatArrayProperty(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_v&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Curve W</span></div>\n\
<div class=\"line\">        fTrimWCache.init(</div>\n\
<div class=\"line\">            Alembic::Abc::IFloatArrayProperty(abcNurbs.getPtr(), <span class=\"stringliteral\">&quot;trim_w&quot;</span>));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">NurbsTessellator::~NurbsTessellator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// free the property readers</span></div>\n\
<div class=\"line\">    fPositionsCache.reset();</div>\n\
<div class=\"line\">    fNumUCache.reset();</div>\n\
<div class=\"line\">    fNumVCache.reset();</div>\n\
<div class=\"line\">    fUOrderCache.reset();</div>\n\
<div class=\"line\">    fVOrderCache.reset();</div>\n\
<div class=\"line\">    fUKnotCache.reset();</div>\n\
<div class=\"line\">    fVKnotCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fPositionWeightsCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fTrimNumLoopsCache.reset();</div>\n\
<div class=\"line\">    fTrimNumCurvesCache.reset();</div>\n\
<div class=\"line\">    fTrimNumVerticesCache.reset();</div>\n\
<div class=\"line\">    fTrimOrderCache.reset();</div>\n\
<div class=\"line\">    fTrimKnotCache.reset();</div>\n\
<div class=\"line\">    fTrimUCache.reset();</div>\n\
<div class=\"line\">    fTrimVCache.reset();</div>\n\
<div class=\"line\">    fTrimWCache.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> NurbsTessellator::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> DataProvider::valid() &amp;&amp;</div>\n\
<div class=\"line\">            fPositionsCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fNumUCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fNumVCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fUOrderCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fVOrderCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fUKnotCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            fVKnotCache.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const ShapeSample&gt; </div>\n\
<div class=\"line\">NurbsTessellator::getSample(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// empty mesh</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWireIndices || !fTriangleIndices) {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ShapeSample&gt; sample =</div>\n\
<div class=\"line\">            ShapeSample::createEmptySample(seconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// triangle indices</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Currently, we only have 1 group</span></div>\n\
<div class=\"line\">    std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; triangleVertIndices;</div>\n\
<div class=\"line\">    triangleVertIndices.push_back(IndexBuffer::create(fTriangleIndices));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ShapeSample&gt; sample = ShapeSample::create(</div>\n\
<div class=\"line\">        seconds,                                     <span class=\"comment\">// time (in seconds)</span></div>\n\
<div class=\"line\">        fWireIndices-&gt;size() / 2,                    <span class=\"comment\">// number of wireframes</span></div>\n\
<div class=\"line\">        fPositions-&gt;size() / 3,                      <span class=\"comment\">// number of vertices</span></div>\n\
<div class=\"line\">        IndexBuffer::create(fWireIndices),           <span class=\"comment\">// wireframe indices</span></div>\n\
<div class=\"line\">        triangleVertIndices,                         <span class=\"comment\">// triangle indices (1 group)</span></div>\n\
<div class=\"line\">        VertexBuffer::createPositions(fPositions),   <span class=\"comment\">// position</span></div>\n\
<div class=\"line\">        getBoundingBox(),                            <span class=\"comment\">// bounding box</span></div>\n\
<div class=\"line\">        Config::kDefaultGrayColor,                   <span class=\"comment\">// diffuse color</span></div>\n\
<div class=\"line\">        isVisible()</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormals) {</div>\n\
<div class=\"line\">        sample-&gt;setNormals(</div>\n\
<div class=\"line\">            VertexBuffer::createNormals(fNormals));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">        sample-&gt;setUVs(</div>\n\
<div class=\"line\">            VertexBuffer::createUVs(fUVs));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval NurbsTessellator::updateCache(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TimeInterval validityInterval(DataProvider::updateCache(time));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update caches</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> positionsChanged = fPositionsCache.setTime(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> topologyChanged = fNumUCache.setTime(time);</div>\n\
<div class=\"line\">    topologyChanged      = fNumVCache.setTime(time)   || topologyChanged;</div>\n\
<div class=\"line\">    topologyChanged      = fUOrderCache.setTime(time) || topologyChanged;</div>\n\
<div class=\"line\">    topologyChanged      = fVOrderCache.setTime(time) || topologyChanged;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> knotChanged = fUKnotCache.setTime(time);</div>\n\
<div class=\"line\">    knotChanged      = fVKnotCache.setTime(time) || knotChanged;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fPositionWeightsCache.valid()) {</div>\n\
<div class=\"line\">        positionsChanged = fPositionWeightsCache.setTime(time) || positionsChanged;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> trimCurvesChanged = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fTrimNumLoopsCache.valid()) {</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimNumLoopsCache.setTime(time)    || trimCurvesChanged;</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimNumCurvesCache.setTime(time)   || trimCurvesChanged;</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimNumVerticesCache.setTime(time) || trimCurvesChanged;</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimOrderCache.setTime(time)       || trimCurvesChanged;</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimKnotCache.setTime(time)        || trimCurvesChanged;</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimUCache.setTime(time)           || trimCurvesChanged;</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimVCache.setTime(time)           || trimCurvesChanged;</div>\n\
<div class=\"line\">        trimCurvesChanged = fTrimWCache.setTime(time)           || trimCurvesChanged;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// return the new cache valid interval</span></div>\n\
<div class=\"line\">    validityInterval &amp;= fPositionsCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fNumUCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fNumVCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fUOrderCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fVOrderCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fUKnotCache.getValidityInterval();</div>\n\
<div class=\"line\">    validityInterval &amp;= fVKnotCache.getValidityInterval();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fPositionWeightsCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fPositionWeightsCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fTrimNumLoopsCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimNumLoopsCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimNumCurvesCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimNumVerticesCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimOrderCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimKnotCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimUCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimVCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fTrimWCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// do a minimal check for the consistency</span></div>\n\
<div class=\"line\">    check();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set Alembic INuPatch to Maya MFnNurbsSurface</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> rebuild = topologyChanged || knotChanged || </div>\n\
<div class=\"line\">                   trimCurvesChanged || fNurbsData.object().isNull();</div>\n\
<div class=\"line\">    setNurbs(rebuild, positionsChanged);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// tessellate Maya NURBS and convert to poly</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (rebuild || positionsChanged) {</div>\n\
<div class=\"line\">        tessellate();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isVisible()) {</div>\n\
<div class=\"line\">        convertToPoly();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> NurbsTessellator::check()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// reset valid flag</span></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    fSurfaceValid = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// numKnots = numCV + degree + 1</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> uDegree   = fUOrderCache.getValue() - 1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vDegree   = fVOrderCache.getValue() - 1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numUCV    = fNumUCache.getValue();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numVCV    = fNumVCache.getValue();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numUKnots = (int)fUKnotCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numVKnots = (int)fVKnotCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numUKnots != numUCV + uDegree + 1 || numVKnots != numVCV + vDegree + 1) {</div>\n\
<div class=\"line\">        fSurfaceValid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        DisplayWarning(kBadNurbsMsg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// numCV = numU * numV</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numCVs = numUCV * numVCV;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numCVs * 3 != fPositionsCache.getValue()-&gt;size()) {</div>\n\
<div class=\"line\">        fSurfaceValid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        DisplayWarning(kBadNurbsMsg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// numCV = numWeight</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fPositionWeightsCache.valid() &amp;&amp;</div>\n\
<div class=\"line\">            numCVs != fPositionWeightsCache.getValue()-&gt;size()) {</div>\n\
<div class=\"line\">        fSurfaceValid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        DisplayWarning(kBadNurbsMsg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> NurbsTessellator::setNurbs(<span class=\"keywordtype\">bool</span> rebuild, <span class=\"keywordtype\">bool</span> positionsChanged)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fSurfaceValid) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// invalid NURBS</span></div>\n\
<div class=\"line\">        fNurbsData.setObject(<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">        fNurbs.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Number of control points in U/V direction</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numU = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numV = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> mayaPositions;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (rebuild || positionsChanged) {</div>\n\
<div class=\"line\">        numU = fNumUCache.getValue();</div>\n\
<div class=\"line\">        numV = fNumVCache.getValue();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Positions and their weights</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positions = fPositionsCache.getValue()-&gt;<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#aab050cd677ada1564ca558d3840628cd\">get</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positionWeights = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fPositionWeightsCache.valid()) {</div>\n\
<div class=\"line\">            positionWeights = fPositionWeightsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// allocate memory for positions</span></div>\n\
<div class=\"line\">        mayaPositions.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(numU * numV);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Maya is U-major and has inversed V</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> u = 0; u &lt; numU; u++) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v = 0; v &lt; numV; v++) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> alembicIndex = v * numU + u;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> mayaIndex    = u * numV + (numV - v - 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point(positions[alembicIndex * 3 + 0],</div>\n\
<div class=\"line\">                             positions[alembicIndex * 3 + 1],</div>\n\
<div class=\"line\">                             positions[alembicIndex * 3 + 2],</div>\n\
<div class=\"line\">                             1.0);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (positionWeights) {</div>\n\
<div class=\"line\">                    point.w = positionWeights[alembicIndex];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                mayaPositions[mayaIndex] = point;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (rebuild) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Nurbs degree</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> uDegree = fUOrderCache.getValue() - 1;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vDegree = fVOrderCache.getValue() - 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Nurbs form</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Alemblic file does not record the form of nurb surface, we get the form</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// by checking the CV data. If the first degree number CV overlap the last</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// degree number CV, then the form is kPeriodic. If only the first CV overlaps</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the last CV, then the form is kClosed.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66\">MFnNurbsSurface::Form</a> uForm = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a0ed9d38a35a60087a093558dad96d882\">MFnNurbsSurface::kPeriodic</a>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66\">MFnNurbsSurface::Form</a> vForm = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a0ed9d38a35a60087a093558dad96d882\">MFnNurbsSurface::kPeriodic</a>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// Check all curves</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> notOpen = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v = 0; notOpen &amp;&amp; v &lt; numV; v++) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> u = 0; u &lt; uDegree; u++) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> firstIndex = u * numV + (numV - v - 1);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> lastPeriodicIndex = (numU - uDegree + u) * numV + (numV - v - 1);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!mayaPositions[firstIndex].isEquivalent(mayaPositions[lastPeriodicIndex])) {</div>\n\
<div class=\"line\">                    uForm = <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsSurface::kOpen</a>;</div>\n\
<div class=\"line\">                    notOpen = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uForm == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsSurface::kOpen</a>) {</div>\n\
<div class=\"line\">            uForm = <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a44be8f61450ed22be5adcc881a95570f\">MFnNurbsSurface::kClosed</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v = 0; v &lt; numV; v++) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> lastUIndex = (numU - 1) * numV + (numV - v - 1);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!mayaPositions[numV-v-1].isEquivalent(mayaPositions[lastUIndex])) {</div>\n\
<div class=\"line\">                    uForm = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsSurface::kOpen</a>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        notOpen = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> u = 0; notOpen &amp;&amp; u &lt; numU; u++) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> v = 0; v &lt; vDegree; v++) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> firstIndex = u * numV + (numV - v - 1);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> lastPeriodicIndex =  u * numV + (vDegree - v - 1); <span class=\"comment\">//numV - (numV - vDegree + v) - 1;</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!mayaPositions[firstIndex].isEquivalent(mayaPositions[lastPeriodicIndex])) {</div>\n\
<div class=\"line\">                    vForm = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsSurface::kOpen</a>;</div>\n\
<div class=\"line\">                    notOpen = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vForm == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsSurface::kOpen</a>) {</div>\n\
<div class=\"line\">            vForm = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a44be8f61450ed22be5adcc881a95570f\">MFnNurbsSurface::kClosed</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> u = 0; u &lt; numU; u++) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!mayaPositions[u*numV+(numV-1)].isEquivalent(mayaPositions[u*numV])) {</div>\n\
<div class=\"line\">                    vForm = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_surface.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsSurface::kOpen</a>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Knots</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//   Dispose the leading and trailing knots</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//   Alembic duplicate CVs if the form is not kOpen</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//   For more information, refer to MFnNurbsSurface</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numUKnot = (<span class=\"keywordtype\">unsigned</span> int)fUKnotCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numVKnot = (<span class=\"keywordtype\">unsigned</span> int)fVKnotCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* uKnot    = fUKnotCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* vKnot    = fVKnotCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">        <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> mayaUKnots(uKnot + 1, numUKnot - 2);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> mayaVKnots(vKnot + 1, numVKnot - 2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the Nurbs</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> nurbsData = fNurbsData.create();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> nurbs     = fNurbs.create(mayaPositions,</div>\n\
<div class=\"line\">                                          mayaUKnots, mayaVKnots,</div>\n\
<div class=\"line\">                                          uDegree, vDegree,</div>\n\
<div class=\"line\">                                          uForm,</div>\n\
<div class=\"line\">                                          vForm,</div>\n\
<div class=\"line\">                                          <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">                                          nurbsData,</div>\n\
<div class=\"line\">                                          &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess || nurbs.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// creation failure</span></div>\n\
<div class=\"line\">            fNurbsData.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">            fNurbs.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Trim Nurbs</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fTrimNumLoopsCache.valid()) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> trimNumLoops = fTrimNumLoopsCache.getValue();</div>\n\
<div class=\"line\">            <span class=\"comment\">// mayaV = offsetV - alembicV</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> startU, endU, startV, endV;</div>\n\
<div class=\"line\">            fNurbs.getKnotDomain(startU, endU, startV, endV);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> offsetV = startV + endV;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html\">MTrimBoundaryArray</a> boundaryArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* trimNumCurves = </div>\n\
<div class=\"line\">                    fTrimNumCurvesCache.getValue()-&gt;<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html#af99b4425d90f73b88634ec50327ae48a\">get</a>();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* trimNumVertices =</div>\n\
<div class=\"line\">                    fTrimNumVerticesCache.getValue()-&gt;<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a8223a66b2c37fdf38b8a95b53566a7a7\">get</a>();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* trimOrder =</div>\n\
<div class=\"line\">                    fTrimOrderCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* trimKnot = fTrimKnotCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* trimU    = fTrimUCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* trimV    = fTrimVCache.getValue()-&gt;get();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* trimW    = fTrimWCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; trimNumLoops; i++) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set up curves for each boundary</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCurves = *trimNumCurves;</div>\n\
<div class=\"line\">                <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> boundary(numCurves);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; numCurves; j++) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Set up one curve</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numVertices = *trimNumVertices;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> degree      = *trimOrder - 1;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numKnots    = numVertices + degree + 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> controlPoints;</div>\n\
<div class=\"line\">                    controlPoints.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(numVertices);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; numVertices; k++) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point(trimU[k], offsetV - trimV[k], 0, trimW[k]);</div>\n\
<div class=\"line\">                        controlPoints[k] = point;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> knots(trimKnot + 1, numKnots - 2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Create the curve</span></div>\n\
<div class=\"line\">                    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve_data.html\">MFnNurbsCurveData</a> curveData;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curveDataObject = curveData.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html\">MFnNurbsCurve</a> curve;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> curveObject  = curve.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a4b11e346021c91845e781e9d7d06859f\">create</a>(controlPoints, knots, degree,</div>\n\
<div class=\"line\">                            <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html#a99f5203c7742378941e34926280c8e66a7fb3bf49ba349ca1a266be41df447b5b\">MFnNurbsCurve::kOpen</a>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, curveDataObject, &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status == MS::kSuccess &amp;&amp; !curveObject.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">                        boundary[j] = curveDataObject;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// next curve</span></div>\n\
<div class=\"line\">                    trimNumVertices++;</div>\n\
<div class=\"line\">                    trimOrder++;</div>\n\
<div class=\"line\">                    trimKnot += numKnots;</div>\n\
<div class=\"line\">                    trimU    += numVertices;</div>\n\
<div class=\"line\">                    trimV    += numVertices;</div>\n\
<div class=\"line\">                    trimW    += numVertices;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                boundaryArray.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html#a58aa0ffd87a8ca32834b827e1452f23e\">append</a>(boundary);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// next loop</span></div>\n\
<div class=\"line\">                trimNumCurves++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html\">MTrimBoundaryArray</a> oneRegion;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; boundaryArray.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i &gt; 0) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> loopData = boundaryArray.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html#a8c5c9d056371db0b771e14526c08b520\">getMergedBoundary</a>(i, &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_nurbs_curve.html\">MFnNurbsCurve</a> loop(loopData, &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status != MS::kSuccess) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Check whether this loop is an outer boundary.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> isOuterBoundary = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span>       length  = loop.length();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> segment = std::max(loop.numCVs(), 10);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> curvePoints;</div>\n\
<div class=\"line\">                    curvePoints.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(segment);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; segment; j++) {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> param = loop.findParamFromLength(length * j / segment);</div>\n\
<div class=\"line\">                        loop.getPointAtParam(param, curvePoints[j]);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Find the right most curve point</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>       rightMostPoint = curvePoints[0];</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> rightMostIndex = 0;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; curvePoints.length(); j++) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (rightMostPoint.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &lt; curvePoints[j].x) {</div>\n\
<div class=\"line\">                            rightMostPoint = curvePoints[j];</div>\n\
<div class=\"line\">                            rightMostIndex = j;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Find the vertex just before and after the right most vertex</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> beforeIndex = (rightMostIndex == 0) ? curvePoints.length() - 1 : rightMostIndex - 1;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> afterIndex  = (rightMostIndex == curvePoints.length() - 1) ? 0 : rightMostIndex + 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; curvePoints.length(); j++) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (fabs(curvePoints[beforeIndex].x - curvePoints[rightMostIndex].x) &lt; 1e-5) {</div>\n\
<div class=\"line\">                            beforeIndex = (beforeIndex == 0) ? curvePoints.length() - 1 : beforeIndex - 1;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; curvePoints.length(); j++) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (fabs(curvePoints[afterIndex].x - curvePoints[rightMostIndex].x) &lt; 1e-5) {</div>\n\
<div class=\"line\">                            afterIndex = (afterIndex == curvePoints.length() - 1) ? 0 : afterIndex + 1;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// failed. not a closed curve.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fabs(curvePoints[afterIndex].x - curvePoints[rightMostIndex].x) &lt; 1e-5 &amp;&amp;</div>\n\
<div class=\"line\">                        fabs(curvePoints[beforeIndex].x - curvePoints[rightMostIndex].x) &lt; 1e-5) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Compute the cross product</span></div>\n\
<div class=\"line\">                    <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vector1 = curvePoints[beforeIndex] - curvePoints[rightMostIndex];</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vector2 = curvePoints[afterIndex]  - curvePoints[rightMostIndex];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ((vector1 ^ vector2).z &lt; 0) {</div>\n\
<div class=\"line\">                        isOuterBoundary = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Trim the NURBS surface. An outer boundary starts a new region.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (isOuterBoundary) {</div>\n\
<div class=\"line\">                        status = fNurbs.trimWithBoundaries(oneRegion, <span class=\"keyword\">false</span>, 1e-3, 1e-5, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (status != MS::kSuccess) {</div>\n\
<div class=\"line\">                            fNurbsData.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">                            fNurbs.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        oneRegion.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                oneRegion.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_trim_boundary_array.html#a58aa0ffd87a8ca32834b827e1452f23e\">append</a>(boundaryArray[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            status = fNurbs.trimWithBoundaries(oneRegion, <span class=\"keyword\">false</span>, 1e-3, 1e-5, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status != MS::kSuccess) {</div>\n\
<div class=\"line\">                fNurbsData.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">                fNurbs.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        assert(!fNurbsData.object().isNull());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positionsChanged) {</div>\n\
<div class=\"line\">            fNurbs.setCVs(mayaPositions);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> NurbsTessellator::tessellate()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fSurfaceValid || fNurbsData.object().isNull()) {</div>\n\
<div class=\"line\">        fPolyMeshData.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">        fPolyMesh.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the mesh data to own the mesh</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> polyMeshData = fPolyMeshData.create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set up parameters</span></div>\n\
<div class=\"line\">    <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_tesselation_params.html\">MTesselationParams</a> params(</div>\n\
<div class=\"line\">        <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_tesselation_params.html#a5b2a7c1776e72b64f6b50fc95871c146a0d4e0874a457fb879a20aa067222b65b\">MTesselationParams::kStandardFitFormat</a>, <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_tesselation_params.html#a05266719b7393f22777306c9b4faf514aa2c70dd76c8172a9298334473c914304\">MTesselationParams::kTriangles</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tess the NURBS to triangles</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> polyObject = fNurbs.tesselate(params, polyMeshData, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess || !polyObject.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// tessellation failed</span></div>\n\
<div class=\"line\">        fPolyMeshData.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">        fPolyMesh.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = fPolyMesh.setObject(polyObject);</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> NurbsTessellator::convertToPoly()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fSurfaceValid || fPolyMeshData.object().isNull() ||</div>\n\
<div class=\"line\">            fPolyMesh.numVertices() == 0 || fPolyMesh.numFaceVertices() == 0) {</div>\n\
<div class=\"line\">        fTriangleIndices.reset();</div>\n\
<div class=\"line\">        fWireIndices.reset();</div>\n\
<div class=\"line\">        fPositions.reset();</div>\n\
<div class=\"line\">        fNormals.reset();</div>\n\
<div class=\"line\">        fUVs.reset();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    MayaMeshExtractor&lt;IndexBuffer::index_t&gt; extractor(fPolyMeshData.object());</div>\n\
<div class=\"line\">    extractor.setWantUVs(fNeedUVs);</div>\n\
<div class=\"line\">    extractor.compute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fTriangleIndices = extractor.triangleIndices();</div>\n\
<div class=\"line\">    fWireIndices     = extractor.wireIndices();</div>\n\
<div class=\"line\">    fPositions       = extractor.positions();</div>\n\
<div class=\"line\">    fNormals         = extractor.normals();</div>\n\
<div class=\"line\">    fUVs.reset();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNeedUVs) {</div>\n\
<div class=\"line\">        fUVs         = extractor.uvs();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS SubDSmoother</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubDSmoother::SubDSmoother(</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ISubDSchema&amp;  abcSubD,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span>                      needUVs)</div>\n\
<div class=\"line\">    : PolyDataProvider(abcSubD, needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Face Indices</span></div>\n\
<div class=\"line\">    fFaceIndicesCache.init(abcSubD.getFaceIndicesProperty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Crease Edges</span></div>\n\
<div class=\"line\">    Alembic::Abc::IInt32ArrayProperty creaseIndicesProp =</div>\n\
<div class=\"line\">            abcSubD.getCreaseIndicesProperty();</div>\n\
<div class=\"line\">    Alembic::Abc::IInt32ArrayProperty creaseLengthsProp =</div>\n\
<div class=\"line\">            abcSubD.getCreaseLengthsProperty();</div>\n\
<div class=\"line\">    Alembic::Abc::IFloatArrayProperty creaseSharpnessesProp = </div>\n\
<div class=\"line\">            abcSubD.getCreaseSharpnessesProperty();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (creaseIndicesProp.valid() &amp;&amp;</div>\n\
<div class=\"line\">            creaseLengthsProp.valid() &amp;&amp;</div>\n\
<div class=\"line\">            creaseSharpnessesProp.valid()) {</div>\n\
<div class=\"line\">        fCreaseIndicesCache.init(creaseIndicesProp);</div>\n\
<div class=\"line\">        fCreaseLengthsCache.init(creaseLengthsProp);</div>\n\
<div class=\"line\">        fCreaseSharpnessesCache.init(creaseSharpnessesProp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Crease Vertices</span></div>\n\
<div class=\"line\">    Alembic::Abc::IInt32ArrayProperty cornerIndicesProp = </div>\n\
<div class=\"line\">            abcSubD.getCornerIndicesProperty();</div>\n\
<div class=\"line\">    Alembic::Abc::IFloatArrayProperty cornerSharpnessesProp =</div>\n\
<div class=\"line\">            abcSubD.getCornerSharpnessesProperty();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cornerIndicesProp.valid() &amp;&amp; cornerSharpnessesProp.valid()) {</div>\n\
<div class=\"line\">        fCornerIndicesCache.init(cornerIndicesProp);</div>\n\
<div class=\"line\">        fCornerSharpnessesCache.init(cornerSharpnessesProp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Invisible Faces</span></div>\n\
<div class=\"line\">    Alembic::Abc::IInt32ArrayProperty holesProp =</div>\n\
<div class=\"line\">            abcSubD.getHolesProperty();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (holesProp.valid()) {</div>\n\
<div class=\"line\">        fHolesCache.init(holesProp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// UVs</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNeedUVs) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IV2fGeomParam UVs = abcSubD.getUVsParam();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (UVs.valid()) {</div>\n\
<div class=\"line\">            fUVsScope = UVs.getScope();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fUVsScope == Alembic::AbcGeom::kVaryingScope ||</div>\n\
<div class=\"line\">                    fUVsScope == Alembic::AbcGeom::kVertexScope ||</div>\n\
<div class=\"line\">                    fUVsScope == Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">                fUVsCache.init(UVs.getValueProperty());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (UVs.isIndexed()) {</div>\n\
<div class=\"line\">                    fUVIndicesCache.init(UVs.getIndexProperty());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubDSmoother::~SubDSmoother()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// free the property readers</span></div>\n\
<div class=\"line\">    fFaceIndicesCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fCreaseIndicesCache.reset();</div>\n\
<div class=\"line\">    fCreaseLengthsCache.reset();</div>\n\
<div class=\"line\">    fCreaseSharpnessesCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fCornerIndicesCache.reset();</div>\n\
<div class=\"line\">    fCornerSharpnessesCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fHolesCache.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fUVsScope = Alembic::AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\">    fUVsCache.reset();</div>\n\
<div class=\"line\">    fUVIndicesCache.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> SubDSmoother::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> PolyDataProvider::valid() &amp;&amp;</div>\n\
<div class=\"line\">            fFaceIndicesCache.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;const ShapeSample&gt; </div>\n\
<div class=\"line\">SubDSmoother::getSample(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// empty mesh</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWireIndices || !fTriangleIndices) {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;ShapeSample&gt; sample =</div>\n\
<div class=\"line\">            ShapeSample::createEmptySample(seconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// triangle indices</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Currently, we only have 1 group</span></div>\n\
<div class=\"line\">    std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt; triangleVertIndices;</div>\n\
<div class=\"line\">    triangleVertIndices.push_back(IndexBuffer::create(fTriangleIndices));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ShapeSample&gt; sample = ShapeSample::create(</div>\n\
<div class=\"line\">        seconds,                                     <span class=\"comment\">// time (in seconds)</span></div>\n\
<div class=\"line\">        fWireIndices-&gt;size() / 2,                    <span class=\"comment\">// number of wireframes</span></div>\n\
<div class=\"line\">        fPositions-&gt;size() / 3,                      <span class=\"comment\">// number of vertices</span></div>\n\
<div class=\"line\">        IndexBuffer::create(fWireIndices),           <span class=\"comment\">// wireframe indices</span></div>\n\
<div class=\"line\">        triangleVertIndices,                         <span class=\"comment\">// triangle indices (1 group)</span></div>\n\
<div class=\"line\">        VertexBuffer::createPositions(fPositions),   <span class=\"comment\">// position</span></div>\n\
<div class=\"line\">        getBoundingBox(),                            <span class=\"comment\">// bounding box</span></div>\n\
<div class=\"line\">        Config::kDefaultGrayColor,                   <span class=\"comment\">// diffuse color</span></div>\n\
<div class=\"line\">        isVisible()</div>\n\
<div class=\"line\">    );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNormals) {</div>\n\
<div class=\"line\">        sample-&gt;setNormals(</div>\n\
<div class=\"line\">            VertexBuffer::createNormals(fNormals));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVs) {</div>\n\
<div class=\"line\">        sample-&gt;setUVs(</div>\n\
<div class=\"line\">            VertexBuffer::createUVs(fUVs));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sample;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval SubDSmoother::updateCache(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// update faceCounts/position cache here so that we can detect topology/position change.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// next setTime() in DataProvider::updateCache() simply returns early</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> topologyChanged = fFaceCountsCache.setTime(time);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> positionChanged = fPositionsCache.setTime(time);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval validityInterval(PolyDataProvider::updateCache(time));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update caches</span></div>\n\
<div class=\"line\">    topologyChanged = fFaceIndicesCache.setTime(time) || topologyChanged;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> creaseEdgeChanged = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCreaseSharpnessesCache.valid()) {</div>\n\
<div class=\"line\">        creaseEdgeChanged = fCreaseIndicesCache.setTime(time) || creaseEdgeChanged;</div>\n\
<div class=\"line\">        creaseEdgeChanged = fCreaseLengthsCache.setTime(time) || creaseEdgeChanged;</div>\n\
<div class=\"line\">        creaseEdgeChanged = fCreaseSharpnessesCache.setTime(time) || creaseEdgeChanged;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> creaseVertexChanged = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCornerSharpnessesCache.valid()) {</div>\n\
<div class=\"line\">        creaseVertexChanged = fCornerIndicesCache.setTime(time) || creaseVertexChanged;</div>\n\
<div class=\"line\">        creaseVertexChanged = fCornerSharpnessesCache.setTime(time) || creaseVertexChanged;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> invisibleFaceChanged = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fHolesCache.valid()) {</div>\n\
<div class=\"line\">        invisibleFaceChanged = fHolesCache.setTime(time);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> uvChanged = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        uvChanged = fUVsCache.setTime(time);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">            uvChanged = fUVIndicesCache.setTime(time) || uvChanged;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// return the new cache valid interval</span></div>\n\
<div class=\"line\">    validityInterval &amp;= fFaceIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCreaseSharpnessesCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fCreaseIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fCreaseLengthsCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fCreaseSharpnessesCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCornerSharpnessesCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fCornerIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">        validityInterval &amp;= fCornerSharpnessesCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fHolesCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fHolesCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fUVsCache.getValidityInterval();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">            validityInterval &amp;= fUVIndicesCache.getValidityInterval();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// do a minimal check for the consistency</span></div>\n\
<div class=\"line\">    check();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (topologyChanged || creaseEdgeChanged || creaseVertexChanged ||</div>\n\
<div class=\"line\">            invisibleFaceChanged || fSubDData.object().isNull()) {</div>\n\
<div class=\"line\">        rebuildSubD();</div>\n\
<div class=\"line\">        setCreaseEdges();</div>\n\
<div class=\"line\">        setCreaseVertices();</div>\n\
<div class=\"line\">        setInvisibleFaces();</div>\n\
<div class=\"line\">        setUVs();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positionChanged) {</div>\n\
<div class=\"line\">            setPositions();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uvChanged) {</div>\n\
<div class=\"line\">            setUVs();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isVisible()) {</div>\n\
<div class=\"line\">        convertToPoly();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::check()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numFaceIndices = fFaceIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts       = fPositionsCache.getValue()-&gt;size() / 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// UVs</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numExpectedUVs = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsScope == Alembic::AbcGeom::kVaryingScope ||</div>\n\
<div class=\"line\">            fUVsScope == Alembic::AbcGeom::kVertexScope) {</div>\n\
<div class=\"line\">        numExpectedUVs = numVerts;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fUVsScope == Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">        numExpectedUVs = numFaceIndices;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numActualUVs = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">            numActualUVs = fUVIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            numActualUVs = fUVsCache.getValue()-&gt;size() / 2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear previous result</span></div>\n\
<div class=\"line\">    fCheckedUVsScope = Alembic::AbcGeom::kUnknownScope;</div>\n\
<div class=\"line\">    fCheckedUVs.reset();</div>\n\
<div class=\"line\">    fCheckedUVIndices.reset();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// forward </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numExpectedUVs == numActualUVs) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fUVsCache.valid()) {</div>\n\
<div class=\"line\">            fCheckedUVsScope = fUVsScope;</div>\n\
<div class=\"line\">            fCheckedUVs      = fUVsCache.getValue();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fUVIndicesCache.valid()) {</div>\n\
<div class=\"line\">                fCheckedUVIndices = fUVIndicesCache.getValue();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        DisplayWarning(kBadUVsMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::rebuildSubD()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numFaceCounts           = fFaceCountsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* faceCounts = fFaceCountsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numFaceIndices                   = fFaceIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* faceIndices = fFaceIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numPositions    = fPositionsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positions = fPositionsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVertices = numPositions / 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Build Maya data structure</span></div>\n\
<div class=\"line\">    <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> mayaCounts, mayaConnects;</div>\n\
<div class=\"line\">    mayaCounts.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numFaceCounts);</div>\n\
<div class=\"line\">    mayaConnects.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numFaceIndices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0, polyVertOffset = 0; i &lt; numFaceCounts; i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceCount = mayaCounts[i] = faceCounts[i];</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; faceCount; j++) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Alembic&#39;s polygon winding is CW</span></div>\n\
<div class=\"line\">            mayaConnects[polyVertOffset + j] = faceIndices[polyVertOffset + faceCount - j - 1];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        polyVertOffset += faceCount;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> mayaPositions;</div>\n\
<div class=\"line\">    mayaPositions.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numVertices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numVertices; i++) {</div>\n\
<div class=\"line\">        mayaPositions[i] = <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a>(positions[i * 3 + 0],</div>\n\
<div class=\"line\">                                       positions[i * 3 + 1],</div>\n\
<div class=\"line\">                                       positions[i * 3 + 2]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create Maya mesh</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> subdData = fSubDData.create(&amp;status);</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fSubD.setCheckSamePointTwice(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> subd = fSubD.create((<span class=\"keywordtype\">int</span>)numVertices, (<span class=\"keywordtype\">int</span>)numFaceCounts,</div>\n\
<div class=\"line\">            mayaPositions, mayaCounts, mayaConnects, subdData, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess || subd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">        fSubDData.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">        fSubD.setObject(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::setPositions()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSubDData.object().isNull()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numPositions    = fPositionsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* positions = fPositionsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVertices = numPositions / 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set vertex positions only</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> mayaPositions;</div>\n\
<div class=\"line\">    mayaPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numVertices);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numVertices; i++) {</div>\n\
<div class=\"line\">        mayaPositions[i] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a>(positions[i * 3 + 0],</div>\n\
<div class=\"line\">            positions[i * 3 + 1],</div>\n\
<div class=\"line\">            positions[i * 3 + 2]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fSubD.setPoints(mayaPositions);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::setCreaseEdges()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSubDData.object().isNull() ||</div>\n\
<div class=\"line\">            !fCreaseIndicesCache.valid() ||</div>\n\
<div class=\"line\">            !fCreaseLengthsCache.valid() ||</div>\n\
<div class=\"line\">            !fCreaseSharpnessesCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>           numCreaseIndices = fCreaseIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* creaseIndices = fCreaseIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>           numCreaseLengths = fCreaseLengthsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* creaseLengths = fCreaseLengthsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>    numCreaseSharpnesses = fCreaseSharpnessesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* creaseSharpnesses = fCreaseSharpnessesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numCreaseSharpnesses == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Prepare (startVertex, endVertex) =&gt; (edgeId) lookup map</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;TEdge,int&gt; EdgeMap;</div>\n\
<div class=\"line\">    EdgeMap edgeMap(<span class=\"keywordtype\">size_t</span>(fSubD.numEdges() / 0.75f));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numEdges = fSubD.numEdges();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numEdges; i++) {</div>\n\
<div class=\"line\">        int2 vertexList;</div>\n\
<div class=\"line\">        fSubD.getEdgeVertices(i, vertexList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vertexList[0] &gt; vertexList[1]) {</div>\n\
<div class=\"line\">            std::swap(vertexList[0], vertexList[1]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        edgeMap.insert(std::make_pair(std::make_pair(vertexList[0], vertexList[1]), i));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill Maya crease edges</span></div>\n\
<div class=\"line\">    <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>   mayaEdgeIds;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> mayaCreaseData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0, index = 0; i &lt; numCreaseLengths &amp;&amp; i &lt; numCreaseSharpnesses; i++) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// length should always be 2</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length    = creaseLengths[i];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>        sharpness = creaseSharpnesses[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (length == 2 &amp;&amp; index + length &lt;= numCreaseIndices) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// find the edge ID from vertex ID</span></div>\n\
<div class=\"line\">            std::pair&lt;int,int&gt; edge = std::make_pair(creaseIndices[index],creaseIndices[index+1]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (edge.first &gt; edge.second) {</div>\n\
<div class=\"line\">                std::swap(edge.first, edge.second);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            EdgeMap::iterator iter = edgeMap.find(edge);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iter != edgeMap.end() &amp;&amp; iter-&gt;second &lt; numEdges) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// edge found, store it crease data</span></div>\n\
<div class=\"line\">                mayaEdgeIds.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a29ccefc020c96f15e099924ebe83eb07\">append</a>(iter-&gt;second);</div>\n\
<div class=\"line\">                mayaCreaseData.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#aafcfe8ff7afecc2dee4defccbdfb8e55\">append</a>(sharpness);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        index += length;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set Maya crease edges</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    status = fSubD.setCreaseEdges(mayaEdgeIds, mayaCreaseData);</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::setCreaseVertices()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSubDData.object().isNull() ||</div>\n\
<div class=\"line\">            !fCornerIndicesCache.valid() ||</div>\n\
<div class=\"line\">            !fCornerSharpnessesCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>           numCornerIndices = fCornerIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* cornerIndices = fCornerIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>    numCornerSharpnesses = fCornerSharpnessesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* cornerSharpnesses = fCornerSharpnessesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cornerSharpnesses == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill Maya crease vertices</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>   mayaVertexIds;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> mayaCreaseData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numCreaseVertices = std::min(numCornerIndices, numCornerSharpnesses);</div>\n\
<div class=\"line\">    mayaVertexIds.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numCreaseVertices);</div>\n\
<div class=\"line\">    mayaCreaseData.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numCreaseVertices);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numCreaseVertices; i++) {</div>\n\
<div class=\"line\">        mayaVertexIds[i]  = cornerIndices[i];</div>\n\
<div class=\"line\">        mayaCreaseData[i] = cornerSharpnesses[i];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set Maya crease vertices</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    status = fSubD.setCreaseVertices(mayaVertexIds, mayaCreaseData);</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::setInvisibleFaces()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSubDData.object().isNull() ||</div>\n\
<div class=\"line\">            !fHolesCache.valid()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>           numHoles = fHolesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* holes = fHolesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numHoles == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill Maya invisible faces</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> mayaFaceIds(holes, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numHoles);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set Maya invisible faces</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    status = fSubD.setInvisibleFaces(mayaFaceIds);</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::setUVs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSubDData.object().isNull()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// unsupported scope</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCheckedUVsScope != Alembic::AbcGeom::kVaryingScope &amp;&amp; </div>\n\
<div class=\"line\">            fCheckedUVsScope != Alembic::AbcGeom::kVertexScope &amp;&amp;</div>\n\
<div class=\"line\">            fCheckedUVsScope != Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// no UVs</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fCheckedUVs) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// input data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>           numFaceCounts = fFaceCountsCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* faceCounts = fFaceCountsCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                      numFaceIndices = fFaceIndicesCache.getValue()-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* faceIndices = fFaceIndicesCache.getValue()-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>    numUVs = fCheckedUVs-&gt;size();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* UVs = fCheckedUVs-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> IndexBuffer::index_t* uvIndices = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCheckedUVIndices) {</div>\n\
<div class=\"line\">        uvIndices    = fCheckedUVIndices-&gt;get();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear Maya UVs if the number of UVs does not equal</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// MFnMesh::setUVs() only allow uv arrays equal or larger than current UV set size</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keywordtype\">int</span>(numUVs) != fSubD.numUVs()) {</div>\n\
<div class=\"line\">        fSubD.clearUVs();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// no UVs, we are done </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numUVs == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill Maya UVs</span></div>\n\
<div class=\"line\">    <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> mayaUArray((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numUVs);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> mayaVArray((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numUVs);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numUVs; i++) {</div>\n\
<div class=\"line\">        mayaUArray[i] = UVs[i * 2 + 0];</div>\n\
<div class=\"line\">        mayaVArray[i] = UVs[i * 2 + 1];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill Maya UV indices</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> mayaUVCounts((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numFaceCounts);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> mayaUVIds((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)numFaceIndices);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0, polyVertOffset = 0; i &lt; numFaceCounts; i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> faceCount = mayaUVCounts[i] = faceCounts[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; faceCount; j++) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> uvIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Alembic&#39;s polygon winding is CW</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> polyVertIndex = polyVertOffset + faceCount - j - 1;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fCheckedUVsScope == Alembic::AbcGeom::kVaryingScope ||</div>\n\
<div class=\"line\">                    fCheckedUVsScope == Alembic::AbcGeom::kVertexScope) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// per-vertex UV</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertIndex = faceIndices[polyVertIndex];</div>\n\
<div class=\"line\">                uvIndex = uvIndices ? uvIndices[vertIndex] : vertIndex;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fCheckedUVsScope == Alembic::AbcGeom::kFacevaryingScope) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// per-face per-vertex UV</span></div>\n\
<div class=\"line\">                uvIndex = uvIndices ? uvIndices[polyVertIndex] : polyVertIndex;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                assert(0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mayaUVIds[polyVertOffset + j] = uvIndex;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        polyVertOffset += faceCount;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set Maya UVs and UV indices</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    status = fSubD.setUVs(mayaUArray, mayaVArray);</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">    status = fSubD.assignUVs(mayaUVCounts, mayaUVIds);</div>\n\
<div class=\"line\">    assert(status == MS::kSuccess);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> SubDSmoother::convertToPoly()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fSubDData.object().isNull() ||</div>\n\
<div class=\"line\">            fSubD.numVertices() == 0 || fSubD.numFaceVertices() == 0) {</div>\n\
<div class=\"line\">        fTriangleIndices.reset();</div>\n\
<div class=\"line\">        fWireIndices.reset();</div>\n\
<div class=\"line\">        fPositions.reset();</div>\n\
<div class=\"line\">        fNormals.reset();</div>\n\
<div class=\"line\">        fUVs.reset();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Smooth the subdivision mesh</span></div>\n\
<div class=\"line\">    <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html\">MFnMeshData</a> smoothMeshData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> smoothMeshDataObj = smoothMeshData.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a name=\"_a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_mesh_smooth_options.html\">MMeshSmoothOptions</a> smoothOptions;</div>\n\
<div class=\"line\">    smoothOptions.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_mesh_smooth_options.html#ae83b35db107d4c6252c7bd7f36b5a723\">setDivisions</a>(2);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> smoothMeshObj = fSubD.generateSmoothMesh(smoothMeshDataObj, &amp;smoothOptions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MayaMeshExtractor&lt;IndexBuffer::index_t&gt; extractor(smoothMeshDataObj);</div>\n\
<div class=\"line\">    extractor.setWantUVs(fNeedUVs);</div>\n\
<div class=\"line\">    extractor.compute();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fTriangleIndices = extractor.triangleIndices();</div>\n\
<div class=\"line\">    fWireIndices     = extractor.wireIndices();</div>\n\
<div class=\"line\">    fPositions       = extractor.positions();</div>\n\
<div class=\"line\">    fNormals         = extractor.normals();</div>\n\
<div class=\"line\">    fUVs.reset();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNeedUVs) {</div>\n\
<div class=\"line\">        fUVs         = extractor.uvs();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheObjectReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheObjectReader::Ptr</div>\n\
<div class=\"line\">AlembicCacheObjectReader::create(Alembic::Abc::IObject&amp; abcObj, <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    CheckInterruptAndPause(<span class=\"stringliteral\">&quot;reader initialization&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The object type can be mesh or nurbs.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IPolyMesh::matches(abcObj.getHeader()) ||</div>\n\
<div class=\"line\">        Alembic::AbcGeom::INuPatch::matches(abcObj.getHeader()) ||</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ISubD::matches(abcObj.getHeader())) {</div>\n\
<div class=\"line\">        Ptr reader = std::make_shared&lt;AlembicCacheMeshReader&gt;(abcObj, needUVs);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> reader-&gt;valid() ? reader : Ptr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// or an xform...</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IXform::matches(abcObj.getHeader())) {</div>\n\
<div class=\"line\">        Ptr reader = std::make_shared&lt;AlembicCacheXformReader&gt;(abcObj, needUVs);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> reader-&gt;valid() ? reader : Ptr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Ptr();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheObjectReader::~AlembicCacheObjectReader()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheTopReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheTopReader::AlembicCacheTopReader(</div>\n\
<div class=\"line\">    Alembic::Abc::IObject abcObj,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\"> : fBoundingBoxValidityInterval(TimeInterval::kInvalid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fXformData = XformData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numChildren = abcObj.getNumChildren();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> ii=0; ii&lt;numChildren; ++ii)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::IObject child(abcObj, abcObj.getChildHeader(ii).getName());</div>\n\
<div class=\"line\">        Ptr childReader = create(child, needUVs);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (childReader)</div>\n\
<div class=\"line\">            fChildren.push_back(childReader);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute the exact animation time range</span></div>\n\
<div class=\"line\">    TimeInterval animTimeRange(TimeInterval::kInvalid);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        animTimeRange |= childReader-&gt;getAnimTimeRange();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fXformData-&gt;setAnimTimeRange(animTimeRange);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheTopReader::~AlembicCacheTopReader()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheTopReader::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheTopReader::sampleHierarchy(<span class=\"keywordtype\">double</span> seconds, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; rootMatrix, TimeInterval rootMatrixInterval)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TimeInterval validityInterval(TimeInterval::kInfinite);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> bbox;</div>\n\
<div class=\"line\">    TimeInterval bboxValIntrvl(TimeInterval::kInfinite);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        validityInterval &amp;= childReader-&gt;sampleHierarchy(seconds, </div>\n\
<div class=\"line\">                rootMatrix, rootMatrixInterval);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        bbox.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#aee704d46278fb5925a7bd814a5773ccd\">expand</a>(childReader-&gt;getBoundingBox());</div>\n\
<div class=\"line\">        bboxValIntrvl &amp;= childReader-&gt;getBoundingBoxValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The computed validity interval must contain the current time.</span></div>\n\
<div class=\"line\">    assert(validityInterval.contains(seconds));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The current and previous bounding box intervals are either</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// disjoint or equal.</span></div>\n\
<div class=\"line\">    assert(!(fBoundingBoxValidityInterval &amp; bboxValIntrvl).valid() ||</div>\n\
<div class=\"line\">            fBoundingBoxValidityInterval == bboxValIntrvl);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (seconds == bboxValIntrvl.startTime()) {</div>\n\
<div class=\"line\">        fBoundingBox                 = bbox;</div>\n\
<div class=\"line\">        fBoundingBoxValidityInterval = bboxValIntrvl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::shared_ptr&lt;GPUCache::XformSample&gt; sample =</div>\n\
<div class=\"line\">            GPUCache::XformSample::create(</div>\n\
<div class=\"line\">                seconds,</div>\n\
<div class=\"line\">                <a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>,</div>\n\
<div class=\"line\">                fBoundingBox,</div>\n\
<div class=\"line\">                <span class=\"keyword\">true</span></div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\">        fXformData-&gt;addSample(sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheTopReader::sampleShape(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Top reader has no shape data!</span></div>\n\
<div class=\"line\">    assert(0);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> TimeInterval(TimeInterval::kInvalid);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubNode::MPtr AlembicCacheTopReader::get()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    SubNode::MPtr node =</div>\n\
<div class=\"line\">        SubNode::create(<a name=\"_a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;|&quot;</span>), fXformData);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        SubNode::MPtr child = childReader-&gt;get();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (child) </div>\n\
<div class=\"line\">            SubNode::connect(node, child);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (node-&gt;getChildren().empty()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> SubNode::MPtr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> node;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> AlembicCacheTopReader::getBoundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBoundingBox;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheTopReader::getBoundingBoxValidityInterval()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBoundingBoxValidityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheTopReader::getAnimTimeRange()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fXformData-&gt;animTimeRange();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicCacheTopReader::saveAndReset(AlembicCacheReader&amp; cacheReader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We don&#39;t save xform readers. Just call children&#39;s saveAndReset().</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        childReader-&gt;saveAndReset(cacheReader);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheXformReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheXformReader::AlembicCacheXformReader(</div>\n\
<div class=\"line\">    Alembic::Abc::IObject abcObj,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">    : fName(abcObj.getName()),</div>\n\
<div class=\"line\">      fValidityInterval(TimeInterval::kInvalid),</div>\n\
<div class=\"line\">      fBoundingBoxValidityInterval(TimeInterval::kInvalid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::IXform xform(abcObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Xform schema</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IXformSchema schema = xform.getSchema();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// transform</span></div>\n\
<div class=\"line\">    fXformCache.init(schema);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// transform visibility</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IVisibilityProperty visibility = </div>\n\
<div class=\"line\">                    Alembic::AbcGeom::GetVisibilityProperty(abcObj);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (visibility) {</div>\n\
<div class=\"line\">        fVisibilityCache.init(visibility);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fXformData = XformData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numChildren = abcObj.getNumChildren();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> ii=0; ii&lt;numChildren; ++ii)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::IObject child(abcObj, abcObj.getChildHeader(ii).getName());</div>\n\
<div class=\"line\">        Ptr childReader = create(child, needUVs);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (childReader)</div>\n\
<div class=\"line\">            fChildren.push_back(childReader);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute the exact animation time range</span></div>\n\
<div class=\"line\">    Alembic::Abc::TimeSamplingPtr timeSampling = schema.getTimeSampling();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numSamples = schema.getNumSamples();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval animTimeRange(</div>\n\
<div class=\"line\">        timeSampling-&gt;getSampleTime(0),</div>\n\
<div class=\"line\">        timeSampling-&gt;getSampleTime(numSamples &gt; 0 ? numSamples-1 : 0) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        animTimeRange |= childReader-&gt;getAnimTimeRange();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fXformData-&gt;setAnimTimeRange(animTimeRange);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheXformReader::~AlembicCacheXformReader()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheXformReader::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fXformCache.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheXformReader::sampleHierarchy(<span class=\"keywordtype\">double</span> seconds, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; rootMatrix, TimeInterval rootMatrixInterval)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill the sample if this sample has not been read</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fValidityInterval.contains(seconds)) {</div>\n\
<div class=\"line\">        fillTopoAndAttrSample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Inherit transformation</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> newRootMatrix = fXformCache.getValue() * rootMatrix;</div>\n\
<div class=\"line\">    TimeInterval newRootMatrixInterval = </div>\n\
<div class=\"line\">        fXformCache.getValidityInterval() &amp; rootMatrixInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval validityInterval = fValidityInterval;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> bbox;</div>\n\
<div class=\"line\">    TimeInterval bboxValIntrvl(TimeInterval::kInfinite);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        validityInterval &amp;= childReader-&gt;sampleHierarchy(seconds, </div>\n\
<div class=\"line\">            newRootMatrix, newRootMatrixInterval);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        bbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#aee704d46278fb5925a7bd814a5773ccd\">expand</a>(childReader-&gt;getBoundingBox());</div>\n\
<div class=\"line\">        bboxValIntrvl &amp;= childReader-&gt;getBoundingBoxValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The computed validity interval must contain the current time.</span></div>\n\
<div class=\"line\">    assert(validityInterval.contains(seconds));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The current and previous bounding box intervals are either</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// disjoint or equal.</span></div>\n\
<div class=\"line\">    assert(!(fBoundingBoxValidityInterval &amp; bboxValIntrvl).valid() ||</div>\n\
<div class=\"line\">            fBoundingBoxValidityInterval == bboxValIntrvl);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (seconds == (fValidityInterval &amp; bboxValIntrvl).startTime()) {</div>\n\
<div class=\"line\">        fBoundingBox                 = bbox;</div>\n\
<div class=\"line\">        fBoundingBoxValidityInterval = bboxValIntrvl;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::shared_ptr&lt;GPUCache::XformSample&gt; sample =</div>\n\
<div class=\"line\">            GPUCache::XformSample::create(</div>\n\
<div class=\"line\">                seconds,</div>\n\
<div class=\"line\">                fXformCache.getValue(),</div>\n\
<div class=\"line\">                fBoundingBox,</div>\n\
<div class=\"line\">                isVisible()</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\">        fXformData-&gt;addSample(sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheXformReader::sampleShape(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Transform reader has no shape data!</span></div>\n\
<div class=\"line\">    assert(0);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> TimeInterval(TimeInterval::kInvalid);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubNode::MPtr AlembicCacheXformReader::get()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    SubNode::MPtr node =</div>\n\
<div class=\"line\">        SubNode::create(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(fName.c_str()), fXformData);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        SubNode::MPtr child = childReader-&gt;get();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (child) </div>\n\
<div class=\"line\">            SubNode::connect(node, child);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (node-&gt;getChildren().empty()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> SubNode::MPtr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> node;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicCacheXformReader::fillTopoAndAttrSample(chrono_t time)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Notes:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// When possible, we try to reuse the samples from the previously</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// read sample.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update caches</span></div>\n\
<div class=\"line\">    fXformCache.setTime(time);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibilityCache.valid()) {</div>\n\
<div class=\"line\">        fVisibilityCache.setTime(time);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// return the new cache valid interval</span></div>\n\
<div class=\"line\">    TimeInterval validityInterval(TimeInterval::kInfinite);</div>\n\
<div class=\"line\">    validityInterval &amp;= fXformCache.getValidityInterval();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibilityCache.valid()) {</div>\n\
<div class=\"line\">        validityInterval &amp;= fVisibilityCache.getValidityInterval();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    assert(validityInterval.valid());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fValidityInterval = validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheXformReader::isVisible()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// xform invisible</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibilityCache.valid() &amp;&amp; </div>\n\
<div class=\"line\">            fVisibilityCache.getValue() == char(Alembic::AbcGeom::kVisibilityHidden)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// visible</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> AlembicCacheXformReader::getBoundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBoundingBox;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheXformReader::getBoundingBoxValidityInterval()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBoundingBoxValidityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheXformReader::getAnimTimeRange()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fXformData-&gt;animTimeRange();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicCacheXformReader::saveAndReset(AlembicCacheReader&amp; cacheReader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We don&#39;t save xform readers. Just call children&#39;s saveAndReset().</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> AlembicCacheObjectReader::Ptr&amp; childReader : fChildren) {</div>\n\
<div class=\"line\">        childReader-&gt;saveAndReset(cacheReader);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheMeshReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheMeshReader::AlembicCacheMeshReader(</div>\n\
<div class=\"line\">    Alembic::Abc::IObject <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needUVs</div>\n\
<div class=\"line\">) </div>\n\
<div class=\"line\">    : fName(object.getName()),</div>\n\
<div class=\"line\">      fFullName(object.getFullName()),</div>\n\
<div class=\"line\">      fBoundingBoxValidityInterval(TimeInterval::kInvalid),</div>\n\
<div class=\"line\">      fNumTransparentSample(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Shape schema</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IPolyMesh::matches(<span class=\"keywordtype\">object</span>.getHeader())) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IPolyMesh       meshObj(<span class=\"keywordtype\">object</span>, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IPolyMeshSchema schema = meshObj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// check the existence of wireframe index property</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if the mesh is written by gpuCache command, the wireframe index property must exist</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (schema.getPropertyHeader(kCustomPropertyWireIndices) != NULL ||</div>\n\
<div class=\"line\">            schema.getPropertyHeader(kCustomPropertyWireIndicesOld) != NULL) {</div>\n\
<div class=\"line\">            fDataProvider.reset(<span class=\"keyword\">new</span> RawDataProvider(schema, needUVs));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            fDataProvider.reset(<span class=\"keyword\">new</span> Triangulator(schema, needUVs));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::INuPatch::matches(<span class=\"keywordtype\">object</span>.getHeader())) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::INuPatch       nurbsObj(<span class=\"keywordtype\">object</span>, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        Alembic::AbcGeom::INuPatchSchema schema = nurbsObj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fDataProvider.reset(<span class=\"keyword\">new</span> NurbsTessellator(schema, needUVs));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::ISubD::matches(<span class=\"keywordtype\">object</span>.getHeader())) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ISubD       subdObj(<span class=\"keywordtype\">object</span>, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ISubDSchema schema = subdObj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fDataProvider.reset(<span class=\"keyword\">new</span> SubDSmoother(schema, needUVs));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        DisplayWarning(kUnsupportedGeomMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fShapeData = ShapeData::create();    </div>\n\
<div class=\"line\">    fShapeData-&gt;setAnimTimeRange(fDataProvider-&gt;getAnimTimeRange());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Whole object material assignment</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> material;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::string materialAssignmentPath;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (Alembic::AbcMaterial::getMaterialAssignmentPath(</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">object</span>, materialAssignmentPath)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// We assume all materials are stored in &quot;/materials&quot;</span></div>\n\
<div class=\"line\">        std::string prefix = <span class=\"stringliteral\">&quot;/&quot;</span>;</div>\n\
<div class=\"line\">        prefix += kMaterialsObject;</div>\n\
<div class=\"line\">        prefix += <span class=\"stringliteral\">&quot;/&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (std::equal(prefix.begin(), prefix.end(), materialAssignmentPath.begin())) {</div>\n\
<div class=\"line\">            std::string objectName = materialAssignmentPath.substr(prefix.size()).c_str();</div>\n\
<div class=\"line\">            <span class=\"comment\">// No material inheritance here.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (objectName.find(<span class=\"stringliteral\">&quot;/&quot;</span>) == std::string::npos) {</div>\n\
<div class=\"line\">                material = objectName.c_str();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (material.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        fShapeData-&gt;setMaterial(material);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheMeshReader::~AlembicCacheMeshReader()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDataProvider.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheMeshReader::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fDataProvider &amp;&amp; fDataProvider-&gt;valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheMeshReader::sampleHierarchy(<span class=\"keywordtype\">double</span> seconds, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; rootMatrix, TimeInterval rootMatrixInterval)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    CheckInterruptAndPause(<span class=\"stringliteral\">&quot;sampling hierarchy&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill the sample if this sample has not been read</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fDataProvider-&gt;getBBoxAndVisValidityInterval().contains(seconds)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Read minimal data to construct the hierarchy</span></div>\n\
<div class=\"line\">        fDataProvider-&gt;fillBBoxAndVisSample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval validityInterval = fDataProvider-&gt;getBBoxAndVisValidityInterval();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute bounding box in root sub-node axis</span></div>\n\
<div class=\"line\">    fBoundingBox = fDataProvider-&gt;getBoundingBox();</div>\n\
<div class=\"line\">    fBoundingBox.transformUsing(rootMatrix);</div>\n\
<div class=\"line\">    fBoundingBoxValidityInterval = rootMatrixInterval &amp;</div>\n\
<div class=\"line\">        fDataProvider-&gt;getBoundingBoxValidityInterval();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We only add the sample if it is the first sample of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// interval.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (seconds == validityInterval.startTime()) {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;const ShapeSample&gt; sample = </div>\n\
<div class=\"line\">            fDataProvider-&gt;getBBoxPlaceHolderSample(seconds);</div>\n\
<div class=\"line\">        fShapeData-&gt;addSample(sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheMeshReader::sampleShape(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    CheckInterruptAndPause(<span class=\"stringliteral\">&quot;sampling shape&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill the sample if this sample has not been read</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fDataProvider-&gt;getValidityInterval().contains(seconds)) {</div>\n\
<div class=\"line\">        fDataProvider-&gt;fillTopoAndAttrSample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TimeInterval validityInterval = fDataProvider-&gt;getValidityInterval();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We only add the sample if it is the first sample of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// interval.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (seconds == validityInterval.startTime()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fDataProvider-&gt;isVisible()) {</div>\n\
<div class=\"line\">            std::shared_ptr&lt;const ShapeSample&gt; sample = </div>\n\
<div class=\"line\">                fDataProvider-&gt;getSample(seconds);</div>\n\
<div class=\"line\">            fShapeData-&gt;addSample(sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> alpha = sample-&gt;diffuseColor()[3];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (alpha &gt; 0.0f &amp;&amp; alpha &lt; 1.0f) {</div>\n\
<div class=\"line\">                fNumTransparentSample++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// hidden geometry, simply append an empty sample</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;ShapeSample&gt; sample =</div>\n\
<div class=\"line\">                ShapeSample::createEmptySample(seconds);</div>\n\
<div class=\"line\">            fShapeData-&gt;addSample(sample);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubNode::MPtr AlembicCacheMeshReader::get()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fShapeData-&gt;getSamples().size() == 1 &amp;&amp;</div>\n\
<div class=\"line\">        !fShapeData-&gt;getSamples().begin()-&gt;second-&gt;visibility()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Prune the node entirely if it is hidden.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> SubNode::MPtr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    SubNode::MPtr subNode = SubNode::create(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(fName.c_str()), fShapeData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fNumTransparentSample == 0) {</div>\n\
<div class=\"line\">        subNode-&gt;setTransparentType(SubNode::kOpaque);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (fNumTransparentSample == fShapeData-&gt;getSamples().size()) {</div>\n\
<div class=\"line\">        subNode-&gt;setTransparentType(SubNode::kTransparent);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        subNode-&gt;setTransparentType(SubNode::kOpaqueAndTransparent);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> subNode;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> AlembicCacheMeshReader::getBoundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBoundingBox;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheMeshReader::getBoundingBoxValidityInterval()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fBoundingBoxValidityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheMeshReader::getAnimTimeRange()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fShapeData-&gt;animTimeRange();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicCacheMeshReader::saveAndReset(AlembicCacheReader&amp; cacheReader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Clear the content of this reader for reuse.</span></div>\n\
<div class=\"line\">    fBoundingBox.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    fBoundingBoxValidityInterval = TimeInterval(TimeInterval::kInvalid);</div>\n\
<div class=\"line\">    fNumTransparentSample = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a new shape data.</span></div>\n\
<div class=\"line\">    ShapeData::MPtr newShapeData = ShapeData::create();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Animation time range and material assignment won&#39;t change so just copy them.</span></div>\n\
<div class=\"line\">    newShapeData-&gt;setAnimTimeRange(fShapeData-&gt;animTimeRange());</div>\n\
<div class=\"line\">    newShapeData-&gt;setMaterials(fShapeData-&gt;getMaterials());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release the reference to the old shape data to avoid instability.</span></div>\n\
<div class=\"line\">    fShapeData = newShapeData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Ptr thisPtr = shared_from_this();</div>\n\
<div class=\"line\">    cacheReader.saveReader(fFullName, thisPtr);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheMaterialReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheMaterialReader::AlembicCacheMaterialReader(Alembic::Abc::IObject abcObj)</div>\n\
<div class=\"line\">    : fName(abcObj.getName()),</div>\n\
<div class=\"line\">      fValidityInterval(TimeInterval::kInvalid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Wrap with IMaterial</span></div>\n\
<div class=\"line\">    Alembic::AbcMaterial::IMaterial material(abcObj, Alembic::Abc::kWrapExisting);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Material schema</span></div>\n\
<div class=\"line\">    Alembic::AbcMaterial::IMaterialSchema schema = material.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the material graph</span></div>\n\
<div class=\"line\">    fMaterialGraph = std::make_shared&lt;MaterialGraph&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(fName.c_str()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The number of nodes in the material</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numNetworkNodes = schema.getNumNetworkNodes();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Map: name -&gt; (IMaterialSchema::NetworkNode,MaterialNode)</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::pair&lt;Alembic::AbcMaterial::IMaterialSchema::NetworkNode,MaterialNode::MPtr&gt; NodePair;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;std::string,NodePair&gt; NodeMap;</div>\n\
<div class=\"line\">    NodeMap nodeMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Read nodes</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numNetworkNodes; i++) {</div>\n\
<div class=\"line\">        Alembic::AbcMaterial::IMaterialSchema::NetworkNode abcNode = schema.getNetworkNode(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string target;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!abcNode.valid() || !abcNode.getTarget(target) || target != kMaterialsGpuCacheTarget) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;  <span class=\"comment\">// Invalid node</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string type;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!abcNode.getNodeType(type) || type.empty()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;  <span class=\"comment\">// Invalid type</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Node name</span></div>\n\
<div class=\"line\">        std::string name = abcNode.getName();</div>\n\
<div class=\"line\">        assert(!name.empty());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create material node</span></div>\n\
<div class=\"line\">        MaterialNode::MPtr node = MaterialNode::create(name.c_str(), type.c_str());</div>\n\
<div class=\"line\">        assert(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fMaterialGraph-&gt;addNode(node);</div>\n\
<div class=\"line\">        nodeMap.insert(std::make_pair(name, std::make_pair(abcNode, node)));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize property caches.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(NodeMap::value_type&amp; val : nodeMap) {</div>\n\
<div class=\"line\">        Alembic::AbcMaterial::IMaterialSchema::NetworkNode&amp; abcNode = val.second.first;</div>\n\
<div class=\"line\">        MaterialNode::MPtr&amp; node = val.second.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Loop over all child properties</span></div>\n\
<div class=\"line\">        Alembic::Abc::ICompoundProperty compoundProp = abcNode.getParameters();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numProps = compoundProp.getNumProperties();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numProps; i++) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Alembic::Abc::PropertyHeader&amp; header = compoundProp.getPropertyHeader(i);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::string propName = header.getName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (Alembic::Abc::IBoolProperty::matches(header)) {</div>\n\
<div class=\"line\">                fBoolCaches.push_back(</div>\n\
<div class=\"line\">                    ScalarMaterialProp&lt;Alembic::Abc::IBoolProperty&gt;(compoundProp, propName, node));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::Abc::IInt32Property::matches(header)) {</div>\n\
<div class=\"line\">                fInt32Caches.push_back(</div>\n\
<div class=\"line\">                    ScalarMaterialProp&lt;Alembic::Abc::IInt32Property&gt;(compoundProp, propName, node));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::Abc::IFloatProperty::matches(header)) {</div>\n\
<div class=\"line\">                fFloatCaches.push_back(</div>\n\
<div class=\"line\">                    ScalarMaterialProp&lt;Alembic::Abc::IFloatProperty&gt;(compoundProp, propName, node));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::Abc::IV2fProperty::matches(header)) {</div>\n\
<div class=\"line\">                fFloat2Caches.push_back(</div>\n\
<div class=\"line\">                    ScalarMaterialProp&lt;Alembic::Abc::IV2fProperty&gt;(compoundProp, propName, node));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::Abc::IV3fProperty::matches(header)) {</div>\n\
<div class=\"line\">                fFloat3Caches.push_back(</div>\n\
<div class=\"line\">                    ScalarMaterialProp&lt;Alembic::Abc::IV3fProperty&gt;(compoundProp, propName, node));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::Abc::IC3fProperty::matches(header)) {</div>\n\
<div class=\"line\">                fRGBCaches.push_back(</div>\n\
<div class=\"line\">                    ScalarMaterialProp&lt;Alembic::Abc::IC3fProperty&gt;(compoundProp, propName, node));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (Alembic::Abc::IWstringProperty::matches(header)) {</div>\n\
<div class=\"line\">                fStringCaches.push_back(</div>\n\
<div class=\"line\">                    ScalarMaterialProp&lt;Alembic::Abc::IWstringProperty&gt;(compoundProp, propName, node));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Read connections</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(NodeMap::value_type&amp; val : nodeMap) {</div>\n\
<div class=\"line\">        Alembic::AbcMaterial::IMaterialSchema::NetworkNode&amp; abcNode = val.second.first;</div>\n\
<div class=\"line\">        MaterialNode::MPtr&amp; node = val.second.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Loop over the connections and connect properties</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numConnections = abcNode.getNumConnections();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; numConnections; i++) {</div>\n\
<div class=\"line\">            std::string inputName, connectedNodeName, connectedOutputName;</div>\n\
<div class=\"line\">            abcNode.getConnection(i, inputName, connectedNodeName, connectedOutputName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find destination property</span></div>\n\
<div class=\"line\">            MaterialProperty::MPtr prop = node-&gt;findProperty(inputName.c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find source node</span></div>\n\
<div class=\"line\">            MaterialNode::MPtr srcNode;</div>\n\
<div class=\"line\">            NodeMap::iterator it = nodeMap.find(connectedNodeName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != nodeMap.end()) {</div>\n\
<div class=\"line\">                srcNode = (*it).second.second;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Find source property</span></div>\n\
<div class=\"line\">            MaterialProperty::MPtr srcProp;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcNode) {</div>\n\
<div class=\"line\">                srcProp = srcNode-&gt;findProperty(connectedOutputName.c_str());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Make the connection</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop &amp;&amp; srcNode &amp;&amp; srcProp) {</div>\n\
<div class=\"line\">                prop-&gt;connect(srcNode, srcProp);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Read Terminal node (ignore output)</span></div>\n\
<div class=\"line\">    std::string rootNodeName, rootOutput;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (schema.getNetworkTerminal(kMaterialsGpuCacheTarget, kMaterialsGpuCacheType, rootNodeName, rootOutput)) {</div>\n\
<div class=\"line\">        NodeMap::iterator it = nodeMap.find(rootNodeName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != nodeMap.end()) {</div>\n\
<div class=\"line\">            fMaterialGraph-&gt;setRootNode((*it).second.second);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheMaterialReader::~AlembicCacheMaterialReader()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TimeInterval AlembicCacheMaterialReader::sampleMaterial(<span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TimeInterval validityInterval(TimeInterval::kInfinite);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarMaterialProp&lt;Alembic::Abc::IBoolProperty&gt;&amp; cache : fBoolCaches) {</div>\n\
<div class=\"line\">        validityInterval &amp;= cache.sample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarMaterialProp&lt;Alembic::Abc::IInt32Property&gt;&amp; cache : fInt32Caches) {</div>\n\
<div class=\"line\">        validityInterval &amp;= cache.sample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarMaterialProp&lt;Alembic::Abc::IFloatProperty&gt;&amp; cache : fFloatCaches) {</div>\n\
<div class=\"line\">        validityInterval &amp;= cache.sample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarMaterialProp&lt;Alembic::Abc::IV2fProperty&gt;&amp; cache : fFloat2Caches) {</div>\n\
<div class=\"line\">        validityInterval &amp;= cache.sample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarMaterialProp&lt;Alembic::Abc::IV3fProperty&gt;&amp; cache : fFloat3Caches) {</div>\n\
<div class=\"line\">        validityInterval &amp;= cache.sample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarMaterialProp&lt;Alembic::Abc::IC3fProperty&gt;&amp; cache : fRGBCaches) {</div>\n\
<div class=\"line\">        validityInterval &amp;= cache.sample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ScalarMaterialProp&lt;Alembic::Abc::IWstringProperty&gt;&amp; cache : fStringCaches) {</div>\n\
<div class=\"line\">        validityInterval &amp;= cache.sample(seconds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> validityInterval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialGraph::MPtr AlembicCacheMaterialReader::get()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Check invalid graph.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fMaterialGraph || !fMaterialGraph-&gt;rootNode() || fMaterialGraph-&gt;getNodes().empty()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MaterialGraph::MPtr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fMaterialGraph;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace CacheReaderAlembicPrivate</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>AlembicCacheReader::MakeSharedEnabler: <span class=\"keyword\">public</span> AlembicCacheReader</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    MakeSharedEnabler(<span class=\"keyword\">const</span> <a name=\"_a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file): AlembicCacheReader(file){}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;CacheReader&gt; AlembicCacheReader::create(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MakeSharedEnabler&gt;(file);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheReader::AlembicCacheReader(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file)</div>\n\
<div class=\"line\">    : fFile(file)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Open the archive for reading.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedFullName = file.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (resolvedFullName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != 0 &amp;&amp; std::ifstream(resolvedFullName.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()).good()) {</div>\n\
<div class=\"line\">            Alembic::AbcCoreFactory::IFactory factory;</div>\n\
<div class=\"line\">            <span class=\"comment\">// Disable Alembic caching as we have implemented our own</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// caching...</span></div>\n\
<div class=\"line\">            factory.setSampleCache( Alembic::AbcCoreAbstract::ReadArraySampleCachePtr());</div>\n\
<div class=\"line\">            factory.setPolicy(Alembic::Abc::ErrorHandler::kThrowPolicy);</div>\n\
<div class=\"line\">            fAbcArchive = factory.getArchive(resolvedFullName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// File exists but Alembic fails to open.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!fAbcArchive.valid()) {</div>\n\
<div class=\"line\">                DisplayError(kFileFormatWrongMsg, file.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a2f505a3eabc9709fad04e2a14d960614\">rawFullName</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// File doesn&#39;t exist.</span></div>\n\
<div class=\"line\">            DisplayError(kFileDoesntExistMsg, file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a2f505a3eabc9709fad04e2a14d960614\">rawFullName</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (CacheReaderInterruptException&amp; ex) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// pass upward</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span> ex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        <span class=\"comment\">//The resolved full name will be empty if the resolution fails.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//Print the raw full name in case of this situation.</span></div>\n\
<div class=\"line\">        DisplayError(kCacheOpenFileErrorMsg, file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a2f505a3eabc9709fad04e2a14d960614\">rawFullName</a>(), ex.what());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheReader::~AlembicCacheReader()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\">        fAbcArchive.reset();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        DisplayError(kCloseFileErrorMsg, fFile.resolvedFullName(), ex.what());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheReader::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fAbcArchive.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheReader::validateGeomPath(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; validatedGeomPath)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!valid()) {</div>\n\
<div class=\"line\">        validatedGeomPath = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;|&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// path: |xform1|xform2|meshShape</span></div>\n\
<div class=\"line\">        <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> pathArray;</div>\n\
<div class=\"line\">        geomPath.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;|&#39;</span>, pathArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> valid = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// find the mesh in Alembic archive</span></div>\n\
<div class=\"line\">        validatedGeomPath = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">        Alembic::Abc::IObject current = fAbcArchive.getTop();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; pathArray.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> step = pathArray[i];</div>\n\
<div class=\"line\">            current = current.getChild(step.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!current.valid()) {</div>\n\
<div class=\"line\">                valid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            validatedGeomPath += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;|&quot;</span>);</div>\n\
<div class=\"line\">            validatedGeomPath += step;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (validatedGeomPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">            validatedGeomPath = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;|&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> valid;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (CacheReaderInterruptException&amp; ex) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// pass upward</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span> ex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        DisplayError(kReadMeshErrorMsg, fFile.resolvedFullName(), geomPath, ex.what());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        validatedGeomPath = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;|&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubNode::Ptr AlembicCacheReader::readScene(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Read sub-node hierarchy</span></div>\n\
<div class=\"line\">    SubNode::Ptr top = readHierarchy(geomPath, needUVs);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!top) <span class=\"keywordflow\">return</span> SubNode::Ptr();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Extract shape paths</span></div>\n\
<div class=\"line\">    ShapePathVisitor::ShapePathAndSubNodeList shapeGeomPaths;</div>\n\
<div class=\"line\">    ShapePathVisitor shapePathVisitor(shapeGeomPaths);</div>\n\
<div class=\"line\">    top-&gt;accept(shapePathVisitor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The absolute shape path in the archive is prefix+shapePath</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> prefix;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> lastStep = geomPath.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(<span class=\"charliteral\">&#39;|&#39;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lastStep &gt; 0) {</div>\n\
<div class=\"line\">        prefix = geomPath.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>(0, lastStep - 1);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Read shapes</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> ShapePathVisitor::ShapePathAndSubNode&amp; pair : shapeGeomPaths) {</div>\n\
<div class=\"line\">        SubNode::Ptr shape = readShape(prefix + pair.first, needUVs);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shape &amp;&amp; pair.first.length() &gt; 0) {</div>\n\
<div class=\"line\">            ReplaceSubNodeData(top, shape, pair.first);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update transparent type</span></div>\n\
<div class=\"line\">    SubNodeTransparentTypeVisitor transparentTypeVisitor;</div>\n\
<div class=\"line\">    top-&gt;accept(transparentTypeVisitor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> top;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubNode::Ptr AlembicCacheReader::readHierarchy(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span>CacheReaderAlembicPrivate;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!valid()) <span class=\"keywordflow\">return</span> SubNode::Ptr();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// path: |xform1|xform2|meshShape</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> pathArray;</div>\n\
<div class=\"line\">        geomPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;|&#39;</span>, pathArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::IObject current = fAbcArchive.getTop();</div>\n\
<div class=\"line\">        AlembicCacheObjectReader::Ptr reader;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pathArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Determine the number of children under the top level object.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// We skip objects that we don&#39;t recognize. (Cameras, Materials, ..)</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numChildren = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> lastChild   = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; current.getNumChildren(); i++) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (Alembic::AbcGeom::IPolyMesh::matches(current.getChildHeader(i)) ||</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::INuPatch::matches(current.getChildHeader(i)) ||</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::ISubD::matches(current.getChildHeader(i)) ||</div>\n\
<div class=\"line\">                    Alembic::AbcGeom::IXform::matches(current.getChildHeader(i))) {</div>\n\
<div class=\"line\">                        numChildren++;</div>\n\
<div class=\"line\">                        lastChild = i;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numChildren == 1) {</div>\n\
<div class=\"line\">                current = Alembic::Abc::IObject(</div>\n\
<div class=\"line\">                    current, current.getChildHeader(lastChild).getName());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (current.valid())</div>\n\
<div class=\"line\">                    reader = AlembicCacheObjectReader::create(</div>\n\
<div class=\"line\">                    current, needUVs);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (numChildren &gt; 1) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// The top level object is not a proper xform object. We</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// therefore have to create a dummy top-level transform in</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// that case.</span></div>\n\
<div class=\"line\">                reader = std::make_shared&lt;AlembicCacheTopReader&gt;(</div>\n\
<div class=\"line\">                    current, needUVs);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// find the top level node in the Alembic archive</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> geometryFound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; pathArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> step = pathArray[i];</div>\n\
<div class=\"line\">                current = current.getChild(step.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!current.valid()) {</div>\n\
<div class=\"line\">                    geometryFound = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (geometryFound)</div>\n\
<div class=\"line\">                reader = AlembicCacheObjectReader::create(current, needUVs);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!reader || !reader-&gt;valid()) <span class=\"keywordflow\">return</span> SubNode::Ptr();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Each time samplings only records the start time, i.e. there</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// is no way to ask for the end time of a TimeSampling!</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Therefore, to determine the end of the animation, we simply</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// loop until time no longer advances...</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            TimeInterval interval = reader-&gt;sampleHierarchy(</div>\n\
<div class=\"line\">                -std::numeric_limits&lt;double&gt;::max(),</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>, TimeInterval::kInfinite);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> (interval.endTime() != std::numeric_limits&lt;double&gt;::max()) {</div>\n\
<div class=\"line\">                interval = reader-&gt;sampleHierarchy(</div>\n\
<div class=\"line\">                    interval.endTime(), </div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>, TimeInterval::kInfinite);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The sub-node hierarchy with bounding box place holders.</span></div>\n\
<div class=\"line\">        SubNode::Ptr top = reader-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Save the object readers for reuse.</span></div>\n\
<div class=\"line\">        reader-&gt;saveAndReset(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> top;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (CacheReaderInterruptException&amp; ex) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// pass upward</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span> ex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        DisplayError(kReadMeshErrorMsg, fFile.resolvedFullName(), geomPath, ex.what());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> SubNode::Ptr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">SubNode::Ptr AlembicCacheReader::readShape(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; geomPath, <span class=\"keywordtype\">bool</span> needUVs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span>CacheReaderAlembicPrivate;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!valid()) <span class=\"keywordflow\">return</span> SubNode::Ptr();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        AlembicCacheObjectReader::Ptr reader;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Search saved readers</span></div>\n\
<div class=\"line\">        ObjectReaderMap::iterator iter = fSavedReaders.find(geomPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iter != fSavedReaders.end()) {</div>\n\
<div class=\"line\">            reader = (*iter).second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// path: |xform1|xform2|meshShape</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> pathArray;</div>\n\
<div class=\"line\">            geomPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;|&#39;</span>, pathArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Alembic::Abc::IObject current = fAbcArchive.getTop();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (pathArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Find the shape in the Alembic archive</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> geometryFound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; pathArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> step = pathArray[i];</div>\n\
<div class=\"line\">                    current = current.getChild(step.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!current.valid()) {</div>\n\
<div class=\"line\">                        geometryFound = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (geometryFound) {</div>\n\
<div class=\"line\">                    reader = AlembicCacheObjectReader::create(current, needUVs);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!reader || !reader-&gt;valid()) <span class=\"keywordflow\">return</span> SubNode::Ptr();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Each time samplings only records the start time, i.e. there</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// is no way to ask for the end time of a TimeSampling!</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Therefore, to determine the end of the animation, we simply</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// loop until time no longer advances...</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            TimeInterval interval = reader-&gt;sampleShape(</div>\n\
<div class=\"line\">                -std::numeric_limits&lt;double&gt;::max());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> (interval.endTime() != std::numeric_limits&lt;double&gt;::max()) {</div>\n\
<div class=\"line\">                interval = reader-&gt;sampleShape(</div>\n\
<div class=\"line\">                    interval.endTime());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The sub-node with mesh shape data.</span></div>\n\
<div class=\"line\">        SubNode::Ptr top = reader-&gt;get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Save the object readers for reuse.</span></div>\n\
<div class=\"line\">        reader-&gt;saveAndReset(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> top;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (CacheReaderInterruptException&amp; ex) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// pass upward</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span> ex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        DisplayError(kReadMeshErrorMsg, fFile.resolvedFullName(), geomPath, ex.what());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> SubNode::Ptr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialGraphMap::Ptr AlembicCacheReader::readMaterials()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span>CacheReaderAlembicPrivate;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!valid()) <span class=\"keywordflow\">return</span> MaterialGraphMap::Ptr();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Find &quot;/materials&quot;</span></div>\n\
<div class=\"line\">        Alembic::Abc::IObject topObject = fAbcArchive.getTop();</div>\n\
<div class=\"line\">        Alembic::Abc::IObject materialsObject = topObject.getChild(kMaterialsObject);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// &quot;/materials&quot; doesn&#39;t exist!</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!materialsObject.valid()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MaterialGraphMap::Ptr();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MaterialGraphMap::MPtr materials = std::make_shared&lt;MaterialGraphMap&gt;();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Read materials one by one. Hierarchical materials are not supported.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; materialsObject.getNumChildren(); i++) {</div>\n\
<div class=\"line\">            Alembic::Abc::IObject <span class=\"keywordtype\">object</span> = materialsObject.getChild(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (Alembic::AbcMaterial::IMaterial::matches(<span class=\"keywordtype\">object</span>.getHeader())) {</div>\n\
<div class=\"line\">                AlembicCacheMaterialReader reader(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Read the material</span></div>\n\
<div class=\"line\">                TimeInterval interval = reader.sampleMaterial(</div>\n\
<div class=\"line\">                    -std::numeric_limits&lt;double&gt;::max());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">while</span> (interval.endTime() != std::numeric_limits&lt;double&gt;::max()) {</div>\n\
<div class=\"line\">                    interval = reader.sampleMaterial(interval.endTime());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                MaterialGraph::MPtr graph = reader.get();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (graph) {</div>\n\
<div class=\"line\">                    materials-&gt;addMaterialGraph(graph);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// No materials..</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (materials-&gt;getGraphs().empty()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MaterialGraphMap::Ptr();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> materials;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (CacheReaderInterruptException&amp; ex) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// pass upward</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span> ex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        DisplayError(kReadFileErrorMsg, fFile.resolvedFullName(), ex.what());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MaterialGraphMap::Ptr();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheReader::readAnimTimeRange(GPUCache::TimeInterval&amp; range)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!valid()) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Try *.samples property.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> samplesMin = std::numeric_limits&lt;double&gt;::infinity();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> samplesMax = -std::numeric_limits&lt;double&gt;::infinity();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numTimeSamplings = fAbcArchive.getNumTimeSamplings();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numTimeSamplings; i++) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// *.samples property</span></div>\n\
<div class=\"line\">            std::stringstream propName;</div>\n\
<div class=\"line\">            propName &lt;&lt; i &lt;&lt; <span class=\"stringliteral\">&quot;.samples&quot;</span>;</div>\n\
<div class=\"line\">            Alembic::Abc::IUInt32Property samplesProp(</div>\n\
<div class=\"line\">                fAbcArchive.getTop().getProperties(), </div>\n\
<div class=\"line\">                propName.str(),</div>\n\
<div class=\"line\">                Alembic::Abc::ErrorHandler::kQuietNoopPolicy</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// The time sampling.</span></div>\n\
<div class=\"line\">            Alembic::Abc::TimeSamplingPtr timeSampling = fAbcArchive.getTimeSampling(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (samplesProp &amp;&amp; timeSampling) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numSamples = 0;</div>\n\
<div class=\"line\">                samplesProp.get(numSamples);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (numSamples &gt; 0) {</div>\n\
<div class=\"line\">                    samplesMin = std::min(samplesMin, timeSampling-&gt;getSampleTime(0));</div>\n\
<div class=\"line\">                    samplesMax = std::max(samplesMax, timeSampling-&gt;getSampleTime(numSamples - 1));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Successfully read *.samples property.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (samplesMin &lt;= samplesMax) {</div>\n\
<div class=\"line\">            range = TimeInterval(samplesMin, samplesMax);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Try archive bounds property.</span></div>\n\
<div class=\"line\">        Alembic::Abc::IBox3dProperty boxProp = Alembic::AbcGeom::GetIArchiveBounds(</div>\n\
<div class=\"line\">            fAbcArchive, Alembic::Abc::ErrorHandler::kQuietNoopPolicy);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (boxProp) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// The time range of the archive bounds property.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numSamples                          = boxProp.getNumSamples();</div>\n\
<div class=\"line\">            Alembic::Abc::TimeSamplingPtr timeSampling = boxProp.getTimeSampling();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numSamples &gt; 0 &amp;&amp; timeSampling) {</div>\n\
<div class=\"line\">                range = TimeInterval(</div>\n\
<div class=\"line\">                    timeSampling-&gt;getSampleTime(0),</div>\n\
<div class=\"line\">                    timeSampling-&gt;getSampleTime(numSamples - 1)</div>\n\
<div class=\"line\">                );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// No enough animation range info on the archive.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (CacheReaderInterruptException&amp; ex) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// pass upward</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">throw</span> ex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        DisplayError(kReadFileErrorMsg, fFile.resolvedFullName(), ex.what());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicCacheReader::saveReader(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::string&amp; fullName,</div>\n\
<div class=\"line\">    CacheReaderAlembicPrivate::AlembicCacheObjectReader::Ptr&amp; reader</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We save the object reader in this AlembicCacheReader so that </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the object reader won&#39;t be destroyed after readHierarchy() or readShape().</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The life time of the object reader would be the same as this AlembicCacheReader.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The object reader can be reused as long as the Alembic archive is not closed.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// There are 2 situations that will cause an Alembic archive to be closed:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   1) There are no references to CacheReaderProxy. (Read complete)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   2) Maya is running out of file handles. (Temporarily close some inactive archives)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (reader &amp;&amp; reader-&gt;valid()) {</div>\n\
<div class=\"line\">        std::string geometryPath = fullName;</div>\n\
<div class=\"line\">        std::replace(geometryPath.begin(), geometryPath.end(), <span class=\"charliteral\">&#39;/&#39;</span>, <span class=\"charliteral\">&#39;|&#39;</span>);</div>\n\
<div class=\"line\">        fSavedReaders.insert(std::make_pair(geometryPath, reader));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";