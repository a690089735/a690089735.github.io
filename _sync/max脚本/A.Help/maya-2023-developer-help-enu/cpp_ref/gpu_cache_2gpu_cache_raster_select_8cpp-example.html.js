var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheRasterSelect.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_raster_select_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheRasterSelect.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheRasterSelect.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheRasterSelect.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSample.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVBOProxy.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheDrawTraversal.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheGLFT.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheReader.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL CLASSES</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS DrawWireframeTraversal</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DrawWireframeState : <span class=\"keyword\">public</span> DrawTraversalState</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        DrawWireframeState(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Frustum&amp;    frustrum,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>      seconds,</div>\n\
<div class=\"line\">            VBOProxy::VBOMode vboMode)</div>\n\
<div class=\"line\">            : DrawTraversalState(frustrum, seconds, kPruneNone),</div>\n\
<div class=\"line\">              fVBOMode(vboMode)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        VBOProxy::VBOMode vboMode()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{ <span class=\"keywordflow\">return</span> fVBOMode; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        VBOProxy::VBOMode fVBOMode;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DrawWireframeTraversal</div>\n\
<div class=\"line\">        : <span class=\"keyword\">public</span> DrawTraversal&lt;DrawWireframeTraversal, DrawWireframeState&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> DrawTraversal&lt;DrawWireframeTraversal, DrawWireframeState&gt; BaseClass;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        DrawWireframeTraversal(</div>\n\
<div class=\"line\">            DrawWireframeState&amp;     state,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;          xform,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span>                    isReflection,</div>\n\
<div class=\"line\">            Frustum::ClippingResult parentClippingResult)</div>\n\
<div class=\"line\">            : BaseClass(state, xform, isReflection, parentClippingResult)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> draw(<span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!sample-&gt;visibility()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            gGLFT-&gt;glLoadMatrixd(xform().matrix[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sample-&gt;isBoundingBoxPlaceHolder()) {</div>\n\
<div class=\"line\">                state().vboProxy().drawBoundingBox(sample);</div>\n\
<div class=\"line\">                GlobalReaderCache::theCache().hintShapeReadOrder(subNode());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            assert(sample-&gt;positions());</div>\n\
<div class=\"line\">            assert(sample-&gt;normals());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Note that we draw the vertices in addition to the wireframe</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// edges or mesh faces. This is necessary to make sure that primitive</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// will generate at least one pixel-fragment when it gets</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// rasterized, i.e. to handle case where the primitives are so</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// small on screen that they fall in-between the pixels.</span></div>\n\
<div class=\"line\">            state().vboProxy().drawWireframe(sample, state().vboMode());</div>\n\
<div class=\"line\">            state().vboProxy().drawVertices(sample, state().vboMode());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// CLASS DrawShadedTraversal</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//==========================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DrawShadedState : <span class=\"keyword\">public</span> DrawTraversalState</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        DrawShadedState(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Frustum&amp;    frustrum,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>      seconds,</div>\n\
<div class=\"line\">            VBOProxy::VBOMode vboMode)</div>\n\
<div class=\"line\">            : DrawTraversalState(frustrum, seconds, kPruneNone),</div>\n\
<div class=\"line\">              fVBOMode(vboMode)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        VBOProxy::VBOMode vboMode()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{ <span class=\"keywordflow\">return</span> fVBOMode; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        VBOProxy::VBOMode fVBOMode;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DrawShadedTraversal</div>\n\
<div class=\"line\">        : <span class=\"keyword\">public</span> DrawTraversal&lt;DrawShadedTraversal, DrawShadedState&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> DrawTraversal&lt;DrawShadedTraversal, DrawShadedState&gt; BaseClass;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        DrawShadedTraversal(</div>\n\
<div class=\"line\">            DrawShadedState&amp;        state,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;          xform,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span>                    isReflection,</div>\n\
<div class=\"line\">            Frustum::ClippingResult parentClippingResult)</div>\n\
<div class=\"line\">            : BaseClass(state, xform, isReflection, parentClippingResult)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> draw(<span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!sample-&gt;visibility()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            gGLFT-&gt;glLoadMatrixd(xform().matrix[0]);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sample-&gt;isBoundingBoxPlaceHolder()) {</div>\n\
<div class=\"line\">                state().vboProxy().drawBoundingBox(sample, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                GlobalReaderCache::theCache().hintShapeReadOrder(subNode());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            assert(sample-&gt;positions());</div>\n\
<div class=\"line\">            assert(sample-&gt;normals());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Note that we draw the vertices in addition to the wireframe</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// edges or mesh faces. This is necessary to make sure that primitive</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// will generate at least one pixel-fragment when it gets</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// rasterized, i.e. to handle case where the primitives are so</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// small on screen that they fall in-between the pixels.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> numGroups = sample-&gt;numIndexGroups();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> groupId = 0; groupId &lt; numGroups; groupId++) {</div>\n\
<div class=\"line\">                state().vboProxy().drawTriangles(</div>\n\
<div class=\"line\">                    sample, groupId, VBOProxy::kNoNormals, VBOProxy::kNoUVs,</div>\n\
<div class=\"line\">                    state().vboMode());</div>\n\
<div class=\"line\">                state().vboProxy().drawVertices(sample, state().vboMode());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS RasterSelect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MAX_RASTER_SELECT_RENDER_SIZE 16</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">RasterSelect::RasterSelect(</div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_select_info.html\">MSelectInfo</a>&amp; selectInfo</div>\n\
<div class=\"line\">) </div>\n\
<div class=\"line\">    : fSelectInfo(selectInfo),</div>\n\
<div class=\"line\">      fMinZ(std::numeric_limits&lt;float&gt;::max())</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view = fSelectInfo.view();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    view.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sxl, syl, sw, sh;</div>\n\
<div class=\"line\">    fSelectInfo.selectRect(sxl, syl, sw, sh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vxl, vyl, vw, vh;</div>\n\
<div class=\"line\">    view.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#abf198a1eaaec64f89430b2bb7cca959d\">viewport</a>(vxl, vyl, vw, vh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute a new matrix that, when it is post-multiplied with the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// projection matrix, will cause the picking region to fill only</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a small region.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width = (MAX_RASTER_SELECT_RENDER_SIZE &lt; sw) ?</div>\n\
<div class=\"line\">        MAX_RASTER_SELECT_RENDER_SIZE : sw;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> height = (MAX_RASTER_SELECT_RENDER_SIZE &lt; sh) ?</div>\n\
<div class=\"line\">        MAX_RASTER_SELECT_RENDER_SIZE : sh;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> sx = double(width) / double(sw);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> sy = double(height) / double(sh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> fx = 2.0 / double(vw);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> fy = 2.0 / double(vh);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>  selectMatrix;</div>\n\
<div class=\"line\">    selectMatrix.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0] = sx;</div>\n\
<div class=\"line\">    selectMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1] = sy;</div>\n\
<div class=\"line\">    selectMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0] = -1.0 - sx * (fx * (sxl - vxl) - 1.0);</div>\n\
<div class=\"line\">    selectMatrix.matrix[3][1] = -1.0 - sy * (fy * (syl - vyl) - 1.0);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> projMatrix;</div>\n\
<div class=\"line\">    view.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a62a9c2eb33aec66f3f92e02657c5b341\">projectionMatrix</a>(projMatrix);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ::glMatrixMode(GL_PROJECTION);</div>\n\
<div class=\"line\">    ::glPushMatrix();</div>\n\
<div class=\"line\">    ::glLoadMatrixd(selectMatrix[0]);</div>\n\
<div class=\"line\">    ::glMultMatrixd(projMatrix[0]);</div>\n\
<div class=\"line\">    ::glMatrixMode(GL_MODELVIEW);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ::glScissor(vxl, vyl, width, height);</div>\n\
<div class=\"line\">    ::glEnable(GL_SCISSOR_TEST);</div>\n\
<div class=\"line\">    ::glClear(GL_DEPTH_BUFFER_BIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fWasDepthTestEnabled = ::glIsEnabled(GL_DEPTH_TEST);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWasDepthTestEnabled) {</div>\n\
<div class=\"line\">        ::glEnable(GL_DEPTH_TEST);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">RasterSelect::~RasterSelect() </div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> RasterSelect::processEdges(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr rootNode,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> <span class=\"comment\">/* numWires */</span>,</div>\n\
<div class=\"line\">    VBOProxy::VBOMode vboMode</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view = fSelectInfo.view();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> projMatrix;</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a62a9c2eb33aec66f3f92e02657c5b341\">projectionMatrix</a>(projMatrix);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> modelViewMatrix;</div>\n\
<div class=\"line\">    view.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a32e07853a952c88e39d32d5c27b8db3a\">modelViewMatrix</a>(modelViewMatrix);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> x, y, w, h;</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#abf198a1eaaec64f89430b2bb7cca959d\">viewport</a>(x, y, w, h);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportX = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(x);   <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportY = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(y);   <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportW = w;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportH = h;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fSelectInfo.selectRect(x, y, w, h);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectX = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(x);  <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectY = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(y);  <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectW = w;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectH = h;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> selectAdjustMatrix;</div>\n\
<div class=\"line\">    selectAdjustMatrix[0][0] = viewportW / selectW;</div>\n\
<div class=\"line\">    selectAdjustMatrix[1][1] = viewportH / selectH;</div>\n\
<div class=\"line\">    selectAdjustMatrix[3][0] = ((viewportX + viewportW/2.0) - (selectX + selectW/2.0)) / </div>\n\
<div class=\"line\">        viewportW * 2.0 * selectAdjustMatrix[0][0];</div>\n\
<div class=\"line\">    selectAdjustMatrix[3][1] = ((viewportY + viewportH/2.0) - (selectY + selectH/2.0)) /</div>\n\
<div class=\"line\">        viewportH * 2.0 * selectAdjustMatrix[1][1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> localToPort = modelViewMatrix * projMatrix * selectAdjustMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Frustum frustum(localToPort.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> xform(modelViewMatrix);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        DrawWireframeState state(frustum, seconds, vboMode);</div>\n\
<div class=\"line\">        DrawWireframeTraversal traveral(state, xform, <span class=\"keyword\">false</span>, Frustum::kUnknown);</div>\n\
<div class=\"line\">        rootNode-&gt;accept(traveral);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> RasterSelect::processTriangles(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr rootNode,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> <span class=\"comment\">/* numTriangles */</span>,</div>\n\
<div class=\"line\">    VBOProxy::VBOMode vboMode</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view = fSelectInfo.view();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> projMatrix;</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a62a9c2eb33aec66f3f92e02657c5b341\">projectionMatrix</a>(projMatrix);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> modelViewMatrix;</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a32e07853a952c88e39d32d5c27b8db3a\">modelViewMatrix</a>(modelViewMatrix);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> x, y, w, h;</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#abf198a1eaaec64f89430b2bb7cca959d\">viewport</a>(x, y, w, h);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportX = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(x);   <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportY = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(y);   <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportW = w;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> viewportH = h;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fSelectInfo.selectRect(x, y, w, h);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectX = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(x);  <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectY = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(y);  <span class=\"comment\">// can be less than 0</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectW = w;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> selectH = h;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> selectAdjustMatrix;</div>\n\
<div class=\"line\">    selectAdjustMatrix[0][0] = viewportW / selectW;</div>\n\
<div class=\"line\">    selectAdjustMatrix[1][1] = viewportH / selectH;</div>\n\
<div class=\"line\">    selectAdjustMatrix[3][0] = ((viewportX + viewportW/2.0) - (selectX + selectW/2.0)) / </div>\n\
<div class=\"line\">        viewportW * 2.0 * selectAdjustMatrix[0][0];</div>\n\
<div class=\"line\">    selectAdjustMatrix[3][1] = ((viewportY + viewportH/2.0) - (selectY + selectH/2.0)) /</div>\n\
<div class=\"line\">        viewportH * 2.0 * selectAdjustMatrix[1][1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> localToPort = modelViewMatrix * projMatrix * selectAdjustMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Frustum frustum(localToPort.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> xform(modelViewMatrix);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        DrawShadedState state(frustum, seconds, vboMode);</div>\n\
<div class=\"line\">        DrawShadedTraversal traveral(state, xform, <span class=\"keyword\">false</span>, Frustum::kUnknown);</div>\n\
<div class=\"line\">        rootNode-&gt;accept(traveral);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> RasterSelect::processBoundingBox(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr rootNode,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> seconds</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Not implemented.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bounding Box selection is done by using GL Picking.</span></div>\n\
<div class=\"line\">    assert(0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> RasterSelect::end()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view = fSelectInfo.view();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sxl, syl, sw, sh;</div>\n\
<div class=\"line\">    fSelectInfo.selectRect(sxl, syl, sw, sh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vxl, vyl, vw, vh;</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#abf198a1eaaec64f89430b2bb7cca959d\">viewport</a>(vxl, vyl, vw, vh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width = (MAX_RASTER_SELECT_RENDER_SIZE &lt; sw) ?</div>\n\
<div class=\"line\">        MAX_RASTER_SELECT_RENDER_SIZE : sw;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> height = (MAX_RASTER_SELECT_RENDER_SIZE &lt; sh) ?</div>\n\
<div class=\"line\">        MAX_RASTER_SELECT_RENDER_SIZE : sh;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* selDepth = <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[MAX_RASTER_SELECT_RENDER_SIZE*</div>\n\
<div class=\"line\">                                MAX_RASTER_SELECT_RENDER_SIZE];</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GLint buffer;</div>\n\
<div class=\"line\">    ::glGetIntegerv( GL_READ_BUFFER, &amp;buffer );</div>\n\
<div class=\"line\">    ::glReadBuffer( GL_BACK );</div>\n\
<div class=\"line\">    ::glReadPixels(vxl, vyl, width, height,</div>\n\
<div class=\"line\">                   GL_DEPTH_COMPONENT, GL_FLOAT, (<span class=\"keywordtype\">void</span> *)selDepth); </div>\n\
<div class=\"line\">    ::glReadBuffer( buffer );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j=0; j&lt;height; ++j) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;width; ++i) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> GLfloat depth = selDepth[j*width + i];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (depth &lt; 1.0f) {</div>\n\
<div class=\"line\">                fMinZ = std::min(fMinZ, depth);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }   </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ::glMatrixMode(GL_PROJECTION);</div>\n\
<div class=\"line\">    ::glPopMatrix();</div>\n\
<div class=\"line\">    ::glMatrixMode(GL_MODELVIEW);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ::glDisable(GL_SCISSOR_TEST);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fWasDepthTestEnabled) {</div>\n\
<div class=\"line\">        ::glDisable(GL_DEPTH_TEST);        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">    view.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\">    _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> RasterSelect::isSelected()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fMinZ != std::numeric_limits&lt;float&gt;::max();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> RasterSelect::minZ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fMinZ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";