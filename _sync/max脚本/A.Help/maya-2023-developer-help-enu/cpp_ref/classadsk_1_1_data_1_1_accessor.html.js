var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: Accessor Class Reference</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'classadsk_1_1_data_1_1_accessor.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: Accessor Class Reference</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li class=\"current\"><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
  <div id=\"navrow2\" class=\"tabs2\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Class&#160;List</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/classes.html\"><span>Class&#160;Index</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/hierarchy.html\"><span>Class&#160;Hierarchy</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/functions.html\"><span>Class&#160;Members</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  \n\
  <div class=\"headertitle\">\n\
<div class=\"title\">Accessor Class Reference<span class=\"mlabels\"><span class=\"mlabel\">abstract</span></span></div>  </div>\n\
<div class=\"summary\">\n\
<a href=\"classadsk_1_1_data_1_1_accessor.html#nested-classes\">Classes</a> &#124;\n\
<a href=\"classadsk_1_1_data_1_1_accessor.html#pub-types\">Public Types</a> &#124;\n\
<a href=\"classadsk_1_1_data_1_1_accessor.html#pub-methods\">Public Member Functions</a> &#124;\n\
<a href=\"classadsk_1_1_data_1_1_accessor.html#pub-static-methods\">Static Public Member Functions</a> &#124;\n\
<a href=\"classadsk_1_1_data_1_1_accessor.html#pro-methods\">Protected Member Functions</a> &#124;\n\
<a href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor-members.html\">List of all members</a>  </div></div><!--header-->\n\
<div class=\"contents\">\n\
\n\
<p>Class used to read and write metadata from/to an existing file.  \n\
 <a href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#details\">More...</a></p>\n\
\n\
<p><code>#include &lt;adskDataAccessor.h&gt;</code></p>\n\
<table class=\"memberdecls\">\n\
<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"nested-classes\"></a>\n\
Classes</h2></td></tr>\n\
<tr class=\"memitem:\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/structadsk_1_1_data_1_1_accessor_1_1_structure_name_less_than.html\">StructureNameLessThan</a></td></tr>\n\
<tr class=\"memdesc:\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Functor for <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_structure.html\" title=\"Class handling the definition of the structure of a piece of data. \">Structure</a> ordering in a std::set.  <a href=\"#!/url=./cpp_ref/structadsk_1_1_data_1_1_accessor_1_1_structure_name_less_than.html#details\">More...</a><br></td></tr>\n\
<tr class=\"separator:\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
</table><table class=\"memberdecls\">\n\
<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"pub-types\"></a>\n\
Public Types</h2></td></tr>\n\
<tr class=\"memitem:aff553838464e5f221113da466536a67b\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\"><a class=\"anchor\" id=\"aff553838464e5f221113da466536a67b\"></a>\n\
typedef std::set&lt; const <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_structure.html\">Structure</a> *, <a class=\"el\" href=\"#!/url=./cpp_ref/structadsk_1_1_data_1_1_accessor_1_1_structure_name_less_than.html\">StructureNameLessThan</a> &gt;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#aff553838464e5f221113da466536a67b\">StructureSet</a></td></tr>\n\
<tr class=\"memdesc:aff553838464e5f221113da466536a67b\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Structures are kept in a set that forbids duplicated names. <br></td></tr>\n\
<tr class=\"separator:aff553838464e5f221113da466536a67b\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a1e26ab17d996ee0fecd7cf918fe9915e\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">typedef std::map&lt; std::string, <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\">Associations</a> &gt;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a1e26ab17d996ee0fecd7cf918fe9915e\">AssociationsMap</a></td></tr>\n\
<tr class=\"memdesc:a1e26ab17d996ee0fecd7cf918fe9915e\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> are kept in a map that forbids duplicated names.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a1e26ab17d996ee0fecd7cf918fe9915e\">More...</a><br></td></tr>\n\
<tr class=\"separator:a1e26ab17d996ee0fecd7cf918fe9915e\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
</table><table class=\"memberdecls\">\n\
<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"pub-methods\"></a>\n\
Public Member Functions</h2></td></tr>\n\
<tr class=\"memitem:a9a9181766d6f4beac2cfacad02d3b69c\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">virtual&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a9a9181766d6f4beac2cfacad02d3b69c\">~Accessor</a> ()</td></tr>\n\
<tr class=\"memdesc:a9a9181766d6f4beac2cfacad02d3b69c\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Releases any <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_structure.html\" title=\"Class handling the definition of the structure of a piece of data. \">Structure</a> and <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> objects currently held.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a9a9181766d6f4beac2cfacad02d3b69c\">More...</a><br></td></tr>\n\
<tr class=\"separator:a9a9181766d6f4beac2cfacad02d3b69c\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a3bb7cbc910d4f58b38083eed55a8cc8b\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">bool&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\">read</a> (const std::string &amp;<a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a5a26e7ca655ae170bb3e6a129d2a8b98\">fileName</a>, std::string &amp;errors)</td></tr>\n\
<tr class=\"memdesc:a3bb7cbc910d4f58b38083eed55a8cc8b\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Reads all the structures and associations from the specified file.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\">More...</a><br></td></tr>\n\
<tr class=\"separator:a3bb7cbc910d4f58b38083eed55a8cc8b\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a6e4306d8ca6f506bf5b7360b8050c1fa\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">bool&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a6e4306d8ca6f506bf5b7360b8050c1fa\">read</a> (const std::string &amp;<a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a5a26e7ca655ae170bb3e6a129d2a8b98\">fileName</a>, const std::set&lt; std::string &gt; *wantedStructures, const std::set&lt; std::string &gt; *wantedAssociations, std::string &amp;errors)</td></tr>\n\
<tr class=\"memdesc:a6e4306d8ca6f506bf5b7360b8050c1fa\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Reads the structures and specified associations from the file.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a6e4306d8ca6f506bf5b7360b8050c1fa\">More...</a><br></td></tr>\n\
<tr class=\"separator:a6e4306d8ca6f506bf5b7360b8050c1fa\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a4d8ef07caad1f76d030904fd5e0b26c3\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">virtual bool&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a4d8ef07caad1f76d030904fd5e0b26c3\">write</a> (std::string &amp;errors) const </td></tr>\n\
<tr class=\"memdesc:a4d8ef07caad1f76d030904fd5e0b26c3\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Rewrites the file with the edited structures and associations.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a4d8ef07caad1f76d030904fd5e0b26c3\">More...</a><br></td></tr>\n\
<tr class=\"separator:a4d8ef07caad1f76d030904fd5e0b26c3\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:affc059b6e36359ace301cc87e277561b\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">virtual bool&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#affc059b6e36359ace301cc87e277561b\">isFileSupported</a> (const std::string &amp;<a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a5a26e7ca655ae170bb3e6a129d2a8b98\">fileName</a>) const </td></tr>\n\
<tr class=\"memdesc:affc059b6e36359ace301cc87e277561b\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Returns whether the file passed in is supported by this accessor.  <a href=\"classadsk_1_1_data_1_1_accessor.html#affc059b6e36359ace301cc87e277561b\">More...</a><br></td></tr>\n\
<tr class=\"separator:affc059b6e36359ace301cc87e277561b\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a5a26e7ca655ae170bb3e6a129d2a8b98\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">const std::string &amp;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a5a26e7ca655ae170bb3e6a129d2a8b98\">fileName</a> () const </td></tr>\n\
<tr class=\"memdesc:a5a26e7ca655ae170bb3e6a129d2a8b98\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Returns the file name passed to the last invocation of <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a>.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a5a26e7ca655ae170bb3e6a129d2a8b98\">More...</a><br></td></tr>\n\
<tr class=\"separator:a5a26e7ca655ae170bb3e6a129d2a8b98\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:ad8e4f89a48560ab6bb122b310ffe08e0\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">const <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#aff553838464e5f221113da466536a67b\">StructureSet</a> &amp;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#ad8e4f89a48560ab6bb122b310ffe08e0\">structures</a> () const </td></tr>\n\
<tr class=\"memdesc:ad8e4f89a48560ab6bb122b310ffe08e0\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Get the adsk::Data::Structures currently held by this instance.  <a href=\"classadsk_1_1_data_1_1_accessor.html#ad8e4f89a48560ab6bb122b310ffe08e0\">More...</a><br></td></tr>\n\
<tr class=\"separator:ad8e4f89a48560ab6bb122b310ffe08e0\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a1068a39821079b091af4f93682ea8eb2\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a1068a39821079b091af4f93682ea8eb2\">setStructures</a> (const <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#aff553838464e5f221113da466536a67b\">StructureSet</a> &amp;<a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#ad8e4f89a48560ab6bb122b310ffe08e0\">structures</a>)</td></tr>\n\
<tr class=\"memdesc:a1068a39821079b091af4f93682ea8eb2\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Changes the adsk::Data::Structures currently held by this class.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a1068a39821079b091af4f93682ea8eb2\">More...</a><br></td></tr>\n\
<tr class=\"separator:a1068a39821079b091af4f93682ea8eb2\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a64a9e981f0481bc7f992232430db244c\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">const <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a1e26ab17d996ee0fecd7cf918fe9915e\">AssociationsMap</a> &amp;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a64a9e981f0481bc7f992232430db244c\">associations</a> () const </td></tr>\n\
<tr class=\"memdesc:a64a9e981f0481bc7f992232430db244c\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Get the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">adsk::Data::Associations</a> currently held by this instance.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a64a9e981f0481bc7f992232430db244c\">More...</a><br></td></tr>\n\
<tr class=\"separator:a64a9e981f0481bc7f992232430db244c\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a37dd6f1a9020d6716c099f07126cdec1\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a1e26ab17d996ee0fecd7cf918fe9915e\">AssociationsMap</a> &amp;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a37dd6f1a9020d6716c099f07126cdec1\">associations</a> ()</td></tr>\n\
<tr class=\"memdesc:a37dd6f1a9020d6716c099f07126cdec1\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Get the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">adsk::Data::Associations</a> currently held by this instance.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a37dd6f1a9020d6716c099f07126cdec1\">More...</a><br></td></tr>\n\
<tr class=\"separator:a37dd6f1a9020d6716c099f07126cdec1\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:ac8bb3912a3ce86b15842e79d0b421204\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a> ()</td></tr>\n\
<tr class=\"memdesc:ac8bb3912a3ce86b15842e79d0b421204\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Clears the structures and associations present in the instance.  <a href=\"classadsk_1_1_data_1_1_accessor.html#ac8bb3912a3ce86b15842e79d0b421204\">More...</a><br></td></tr>\n\
<tr class=\"separator:ac8bb3912a3ce86b15842e79d0b421204\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
</table><table class=\"memberdecls\">\n\
<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"pub-static-methods\"></a>\n\
Static Public Member Functions</h2></td></tr>\n\
<tr class=\"memitem:a375affed11ea4d88a2f00dc369a2361a\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">static std::set&lt; std::string &gt;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a375affed11ea4d88a2f00dc369a2361a\">supportedExtensions</a> ()</td></tr>\n\
<tr class=\"memdesc:a375affed11ea4d88a2f00dc369a2361a\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Returns the supported filename extensions.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a375affed11ea4d88a2f00dc369a2361a\">More...</a><br></td></tr>\n\
<tr class=\"separator:a375affed11ea4d88a2f00dc369a2361a\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a52cb84d1f6edfd85c392946033f44c66\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">static std::unique_ptr&lt; <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\">Accessor</a> &gt;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a52cb84d1f6edfd85c392946033f44c66\">accessorByExtension</a> (const std::string &amp;extension)</td></tr>\n\
<tr class=\"memdesc:a52cb84d1f6edfd85c392946033f44c66\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Creates and returns an accessor to handle the specified extension.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a52cb84d1f6edfd85c392946033f44c66\">More...</a><br></td></tr>\n\
<tr class=\"separator:a52cb84d1f6edfd85c392946033f44c66\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a9fe3d001fa5fb6eab8bf638a4dad40e0\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">static std::unique_ptr&lt; <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\">Accessor</a> &gt;&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a9fe3d001fa5fb6eab8bf638a4dad40e0\">readFile</a> (const std::string &amp;<a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a5a26e7ca655ae170bb3e6a129d2a8b98\">fileName</a>, std::string &amp;errors)</td></tr>\n\
<tr class=\"memdesc:a9fe3d001fa5fb6eab8bf638a4dad40e0\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Creates and returns an accessor that can handle the specified file.  <a href=\"classadsk_1_1_data_1_1_accessor.html#a9fe3d001fa5fb6eab8bf638a4dad40e0\">More...</a><br></td></tr>\n\
<tr class=\"separator:a9fe3d001fa5fb6eab8bf638a4dad40e0\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
</table><table class=\"memberdecls\">\n\
<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"pro-methods\"></a>\n\
Protected Member Functions</h2></td></tr>\n\
<tr class=\"memitem:afb09f444d90862bcf8d72bd7684d73bf\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#afb09f444d90862bcf8d72bd7684d73bf\">Accessor</a> ()</td></tr>\n\
<tr class=\"memdesc:afb09f444d90862bcf8d72bd7684d73bf\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Constructs an empty accessor.  <a href=\"classadsk_1_1_data_1_1_accessor.html#afb09f444d90862bcf8d72bd7684d73bf\">More...</a><br></td></tr>\n\
<tr class=\"separator:afb09f444d90862bcf8d72bd7684d73bf\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:ad15faaf5b316b7bf78963bcbf82fa9a5\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">virtual bool&#160;</td><td class=\"memItemRight\" valign=\"bottom\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#ad15faaf5b316b7bf78963bcbf82fa9a5\">performRead</a> (const std::set&lt; std::string &gt; *wantedStructures, const std::set&lt; std::string &gt; *wantedAssociations, std::string &amp;errors)=0</td></tr>\n\
<tr class=\"memdesc:ad15faaf5b316b7bf78963bcbf82fa9a5\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Invoked by <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a> to access the current file.  <a href=\"classadsk_1_1_data_1_1_accessor.html#ad15faaf5b316b7bf78963bcbf82fa9a5\">More...</a><br></td></tr>\n\
<tr class=\"separator:ad15faaf5b316b7bf78963bcbf82fa9a5\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
</table>\n\
<a name=\"details\" id=\"details\"></a><h2 class=\"groupheader\">Detailed Description</h2>\n\
<div class=\"textblock\"><p>Class used to read and write metadata from/to an existing file. </p>\n\
<p>This class is used to read and rewrite a collection of <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_structure.html\" title=\"Class handling the definition of the structure of a piece of data. \">adsk::Data::Structure</a> and <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">adsk::Data::Associations</a> from/to an existing file. </p>\n\
<dl class=\"section \"><div id=\"dynsection-example0\" class=\"dynheader closed\" onclick=\"return toggleVisibility(this)\" style=\"cursor:pointer;\"><dt><img id=\"dynsection-example0-trigger\" src=\"cpp_ref/closed.png\" alt=\"+\"> <b>Examples: </b></dt></div><div id=\"dynsection-example0-content\" class=\"dyncontent\" style=\"display:none;\"><dd><a class=\"el\" href=\"#!/url=./cpp_ref/scene_assembly_2adsk_scene_metadata_cmd_8cpp-example.html#_a33\">sceneAssembly/adskSceneMetadataCmd.cpp</a>, and <a class=\"el\" href=\"#!/url=./cpp_ref/scene_assembly_2adsk_scene_metadata_cmd_8h-example.html#_a9\">sceneAssembly/adskSceneMetadataCmd.h</a>.</dd></div>\n\
</dl></div><h2 class=\"groupheader\">Member Typedef Documentation</h2>\n\
<a class=\"anchor\" id=\"a1e26ab17d996ee0fecd7cf918fe9915e\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">typedef std::map&lt; std::string, <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\">Associations</a> &gt; <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a1e26ab17d996ee0fecd7cf918fe9915e\">AssociationsMap</a></td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> are kept in a map that forbids duplicated names. </p>\n\
<p>The actual file format defines the semantic for the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> names. For example, for certain formats, an empty-name may mean file-level associations rather than per-object associations. </p>\n\
\n\
</div>\n\
</div>\n\
<h2 class=\"groupheader\">Constructor &amp; Destructor Documentation</h2>\n\
<a class=\"anchor\" id=\"a9a9181766d6f4beac2cfacad02d3b69c\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">~<a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\">Accessor</a> </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">virtual</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Releases any <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_structure.html\" title=\"Class handling the definition of the structure of a piece of data. \">Structure</a> and <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> objects currently held. </p>\n\
<p>If the object gets destroyed before any call to <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a4d8ef07caad1f76d030904fd5e0b26c3\" title=\"Rewrites the file with the edited structures and associations. \">write()</a> is made, the changes will be dropped without any change done to the file. </p>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"afb09f444d90862bcf8d72bd7684d73bf\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\">Accessor</a> </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">protected</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Constructs an empty accessor. </p>\n\
<p>Upon construction, the accessor is not bound to any file. Calls to <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a> will load the Structure/Associations object from a given file, provided they are of the format supported by this instance. </p>\n\
\n\
</div>\n\
</div>\n\
<h2 class=\"groupheader\">Member Function Documentation</h2>\n\
<a class=\"anchor\" id=\"a3bb7cbc910d4f58b38083eed55a8cc8b\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">bool read </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>fileName</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>errors</em>&#160;</td>\n\
        </tr>\n\
        <tr>\n\
          <td></td>\n\
          <td>)</td>\n\
          <td></td><td></td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Reads all the structures and associations from the specified file. </p>\n\
<p>Structures and associations are read into the current accessor instance and can then be read and changed through other methods in this API prior to rewriting them in the file, if needed, through <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a4d8ef07caad1f76d030904fd5e0b26c3\" title=\"Rewrites the file with the edited structures and associations. \">write()</a>.</p>\n\
<p>Previous data will be cleared and will not be written to the previous file. Unseccessful read will cause the structures and associations to be emptied, but the new file name will stay.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">fileName</td><td>Name of the file to open and read the structures/associations from. </td></tr>\n\
    <tr><td class=\"paramdir\">[out]</td><td class=\"paramname\">errors</td><td>Errors that happened during reading, if any.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>true if the read was sucessful. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a6e4306d8ca6f506bf5b7360b8050c1fa\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">bool read </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>fileName</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const std::set&lt; std::string &gt; *&#160;</td>\n\
          <td class=\"paramname\"><em>wantedStructures</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const std::set&lt; std::string &gt; *&#160;</td>\n\
          <td class=\"paramname\"><em>wantedAssociations</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>errors</em>&#160;</td>\n\
        </tr>\n\
        <tr>\n\
          <td></td>\n\
          <td>)</td>\n\
          <td></td><td></td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Reads the structures and specified associations from the file. </p>\n\
<p>The specified structures and associations are read into the current accessor instance and can then be read and changed through other methods in this API prior to rewriting them in the file, if needed, through <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a4d8ef07caad1f76d030904fd5e0b26c3\" title=\"Rewrites the file with the edited structures and associations. \">write()</a>.</p>\n\
<p>Passing in null pointers for the set of structure or association names will cause all of them to be read, respectively.</p>\n\
<p>Writing a filtered set of associations back to the file will cause the ones that were not read to be removed from the file.</p>\n\
<p>Previous data will be cleared and will not be written to the previous file. Unseccessful read will cause the structures and associations to be emptied, but the new file name will stay.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">fileName</td><td>Name of the file to open and read the structures/associations from. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">wantedStructures</td><td>Name of the structures to be read. If null, all structures must be read. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">wantedAssociations</td><td>Name of the associations to be read. If null, all asociations must be read. <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> for which one or more Structures were not read due to wantedStructures will not be read. </td></tr>\n\
    <tr><td class=\"paramdir\">[out]</td><td class=\"paramname\">errors</td><td>Errors that happened during reading, if any.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>true if the read was sucessful. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a4d8ef07caad1f76d030904fd5e0b26c3\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">bool write </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>errors</em></td><td>)</td>\n\
          <td> const</td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">virtual</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Rewrites the file with the edited structures and associations. </p>\n\
<p>The file is changed in place, so if the caller requires any type of versioning, a copy of the original file must first be taken prior to this call as this does not do it. However, concrete implementations may choose to do so.</p>\n\
<p>The default implementation does nothing and returns false.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[out]</td><td class=\"paramname\">errors</td><td>Errors that happened during writing, if any.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>false if there was an error while writing into the file. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"affc059b6e36359ace301cc87e277561b\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">bool isFileSupported </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>fileName</em></td><td>)</td>\n\
          <td> const</td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">virtual</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Returns whether the file passed in is supported by this accessor. </p>\n\
<p>Accessors handle files based on their extension. However, some files having the expected extension may still be unsupported (e.g.: earlier version).</p>\n\
<p>The default implementation returns true.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">fileName</td><td>File to inspect.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>true if the file is supported by this accessor. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a5a26e7ca655ae170bb3e6a129d2a8b98\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">const std::string &amp; fileName </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td> const</td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Returns the file name passed to the last invocation of <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a>. </p>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>The file name currently used. The reference stays valid until the next call to <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a>. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"ad8e4f89a48560ab6bb122b310ffe08e0\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">const <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#aff553838464e5f221113da466536a67b\">Accessor::StructureSet</a> &amp; structures </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td> const</td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Get the adsk::Data::Structures currently held by this instance. </p>\n\
<p>These are the structures found on the last call to <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a>, or that were set through setStructures.</p>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>A reference to the internal structures container. The container cannot be edited in place because structures are ref-counted by this class. The reference stays valid until the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\" title=\"Class used to read and write metadata from/to an existing file. \">Accessor</a> instance is destroyed. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a1068a39821079b091af4f93682ea8eb2\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">void setStructures </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#aff553838464e5f221113da466536a67b\">StructureSet</a> &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>structures</em></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Changes the adsk::Data::Structures currently held by this class. </p>\n\
<p>These are the Structures that will be written to the file when it will be written via <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a4d8ef07caad1f76d030904fd5e0b26c3\" title=\"Rewrites the file with the edited structures and associations. \">write()</a>. It is the caller\'s responsibility to make sure all structures used by the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> found in this instance\'s <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> map are present in this set.</p>\n\
<p>Previous adsk::Data::Structures will be unref()\'ed, and the new structures will be ref()\'ed.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">structures</td><td>The new structures. </td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a64a9e981f0481bc7f992232430db244c\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">const <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a1e26ab17d996ee0fecd7cf918fe9915e\">Accessor::AssociationsMap</a> &amp; associations </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td> const</td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Get the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">adsk::Data::Associations</a> currently held by this instance. </p>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>A reference to the internal associations container. The container cannot be edited through this reference, but any changes made through the non-const version of this accessor will be visible through the reference. </dd></dl>\n\
<dl class=\"section \"><div id=\"dynsection-example1\" class=\"dynheader closed\" onclick=\"return toggleVisibility(this)\" style=\"cursor:pointer;\"><dt><img id=\"dynsection-example1-trigger\" src=\"cpp_ref/closed.png\" alt=\"+\"> <b>Examples: </b></dt></div><div id=\"dynsection-example1-content\" class=\"dyncontent\" style=\"display:none;\"><dd><a class=\"el\" href=\"#!/url=./cpp_ref/scene_assembly_2adsk_scene_metadata_cmd_8cpp-example.html#a34\">sceneAssembly/adskSceneMetadataCmd.cpp</a>.</dd></div>\n\
</dl>\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a37dd6f1a9020d6716c099f07126cdec1\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\"><a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a1e26ab17d996ee0fecd7cf918fe9915e\">Accessor::AssociationsMap</a> &amp; associations </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Get the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">adsk::Data::Associations</a> currently held by this instance. </p>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>A reference to the internal associations container. The container can be edited in place. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"ac8bb3912a3ce86b15842e79d0b421204\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">void clear </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Clears the structures and associations present in the instance. </p>\n\
<p>The file name stays unchanged. </p>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a375affed11ea4d88a2f00dc369a2361a\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">std::set&lt; std::string &gt; supportedExtensions </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">static</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Returns the supported filename extensions. </p>\n\
<p>For debugging or informational purposes. The extensions are converted to lowercase.</p>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>The supported filename extensions, in lowercase. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a52cb84d1f6edfd85c392946033f44c66\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">std::unique_ptr&lt; <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\">Accessor</a> &gt; accessorByExtension </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>extension</em></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">static</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Creates and returns an accessor to handle the specified extension. </p>\n\
<p>Finds the factory whose extension matches the one passed in. For convenience, the string passed in will be treated as a filename and only the part following the \'.\', if any, will be kept.</p>\n\
<p>If a match is found, a new <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\" title=\"Class used to read and write metadata from/to an existing file. \">Accessor</a> is created with the factory\'s create() method. Otherwise, a null pointer is returned.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">extension</td><td>Extension to be handled by the returned accessor. Can be a filename.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>Pointer to a new accessor if a matching extension was found. Returns a null pointer if no accessor could be found for this type. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a9fe3d001fa5fb6eab8bf638a4dad40e0\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">std::unique_ptr&lt; <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\">Accessor</a> &gt; readFile </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>fileName</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>errors</em>&#160;</td>\n\
        </tr>\n\
        <tr>\n\
          <td></td>\n\
          <td>)</td>\n\
          <td></td><td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">static</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Creates and returns an accessor that can handle the specified file. </p>\n\
<p>Finds the factory whose file name extension matches that of the file name passed in, if any, and creates a new <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\" title=\"Class used to read and write metadata from/to an existing file. \">Accessor</a> with the factory\'s create() method. On success it calls <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a> on the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\" title=\"Class used to read and write metadata from/to an existing file. \">Accessor</a> and only returns the newly created <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html\" title=\"Class used to read and write metadata from/to an existing file. \">Accessor</a> if the read has succeeded.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">fileName</td><td>Name of the file to open and read. </td></tr>\n\
    <tr><td class=\"paramdir\">[out]</td><td class=\"paramname\">errors</td><td>Errors that occured during file read, if any.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>On success, returns an accesor with the file\'s data already read. Returns a null pointer if no accessor could be found for this type or reading the file fails. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"ad15faaf5b316b7bf78963bcbf82fa9a5\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\">bool performRead </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const std::set&lt; std::string &gt; *&#160;</td>\n\
          <td class=\"paramname\"><em>wantedStructures</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const std::set&lt; std::string &gt; *&#160;</td>\n\
          <td class=\"paramname\"><em>wantedAssociations</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">std::string &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>errors</em>&#160;</td>\n\
        </tr>\n\
        <tr>\n\
          <td></td>\n\
          <td>)</td>\n\
          <td></td><td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">protected</span><span class=\"mlabel\">pure virtual</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>Invoked by <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a> to access the current file. </p>\n\
<p>The current file\'s name is obtained with <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a5a26e7ca655ae170bb3e6a129d2a8b98\" title=\"Returns the file name passed to the last invocation of read(). \">fileName()</a>. Concrete implementations must read the specified structures/associations, if any, or all of them, otherwise. Upon success, the structures are read from <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_structure.html#ac7469a5f55773910be2f91f07ff14343\" title=\"Global list of all defined structures. \">adsk::Data::Structure::allStructures()</a> and kept in this instance. The associations, on the other hand, must be set by the derived class by editing the associations map returned from <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a37dd6f1a9020d6716c099f07126cdec1\" title=\"Get the adsk::Data::Associations currently held by this instance. \">associations()</a>.</p>\n\
<p>The caller (the <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#a3bb7cbc910d4f58b38083eed55a8cc8b\" title=\"Reads all the structures and associations from the specified file. \">read()</a> method) deals with saving/restoring the content of <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_structure.html#ac7469a5f55773910be2f91f07ff14343\" title=\"Global list of all defined structures. \">adsk::Data::Structure::allStructures()</a> before/after the call, and clearing the existing structures/associations present in the instance before calling <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_accessor.html#ad15faaf5b316b7bf78963bcbf82fa9a5\" title=\"Invoked by read() to access the current file. \">performRead()</a>.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">wantedStructures</td><td>Name of the structures to be read. If null, all structures must be read. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">wantedAssociations</td><td>Name of the associations to be read. If null, all asociations must be read. <a class=\"el\" href=\"#!/url=./cpp_ref/classadsk_1_1_data_1_1_associations.html\" title=\"Class handling associations between internal and external data. \">Associations</a> for which one or more Structures were not read due to wantedStructures will not be read. </td></tr>\n\
    <tr><td class=\"paramdir\">[out]</td><td class=\"paramname\">errors</td><td>Errors that happended during reading, if any.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>True upon success. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<hr>The documentation for this class was generated from the following files:<ul>\n\
<li>adskDataAccessor.h</li>\n\
<li>adskDataAccessor.cpp</li>\n\
</ul>\n\
</div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";