var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/CacheWriterAlembic.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2_cache_writer_alembic_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/CacheWriterAlembic.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/CacheWriterAlembic.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheWriterAlembic.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheAlembicUtil.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheStrings.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTime.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcCoreOgawa/ReadWrite.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcCoreAbstract/TimeSamplingType.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/ArchiveBounds.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>CacheAlembicUtil;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL FUNCTIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>SubNodeWriterVisitor : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        SubNodeWriterVisitor(</div>\n\
<div class=\"line\">            Alembic::Abc::OObject   parent,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span>                  secondsPerSample,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span>                  startTimeInSeconds</div>\n\
<div class=\"line\">        ) </div>\n\
<div class=\"line\">            : fParent(parent),</div>\n\
<div class=\"line\">              fSecondsPerSample(secondsPerSample),</div>\n\
<div class=\"line\">              fStartTimeInSeconds(startTimeInSeconds),</div>\n\
<div class=\"line\">              fMaxNumSamples(0)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp;   xform,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            AlembicXformWriter xformWriter(</div>\n\
<div class=\"line\">                fParent, subNode.getName(), fSecondsPerSample, fStartTimeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// The number of samples of this xform.</span></div>\n\
<div class=\"line\">            fMaxNumSamples = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            XformData::SampleMap::const_iterator it  =</div>\n\
<div class=\"line\">                xform.getSamples().begin();</div>\n\
<div class=\"line\">            XformData::SampleMap::const_iterator end =</div>\n\
<div class=\"line\">                xform.getSamples().end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != end) {</div>\n\
<div class=\"line\">                std::shared_ptr&lt;const XformSample&gt; sample = it-&gt;second;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> time = fStartTimeInSeconds + 0.5f * fSecondsPerSample;</div>\n\
<div class=\"line\">                xformWriter.write(sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                ++it;</div>\n\
<div class=\"line\">                time += fSecondsPerSample;</div>\n\
<div class=\"line\">                ++fMaxNumSamples;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (;it != end; ++it, time += fSecondsPerSample, ++fMaxNumSamples) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> nextTime = it-&gt;second-&gt;timeInSeconds();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">while</span> (time &lt; nextTime) {</div>\n\
<div class=\"line\">                        xformWriter.write(sample, sample);</div>\n\
<div class=\"line\">                        time += fSecondsPerSample;</div>\n\
<div class=\"line\">                        ++fMaxNumSamples;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const XformSample&gt; prev = sample;</div>\n\
<div class=\"line\">                    sample = it-&gt;second;</div>\n\
<div class=\"line\">                    xformWriter.write(sample, prev);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Recurse into children sub nodes. Expand all instances.</span></div>\n\
<div class=\"line\">            SubNodeWriterVisitor visitor(xformWriter.object(),</div>\n\
<div class=\"line\">                                         fSecondsPerSample, fStartTimeInSeconds);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; child : subNode.getChildren()) {</div>\n\
<div class=\"line\">                child-&gt;accept(visitor);</div>\n\
<div class=\"line\">                fMaxNumSamples = std::max(fMaxNumSamples, visitor.maxNumSamples());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp;   shape,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            AlembicMeshWriter meshWriter(</div>\n\
<div class=\"line\">                fParent, subNode.getName(), fSecondsPerSample, fStartTimeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// The number of samples of this shape.</span></div>\n\
<div class=\"line\">            fMaxNumSamples = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ShapeData::SampleMap::const_iterator it  =</div>\n\
<div class=\"line\">                shape.getSamples().begin();</div>\n\
<div class=\"line\">            ShapeData::SampleMap::const_iterator end =</div>\n\
<div class=\"line\">                shape.getSamples().end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != end) {</div>\n\
<div class=\"line\">                std::shared_ptr&lt;const ShapeSample&gt; sample = it-&gt;second;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> time = fStartTimeInSeconds + 0.5f * fSecondsPerSample;</div>\n\
<div class=\"line\">                meshWriter.write(sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                ++it;</div>\n\
<div class=\"line\">                time += fSecondsPerSample;</div>\n\
<div class=\"line\">                ++fMaxNumSamples;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (;it != end; ++it, time += fSecondsPerSample, ++fMaxNumSamples) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> nextTime = it-&gt;second-&gt;timeInSeconds();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">while</span> (time &lt; nextTime) {</div>\n\
<div class=\"line\">                        meshWriter.write(sample, sample);</div>\n\
<div class=\"line\">                        time += fSecondsPerSample;</div>\n\
<div class=\"line\">                        ++fMaxNumSamples;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    std::shared_ptr&lt;const ShapeSample&gt; prev = sample;</div>\n\
<div class=\"line\">                    sample = it-&gt;second;</div>\n\
<div class=\"line\">                    meshWriter.write(sample, prev);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Write material assignment (only whole object assignment now)</span></div>\n\
<div class=\"line\">            assert(shape.getMaterials().size() &lt;= 1);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!shape.getMaterials().empty() &amp;&amp; shape.getMaterials()[0].length() &gt; 0) {</div>\n\
<div class=\"line\">                <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> material = shape.getMaterials()[0];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Full IMaterial object path within the Alembic archive</span></div>\n\
<div class=\"line\">                std::string materialAssignmentPath = <span class=\"stringliteral\">&quot;/&quot;</span>;</div>\n\
<div class=\"line\">                materialAssignmentPath += kMaterialsObject;</div>\n\
<div class=\"line\">                materialAssignmentPath += <span class=\"stringliteral\">&quot;/&quot;</span>;</div>\n\
<div class=\"line\">                materialAssignmentPath += material.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                Alembic::AbcMaterial::addMaterialAssignment(</div>\n\
<div class=\"line\">                    meshWriter.object(),</div>\n\
<div class=\"line\">                    materialAssignmentPath</div>\n\
<div class=\"line\">                );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> maxNumSamples()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"comment\">// We are using the same time sampling for all properties.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Returns the max number of samples that can be used to compute</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the end time: startTime + (numSamples-1) * secondsPerSample.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fMaxNumSamples;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        Alembic::Abc::OObject   fParent;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>            fSecondsPerSample;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>            fStartTimeInSeconds;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>            fMaxNumSamples;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This class computes the archive bounds from a sub-node hierarchy.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ArchiveBoundsVisitor : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ArchiveBoundsVisitor(<span class=\"keywordtype\">double</span> timeInSeconds, <span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; matrix)</div>\n\
<div class=\"line\">            : fTimeInSeconds(timeInSeconds), fMatrix(matrix)</div>\n\
<div class=\"line\">        {}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp;   xform,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp; sample = </div>\n\
<div class=\"line\">                xform.getSample(fTimeInSeconds);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!sample) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> matrix = sample-&gt;xform() * fMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> SubNode::Ptr&amp; child : subNode.getChildren()) {</div>\n\
<div class=\"line\">                ArchiveBoundsVisitor visitor(fTimeInSeconds, matrix);</div>\n\
<div class=\"line\">                child-&gt;accept(visitor);</div>\n\
<div class=\"line\">                fBoundingBox.expand(visitor.getBoundingBox());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp;   shape,</div>\n\
<div class=\"line\">                           <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample = </div>\n\
<div class=\"line\">                shape.getSample(fTimeInSeconds);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!sample) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fBoundingBox = sample-&gt;boundingBox();</div>\n\
<div class=\"line\">            fBoundingBox.transformUsing(fMatrix);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; getBoundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fBoundingBox;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> computeArchiveBounds(<span class=\"keyword\">const</span> SubNode::Ptr&amp;            topNode, </div>\n\
<div class=\"line\">                                         Alembic::Abc::TimeSamplingPtr&amp; timeSampling,</div>\n\
<div class=\"line\">                                         <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>                   maxNumSamples,</div>\n\
<div class=\"line\">                                         std::vector&lt;MBoundingBox&gt;&amp;     archiveBounds)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!topNode || !timeSampling || maxNumSamples == 0) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Match the number of samples.</span></div>\n\
<div class=\"line\">            assert(maxNumSamples &gt;= archiveBounds.size());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (maxNumSamples &gt; archiveBounds.size()) {</div>\n\
<div class=\"line\">                archiveBounds.resize(maxNumSamples, </div>\n\
<div class=\"line\">                    !archiveBounds.empty() ? archiveBounds.back() : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; maxNumSamples; i++) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// The top-level bounding box of this sub-node hierarchy.</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> timeInSeconds = timeSampling-&gt;getSampleTime(i);</div>\n\
<div class=\"line\">                ArchiveBoundsVisitor visitor(timeInSeconds, <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a9b368179e6c468c7fc4e6b3358ae6f2f\">MMatrix::identity</a>);</div>\n\
<div class=\"line\">                topNode-&gt;accept(visitor);</div>\n\
<div class=\"line\">                archiveBounds[i].expand(visitor.getBoundingBox());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>       fTimeInSeconds;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>      fMatrix;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> fBoundingBox;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>AlembicCacheWriter::MakeSharedEnabler: <span class=\"keyword\">public</span> AlembicCacheWriter{</div>\n\
<div class=\"line\">    MakeSharedEnabler(<span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file, <span class=\"keywordtype\">char</span> compressLevel)</div>\n\
<div class=\"line\">            :AlembicCacheWriter(file, compressLevel){}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;CacheWriter&gt; AlembicCacheWriter::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> compressLevel)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MakeSharedEnabler&gt;(file, compressLevel);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheWriter::AlembicCacheWriter(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file, <span class=\"keywordtype\">char</span> compressLevel)</div>\n\
<div class=\"line\">    : fFile(file), </div>\n\
<div class=\"line\">      fCompressLevel(compressLevel),</div>\n\
<div class=\"line\">      fMaxNumSamples(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName = file.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a9484f49594e6f95729f1be1608a6ae8f\">resolvedFullName</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Always use ogawa data format</span></div>\n\
<div class=\"line\">        fAbcArchive = Alembic::Abc::OArchive(</div>\n\
<div class=\"line\">            Alembic::AbcCoreOgawa::WriteArchive(),</div>\n\
<div class=\"line\">            fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">            Alembic::Abc::ErrorHandler::kThrowPolicy</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fAbcArchive.valid()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// compress level, -1,0~9</span></div>\n\
<div class=\"line\">            fAbcArchive.setCompressionHint(fCompressLevel);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// update the file name, Alembic might rename the file</span></div>\n\
<div class=\"line\">            std::string realName = fAbcArchive.getName();</div>\n\
<div class=\"line\">            fFile.setRawFullName(realName.c_str());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msgFmt = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kOpenFileForWriteErrorMsg, stat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg;</div>\n\
<div class=\"line\">        errorMsg.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(msgFmt, fileName, ex.what());</div>\n\
<div class=\"line\">        <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicCacheWriter::~AlembicCacheWriter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Write meta data to archive.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fAbcTimeSampling &amp;&amp; fMaxNumSamples != 0) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Attach *.samples property to indicate the max number of samples.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> tsIndex = fAbcArchive.addTimeSampling(*fAbcTimeSampling);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (tsIndex != 0) {</div>\n\
<div class=\"line\">                std::stringstream propName;</div>\n\
<div class=\"line\">                propName &lt;&lt; tsIndex &lt;&lt; <span class=\"stringliteral\">&quot;.samples&quot;</span>;</div>\n\
<div class=\"line\">                Alembic::Abc::OUInt32Property samplesProp(</div>\n\
<div class=\"line\">                    fAbcArchive.getTop().getProperties(), propName.str());</div>\n\
<div class=\"line\">                samplesProp.set(fMaxNumSamples);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Attach archive bounds property.</span></div>\n\
<div class=\"line\">            Alembic::Abc::OBox3dProperty boxProp = </div>\n\
<div class=\"line\">                Alembic::AbcGeom::CreateOArchiveBounds(fAbcArchive, fAbcTimeSampling);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; fMaxNumSamples; i++) {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> min = fArchiveBounds[i].min();</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> max = fArchiveBounds[i].max();</div>\n\
<div class=\"line\">                boxProp.set(Alembic::Abc::Box3d(</div>\n\
<div class=\"line\">                    Alembic::Abc::V3d(min.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, min.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, min.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>),</div>\n\
<div class=\"line\">                    Alembic::Abc::V3d(max.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, max.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, max.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>)</div>\n\
<div class=\"line\">                ));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// close all handles</span></div>\n\
<div class=\"line\">        fAbcArchive.reset();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msgFmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kWriteAlembicErrorMsg, stat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg;</div>\n\
<div class=\"line\">        errorMsg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(msgFmt, fFile.resolvedFullName(), ex.what());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AlembicCacheWriter::valid()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fAbcArchive.valid();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicCacheWriter::writeSubNodeHierarchy(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr&amp; topNode, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\">        SubNodeWriterVisitor visitor(</div>\n\
<div class=\"line\">            fAbcArchive.getTop(), secondsPerSample, startTimeInSeconds);</div>\n\
<div class=\"line\">        topNode-&gt;accept(visitor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We always use the same time sampling.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fAbcTimeSampling) {</div>\n\
<div class=\"line\">            Alembic::Abc::TimeSamplingPtr ts = Alembic::Abc::TimeSamplingPtr(</div>\n\
<div class=\"line\">                <span class=\"keyword\">new</span> Alembic::Abc::TimeSampling(secondsPerSample, startTimeInSeconds));</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> tsIndex = fAbcArchive.addTimeSampling(*ts);</div>\n\
<div class=\"line\">            fAbcTimeSampling = fAbcArchive.getTimeSampling(tsIndex);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Uniform</span></div>\n\
<div class=\"line\">            assert(fAbcTimeSampling-&gt;getNumStoredTimes() == 1);</div>\n\
<div class=\"line\">            assert(fAbcTimeSampling-&gt;getStoredTimes()[0] == startTimeInSeconds);</div>\n\
<div class=\"line\">            assert(fAbcTimeSampling-&gt;getTimeSamplingType().getTimePerCycle() == secondsPerSample);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The max number of samples for the time sampling.</span></div>\n\
<div class=\"line\">        fMaxNumSamples = std::max(fMaxNumSamples, visitor.maxNumSamples());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The archive bounds.</span></div>\n\
<div class=\"line\">        ArchiveBoundsVisitor::computeArchiveBounds(</div>\n\
<div class=\"line\">            topNode, fAbcTimeSampling, fMaxNumSamples, fArchiveBounds);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msgFmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kWriteAlembicErrorMsg, stat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg;</div>\n\
<div class=\"line\">        errorMsg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(msgFmt, fFile.resolvedFullName(), ex.what());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicCacheWriter::writeMaterials(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MaterialGraphMap::Ptr&amp; materialGraphMap,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span> {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; alembicLock(gsAlembicMutex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We write all materials to /materials.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Maya doesn&#39;t support material hierarchy so we write a flat hierarchy.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// As a result, we will have</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//     /materials/lambert1</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//     /materials/phong1</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create the &quot;materials&quot; object.</span></div>\n\
<div class=\"line\">        Alembic::Abc::OObject materialsObject(fAbcArchive.getTop(), kMaterialsObject);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Loop over all material graphs and write them separately.</span></div>\n\
<div class=\"line\">        assert(materialGraphMap);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MaterialGraphMap::NamedMap::value_type&amp; val :</div>\n\
<div class=\"line\">                materialGraphMap-&gt;getGraphs()) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialGraph::Ptr&amp; graph = val.second;</div>\n\
<div class=\"line\">            assert(graph);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Write a material graph.</span></div>\n\
<div class=\"line\">            MaterialGraphWriter writer(</div>\n\
<div class=\"line\">                materialsObject, secondsPerSample, startTimeInSeconds, graph);</div>\n\
<div class=\"line\">            writer.write();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> (std::exception&amp; ex) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msgFmt = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kWriteAlembicErrorMsg, stat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg;</div>\n\
<div class=\"line\">        errorMsg.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>(msgFmt, fFile.resolvedFullName(), ex.what());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; AlembicCacheWriter::getFileObject()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fFile;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicXformWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicXformWriter::AlembicXformWriter(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Alembic::Abc::OObject&amp; parent, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds)</div>\n\
<div class=\"line\">  : fCachedWrite(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// determine the time between two samples and the start time</span></div>\n\
<div class=\"line\">    fTimeSampPtr = Alembic::Abc::TimeSamplingPtr(</div>\n\
<div class=\"line\">        <span class=\"keyword\">new</span> Alembic::Abc::TimeSampling(secondsPerSample, startTimeInSeconds));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create a xform object</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OXform xformObject(parent, name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), fTimeSampPtr);</div>\n\
<div class=\"line\">    fAbcXform = xformObject.getSchema();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Alembic::Abc::OObject AlembicXformWriter::object()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fAbcXform.getObject();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicXformWriter::write(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp;  sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// create empty xform samples</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformSample xformSample;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// fill it</span></div>\n\
<div class=\"line\">    fillXform(xformSample, sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write it</span></div>\n\
<div class=\"line\">    fAbcXform.set(xformSample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write visibility</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!sample-&gt;visibility()) {</div>\n\
<div class=\"line\">        Alembic::Abc::OObject <span class=\"keywordtype\">object</span> = fAbcXform.getObject();</div>\n\
<div class=\"line\">        fVisibility = Alembic::AbcGeom::CreateVisibilityProperty(<span class=\"keywordtype\">object</span>, fTimeSampPtr);</div>\n\
<div class=\"line\">        fVisibility.set(<span class=\"keywordtype\">char</span>(Alembic::AbcGeom::kVisibilityHidden));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fCachedWrite++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicXformWriter::write(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp;  sample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp;  prev)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!sample-&gt;xform().isEquivalent(prev-&gt;xform()))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// create empty xform samples</span></div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformSample xformSample;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// fill it</span></div>\n\
<div class=\"line\">        fillXform(xformSample, sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// write it</span></div>\n\
<div class=\"line\">        fAbcXform.set(xformSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// reuse the previous sample</span></div>\n\
<div class=\"line\">        fAbcXform.setFromPrevious();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write visibility</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!sample-&gt;visibility() &amp;&amp; !fVisibility) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// create visibility property</span></div>\n\
<div class=\"line\">        Alembic::Abc::OObject <span class=\"keywordtype\">object</span> = fAbcXform.getObject();</div>\n\
<div class=\"line\">        fVisibility = Alembic::AbcGeom::CreateVisibilityProperty(<span class=\"keywordtype\">object</span>, fTimeSampPtr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// flush cached visibility sample</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fCachedWrite; i++) {</div>\n\
<div class=\"line\">            fVisibility.set(<span class=\"keywordtype\">char</span>(Alembic::AbcGeom::kVisibilityDeferred));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibility) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sample-&gt;visibility() == prev-&gt;visibility()) {</div>\n\
<div class=\"line\">            fVisibility.setFromPrevious();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            fVisibility.set(<span class=\"keywordtype\">char</span>(sample-&gt;visibility() ? </div>\n\
<div class=\"line\">                Alembic::AbcGeom::kVisibilityDeferred : </div>\n\
<div class=\"line\">                Alembic::AbcGeom::kVisibilityHidden));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fCachedWrite++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicXformWriter::fillXform(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformSample&amp;              xformSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp; sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// get the world transformation matrix</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Alembic::Abc::M44d abcWorldMatrix(sample-&gt;xform().matrix);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// setup Xform matrix operation</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformOp opMatrix(Alembic::AbcGeom::kMatrixOperation,</div>\n\
<div class=\"line\">                                       Alembic::AbcGeom::kMatrixHint);</div>\n\
<div class=\"line\">    opMatrix.setMatrix(abcWorldMatrix);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add matrix operation to op stack</span></div>\n\
<div class=\"line\">    xformSample.addOp(opMatrix);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicMeshWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AlembicMeshWriter::AlembicMeshWriter(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Alembic::Abc::OObject&amp; parent,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds)</div>\n\
<div class=\"line\">  : fCachedWrite(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// determine the time between two samples and the start time</span></div>\n\
<div class=\"line\">    fTimeSampPtr = Alembic::Abc::TimeSamplingPtr(<span class=\"keyword\">new</span> Alembic::Abc::TimeSampling(secondsPerSample, startTimeInSeconds));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create poly mesh object</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMesh meshObject(parent, name.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), fTimeSampPtr);</div>\n\
<div class=\"line\">    fAbcMesh = meshObject.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create custom property</span></div>\n\
<div class=\"line\">    fAbcCreator = Alembic::Abc::OStringProperty(</div>\n\
<div class=\"line\">        fAbcMesh.getPtr(), kCustomPropertyCreator, fTimeSampPtr);</div>\n\
<div class=\"line\">    fAbcVersion = Alembic::Abc::OStringProperty(</div>\n\
<div class=\"line\">        fAbcMesh.getPtr(), kCustomPropertyVersion, fTimeSampPtr);</div>\n\
<div class=\"line\">    fAbcWireIndices = Alembic::Abc::OInt32ArrayProperty(</div>\n\
<div class=\"line\">        fAbcMesh.getPtr(), kCustomPropertyWireIndices, fTimeSampPtr);</div>\n\
<div class=\"line\">    fAbcDiffuseColor = Alembic::Abc::OC4fProperty(</div>\n\
<div class=\"line\">        fAbcMesh.getPtr(), kCustomPropertyDiffuseColor, fTimeSampPtr);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Alembic::Abc::OObject AlembicMeshWriter::object()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fAbcMesh.getObject();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::write(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp;  sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// create empty mesh samples</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample meshSample;</div>\n\
<div class=\"line\">    Alembic::Abc::Int32ArraySample wireIndicesSample;</div>\n\
<div class=\"line\">    Alembic::Abc::Int32ArraySample groupSizesSample;</div>\n\
<div class=\"line\">    Alembic::Abc::C4f              diffuseColorSample;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// associate samples with arrays</span></div>\n\
<div class=\"line\">    fillWireframeSample(wireIndicesSample, sample);</div>\n\
<div class=\"line\">    fillTriangleSample(meshSample, groupSizesSample, sample);</div>\n\
<div class=\"line\">    fillPositionSample(meshSample, sample);</div>\n\
<div class=\"line\">    fillNormalSample(meshSample, sample, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    fillUVSample(meshSample, sample, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    fillBoundingBoxSample(meshSample, sample);</div>\n\
<div class=\"line\">    fillDiffuseColorSample(diffuseColorSample, sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// store the sample!</span></div>\n\
<div class=\"line\">    fAbcMesh.set(meshSample);</div>\n\
<div class=\"line\">    fAbcCreator.set(kCustomPropertyCreatorValue);</div>\n\
<div class=\"line\">    fAbcVersion.set(kCustomPropertyVersionValue);</div>\n\
<div class=\"line\">    fAbcWireIndices.set(wireIndicesSample);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (groupSizesSample.size() &gt; 1) {</div>\n\
<div class=\"line\">        fAbcGroupSizes = Alembic::Abc::OInt32ArrayProperty(</div>\n\
<div class=\"line\">            fAbcMesh.getPtr(), kCustomPropertyShadingGroupSizes, fTimeSampPtr);</div>\n\
<div class=\"line\">        fAbcGroupSizes.set(groupSizesSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fAbcDiffuseColor.set(diffuseColorSample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write visibility</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!sample-&gt;visibility()) {</div>\n\
<div class=\"line\">        Alembic::Abc::OObject <span class=\"keywordtype\">object</span> = fAbcMesh.getObject();</div>\n\
<div class=\"line\">        fVisibility = Alembic::AbcGeom::CreateVisibilityProperty(<span class=\"keywordtype\">object</span>, fTimeSampPtr);</div>\n\
<div class=\"line\">        fVisibility.set(<span class=\"keywordtype\">char</span>(Alembic::AbcGeom::kVisibilityHidden));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fCachedWrite++;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::write(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp;  sample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp;  prev)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// create empty mesh samples</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample meshSample;</div>\n\
<div class=\"line\">    Alembic::Abc::Int32ArraySample wireIndicesSample;</div>\n\
<div class=\"line\">    Alembic::Abc::Int32ArraySample groupSizesSample;</div>\n\
<div class=\"line\">    Alembic::Abc::C4f              diffuseColorSample;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// associate samples with arrays</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;wireVertIndices() != prev-&gt;wireVertIndices()) {</div>\n\
<div class=\"line\">        fillWireframeSample(wireIndicesSample, sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    assert(sample-&gt;numIndexGroups() == prev-&gt;numIndexGroups());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> i =0; i&lt;sample-&gt;numIndexGroups() &amp;&amp; i&lt;prev-&gt;numIndexGroups(); ++i) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sample-&gt;triangleVertIndices(i) != prev-&gt;triangleVertIndices(i)) {</div>\n\
<div class=\"line\">            fillTriangleSample(meshSample, groupSizesSample, sample);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;positions() != prev-&gt;positions()) {</div>\n\
<div class=\"line\">        fillPositionSample(meshSample, sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;normals() != prev-&gt;normals()) {</div>\n\
<div class=\"line\">        fillNormalSample(meshSample, sample, prev-&gt;normals().get() != NULL);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;uvs() != prev-&gt;uvs()) {</div>\n\
<div class=\"line\">        fillUVSample(meshSample, sample, prev-&gt;uvs().get() != NULL);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> boundingBox     = sample-&gt;boundingBox();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> prevBoundingBox = prev-&gt;boundingBox();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!boundingBox.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>().<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#a86b614743df9c0a142965832305b805c\">isEquivalent</a>(prevBoundingBox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>()) ||</div>\n\
<div class=\"line\">        !boundingBox.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#a86b614743df9c0a142965832305b805c\">isEquivalent</a>(prevBoundingBox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>())) {</div>\n\
<div class=\"line\">        fillBoundingBoxSample(meshSample, sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// store the sample!</span></div>\n\
<div class=\"line\">    fAbcMesh.set(meshSample);</div>\n\
<div class=\"line\">    Alembic::AbcGeom::SetPropUsePrevIfNull(fAbcWireIndices, wireIndicesSample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;diffuseColor() != prev-&gt;diffuseColor()) {</div>\n\
<div class=\"line\">        fillDiffuseColorSample(diffuseColorSample, sample);</div>\n\
<div class=\"line\">        fAbcDiffuseColor.set(diffuseColorSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write visibility</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!sample-&gt;visibility() &amp;&amp; !fVisibility) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// create visibility property</span></div>\n\
<div class=\"line\">        Alembic::Abc::OObject <span class=\"keywordtype\">object</span> = fAbcMesh.getObject();</div>\n\
<div class=\"line\">        fVisibility = Alembic::AbcGeom::CreateVisibilityProperty(<span class=\"keywordtype\">object</span>, fTimeSampPtr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// flush cached visibility sample</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fCachedWrite; i++) {</div>\n\
<div class=\"line\">            fVisibility.set(<span class=\"keywordtype\">char</span>(Alembic::AbcGeom::kVisibilityDeferred));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVisibility) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sample-&gt;visibility() == prev-&gt;visibility()) {</div>\n\
<div class=\"line\">            fVisibility.setFromPrevious();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            fVisibility.set(<span class=\"keywordtype\">char</span>(sample-&gt;visibility() ? </div>\n\
<div class=\"line\">                Alembic::AbcGeom::kVisibilityDeferred : </div>\n\
<div class=\"line\">                Alembic::AbcGeom::kVisibilityHidden));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fCachedWrite++;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::fillWireframeSample(</div>\n\
<div class=\"line\">    Alembic::Abc::Int32ArraySample&amp; wireIndicesSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Wrap the wireframe index sample, no memcpy occurs if the source array is already</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// readable.  If it&#39;s a non-readable buffer, then it will be copied into temporary</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// storage.  The raw data isn&#39;t accessed until the end of this process, so the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// temporary buffer will be kept alive until the AlembicMeshWriter is destroyed.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Wireframe index is stored as custom property.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>* wireIndexArray = NULL;</div>\n\
<div class=\"line\">    IndexBuffer::ReadableArrayPtr readable;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;wireVertIndices()) {</div>\n\
<div class=\"line\">        readable = sample-&gt;wireVertIndices()-&gt;array()-&gt;getReadableArray();</div>\n\
<div class=\"line\">        fIndexReadInterfaces.push_back(readable);</div>\n\
<div class=\"line\">        wireIndexArray = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>*)readable-&gt;get();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> wireIndexCount = sample-&gt;numWires() * 2;</div>\n\
<div class=\"line\">    wireIndicesSample = Alembic::Abc::Int32ArraySample(wireIndexArray, wireIndexCount);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::fillTriangleSample(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">    Alembic::Abc::Int32ArraySample&amp; groupSizesSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numTriangles = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> i=0; i&lt;sample-&gt;numIndexGroups(); ++i) {</div>\n\
<div class=\"line\">        numTriangles += sample-&gt;numTriangles(i);</div>\n\
<div class=\"line\">        fGroupSizes.push_back((<span class=\"keywordtype\">int</span>)sample-&gt;numTriangles(i));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// wrap the group info in custom property.</span></div>\n\
<div class=\"line\">    groupSizesSample = Alembic::Abc::Int32ArraySample(fGroupSizes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// re-allocate polygon count array</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// all polygons are triangles</span></div>\n\
<div class=\"line\">    fPolygonCount.resize(numTriangles, 3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// wrap the polygon count sample, no memcpy occur</span></div>\n\
<div class=\"line\">    meshSample.setFaceCounts(Alembic::Abc::Int32ArraySample(fPolygonCount));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// merge index groups and convert polygon winding from CCW to CW</span></div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Abc::int32_t&gt; faceIndices(numTriangles*3);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>* faceIndicesCW = numTriangles&gt;0 ? (<span class=\"keywordtype\">int</span>*)&amp;(faceIndices[0]) : NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> i=0; i&lt;sample-&gt;numIndexGroups(); ++i) {</div>\n\
<div class=\"line\">        IndexBuffer::ReadableArrayPtr readable;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>* faceIndicesCCW = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sample-&gt;triangleVertIndices(i)) {</div>\n\
<div class=\"line\">            readable = sample-&gt;triangleVertIndices(i)-&gt;array()-&gt;getReadableArray();</div>\n\
<div class=\"line\">            faceIndicesCCW = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>* )readable-&gt;get();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> indicesCount = sample-&gt;numTriangles(i)*3;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> offset=0; offset&lt;indicesCount; faceIndicesCW+=3, offset+=3) {</div>\n\
<div class=\"line\">            faceIndicesCW[0] = faceIndicesCCW[offset + 2];</div>\n\
<div class=\"line\">            faceIndicesCW[1] = faceIndicesCCW[offset + 1];</div>\n\
<div class=\"line\">            faceIndicesCW[2] = faceIndicesCCW[offset + 0];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// wrap the index sample, no memcpy occur</span></div>\n\
<div class=\"line\">    fFaceIndices.swap(faceIndices);</div>\n\
<div class=\"line\">    meshSample.setFaceIndices(Alembic::Abc::Int32ArraySample(fFaceIndices));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::fillPositionSample(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Wrap the position sample, no memcpy occurs if the source array is already</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// readable.  If it&#39;s a non-readable buffer, then it will be copied into temporary</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// storage.  The raw data isn&#39;t accessed until the end of this process, so the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// temporary buffer will be kept alive until the AlembicMeshWriter is destroyed.</span></div>\n\
<div class=\"line\">    VertexBuffer::ReadableArrayPtr readable;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Alembic::Abc::V3f* positionArray = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;positions()) {</div>\n\
<div class=\"line\">        readable = sample-&gt;positions()-&gt;array()-&gt;getReadableArray();</div>\n\
<div class=\"line\">        fVertexReadInterfaces.push_back(readable);</div>\n\
<div class=\"line\">        positionArray = (<span class=\"keyword\">const</span> Alembic::Abc::V3f*)readable-&gt;get();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> positionCount = sample-&gt;numVerts();</div>\n\
<div class=\"line\">    meshSample.setPositions(Alembic::Abc::P3fArraySample(positionArray, positionCount));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::fillNormalSample(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> forceWrite)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We have 3 state here:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 1) Set normals </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2) Set normals with a NULL array</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 3) Not set anything</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Alembic will write normals to file in case 1) and 2)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// In case 3), Alembic will reuse the previous sample.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If forceWrite is true, we write a zero-length array (case 2)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;normals()) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ON3fGeomParam::Sample normalSample;</div>\n\
<div class=\"line\">        normalSample.setScope(Alembic::AbcGeom::kVertexScope);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Wrap the normal sample, no memcpy occurs if the source array is already</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// readable.  If it&#39;s a non-readable buffer, then it will be copied into temporary</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// storage.  The raw data isn&#39;t accessed until the end of this process, so the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// temporary buffer will be kept alive until the AlembicMeshWriter is destroyed.</span></div>\n\
<div class=\"line\">        VertexBuffer::ReadableArrayPtr readable = sample-&gt;normals()-&gt;array()-&gt;getReadableArray();</div>\n\
<div class=\"line\">        fVertexReadInterfaces.push_back(readable);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::N3f* normalArray =</div>\n\
<div class=\"line\">            (<span class=\"keyword\">const</span> Alembic::Abc::N3f*)(readable-&gt;get());</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> normalCount = sample-&gt;numVerts();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<span class=\"keyword\">nullptr</span> != normalArray || normalCount != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            normalSample.setVals(</div>\n\
<div class=\"line\">                Alembic::AbcGeom::N3fArraySample(normalArray, normalCount));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        meshSample.setNormals(normalSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (forceWrite) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ON3fGeomParam::Sample normalSample;</div>\n\
<div class=\"line\">        normalSample.setScope(Alembic::AbcGeom::kVertexScope);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We need to explicitly pass a 0-length array so that Alembic</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// will write a 0-length array instead of use prev sample</span></div>\n\
<div class=\"line\">        normalSample.setVals(</div>\n\
<div class=\"line\">            Alembic::AbcGeom::N3fArraySample(NULL, 0));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        meshSample.setNormals(normalSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::fillUVSample(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> forceWrite)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sample-&gt;uvs()) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::OV2fGeomParam::Sample uvSample;</div>\n\
<div class=\"line\">        uvSample.setScope(Alembic::AbcGeom::kVertexScope);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Wrap the uv sample, no memcpy occurs if the source array is already</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// readable.  If it&#39;s a non-readable buffer, then it will be copied into temporary</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// storage.  The raw data isn&#39;t accessed until the end of this process, so the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// temporary buffer will be kept alive until the AlembicMeshWriter is destroyed.</span></div>\n\
<div class=\"line\">        VertexBuffer::ReadableArrayPtr readable = sample-&gt;uvs()-&gt;array()-&gt;getReadableArray();</div>\n\
<div class=\"line\">        fVertexReadInterfaces.push_back(readable);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::V2f* uvArray =</div>\n\
<div class=\"line\">            (<span class=\"keyword\">const</span> Alembic::Abc::V2f*)(readable-&gt;get());</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> uvCount = sample-&gt;numVerts();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        uvSample.setVals(Alembic::AbcGeom::V2fArraySample(uvArray, uvCount));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        meshSample.setUVs(uvSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (forceWrite) {</div>\n\
<div class=\"line\">        Alembic::AbcGeom::OV2fGeomParam::Sample uvSample;</div>\n\
<div class=\"line\">        uvSample.setScope(Alembic::AbcGeom::kVertexScope);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// We need to explicitly pass a 0-length array so that Alembic</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// will write a 0-length array instead of use prev sample</span></div>\n\
<div class=\"line\">        uvSample.setVals(Alembic::AbcGeom::V2fArraySample(NULL, 0));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        meshSample.setUVs(uvSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::fillBoundingBoxSample(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// get bounding box sample</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> boundingBox = sample-&gt;boundingBox();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> min = boundingBox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> max = boundingBox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy the bounding box</span></div>\n\
<div class=\"line\">    Alembic::Abc::Box3d selfBounds(</div>\n\
<div class=\"line\">        Alembic::Abc::V3d(min.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, min.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, min.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>),</div>\n\
<div class=\"line\">        Alembic::Abc::V3d(max.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, max.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, max.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>));</div>\n\
<div class=\"line\">    meshSample.setSelfBounds(selfBounds);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AlembicMeshWriter::fillDiffuseColorSample(</div>\n\
<div class=\"line\">    Alembic::AbcGeom::C4f&amp; diffuseColorSample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">  <span class=\"keyword\">const</span> <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> diffuseColor = sample-&gt;diffuseColor();</div>\n\
<div class=\"line\">  diffuseColorSample.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> = diffuseColor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a>;</div>\n\
<div class=\"line\">  diffuseColorSample.g = diffuseColor.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a>;</div>\n\
<div class=\"line\">  diffuseColorSample.b = diffuseColor.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a>;</div>\n\
<div class=\"line\">  diffuseColorSample.a = diffuseColor.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4aec1a5be9d9a4a394a2e49e9744286e\">a</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS MaterialGraphWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialGraphWriter::MaterialGraphWriter(</div>\n\
<div class=\"line\">    Alembic::Abc::OObject     parent,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>                    secondsPerSample,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>                    startTimeInSeconds,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MaterialGraph::Ptr&amp; graph</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">    : fSecondsPerSample(secondsPerSample),</div>\n\
<div class=\"line\">      fStartTimeInSeconds(startTimeInSeconds),</div>\n\
<div class=\"line\">      fGraph(graph)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fGraph);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the time sampling for this material object and all its properties.</span></div>\n\
<div class=\"line\">    fTimeSampPtr = Alembic::Abc::TimeSamplingPtr(</div>\n\
<div class=\"line\">        <span class=\"keyword\">new</span> Alembic::Abc::TimeSampling(secondsPerSample, startTimeInSeconds));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create an OMaterial object</span></div>\n\
<div class=\"line\">    Alembic::AbcMaterial::OMaterial materialObject(</div>\n\
<div class=\"line\">        parent, graph-&gt;name().asChar(), fTimeSampPtr);</div>\n\
<div class=\"line\">    fAbcMaterial = materialObject.getSchema();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialGraphWriter::write()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Add shading nodes to the OMaterial</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialGraph::NamedMap::value_type&amp; val : fGraph-&gt;getNodes()) {</div>\n\
<div class=\"line\">        std::string name = val.second-&gt;name().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">        std::string type = val.second-&gt;type().asChar();</div>\n\
<div class=\"line\">        fAbcMaterial.addNetworkNode(name, kMaterialsGpuCacheTarget, type);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write properties</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialGraph::NamedMap::value_type&amp; val : fGraph-&gt;getNodes()) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MaterialNode::Ptr&amp; node = val.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the Alembic&#39;s parent compound property.</span></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty abcCompoundProp = </div>\n\
<div class=\"line\">            fAbcMaterial.getNetworkNodeParameters(node-&gt;name().asChar());</div>\n\
<div class=\"line\">        assert(abcCompoundProp.valid());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Loop over properties</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MaterialNode::PropertyMap::value_type&amp; val :</div>\n\
<div class=\"line\">                node-&gt;properties()) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialProperty::Ptr&amp; prop = val.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (prop-&gt;type()) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kBool:</div>\n\
<div class=\"line\">                writeMaterialProperty&lt;Alembic::Abc::OBoolProperty&gt;(abcCompoundProp, prop);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kInt32:</div>\n\
<div class=\"line\">                writeMaterialProperty&lt;Alembic::Abc::OInt32Property&gt;(abcCompoundProp, prop);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat:</div>\n\
<div class=\"line\">                writeMaterialProperty&lt;Alembic::Abc::OFloatProperty&gt;(abcCompoundProp, prop);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat2:</div>\n\
<div class=\"line\">                writeMaterialProperty&lt;Alembic::Abc::OV2fProperty&gt;(abcCompoundProp, prop);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kFloat3:</div>\n\
<div class=\"line\">                writeMaterialProperty&lt;Alembic::Abc::OV3fProperty&gt;(abcCompoundProp, prop);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kRGB:</div>\n\
<div class=\"line\">                writeMaterialProperty&lt;Alembic::Abc::OC3fProperty&gt;(abcCompoundProp, prop);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> MaterialProperty::kString:</div>\n\
<div class=\"line\">                <span class=\"comment\">// use wide char ?</span></div>\n\
<div class=\"line\">                writeMaterialProperty&lt;Alembic::Abc::OWstringProperty&gt;(abcCompoundProp, prop);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                assert(0);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add connections to the OMaterial</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialGraph::NamedMap::value_type&amp; val : fGraph-&gt;getNodes()) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MaterialNode::Ptr&amp; node     = val.second;</div>\n\
<div class=\"line\">        std::string              nodeName = node-&gt;name().asChar();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Loop over properties and write source connection.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MaterialNode::PropertyMap::value_type&amp; val :</div>\n\
<div class=\"line\">                node-&gt;properties()) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialProperty::Ptr&amp; prop    = val.second;</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialNode::Ptr      srcNode = prop-&gt;srcNode();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialProperty::Ptr  srcProp = prop-&gt;srcProp();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcNode &amp;&amp; srcProp) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Found a connected property.</span></div>\n\
<div class=\"line\">                std::string propName    = prop-&gt;name().asChar();</div>\n\
<div class=\"line\">                std::string srcNodeName = srcNode-&gt;name().asChar();</div>\n\
<div class=\"line\">                std::string srcPropName = srcProp-&gt;name().asChar();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Write the connection.</span></div>\n\
<div class=\"line\">                fAbcMaterial.setNetworkNodeConnection(</div>\n\
<div class=\"line\">                    nodeName,</div>\n\
<div class=\"line\">                    propName,</div>\n\
<div class=\"line\">                    srcNodeName,</div>\n\
<div class=\"line\">                    srcPropName</div>\n\
<div class=\"line\">                );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write the root (terminal) node.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> MaterialNode::Ptr&amp; rootNode = fGraph-&gt;rootNode();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (rootNode) {</div>\n\
<div class=\"line\">        fAbcMaterial.setNetworkTerminal(</div>\n\
<div class=\"line\">            kMaterialsGpuCacheTarget, </div>\n\
<div class=\"line\">            kMaterialsGpuCacheType,</div>\n\
<div class=\"line\">            rootNode-&gt;name().asChar()</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";