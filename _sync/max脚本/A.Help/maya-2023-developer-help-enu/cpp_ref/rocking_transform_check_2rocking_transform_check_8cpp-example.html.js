var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: rockingTransformCheck/rockingTransformCheck.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'rocking_transform_check_2rocking_transform_check_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: rockingTransformCheck/rockingTransformCheck.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">rockingTransformCheck/rockingTransformCheck.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Example custom transform:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This plug-in implements an example custom transform that</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  can be used to perform a rocking motion around the X axis.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The checkAndSetRotation() method is implemented in order to apply </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  locks and rotation limits to user input. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Geometry of any rotation can be made a child of this transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  to demonstrate the effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The plug-in contains two pieces:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  1. The custom transform node -- rockingTransformCheckNode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  2. The custom transformation matrix -- rockingTransformCheckMatrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  These classes are used together in order to implement the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rocking motion.  Note that the rock attribute is stored outside</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  of the regular transform attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MEL usage:</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    // Create a rocking transform and make a rotated plane</span></div>\n\
<div class=\"line\"><span class=\"comment\">    // its child.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    loadPlugin rockingTransformCheck;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    file -f -new;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    polyPlane -w 1 -h 1 -sx 10 -sy 10 -ax 0 1 0 -cuv 2 -ch 1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    select -r pPlane1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    rotate -r -ws -15 -15 -15 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    createNode rockingTransformCheck;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    parent pPlane1 rockingTransformCheck1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    setAttr rockingTransformCheck1.rockx 10;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    //This rotation will be clamped if</span></div>\n\
<div class=\"line\"><span class=\"comment\">    //CHECK_ROTATION_LIMITS_USING_ATTRIBUTES is off</span></div>\n\
<div class=\"line\"><span class=\"comment\">    select -r rockingTransformCheck1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    rotate -r -ws 80 0 0 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// NOTE: Classes used in this example derive from classes defined in the rockingTransform example. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;rockingTransformCheck.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize our static class variables</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> rockingTransformCheckNode::idCheck(kRockingTransformCheckNodeID);</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> rockingTransformCheckMatrix::idCheck(kRockingTransformCheckMatrixID);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of our custom transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Constructor for matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckMatrix::rockingTransformCheckMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Creator for matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *rockingTransformCheckMatrix::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformCheckMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of our custom transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Constructor of the transform node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckNode::rockingTransformCheckNode()</div>\n\
<div class=\"line\">:   ParentClass()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Destructor of the rocking transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckNode::~rockingTransformCheckNode()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method that returns the new transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *rockingTransformCheckNode::createTransformationMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformCheckMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method that returns a new transform node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *rockingTransformCheckNode::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformCheckNode();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Debugging method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* rockingTransformCheckNode::className() </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;rockingTransformCheckNode&quot;</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method allows the custom transform to apply its own locking</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  mechanism to rotation. Standard dependency graph attribute locking</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  happens automatically and cannot be modified by custom nodes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  If the plug should not be changed, then the value from the passed savedR</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  argument should be returned to be used in the transformation matrix.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> rockingTransformCheckNode::applyRotationLocks(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> &amp;toTest,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> &amp;savedRotation,</div>\n\
<div class=\"line\">                                    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> *ReturnStatus )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Implement a simple lock by checking for an existing attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the following MEL to add the attribute:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  addAttr -ln &quot;rotateLockPlug&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span> = thisMObject();</div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNode( <span class=\"keywordtype\">object</span> );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> rotateLockPlug = depNode.findPlug( <span class=\"stringliteral\">&quot;rotateLockPlug&quot;</span>,  <span class=\"keyword\">true</span>,  &amp;status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the lock does not exist that we return the updated value that has</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// been passed in</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( rotateLockPlug.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> toTest;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// We have a lock.  Returned the original saved value of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// rotation.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> savedRotation;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> rockingTransformCheckNode::applyRotationLimits(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> &amp;unlimitedRotation,</div>\n\
<div class=\"line\">                                      <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> &amp; <span class=\"comment\">/*block*/</span>,</div>\n\
<div class=\"line\">                                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> *ReturnStatus )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if CHECK_ROTATION_LIMITS_USING_ATTRIBUTES</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// A more complete plug-in would take this approach</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> newRotation = unlimitedRotation;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    updateMatrixAttrs(minRotLimitEnable);</div>\n\
<div class=\"line\">    updateMatrixAttrs(maxRotLimitEnable);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    double3 &amp;minLimit = block.inputValue(minRotLimit).asDouble3();</div>\n\
<div class=\"line\">    double3 &amp;maxLimit = block.inputValue(maxRotLimit).asDouble3();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> ii = 0, jj = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (jj = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a510adc09dd64e1f0caf1d0fff0038c08acaf7e241232e1852c1553d0dbe01cc24\">MFnTransform::kRotateMinX</a>, ii = 0; ii &lt; 3; ++ii, ++jj) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isLimited((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a510adc09dd64e1f0caf1d0fff0038c08\">MFnTransform::LimitType</a>)jj) &amp;&amp; </div>\n\
<div class=\"line\">            newRotation[ii] &lt; minLimit[ii]) {</div>\n\
<div class=\"line\">            newRotation[ii] = minLimit[ii];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isLimited((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a510adc09dd64e1f0caf1d0fff0038c08\">MFnTransform::LimitType</a>)(++jj)) &amp;&amp;</div>\n\
<div class=\"line\">            newRotation[ii] &gt; maxLimit[ii]) {</div>\n\
<div class=\"line\">            newRotation[ii] = maxLimit[ii];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ReturnStatus )</div>\n\
<div class=\"line\">        *ReturnStatus = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> newRotation;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For demonstration purposes we limit the rotation to 60</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// degrees and bypass the rotation limit attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    DegreeRadianConverter conv;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> degrees = conv.radiansToDegrees( unlimitedRotation.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( degrees &lt; 60 )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> unlimitedRotation;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> euler;</div>\n\
<div class=\"line\">    euler.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = conv.degreesToRadians( 60.0 );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ReturnStatus )</div>\n\
<div class=\"line\">        *ReturnStatus = MS::kSuccess;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> euler;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method for returning the current rocking transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckMatrix *rockingTransformCheckNode::getRockingTransformCheckMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    rockingTransformCheckMatrix *ltm = (rockingTransformCheckMatrix *) transformationMatrixPtr();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ltm;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";