var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: ik2Bsolver/ik2Bsolver.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'ik2_bsolver_2ik2_bsolver_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: ik2Bsolver/ik2Bsolver.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">ik2Bsolver/ik2Bsolver.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2016 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ik2Bsolver: IK 2 Bone Solver</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This IK solver solves for 2 bones with</span></div>\n\
<div class=\"line\"><span class=\"comment\">// rotate plane capability.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To create the solver, load the plugin, and then type</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the following in the command window:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   createNode -n ik2Bsolver ik2Bsolver;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To use the solver, create two bones using the Joint Tool.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Then either use the IK Handle Tool, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or type the following in the command window:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   ikHandle -sol ik2Bsolver -sj joint1 -ee joint3;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Moving the handle will cause the IK solver to solve.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For convenience, the command &quot;addIK2BsolverCallbacks&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// will set up callbacks to recreate the ik2Bsolver after a </span></div>\n\
<div class=\"line\"><span class=\"comment\">// File-&gt;New or File-&gt;Open, so that the solver will </span></div>\n\
<div class=\"line\"><span class=\"comment\">// appear to be persistent.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MQuaternion.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwQuaternion.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxIkSolverNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIkHandleGroup.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnIkHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnIkEffector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnIkJoint.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSceneMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kSolverType &quot;ik2Bsolver&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kPi 3.14159265358979323846264338327950</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kEpsilon 1.0e-5</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define absoluteValue(x) ((x) &lt; 0 ? (-(x)) : (x))</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// IK 2 Bone Solver Node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"keyword\">class </span>ik2Bsolver : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_ik_solver_node.html\">MPxIkSolverNode</a> {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">                    ik2Bsolver      ();</div>\n\
<div class=\"line\">                    ~ik2Bsolver     ()       <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a5c13a6c88a839b5356861d1d09e820d9\">postConstructor</a> ()       <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_ik_solver_node.html#ad9af4cd7db52bc27f821c2a2981b0d35\">doSolve</a>         ()       <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_ik_solver_node.html#a3bcd6fed2f0610320c279e74737c7bd8\">solverTypeName</a>  () <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"keywordtype\">void</span>*   creator();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initialize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> id;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    AwVector poleVectorFromHandle(<span class=\"keyword\">const</span> <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;handlePath);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>  twistFromHandle(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;handlePath);</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> solveIK(<span class=\"keyword\">const</span> AwPoint &amp;startJointPos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwPoint &amp;midJointPos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwPoint &amp;effectorPos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwPoint &amp;handlePos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwVector &amp;poleVector,</div>\n\
<div class=\"line\">             <span class=\"keywordtype\">double</span> twistValue,</div>\n\
<div class=\"line\">             AwQuaternion &amp;qStart,</div>\n\
<div class=\"line\">             AwQuaternion &amp;qMid);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> ik2Bsolver::id(0x58000030);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ik2Bsolver::ik2Bsolver()</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_ik_solver_node.html\">MPxIkSolverNode</a>()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ik2Bsolver::~ik2Bsolver() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ik2Bsolver::postConstructor()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    setRotatePlane(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* ik2Bsolver::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> ik2Bsolver;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ik2Bsolver::initialize()</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ik2Bsolver::solverTypeName() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method returns the type name used to identify this solver.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(kSolverType);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ik2Bsolver::doSolve()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the doSolve method which calls solveIK.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Handle Group</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ik_handle_group.html\">MIkHandleGroup</a> * handle_group = handleGroup();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (NULL == handle_group) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Handle</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For single chain types of solvers, get the 0th handle.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Single chain solvers are solvers which act on one handle only, </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// i.e. the handle group for a single chain solver</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// has only one handle</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> handle = handle_group-&gt;<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_ik_handle_group.html#a944d8fa790977c9f78ca7686d1a5e8ec\">handle</a>(0);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> handlePath;</div>\n\
<div class=\"line\">    <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>(handle, handlePath);</div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_handle.html\">MFnIkHandle</a> handleFn(handlePath, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Effector</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> effectorPath;</div>\n\
<div class=\"line\">    handleFn.getEffector(effectorPath);</div>\n\
<div class=\"line\">    <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_effector.html\">MFnIkEffector</a> effectorFn(effectorPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mid Joint</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    effectorPath.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>();</div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html\">MFnIkJoint</a> midJointFn(effectorPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Start Joint</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> startJointPath;</div>\n\
<div class=\"line\">    handleFn.getStartJoint(startJointPath);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html\">MFnIkJoint</a> startJointFn(startJointPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Preferred angles</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> startJointPrefAngle[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> midJointPrefAngle[3];</div>\n\
<div class=\"line\">    startJointFn.getPreferedAngle(startJointPrefAngle);</div>\n\
<div class=\"line\">    midJointFn.getPreferedAngle(midJointPrefAngle);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set to preferred angles</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    startJointFn.setRotation(startJointPrefAngle, </div>\n\
<div class=\"line\">                             startJointFn.rotationOrder());</div>\n\
<div class=\"line\">    midJointFn.setRotation(midJointPrefAngle, </div>\n\
<div class=\"line\">                           midJointFn.rotationOrder());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwPoint handlePos = handleFn.rotatePivot(<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>);</div>\n\
<div class=\"line\">    AwPoint effectorPos = effectorFn.rotatePivot(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>);</div>\n\
<div class=\"line\">    AwPoint midJointPos = midJointFn.rotatePivot(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>);</div>\n\
<div class=\"line\">    AwPoint startJointPos = startJointFn.rotatePivot(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>);</div>\n\
<div class=\"line\">    AwVector poleVector = poleVectorFromHandle(handlePath);</div>\n\
<div class=\"line\">    poleVector *= handlePath.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4a21a7fcd1313acb0137b7eb6acf0d0d\">exclusiveMatrix</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> twistValue = twistFromHandle(handlePath);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AwQuaternion qStart, qMid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    solveIK(startJointPos,</div>\n\
<div class=\"line\">            midJointPos,</div>\n\
<div class=\"line\">            effectorPos,</div>\n\
<div class=\"line\">            handlePos,</div>\n\
<div class=\"line\">            poleVector,</div>\n\
<div class=\"line\">            twistValue,</div>\n\
<div class=\"line\">            qStart,</div>\n\
<div class=\"line\">            qMid);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    midJointFn.rotateBy(qMid, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>);</div>\n\
<div class=\"line\">    startJointFn.rotateBy(qStart, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> solveIK(<span class=\"keyword\">const</span> AwPoint &amp;startJointPos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwPoint &amp;midJointPos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwPoint &amp;effectorPos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwPoint &amp;handlePos,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> AwVector &amp;poleVector,</div>\n\
<div class=\"line\">             <span class=\"keywordtype\">double</span> twistValue,</div>\n\
<div class=\"line\">             AwQuaternion &amp;qStart,</div>\n\
<div class=\"line\">             AwQuaternion &amp;qMid)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is method that actually computes the IK solution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// vector from startJoint to midJoint</span></div>\n\
<div class=\"line\">    AwVector vector1 = midJointPos - startJointPos;</div>\n\
<div class=\"line\">    <span class=\"comment\">// vector from midJoint to effector</span></div>\n\
<div class=\"line\">    AwVector vector2 = effectorPos - midJointPos;</div>\n\
<div class=\"line\">    <span class=\"comment\">// vector from startJoint to handle</span></div>\n\
<div class=\"line\">    AwVector vectorH = handlePos - startJointPos;</div>\n\
<div class=\"line\">    <span class=\"comment\">// vector from startJoint to effector</span></div>\n\
<div class=\"line\">    AwVector vectorE = effectorPos - startJointPos;</div>\n\
<div class=\"line\">    <span class=\"comment\">// lengths of those vectors</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> length1 = vector1.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> length2 = vector2.length();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> lengthH = vectorH.length();</div>\n\
<div class=\"line\">    <span class=\"comment\">// component of the vector1 orthogonal to the vectorE</span></div>\n\
<div class=\"line\">    AwVector vectorO =</div>\n\
<div class=\"line\">        vector1 - vectorE*((vector1*vectorE)/(vectorE*vectorE));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// calculate q12 which solves for the midJoint rotation</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"comment\">// angle between vector1 and vector2</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> vectorAngle12 = vector1.angle(vector2);</div>\n\
<div class=\"line\">    <span class=\"comment\">// vector orthogonal to vector1 and 2</span></div>\n\
<div class=\"line\">    AwVector vectorCross12 = vector1^vector2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> lengthHsquared = lengthH*lengthH;</div>\n\
<div class=\"line\">    <span class=\"comment\">// angle for arm extension </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> cos_theta = </div>\n\
<div class=\"line\">        (lengthHsquared - length1*length1 - length2*length2)</div>\n\
<div class=\"line\">        /(2*length1*length2);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cos_theta &gt; 1) </div>\n\
<div class=\"line\">        cos_theta = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (cos_theta &lt; -1) </div>\n\
<div class=\"line\">        cos_theta = -1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> theta = acos(cos_theta);</div>\n\
<div class=\"line\">    <span class=\"comment\">// quaternion for arm extension</span></div>\n\
<div class=\"line\">    AwQuaternion q12(theta - vectorAngle12, vectorCross12);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// calculate qEH which solves for effector rotating onto the handle</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"comment\">// vector2 with quaternion q12 applied</span></div>\n\
<div class=\"line\">    vector2 = vector2.rotateBy(q12);</div>\n\
<div class=\"line\">    <span class=\"comment\">// vectorE with quaternion q12 applied</span></div>\n\
<div class=\"line\">    vectorE = vector1 + vector2;</div>\n\
<div class=\"line\">    <span class=\"comment\">// quaternion for rotating the effector onto the handle</span></div>\n\
<div class=\"line\">    AwQuaternion qEH(vectorE, vectorH);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// calculate qNP which solves for the rotate plane</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"comment\">// vector1 with quaternion qEH applied</span></div>\n\
<div class=\"line\">    vector1 = vector1.rotateBy(qEH);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (vector1.isParallel(vectorH))</div>\n\
<div class=\"line\">        <span class=\"comment\">// singular case, use orthogonal component instead</span></div>\n\
<div class=\"line\">        vector1 = vectorO.rotateBy(qEH);</div>\n\
<div class=\"line\">    <span class=\"comment\">// quaternion for rotate plane</span></div>\n\
<div class=\"line\">    AwQuaternion qNP;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!poleVector.isParallel(vectorH) &amp;&amp; (lengthHsquared != 0)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// component of vector1 orthogonal to vectorH</span></div>\n\
<div class=\"line\">        AwVector vectorN = </div>\n\
<div class=\"line\">            vector1 - vectorH*((vector1*vectorH)/lengthHsquared);</div>\n\
<div class=\"line\">        <span class=\"comment\">// component of pole vector orthogonal to vectorH</span></div>\n\
<div class=\"line\">        AwVector vectorP = </div>\n\
<div class=\"line\">            poleVector - vectorH*((poleVector*vectorH)/lengthHsquared);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> dotNP = (vectorN*vectorP)/(vectorN.length()*vectorP.length());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (absoluteValue(dotNP + 1.0) &lt; kEpsilon) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// singular case, rotate halfway around vectorH</span></div>\n\
<div class=\"line\">            AwQuaternion qNP1(kPi, vectorH);</div>\n\
<div class=\"line\">            qNP = qNP1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            AwQuaternion qNP2(vectorN, vectorP);</div>\n\
<div class=\"line\">            qNP = qNP2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// calculate qTwist which adds the twist</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    AwQuaternion qTwist(twistValue, vectorH);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// quaternion for the mid joint</span></div>\n\
<div class=\"line\">    qMid = q12; </div>\n\
<div class=\"line\">    <span class=\"comment\">// concatenate the quaternions for the start joint</span></div>\n\
<div class=\"line\">    qStart = qEH*qNP*qTwist;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">AwVector ik2Bsolver::poleVectorFromHandle(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;handlePath)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method returns the pole vector of the IK handle.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_handle.html\">MFnIkHandle</a> handleFn(handlePath, &amp;stat);</div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> pvxPlug = handleFn.findPlug(<span class=\"stringliteral\">&quot;pvx&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> pvyPlug = handleFn.findPlug(<span class=\"stringliteral\">&quot;pvy&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> pvzPlug = handleFn.findPlug(<span class=\"stringliteral\">&quot;pvz&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> pvxValue, pvyValue, pvzValue;</div>\n\
<div class=\"line\">    pvxPlug.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(pvxValue);</div>\n\
<div class=\"line\">    pvyPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(pvyValue);</div>\n\
<div class=\"line\">    pvzPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(pvzValue);</div>\n\
<div class=\"line\">    AwVector poleVector(pvxValue, pvyValue, pvzValue);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> poleVector;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> ik2Bsolver::twistFromHandle(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;handlePath)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method returns the twist of the IK handle.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_handle.html\">MFnIkHandle</a> handleFn(handlePath, &amp;stat);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> twistPlug = handleFn.findPlug(<span class=\"stringliteral\">&quot;twist&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> twistValue;</div>\n\
<div class=\"line\">    twistPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(twistValue);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> twistValue;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// IK 2 Bone Solver Callbacks</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>addIK2BsolverCallbacks : <span class=\"keyword\">public</span> <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a> {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:                                                         </div>\n\
<div class=\"line\">                    addIK2BsolverCallbacks() {};</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#ade7d0a873cbe811d6eab464e695390a9\">doIt</a> (<span class=\"keyword\">const</span> <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp;) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>*    creator();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// callback IDs for the solver callbacks</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> MCallbackId afterNewId;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> MCallbackId afterOpenId;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MCallbackId addIK2BsolverCallbacks::afterNewId;</div>\n\
<div class=\"line\">MCallbackId addIK2BsolverCallbacks::afterOpenId;                                                            </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *addIK2BsolverCallbacks::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> addIK2BsolverCallbacks;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> createIK2BsolverAfterNew(<span class=\"keywordtype\">void</span> *clientData)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method creates the ik2Bsolver after a File-&gt;New.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selList;</div>\n\
<div class=\"line\">    <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( selList );</div>\n\
<div class=\"line\">    <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;createNode -n ik2Bsolver ik2Bsolver&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a33e6a7c8fa1c06fd64063bd08d4e4aef\">MGlobal::setActiveSelectionList</a>( selList );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> createIK2BsolverAfterOpen(<span class=\"keywordtype\">void</span> *clientData)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method creates the ik2Bsolver after a File-&gt;Open</span></div>\n\
<div class=\"line\"><span class=\"comment\">// if the ik2Bsolver does not exist in the loaded file.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selList;</div>\n\
<div class=\"line\">    <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a8708b9e26edcb1ca2daa7efc9a36d375\">MGlobal::getSelectionListByName</a>(<span class=\"stringliteral\">&quot;ik2Bsolver&quot;</span>, selList);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (selList.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() == 0) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( selList );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;createNode -n ik2Bsolver ik2Bsolver&quot;</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a33e6a7c8fa1c06fd64063bd08d4e4aef\">MGlobal::setActiveSelectionList</a>( selList );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> addIK2BsolverCallbacks::doIt(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a> &amp;args)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method adds the File-&gt;New and File-&gt;Open callbacks</span></div>\n\
<div class=\"line\"><span class=\"comment\">// used to recreate the ik2Bsolver.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the callback IDs so we can deregister them </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// when the plug-in is unloaded.</span></div>\n\
<div class=\"line\">    afterNewId = <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa643f2b610ee5b4f816f8b05adaa4d099\">MSceneMessage::kAfterNew</a>, </div>\n\
<div class=\"line\">                               createIK2BsolverAfterNew);</div>\n\
<div class=\"line\">    afterOpenId = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaab937dff3e9eba2ea59018ed4b65dd018\">MSceneMessage::kAfterOpen</a>, </div>\n\
<div class=\"line\">                               createIK2BsolverAfterOpen);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Register the IK 2 Bone Solver and Callback Command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     status;</div>\n\
<div class=\"line\">    <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a>   plugin(obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;2.5&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerNode(<span class=\"stringliteral\">&quot;ik2Bsolver&quot;</span>, </div>\n\
<div class=\"line\">                                 ik2Bsolver::id,</div>\n\
<div class=\"line\">                                 &amp;ik2Bsolver::creator,</div>\n\
<div class=\"line\">                                 &amp;ik2Bsolver::initialize,</div>\n\
<div class=\"line\">                                 <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7a34025896e6973ad29c38ed564f58fdb1\">MPxNode::kIkSolverNode</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerCommand(<span class=\"stringliteral\">&quot;addIK2BsolverCallbacks&quot;</span>,</div>\n\
<div class=\"line\">                                    addIK2BsolverCallbacks::creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerCommand&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register post-load MEL proc</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note: We make use of the MFnPlugin::registerUI() method which executes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the given MEL procedures following the plugin load to execute our method.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This method will ensure that the solver node is created on plugin load.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//status = plugin.registerUI(&quot;ik2Bsolver&quot;, &quot;&quot;);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a>   plugin(obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterNode(ik2Bsolver::id);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterCommand(<span class=\"stringliteral\">&quot;addIK2BsolverCallbacks&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterCommand&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove callbacks when plug-in is unloaded.</span></div>\n\
<div class=\"line\">    <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(addIK2BsolverCallbacks::afterNewId);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(addIK2BsolverCallbacks::afterOpenId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";