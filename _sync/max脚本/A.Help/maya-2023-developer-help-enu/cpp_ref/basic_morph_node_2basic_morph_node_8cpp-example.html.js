var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: basicMorphNode/basicMorphNode.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'basic_morph_node_2basic_morph_node_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: basicMorphNode/basicMorphNode.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">basicMorphNode/basicMorphNode.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ===========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the dependency graph node &quot;basicMorphNode&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in demonstrates how to create a user-defined deformer which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// supports fan-in GPU evaluation. A deformer is a node which takes </span></div>\n\
<div class=\"line\"><span class=\"comment\">// input geometries, deforms them, and places the output into the output</span></div>\n\
<div class=\"line\"><span class=\"comment\">// geometry attribute. Fan-in evaluation allows for the deformer to take multiple</span></div>\n\
<div class=\"line\"><span class=\"comment\">// different GPU evaluation chains and use their results to drive further deformation</span></div>\n\
<div class=\"line\"><span class=\"comment\">// without reading their results back into the CPU. This allows uninterrupted </span></div>\n\
<div class=\"line\"><span class=\"comment\">// GPU evaluation. This example plug-in defines a new deformer node</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that morphs a base mesh to mimic a target mesh.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The basic morph node example below is not meant to be a practical deformer to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// be used: its main function is to explain certain concepts and give examples</span></div>\n\
<div class=\"line\"><span class=\"comment\">// on how to use the API.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The node morphs all verts of the deforming geometry to match the target</span></div>\n\
<div class=\"line\"><span class=\"comment\">// geometry in the local coordinate system. Both geometries must have an</span></div>\n\
<div class=\"line\"><span class=\"comment\">// equal number of vertices and they should be in the same order.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The degree of morphing is controlled by the envelope attribute.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// An envelope of 1 will match the target exactly, while an envelope of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 0 will not deform at all. Envelope also supports negative values and </span></div>\n\
<div class=\"line\"><span class=\"comment\">// values greater than 1.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To use this node:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - load the basicMorphNode plugin</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - create some polygonal object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - type: &quot;deformer -type basicMorph&quot; to create a basicMorph node on the object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - create a target object with the same number of verts as the first object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - connect the target mesh to the basicMorph&#39;s targetGeometry attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This can be done with the node editor or a command such as </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      &quot;connectAttr target.outMesh basicMorph1.targetGeometry&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use this script to create a simple example with the basic morph node:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  loadPlugin basicMorphNode;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  polyCube - name target - sx 6 - sy 6 - sz 6;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  move 3 0 0;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  polyCube - name base - sx 6 - sy 6 - sz 6;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  sculpt;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  select - r base;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  deformer - type basicMorph - name morph;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  connectAttr targetShape.outMesh morph.targetGeometry;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe - v 0 - at envelope - t 1 morph;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe - v 1 - at envelope - t 60 morph;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  select - cl;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxDeformerNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItGeometry.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnGeometryData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTypeId.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataBlock.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArrayDataHandle.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagModifier.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxGPUDeformer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGPUDeformerRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MOpenCLInfo.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;clew/clew.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Basic Morph CPU Implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>basicMorph : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html\">MPxDeformerNode</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    basicMorph();</div>\n\
<div class=\"line\">    ~basicMorph() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>* creator();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initialize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// deformation function</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_filter.html#a30d9732c7497ec1c8c7e431eaa5d61b6\">deform</a>(<a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block,</div>\n\
<div class=\"line\">        <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html\">MItGeometry</a>&amp; iter,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; mat,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> multiIndex) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// local node attributes</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> targetGeometry;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> id;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// path from where the plugin was loaded</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pluginPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// local attributes</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> basicMorph::id(0x0008006E);</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> basicMorph::targetGeometry;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> basicMorph::pluginPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">basicMorph::basicMorph() {}</div>\n\
<div class=\"line\">basicMorph::~basicMorph() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* basicMorph::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> basicMorph();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> basicMorph::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// local attribute initialization</span></div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> meshAttr;</div>\n\
<div class=\"line\">    targetGeometry = meshAttr.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;targetGeometry&quot;</span>, <span class=\"stringliteral\">&quot;tg&quot;</span>, <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFnData::kMesh</a>);</div>\n\
<div class=\"line\">    meshAttr.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    meshAttr.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  deformation attributes</span></div>\n\
<div class=\"line\">    addAttribute(targetGeometry);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attributeAffects(basicMorph::targetGeometry, basicMorph::outputGeom);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> basicMorph::deform(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html\">MItGeometry</a>&amp; iter,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> multiIndex)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> returnStatus = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Envelope data from the base class.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The envelope is simply a scale factor.</span></div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> envData = block.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(envelope, &amp;returnStatus);</div>\n\
<div class=\"line\">    <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(returnStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> env = envData.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a43df510424a7de372dd130315d9f223c\">asFloat</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the base geometry</span></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> inputHandle = block.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a11fd41c7d97d656a2bffdc23015f1496\">outputArrayValue</a>(input, &amp;returnStatus);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(returnStatus);</div>\n\
<div class=\"line\">    returnStatus = inputHandle.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a8d77f0fea87bb6854b60cd199bf26240\">jumpToElement</a>(multiIndex);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> inputElementHandle = inputHandle.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#ae7d0b57302500d19b7a3f57f8aef45df\">outputValue</a>(&amp;returnStatus);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> inputGeometry = inputElementHandle.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a58951af761a410e17982060cae4fdf49\">child</a>(inputGeom).<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a301e7b7cdf9f9e1e206651cc6a1b67ec\">asMesh</a>();</div>\n\
<div class=\"line\">    <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> baseMesh(inputGeometry, &amp;returnStatus);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(returnStatus);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the target geometry</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> tgtGeoData = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(targetGeometry, &amp;returnStatus);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(returnStatus);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> targetMesh(tgtGeoData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a301e7b7cdf9f9e1e206651cc6a1b67ec\">asMesh</a>(), &amp;returnStatus);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(returnStatus);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (targetMesh.numVertices() != baseMesh.numVertices()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Our geometry must match the target&#39;s</span></div>\n\
<div class=\"line\">        returnStatus = MS::kFailure;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> returnStatus;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// iterate through each point in the geometry</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !iter.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); iter.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#a73616f002814b8abe6d921db72d7a496\">next</a>()) {</div>\n\
<div class=\"line\">        <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt = iter.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#a5880c110ed81dd4da0289ccdca5c1592\">position</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ptIndex = iter.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#ae85767d1d26fc7491279d1f2c277b499\">index</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> tgt;</div>\n\
<div class=\"line\">        returnStatus = targetMesh.getPoint(ptIndex, tgt);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(returnStatus);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// morph algorithm</span></div>\n\
<div class=\"line\">        pt += (tgt - pt) * env;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        iter.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#aab29469f67fee14833472410a17de18f\">setPosition</a>(pt);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> returnStatus;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Basic Morph GPU Implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>basicMorphGPUDeformer : <span class=\"keyword\">public</span> <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\">MPxGPUDeformer</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Virtual methods from MPxGPUDeformer</span></div>\n\
<div class=\"line\">    basicMorphGPUDeformer();</div>\n\
<div class=\"line\">    ~basicMorphGPUDeformer() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MPxGPUDeformer::DeformerStatus <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a070259639bc552fd702c9e8e042f0331\">evaluate</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; outputPlug, <span class=\"keyword\">const</span> <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>&amp; inputPlugs, <span class=\"keyword\">const</span> <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; inputData, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; outputData) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a74a45d2648335936561898c390281a6a\">terminate</a>() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html\">MGPUDeformerRegistrationInfo</a>* getGPUDeformerInfo();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> validateNodeInGraph(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp;, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> validateNodeValues(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp;, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// helper methods</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> extractWeightArray(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> extractAffectMap();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> needsAffectMap() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> affectCount() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fullCount() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cl_int enqueueInitializeOutputPositions(<a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>&amp; syncEvent, <span class=\"keyword\">const</span> <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; inputPositions, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; outputPositions);</div>\n\
<div class=\"line\">    cl_int enqueueDeformation(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>&amp; syncEvent, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; inputPositions, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; outputPositions, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; targetPositions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// holds the data for which verts are affected</span></div>\n\
<div class=\"line\">    <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_index_mapper.html\">MIndexMapper</a> fIndexMapper;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Storage for data on the GPU</span></div>\n\
<div class=\"line\">    <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a> fCLWeights;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a> fCLAffectMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fNumElements;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fAffectMapBufferSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fEnvelope;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Kernel</span></div>\n\
<div class=\"line\">    <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_kernel.html\">MAutoCLKernel</a> fKernel;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>basicMorphNodeGPUDeformerInfo : <span class=\"keyword\">public</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html\">MGPUDeformerRegistrationInfo</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    basicMorphNodeGPUDeformerInfo() {}</div>\n\
<div class=\"line\">    ~basicMorphNodeGPUDeformerInfo()<span class=\"keyword\"> override </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\">MPxGPUDeformer</a>* <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html#a69ee4850048ea760d9e03f2deaf957e4\">createGPUDeformer</a>()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> basicMorphGPUDeformer();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html#af612f89c960cf432dc7be0d3f1be8d93\">validateNodeInGraph</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> basicMorphGPUDeformer::validateNodeInGraph(block, evaluationNode, plug, messages);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html#a5211d6842c7677f9730a9c76cb258568\">validateNodeValues</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> basicMorphGPUDeformer::validateNodeValues(block, evaluationNode, plug, messages);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html#a6595070483ca7ff251658d710333d4e3\">inputMeshAttributes</a>(<a name=\"_a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>&amp; iInputAttributes)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the target geometry to the input attributes so its position buffer can be accessed</span></div>\n\
<div class=\"line\">        iInputAttributes.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a3694392863ba632bca5d76cbbf190ef5\">append</a>(basicMorph::targetGeometry);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html\">MGPUDeformerRegistrationInfo</a>* basicMorphGPUDeformer::getGPUDeformerInfo()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> basicMorphNodeGPUDeformerInfo theOne;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> &amp;theOne;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">basicMorphGPUDeformer::basicMorphGPUDeformer()</div>\n\
<div class=\"line\">    : fNumElements(0)</div>\n\
<div class=\"line\">    , fAffectMapBufferSize(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Remember the ctor must be fast.  No heavy work should be done here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya may allocate one of these and then never use it.</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">basicMorphGPUDeformer::~basicMorphGPUDeformer()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    terminate();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> basicMorphGPUDeformer::validateNodeInGraph(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// basicMorphGPUDeformer supports everything on the basicMorph node</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> basicMorphGPUDeformer::validateNodeValues(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cl_int basicMorphGPUDeformer::enqueueInitializeOutputPositions(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>&amp; syncEvent,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; inputPositions,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; outputPositions)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!needsAffectMap()) <span class=\"comment\">// Nothing to do here...</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> err;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We need to copy the input verts over the output verts since we are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// not going to compute every single one of them.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> syncInputEvent = syncEvent;</div>\n\
<div class=\"line\">    syncEvent = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event_list.html\">MAutoCLEventList</a> eventList;</div>\n\
<div class=\"line\">    eventList.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event_list.html#a8692d830f89f7fb213410850e6e1bec6\">add</a>(syncInputEvent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> fullVertBufSize = fNumElements * <span class=\"keyword\">sizeof</span>(float) * 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    err = clEnqueueCopyBuffer(</div>\n\
<div class=\"line\">        <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a93e129c1488b06f3347eaaad703ffe34\">MOpenCLInfo::getMayaDefaultOpenCLCommandQueue</a>(),</div>\n\
<div class=\"line\">        inputPositions.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#a1978a75e975b7269214d00fef1c5f910\">buffer</a>().<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html#a4a4337dc2dfd99fcea06f9319b21cb9b\">get</a>(),</div>\n\
<div class=\"line\">        outputPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#a1978a75e975b7269214d00fef1c5f910\">buffer</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html#a4a4337dc2dfd99fcea06f9319b21cb9b\">get</a>(),</div>\n\
<div class=\"line\">        0,</div>\n\
<div class=\"line\">        0,</div>\n\
<div class=\"line\">        fullVertBufSize,</div>\n\
<div class=\"line\">        eventList.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event_list.html#ae2b6b45ee3c5562875d44e5c502f63c7\">size</a>(),</div>\n\
<div class=\"line\">        eventList.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event_list.html#ad249694f568f0d014f2e0285062c05bd\">array</a>(),</div>\n\
<div class=\"line\">        syncEvent.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html#a5622645d1b16ac4ab77c233dcea5c5be\">getReferenceForAssignment</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a753d7277906776cd710b3723d74f8b64\">MOpenCLInfo::checkCLErrorStatus</a>(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> err;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">cl_int basicMorphGPUDeformer::enqueueDeformation(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>&amp; syncEvent,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; inputPositions,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; outputPositions,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a>&amp; targetPositions)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> count = affectCount();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> syncInputEvent = syncEvent;</div>\n\
<div class=\"line\">    syncEvent = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> syncTargetEvent = targetPositions.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#ac80e15ff48577dcb6db7ba2db5788427\">bufferReadyEvent</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add all events we need to wait for to the event list</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event_list.html\">MAutoCLEventList</a> eventList;</div>\n\
<div class=\"line\">    eventList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event_list.html#a8692d830f89f7fb213410850e6e1bec6\">add</a>(syncInputEvent);</div>\n\
<div class=\"line\">    eventList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event_list.html#a8692d830f89f7fb213410850e6e1bec6\">add</a>(syncTargetEvent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set all of our kernel parameters.  Input, target and output buffers may be changing every frame</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// so always set them.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> parameterId = 0;</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, <span class=\"keyword\">sizeof</span>(cl_mem), (<span class=\"keywordtype\">void</span>*)outputPositions.buffer().getReadOnlyRef());</div>\n\
<div class=\"line\">    <a name=\"_a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), (<span class=\"keywordtype\">void</span>*)inputPositions.buffer().getReadOnlyRef());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), (<span class=\"keywordtype\">void</span>*)targetPositions.buffer().getReadOnlyRef());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_float), (<span class=\"keywordtype\">void</span>*)&amp;fEnvelope);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), (<span class=\"keywordtype\">void</span>*)fCLWeights.getReadOnlyRef());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    if (needsAffectMap())</div>\n\
<div class=\"line\">        err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), (<span class=\"keywordtype\">void</span>*)fCLAffectMap.getReadOnlyRef());</div>\n\
<div class=\"line\">    else</div>\n\
<div class=\"line\">        err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), <span class=\"keywordtype\">nullptr</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_uint), (<span class=\"keywordtype\">void</span>*)&amp;count);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Figure out a good work group size for our kernel.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> workGroupSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> retSize;</div>\n\
<div class=\"line\">    err = clGetKernelWorkGroupInfo(</div>\n\
<div class=\"line\">        fKernel.get(),</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::getOpenCLDeviceId(),</div>\n\
<div class=\"line\">        CL_KERNEL_WORK_GROUP_SIZE,</div>\n\
<div class=\"line\">        sizeof(<span class=\"keywordtype\">size_t</span>),</div>\n\
<div class=\"line\">        &amp;workGroupSize,</div>\n\
<div class=\"line\">        &amp;retSize);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> localWorkSize = 256;</div>\n\
<div class=\"line\">    if (retSize &gt; 0) localWorkSize = workGroupSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> globalWorkSize = (localWorkSize - count % localWorkSize) + count; <span class=\"comment\">// global work size must be a multiple of localWorkSize</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// run the kernel</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> kernelFinishedEvent;</div>\n\
<div class=\"line\">    err = clEnqueueNDRangeKernel(</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::getMayaDefaultOpenCLCommandQueue(),</div>\n\
<div class=\"line\">        fKernel.get(),</div>\n\
<div class=\"line\">        1,</div>\n\
<div class=\"line\">        NULL,</div>\n\
<div class=\"line\">        &amp;globalWorkSize,</div>\n\
<div class=\"line\">        &amp;localWorkSize,</div>\n\
<div class=\"line\">        eventList.size(),</div>\n\
<div class=\"line\">        eventList.array(),</div>\n\
<div class=\"line\">        syncEvent.getReferenceForAssignment());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    return err;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\">MPxGPUDeformer</a>::DeformerStatus basicMorphGPUDeformer::evaluate(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block,</div>\n\
<div class=\"line\">    const <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode,</div>\n\
<div class=\"line\">    const <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; outputPlug,</div>\n\
<div class=\"line\">    const <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>&amp; inputPlugs,</div>\n\
<div class=\"line\">    const <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; inputData,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; outputData</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// basicMorphGPUDeformer only supports two inputs, a base and a target mesh</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (inputPlugs.length() != 2)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> envelopeData = block.inputValue(basicMorph::envelope, &amp;status);</div>\n\
<div class=\"line\">    fEnvelope = (MS::kSuccess != status) ? 1.0 : envelopeData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a43df510424a7de372dd130315d9f223c\">asFloat</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fEnvelope == 0.0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Deformer will have no effect, just pass through without further processing</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerPassThrough;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the plugs for both inputs</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> inputPlug;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> targetPlug;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; inputPlugs.length(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = inputPlugs[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>(&amp;status) == basicMorph::inputGeom) <span class=\"comment\">// check status</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            inputPlug = plug;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>(&amp;status) == basicMorph::targetGeometry) <span class=\"comment\">// check status</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            targetPlug = plug;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kSuccess != status)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a> inputPositions = inputData.getBuffer(<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a3355163bdc23aa2119a8b321e8e91fe5\">MPxGPUDeformer::sPositionsName</a>(), inputPlug);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a> outputPositions = createOutputBuffer(inputPositions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!inputPositions.<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#aac1b70a2ed67ead038c4d3f5ac4d8a81\">isValid</a>() || !outputPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#aac1b70a2ed67ead038c4d3f5ac4d8a81\">isValid</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// evaluate has two main pieces of work. I need to transfer any data I care about onto the GPU, and I need to run my OpenCL Kernel.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// First, transfer the data. There are two pieces of data I need to buffer on the GPU, the weight array and the affect map.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// I don&#39;t need to transfer down the input or target position buffers, they are already handled by the deformer evaluator.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// I just need to establish references to their position buffers.</span></div>\n\
<div class=\"line\">    fNumElements = inputPositions.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#ac9580a2ec3ad9690d0fb0ea0b3179fec\">elementCount</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the target positions</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a> targetPositions = inputData.getBuffer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a3355163bdc23aa2119a8b321e8e91fe5\">MPxGPUDeformer::sPositionsName</a>(), targetPlug);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!targetPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#aac1b70a2ed67ead038c4d3f5ac4d8a81\">isValid</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// basicMorphGPUDeformer only supports geometries with an equal number of vertices</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (targetPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#ac9580a2ec3ad9690d0fb0ea0b3179fec\">elementCount</a>() != fNumElements)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    extractAffectMap();</div>\n\
<div class=\"line\">    extractWeightArray(block, evaluationNode, outputPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now that all the data we care about is on the GPU, setup and run the OpenCL Kernel</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fKernel.get())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> openCLKernelFile = basicMorph::pluginPath + <span class=\"stringliteral\">&quot;/basicMorph.cl&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> openCLKernelName(<span class=\"stringliteral\">&quot;basicMorph&quot;</span>);</div>\n\
<div class=\"line\">        fKernel = <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a9b9a0680620c0ecac7dd1b07159ee72f\">MOpenCLInfo::getOpenCLKernel</a>(openCLKernelFile, openCLKernelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fKernel) <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> syncEvent = inputPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#ac80e15ff48577dcb6db7ba2db5788427\">bufferReadyEvent</a>();</div>\n\
<div class=\"line\">    cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    err = enqueueInitializeOutputPositions(syncEvent, inputPositions, outputPositions);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (err != CL_SUCCESS)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    err = enqueueDeformation(syncEvent, inputPositions, outputPositions, targetPositions);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (err != CL_SUCCESS)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    outputPositions.<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#ac46e36b6959e261802c9603be6137302\">setBufferReadyEvent</a>(syncEvent);</div>\n\
<div class=\"line\">    outputData.setBuffer(outputPositions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> basicMorphGPUDeformer::terminate()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a539094d46be4675c5690419f1c09b38e\">releaseGPUMemory</a>(fNumElements * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">    fCLWeights.reset();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a539094d46be4675c5690419f1c09b38e\">releaseGPUMemory</a>(fAffectMapBufferSize);</div>\n\
<div class=\"line\">    fCLAffectMap.reset();</div>\n\
<div class=\"line\">    <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a08df219d94dcf2dc03724eff7d5c6483\">MOpenCLInfo::releaseOpenCLKernel</a>(fKernel);</div>\n\
<div class=\"line\">    fKernel.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> basicMorphGPUDeformer::extractAffectMap()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (getIndexMapper(fIndexMapper)) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!needsAffectMap()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// No need for it, so release what we had...</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a539094d46be4675c5690419f1c09b38e\">releaseGPUMemory</a>(fAffectMapBufferSize);</div>\n\
<div class=\"line\">            fCLAffectMap.reset();</div>\n\
<div class=\"line\">            fAffectMapBufferSize = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Now upload the affect map</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Two possibilities, we could be updating an existing OpenCL buffer or allocating a new one.</span></div>\n\
<div class=\"line\">        cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::vector&lt;unsigned int&gt; temp;</div>\n\
<div class=\"line\">        temp.resize(affectCount());</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> bufferSize = temp.size() * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> int);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">auto</span> affectMap = fIndexMapper.affectMap();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; affectMap.length(); ++i)</div>\n\
<div class=\"line\">            temp[i] = affectMap[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fAffectMapBufferSize &lt; bufferSize) { <span class=\"comment\">// We need to grow the size of the buffer</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a539094d46be4675c5690419f1c09b38e\">releaseGPUMemory</a>(fAffectMapBufferSize);</div>\n\
<div class=\"line\">            fCLAffectMap.reset(); <span class=\"comment\">// Release what we had...</span></div>\n\
<div class=\"line\">            fAffectMapBufferSize = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fCLAffectMap.get())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fAffectMapBufferSize = bufferSize;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ab4c1def24e934781098b800fd8b16cdd\">holdGPUMemory</a>(fAffectMapBufferSize);</div>\n\
<div class=\"line\">            fCLAffectMap.attach(clCreateBuffer(<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a2ab4ea6f879cbd19b67ca57cb3474d7b\">MOpenCLInfo::getOpenCLContext</a>(), CL_MEM_COPY_HOST_PTR | CL_MEM_READ_ONLY, bufferSize, (<span class=\"keywordtype\">void</span>*)&amp;temp[0], &amp;err));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Using a blocking write here, non-blocking could be faster...  need to manage the lifetime of temp, and have the kernel wait until the write finishes before running</span></div>\n\
<div class=\"line\">            err = clEnqueueWriteBuffer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a93e129c1488b06f3347eaaad703ffe34\">MOpenCLInfo::getMayaDefaultOpenCLCommandQueue</a>(), fCLAffectMap.get(), CL_TRUE, 0, bufferSize, (<span class=\"keywordtype\">void</span>*)&amp;temp[0], 0, NULL, NULL);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> basicMorphGPUDeformer::needsAffectMap()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (affectCount() &lt; fullCount());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> basicMorphGPUDeformer::affectCount()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fIndexMapper.affectCount();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> basicMorphGPUDeformer::fullCount()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fIndexMapper.fullCount();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> basicMorphGPUDeformer::extractWeightArray(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// if we&#39;ve already got a weight array and it is not changing then don&#39;t bother copying it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to the GPU again</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that right now hasAttributeBeenModified takes an attribute, so if any element in the multi is changing we think it is dirty...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// To avoid false dirty issues here you&#39;d need to only use one element of the MPxDeformerNode::input multi attribute for each</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// offset node.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCLWeights.get() &amp;&amp; !<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#abb7238dc52214c1b33a9c4000c1f237e\">MPxGPUDeformer::hasAttributeBeenModified</a>(evaluationNode, <a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html#a35a26e066faae03152b67f2067b1d53f\">MPxDeformerNode::weightList</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya might do some tricky stuff like not store the weight array at all for certain weight</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// values so we can&#39;t count on an array existing in the weightList.  For the OpenCL Kernel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we want an array with one weight in it per vertex, we need to build it carefully here.</span></div>\n\
<div class=\"line\">    std::vector&lt;float&gt; temp;</div>\n\
<div class=\"line\">    temp.reserve(fNumElements);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Two possibilities: we could have a sparse array in weightList[multiIndex] or there could be nothing in weightList[multiIndex].</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// if nothing is there then all the weights at 1.0f.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get a handle to the weight array we want.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> weightList = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a11fd41c7d97d656a2bffdc23015f1496\">outputArrayValue</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html#a35a26e066faae03152b67f2067b1d53f\">MPxDeformerNode::weightList</a>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>; <span class=\"comment\">// we should always be able to get a weightList</span></div>\n\
<div class=\"line\">    status = weightList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a8d77f0fea87bb6854b60cd199bf26240\">jumpToElement</a>(plug.<a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>());</div>\n\
<div class=\"line\">    <span class=\"comment\">// it is possible that the jumpToElement fails.  In that case all weights are 1.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; fNumElements; i++)</div>\n\
<div class=\"line\">            temp.push_back(1.0f);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> weightsStructure = weightList.<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a81d24dca6d647d8d0a8fe0ef2c63b170\">inputValue</a>(&amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> weights = weightsStructure.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a58951af761a410e17982060cae4fdf49\">child</a>(<a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html#ae4200be6c5a30e8d817e6a3b51d20402\">MPxDeformerNode::weights</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// number of non-zero weights</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numWeights = weights.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a5f3dd1d27853eccbbe78b6d4383ccb79\">elementCount</a>(&amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we&#39;re building a list with a weight per vertex, even if the weight is zero</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> weightIndex = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numWeights; i++, weights.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> weightsElementIndex = weights.<a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a2ca3c3d60cf2f3ac005b651379f26143\">elementIndex</a>(&amp;status);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> (weightIndex &lt; weightsElementIndex)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                temp.push_back(1.0f); <span class=\"comment\">// weights could be sparse, fill in default weight of 1 if no data</span></div>\n\
<div class=\"line\">                weightIndex++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> value = weights.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a81d24dca6d647d8d0a8fe0ef2c63b170\">inputValue</a>(&amp;status);</div>\n\
<div class=\"line\">            temp.push_back(value.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a43df510424a7de372dd130315d9f223c\">asFloat</a>());</div>\n\
<div class=\"line\">            weightIndex++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// now we have written the last non-zero weight into temp, but the last non-zero weight</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// doesn&#39;t have to be for the last vertex in the buffer.  Add more zero values if necessary.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (weightIndex &lt; fNumElements)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            temp.push_back(1.0f); <span class=\"comment\">// weights could be sparse, fill in default weight of 1 if no data</span></div>\n\
<div class=\"line\">            weightIndex++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Two possibilities, we could be updating an existing OpenCL buffer or allocating a new one.</span></div>\n\
<div class=\"line\">    cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fCLWeights.get())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ab4c1def24e934781098b800fd8b16cdd\">holdGPUMemory</a>(fNumElements * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">        fCLWeights.attach(clCreateBuffer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a2ab4ea6f879cbd19b67ca57cb3474d7b\">MOpenCLInfo::getOpenCLContext</a>(), CL_MEM_COPY_HOST_PTR | CL_MEM_READ_ONLY, fNumElements * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>), (<span class=\"keywordtype\">void</span>*)&amp;temp[0], &amp;err));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// I use a blocking write here, non-blocking could be faster...  need to manage the lifetime of temp, and have the kernel wait until the write finishes before running</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// I&#39;m also assuming that the weight buffer is not growing.</span></div>\n\
<div class=\"line\">        err = clEnqueueWriteBuffer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a93e129c1488b06f3347eaaad703ffe34\">MOpenCLInfo::getMayaDefaultOpenCLCommandQueue</a>(), fCLWeights.get(), CL_TRUE, 0, fNumElements * <span class=\"keyword\">sizeof</span>(float), (<span class=\"keywordtype\">void</span>*)&amp;temp[0], 0, NULL, NULL);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Standard Initialization Procedures</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result;</div>\n\
<div class=\"line\">    <a name=\"_a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;1.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    result = plugin.registerNode(<span class=\"stringliteral\">&quot;basicMorph&quot;</span>, basicMorph::id, basicMorph::creator,</div>\n\
<div class=\"line\">        basicMorph::initialize, <a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7a397b2fe312ffa55c207f8f9b12f616d3\">MPxNode::kDeformerNode</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeClassName(<span class=\"stringliteral\">&quot;basicMorph&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> registrantId(<span class=\"stringliteral\">&quot;mayaPluginExample&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registry.html#adea377dddd00bec03a6cdf70360f567f\">MGPUDeformerRegistry::registerGPUDeformerCreator</a>(</div>\n\
<div class=\"line\">        nodeClassName,</div>\n\
<div class=\"line\">        registrantId,</div>\n\
<div class=\"line\">        basicMorphGPUDeformer::getGPUDeformerInfo());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registry.html#a2e96bdde07077e4af65457c6edb9c11a\">MGPUDeformerRegistry::addConditionalAttribute</a>(</div>\n\
<div class=\"line\">        nodeClassName,</div>\n\
<div class=\"line\">        registrantId,</div>\n\
<div class=\"line\">        <a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_filter.html#a7ec5f07562204a9fa9b136a856cb97c4\">MPxDeformerNode::envelope</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    basicMorph::pluginPath = plugin.loadPath();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeClassName(<span class=\"stringliteral\">&quot;basicMorph&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> registrantId(<span class=\"stringliteral\">&quot;mayaPluginExample&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registry.html#aa290ea8dc9cb67e1056f132b8e441d5f\">MGPUDeformerRegistry::deregisterGPUDeformerCreator</a>(nodeClassName, registrantId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj);</div>\n\
<div class=\"line\">    result = plugin.deregisterNode(basicMorph::id);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";