var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: glslShader/GLSLShader.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'glsl_shader_2_g_l_s_l_shader_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: glslShader/GLSLShader.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">glslShader/GLSLShader.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><span class=\"comment\">// provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;GLSLShader.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;GLSLShaderSemantics.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;GLSLShaderStrings.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/M3dView.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileIO.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyNodes.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAmbientLight.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMessageAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnEnumAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEventMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSceneMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MModelMessage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAngle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImageFileInfo.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderUtil.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimControl.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderProfile.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTextureManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometryUtilities.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderUtilities.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderTargetManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUIDrawManager.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;list&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define STRICMP(X,Y) stricmp(X,Y)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MSTRICMP(X,Y) stricmp(X.asChar(),Y)</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;strings.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define STRICMP(X,Y) strcasecmp(X,Y)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MSTRICMP(X,Y) strcasecmp(X.asChar(),Y)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> GLSLShaderNode::m_TypeId(0x00081101);</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> GLSLShaderNode::m_TypeName(<span class=\"stringliteral\">&quot;GLSLShader&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> GLSLShaderNode::m_RegistrantId(<span class=\"stringliteral\">&quot;GLSLShaderRegistrantId&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> GLSLShaderNode::m_drawDbClassification(<span class=\"stringliteral\">&quot;drawdb/shader/surface/GLSLShader&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sShader;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sTechnique;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sTechniques;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sDescription;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sDiagnostics;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sEffectUniformParameters;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sLightInfo;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define M_CHECK(assertion)  if (assertion) ; else throw ((GLSLShaderNamespace::InternalError*)__LINE__)</span></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GLSLShaderNamespace</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>InternalError</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* message;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"comment\">//   throw (InternalError*)__LINE__;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tell Maya that we want access/control to all uniform parameters</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// by default Maya handles parameters with &#39;system&#39; semantics such as LIGHTCOLOR</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and these parameters won&#39;t be accessible from the plugin</span></div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_shader_compile_macro.html\">MHWRender::MShaderCompileMacro</a> sMacros[] = { { <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;_MAYA_PLUGIN_HANDLES_ALL_UNIFORMS_&quot;</span>), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;TRUE&quot;</span>) } };</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sNbMacros = 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MStringSorter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator() (<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; lhs, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; rhs)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> strcmp(lhs.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), rhs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()) &lt; 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// EffectCollection is used to register the effect name/file each GLSLShaderNode is using.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is to be used by GLSLShaderNode::reload() so it can reload the effect on all the nodes</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that are currently using it.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>EffectCollection</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> EffectCollection&amp; instance()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> EffectCollection s_instance;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> s_instance;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> registerNode(GLSLShaderNode* node, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fEffectLookup[node] = effectName;</div>\n\
<div class=\"line\">        fNodesLookup[effectName].insert(node);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> deregisterNode(GLSLShaderNode* node)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> effectName = fEffectLookup[node];</div>\n\
<div class=\"line\">        fEffectLookup.erase(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fNodesLookup[effectName].erase(node);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fNodesLookup[effectName].size() == 0) {</div>\n\
<div class=\"line\">            fNodesLookup.erase(effectName);</div>\n\
<div class=\"line\">            unregisterBrokenEffect(node, effectName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::set&lt;GLSLShaderNode*&gt; NodeSet_t;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> getNodesUsingEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName, NodeSet_t &amp;nodes)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        Effect2NodesMap_t::const_iterator it = fNodesLookup.find(effectName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(it != fNodesLookup.end()) {</div>\n\
<div class=\"line\">            nodes = it-&gt;second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isBrokenEffect( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName )<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fBrokenEffects.count(effectName) &gt; 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> registerBrokenEffect( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fBrokenEffects.insert(effectName);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> unregisterBrokenEffect( GLSLShaderNode* node, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!renderer)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!shaderMgr)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We are reloading and we want the latest version of the shader from the disk.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Since getEffectsTechniques and getEffectsFileShader both use the caching mechanism,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// we first need to clear the effect from the cache.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Each techniques of the shader are considered and cached as different effects.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// We will need to remove all the technique effects of the shader from the cache,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so that when the technique is changed the latest version of it will be loaded.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove the no-technique effect from cache so we can retrieve new techniques.</span></div>\n\
<div class=\"line\">        shaderMgr-&gt;<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#abc2568aae336e0594eb1ae6320606a47\">removeEffectFromCache</a>(effectName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(), GLSLShaderNamespace::sMacros, GLSLShaderNamespace::sNbMacros);</div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> techniqueNames = node-&gt;techniqueNames();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If the file was loaded and one effect was broken, we will not have the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// technique names from the old effect. Flush the cache on new technique names instead.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (techniqueNames.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">            shaderMgr-&gt;<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a67d96162d64617bc3299f75cd7c13dff\">getEffectsTechniques</a>(effectName, techniqueNames, GLSLShaderNamespace::sMacros, GLSLShaderNamespace::sNbMacros);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; (int) techniqueNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; technique = techniqueNames[i];</div>\n\
<div class=\"line\">            shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#abc2568aae336e0594eb1ae6320606a47\">removeEffectFromCache</a>(effectName, technique, GLSLShaderNamespace::sMacros, GLSLShaderNamespace::sNbMacros);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fBrokenEffects.erase(effectName);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    EffectCollection() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;GLSLShaderNode*, MString&gt; Node2EffectMap_t;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;MString, NodeSet_t, MStringSorter&gt; Effect2NodesMap_t;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::set&lt;MString, MStringSorter&gt; StringSet_t;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Node2EffectMap_t fEffectLookup; <span class=\"comment\">// 1 node -&gt; 1 effect</span></div>\n\
<div class=\"line\">    Effect2NodesMap_t fNodesLookup; <span class=\"comment\">// 1 effect -&gt; x nodes</span></div>\n\
<div class=\"line\">    StringSet_t fBrokenEffects; <span class=\"comment\">// All effects that did not load correctly</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Convert Maya light type to glslShader light type</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> GLSLShaderNode::ELightType getLightType(<span class=\"keyword\">const</span> <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* lightParam)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GLSLShaderNode::ELightType type = GLSLShaderNode::eUndefinedLight;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> lightType = lightParam-&gt;<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a37c38ea0bd5da4c4f846f673a418be78\">lightType</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The 3rd letter of the light name is a perfect hash,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// so let&#39;s cut on the number of string comparisons.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lightType.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 2) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (lightType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()[2])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;o&#39;</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (STRICMP(lightType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),<span class=\"stringliteral\">&quot;spotLight&quot;</span>) == 0)</div>\n\
<div class=\"line\">                type = GLSLShaderNode::eSpotLight;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;r&#39;</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (STRICMP(lightType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),<span class=\"stringliteral\">&quot;directionalLight&quot;</span>) == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// The headlamp used in the &quot;Use default lighting&quot; mode</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// does not have the same set of attributes as a regular</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// directional light, so we must disambiguate them</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// otherwise we might not know how to fetch shadow data</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// from the regular kind.</span></div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">if</span> (lightParam-&gt;<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#ac8cc78537b5a5d66bd3cc96bf8ef506e\">lightPath</a>().<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">                                        type = GLSLShaderNode::eDirectionalLight;</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                                        type = GLSLShaderNode::eDefaultLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;i&#39;</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (STRICMP(lightType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),<span class=\"stringliteral\">&quot;pointLight&quot;</span>) == 0)</div>\n\
<div class=\"line\">                type = GLSLShaderNode::ePointLight;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;b&#39;</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (STRICMP(lightType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),<span class=\"stringliteral\">&quot;ambientLight&quot;</span>) == 0)</div>\n\
<div class=\"line\">                type = GLSLShaderNode::eAmbientLight;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;l&#39;</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (STRICMP(lightType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),<span class=\"stringliteral\">&quot;volumeLight&quot;</span>) == 0)</div>\n\
<div class=\"line\">                type = GLSLShaderNode::eVolumeLight;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <span class=\"charliteral\">&#39;e&#39;</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (STRICMP(lightType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),<span class=\"stringliteral\">&quot;areaLight&quot;</span>) == 0)</div>\n\
<div class=\"line\">                type = GLSLShaderNode::eAreaLight;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> type;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Find a substring, if not found also try for lowercase substring</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> findSubstring(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; haystack, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; needle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> at = haystack.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aaa76dfd27998dc2ff937d3690d11391c\">indexW</a>(needle);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(at &lt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> needleLowerCase = needle;</div>\n\
<div class=\"line\">        needleLowerCase.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>();</div>\n\
<div class=\"line\">        at = haystack.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aaa76dfd27998dc2ff937d3690d11391c\">indexW</a>(needleLowerCase);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> at;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Convenient function to remove all non alpha-numeric characters from a string (remplaced by _ )</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sanitizeName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; dirtyName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::string retVal(dirtyName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i=0; i&lt;retVal.size(); ++i)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isalnum(retVal[i]))</div>\n\
<div class=\"line\">            retVal.replace(i, 1, <span class=\"stringliteral\">&quot;_&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(retVal.c_str());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Convenient function to find a string in an array and add it if not found</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> findInArray(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; where, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; what, <span class=\"keywordtype\">bool</span> appendIfNotFound)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; index &lt; where.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++index)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (where[index] == what || sanitizeName(where[index]) == what)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">int</span>)index;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (appendIfNotFound)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        where.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(what);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">int</span>)index;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> -1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">wchar_t</span> layerNameSeparator(L<span class=\"charliteral\">&#39;\\r&#39;</span>);</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> getTextureDesc(<span class=\"keyword\">const</span> <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>&amp; uniform, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;fileName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;layerName, <span class=\"keywordtype\">int</span> &amp;alphaChannelIdx)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!uniform.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a37357b066d4c628b1fae2f1ee08b2b12\">isATexture</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fileName = uniform.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae9f61935fee5d55a0df8bd4b2013a679\">getAsString</a>(context);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)  <span class=\"comment\">// file name is empty no need to process the layer name</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    layerName.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\">    alphaChannelIdx = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the file/layer separator .. texture name set for the uv editor .. cf GLSLShader::renderImage()</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> idx = fileName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aaa76dfd27998dc2ff937d3690d11391c\">indexW</a>(layerNameSeparator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(idx &gt;= 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> splitData;</div>\n\
<div class=\"line\">        fileName.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(layerNameSeparator, splitData);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(splitData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 2)</div>\n\
<div class=\"line\">            alphaChannelIdx = splitData[2].asInt();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(splitData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1)</div>\n\
<div class=\"line\">            layerName = splitData[1];</div>\n\
<div class=\"line\">        fileName = splitData[0];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Look for the layerSetName attribute</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = uniform.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a000c434a3beb6c2cc9681d9e445cf0eb\">getSource</a>().<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">        <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dependNode;</div>\n\
<div class=\"line\">        dependNode.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = dependNode.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;layerSetName&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(!plug.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">            plug.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(layerName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Look for the alpha channel index :</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// - get the select alpha channel name</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// - get the list of all alpha channels</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// - resolve index</span></div>\n\
<div class=\"line\">        plug = dependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;alpha&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> alphaChannel;</div>\n\
<div class=\"line\">            plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(alphaChannel);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(alphaChannel.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(alphaChannel == <span class=\"stringliteral\">&quot;Default&quot;</span>) {</div>\n\
<div class=\"line\">                    alphaChannelIdx = 1;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    plug = dependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;alphaList&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(!plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {</div>\n\
<div class=\"line\">                        <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> dataHandle;</div>\n\
<div class=\"line\">                        plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(dataHandle);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(dataHandle.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aa7d5edae2cc3b032294d95ff3afb17cb\">type</a>() == <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>) {</div>\n\
<div class=\"line\">                            <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a> stringArrayData (dataHandle.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> allAlphaChannels;</div>\n\
<div class=\"line\">                            stringArrayData.copyTo(allAlphaChannels);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> count = allAlphaChannels.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> idx = 0; idx &lt; count; ++idx) {</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; channel = allAlphaChannels[idx];</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span>(channel == alphaChannel) {</div>\n\
<div class=\"line\">                                    alphaChannelIdx = idx + 2;</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Always good to reuse attributes whenever possible.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In order to fully reuse the technique enum attribute, we need to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// clear it of its previous contents, which is something that is not</span></div>\n\
<div class=\"line\"><span class=\"comment\">// yet possible with the MFnEnumAttribute function set. We still can</span></div>\n\
<div class=\"line\"><span class=\"comment\">// achieve the required result with a proper MEL command to reset the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// enum strings.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> resetTechniqueEnumAttribute(<span class=\"keyword\">const</span> GLSLShaderNode&amp; shader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> node(shader.thisMObject(), &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Reset the .techniqueEnum attribute if exists</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attr = node.attribute(<span class=\"stringliteral\">&quot;techniqueEnum&quot;</span>, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat &amp;&amp; !attr.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() &amp;&amp; attr.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>() == <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad68d8aedd6c8e61a3b259d6984b47d6f\">MFn::kEnumAttribute</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_enum_attribute.html\">MFnEnumAttribute</a> enumAttr(attr);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> addAttrCmd = enumAttr.getAddAttrCmd();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (addAttrCmd.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aaa76dfd27998dc2ff937d3690d11391c\">indexW</a>(<span class=\"stringliteral\">&quot; -en &quot;</span>) &gt;= 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> techniquePlug = node.findPlug(attr, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resetCmd = <span class=\"stringliteral\">&quot;addAttr -e -en \\&quot;\\&quot; &quot;</span>;</div>\n\
<div class=\"line\">            <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(resetCmd + techniquePlug.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a58e7cf126b4fe51e9705cee4faaf59fc\">name</a>(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> buildTechniqueEnumAttribute(<span class=\"keyword\">const</span> GLSLShaderNode&amp; shader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> node(shader.thisMObject(), &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat) <span class=\"keywordflow\">return</span> <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Reset the .techniqueEnum attribute</span></div>\n\
<div class=\"line\">    resetTechniqueEnumAttribute(shader);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the new .techniqueEnum attribute</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attr = node.attribute(<span class=\"stringliteral\">&quot;techniqueEnum&quot;</span>, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (attr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_enum_attribute.html\">MFnEnumAttribute</a> enumAttr;</div>\n\
<div class=\"line\">        attr = enumAttr.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_enum_attribute.html#a6bbfd35f997fda13f9a5824bc1fc6af7\">create</a>(<span class=\"stringliteral\">&quot;techniqueEnum&quot;</span>, <span class=\"stringliteral\">&quot;te&quot;</span>, 0, &amp;stat);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!stat || attr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set attribute flags</span></div>\n\
<div class=\"line\">        enumAttr.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        enumAttr.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        enumAttr.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );  <span class=\"comment\">// show in Channel Box</span></div>\n\
<div class=\"line\">        enumAttr.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">        enumAttr.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0189811f6fd4bb70f002e07e06717556\">setNiceNameOverride</a>(<span class=\"stringliteral\">&quot;Technique&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the attribute to the node</span></div>\n\
<div class=\"line\">        node.addAttribute(attr);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set attribute fields</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_enum_attribute.html\">MFnEnumAttribute</a> enumAttr(attr);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; techniques = shader.techniqueNames();</div>\n\
<div class=\"line\">    M_CHECK(techniques.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt; (<span class=\"keywordtype\">unsigned</span> int)std::numeric_limits&lt;short&gt;::max());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; techniques.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        enumAttr.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_enum_attribute.html#a8f286e4714934d59d15bc79ba923e8f1\">addField</a>(techniques[i], (<span class=\"keywordtype\">short</span>)i);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> attr;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Determine if scene light is compatible with shader light</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> isLightAcceptable(GLSLShaderNode::ELightType shaderLightType, GLSLShaderNode::ELightType sceneLightType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// a Spot light is acceptable for any light types, providing both the direction and position properties.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(sceneLightType == GLSLShaderNode::eSpotLight)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// a Directional light only provides direction property.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(sceneLightType == GLSLShaderNode::eDirectionalLight || sceneLightType == GLSLShaderNode::eDefaultLight)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (shaderLightType == GLSLShaderNode::eDirectionalLight || shaderLightType == GLSLShaderNode::eAmbientLight);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// a Point light only provides position property, same for volume and area lights</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(sceneLightType == GLSLShaderNode::ePointLight ||</div>\n\
<div class=\"line\">        sceneLightType == GLSLShaderNode::eAreaLight ||</div>\n\
<div class=\"line\">        sceneLightType == GLSLShaderNode::eVolumeLight)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (shaderLightType == GLSLShaderNode::ePointLight || shaderLightType == GLSLShaderNode::eAmbientLight);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// an Ambient light provides neither direction nor position properties.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(sceneLightType == GLSLShaderNode::eAmbientLight)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (shaderLightType == GLSLShaderNode::eAmbientLight);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The light information in the draw context has M attributes that we</span></div>\n\
<div class=\"line\"><span class=\"comment\">// want to match to the N attributes of the shader. In order to do so</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in less than O(MxN) we create this static mapping between a light</span></div>\n\
<div class=\"line\"><span class=\"comment\">// semantic and the corresponding DC light attribute names whose value</span></div>\n\
<div class=\"line\"><span class=\"comment\">// needs to be fetched to refresh a shader parameter value.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> std::vector&lt;MStringArray&gt; TNamesForSemantic;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> std::vector&lt;TNamesForSemantic&gt; TSemanticNamesForLight;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> TSemanticNamesForLight sSemanticNamesForLight(GLSLShaderNode::eLightCount);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> buildDrawContextParameterNames(GLSLShaderNode::ELightType lightType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* lightParam)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TNamesForSemantic&amp; namesForLight(sSemanticNamesForLight[lightType]);</div>\n\
<div class=\"line\">    namesForLight.resize(GLSLShaderNode::eLastParameterType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> params;</div>\n\
<div class=\"line\">    lightParam-&gt;<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aec00be694fc8d654f1f7a8ea823a7cea\">parameterList</a>(params);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> p = 0; p &lt; params.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++p)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pname = params[p];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206\">MHWRender::MLightParameterInformation::StockParameterSemantic</a> semantic = lightParam-&gt;<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a37a7621bc6d9453902d95132fbbe2101\">parameterSemantic</a>( pname );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (semantic)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a3305693a0baf5df5ae2efc000aa9c017\">MHWRender::MLightParameterInformation::kWorldPosition</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightPosition].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (pname == <span class=\"stringliteral\">&quot;LP0&quot;</span>)</div>\n\
<div class=\"line\">                namesForLight[GLSLShaderNode::eLightAreaPosition0].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (pname == <span class=\"stringliteral\">&quot;LP1&quot;</span>)</div>\n\
<div class=\"line\">                namesForLight[GLSLShaderNode::eLightAreaPosition1].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (pname == <span class=\"stringliteral\">&quot;LP2&quot;</span>)</div>\n\
<div class=\"line\">                namesForLight[GLSLShaderNode::eLightAreaPosition2].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (pname == <span class=\"stringliteral\">&quot;LP3&quot;</span>)</div>\n\
<div class=\"line\">                namesForLight[GLSLShaderNode::eLightAreaPosition3].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4006a71da7e8283c7211624c49022eea\">MHWRender::MLightParameterInformation::kWorldDirection</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightDirection].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae19f0601680f2872a292474ab3088b4f\">MHWRender::MLightParameterInformation::kIntensity</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightIntensity].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MLightParameterInformation::kColor</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightColor].append(pname);</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightAmbientColor].append(pname);</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightSpecularColor].append(pname);</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightDiffuseColor].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"comment\">// Parameter type extraction for shadow maps</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aca46ea808cc9f011b3f4f014ec9040f3\">MHWRender::MLightParameterInformation::kGlobalShadowOn</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4852662e5cbf7f64d85133baa57386ab\">MHWRender::MLightParameterInformation::kShadowOn</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightShadowOn].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae05ca22a699a25e0d2030a7a440ecbbe\">MHWRender::MLightParameterInformation::kShadowViewProj</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightShadowViewProj].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a6053be989430b7fbd8b07f51528e8df4\">MHWRender::MLightParameterInformation::kShadowMap</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightShadowOn].append(pname);</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightShadowMap].append(pname);</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::ePointLightShadowMap].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ac1cd724f83701837aee2364b308a9ed2\">MHWRender::MLightParameterInformation::kShadowColor</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightShadowColor].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ace22882d5498baf50154a878321e7953\">MHWRender::MLightParameterInformation::kShadowBias</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightShadowMapBias].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a69b7eb958dd9600fc657a046524e2371\">MHWRender::MLightParameterInformation::kCosConeAngle</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightHotspot].append(pname);</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eLightFalloff].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a0be6585329840971e20d964386187935\">MHWRender::MLightParameterInformation::kDecayRate</a>:</div>\n\
<div class=\"line\">            namesForLight[GLSLShaderNode::eDecayRate].append(pname);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; drawContextParameterNames(GLSLShaderNode::ELightType lightType, <span class=\"keywordtype\">int</span> paramType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* lightParam)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sSemanticNamesForLight[lightType].size() == 0)</div>\n\
<div class=\"line\">        buildDrawContextParameterNames(lightType, lightParam);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sSemanticNamesForLight[lightType][paramType];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MUniformParameter::DataType</a> convertToUniformDataType(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0\">MHWRender::MShaderInstance::ParameterType</a> dataType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dataType)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a94dd08feda7b2cf0ff8262312c4fcc09\">MHWRender::MShaderInstance::kInvalid</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa3016cbceb721f8a4e567dc4d54d6dc6\">MUniformParameter::kTypeUnknown</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a8cfc0ab572a96edfc9db7c02f0d025d7\">MHWRender::MShaderInstance::kBoolean</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a52b0938c028df56b62bc9e9080475e7f\">MUniformParameter::kTypeBool</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0aa1acc5720dd4e85ceea5578a6cf14ae6\">MHWRender::MShaderInstance::kInteger</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ab6e6fe667e0718b58ca5f6ac419c7cf7\">MUniformParameter::kTypeInt</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a5686197bafb177bdc82550848416a1ad\">MHWRender::MShaderInstance::kFloat</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a615a014b3454583f793180280757d285\">MHWRender::MShaderInstance::kFloat2</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a2f329aadf08637405a63cee5369fd28d\">MHWRender::MShaderInstance::kFloat3</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0af21770dc86a3877076e2d58842291ca4\">MHWRender::MShaderInstance::kFloat4</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a2242133aaee8fd15dbb632825bc4226e\">MHWRender::MShaderInstance::kFloat4x4Row</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a706b60512c7f5ba8200df461b672d905\">MHWRender::MShaderInstance::kFloat4x4Col</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae59341821f9cdc0608d1f8775fb3eb7a\">MUniformParameter::kTypeFloat</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a0211e7902fa531fb032e5b40a4b31666\">MHWRender::MShaderInstance::kTexture1</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a9eafb8c812a708ea65bcbc4cab43bb8a\">MUniformParameter::kType1DTexture</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a9f41a2c609a9a7104e4d0c869d8fd2e7\">MHWRender::MShaderInstance::kTexture2</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a7d3972f1f1ee99452d3c715b157b5cad\">MUniformParameter::kType2DTexture</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a96966e9616f0f92c86a62f9ef1cf7640\">MHWRender::MShaderInstance::kTexture3</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a1f0476b91ae65b4ea6d0ce691f58be83\">MUniformParameter::kType3DTexture</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0ada96c2ae4db83bf803b3e75731d574b3\">MHWRender::MShaderInstance::kTextureCube</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af5ef31be5108f486d286c06c13df0578\">MUniformParameter::kTypeCubeTexture</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a754585b88bea58243b903b023e1594f0\">MHWRender::MShaderInstance::kSampler</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a00d1e209478ab74cbadfbe8435e32e81\">MUniformParameter::kTypeString</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa3016cbceb721f8a4e567dc4d54d6dc6\">MUniformParameter::kTypeUnknown</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa3016cbceb721f8a4e567dc4d54d6dc6\">MUniformParameter::kTypeUnknown</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> convertToUniformSemantic(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* strSemantic)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> paramSemantic = <a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(      !STRICMP( strSemantic, glslShaderSemantic::kWorld))                                paramSemantic = <a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaebbf84be5dd7360e2bbf5eb369fc97c0\">MUniformParameter::kSemanticWorldMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldTranspose))                       paramSemantic = <a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa0cacba54dfb174acff612639f8d43b1c\">MUniformParameter::kSemanticWorldTransposeMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldInverse))                         paramSemantic = <a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa2b32c47f701e1aee06ad4da2308b1e5b\">MUniformParameter::kSemanticWorldInverseMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldInverseTranspose))                paramSemantic = <a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae4206f3e87fcc5e8aaca57f71b488f74\">MUniformParameter::kSemanticWorldInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kView))                                 paramSemantic = <a name=\"a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa9286c5e650ac955bb9239a33fc8a6881\">MUniformParameter::kSemanticViewMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewTranspose))                        paramSemantic = <a name=\"a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa08a64cde1043fe74b4d19b75e01b8007\">MUniformParameter::kSemanticViewTransposeMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewInverse))                          paramSemantic = <a name=\"a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa18c403ade6b055399d73781ec5525ec8\">MUniformParameter::kSemanticViewInverseMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewInverseTranspose))                 paramSemantic = <a name=\"a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efac2fd760682e8b70a19fbb00d9fbbca10\">MUniformParameter::kSemanticViewInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kProjection))                           paramSemantic = <a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5ee9d38749ff3eecb39e8a5d7939bf12\">MUniformParameter::kSemanticProjectionMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kProjectionTranspose))                  paramSemantic = <a name=\"a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaded6834b41888a78a7e4cc73ded9dca2\">MUniformParameter::kSemanticProjectionTransposeMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kProjectionInverse))                    paramSemantic = <a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa50da21dea2dc0c66c65447c4064aeab4\">MUniformParameter::kSemanticProjectionInverseMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kProjectionInverseTranspose))           paramSemantic = <a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa2db728cf9d48ad6eef29c86811633aa2\">MUniformParameter::kSemanticProjectionInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldView))                            paramSemantic = <a name=\"a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efafed2a73eecf453663e5049f7b91ab454\">MUniformParameter::kSemanticWorldViewMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldViewTranspose))                   paramSemantic = <a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa660072ee0da5aac32d009d54390a7d2c\">MUniformParameter::kSemanticWorldViewTransposeMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldViewInverse))                     paramSemantic = <a name=\"a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa82582b0dacdb426a631d6b6d6e7bd318\">MUniformParameter::kSemanticWorldViewInverseMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldViewInverseTranspose))            paramSemantic = <a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa882552cd5dbb4f1e79fbf6f191a519b6\">MUniformParameter::kSemanticWorldViewInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewProjection))                       paramSemantic = <a name=\"a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa3cc9931234978575495baabcc35d77ac\">MUniformParameter::kSemanticViewProjectionMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewProjectionTranspose))              paramSemantic = <a name=\"a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab8ede271141deff09669de8301b275cd\">MUniformParameter::kSemanticViewProjectionTransposeMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewProjectionInverse))                paramSemantic = <a name=\"a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa8aa624322655ec7433a8c9be4de62042\">MUniformParameter::kSemanticViewProjectionInverseMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewProjectionInverseTranspose))       paramSemantic = <a name=\"a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa53bf454430df7cfd9d82a540cc6f4d89\">MUniformParameter::kSemanticViewProjectionInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldViewProjection))                  paramSemantic = <a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efac2845cd2c335834608660c432a75bfc7\">MUniformParameter::kSemanticWorldViewProjectionMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldViewProjectionTranspose))         paramSemantic = <a name=\"a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa65cde354d11cfcd732bf2b5e6a9ecc4f\">MUniformParameter::kSemanticWorldViewProjectionTransposeMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldViewProjectionInverse))           paramSemantic = <a name=\"a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa87ea4b79868f0697c3044d0e8e20c3cf\">MUniformParameter::kSemanticWorldViewProjectionInverseMatrix</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kWorldViewProjectionInverseTranspose))  paramSemantic = <a name=\"a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad5142de73b4e8966659887132402b4b0\">MUniformParameter::kSemanticWorldViewProjectionInverseTransposeMatrix</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewDirection))                        paramSemantic = <a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewPosition))                         paramSemantic = <a name=\"a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5f7f2dd48bf94ec26eba9f19290eb3ba\">MUniformParameter::kSemanticViewPos</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kLocalViewer))                          paramSemantic = <a name=\"a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efafb1168559308955b919faf054f1471d2\">MUniformParameter::kSemanticLocalViewer</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kViewportPixelSize))                    paramSemantic = <a name=\"a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae3e697f1682b81aab2f7b1e205ece4df\">MUniformParameter::kSemanticViewportPixelSize</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kBackgroundColor))                      paramSemantic = <a name=\"a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa0136b63d752ea317d53b36b72331af70\">MUniformParameter::kSemanticBackgroundColor</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kFrame))                                paramSemantic = <a name=\"a122\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa47a4db04fc454d43cb0effa28e055304\">MUniformParameter::kSemanticFrameNumber</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kFrameNumber))                          paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa47a4db04fc454d43cb0effa28e055304\">MUniformParameter::kSemanticFrameNumber</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kAnimationTime))                        paramSemantic = <a name=\"a123\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa78f71ae1aff5a5ac40249feae9951768\">MUniformParameter::kSemanticTime</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kTime))                                 paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa78f71ae1aff5a5ac40249feae9951768\">MUniformParameter::kSemanticTime</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kNearClipPlane))                        paramSemantic = <a name=\"a124\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaea6ef2e23bb54f3a8cbe2ee20f806b81\">MUniformParameter::kSemanticNearClipPlane</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kFarClipPlane))                         paramSemantic = <a name=\"a125\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa4cc42ecfffec0584e050a06153497a8b\">MUniformParameter::kSemanticFarClipPlane</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kColor))                                paramSemantic = <a name=\"a126\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kLightColor))                           paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kAmbient))                              paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kLightAmbientColor))                    paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kSpecular))                             paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kLightSpecularColor))                   paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kDiffuse))                              paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kLightDiffuseColor))                    paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kNormal))                               paramSemantic = <a name=\"a127\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa902d41d2f20092eb5696141b60e42b25\">MUniformParameter::kSemanticNormal</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kBump))                                 paramSemantic = <a name=\"a128\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae867e160beb59794a5b46005abdfec40\">MUniformParameter::kSemanticBump</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kEnvironment))                          paramSemantic = <a name=\"a129\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa37192c0f651ef717c41cbc9678d1f5d4\">MUniformParameter::kSemanticEnvironment</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kPosition))                             paramSemantic = <a name=\"a130\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kAreaPosition0))                        paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kAreaPosition1))                        paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kAreaPosition2))                        paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kAreaPosition3))                        paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kDirection))                            paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kShadowMap))                            paramSemantic = <a name=\"a131\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa3f1e3514b18259f9f74387bf25ce9af2\">MUniformParameter::kSemanticColorTexture</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kPointLightShadowMap))                  paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa3f1e3514b18259f9f74387bf25ce9af2\">MUniformParameter::kSemanticColorTexture</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kShadowColor))                          paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kShadowFlag))                           paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kShadowMapBias))                        paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kShadowMapMatrix))                      paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kShadowMapXForm))                       paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kStandardsGlobal))                      paramSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kTranspDepthTexture))                   paramSemantic = <a name=\"a132\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa812025dab4ab6e8be46ea315d6a84714\">MUniformParameter::kSemanticTranspDepthTexture</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( strSemantic, glslShaderSemantic::kOpaqueDepthTexture))                   paramSemantic = <a name=\"a133\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa539b874523c9051e0d0b5c56e0864bd8\">MUniformParameter::kSemanticOpaqueDepthTexture</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> paramSemantic;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AfterOpenErrorCB</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> addError(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; errorMsg)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(sInstance == NULL)</div>\n\
<div class=\"line\">            sInstance = <span class=\"keyword\">new</span> AfterOpenErrorCB;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        sInstance-&gt;mErrorMsg += errorMsg;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    AfterOpenErrorCB()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mSceneOpenedCallback = <a name=\"a134\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a135\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaab937dff3e9eba2ea59018ed4b65dd018\">MSceneMessage::kAfterOpen</a>, AfterOpenErrorCB::afterOpen );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~AfterOpenErrorCB()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a136\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>( mSceneOpenedCallback );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> afterOpen(<span class=\"keywordtype\">void</span>*)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(sInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"a137\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(sInstance-&gt;mErrorMsg);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> sInstance;</div>\n\
<div class=\"line\">            sInstance = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    MCallbackId mSceneOpenedCallback;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mErrorMsg;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> AfterOpenErrorCB *sInstance;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">AfterOpenErrorCB *AfterOpenErrorCB::sInstance = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Implicit light bindings are done without generating a dirty</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notification that the attribute editor can catch and use to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// update the dropdown menus and text fields used to indicate</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the current state of the light connections. This class</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accumulates refresh requests, and sends a single MEL command</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to refresh the AE when the app becomes idle.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>IdleAttributeEditorImplicitRefresher</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> activate()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sInstance == NULL)</div>\n\
<div class=\"line\">            sInstance = <span class=\"keyword\">new</span> IdleAttributeEditorImplicitRefresher();</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    IdleAttributeEditorImplicitRefresher()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mIdleCallback = <a name=\"a138\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_event_message.html#a8d22c58b90484867755273c2f7ffc6ec\">MEventMessage::addEventCallback</a>( <span class=\"stringliteral\">&quot;idle&quot;</span>, IdleAttributeEditorImplicitRefresher::refresh );</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~IdleAttributeEditorImplicitRefresher()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( mIdleCallback );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> refresh(<span class=\"keywordtype\">void</span>* data)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"a139\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a2c877a6e116f8fd3a6e76387403c023a\">MGlobal::executeCommandOnIdle</a>(<span class=\"stringliteral\">&quot;if (exists(\\&quot;AEGLSLShader_lightConnectionUpdateAll\\&quot;)) AEGLSLShader_lightConnectionUpdateAll;&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> sInstance;</div>\n\
<div class=\"line\">            sInstance = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    MCallbackId mIdleCallback;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> IdleAttributeEditorImplicitRefresher *sInstance;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">IdleAttributeEditorImplicitRefresher *IdleAttributeEditorImplicitRefresher::sInstance = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Adding and removing attributes while a scene is loading can lead</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to issues, especially if there were connections between the shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and a texture. To prevent these issues, we will wait until the scene</span></div>\n\
<div class=\"line\"><span class=\"comment\">// has finished loading before adding or removing the attributes that</span></div>\n\
<div class=\"line\"><span class=\"comment\">// manage connections between a scene light and its corresponding shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">// parameters.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PostSceneUpdateAttributeRefresher</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> add(GLSLShaderNode* node)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sInstance == NULL)</div>\n\
<div class=\"line\">            sInstance = <span class=\"keyword\">new</span> PostSceneUpdateAttributeRefresher();</div>\n\
<div class=\"line\">        sInstance-&gt;mNodeSet.insert(node);</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> <span class=\"keyword\">remove</span>(GLSLShaderNode* node)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sInstance != NULL)</div>\n\
<div class=\"line\">            sInstance-&gt;mNodeSet.erase(node);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    PostSceneUpdateAttributeRefresher()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mSceneUpdateCallback = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a140\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa3fed96219df72e729d0b7049c4754927\">MSceneMessage::kSceneUpdate</a>, PostSceneUpdateAttributeRefresher::refresh );</div>\n\
<div class=\"line\">        mAfterCreateReference = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a141\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaafeb8f82c3fc0b0ae71bb22e6ea8d79f5\">MSceneMessage::kAfterCreateReference</a> , PostSceneUpdateAttributeRefresher::refresh );</div>\n\
<div class=\"line\">        mAfterImport = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a142\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa53fc8c2585483ca800500bb17bd25fdf\">MSceneMessage::kAfterImport</a>, PostSceneUpdateAttributeRefresher::refresh );</div>\n\
<div class=\"line\">        mAfterLoadReference = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a44771b834e9a0ad7291ecdcc880106fe\">MSceneMessage::addCallback</a>(<a name=\"a143\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa54642484be67343c7c2d30c6911cc6a3\">MSceneMessage::kAfterLoadReference</a>, PostSceneUpdateAttributeRefresher::refresh );</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~PostSceneUpdateAttributeRefresher()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>( mSceneUpdateCallback );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>( mAfterCreateReference );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>( mAfterImport );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MSceneMessage::removeCallback</a>( mAfterLoadReference );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> refresh(<span class=\"keywordtype\">void</span>* data)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (TNodeSet::iterator itNode = sInstance-&gt;mNodeSet.begin();</div>\n\
<div class=\"line\">                itNode != sInstance-&gt;mNodeSet.end();</div>\n\
<div class=\"line\">                ++itNode )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                (*itNode)-&gt;refreshLightConnectionAttributes(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> sInstance;</div>\n\
<div class=\"line\">            sInstance = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::set&lt;GLSLShaderNode*&gt; TNodeSet;</div>\n\
<div class=\"line\">    TNodeSet mNodeSet;</div>\n\
<div class=\"line\">    MCallbackId mSceneUpdateCallback;</div>\n\
<div class=\"line\">    MCallbackId mAfterCreateReference;</div>\n\
<div class=\"line\">    MCallbackId mAfterImport;</div>\n\
<div class=\"line\">    MCallbackId mAfterLoadReference;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PostSceneUpdateAttributeRefresher *sInstance;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">PostSceneUpdateAttributeRefresher *PostSceneUpdateAttributeRefresher::sInstance = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">GLSLShaderNode::GLSLShaderNode()</div>\n\
<div class=\"line\">:   fEffectLoaded(false)</div>\n\
<div class=\"line\">,   fGLSLShaderInstance(NULL)</div>\n\
<div class=\"line\">,   fTechniqueName(<span class=\"stringliteral\">&quot;Main&quot;</span>)</div>\n\
<div class=\"line\">,   fTechniqueIdx(-1)</div>\n\
<div class=\"line\">,   fTechniqueIsSelectable(false)</div>\n\
<div class=\"line\">,   fTechniqueIsTransparent(false)</div>\n\
<div class=\"line\">,   fTechniqueSupportsAdvancedTransparency(false)</div>\n\
<div class=\"line\">,   fTechniqueOverridesDrawState(false)</div>\n\
<div class=\"line\">,   fTechniqueTextureMipmapLevels(0)</div>\n\
<div class=\"line\">,   fTechniqueBBoxExtraScale(1.0)</div>\n\
<div class=\"line\">,   fTechniqueOverridesNonMaterialItems(false)</div>\n\
<div class=\"line\">,   fTechniqueHandlesConsolidatedGeometry(true)</div>\n\
<div class=\"line\">,   fTechniquePassCount(0)</div>\n\
<div class=\"line\">,   fTechniquePassSpecs()</div>\n\
<div class=\"line\">,   fLastFrameStamp((MUint64)-1)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> s_addResourcePath = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (s_addResourcePath)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resourceLocation = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;${MAYA_LOCATION}/presets/GLSL/examples&quot;</span>).<a name=\"a144\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#af44d9587972be235b7d5ed4ec887cf0b\">expandEnvironmentVariablesAndTilde</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a145\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* textureMgr = renderer-&gt;<a name=\"a146\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (textureMgr) {</div>\n\
<div class=\"line\">                textureMgr-&gt;<a name=\"a147\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a96a66b439082bd98a67d92eeac95f6fe\">addImagePath</a>( resourceLocation );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr) {</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a name=\"a148\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a144da456a2562728f8f1b9e1a3c12d1c\">addShaderPath</a>( resourceLocation );</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a name=\"a149\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a37f561eda15e6b7641e2e327d78b4354\">addShaderIncludePath</a>( resourceLocation );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        s_addResourcePath = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">GLSLShaderNode::~GLSLShaderNode()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    EffectCollection::instance().deregisterNode(<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    deleteUniformUserData();</div>\n\
<div class=\"line\">    PostSceneUpdateAttributeRefresher::remove(<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGLSLShaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a name=\"a150\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(fGLSLShaderInstance);</div>\n\
<div class=\"line\">                fGLSLShaderInstance = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> GLSLShaderNode::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ms = <a name=\"a151\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        initializeNodeAttrs();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//MGlobal::displayError( &quot;GLSLShader internal error: Unhandled exception in initialize&quot; );</span></div>\n\
<div class=\"line\">        ms = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ms;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* GLSLShaderNode::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> GLSLShaderNode();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::initializeNodeAttrs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a152\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a>   typedAttr;</div>\n\
<div class=\"line\">    <a name=\"_a153\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr;</div>\n\
<div class=\"line\">    <a name=\"_a154\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html\">MFnStringData</a>       stringData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a>  stringArrayData;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             stat, stat2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The shader attribute holds the name of the effect file that defines</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sShader = typedAttr.<a name=\"a155\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;shader&quot;</span>, <span class=\"stringliteral\">&quot;s&quot;</span>, <a name=\"a156\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, stringData.<a name=\"a157\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    typedAttr.<a name=\"a158\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab8fc03c313bed1f43387ad04e31bc87d\">setUsedAsFilename</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    stat = addAttribute(sShader);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Effect Uniform Parameters</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sEffectUniformParameters = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;EffectParameters&quot;</span>, <span class=\"stringliteral\">&quot;ep&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, stringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    stat = addAttribute(sEffectUniformParameters);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// technique</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sTechnique = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;technique&quot;</span>, <span class=\"stringliteral\">&quot;t&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, stringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    stat = addAttribute(sTechnique);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// technique list</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sTechniques = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;techniques&quot;</span>, <span class=\"stringliteral\">&quot;ts&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a7f61c3f7033fde37de0e63f291c9e834\">MFnData::kStringArray</a>, stringArrayData.<a name=\"a159\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ae27cf2fd28a3c69b880b1096ea9e0103\">setInternal</a>( <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a name=\"a160\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    stat = addAttribute(sTechniques);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The description field where we pass compile errors etc back for the user to see</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sDescription = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;description&quot;</span>, <span class=\"stringliteral\">&quot;desc&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, stringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    stat = addAttribute(sDescription);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The feedback field where we pass compile errors etc back for the user to see</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sDiagnostics = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;diagnostics&quot;</span>, <span class=\"stringliteral\">&quot;diag&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, stringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    stat = addAttribute(sDiagnostics);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The description field where we pass compile errors etc back for the user to see</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    sLightInfo = typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;lightInfo&quot;</span>, <span class=\"stringliteral\">&quot;linfo&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>, stringData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_data.html#a2a76d6e5a305b483c5d9b8444fb79126\">create</a>(&amp;stat2), &amp;stat);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a98bb3089ec3b7442383da68a5ef424c7\">setWritable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    typedAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>( <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    stat = addAttribute(sLightInfo);</div>\n\
<div class=\"line\">    M_CHECK( stat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Specify our dependencies</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    attributeAffects( sShader, sTechniques);</div>\n\
<div class=\"line\">    attributeAffects( sShader, sTechnique);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::getInternalValue( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> retVal = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug == sShader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handle.<a name=\"a161\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( fEffectName );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sTechnique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( fTechniqueName );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug ==sTechniques)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* tlist = &amp;fTechniqueNames;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (tlist)</div>\n\
<div class=\"line\">                handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a>().create( *tlist ));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_string_array_data.html\">MFnStringArrayData</a>().create() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == fTechniqueEnumAttr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//Todo: Move heavy instructions from here?</span></div>\n\
<div class=\"line\">            fTechniqueIdx = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; (int) fTechniqueNames.length(); ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fTechniqueNames[i] == fTechniqueName)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fTechniqueIdx = i;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fTechniqueIdx &gt;=0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>((<span class=\"keywordtype\">short</span>)fTechniqueIdx);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            retVal = <a name=\"a162\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa88f4dd4cfd3e964e0806d6e5b253347\">MPxHardwareShader::getInternalValue</a>( plug, handle);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span> ( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        retVal = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::setInternalValue( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> retVal = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">try</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (plug == sShader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            loadEffect ( handle.<a name=\"a163\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == sTechnique)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueName = handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a858b071eda071f265c130e30d0b98622\">asString</a>();</div>\n\
<div class=\"line\">            loadEffect (fEffectName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == fTechniqueEnumAttr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> index = handle.<a name=\"a164\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ab4cfc0fe402e4a52cf87b8acc6a29861\">asShort</a>();</div>\n\
<div class=\"line\">            M_CHECK(fTechniqueNames.length() &lt; (<span class=\"keywordtype\">unsigned</span> int)std::numeric_limits&lt;int&gt;::max());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (index &gt;= 0 &amp;&amp; index &lt; (<span class=\"keywordtype\">int</span>)fTechniqueNames.length() &amp;&amp; index != fTechniqueIdx)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fTechniqueName = fTechniqueNames[index];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            retVal = <a name=\"a165\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a6caab4434e836748680958883564af35\">MPxHardwareShader::setInternalValue</a>( plug, handle);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">catch</span>( ... )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        retVal = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> GLSLShaderNode::dependsOn(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; otherPlug, <span class=\"keywordtype\">bool</span>&amp; depends)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( plug == outColor )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> paramCount = fUniformParameters.length();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; paramCount; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> param = fUniformParameters.getElement(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( param.<a name=\"a166\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab6d4ca450bab408a98a5803c0dbaa747\">getPlug</a>() == otherPlug )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                depends = param.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a37357b066d4c628b1fae2f1ee08b2b12\">isATexture</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kUnknownParameter;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; GLSLShaderNode::effectName()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fEffectName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::loadEffect(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!renderer)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If not core profile: ogsfx is not available</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// save effect name and leave</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderer-&gt;<a name=\"a167\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ae2d5ce57991bca16f525728e8d9d399e\">drawAPI</a>() != MHWRender::kOpenGLCoreProfile) {</div>\n\
<div class=\"line\">        fEffectName = effectName;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!shaderMgr)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//In core profile, there used to be the problem where the shader fails to load sometimes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//The problem occurs when the OpenGL Device Context is switched  before</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//calling the GLSLShaderNode::loadEffect() function(this switch is performed by Tmodel::selectManip).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//When that occurs, the shader is loaded in the wrong context instead of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//viewport context... so that in the draw phase, after switching to the viewport context,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//the drawing is erroneous.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//In order to solve that problem, make the view context current</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <a name=\"_a168\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view = <a name=\"a169\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a3cda809eff914b04ff47de958c365f09\">M3dView::active3dView</a>(&amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    view.<a name=\"a170\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ada70394b46e5863264bd5897039f5d14\">makeSharedContextCurrent</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(effectName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        clearParameters();</div>\n\
<div class=\"line\">        fEffectName.clear();</div>\n\
<div class=\"line\">        fEffectLoaded = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fGLSLShaderInstance != NULL) {</div>\n\
<div class=\"line\">            shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(fGLSLShaderInstance);</div>\n\
<div class=\"line\">            fGLSLShaderInstance = NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fTechniqueNames.clear();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Forget previous effect:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGLSLShaderInstance != NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fEffectLoaded = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(fGLSLShaderInstance);</div>\n\
<div class=\"line\">        fGLSLShaderInstance = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    EffectCollection::instance().registerNode(<span class=\"keyword\">this</span>, effectName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (EffectCollection::instance().isBrokenEffect(effectName))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// We already know this one is broken. Just keep the filename.</span></div>\n\
<div class=\"line\">        fEffectName = effectName;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get list of techniques</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> techniqueNames;</div>\n\
<div class=\"line\">    shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a67d96162d64617bc3299f75cd7c13dff\">getEffectsTechniques</a>(effectName, techniqueNames, GLSLShaderNamespace::sMacros, GLSLShaderNamespace::sNbMacros);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (techniqueNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// An effect file that fails parsing at the OGSFX level will not have any techniques</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//If no techniques available, return false</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> errorArgs;</div>\n\
<div class=\"line\">        errorArgs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( effectName );</div>\n\
<div class=\"line\">        errorArgs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( shaderMgr-&gt;<a name=\"a171\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a32aa7a2b395ae162d8fc66abf5f5a14a\">getLastError</a>() );</div>\n\
<div class=\"line\">        errorArgs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( shaderMgr-&gt;<a name=\"a172\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a45e7598b79e4e7202aa4082baec16231\">getLastErrorSource</a>(<span class=\"keyword\">true</span> <span class=\"comment\">/*displayLineNumber*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*filterSource*/</span>, 2<span class=\"comment\">/*numLines*/</span>) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = glslShaderStrings::getString( glslShaderStrings::kErrorLoadingEffect, errorArgs );</div>\n\
<div class=\"line\">        displayErrorAndWarnings(errorMsg);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Preserve the name of the effect:</span></div>\n\
<div class=\"line\">        fEffectName = effectName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remember that the effect file is broken:</span></div>\n\
<div class=\"line\">        EffectCollection::instance().registerBrokenEffect(effectName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get preferred technique</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> techniqueName;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> techniqueIdx = -1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fTechniqueName.length() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; techniqueNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (techniqueNames[i] == fTechniqueName)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                techniqueName = fTechniqueName;</div>\n\
<div class=\"line\">                techniqueIdx = i;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// If not found use first</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (techniqueName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">        techniqueName = techniqueNames[0];</div>\n\
<div class=\"line\">        techniqueIdx = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>* context = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Do not use cache here, in case we want to recompiling a shader that has been modified after loading.</span></div>\n\
<div class=\"line\">    <a name=\"_a173\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* newInstance = shaderMgr-&gt;<a name=\"a174\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>(effectName, techniqueName, GLSLShaderNamespace::sMacros, GLSLShaderNamespace::sNbMacros);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (newInstance)</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">        context = <a name=\"a175\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a740208508edba7934a27816decbb9570\">MHWRender::MRenderUtilities::acquireSwatchDrawContext</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(context)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Effects that fail compiling at the GLSL level will fail on the FIRST bind.</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> bindStatus = newInstance-&gt;<a name=\"a176\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a705d4d83d28a26d08a792df0a25700d2\">bind</a>(*context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (bindStatus != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Something bad happenend while binding the effect:</span></div>\n\
<div class=\"line\">                newInstance-&gt;<a name=\"a177\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#ac4a9d5b839ed15d1bc1330b7ce663f19\">unbind</a>(*context);</div>\n\
<div class=\"line\">                <a name=\"a178\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a5222892109760efc845e37469b0f6cb4\">MHWRender::MRenderUtilities::releaseDrawContext</a>(context);</div>\n\
<div class=\"line\">                context = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Keep note that the effect failed its first bind, because subsequent bind calls will succeed.</span></div>\n\
<div class=\"line\">                EffectCollection::instance().registerBrokenEffect(effectName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        EffectCollection::instance().registerBrokenEffect(effectName);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (context)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Reset current light connections, that will unlock light parameters so that their uniform attributes can be properly removed if not reused</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Do not refresh AE, it&#39;s done on idle and the attribute may not exist anymore. The AE will be refreshed later on anyway</span></div>\n\
<div class=\"line\">        clearLightConnectionData(<span class=\"keyword\">false</span> <span class=\"comment\">/*refreshAE*/</span>);</div>\n\
<div class=\"line\">        fLightParameters.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fGLSLShaderInstance = newInstance;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fEffectName = effectName;</div>\n\
<div class=\"line\">        fTechniqueNames = techniqueNames;</div>\n\
<div class=\"line\">        fTechniqueName = techniqueName;</div>\n\
<div class=\"line\">        fTechniqueIdx = techniqueIdx;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> descriptionPlug( thisMObject(), sDescription);</div>\n\
<div class=\"line\">        descriptionPlug.setValue( <span class=\"stringliteral\">&quot;&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Build list of techniques pass specs and determine Selectable status</span></div>\n\
<div class=\"line\">        fTechniqueIsSelectable = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        fTechniquePassCount = 0;</div>\n\
<div class=\"line\">        fTechniquePassSpecs.<a name=\"a179\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fTechniquePassCount = newInstance-&gt;<a name=\"a180\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#af37a1499b42b48fa48a5bb446305d1f2\">getPassCount</a>(*context);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passIndex = 0; passIndex &lt; fTechniquePassCount; ++passIndex)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> passDrawContext = newInstance-&gt;<a name=\"a181\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4423c31344cd4836118db5fc5d8a5093\">passAnnotationAsString</a>(passIndex, glslShaderAnnotation::kDrawContext, opStatus);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (STRICMP(passDrawContext.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <a name=\"a182\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a728fc00f0764227a6f345c089058c998\">MHWRender::MPassContext::kSelectionPassSemantic</a>.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>()) == 0)</div>\n\
<div class=\"line\">                fTechniqueIsSelectable = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> passPrimitiveFilter = newInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4423c31344cd4836118db5fc5d8a5093\">passAnnotationAsString</a>(passIndex, glslShaderAnnotation::kPrimitiveFilter, opStatus);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> passIsForFatLine  = (STRICMP(passPrimitiveFilter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kFatLine) == 0);</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> passIsForFatPoint = (STRICMP(passPrimitiveFilter.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kFatPoint) == 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            PassSpec spec = { passDrawContext, passIsForFatLine, passIsForFatPoint };</div>\n\
<div class=\"line\">            fTechniquePassSpecs.insert( std::make_pair(passIndex, spec) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        newInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#ac4a9d5b839ed15d1bc1330b7ce663f19\">unbind</a>(*context);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a5222892109760efc845e37469b0f6cb4\">MHWRender::MRenderUtilities::releaseDrawContext</a>(context);</div>\n\
<div class=\"line\">        context = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup Transparency using technique annotation</span></div>\n\
<div class=\"line\">        fTechniqueIsTransparent = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> transparency = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kTransparency, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueIsTransparent = (STRICMP(transparency.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kValueTransparent)==0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup Advanced Transparency support using technique annotation</span></div>\n\
<div class=\"line\">        fTechniqueSupportsAdvancedTransparency = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> advancedTransparency = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kSupportsAdvancedTransparency, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueSupportsAdvancedTransparency = (STRICMP(advancedTransparency.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kValueTrue)==0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup index buffer mutators using annotations</span></div>\n\
<div class=\"line\">        fTechniqueIndexBufferType = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> indexBufferType = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kIndexBufferType, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueIndexBufferType = indexBufferType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Use our own crack free primitive generators - we know they are registered</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( fTechniqueIndexBufferType == <span class=\"stringliteral\">&quot;PNAEN18&quot;</span> )</div>\n\
<div class=\"line\">                fTechniqueIndexBufferType = <span class=\"stringliteral\">&quot;GLSL_PNAEN18&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( fTechniqueIndexBufferType == <span class=\"stringliteral\">&quot;PNAEN9&quot;</span> )</div>\n\
<div class=\"line\">                fTechniqueIndexBufferType = <span class=\"stringliteral\">&quot;GLSL_PNAEN9&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Query technique if it should follow the maya transparent object rendering or is self-managed (multi-passes)</span></div>\n\
<div class=\"line\">        fTechniqueOverridesDrawState = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> overridesDrawState = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kOverridesDrawState, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueOverridesDrawState = (STRICMP(overridesDrawState.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kValueTrue)==0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Query technique preference for the mip map level to generate or load for each textures</span></div>\n\
<div class=\"line\">        fTechniqueTextureMipmapLevels = 0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> textureMipMapLevels = fGLSLShaderInstance-&gt;techniqueAnnotationAsInt(glslShaderAnnotation::kTextureMipmaplevels, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueTextureMipmapLevels = textureMipMapLevels;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Query technique bbox extra scale</span></div>\n\
<div class=\"line\">        fTechniqueBBoxExtraScale = 1.0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> extraScale = (double) fGLSLShaderInstance-&gt;techniqueAnnotationAsFloat(glslShaderAnnotation::kExtraScale, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueBBoxExtraScale = extraScale;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Query technique if it overrides non material items items</span></div>\n\
<div class=\"line\">        fTechniqueOverridesNonMaterialItems = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> overridesNonMaterialItems = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kOverridesNonMaterialItems, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueOverridesNonMaterialItems = (STRICMP(overridesNonMaterialItems.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kValueTrue)==0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Query technique if it should enable the consolidation for the geometry it is applied to</span></div>\n\
<div class=\"line\">        fTechniqueHandlesConsolidatedGeometry = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> handlesConsolidatedGeometry = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kHandlesConsolidatedGeometry, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fTechniqueHandlesConsolidatedGeometry = (STRICMP(handlesConsolidatedGeometry.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kValueTrue)==0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        configureUniforms();</div>\n\
<div class=\"line\">        configureGeometryRequirements();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fTechniqueEnumAttr = buildTechniqueEnumAttribute(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fEffectLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Refresh any AE that monitors implicit lights:</span></div>\n\
<div class=\"line\">        IdleAttributeEditorImplicitRefresher::activate();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        displayErrorAndWarnings(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Still preserve the name of the shader</span></div>\n\
<div class=\"line\">    fEffectName = effectName;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Allows loading and resaving a file that references a broken shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// without destroying the scene data.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> errorArgs;</div>\n\
<div class=\"line\">    errorArgs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( effectName );</div>\n\
<div class=\"line\">    errorArgs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a32aa7a2b395ae162d8fc66abf5f5a14a\">getLastError</a>() );</div>\n\
<div class=\"line\">    errorArgs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a45e7598b79e4e7202aa4082baec16231\">getLastErrorSource</a>(<span class=\"keyword\">true</span> <span class=\"comment\">/*displayLineNumber*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*filterSource*/</span>, 2<span class=\"comment\">/*numLines*/</span>) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = glslShaderStrings::getString( glslShaderStrings::kErrorLoadingEffect, errorArgs );</div>\n\
<div class=\"line\">    displayErrorAndWarnings(errorMsg);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// ***********************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ERROR Reporting</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ***********************************</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::displayErrorAndWarnings(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; message)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> diagnosticsPlug( thisMObject(), sDiagnostics);</div>\n\
<div class=\"line\">    diagnosticsPlug.setValue( message );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (message.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If an error occured when loading a scene</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// delay the error message so it is shown last</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and not lost by the list of missing attributes warnings</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(<a name=\"a183\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#accbcaffc37fcbee9f7974aae80c8014b\">MFileIO::isReadingFile</a>() &amp;&amp; <a name=\"a184\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#a30bf5678402012d5607a6b0f22d2c2a5\">MFileIO::isOpeningFile</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AfterOpenErrorCB::addError(message);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(message);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::clearParameters()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    clearLightConnectionData();</div>\n\
<div class=\"line\">    fLightParameters.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fUniformParameters.setLength(0);</div>\n\
<div class=\"line\">    setUniformParameters( fUniformParameters, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    deleteUniformUserData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fGeometryRequirements.clear();</div>\n\
<div class=\"line\">    fVaryingParameters.setLength(0);</div>\n\
<div class=\"line\">    setVaryingParameters( fVaryingParameters, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    fVaryingParametersUpdateId = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fTechniqueIndexBufferType.clear();</div>\n\
<div class=\"line\">    fTechniquePassSpecs.clear();</div>\n\
<div class=\"line\">    fTechniqueIdx = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fUIGroupNames.setLength(0);</div>\n\
<div class=\"line\">    fUIGroupParameters.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::configureUniformUI(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; parameterName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>&amp; uniformParam)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uiWidget = fGLSLShaderInstance-&gt;uiWidget(parameterName, opStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uiWidget == <span class=\"stringliteral\">&quot;None&quot;</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uniformParam.<a name=\"a185\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab5ef06b49e994b093b442788b96167d5\">setUIHidden</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uniformParam.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab5ef06b49e994b093b442788b96167d5\">setUIHidden</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//Set UIMin and UIMax</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define SET_VALUE_FROM_ANNOTATION(shaderAnnotation, parameterFunction) \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            { \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">                const float value = fGLSLShaderInstance-&gt;annotationAsFloat(parameterName, glslShaderAnnotation::shaderAnnotation, opStatus); \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">                if (opStatus == MStatus::kSuccess) \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">                { \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">                    uniformParam.parameterFunction((double)value); \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">                } \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            SET_VALUE_FROM_ANNOTATION(kUIMin, setRangeMin);</div>\n\
<div class=\"line\">            SET_VALUE_FROM_ANNOTATION(kUIMax, setRangeMax);</div>\n\
<div class=\"line\">            SET_VALUE_FROM_ANNOTATION(kUISoftMin, setSoftRangeMin);</div>\n\
<div class=\"line\">            SET_VALUE_FROM_ANNOTATION(kUISoftMax, setSoftRangeMax);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef SET_VALUE_FROM_ANNOTATION</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uiName = fGLSLShaderInstance-&gt;uiName(parameterName, opStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        uniformParam.<a name=\"a186\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae6a07a795a6f2ad194e14c6735f44450\">setUINiceName</a>(uiName);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Convert Shader space into Maya space</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> GLSLShaderNode::convertSpace(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; parameterName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> defaultSpace)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> space = defaultSpace;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGLSLShaderInstance == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> space;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ann = fGLSLShaderInstance-&gt;annotationAsString(parameterName, glslShaderAnnotation::kSpace, opStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(opStatus != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> space;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !STRICMP( ann.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kObject))        space = defaultSpace &gt;= <a name=\"a187\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a>   : <a name=\"a188\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa09d1a594e9e76ff19ada1f447328882e\">MUniformParameter::kSemanticObjectDir</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( ann.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kWorld))    space = defaultSpace &gt;= <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>    : <a name=\"a189\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad606c99fe89502591358e64f4f7a589b\">MUniformParameter::kSemanticWorldDir</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( ann.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kView))     space = defaultSpace &gt;= <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5f7f2dd48bf94ec26eba9f19290eb3ba\">MUniformParameter::kSemanticViewPos</a>     : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( ann.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kCamera))   space = defaultSpace &gt;= <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad6267c9673325fa9a63cfc0bb300a315\">MUniformParameter::kSemanticObjectPos</a> ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5f7f2dd48bf94ec26eba9f19290eb3ba\">MUniformParameter::kSemanticViewPos</a>     : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> space;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> GLSLShaderNode::guessUnknownSemantics(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; parameterName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> uniformSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGLSLShaderInstance == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> uniformSemantic;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sasSemantic = fGLSLShaderInstance-&gt;annotationAsString(parameterName, glslShaderAnnotation::kSasBindAddress, opStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; sasSemantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(      !MSTRICMP( sasSemantic, glslShaderAnnotationValue::kSas_Skeleton_MeshToJointToWorld_0_))   uniformSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaebbf84be5dd7360e2bbf5eb369fc97c0\">MUniformParameter::kSemanticWorldMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !MSTRICMP( sasSemantic, glslShaderAnnotationValue::kSas_Camera_WorldToView))               uniformSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa9286c5e650ac955bb9239a33fc8a6881\">MUniformParameter::kSemanticViewMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !MSTRICMP( sasSemantic, glslShaderAnnotationValue::kSas_Camera_Projection))                uniformSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa5ee9d38749ff3eecb39e8a5d7939bf12\">MUniformParameter::kSemanticProjectionMatrix</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !MSTRICMP( sasSemantic, glslShaderAnnotationValue::kSas_Time_Now))                         uniformSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa78f71ae1aff5a5ac40249feae9951768\">MUniformParameter::kSemanticTime</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( sasSemantic.<a name=\"a190\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::k_Position) &gt;= 0)                                  uniformSemantic = convertSpace(parameterName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( sasSemantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::k_Direction) &gt;= 0 &amp;&amp;</div>\n\
<div class=\"line\">                 sasSemantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::k_Direction) != sasSemantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::k_Directional))    uniformSemantic = convertSpace(parameterName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae5534556150af0c82c0bd935de2e5071\">MUniformParameter::kSemanticViewDir</a>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Next try control type</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( uniformSemantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* UIAnnotations[2] = { glslShaderAnnotation::kSasUiControl, glslShaderAnnotation::kUIWidget };</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; 2; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> UiControl = fGLSLShaderInstance-&gt;annotationAsString(parameterName, UIAnnotations[i], opStatus);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; UiControl.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &amp;&amp; !MSTRICMP( UiControl, glslShaderAnnotationValue::kColorPicker))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                uniformSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semantic = fGLSLShaderInstance-&gt;semantic(parameterName);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0\">MHWRender::MShaderInstance::ParameterType</a> paramType = fGLSLShaderInstance-&gt;parameterType(parameterName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// As a last ditch effort, look for an obvious parameter name</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( uniformSemantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a> &amp;&amp; !semantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &amp;&amp;</div>\n\
<div class=\"line\">        (paramType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a2f329aadf08637405a63cee5369fd28d\">MHWRender::MShaderInstance::kFloat3</a> || paramType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0af21770dc86a3877076e2d58842291ca4\">MHWRender::MShaderInstance::kFloat4</a>) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kPosition) &gt;= 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uniformSemantic = convertSpace(parameterName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa49972843e25838c681f26a4f75ca69c1\">MUniformParameter::kSemanticWorldPos</a>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kDirection) &gt;= 0 &amp;&amp;</div>\n\
<div class=\"line\">                  parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kDirection) != parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kDirectional))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uniformSemantic = convertSpace(parameterName,  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad606c99fe89502591358e64f4f7a589b\">MUniformParameter::kSemanticWorldDir</a>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kColor) &gt;= 0 ||</div>\n\
<div class=\"line\">                    parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kColour) &gt;= 0 ||</div>\n\
<div class=\"line\">                    parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kDiffuse) &gt;= 0 ||</div>\n\
<div class=\"line\">                    parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kSpecular) &gt;= 0 ||</div>\n\
<div class=\"line\">                    parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>( glslShaderAnnotationValue::kAmbient) &gt;= 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uniformSemantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efab83a5901dec4867950652df9bde9c87a\">MUniformParameter::kSemanticColor</a>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> uniformSemantic;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::configureUniforms()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fUniformParameters.setLength(0);</div>\n\
<div class=\"line\">    deleteUniformUserData();</div>\n\
<div class=\"line\">    fUIGroupNames.setLength(0);</div>\n\
<div class=\"line\">    fUIGroupParameters.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> unordedParams;</div>\n\
<div class=\"line\">    fGLSLShaderInstance-&gt;parameterList(unordedParams);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// sort parameters by UIOrder annotation</span></div>\n\
<div class=\"line\">    std::multimap&lt;int, MString&gt; orderedParams;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numParams = unordedParams.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;numParams; ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; paramName = unordedParams[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> uiOrder = fGLSLShaderInstance-&gt;annotationAsInt(paramName, glslShaderAnnotation::kUIOrder, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">            uiOrder = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        orderedParams.<a name=\"a191\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a3db31367f989449bb9b121cd734dc0df\">insert</a>( std::make_pair(uiOrder, paramName) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Does the shader want us to use the variable name as maya attribute name (instead of UI name)?</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useVariableNameAsAttributeName = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"comment\">// For now no boolean annotation available use a string annotation instead</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> useVariableNameAsAttributeNameValue = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kVariableNameAsAttributeName, opStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        useVariableNameAsAttributeName = ((STRICMP(useVariableNameAsAttributeNameValue.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), glslShaderAnnotationValue::kValueTrue)==0));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::multimap&lt;int, MString&gt;::const_iterator it = orderedParams.begin();</div>\n\
<div class=\"line\">    std::multimap&lt;int, MString&gt;::const_iterator itEnd = orderedParams.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(; it != itEnd; ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; paramName = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MUniformParameter::DataType</a> uniformDataType = convertToUniformDataType(fGLSLShaderInstance-&gt;parameterType(paramName));</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> uniformSemantic = convertToUniformSemantic(fGLSLShaderInstance-&gt;semantic(paramName).asChar());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Check if the &quot;Space&quot; annotation is defined for uniform, change semantic accordingly.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// only valid for float3/4 that can be position or direction.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0\">MHWRender::MShaderInstance::ParameterType</a> paramType = fGLSLShaderInstance-&gt;parameterType(paramName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(paramType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a2f329aadf08637405a63cee5369fd28d\">MHWRender::MShaderInstance::kFloat3</a> || paramType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0af21770dc86a3877076e2d58842291ca4\">MHWRender::MShaderInstance::kFloat4</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uniformSemantic = convertSpace(paramName, uniformSemantic);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Check for possibilities for unresolved semantics:</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( uniformSemantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efad77adc4222e9872b4688930cd6920e4c\">MUniformParameter::kSemanticUnknown</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uniformSemantic = guessUnknownSemantics(paramName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        The name of the parameter in the attribute editor defaults to the name of the variable associated with the parameter.</span></div>\n\
<div class=\"line\"><span class=\"comment\">        If there is a UIName attribute on the parameter, and the &#39;kVariableNameAsAttributeName&#39; annotation is not set,</span></div>\n\
<div class=\"line\"><span class=\"comment\">        this name will be used to define all three of the parameter short/long/nice name.</span></div>\n\
<div class=\"line\"><span class=\"comment\">        If the UIName contains spaces or other script unfriendly characters, those will be replaced by underscores in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">        short and long names used in scripting.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        Using UIName as attribute name can lead to ambiguity since UIName annotations are not required to be unique in the effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">        The MPxHardwareShader class will add numbers at the end of the short/long names as required to make them unique.</span></div>\n\
<div class=\"line\"><span class=\"comment\">        */</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uiName = fGLSLShaderInstance-&gt;uiName(paramName, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uniformName = (useVariableNameAsAttributeName || uiName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0 ? paramName : sanitizeName(uiName));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span>* uniformUserData = NULL;</div>\n\
<div class=\"line\">        <span class=\"comment\">// Since we are using the uiName as uniform name, we won&#39;t be able to access the shader parameter using the uniform name</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// save the original shader parameter name as user data of the uniform.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( uniformName != paramName || !STRICMP( fGLSLShaderInstance-&gt;parameterSemantic(paramName, opStatus).asChar(), glslShaderSemantic::kShadowMap) </div>\n\
<div class=\"line\">            ||!STRICMP( fGLSLShaderInstance-&gt;parameterSemantic(paramName, opStatus).asChar(), glslShaderSemantic::kPointLightShadowMap)) {</div>\n\
<div class=\"line\">            uniformUserData = createUniformUserData(paramName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;ParamName=&#39;%s&#39;, ParamType=&quot;</span>, paramName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> uniParam;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> validParam = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isArray = fGLSLShaderInstance-&gt;isArrayParameter(paramName);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> arraySize = 1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isArray)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            arraySize = fGLSLShaderInstance-&gt;getArraySize(paramName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (fGLSLShaderInstance-&gt;parameterType(paramName))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a94dd08feda7b2cf0ff8262312c4fcc09\">MHWRender::MShaderInstance::kInvalid</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Invalid&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a8cfc0ab572a96edfc9db7c02f0d025d7\">MHWRender::MShaderInstance::kBoolean</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Boolean&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (isArray)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;&#39;Bool arrays are not supported properly&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 1, 1, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsBool(static_cast&lt;bool*&gt;(defaultValue)[0]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0aa1acc5720dd4e85ceea5578a6cf14ae6\">MHWRender::MShaderInstance::kInteger</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Integer&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (isArray)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    printf(<span class=\"stringliteral\">&quot;&#39;Integer arrays are not supported properly&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uiFieldNames = fGLSLShaderInstance-&gt;annotationAsString(paramName, glslShaderAnnotation::kUIFieldNames, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniformDataType = <a name=\"a192\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af9dad01c655cbd183b93acbd5fcaf72d\">MUniformParameter::kTypeEnum</a>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 1, 1, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uniformDataType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af9dad01c655cbd183b93acbd5fcaf72d\">MUniformParameter::kTypeEnum</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setEnumFieldNames(uiFieldNames);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsInt(static_cast&lt;int*&gt;(defaultValue)[0]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a5686197bafb177bdc82550848416a1ad\">MHWRender::MShaderInstance::kFloat</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Float&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 1, arraySize, uniformUserData);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsFloatArray(static_cast&lt;float*&gt;(defaultValue), arraySize);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a615a014b3454583f793180280757d285\">MHWRender::MShaderInstance::kFloat2</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Float2&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 2, arraySize, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsFloatArray(static_cast&lt;float*&gt;(defaultValue), arraySize * 2);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a2f329aadf08637405a63cee5369fd28d\">MHWRender::MShaderInstance::kFloat3</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Float3&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 3, 1, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsFloatArray(static_cast&lt;float*&gt;(defaultValue),3);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0af21770dc86a3877076e2d58842291ca4\">MHWRender::MShaderInstance::kFloat4</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Float4&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 4, 1, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsFloatArray(static_cast&lt;float*&gt;(defaultValue),4);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a2242133aaee8fd15dbb632825bc4226e\">MHWRender::MShaderInstance::kFloat4x4Row</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Float4x4Row&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 4, 4, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsFloatArray(static_cast&lt;float*&gt;(defaultValue),16);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a706b60512c7f5ba8200df461b672d905\">MHWRender::MShaderInstance::kFloat4x4Col</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Float4x4Col&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 4, 4, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* defaultValue = fGLSLShaderInstance-&gt;parameterDefaultValue(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (defaultValue != NULL)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uniParam.setAsFloatArray(static_cast&lt;float*&gt;(defaultValue),16);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a0211e7902fa531fb032e5b40a4b31666\">MHWRender::MShaderInstance::kTexture1</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a9f41a2c609a9a7104e4d0c869d8fd2e7\">MHWRender::MShaderInstance::kTexture2</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a96966e9616f0f92c86a62f9ef1cf7640\">MHWRender::MShaderInstance::kTexture3</a>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0ada96c2ae4db83bf803b3e75731d574b3\">MHWRender::MShaderInstance::kTextureCube</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Texture&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                uniParam = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>(uniformName, uniformDataType, uniformSemantic, 1, 1, uniformUserData);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resourceName = fGLSLShaderInstance-&gt;resourceName(paramName, opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; resourceName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( <a name=\"a193\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#abe7742bc48c00e4bf3f7b3bbc7c468ae\">MFileObject::isAbsolutePath</a>(resourceName) )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">//if ResourceName is a full path, retain it as is</span></div>\n\
<div class=\"line\">                        uniParam.setAsString(resourceName);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#abe7742bc48c00e4bf3f7b3bbc7c468ae\">MFileObject::isAbsolutePath</a>(fEffectName) )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a name=\"_a194\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> fileObj;</div>\n\
<div class=\"line\">                        fileObj.<a name=\"a195\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#ac14aefbfe38c2711256eb8c14a3194ee\">setRawFullName</a>(fEffectName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        uniParam.setAsString(fileObj.<a name=\"a196\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a33cbf3fdfeb3486cc6f3c3d0b32ab893\">rawPath</a>() + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;/&quot;</span>) + resourceName);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        uniParam.setAsString(resourceName);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0a754585b88bea58243b903b023e1594f0\">MHWRender::MShaderInstance::kSampler</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Sampler&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> uniParam(uniformName, uniformDataType, uniformSemantic);</div>\n\
<div class=\"line\">                validParam = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;&#39;Unknown&#39;\\n&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(validParam)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            configureUniformUI(paramName, uniParam);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fUniformParameters.append(uniParam);    </div>\n\
<div class=\"line\">            <span class=\"comment\">//check if parameter is lighting param and update light info accordingly</span></div>\n\
<div class=\"line\">            updateLightInfoFromSemantic(paramName, fUniformParameters.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()-1);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setUniformParameters(fUniformParameters, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Build the UI groups</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">int</span> i = 0; i &lt; fUniformParameters.length(); ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Now that the parameters were pushed to the MPxHardwareShader,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// uniform mapping may have changed the internal names of the parameters.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Use the uniform attribute short names to build the UI group lists,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this is the names the AE will also use</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> uniformParam = fUniformParameters.getElement(i);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> uniformPlug(uniformParam.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab6d4ca450bab408a98a5803c0dbaa747\">getPlug</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uniformPlug.isNull())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a197\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> uniformAttribute(uniformPlug.attribute());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uniformAttribute.isHidden())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> parameterName = uniformParam.<a name=\"a198\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aca2cba4630391c78dcf1a828986160da\">name</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( uniformParam.<a name=\"a199\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>() != NULL ) {</div>\n\
<div class=\"line\">            parameterName = getParameterName(uniformParam.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uiGroupName = fGLSLShaderInstance-&gt;annotationAsString(parameterName, glslShaderAnnotation::kUIGroup, opStatus);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (opStatus != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// UIGroup annotation not found, try again with Object</span></div>\n\
<div class=\"line\">            uiGroupName = fGLSLShaderInstance-&gt;annotationAsString(parameterName, glslShaderAnnotation::kObject, opStatus);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(uiGroupName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> uiIndex = findInArray(fUIGroupNames, uiGroupName, <span class=\"keyword\">true</span> <span class=\"comment\">/*appendIfNotFound*/</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( fUIGroupParameters.size() &lt;= (<span class=\"keywordtype\">unsigned</span> int)uiIndex )</div>\n\
<div class=\"line\">                fUIGroupParameters.resize(uiIndex+1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uniformName = uniformAttribute.shortName();</div>\n\
<div class=\"line\">            findInArray(fUIGroupParameters[uiIndex], uniformName, <span class=\"keyword\">true</span> <span class=\"comment\">/*appendIfNotFound*/</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    updateImplicitLightParameterCache();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::configureGeometryRequirements()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fVaryingParameters.setLength(0);</div>\n\
<div class=\"line\">    fVaryingParametersUpdateId = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::list&lt;MVaryingParameter::MVaryingParameterSemantic&gt; semanticUsage;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fGeometryRequirements.clear();</div>\n\
<div class=\"line\">    fGLSLShaderInstance-&gt;requiredVertexBuffers( fGeometryRequirements );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;MString, MString, MStringSorter&gt; MapOfMString;</div>\n\
<div class=\"line\">    MapOfMString customSemantics;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> customSemanticsAnno = fGLSLShaderInstance-&gt;techniqueAnnotationAsString(glslShaderAnnotation::kCustomSemantics, opStatus);</div>\n\
<div class=\"line\">        <span class=\"comment\">// Acceptable value : &quot;Semantic1Name=NewCustomName1 Semantic2Name=NewCustomName2&quot;</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Allow multiple custom semantics to be separated by either a space, a colon or a semi-colon</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( customSemanticsAnno.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Replace all accepted separators by a colon</span></div>\n\
<div class=\"line\">            customSemanticsAnno.<a name=\"a200\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a70a9940e8b5af615f82906afb2ed0854\">substitute</a>(<span class=\"stringliteral\">&quot; &quot;</span>, <span class=\"stringliteral\">&quot;:&quot;</span>);</div>\n\
<div class=\"line\">            customSemanticsAnno.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a70a9940e8b5af615f82906afb2ed0854\">substitute</a>(<span class=\"stringliteral\">&quot;;&quot;</span>, <span class=\"stringliteral\">&quot;:&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> allCustomSemantics;</div>\n\
<div class=\"line\">            customSemanticsAnno.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;:&#39;</span>, allCustomSemantics);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; allCustomSemantics.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; oneCustomSemantic = allCustomSemantics[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> oneCustomSemanticValues;</div>\n\
<div class=\"line\">                oneCustomSemantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;=&#39;</span>, oneCustomSemanticValues);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( oneCustomSemanticValues.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 2 ) {</div>\n\
<div class=\"line\">                    customSemantics[oneCustomSemanticValues[0]] = oneCustomSemanticValues[1];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// No set/update available in MVertexBufferDescriptorList :</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// go from top and push a new descriptor while removing the top</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> nbReq = fGeometryRequirements.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; nbReq; ++i )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a201\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> vbDesc;</div>\n\
<div class=\"line\">        fGeometryRequirements.getDescriptor(0, vbDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semanticName = vbDesc.<a name=\"a202\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#aec39ee3496166457d1ccdf73c8d1a3b2\">semanticName</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> dimension = vbDesc.<a name=\"a203\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> useCustomSemantic = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        MapOfMString::const_iterator it = customSemantics.find(semanticName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( it != customSemantics.end() ) {</div>\n\
<div class=\"line\">            semanticName = it-&gt;second;</div>\n\
<div class=\"line\">            useCustomSemantic = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3\">MVaryingParameter::MVaryingParameterType</a> dataType = <a name=\"a204\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3af8c5f748892ec74b32719c8fba7767e1\">MVaryingParameter::kInvalidParameter</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>( vbDesc.<a name=\"a205\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a206\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a207\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3a5686197bafb177bdc82550848416a1ad\">MVaryingParameter::kFloat</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a208\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6acd70f5d2b5e8c1bb8e83b0482a33e518\">MHWRender::MGeometry::kDouble</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a209\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3acd70f5d2b5e8c1bb8e83b0482a33e518\">MVaryingParameter::kDouble</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a210\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a589716b974587a5b575bf02d0b74245a\">MHWRender::MGeometry::kChar</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a211\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3a589716b974587a5b575bf02d0b74245a\">MVaryingParameter::kChar</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a212\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a771a88748799bba09da625ffee5c6945\">MHWRender::MGeometry::kUnsignedChar</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a213\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3a771a88748799bba09da625ffee5c6945\">MVaryingParameter::kUnsignedChar</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a214\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6acc48eb3dce9079e1af81af4db6506343\">MHWRender::MGeometry::kInt16</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a215\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3acc48eb3dce9079e1af81af4db6506343\">MVaryingParameter::kInt16</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a216\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a3d97c6fcb525dc79fed35f39fd7bab76\">MHWRender::MGeometry::kUnsignedInt16</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a217\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3a3d97c6fcb525dc79fed35f39fd7bab76\">MVaryingParameter::kUnsignedInt16</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a218\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae3e576e62ae36818ff6edced2065c36e\">MHWRender::MGeometry::kInt32</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a219\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3ae3e576e62ae36818ff6edced2065c36e\">MVaryingParameter::kInt32</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a220\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>:</div>\n\
<div class=\"line\">                dataType = <a name=\"a221\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a4ea19e67748f44a8d29cf34474b0a7d3aa93f90f58b3077bdbedeb9506e0143fd\">MVaryingParameter::kUnsignedInt32</a>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321\">MVaryingParameter::MVaryingParameterSemantic</a> semantic = <a name=\"a222\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321adfd9c161a2e178f85cb4ca9d6debdb8f\">MVaryingParameter::kNoSemantic</a>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uiName;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>( vbDesc.<a name=\"a223\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a224\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>:</div>\n\
<div class=\"line\">                semantic = <a name=\"a225\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321aa20581584e5f9447cb96afb4f2e10703\">MVaryingParameter::kPosition</a>;</div>\n\
<div class=\"line\">                uiName = glslShaderSemantic::kPosition;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a226\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a227e8416235cd3b43077ca91504a463f\">MHWRender::MGeometry::kNormal</a>:</div>\n\
<div class=\"line\">                semantic = <a name=\"a227\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321a227e8416235cd3b43077ca91504a463f\">MVaryingParameter::kNormal</a>;</div>\n\
<div class=\"line\">                uiName = glslShaderSemantic::kNormal;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a228\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MHWRender::MGeometry::kTexture</a>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( dimension == 2 || useCustomSemantic )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    semantic = <a name=\"a229\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321a45b7096916b12a78e94c62bba9d50739\">MVaryingParameter::kTexCoord</a>;</div>\n\
<div class=\"line\">                    uiName = glslShaderSemantic::kTexCoord;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Consider texcoord stream with dimension &gt; 2 to be color stream</span></div>\n\
<div class=\"line\">                    semantic = <a name=\"a230\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321afc0133ebaa6c307b2388ecf5f72f6fdf\">MVaryingParameter::kColor</a>;</div>\n\
<div class=\"line\">                    uiName = glslShaderSemantic::kColor;</div>\n\
<div class=\"line\">                    semanticName = <span class=\"stringliteral\">&quot;colorset&quot;</span>;  <span class=\"comment\">// Tells the VB (which is still a TextureField) to be considered as a ColorField</span></div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a231\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MGeometry::kColor</a>:</div>\n\
<div class=\"line\">                semantic = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321afc0133ebaa6c307b2388ecf5f72f6fdf\">MVaryingParameter::kColor</a>;</div>\n\
<div class=\"line\">                uiName = glslShaderSemantic::kColor;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a232\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4ab90d6591156ad2cb2eea2cb5b75e77e0\">MHWRender::MGeometry::kTangent</a>:</div>\n\
<div class=\"line\">                semantic = <a name=\"a233\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321ab90d6591156ad2cb2eea2cb5b75e77e0\">MVaryingParameter::kTangent</a>;</div>\n\
<div class=\"line\">                uiName = glslShaderSemantic::kTangent;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a234\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4af6ed1c5faf6f0993971e8043ffa1a111\">MHWRender::MGeometry::kBitangent</a>:</div>\n\
<div class=\"line\">                semantic = <a name=\"a235\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321a7dd396b8135e53c57a88a0d466884e39\">MVaryingParameter::kBinormal</a>;</div>\n\
<div class=\"line\">                uiName = glslShaderSemantic::kBinormal;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update uiName and set sourceSet for color and texture</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sourceSet;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( semantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321afc0133ebaa6c307b2388ecf5f72f6fdf\">MVaryingParameter::kColor</a> || semantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321a45b7096916b12a78e94c62bba9d50739\">MVaryingParameter::kTexCoord</a> ) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> usageCount = (<span class=\"keywordtype\">unsigned</span> int) std::count(semanticUsage.begin(), semanticUsage.end(), semantic);</div>\n\
<div class=\"line\">            uiName += usageCount;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( semantic == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321a45b7096916b12a78e94c62bba9d50739\">MVaryingParameter::kTexCoord</a> ) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// default Maya&#39;s uv set names are : &#39;map1&#39;, &#39;map2&#39;, &#39;map3&#39; ...</span></div>\n\
<div class=\"line\">                sourceSet = <span class=\"stringliteral\">&quot;map&quot;</span>;</div>\n\
<div class=\"line\">                sourceSet += (usageCount+1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// default Maya&#39;s color set names are : &#39;colorSet&#39;, &#39;colorSet1&#39;, &#39;colorSet2&#39; ...</span></div>\n\
<div class=\"line\">                sourceSet = <span class=\"stringliteral\">&quot;colorSet&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( usageCount &gt; 0 ) {</div>\n\
<div class=\"line\">                    sourceSet += usageCount;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            semanticUsage.push_back( semantic );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a236\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html\">MVaryingParameter</a> varying(</div>\n\
<div class=\"line\">            uiName,</div>\n\
<div class=\"line\">            dataType,</div>\n\
<div class=\"line\">            dimension, <span class=\"comment\">//minDimension,</span></div>\n\
<div class=\"line\">            dimension, <span class=\"comment\">//maxDimension,</span></div>\n\
<div class=\"line\">            dimension,</div>\n\
<div class=\"line\">            semantic,</div>\n\
<div class=\"line\">            sourceSet,</div>\n\
<div class=\"line\">            <span class=\"keyword\">false</span>, <span class=\"comment\">// invertTexCoords</span></div>\n\
<div class=\"line\">            semanticName);</div>\n\
<div class=\"line\">        fVaryingParameters.append(varying);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set desired source set as name of the buffer descriptor</span></div>\n\
<div class=\"line\">        vbDesc.<a name=\"a237\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#a0403f81bc214e6a63f2028a428338433\">setName</a>(sourceSet);</div>\n\
<div class=\"line\">        <span class=\"comment\">// Update semantic name - may have changed for TexCoord streams used for Color</span></div>\n\
<div class=\"line\">        vbDesc.<a name=\"a238\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#a1d51bb626fca50378067f40d1d1ce89e\">setSemanticName</a>(semanticName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove old and append updated descriptor</span></div>\n\
<div class=\"line\">        fGeometryRequirements.removeAt(0);</div>\n\
<div class=\"line\">        fGeometryRequirements.append(vbDesc);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setVaryingParameters(fVaryingParameters, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::hasUpdatedVaryingInput()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Test if varying parameters have changed</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> varyingUpdateId = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; fVaryingParameters.length(); ++i) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html\">MVaryingParameter</a> varying = fVaryingParameters.<a name=\"a239\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a40cde1a792fb9a978d3a3a68414fb865\">getElement</a>(i);</div>\n\
<div class=\"line\">        varyingUpdateId += varying.<a name=\"a240\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#ac38803dedbdc3cbb9862e7f3577b34b4\">getUpdateId</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (fVaryingParametersUpdateId != varyingUpdateId);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::updateGeometryRequirements()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> varyingUpdateId = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// No set/update available in MVertexBufferDescriptorList :</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// go from top and push a new descriptor while removing the top</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> nbReq = fGeometryRequirements.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; nbReq; ++i )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> vbDesc;</div>\n\
<div class=\"line\">        fGeometryRequirements.getDescriptor(0, vbDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html\">MVaryingParameter</a> varying = fVaryingParameters.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a40cde1a792fb9a978d3a3a68414fb865\">getElement</a>(i);</div>\n\
<div class=\"line\">        varyingUpdateId += varying.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#ac38803dedbdc3cbb9862e7f3577b34b4\">getUpdateId</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update source set</span></div>\n\
<div class=\"line\">        vbDesc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#a0403f81bc214e6a63f2028a428338433\">setName</a>(varying.<a name=\"a241\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a45e2132632639698f9c4f668be933a70\">getSourceSetName</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Remove old and append updated descriptor</span></div>\n\
<div class=\"line\">        fGeometryRequirements.removeAt(0);</div>\n\
<div class=\"line\">        fGeometryRequirements.append(vbDesc);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fVaryingParametersUpdateId = varyingUpdateId;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a242\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html\">MRenderProfile</a>&amp; GLSLShaderNode::profile()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html\">MRenderProfile</a> sProfile;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(sProfile.<a name=\"a243\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html#af6c112eae09921cee69dea8d0d4c6251\">numberOfRenderers</a>() == 0)</div>\n\
<div class=\"line\">        sProfile.<a name=\"a244\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html#aa4a8e8280aca6457ddb2961cedb4e228\">addRenderer</a>(<a name=\"a245\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html#a7f20c37a8a7dba81b35df0f8d841129bae12eb740b1bc240732c93a4cebef3935\">MRenderProfile::kMayaOpenGL</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sProfile;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a246\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* GLSLShaderNode::loadTexture(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a>&amp; uniform)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> textureName, layerName;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> alphaChannelIdx;</div>\n\
<div class=\"line\">    getTextureDesc(context, uniform, textureName, layerName, alphaChannelIdx);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> parameterName = uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aca2cba4630391c78dcf1a828986160da\">name</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>() != NULL ) {</div>\n\
<div class=\"line\">        parameterName = getParameterName(uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> mipmaplevels = fTechniqueTextureMipmapLevels;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> readMipMapLevels = fGLSLShaderInstance-&gt;annotationAsInt(parameterName, glslShaderAnnotation::kMipmaplevels, opStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mipmaplevels = readMipMapLevels;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// To have optimal performance for texture creation/load, insert a mipmaplevels value different than 0.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The value can be acquired by checking uniform annotation in shader.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> loadTexture(textureName, layerName, alphaChannelIdx, mipmaplevels);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* GLSLShaderNode::loadTexture(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; textureName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; layerName, <span class=\"keywordtype\">int</span> alphaChannelIdx, <span class=\"keywordtype\">int</span> mipmapLevels)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(textureName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(theRenderer == NULL)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* txtManager = theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(txtManager == NULL)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check extension of texture.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for HDR EXR files, we tell Maya to skip using exposeControl or it would normalize our RGB values via linear mapping</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We don&#39;t want that for things like Vector Displacement Maps.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// In the future, other 32bit images can be added, such as TIF, but those currently do not load properly in ATIL and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// therefor we have to force them to use linear exposure control for them to load at all.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> extension;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> idx = textureName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(L<span class=\"charliteral\">&#39;.&#39;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(idx &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        extension = textureName.<a name=\"a247\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>( idx+1, textureName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()-1 );</div>\n\
<div class=\"line\">        extension = extension.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a56fd78fe1cd1bc285cc8c336ed977d7e\">toLowerCase</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isEXR = (extension == <span class=\"stringliteral\">&quot;exr&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* texture = txtManager-&gt;<a name=\"a248\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a04aa3cfef217948abc8edd0f19565f95\">acquireTexture</a>( textureName, <span class=\"stringliteral\">&quot;&quot;</span>, mipmapLevels, !isEXR, layerName, alphaChannelIdx );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_SHADER</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(texture == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;-- Texture %s not found.\\n&quot;</span>, textureName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> texture;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::updateParameters(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, ERenderType renderType)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!fGLSLShaderInstance)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* txtManager = theRenderer ? theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>() : NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the render frame stamp did not change, it&#39;s likely that this shader is used by multiple objects,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and is called more than once in a single frame render.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// No need to update the light parameters (again) as it&#39;s quite costly</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updateLightParameters = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(renderType == RENDER_SCENE)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// We are rendering the scene</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a249\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a> &amp; passCtx = context.<a name=\"a250\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; passSem = passCtx.<a name=\"a251\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MUint64 currentFrameStamp = context.<a name=\"a252\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ac9d36cff81e99e1fb66d9e162b97ecfb\">getFrameStamp</a>();</div>\n\
<div class=\"line\">        updateLightParameters = (currentFrameStamp != fLastFrameStamp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (updateLightParameters)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Ignore certain passes since we don&#39;t need lighting information for these</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (passSem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1 &amp;&amp; </div>\n\
<div class=\"line\">                (passSem[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a728fc00f0764227a6f345c089058c998\">MHWRender::MPassContext::kSelectionPassSemantic</a> ||</div>\n\
<div class=\"line\">                passSem[0] == <a name=\"a253\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#ab0d481f367db0fa41c2b3a1aeb2074c8\">MHWRender::MPassContext::kShadowPassSemantic</a> ||</div>\n\
<div class=\"line\">                passSem[0] == <a name=\"a254\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9c065e94d2a953c1d1fc069c957ab861\">MHWRender::MPassContext::kPointLightShadowPassSemantic</a>))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                updateLightParameters = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fLastFrameStamp = currentFrameStamp;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(renderType == RENDER_SWATCH)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// We are rendering the swatch using current effect</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Reset the renderId, to be sure that the next updateParameters() will go through</span></div>\n\
<div class=\"line\">        fLastFrameStamp = (MUint64)-1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// We are rendering the proxy swatch or the uv texture (temporary effect)</span></div>\n\
<div class=\"line\">        fLastFrameStamp = (MUint64)-1;</div>\n\
<div class=\"line\">        updateLightParameters = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// We need to update the texture when rendering the swatch or uv texture using a custom effect</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//updateTextures = true;</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updateTransparencyTextures = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( renderType == RENDER_SCENE &amp;&amp; techniqueIsTransparent() &amp;&amp; techniqueSupportsAdvancedTransparency())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#a26785cadef1a01dd4c02c67901a11dd8\">MHWRender::MFrameContext::TransparencyAlgorithm</a> transAlg = context.<a name=\"a255\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#a5246f5d3ae4c7f8c7d785502a720f07c\">getTransparencyAlgorithm</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (transAlg == <a name=\"a256\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#a26785cadef1a01dd4c02c67901a11dd8aaa978d4c34ec301d5213210b7b81bf30\">MHWRender::MFrameContext::kDepthPeeling</a> || transAlg == <a name=\"a257\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#a26785cadef1a01dd4c02c67901a11dd8a6ae420ddf8bd05ffe6173339dcdc78e2\">MHWRender::MFrameContext::kWeightedAverage</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a> &amp; passCtx = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; passSemantics = passCtx.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; passSemantics.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &amp;&amp; !updateTransparencyTextures; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; semantic = passSemantics[i];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( semantic == <a name=\"a258\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9160078f7d16515ce7b689a7e0356c90\">MHWRender::MPassContext::kTransparentPeelSemantic</a> ||</div>\n\
<div class=\"line\">                    semantic == <a name=\"a259\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#ad9f3e908d48e77144e99c804074485b1\">MHWRender::MPassContext::kTransparentPeelAndAvgSemantic</a> ||</div>\n\
<div class=\"line\">                    semantic == <a name=\"a260\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a70c9d0658fe61e3154bb60cb40daf2a2\">MHWRender::MPassContext::kTransparentWeightedAvgSemantic</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    updateTransparencyTextures = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::set&lt;int&gt; lightParametersToUpdate;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(updateLightParameters)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        getLightParametersToUpdate(lightParametersToUpdate, renderType);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(updateLightParameters)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Update using draw context properties if light is explicitely connected.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Must be done after we have reset lights to their previous values as</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// explicit light connections overrides values stored in shader:</span></div>\n\
<div class=\"line\">        updateExplicitLightConnections(context, renderType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        updateImplicitLightConnections(context, renderType);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0;i &lt;fUniformParameters.length(); ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> currentUniform = fUniformParameters.getElement(i);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> parameterName = currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aca2cba4630391c78dcf1a828986160da\">name</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>() != NULL ) {</div>\n\
<div class=\"line\">            parameterName = getParameterName(currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( currentUniform.<a name=\"a261\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a9d4d257e5bb7e85eb9fdeca499dc9361\">hasChanged</a>(context) || lightParametersToUpdate.count(i) || (updateTransparencyTextures &amp;&amp; currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a37357b066d4c628b1fae2f1ee08b2b12\">isATexture</a>()) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (currentUniform.<a name=\"a262\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ac52395416dfb965501c67061d7198c1c\">type</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae59341821f9cdc0608d1f8775fb3eb7a\">MUniformParameter::kTypeFloat</a>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (currentUniform.<a name=\"a263\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab2fb525ee83e7211d9cce975f9224047\">semantic</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efae3e697f1682b81aab2f7b1e205ece4df\">MUniformParameter::kSemanticViewportPixelSize</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> width, height;</div>\n\
<div class=\"line\">                    context.<a name=\"a264\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a84f8e099a466341238b4b4e40cde4167\">getRenderTargetSize</a>(width, height);</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> data[] = { (float)width, (<span class=\"keywordtype\">float</span>)height };</div>\n\
<div class=\"line\">                    fGLSLShaderInstance-&gt;setParameter(parameterName, data);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab2fb525ee83e7211d9cce975f9224047\">semantic</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efaea6ef2e23bb54f3a8cbe2ee20f806b81\">MUniformParameter::kSemanticNearClipPlane</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">                    <a name=\"_a265\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> tuple = context.<a name=\"a266\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a0dfe2293173b7b5a7da2e1f903ee18cb\">getTuple</a>(MFrameContext::kViewNearClipValue, &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> data = status ? tuple[0] : 0.1f ;</div>\n\
<div class=\"line\">                    fGLSLShaderInstance-&gt;setParameter(parameterName, data);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab2fb525ee83e7211d9cce975f9224047\">semantic</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa4cc42ecfffec0584e050a06153497a8b\">MUniformParameter::kSemanticFarClipPlane</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> tuple = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a0dfe2293173b7b5a7da2e1f903ee18cb\">getTuple</a>(MFrameContext::kViewFarClipValue, &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> data = status ? tuple[0] : 10000.0f ;</div>\n\
<div class=\"line\">                    fGLSLShaderInstance-&gt;setParameter(parameterName, data);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* data = currentUniform.<a name=\"a267\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#adeb3f26c0cb456d9028fb6e6d71cc51a\">getAsFloatArray</a>(context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> isArray = fGLSLShaderInstance-&gt;isArrayParameter(parameterName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (isArray)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> arraySize = fGLSLShaderInstance-&gt;getArraySize(parameterName);</div>\n\
<div class=\"line\">                        fGLSLShaderInstance-&gt;setArrayParameter(parameterName, data, arraySize);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (currentUniform.<a name=\"a268\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ac7fba35931cc9a520837b0a752352e16\">numElements</a>() == 1)</div>\n\
<div class=\"line\">                            fGLSLShaderInstance-&gt;setParameter(parameterName, data[0]);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            fGLSLShaderInstance-&gt;setParameter(parameterName, data);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6ab6e6fe667e0718b58ca5f6ac419c7cf7\">MUniformParameter::kTypeInt</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6af9dad01c655cbd183b93acbd5fcaf72d\">MUniformParameter::kTypeEnum</a>:</div>\n\
<div class=\"line\">                fGLSLShaderInstance-&gt;setParameter(parameterName, currentUniform.<a name=\"a269\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ac4394d7d6b3a9352b2aa83b77b3cac8e\">getAsInt</a>(context));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a52b0938c028df56b62bc9e9080475e7f\">MUniformParameter::kTypeBool</a>:</div>\n\
<div class=\"line\">                fGLSLShaderInstance-&gt;setParameter(parameterName, currentUniform.<a name=\"a270\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a528943f9cbfb601fc64e343a3e7072ec\">getAsBool</a>(context));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a00d1e209478ab74cbadfbe8435e32e81\">MUniformParameter::kTypeString</a>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a37357b066d4c628b1fae2f1ee08b2b12\">isATexture</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef\">MUniformParameter::DataSemantic</a> sem = currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab2fb525ee83e7211d9cce975f9224047\">semantic</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (sem == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa812025dab4ab6e8be46ea315d6a84714\">MUniformParameter::kSemanticTranspDepthTexture</a>) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(updateTransparencyTextures) {</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a> *tex = context.<a name=\"a271\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ae73c53b8f05ae3a36dfb3716a7b67f7a\">getInternalTexture</a>(<a name=\"a272\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a609137988e7f98d815cb896e0b9f5687a595431c5b1fde4070f7044d413776959\">MHWRender::MDrawContext::kDepthPeelingTranspDepthTexture</a>);</div>\n\
<div class=\"line\">                            <a name=\"_a273\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> assignment;</div>\n\
<div class=\"line\">                            assignment.<a name=\"a274\"></a>texture = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a> *)tex;</div>\n\
<div class=\"line\">                            fGLSLShaderInstance-&gt;setParameter(parameterName, assignment);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sem == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234efa539b874523c9051e0d0b5c56e0864bd8\">MUniformParameter::kSemanticOpaqueDepthTexture</a>) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(updateTransparencyTextures) {</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a> *tex = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ae73c53b8f05ae3a36dfb3716a7b67f7a\">getInternalTexture</a>(<a name=\"a275\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a609137988e7f98d815cb896e0b9f5687aa01e0dd3ae5219a692110a1f48c48c5d\">MHWRender::MDrawContext::kDepthPeelingOpaqueDepthTexture</a>);</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> assignment;</div>\n\
<div class=\"line\">                            assignment.texture = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a> *)tex;</div>\n\
<div class=\"line\">                            fGLSLShaderInstance-&gt;setParameter(parameterName, assignment);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a9d4d257e5bb7e85eb9fdeca499dc9361\">hasChanged</a>(context)) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* texture = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">bool</span> releaseTexture = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>() != NULL) {</div>\n\
<div class=\"line\">                            texture = getTexture(currentUniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aabc6dea98709831626d182f1bce0c69a\">userData</a>());</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (!texture) {</div>\n\
<div class=\"line\">                            texture = loadTexture(context, currentUniform);</div>\n\
<div class=\"line\">                            releaseTexture = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> assignment;</div>\n\
<div class=\"line\">                        assignment.texture = texture;</div>\n\
<div class=\"line\">                        fGLSLShaderInstance-&gt;setParameter(parameterName, assignment);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (releaseTexture &amp;&amp; txtManager &amp;&amp; texture) {</div>\n\
<div class=\"line\">                            txtManager-&gt;<a name=\"a276\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(texture);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::updateOverrideNonMaterialItemParameters(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a name=\"_a277\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* item, RenderItemDesc&amp; renderItemDesc)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!fGLSLShaderInstance)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!item || item-&gt;<a name=\"a278\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a3e185948897bb90736a90f5b5cf04011\">type</a>() != <a name=\"a279\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a688a4360e982358b90610f58d4eef49ea1fcf574a73eba1a959c51838083573e4\">MHWRender::MRenderItem::OverrideNonMaterialItem</a>)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    renderItemDesc.isOverrideNonMaterialItem = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> size;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> hasValidDefaultColor = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> defaultColorParameter(<span class=\"stringliteral\">&quot;defaultColor&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* defaultColor = item-&gt;<a name=\"a280\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a70a11ae313e27dea9015dbf7baf58428\">getShaderFloatArrayParameter</a>(defaultColorParameter, size);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(defaultColor &amp;&amp; size == 4) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> solidColorUniform(<span class=\"stringliteral\">&quot;gsSolidColor&quot;</span>);</div>\n\
<div class=\"line\">            fGLSLShaderInstance-&gt;setParameter(solidColorUniform, defaultColor);</div>\n\
<div class=\"line\">            hasValidDefaultColor = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> validSolidColorUniform(<span class=\"stringliteral\">&quot;gsValidSolidColor&quot;</span>);</div>\n\
<div class=\"line\">            fGLSLShaderInstance-&gt;setParameter(validSolidColorUniform, hasValidDefaultColor);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MHWRender::MGeometry::Primitive</a> primitive = item-&gt;<a name=\"a281\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a0005764259795847274dba4c66e3661b\">primitive</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( primitive == <a name=\"a282\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea9808e481c6346dfc333afb4c52890ac9\">MHWRender::MGeometry::kLines</a> || primitive == <a name=\"a283\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea505d8b3b6fdcadeb908f49f661e66957\">MHWRender::MGeometry::kLineStrip</a> ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> lineWidthParameter(<span class=\"stringliteral\">&quot;lineWidth&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* lineWidth = item-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a70a11ae313e27dea9015dbf7baf58428\">getShaderFloatArrayParameter</a>(lineWidthParameter, size);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(lineWidth &amp;&amp; size == 2 &amp;&amp; lineWidth[0] &gt; 1.f &amp;&amp; lineWidth[1] &gt; 1.f) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fatLineWidthUniform(<span class=\"stringliteral\">&quot;gsFatLineWidth&quot;</span>);</div>\n\
<div class=\"line\">            fGLSLShaderInstance-&gt;setParameter(fatLineWidthUniform, lineWidth);</div>\n\
<div class=\"line\">            renderItemDesc.isFatLine = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( primitive == <a name=\"a284\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea57a311fc6dd7498f2339ab45af414377\">MHWRender::MGeometry::kPoints</a> ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pointSizeParameter(<span class=\"stringliteral\">&quot;pointSize&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* pointSize = item-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a70a11ae313e27dea9015dbf7baf58428\">getShaderFloatArrayParameter</a>(pointSizeParameter, size);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(pointSize &amp;&amp; size == 2 &amp;&amp; pointSize[0] &gt; 1.f &amp;&amp; pointSize[1] &gt; 1.f) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fatPointSizeUniform(<span class=\"stringliteral\">&quot;gsFatPointSize&quot;</span>);</div>\n\
<div class=\"line\">            fGLSLShaderInstance-&gt;setParameter(fatPointSizeUniform, pointSize);</div>\n\
<div class=\"line\">            renderItemDesc.isFatPoint = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fGLSLShaderInstance-&gt;updateParameters(context);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::getExternalContent(<a name=\"_a285\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html\">MExternalContentInfoTable</a>&amp; table)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    addExternalContentForFileAttr(table, sShader);</div>\n\
<div class=\"line\">    <a name=\"a286\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#abfc494661ea0f7f957a9e437cebb2642\">MPxHardwareShader::getExternalContent</a>(table);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::setExternalContent(<span class=\"keyword\">const</span> <a name=\"_a287\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html\">MExternalContentLocationTable</a>&amp; table)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    setExternalContentForFileAttr(sShader, table);</div>\n\
<div class=\"line\">    <a name=\"a288\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a389fc88c7e5236aa2b9980a1b452cc49\">MPxHardwareShader::setExternalContent</a>(table);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> GLSLShaderNode::renderSwatchImage(<a name=\"_a289\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> &amp; image)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//TODO: continue developping to support lighting, ogsfx, cgfx and fx</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fEffectLoaded)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Let the VP2 renderer do the work for us:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a290\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// TODO: All things swatch related like disabling displacement and setting up swatch lighting</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Override this method to support texture display in the UV texture editor.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> GLSLShaderNode::getAvailableImages( <span class=\"keyword\">const</span> <a name=\"_a291\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_shader_context.html\">MPxHardwareShader::ShaderContext</a> &amp;context,<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;uvSetName,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;imageNames )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Locate the varying parameters whose source is &#39;uvSetName&#39;</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> uvParams;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>      uvLocalName = uvSetName==<span class=\"stringliteral\">&quot;&quot;</span> ? <span class=\"stringliteral\">&quot;map1&quot;</span> : uvSetName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nVarying = fVaryingParameters.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; nVarying; i++ ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html\">MVaryingParameter</a> elem = fVaryingParameters.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a40cde1a792fb9a978d3a3a68414fb865\">getElement</a>(i);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( elem.<a name=\"a292\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#ad72ff2b3fb20052e4a2455dad5c10682\">getSourceType</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#afb0ef1fa13fbda77e55c3b59adcae321a45b7096916b12a78e94c62bba9d50739\">MVaryingParameter::kTexCoord</a> &amp;&amp; elem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a45e2132632639698f9c4f668be933a70\">getSourceSetName</a>() == uvLocalName ) {</div>\n\
<div class=\"line\">            uvParams.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( elem.<a name=\"a293\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a2e8d4c38a60806df8c2ffd6d09e70b96\">name</a>() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Determine the default texture.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> defaultTex;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( uvParams.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0 ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Only process the first entry of this UV set (if multiple exist).</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// There can only be one default, so we&#39;ll only consider the default</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// of the first varying input of this UV set.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depFn( thisMObject() );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName( uvParams[0] );</div>\n\
<div class=\"line\">        attrName += <span class=\"stringliteral\">&quot;_DefaultTexture&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> defaultTexPlug = depFn.findPlug( attrName , <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !defaultTexPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() ) {</div>\n\
<div class=\"line\">            defaultTexPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( defaultTex );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Locate any texture UVLinks that point to these uvParams and record</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// those textures.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If no UVLinks found, display all 2D textures.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    std::multimap&lt;int, MString&gt; sortedTextures;</div>\n\
<div class=\"line\">    std::vector&lt;MString&gt; unsortedTextures;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; fUniformParameters.length(); i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> uniform = fUniformParameters.getElement(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ac52395416dfb965501c67061d7198c1c\">type</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a7d3972f1f1ee99452d3c715b157b5cad\">MUniformParameter::kType2DTexture</a> )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Skip items which are not UI visible:</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> uniformPlug(uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab6d4ca450bab408a98a5803c0dbaa747\">getPlug</a>());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uniformPlug.isNull())</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> uniformAttribute(uniformPlug.attribute());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (uniformAttribute.isHidden())</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> uvEditorOrder = fGLSLShaderInstance-&gt;annotationAsInt(uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aca2cba4630391c78dcf1a828986160da\">name</a>(), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;UVEditorOrder&quot;</span>), opStatus);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">                    sortedTextures.insert(std::pair&lt;int, MString&gt;(uvEditorOrder, uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aca2cba4630391c78dcf1a828986160da\">name</a>()));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    unsortedTextures.push_back(uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aca2cba4630391c78dcf1a828986160da\">name</a>());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// First copy items that are ordered:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (std::multimap&lt;int, MString&gt;::iterator itSorted = sortedTextures.begin();</div>\n\
<div class=\"line\">         itSorted != sortedTextures.end();</div>\n\
<div class=\"line\">         ++itSorted)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;elemName(itSorted-&gt;second);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( elemName == defaultTex ) {</div>\n\
<div class=\"line\">            imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a3db31367f989449bb9b121cd734dc0df\">insert</a>( elemName, 0 );</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( elemName );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Then append unordered items:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (std::vector&lt;MString&gt;::iterator itOther = unsortedTextures.begin();</div>\n\
<div class=\"line\">         itOther != unsortedTextures.end();</div>\n\
<div class=\"line\">         ++itOther)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;elemName(*itOther);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( elemName == defaultTex ) {</div>\n\
<div class=\"line\">            imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a3db31367f989449bb9b121cd734dc0df\">insert</a>( elemName, 0 );</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( elemName );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (imageNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Renders the specified texture (imageName) to the UV editor in viewport 2.0.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> GLSLShaderNode::renderImage( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_shader_context.html\">MPxHardwareShader::ShaderContext</a>&amp; shaderContext, <a name=\"_a294\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html\">MHWRender::MUIDrawManager</a>&amp; uiDrawManager, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; imageName, floatRegion region, <span class=\"keyword\">const</span> <a name=\"_a295\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_render_parameters.html\">MPxHardwareShader::RenderParameters</a>&amp; parameters, <span class=\"keywordtype\">int</span>&amp; imageWidth, <span class=\"keywordtype\">int</span>&amp; imageHeight )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get device</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!theRenderer)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a296\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> imageParam;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; fUniformParameters.length(); i++ ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> elem = fUniformParameters.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter.html#a40cde1a792fb9a978d3a3a68414fb865\">getElement</a>(i);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( elem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#a37357b066d4c628b1fae2f1ee08b2b12\">isATexture</a>() &amp;&amp; elem.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#aca2cba4630391c78dcf1a828986160da\">name</a>() == imageName ) { <span class=\"comment\">// Check for isATexture, as multiple parameters can have the same UI name.</span></div>\n\
<div class=\"line\">            imageParam = elem;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Only supports 2D textures.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( imageParam.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ac52395416dfb965501c67061d7198c1c\">type</a>() != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ad8ed01ff3ff33333d8e19db4d2818bb6a7d3972f1f1ee99452d3c715b157b5cad\">MUniformParameter::kType2DTexture</a> )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> *context = <a name=\"a297\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#ab9589288e0f14cffca1b6da7d262631d\">MHWRender::MRenderUtilities::acquireUVTextureDrawContext</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!context) <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* texture = loadTexture(*context, imageParam);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(texture == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a5222892109760efc845e37469b0f6cb4\">MHWRender::MRenderUtilities::releaseDrawContext</a>( context );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a598e4c5d4c234c1bf09367d64487519c\">MStatus::kNotImplemented</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get image dimension</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a298\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html\">MHWRender::MTextureDescription</a> desc;</div>\n\
<div class=\"line\">        texture-&gt;<a name=\"a299\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html#ad1b6f25f4fb913a233b1c2bff46a62a1\">textureDescription</a>(desc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        imageWidth  = (int)desc.<a name=\"a300\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#a2582291699b63f6ddc938c371b54344e\">fWidth</a>;</div>\n\
<div class=\"line\">        imageHeight = (<span class=\"keywordtype\">int</span>)desc.<a name=\"a301\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_description.html#aa3b84951e55674788c9ae0f404a8ee17\">fHeight</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Early return, this is just a call to get the size of the texture (&quot;Use image ratio&quot; is on)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(region[0][0] == 0 &amp;&amp; region[0][1] == 0 &amp;&amp; region[1][0] == 0 &amp;&amp; region[1][1] == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a5222892109760efc845e37469b0f6cb4\">MHWRender::MRenderUtilities::releaseDrawContext</a>( context );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render texture on quad</span></div>\n\
<div class=\"line\">    <a name=\"_a302\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a> positions;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html\">MPointArray</a>&amp; texcoords = positions;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tri #0</span></div>\n\
<div class=\"line\">    positions.<a name=\"a303\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[0][0], region[0][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[1][0], region[0][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[1][0], region[1][1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Tri #1</span></div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[0][0], region[0][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[1][0], region[1][1]);</div>\n\
<div class=\"line\">    positions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point_array.html#abe5a9fe36b4651af38a4a26c85f46e1a\">append</a>(region[0][0], region[1][1]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a304\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a9baede3e37abe9551e50a8c6be65ec4d\">setColor</a>( parameters.<a name=\"a305\"></a>baseColor );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a306\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a1a67ff02e590a228a6ccc168c4c44d00\">setTexture</a>( texture );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a307\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#af740bfef414d18e34661378f7f4bfb91\">setTextureSampler</a>( parameters.<a name=\"a308\"></a>unfiltered ? <a name=\"a309\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac4b92e6b8c820ded95490092f8bfff74acfbcff8a89a15e685607e83819784d80\">MHWRender::MSamplerState::kMinMagMipLinear</a> : <a name=\"a310\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac4b92e6b8c820ded95490092f8bfff74a52e14aff9dd4572590cdbfe29c0b79a9\">MHWRender::MSamplerState::kMinMagMipPoint</a>, <a name=\"a311\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html#ac06d679b414bf6ad84118e6e9712fd58a3f5d4a87f8f641542cda0389c3291985\">MHWRender::MSamplerState::kTexWrap</a> );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a312\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a0a8ebc59bf8740d56560abf3e8d7e63d\">setTextureMask</a>( parameters.<a name=\"a313\"></a>showAlphaMask ? <a name=\"a314\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state.html#a508bf9ce7f09728669b77bdc572a2340a49d7d249c9c91e4ce0132bcffe5d73d9\">MHWRender::MBlendState::kAlphaChannel</a> : <a name=\"a315\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state.html#a508bf9ce7f09728669b77bdc572a2340ae071e81463337bd111c8cd13ed696616\">MHWRender::MBlendState::kRGBAChannels</a> );</div>\n\
<div class=\"line\">    uiDrawManager.<a name=\"a316\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#ab7479336abc018548fe68277932d848a\">mesh</a>( <a name=\"a317\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a08260379b97fd733e30ea92e891ede1eaa2c70dd76c8172a9298334473c914304\">MHWRender::MUIDrawManager::kTriangles</a>, positions, NULL, NULL, NULL, &amp;texcoords );</div>\n\
<div class=\"line\">    uiDrawManager.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a1a67ff02e590a228a6ccc168c4c44d00\">setTexture</a>( NULL );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a5222892109760efc845e37469b0f6cb4\">MHWRender::MRenderUtilities::releaseDrawContext</a>( context );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> GLSLShaderNode::TypeID()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> m_TypeId;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::reload()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Mark the effect as potentially fixed if it was previously broken:</span></div>\n\
<div class=\"line\">    EffectCollection::instance().unregisterBrokenEffect(<span class=\"keyword\">this</span>, fEffectName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Reload ALL nodes using that effect. Leaving a few nodes on a seemingly working old</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// effect when the current one is broken would be misleading.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    EffectCollection::NodeSet_t allNodes;</div>\n\
<div class=\"line\">    EffectCollection::instance().getNodesUsingEffect(fEffectName, allNodes);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    EffectCollection::NodeSet_t::iterator it = allNodes.begin();</div>\n\
<div class=\"line\">    EffectCollection::NodeSet_t::iterator itEnd = allNodes.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(; it != itEnd; ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        GLSLShaderNode* node = *it;</div>\n\
<div class=\"line\">        result = node-&gt;loadEffect(fEffectName) &amp;&amp; result;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    refreshView();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Here we find light specific semantics on parameters. This will be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">    to properly transfer values from a Maya light to the effect. Parameters</span></div>\n\
<div class=\"line\"><span class=\"comment\">    that have semantics that are not light-like will get the light type</span></div>\n\
<div class=\"line\"><span class=\"comment\">    eNotALight and will not participate in light related code paths.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    We also try to detect the light type that best match this parameter based</span></div>\n\
<div class=\"line\"><span class=\"comment\">    on a substring match for point/spot/directional/ambient strings. We can also</span></div>\n\
<div class=\"line\"><span class=\"comment\">    deduce the light type from extremely specialized semantics like cone angle and</span></div>\n\
<div class=\"line\"><span class=\"comment\">    falloff for a spot light or LP0 for an area light.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    We finally try to group light parameters together into a single logical light</span></div>\n\
<div class=\"line\"><span class=\"comment\">    group using either an &quot;Object&quot; annotation or a substring of the parameter name.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    The light group name is one of:</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The string value of the &quot;Object&quot; annotation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - The prefix part of a parameter name that contains either &quot;Light&quot;, &quot;light&quot;,</span></div>\n\
<div class=\"line\"><span class=\"comment\">           or a number:</span></div>\n\
<div class=\"line\"><span class=\"comment\">                DirectionalLightColor  -&gt;   DirectionalLight</span></div>\n\
<div class=\"line\"><span class=\"comment\">                scene_light_position   -&gt;   scene_light</span></div>\n\
<div class=\"line\"><span class=\"comment\">                Lamp0Color             -&gt;   Lamp0</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    - All light parameters that share a common light group name will be grouped together</span></div>\n\
<div class=\"line\"><span class=\"comment\">        into a single logical light</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - When a logical light is bound to a scene light, all parameter values will be</span></div>\n\
<div class=\"line\"><span class=\"comment\">        transferred in block from the scene light to the logical light</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - The Attribute Editor will show one extra control per logical light that will allow</span></div>\n\
<div class=\"line\"><span class=\"comment\">        to quickly specify how this logical light should be handled by Maya. Options are</span></div>\n\
<div class=\"line\"><span class=\"comment\">        to explicitely bind a scene light, allow automatic binding to any compatible scene</span></div>\n\
<div class=\"line\"><span class=\"comment\">        light, or ignore scene lights and use values stored in the effect parameters.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - The Attribute Editor will also group all light parameters in separate panels as if</span></div>\n\
<div class=\"line\"><span class=\"comment\">        they were grouped using the UIGroup annotation. See comments on UIGroup annotation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        for more details.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::updateLightInfoFromSemantic(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; parameterName, <span class=\"keywordtype\">int</span> uniformParamIndex)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> opStatus;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fGLSLShaderInstance == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">//Check for light type from object type</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> objectAnnotation = fGLSLShaderInstance-&gt;annotationAsString(parameterName, glslShaderAnnotation::kObject, opStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> currentLightIndex = -1;</div>\n\
<div class=\"line\">    ELightType currentLightType = eUndefinedLight;;</div>\n\
<div class=\"line\">    ELightParameterType currentParamType = eUndefined;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasLightTypeSemantic = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        currentLightIndex = getIndexForLightName(objectAnnotation, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(objectAnnotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(glslShaderAnnotationValue::kLight) &gt;= 0 || objectAnnotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(glslShaderAnnotationValue::kLamp) &gt;= 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentLightType = eUndefinedLight;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(objectAnnotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(glslShaderAnnotationValue::kPoint) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                currentLightType = ePointLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(objectAnnotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(glslShaderAnnotationValue::kSpot) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                currentLightType = eSpotLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(objectAnnotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(glslShaderAnnotationValue::kDirectional) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                currentLightType = eDirectionalLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(objectAnnotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a8b323761724ea9659348e33b0fea356b\">rindexW</a>(glslShaderAnnotationValue::kAmbient) &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                currentLightType = eAmbientLight;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//if object is not a light, return</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//If parameter doesn&#39;t carry an Object annotation, it is not a light</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> semanticValueRaw = fGLSLShaderInstance-&gt;parameterSemantic(parameterName, opStatus);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(opStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* semanticValue = semanticValueRaw.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kLightColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kLightEnable))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightEnable;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kLightIntensity))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightIntensity;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kLightFalloff) ||</div>\n\
<div class=\"line\">                 !STRICMP( semanticValue, glslShaderSemantic::kFalloff))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentLightType = eSpotLight;</div>\n\
<div class=\"line\">            currentParamType = eLightFalloff;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kLightDiffuseColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightDiffuseColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kLightAmbientColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightAmbientColor;</div>\n\
<div class=\"line\">            currentLightType = eAmbientLight;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kLightSpecularColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightSpecularColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kShadowMap))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightShadowMap;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kPointLightShadowMap))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = ePointLightShadowMap;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kShadowMapBias))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightShadowMapBias;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kShadowFlag))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightShadowOn;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kShadowMapMatrix) ||</div>\n\
<div class=\"line\">                 !STRICMP( semanticValue, glslShaderSemantic::kShadowMapXForm))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//View transformation matrix of the light</span></div>\n\
<div class=\"line\">            currentParamType = eLightShadowViewProj;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kShadowColor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightShadowColor;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kHotspot))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightHotspot;</div>\n\
<div class=\"line\">            currentLightType = eSpotLight;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kLightType))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eLightType;</div>\n\
<div class=\"line\">            hasLightTypeSemantic = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (!STRICMP( semanticValue, glslShaderSemantic::kDecayRate))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentParamType = eDecayRate;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> isLight = (currentLightType != eInvalidLight || findSubstring(parameterName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(glslShaderAnnotationValue::kLight)) &gt;= 0);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(isLight)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kPosition))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightPosition;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kAreaPosition0))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightAreaPosition0;</div>\n\
<div class=\"line\">                    currentLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kAreaPosition1))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightAreaPosition1;</div>\n\
<div class=\"line\">                    currentLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kAreaPosition2))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightAreaPosition2;</div>\n\
<div class=\"line\">                    currentLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kAreaPosition3))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightAreaPosition3;</div>\n\
<div class=\"line\">                    currentLightType = eAreaLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kDirection))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightDirection;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kColor))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    currentParamType = eLightColor;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kAmbient))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightAmbientColor;</div>\n\
<div class=\"line\">                    currentLightType = eAmbientLight;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kDiffuse))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightDiffuseColor;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( !STRICMP( semanticValue, glslShaderSemantic::kSpecular))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    currentParamType = eLightSpecularColor;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//Compute light index</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(currentParamType != eUndefined &amp;&amp; currentLightIndex ==  -1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* objectName = parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> truncationPos = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lightPos = findSubstring(parameterName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(glslShaderAnnotationValue::kLight));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lightPos &gt;= 0)</div>\n\
<div class=\"line\">                truncationPos = lightPos + 5;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(truncationPos &lt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// last effort, see if there is any digit in the parameter name:</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> digitPos = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( ; digitPos &lt; parameterName.<a name=\"a318\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>(); ++digitPos)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( isdigit(objectName[digitPos]) )</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( digitPos &lt; parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() )</div>\n\
<div class=\"line\">                    truncationPos = digitPos;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (truncationPos &gt;= 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Need to also skip any digits found after the &quot;light&quot;</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> maxChars = int(parameterName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">while</span> (truncationPos &lt; maxChars &amp;&amp; isdigit(objectName[truncationPos]))</div>\n\
<div class=\"line\">                    ++truncationPos;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                currentLightIndex = getIndexForLightName(parameterName.<a name=\"a319\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>(0,truncationPos-1), <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//if parameter is not a light or unrecognized semantic, do not add to fLightParameters</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(<span class=\"comment\">/*currentLightType == eUndefinedLight ||*/</span> currentParamType == eUndefined || currentLightIndex &lt; 0)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//look for light in fLightParameters to append parameter</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> parameterFound = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0;i &lt; fLightParameters.size();++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fLightParameters[i].mLightIndex == currentLightIndex)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fLightParameters[i].fConnectableParameters.insert(LightParameterInfo::TConnectableParameters::value_type(uniformParamIndex, currentParamType));</div>\n\
<div class=\"line\">            fLightParameters[i].fHasLightTypeSemantics |= hasLightTypeSemantic;</div>\n\
<div class=\"line\">            parameterFound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If not found, create light parameter and append to fLightParameters</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!parameterFound)</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">        fLightParameters.push_back(LightParameterInfo(currentLightIndex, currentLightType, hasLightTypeSemantic));</div>\n\
<div class=\"line\">        fLightParameters[fLightParameters.size()-1].fConnectableParameters.insert(LightParameterInfo::TConnectableParameters::value_type(uniformParamIndex, currentParamType));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> GLSLShaderNode::getIndexForLightName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; lightName, <span class=\"keywordtype\">bool</span> appendLight)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> findInArray(fLightNames, lightName, appendLight);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> GLSLShaderNode::getLightableParameters(<span class=\"keywordtype\">int</span> lightIndex, <span class=\"keywordtype\">bool</span> showSemantics)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> retVal;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(lightIndex &lt; (<span class=\"keywordtype\">int</span>)fLightParameters.size())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LightParameterInfo&amp; currLight = fLightParameters[lightIndex];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (LightParameterInfo::TConnectableParameters::const_iterator idxIter=currLight.fConnectableParameters.begin();</div>\n\
<div class=\"line\">            idxIter != currLight.fConnectableParameters.end();</div>\n\
<div class=\"line\">            ++idxIter)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> appended = appendParameterNameIfVisible((*idxIter).first, retVal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (appended &amp;&amp; showSemantics) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> paramType((*idxIter).second);</div>\n\
<div class=\"line\">                retVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(getLightParameterSemantic(paramType));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    In the AE we only want to expose visible parameters, so</span></div>\n\
<div class=\"line\"><span class=\"comment\">    test here for parameter visibility:</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::appendParameterNameIfVisible(<span class=\"keywordtype\">int</span> paramIndex, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; paramArray)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> uniform = fUniformParameters.getElement(paramIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> uniformPlug(uniform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab6d4ca450bab408a98a5803c0dbaa747\">getPlug</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uniformPlug.isNull())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> uniformAttribute(uniformPlug.attribute());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uniformAttribute.isHidden())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    paramArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(uniformAttribute.shortName());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Get semantic string back from enum:</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; GLSLShaderNode::getLightParameterSemantic(<span class=\"keywordtype\">int</span> lightParameterType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lightParameterType &lt; 0 || lightParameterType &gt;= eLastParameterType)</div>\n\
<div class=\"line\">        lightParameterType = eUndefined;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> semanticNames;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) {</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kUndefined);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kPosition);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kDirection);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightSpecularColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightAmbientColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightDiffuseColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightRange);          <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kFalloff);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightAttenuation0);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightAttenuation1);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightAttenuation2);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightTheta);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightPhi);   <span class=\"comment\">// Not recognized!</span></div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kShadowMap);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kPointLightShadowMap);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kShadowMapBias);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kShadowColor);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kShadowMapMatrix);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kShadowFlag);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightIntensity);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kHotspot);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightEnable);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kLightType);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kDecayRate);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kAreaPosition0);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kAreaPosition1);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kAreaPosition2);</div>\n\
<div class=\"line\">        semanticNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(glslShaderSemantic::kAreaPosition3);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> semanticNames[lightParameterType];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is where we create the light connection attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">// when a shader is first assigned. When a scene is loaded,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// we only need to retrieve the dynamic attributes that were</span></div>\n\
<div class=\"line\"><span class=\"comment\">// created by the persistence code. The code also handles</span></div>\n\
<div class=\"line\"><span class=\"comment\">// re-creating the attributes if the light group names were</span></div>\n\
<div class=\"line\"><span class=\"comment\">// changed in the effect file.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::refreshLightConnectionAttributes(<span class=\"keywordtype\">bool</span> inSceneUpdateNotification)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( inSceneUpdateNotification || (!<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#accbcaffc37fcbee9f7974aae80c8014b\">MFileIO::isReadingFile</a>() &amp;&amp; !<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#a30bf5678402012d5607a6b0f22d2c2a5\">MFileIO::isOpeningFile</a>()) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDepThisNode(thisMObject());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> iLi=0; iLi&lt;fLightParameters.size(); ++iLi)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            LightParameterInfo&amp; currLight(fLightParameters[iLi]);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sanitizedLightGroupName = sanitizeName(fLightNames[(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)iLi]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If the attributes are not there at this time then create them.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (currLight.fAttrUseImplicit.isNull())</div>\n\
<div class=\"line\">                currLight.fAttrUseImplicit = fnDepThisNode.attribute(sanitizedLightGroupName + <span class=\"stringliteral\">&quot;_use_implicit_lighting&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (currLight.fAttrUseImplicit.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Create:</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnAttr;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName = sanitizedLightGroupName + <span class=\"stringliteral\">&quot;_use_implicit_lighting&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrUseImplicit = fnAttr.<a name=\"a320\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName , attrName, <a name=\"a321\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>);</div>\n\
<div class=\"line\">                fnAttr.<a name=\"a322\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                fnAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                fnAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                fnAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!attrUseImplicit.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a323\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> implicitModifier;</div>\n\
<div class=\"line\">                    status = implicitModifier.<a name=\"a324\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ad714eb6c2e6f51659e3e50f176c75a91\">addAttribute</a>(thisMObject(), attrUseImplicit);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status.<a name=\"a325\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        status = implicitModifier.<a name=\"a326\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            currLight.fAttrUseImplicit = attrUseImplicit;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (currLight.fAttrConnectedLight.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                currLight.fAttrConnectedLight = fnDepThisNode.attribute(sanitizedLightGroupName + <span class=\"stringliteral\">&quot;_connected_light&quot;</span>);;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (currLight.fAttrConnectedLight.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a327\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_message_attribute.html\">MFnMessageAttribute</a> msgAttr;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName = sanitizedLightGroupName + <span class=\"stringliteral\">&quot;_connected_light&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrConnectedLight = msgAttr.<a name=\"a328\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_message_attribute.html#a808909c19784e506b141107b425a04df\">create</a>(attrName, attrName);</div>\n\
<div class=\"line\">                msgAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!attrConnectedLight.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> implicitModifier;</div>\n\
<div class=\"line\">                    status = implicitModifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ad714eb6c2e6f51659e3e50f176c75a91\">addAttribute</a>(thisMObject(), attrConnectedLight);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        status = implicitModifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            currLight.fAttrConnectedLight = attrConnectedLight;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Hmmm. Really not a good idea to start adding parameters while scene is not fullly loaded.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Ask to be called back at a later time:</span></div>\n\
<div class=\"line\">        PostSceneUpdateAttributeRefresher::add(<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Implicit light connection:</span></div>\n\
<div class=\"line\"><span class=\"comment\">    =========================</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    In this function we want to bind the M shader lights to the best</span></div>\n\
<div class=\"line\"><span class=\"comment\">    subset of the N scene lights found in the draw context. For performance</span></div>\n\
<div class=\"line\"><span class=\"comment\">    we keep count of the number of light to connect and short-circuit loops</span></div>\n\
<div class=\"line\"><span class=\"comment\">    when we ran out of lights to bind on either the shader or draw context side.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    This function can be called in 3 different context:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Scene: We have multiple lights in the draw context and we need to</span></div>\n\
<div class=\"line\"><span class=\"comment\">             find a light that is compatible with the shader whenever the</span></div>\n\
<div class=\"line\"><span class=\"comment\">             cached light is not found and it is not explicitly connected.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Default light: The draw context will contain only a single light and</span></div>\n\
<div class=\"line\"><span class=\"comment\">                     it needs to override light in all three lighting modes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    - Swatch: Same requirements as &quot;Default Light&quot;, but does not override</span></div>\n\
<div class=\"line\"><span class=\"comment\">              lights in &quot;Use Shader Settings&quot; mode.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    We need to keep track of which lights are implicitly/explicitly bound to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    make sure we do not automatically bind the same light more than once.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    Scene ligths that are part of the scene but cannot be found in the draw</span></div>\n\
<div class=\"line\"><span class=\"comment\">    context are either invisible, disabled, or in any other lighting combination</span></div>\n\
<div class=\"line\"><span class=\"comment\">    (like &quot;Use Selected Light&quot;) where we do not want to see the lighting in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    shader. For these lights we turn the shader lighting &quot;off&quot; by setting</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the shader parameter values to black, with zero intensity.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::updateImplicitLightConnections(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, ERenderType renderType)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(renderType != RENDER_SCENE &amp;&amp; renderType != RENDER_SWATCH)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> ignoreLightLimit = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2\">MHWRender::MDrawContext::LightFilter</a> lightFilter = <a name=\"a329\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2ad63bad246d971bae12546a9784c65d31\">MHWRender::MDrawContext::kFilteredToLightLimit</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ignoreLightLimit)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        lightFilter = <a name=\"a330\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2a8d9a85c34398a46f44834be0b4fec0e4\">MHWRender::MDrawContext::kFilteredIgnoreLightLimit</a>;</div>\n\
<div class=\"line\">        <a name=\"a331\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ad3ef90830d42d36701abb67d53748f08\">MHWRender::MRenderer::needEvaluateAllLights</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbSceneLights = context.<a name=\"a332\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a245ec3740263f7f3c076dd9c723141b7\">numberOfActiveLights</a>(lightFilter);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbSceneLightsToBind = nbSceneLights;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> implicitLightWasRebound = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Detect headlamp scene rendering mode:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(renderType == RENDER_SCENE &amp;&amp; nbSceneLights == 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* sceneLightParam = context.<a name=\"a333\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( 0 );</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ELightType sceneLightType = getLightType(sceneLightParam);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(sceneLightType == GLSLShaderNode::eDefaultLight )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Swatch and headlamp are the same as far as</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// implicit light connection is concerned:</span></div>\n\
<div class=\"line\">            renderType = RENDER_SCENE_DEFAULT_LIGHT;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbShaderLights = (<span class=\"keywordtype\">unsigned</span> int)fLightParameters.size();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbShaderLightsToBind = nbShaderLights;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Keep track of the shader lights that were treated : binding was successful</span></div>\n\
<div class=\"line\">    std::vector&lt;bool&gt; shaderLightTreated(nbShaderLights, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    std::vector&lt;bool&gt; shaderLightUsesImplicit(nbShaderLights, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depFn( thisMObject() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Keep track of the scene lights that were used : binding was successful</span></div>\n\
<div class=\"line\">    std::vector&lt;bool&gt; sceneLightUsed(nbSceneLights, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Upkeep pass.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We want to know exactly which shader light will later require implicit</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// connection, and which scene lights are already used. We also remember</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// lights that were previously bound using the cached light parameter of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the light group info structure. It the cached light exists, and is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// still available for automatic binding, we immediately reuse it.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(renderType == RENDER_SCENE)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Find out all explicitely connected lights and mark them as already</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// bound.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> shaderLightIndex = 0;</div>\n\
<div class=\"line\">            shaderLightIndex &lt; nbShaderLights &amp;&amp; nbShaderLightsToBind &amp;&amp; nbSceneLightsToBind;</div>\n\
<div class=\"line\">            ++shaderLightIndex )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisLightConnectionPlug = depFn.findPlug(shaderLightInfo.fAttrConnectedLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (thisLightConnectionPlug.<a name=\"a334\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Find the light connected as source to this plug:</span></div>\n\
<div class=\"line\">                <a name=\"_a335\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> srcCnxArray;</div>\n\
<div class=\"line\">                thisLightConnectionPlug.<a name=\"a336\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(srcCnxArray,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (srcCnxArray.<a name=\"a337\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> sourcePlug = srcCnxArray[0];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sceneLightIndex = 0; sceneLightIndex &lt; nbSceneLights; ++sceneLightIndex)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* sceneLightParam = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( sceneLightIndex, lightFilter );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(sceneLightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#ac8cc78537b5a5d66bd3cc96bf8ef506e\">lightPath</a>().<a name=\"a338\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() == sourcePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>())</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            sceneLightUsed[sceneLightIndex] = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                            nbSceneLightsToBind--;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!shaderLightInfo.fCachedImplicitLight.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fCachedImplicitLight = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>();</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Light is explicitely connected, so parameters are locked:</span></div>\n\
<div class=\"line\">                        setLightParameterLocking(shaderLightInfo, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                        implicitLightWasRebound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update cached implicit lights:</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> shaderLightIndex = 0;</div>\n\
<div class=\"line\">            shaderLightIndex &lt; nbShaderLights &amp;&amp; nbShaderLightsToBind;</div>\n\
<div class=\"line\">            ++shaderLightIndex )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// See if this light uses implicit connections:</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> useImplicitPlug = depFn.findPlug( shaderLightInfo.fAttrUseImplicit, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() ) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> useImplicit;</div>\n\
<div class=\"line\">                useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( useImplicit );</div>\n\
<div class=\"line\">                shaderLightUsesImplicit[shaderLightIndex] = useImplicit;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (useImplicit)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Make sure cached light is still in model:</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!shaderLightInfo.fCachedImplicitLight.isNull())</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">                        <a name=\"_a339\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> lightDagNode(shaderLightInfo.fCachedImplicitLight, &amp;status);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; lightDagNode.inModel() ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// Try to connect to the cached light:</span></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* matchingSceneLightParam = NULL;</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sceneLightIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span>( ; sceneLightIndex &lt; nbSceneLights; ++sceneLightIndex)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* sceneLightParam = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( sceneLightIndex, lightFilter );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span>( sceneLightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#ac8cc78537b5a5d66bd3cc96bf8ef506e\">lightPath</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() == shaderLightInfo.fCachedImplicitLight )</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    matchingSceneLightParam = sceneLightParam;</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (matchingSceneLightParam)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> (!sceneLightUsed[sceneLightIndex])</div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    connectLight(shaderLightInfo, matchingSceneLightParam);</div>\n\
<div class=\"line\">                                    sceneLightUsed[sceneLightIndex] = <span class=\"keyword\">true</span>;         <span class=\"comment\">// mark this scene light as used</span></div>\n\
<div class=\"line\">                                    nbSceneLightsToBind--;</div>\n\
<div class=\"line\">                                    shaderLightTreated[shaderLightIndex] = <span class=\"keyword\">true</span>;    <span class=\"comment\">// mark this shader light as binded</span></div>\n\
<div class=\"line\">                                    nbShaderLightsToBind--;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                                {</div>\n\
<div class=\"line\">                                    setLightRequiresShadows(shaderLightInfo.fCachedImplicitLight, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"comment\">// Light already in use, clear the cache to allow binding at a later stage:</span></div>\n\
<div class=\"line\">                                    (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fCachedImplicitLight = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>();</div>\n\
<div class=\"line\">                                    setLightParameterLocking(shaderLightInfo, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                                    implicitLightWasRebound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"comment\">// mark this shader light as bound even if not found in DC</span></div>\n\
<div class=\"line\">                                turnOffLight(shaderLightInfo);</div>\n\
<div class=\"line\">                                shaderLightTreated[shaderLightIndex] = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                                nbShaderLightsToBind--;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// Note that we don&#39;t need to clear the requirement for</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// implicit shadow maps here as light deletion is already handled by the renderer</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// Light is not in the model anymore, allow rebinding:</span></div>\n\
<div class=\"line\">                            (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fCachedImplicitLight = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>();</div>\n\
<div class=\"line\">                            setLightParameterLocking(shaderLightInfo, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                            implicitLightWasRebound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// This light is either explicitly bound, or in the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// &quot;Use Shader Settings&quot; mode, so we have one less</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// shader light to bind:</span></div>\n\
<div class=\"line\">                    nbShaderLightsToBind--;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Here we are in swatch or default light mode and must override all light connection</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// by marking them all as available for &quot;Automatic Bind&quot;</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> shaderLightIndex = 0;</div>\n\
<div class=\"line\">            shaderLightIndex &lt; nbShaderLights &amp;&amp; nbShaderLightsToBind &amp;&amp; nbSceneLightsToBind;</div>\n\
<div class=\"line\">            ++shaderLightIndex )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisLightConnectionPlug = depFn.findPlug(shaderLightInfo.fAttrConnectedLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> useImplicit = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> useImplicitPlug = depFn.findPlug( shaderLightInfo.fAttrUseImplicit, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() ) {</div>\n\
<div class=\"line\">                useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( useImplicit );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>() || useImplicit || renderType == RENDER_SCENE_DEFAULT_LIGHT )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shaderLightUsesImplicit[shaderLightIndex] = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// In swatch rendering, lights in the &quot;Use Shader Settings&quot; mode are not</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// overridden:</span></div>\n\
<div class=\"line\">                nbShaderLightsToBind--;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// First pass ... try to connect each shader lights with the best scene light possible.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This means for each light whose type is explicitly known, we try to find the first</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// draw context light that is of the same type.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The type of the shader light is deduced automatically first by looking for a substring</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// match in the light &quot;Object&quot; annotation, then by searching the parameter name, and finally</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// by checking which combination of position/direction semantics the light requires:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(renderType == RENDER_SCENE)</div>\n\
<div class=\"line\">        fImplicitAmbientLight = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> shaderLightIndex = 0;</div>\n\
<div class=\"line\">        shaderLightIndex &lt; nbShaderLights &amp;&amp; nbShaderLightsToBind &amp;&amp; nbSceneLightsToBind;</div>\n\
<div class=\"line\">        ++shaderLightIndex )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ELightType shaderLightType = shaderLightInfo.mLightType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(!shaderLightUsesImplicit[shaderLightIndex] || shaderLightTreated[shaderLightIndex] == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sceneLightIndex = 0; sceneLightIndex &lt; nbSceneLights; ++sceneLightIndex)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(sceneLightUsed[sceneLightIndex] == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* sceneLightParam = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( sceneLightIndex, lightFilter );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> ELightType sceneLightType = getLightType(sceneLightParam);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( shaderLightType == sceneLightType || shaderLightInfo.fHasLightTypeSemantics )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                connectLight(shaderLightInfo, sceneLightParam, renderType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                shaderLightTreated[shaderLightIndex] = <span class=\"keyword\">true</span>;    <span class=\"comment\">// mark this shader light as binded</span></div>\n\
<div class=\"line\">                nbShaderLightsToBind--;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Rendering swatch needs to drive all lights, except if they have a light type semantics,</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// where we only need to drive one:</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (renderType != RENDER_SWATCH || shaderLightInfo.fHasLightTypeSemantics)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    sceneLightUsed[sceneLightIndex] = <span class=\"keyword\">true</span>;         <span class=\"comment\">// mark this scene light as used</span></div>\n\
<div class=\"line\">                    nbSceneLightsToBind--;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(renderType == RENDER_SCENE)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    setLightRequiresShadows(shaderLightInfo.fCachedImplicitLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fCachedImplicitLight = sceneLightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#ac8cc78537b5a5d66bd3cc96bf8ef506e\">lightPath</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">                    setLightParameterLocking(shaderLightInfo, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    implicitLightWasRebound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// only update &#39;fImplicitAmbientLight&#39; if it was not set yet. This allows the user to</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// manually bind an ambient light into the shader and still see any implicit &#39;Ambient&#39; lighting bound in AE.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (sceneLightType == eAmbientLight &amp;&amp; fImplicitAmbientLight &lt; 0)</div>\n\
<div class=\"line\">                        fImplicitAmbientLight = shaderLightIndex;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Will need to refresh defaults on next scene redraw:</span></div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fIsDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Second pass ... connect remaining shader lights with scene lights that are not yet connected.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// In this pass, we consider compatible all lights that possess a superset of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// semantics required by the shader light, so a scene spot light can be bound to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// shader lights requesting only a position, or a direction, and any light can bind</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to a shader light that only requires a color:</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> shaderLightIndex = 0;</div>\n\
<div class=\"line\">        shaderLightIndex &lt; nbShaderLights &amp;&amp; nbShaderLightsToBind &amp;&amp; nbSceneLightsToBind;</div>\n\
<div class=\"line\">        ++shaderLightIndex )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(!shaderLightUsesImplicit[shaderLightIndex] || shaderLightTreated[shaderLightIndex] == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ELightType shaderLightType = shaderLightInfo.mLightType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sceneLightIndex = 0; sceneLightIndex &lt; nbSceneLights; ++sceneLightIndex)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(sceneLightUsed[sceneLightIndex] == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* sceneLightParam = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( sceneLightIndex, lightFilter );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> ELightType sceneLightType = getLightType(sceneLightParam);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( isLightAcceptable(shaderLightType, sceneLightType) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                connectLight(shaderLightInfo, sceneLightParam, renderType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                shaderLightTreated[shaderLightIndex] = <span class=\"keyword\">true</span>;    <span class=\"comment\">// mark this shader light as binded</span></div>\n\
<div class=\"line\">                nbShaderLightsToBind--;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Rendering swatch needs to drive all lights, except if they have a light type semantics,</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// where we only need to drive one:</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (renderType != RENDER_SWATCH || shaderLightInfo.fHasLightTypeSemantics)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    sceneLightUsed[sceneLightIndex] = <span class=\"keyword\">true</span>;         <span class=\"comment\">// mark this scene light as used</span></div>\n\
<div class=\"line\">                    nbSceneLightsToBind--;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(renderType == RENDER_SCENE)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fCachedImplicitLight = sceneLightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#ac8cc78537b5a5d66bd3cc96bf8ef506e\">lightPath</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">                    setLightParameterLocking(shaderLightInfo, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    implicitLightWasRebound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    setLightRequiresShadows(shaderLightInfo.fCachedImplicitLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Will need to refresh defaults on next scene redraw:</span></div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fIsDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Final pass: shutdown all implicit lights that were not bound</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> shaderLightIndex = 0;</div>\n\
<div class=\"line\">        shaderLightIndex &lt; nbShaderLights &amp;&amp; nbShaderLightsToBind;</div>\n\
<div class=\"line\">        ++shaderLightIndex )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(!shaderLightUsesImplicit[shaderLightIndex] || shaderLightTreated[shaderLightIndex] == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        turnOffLight(shaderLightInfo);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(renderType != RENDER_SCENE)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Will need to refresh defaults on next scene redraw:</span></div>\n\
<div class=\"line\">            (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fIsDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If during this update phase we changed any of the cached implicit light</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// objects, we need to trigger a refresh of the attribute editor light binding</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// information to show the current light connection settings. Multiple requests</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// are pooled by the refresher and only one request is sent to the AE in the next</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// idle window.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (implicitLightWasRebound)</div>\n\
<div class=\"line\">        IdleAttributeEditorImplicitRefresher::activate();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    This function rebuilds all the shader light information structures:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    fLightParameters: Main struct that contains the frequently use runtime information</span></div>\n\
<div class=\"line\"><span class=\"comment\">        Contains:</span></div>\n\
<div class=\"line\"><span class=\"comment\">            fLightType: What kind of scene light drives this shader light completely</span></div>\n\
<div class=\"line\"><span class=\"comment\">            fHasLightTypeSemantics: Is the shader light code able to adapt to multiple light types?</span></div>\n\
<div class=\"line\"><span class=\"comment\">            fIsDirty: Should we refresh the shader light parameter values at the next redraw?</span></div>\n\
<div class=\"line\"><span class=\"comment\">            fConnectableParameters: Set of indices in the uniform parameter array that define this shader light</span></div>\n\
<div class=\"line\"><span class=\"comment\">            fAttrUseImplicit: Boolean attribute whose value is true when in &quot;Automatic Bind&quot; mode</span></div>\n\
<div class=\"line\"><span class=\"comment\">            fAttrConnectedLight: Message attribute that is connected to a light shape for explicit binds</span></div>\n\
<div class=\"line\"><span class=\"comment\">            fCachedImplicitLight: Reference to the light shape that was automatically bound during last redraw</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">     fLightDescriptions: String array containing pairs of (Light Group Name, Light Group Type) returned by</span></div>\n\
<div class=\"line\"><span class=\"comment\">                         &quot;GLSLShader -listLightInformation&quot; query and used by the AE to create the light</span></div>\n\
<div class=\"line\"><span class=\"comment\">                         connection panel and to filter which scene lights can appear in the dropdowns for</span></div>\n\
<div class=\"line\"><span class=\"comment\">                         explicit connection</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::updateImplicitLightParameterCache()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnDepThisNode(thisMObject());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> implicitModifier;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The attributes for connected lights and implicit binding can be created from</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the persistence. Try to preserve them if possible.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updateConnectionAttributes = ( !<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#accbcaffc37fcbee9f7974aae80c8014b\">MFileIO::isReadingFile</a>() &amp;&amp; !<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_i_o.html#a30bf5678402012d5607a6b0f22d2c2a5\">MFileIO::isOpeningFile</a>() );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( updateConnectionAttributes ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Do not update if the light groups are exactly the same:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//   (happens a lot when switching from one technique to another)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fLightParameters.size() == fLightNames.length() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            updateConnectionAttributes = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> iLi=0; iLi&lt;fLightParameters.size(); ++iLi) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> newName = sanitizeName(fLightNames[(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)iLi]) + <span class=\"stringliteral\">&quot;_use_implicit_lighting&quot;</span>;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> currentAttribute(fLightParameters[iLi].fAttrUseImplicit, &amp;status);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> || currentAttribute.name() != newName ) {</div>\n\
<div class=\"line\">                    updateConnectionAttributes = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( updateConnectionAttributes ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> iLi=0; iLi&lt;fLightParameters.size(); ++iLi)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(fLightParameters[iLi].fAttrUseImplicit.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                implicitModifier.<a name=\"a340\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ab5595b225c59b15d902dc34b849d90d0\">removeAttribute</a>(thisMObject(), fLightParameters[iLi].fAttrUseImplicit);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(fLightParameters[iLi].fAttrConnectedLight.isNull() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                implicitModifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ab5595b225c59b15d902dc34b849d90d0\">removeAttribute</a>(thisMObject(), fLightParameters[iLi].fAttrConnectedLight);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    implicitModifier.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">    refreshLightConnectionAttributes();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        Once all light group information is found, we can generate</span></div>\n\
<div class=\"line\"><span class=\"comment\">        the light parameter info array for the AE</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    fLightDescriptions.clear();</div>\n\
<div class=\"line\">    LightParameterInfoVec::iterator iterLight = fLightParameters.begin();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> lightIndex = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(;iterLight != fLightParameters.end();++iterLight, ++lightIndex)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fLightDescriptions.append(fLightNames[lightIndex]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kInvalid(<span class=\"stringliteral\">&quot;invalid&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kUndefined(<span class=\"stringliteral\">&quot;undefined&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kSpot(<span class=\"stringliteral\">&quot;spot&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kPoint(<span class=\"stringliteral\">&quot;point&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kDirectional(<span class=\"stringliteral\">&quot;directional&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kAmbient(<span class=\"stringliteral\">&quot;ambient&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kArea(<span class=\"stringliteral\">&quot;area&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> lightType = kInvalid;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>(iterLight-&gt;mLightType)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eUndefinedLight:</div>\n\
<div class=\"line\">            lightType = kUndefined;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eSpotLight:</div>\n\
<div class=\"line\">            lightType = kSpot;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> ePointLight:</div>\n\
<div class=\"line\">            lightType = kPoint;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eDirectionalLight:</div>\n\
<div class=\"line\">            lightType = kDirectional;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eAmbientLight:</div>\n\
<div class=\"line\">            lightType = kAmbient;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eAreaLight:</div>\n\
<div class=\"line\">            lightType = kArea;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\">        fLightDescriptions.append(lightType);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Traverse all explicit light connections and refresh the shader data if the light</span></div>\n\
<div class=\"line\"><span class=\"comment\">    is found in the draw context, otherwise turn off the light.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    This is also where we handle the special case of the merged ambient lights by</span></div>\n\
<div class=\"line\"><span class=\"comment\">    refreshing the connected ambient light, but only if we found the merged one</span></div>\n\
<div class=\"line\"><span class=\"comment\">    inside the draw context. Not finding ambient lights in the draw context mean that</span></div>\n\
<div class=\"line\"><span class=\"comment\">    they are all invisible, or disabled, or otherwise not drawn.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::updateExplicitLightConnections(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, ERenderType renderType)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(renderType != RENDER_SCENE)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbShaderLights = (<span class=\"keywordtype\">unsigned</span> int)fLightParameters.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(nbShaderLights == 0)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> ignoreLightLimit = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2\">MHWRender::MDrawContext::LightFilter</a> lightFilter = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2ad63bad246d971bae12546a9784c65d31\">MHWRender::MDrawContext::kFilteredToLightLimit</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ignoreLightLimit)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        lightFilter = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a45d7b67b2b407db2a3a3927ef09db3e2a8d9a85c34398a46f44834be0b4fec0e4\">MHWRender::MDrawContext::kFilteredIgnoreLightLimit</a>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ad3ef90830d42d36701abb67d53748f08\">MHWRender::MRenderer::needEvaluateAllLights</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbSceneLights = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a245ec3740263f7f3c076dd9c723141b7\">numberOfActiveLights</a>(lightFilter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> thisDependNode;</div>\n\
<div class=\"line\">    thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(thisMObject());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> shaderLightIndex = 0; shaderLightIndex &lt;nbShaderLights; ++shaderLightIndex )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisLightConnectionPlug = thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(shaderLightInfo.fAttrConnectedLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the light connected as source to this plug:</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> srcCnxArray;</div>\n\
<div class=\"line\">            thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(srcCnxArray,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcCnxArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> sourcePlug = srcCnxArray[0];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sourceLight(sourcePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>());</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> bHasAmbient = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> bLightEnabled = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sceneLightIndex = 0;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(; sceneLightIndex &lt; nbSceneLights; ++sceneLightIndex)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* sceneLightParam = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a05eaca3528290935c1b9ee55ae020c75\">getLightParameterInformation</a>( sceneLightIndex, lightFilter );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(sceneLightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#ac8cc78537b5a5d66bd3cc96bf8ef506e\">lightPath</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>() == sourceLight)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        setLightRequiresShadows(sourceLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Use connectLight to transfer all values.</span></div>\n\
<div class=\"line\">                        connectLight(shaderLightInfo, sceneLightParam);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Keep light visibility state in case shader cares:</span></div>\n\
<div class=\"line\">                        <a name=\"_a341\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> floatVals;</div>\n\
<div class=\"line\">                        <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kLightOn(<span class=\"stringliteral\">&quot;lightOn&quot;</span>);</div>\n\
<div class=\"line\">                        sceneLightParam-&gt;<a name=\"a342\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( kLightOn, floatVals );</div>\n\
<div class=\"line\">                        bLightEnabled = (floatVals.<a name=\"a343\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0 || floatVals[0] &gt; 0) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (eAmbientLight == getLightType(sceneLightParam))</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        bHasAmbient = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        bLightEnabled = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (bHasAmbient &amp;&amp; sceneLightIndex == nbSceneLights)</div>\n\
<div class=\"line\">                    bLightEnabled = connectExplicitAmbientLight(shaderLightInfo, sourceLight);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Adjust LightEnable parameter if it exists based on the presence of the light in the draw context:</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!bLightEnabled)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    turnOffLight(shaderLightInfo);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::connectExplicitAmbientLight(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; sourceLight)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> bDidConnect = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sourceLight.<a name=\"a344\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a345\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ae33c6f2b55f5c895e9d88b72881608f2\">MFn::kAmbientLight</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a name=\"_a346\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ambient_light.html\">MFnAmbientLight</a> ambientLight(sourceLight, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            bDidConnect = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            LightParameterInfo::TConnectableParameters::const_iterator it    = lightInfo.fConnectableParameters.begin();</div>\n\
<div class=\"line\">            LightParameterInfo::TConnectableParameters::const_iterator itEnd = lightInfo.fConnectableParameters.end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; it != itEnd; ++it)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> parameterIndex = it-&gt;first;</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> parameterType  = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span> (parameterType)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> eLightType:</div>\n\
<div class=\"line\">                    <span class=\"comment\">//setParameterAsScalar(parameterIndex, (int)eAmbientLight);</span></div>\n\
<div class=\"line\">                    fUniformParameters.getElement(parameterIndex).setAsInt((<span class=\"keywordtype\">int</span>)eAmbientLight);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> eLightEnable:</div>\n\
<div class=\"line\">                    <span class=\"comment\">//setParameterAsScalar(parameterIndex, true);</span></div>\n\
<div class=\"line\">                    fUniformParameters.getElement(parameterIndex).setAsBool(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> eLightColor:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> eLightAmbientColor:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> eLightSpecularColor:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> eLightDiffuseColor:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">//update color</span></div>\n\
<div class=\"line\">                        <a name=\"_a347\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> ambientColor(ambientLight.color());</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">float</span> color[3];</div>\n\
<div class=\"line\">                        ambientColor.<a name=\"a348\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a0fdda4fb1326cc833ae4edd772389e57\">get</a>(color);</div>\n\
<div class=\"line\">                        <span class=\"comment\">//setParameterAsVector(parameterIndex, color);</span></div>\n\
<div class=\"line\">                        fUniformParameters.getElement(parameterIndex).setAsFloatArray(color, 3);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">case</span> eLightIntensity:</div>\n\
<div class=\"line\">                    <span class=\"comment\">//setParameterAsScalar(parameterIndex, ambientLight.intensity());</span></div>\n\
<div class=\"line\">                    fUniformParameters.getElement(parameterIndex).setAsFloat(ambientLight.intensity());</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> bDidConnect;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    This is where we explicitely connect a light selected by the user</span></div>\n\
<div class=\"line\"><span class=\"comment\">    by creating an explicit connection between the &quot;lightData&quot; of the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    light shape and the &quot;*_connected_light&quot; attribute. This connection</span></div>\n\
<div class=\"line\"><span class=\"comment\">    can be traversed by the Attribute Editor to navigate between the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    GLSLShader and the connected light in both directions.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::connectLight(<span class=\"keywordtype\">int</span> lightIndex, <a name=\"_a349\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> lightPath)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(lightIndex &lt; (<span class=\"keywordtype\">int</span>)fLightParameters.size())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> DG;</div>\n\
<div class=\"line\">        LightParameterInfo&amp; currLight = fLightParameters[lightIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Connect the light to the connection placeholder:</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> lightShapeNode = lightPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dependNode;</div>\n\
<div class=\"line\">        dependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(lightShapeNode);</div>\n\
<div class=\"line\">        <span class=\"comment\">// Connecting to lightData allows backward navigation:</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> otherPlug = dependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;lightData&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> paramPlug(thisMObject(),currLight.fAttrConnectedLight);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = DG.<a name=\"a350\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(otherPlug,paramPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            DG.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            currLight.fIsDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Lock parameters:</span></div>\n\
<div class=\"line\">            setLightParameterLocking(currLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Flush implicit cache:</span></div>\n\
<div class=\"line\">            currLight.fCachedImplicitLight = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Mark the light as being explicitly connected:</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> useImplicitPlug(thisMObject(), currLight.fAttrUseImplicit);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() ) {</div>\n\
<div class=\"line\">                useImplicitPlug.<a name=\"a351\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// trigger additional refresh of view to make sure shadow maps are updated</span></div>\n\
<div class=\"line\">            refreshView();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Helper function to trigger a viewport refresh</span></div>\n\
<div class=\"line\"><span class=\"comment\">    This can be used when we need shadow maps calculated for lights outside the default light list</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::refreshView()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a name=\"a352\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac7296da94b1d0b659833fc653a6af10e\">MGlobal::mayaState</a>() != <a name=\"a353\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#afb0008b4212928b7913ba9cfc64fe88ba347100316aff63bf166232d8145a44f6\">MGlobal::kBatch</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a> view = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a3cda809eff914b04ff47de958c365f09\">M3dView::active3dView</a>();</div>\n\
<div class=\"line\">        view.<a name=\"a354\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a733fc93c61bcc5c95614fa6ef66ddbd7\">refresh</a>( <span class=\"keyword\">true</span> <span class=\"comment\">/*all views*/</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/*force*/</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    When a shader light is driven either by an explicit light connection or has been bound</span></div>\n\
<div class=\"line\"><span class=\"comment\">    once to a scene light while in &quot;Automatic Bind&quot; mode, we need to make all attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">    uneditable in the attribute editor.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    This function locks and unlocks light parameters as connection come and go:</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::setLightParameterLocking(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo, <span class=\"keywordtype\">bool</span> locked, <span class=\"keywordtype\">bool</span> refreshAE)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (LightParameterInfo::TConnectableParameters::const_iterator idxIter=lightInfo.fConnectableParameters.begin();</div>\n\
<div class=\"line\">        idxIter != lightInfo.fConnectableParameters.end();</div>\n\
<div class=\"line\">        ++idxIter)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> parameterIndex((*idxIter).first);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html\">MUniformParameter</a> param = fUniformParameters.getElement(parameterIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> uniformPlug(param.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter.html#ab6d4ca450bab408a98a5803c0dbaa747\">getPlug</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!uniformPlug.isNull())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> uniformAttribute(uniformPlug.attribute());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!uniformAttribute.isHidden()) {</div>\n\
<div class=\"line\">                uniformPlug.setLocked(locked);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( refreshAE ) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// When the locking is done during the render, the AE is not always properly refreshed</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a2c877a6e116f8fd3a6e76387403c023a\">MGlobal::executeCommandOnIdle</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;setAttr \\&quot;&quot;</span>) + uniformPlug.name() + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot; -lock &quot;</span>) + (locked ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;true&quot;</span>) : MString(<span class=\"stringliteral\">&quot;false&quot;</span>)) + MString(<span class=\"stringliteral\">&quot;;&quot;</span>) );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::turnOffLight(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> kOffColor[4] = {0.0f, 0.0f, 0.0f, 0.0f};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    LightParameterInfo::TConnectableParameters::const_iterator it;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (it = lightInfo.fConnectableParameters.begin();</div>\n\
<div class=\"line\">        it != lightInfo.fConnectableParameters.end(); ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> parameterIndex = it-&gt;first;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> parameterType  = it-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (parameterType)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightEnable:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsBool(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            <span class=\"comment\">//setParameterAsScalar(parameterIndex, false);</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightAmbientColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightSpecularColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightDiffuseColor:</div>\n\
<div class=\"line\">            <span class=\"comment\">//setParameterAsVector(parameterIndex, (float*)kOffColor);</span></div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloatArray((<span class=\"keywordtype\">float</span>*)kOffColor,4);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightIntensity:</div>\n\
<div class=\"line\">            <span class=\"comment\">//setParameterAsScalar(parameterIndex, 0.0f);</span></div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloat(0.0f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Transfer light parameter values from a draw context light info to all shader parameters</span></div>\n\
<div class=\"line\"><span class=\"comment\">    of the specified light group. Uses the drawContextParameterNames acceleration structure</span></div>\n\
<div class=\"line\"><span class=\"comment\">    to iterate quickly through relevant draw context parameters.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::connectLight(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* lightParam, ERenderType renderType)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* txtManager = theRenderer ? theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>() : NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> positionCount = 0;</div>\n\
<div class=\"line\">    <a name=\"_a355\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> position;</div>\n\
<div class=\"line\">    <a name=\"_a356\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> direction;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> intensity = 1.0f;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> decayRate = 0.0f;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> color(1.0f, 1.0f, 1.0f);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> globalShadowsOn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> localShadowsOn = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> shadowResource = { NULL };</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> releaseShadowResource = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> shadowResource1 = { NULL };</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> releaseShadowResource1 = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <a name=\"_a357\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> shadowViewProj;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> shadowColor;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> shadowBias = 0.0f;</div>\n\
<div class=\"line\">    <a name=\"_a358\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html\">MAngle</a> hotspot(40.0, <a name=\"a359\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html#abceb2331ad056e3c5ad27894199a49edae77f5ca99dc21b7dfd533074906e0a67\">MAngle::kDegrees</a>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html\">MAngle</a> falloff(0.0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ELightType lightType = getLightType(lightParam);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Looping on the uniform parameters reduces the processing time by not</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// enumerating light parameters that are not used by the shader.</span></div>\n\
<div class=\"line\">    LightParameterInfo::TConnectableParameters::const_iterator it    = lightInfo.fConnectableParameters.begin();</div>\n\
<div class=\"line\">    LightParameterInfo::TConnectableParameters::const_iterator itEnd = lightInfo.fConnectableParameters.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; it != itEnd; ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> parameterIndex = it-&gt;first;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> parameterType  = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (parameterType == eLightType) {</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsInt(lightType != eDefaultLight? (<span class=\"keywordtype\">int</span>)lightType : eDirectionalLight);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (parameterType == eLightEnable) {</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsBool(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; params(drawContextParameterNames(lightType, parameterType, lightParam));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (params.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (parameterType == eLightShadowOn)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// This light has no concept of shadows.</span></div>\n\
<div class=\"line\">                fUniformParameters.getElement(parameterIndex).setAsBool(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> p = 0; p &lt; params.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++p)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pname = params[p];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206\">MHWRender::MLightParameterInformation::StockParameterSemantic</a> semantic = lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a37a7621bc6d9453902d95132fbbe2101\">parameterSemantic</a>( pname );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Pull off values with position, direction, intensity or color</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// semantics</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> floatVals;</div>\n\
<div class=\"line\">            <a name=\"_a360\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> intVals;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> (semantic)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a3305693a0baf5df5ae2efc000aa9c017\">MHWRender::MLightParameterInformation::kWorldPosition</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                position += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a>( floatVals[0], floatVals[1], floatVals[2] );</div>\n\
<div class=\"line\">                ++positionCount;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4006a71da7e8283c7211624c49022eea\">MHWRender::MLightParameterInformation::kWorldDirection</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                direction = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>( floatVals[0], floatVals[1], floatVals[2] );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae19f0601680f2872a292474ab3088b4f\">MHWRender::MLightParameterInformation::kIntensity</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                intensity = floatVals[0];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a0be6585329840971e20d964386187935\">MHWRender::MLightParameterInformation::kDecayRate</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                decayRate = floatVals[0];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206afc0133ebaa6c307b2388ecf5f72f6fdf\">MHWRender::MLightParameterInformation::kColor</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                color[0] = floatVals[0];</div>\n\
<div class=\"line\">                color[1] = floatVals[1];</div>\n\
<div class=\"line\">                color[2] = floatVals[2];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"comment\">// Parameter type extraction for shadow maps</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206aca46ea808cc9f011b3f4f014ec9040f3\">MHWRender::MLightParameterInformation::kGlobalShadowOn</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, intVals );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (intVals.<a name=\"a361\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">                    globalShadowsOn = (intVals[0] != 0) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a4852662e5cbf7f64d85133baa57386ab\">MHWRender::MLightParameterInformation::kShadowOn</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, intVals );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (intVals.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">                    localShadowsOn = (intVals[0] != 0) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ae05ca22a699a25e0d2030a7a440ecbbe\">MHWRender::MLightParameterInformation::kShadowViewProj</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, shadowViewProj);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a6053be989430b7fbd8b07f51528e8df4\">MHWRender::MLightParameterInformation::kShadowMap</a>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ((shadowResource.texture == NULL)&amp;&amp;(parameterType == eLightShadowMap)&amp;&amp; (lightType != ePointLight))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Will create a new MTexture object</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Do it only once per light</span></div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, shadowResource );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ((shadowResource1.texture == NULL)&amp;&amp;(parameterType == ePointLightShadowMap) &amp;&amp; (lightType == ePointLight))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Will create a new MTexture object</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Do it only once per light</span></div>\n\
<div class=\"line\">                    lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, shadowResource1 );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ac1cd724f83701837aee2364b308a9ed2\">MHWRender::MLightParameterInformation::kShadowColor</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>( pname, floatVals );</div>\n\
<div class=\"line\">                shadowColor[0] = floatVals[0];</div>\n\
<div class=\"line\">                shadowColor[1] = floatVals[1];</div>\n\
<div class=\"line\">                shadowColor[2] = floatVals[2];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206ace22882d5498baf50154a878321e7953\">MHWRender::MLightParameterInformation::kShadowBias</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>(pname,floatVals);</div>\n\
<div class=\"line\">                shadowBias = floatVals[0];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a69b7eb958dd9600fc657a046524e2371\">MHWRender::MLightParameterInformation::kCosConeAngle</a>:</div>\n\
<div class=\"line\">                lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>(pname,floatVals);</div>\n\
<div class=\"line\">                hotspot = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html\">MAngle</a>(acos(floatVals[0]), <a name=\"a362\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html#abceb2331ad056e3c5ad27894199a49edacbf42b42e59efcda5e100ade7d4df2f5\">MAngle::kRadians</a>);</div>\n\
<div class=\"line\">                falloff = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html\">MAngle</a>(acos(floatVals[1]), <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html#abceb2331ad056e3c5ad27894199a49edacbf42b42e59efcda5e100ade7d4df2f5\">MAngle::kRadians</a>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Compute an average position in case we connected an area</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// light to a shader light that cannot handle the 4 corners:</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (positionCount &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            position[0] /= (float)positionCount;</div>\n\
<div class=\"line\">            position[1] /= (float)positionCount;</div>\n\
<div class=\"line\">            position[2] /= (float)positionCount;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (parameterType)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightAmbientColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightSpecularColor:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightDiffuseColor:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// For swatch and headlamp, we need to tone down the color if it is driving an ambient light:</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (renderType != RENDER_SCENE &amp;&amp; lightInfo.mLightType == eAmbientLight)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    color[0] *= 0.15f;</div>\n\
<div class=\"line\">                    color[1] *= 0.15f;</div>\n\
<div class=\"line\">                    color[2] *= 0.15f;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">//update color</span></div>\n\
<div class=\"line\">                fUniformParameters.getElement(parameterIndex).setAsFloatArray((<span class=\"keywordtype\">float</span>*)&amp;color[0], 3);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightPosition:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightAreaPosition0:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightAreaPosition1:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightAreaPosition2:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightAreaPosition3:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloatArray((<span class=\"keywordtype\">float</span>*)&amp;position[0], 3);</div>\n\
<div class=\"line\">            positionCount = 0;</div>\n\
<div class=\"line\">            position = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightIntensity:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloat(intensity);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eDecayRate:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloat(decayRate);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightDirection:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloatArray((<span class=\"keywordtype\">float</span>*)&amp;direction[0], 3);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightShadowMapBias:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloat(shadowBias);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightShadowColor:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloatArray((<span class=\"keywordtype\">float</span>*)&amp;shadowColor[0], 3);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightShadowOn:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Do an extra check to make sure we have an up-to-date shadow map.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// If not, disable shadows.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> localShadowsDirty = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> intVals;</div>\n\
<div class=\"line\">            lightParam-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#aa3237e2138596c256a541816278b402f\">getParameter</a>(<a name=\"a363\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html#a4726f61be6b8b7b5983b153374914206a022e27b9cdda6282fe11b0a803d714f5\">MHWRender::MLightParameterInformation::kShadowDirty</a>, intVals );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (intVals.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">                localShadowsDirty = (intVals[0] != 0) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsBool(globalShadowsOn &amp;&amp; localShadowsOn &amp;&amp; !localShadowsDirty);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightShadowViewProj:</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> matrix[4][4];</div>\n\
<div class=\"line\">            shadowViewProj.<a name=\"a364\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#afc8a36464bb71526e9d2bc0361f643cf\">get</a>(matrix);</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloatArray((<span class=\"keywordtype\">float</span>*)&amp;matrix[0], 16);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightShadowMap:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// For shadow map parameter, we store the texture to the user data</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// so we can reuse it during the updateParameters routine</span></div>\n\
<div class=\"line\">            UniformUserData* userData = (UniformUserData*)fUniformParameters.getElement(parameterIndex).userData();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (userData &amp;&amp; (lightType != ePointLight))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (txtManager &amp;&amp; userData-&gt;fTexture) {</div>\n\
<div class=\"line\">                    txtManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(userData-&gt;fTexture);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                userData-&gt;fTexture = shadowResource.texture;</div>\n\
<div class=\"line\">                releaseShadowResource = <span class=\"keyword\">false</span>; <span class=\"comment\">// userData takes ownership of the texture</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                fUniformParameters.getElement(parameterIndex).setDirty();</div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                userData-&gt;fTexture = NULL;</div>\n\
<div class=\"line\">                fUniformParameters.getElement(parameterIndex).setDirty();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> ePointLightShadowMap:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// For shadow map parameter, we store the texture to the user data</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// so we can reuse it during the updateParameters routine</span></div>\n\
<div class=\"line\">                UniformUserData* userData = (UniformUserData*)fUniformParameters.getElement(parameterIndex).userData();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (userData &amp;&amp; (lightType == ePointLight))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (txtManager &amp;&amp; userData-&gt;fTexture) {</div>\n\
<div class=\"line\">                        txtManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(userData-&gt;fTexture);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    userData-&gt;fTexture = shadowResource1.texture;</div>\n\
<div class=\"line\">                    releaseShadowResource1 = <span class=\"keyword\">false</span>; <span class=\"comment\">// userData takes ownership of the texture</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    fUniformParameters.getElement(parameterIndex).setDirty();</div>\n\
<div class=\"line\">                } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    userData-&gt;fTexture = NULL;</div>\n\
<div class=\"line\">                    fUniformParameters.getElement(parameterIndex).setDirty();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightHotspot:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloat(<span class=\"keywordtype\">float</span>(hotspot.asRadians()));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> eLightFalloff:</div>\n\
<div class=\"line\">            fUniformParameters.getElement(parameterIndex).setAsFloat(<span class=\"keywordtype\">float</span>(falloff.asRadians()));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(releaseShadowResource &amp;&amp; txtManager &amp;&amp; shadowResource.texture) {</div>\n\
<div class=\"line\">        txtManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(shadowResource.texture);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(releaseShadowResource1 &amp;&amp; txtManager &amp;&amp; shadowResource1.texture) {</div>\n\
<div class=\"line\">        txtManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>(shadowResource1.texture);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Explicitely disconnect an explicit light connection:</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::disconnectLight(<span class=\"keywordtype\">int</span> lightIndex)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(lightIndex &lt; (<span class=\"keywordtype\">int</span>)fLightParameters.size())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LightParameterInfo&amp; currLight = fLightParameters[lightIndex];</div>\n\
<div class=\"line\">        currLight.fIsDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Unlock all light parameters:</span></div>\n\
<div class=\"line\">        setLightParameterLocking(currLight, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Flush implicit cache:</span></div>\n\
<div class=\"line\">        setLightRequiresShadows(currLight.fCachedImplicitLight, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        currLight.fCachedImplicitLight = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Disconnect the light from the connection placeholder:</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> thisDependNode;</div>\n\
<div class=\"line\">            thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(thisMObject());</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisLightConnectionPlug = thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(currLight.fAttrConnectedLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Find the light connected as source to this plug:</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> srcCnxArray;</div>\n\
<div class=\"line\">                thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(srcCnxArray,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (srcCnxArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> sourcePlug = srcCnxArray[0];</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a> DG;</div>\n\
<div class=\"line\">                    DG.<a name=\"a365\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#aee585c763e12aa6277000a028dbfa619\">disconnect</a>(sourcePlug, thisLightConnectionPlug);</div>\n\
<div class=\"line\">                    DG.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    setLightRequiresShadows(sourcePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// trigger additional refresh of view to make sure shadow maps are updated</span></div>\n\
<div class=\"line\">                    refreshView();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//Helper function to set light requires shadow on/off</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::setLightRequiresShadows(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; lightObject, <span class=\"keywordtype\">bool</span> requiresShadow)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!lightObject.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">//fprintf(stderr, &quot;Clear implicit light path on disconnect light: %s\\n&quot;, MFnDagNode( lightObject ).fullPathName().asChar());</span></div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">            theRenderer-&gt;<a name=\"a366\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ac777540ab7b1bca5d51f7d03e62b4643\">setLightRequiresShadows</a>( lightObject, requiresShadow );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Set the dirty flag on a specific shader light when the user changes</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the light connection settings in order to refresh the shader light</span></div>\n\
<div class=\"line\"><span class=\"comment\">// bindings at the next redraw.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> GLSLShaderNode::setDependentsDirty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; plugBeingDirtied, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp; affectedPlugs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> shaderLightIndex = 0; shaderLightIndex &lt; fLightParameters.size(); ++shaderLightIndex )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> implicitLightPlug(thisMObject(), shaderLightInfo.fAttrUseImplicit);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( implicitLightPlug == plugBeingDirtied ) {</div>\n\
<div class=\"line\">            shaderLightInfo.fIsDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> connectedLightPlug(thisMObject(), shaderLightInfo.fAttrConnectedLight);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( connectedLightPlug == plugBeingDirtied ) {</div>\n\
<div class=\"line\">            shaderLightInfo.fIsDirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a367\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#abd7d1dad4e4f0b922bf5ac4fc9c0230a\">MPxHardwareShader::setDependentsDirty</a>(plugBeingDirtied, affectedPlugs);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Populates the set of light parameters that need to be refreshed from the shader parameter</span></div>\n\
<div class=\"line\"><span class=\"comment\">    values in this redraw. This includes all parameters in any light group that was marked as</span></div>\n\
<div class=\"line\"><span class=\"comment\">    being dirty, and can also include parameters from clean groups if the rendering context</span></div>\n\
<div class=\"line\"><span class=\"comment\">    is swatch or default light since the light binding can be overridden.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    Light groups will get dirty in the following scenarios:</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - A notification from a connected light shape was received</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - A scene light was explicitely connected or disconnected</span></div>\n\
<div class=\"line\"><span class=\"comment\">        - Last draw was done in swatch or default scene light context</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::getLightParametersToUpdate(std::set&lt;int&gt;&amp; parametersToUpdate, ERenderType renderType)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> thisDependNode;</div>\n\
<div class=\"line\">    thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(thisMObject());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> shaderLightIndex = 0; shaderLightIndex &lt; fLightParameters.size(); ++shaderLightIndex )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> LightParameterInfo&amp; shaderLightInfo = fLightParameters[shaderLightIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> needUpdate = (shaderLightInfo.fIsDirty || renderType != RENDER_SCENE);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(!needUpdate) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisLightConnectionPlug = thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(shaderLightInfo.fAttrConnectedLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            needUpdate = thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (needUpdate)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            LightParameterInfo::TConnectableParameters::const_iterator it = shaderLightInfo.fConnectableParameters.begin();</div>\n\
<div class=\"line\">            LightParameterInfo::TConnectableParameters::const_iterator itEnd = shaderLightInfo.fConnectableParameters.end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; it != itEnd; ++it)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                parametersToUpdate.insert(it-&gt;first);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (renderType == RENDER_SCENE)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// If light is implicit, it stays dirty (as we do not control</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// what happens with the lights and need to react quickly)</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depFn( thisMObject() );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> useImplicitPlug = depFn.findPlug( shaderLightInfo.fAttrUseImplicit, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( !useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() ) {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> useImplicit;</div>\n\
<div class=\"line\">                    useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( useImplicit );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!useImplicit)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Light will be cleaned. And we are not implicit.</span></div>\n\
<div class=\"line\">                        (<span class=\"keyword\">const_cast&lt;</span>LightParameterInfo&amp;<span class=\"keyword\">&gt;</span>(shaderLightInfo)).fIsDirty = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::clearLightConnectionData(<span class=\"keywordtype\">bool</span> refreshAE)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Unlock all light parameters.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; fLightParameters.size(); ++i) {</div>\n\
<div class=\"line\">        fLightParameters[i].fCachedImplicitLight = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>();</div>\n\
<div class=\"line\">        setLightParameterLocking(fLightParameters[i], <span class=\"keyword\">false</span>, refreshAE);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fLightNames.setLength(0);</div>\n\
<div class=\"line\">    fLightDescriptions.setLength(0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Helper function used by the AE via the GLSLShader command to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    know which light is currently driving a light group. For</span></div>\n\
<div class=\"line\"><span class=\"comment\">    explicitly connected lights, we follow the connection to the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    light shape. For implicit lights, we check if we have a cached</span></div>\n\
<div class=\"line\"><span class=\"comment\">    light in the light info structure.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> GLSLShaderNode::getLightConnectionInfo(<span class=\"keywordtype\">int</span> lightIndex)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(lightIndex &lt; (<span class=\"keywordtype\">int</span>)fLightParameters.size())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LightParameterInfo&amp; currLight = fLightParameters[lightIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> thisDependNode;</div>\n\
<div class=\"line\">        thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(thisMObject());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> thisLightConnectionPlug = thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(currLight.fAttrConnectedLight, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the light connected as source to this plug:</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> srcCnxArray;</div>\n\
<div class=\"line\">            thisLightConnectionPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(srcCnxArray,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (srcCnxArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> sourcePlug = srcCnxArray[0];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> sourcePath;</div>\n\
<div class=\"line\">                <a name=\"a368\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>(sourcePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), sourcePath);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> sourceTransform;</div>\n\
<div class=\"line\">                sourceTransform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(sourcePath.<a name=\"a369\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a13f88add2c589379a22d5aaaa4a39fb4\">transform</a>());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> sourceTransform.name();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If light is currently cached, also return it:</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> useImplicitPlug = thisDependNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>( currLight.fAttrUseImplicit, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() ) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> useImplicit;</div>\n\
<div class=\"line\">            useImplicitPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( useImplicit );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (useImplicit)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Make sure cached light is still in model:</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!currLight.fCachedImplicitLight.isNull())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> lightDagNode(currLight.fCachedImplicitLight, &amp;status);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a6040f0420421c317bced8b857b413f47\">statusCode</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> &amp;&amp; lightDagNode.inModel() ) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> cachedPath;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a422aa5ec02565f757c13fe2873ed25d7\">MDagPath::getAPathTo</a>(currLight.fCachedImplicitLight, cachedPath);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> cachedTransform;</div>\n\
<div class=\"line\">                        cachedTransform.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(cachedPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a13f88add2c589379a22d5aaaa4a39fb4\">transform</a>());</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> cachedTransform.<a name=\"a370\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a049384adbea0396ea2f03d1ad4d69df1\">name</a>();</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (lightIndex == fImplicitAmbientLight)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> glslShaderStrings::getString( glslShaderStrings::kAmbient );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::techniqueHandlesContext(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passIndex = 0; passIndex &lt; fTechniquePassCount; ++passIndex)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( passHandlesContext(context, passIndex) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> GLSLShaderNode::passHandlesContext(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passIndex, <span class=\"keyword\">const</span> RenderItemDesc* renderItemDesc)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    PassSpecMap::const_iterator it = fTechniquePassSpecs.find(passIndex);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (it == fTechniquePassSpecs.end())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> PassSpec&amp; passSpec = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a> &amp; passCtx = context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; passSemantics = passCtx.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isHandled = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passSemIdx = 0; passSemIdx &lt; passSemantics.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &amp;&amp; !isHandled; ++passSemIdx)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; semantic = passSemantics[passSemIdx];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// For color passes, only handle if there isn&#39;t already</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// a global override. This is the same as the default</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// logic for this method in MPxShaderOverride</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> isColorPass = (semantic == <a name=\"a371\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a97ffcfc5e6c4bd512eab6727c58a9ae8\">MHWRender::MPassContext::kColorPassSemantic</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isColorPass)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!passCtx.<a name=\"a372\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a54cb1ff5e4a10ffc51cb05ddab8e69ab\">hasShaderOverride</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(renderItemDesc &amp;&amp; renderItemDesc-&gt;isOverrideNonMaterialItem)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    isHandled = (STRICMP(passSpec.drawContext.asChar(), glslShaderAnnotation::kNonMaterialItemsPass) == 0);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    isHandled = (passSpec.drawContext.length() == 0) || (STRICMP(semantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), passSpec.drawContext.asChar()) == 0);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            isHandled = (STRICMP(semantic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), passSpec.drawContext.asChar()) == 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isHandled &amp;&amp; renderItemDesc &amp;&amp; renderItemDesc-&gt;isOverrideNonMaterialItem)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (renderItemDesc-&gt;isFatLine)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!passSpec.forFatLine)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// This pass is not meant for fat line,</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// accept only if there is no pass with the same drawContext which handles fat line</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> PassSpec passSpecTest = { passSpec.drawContext, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span> };</div>\n\
<div class=\"line\">                    isHandled = (findMatchingPass(context, passSpecTest) == (<span class=\"keywordtype\">unsigned</span> int)-1);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (renderItemDesc-&gt;isFatPoint)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!passSpec.forFatPoint)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// This pass is not meant for fat point,</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// accept only if there is no pass with the same drawContext which handles fat point</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> PassSpec passSpecTest = { passSpec.drawContext, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span> };</div>\n\
<div class=\"line\">                    isHandled = (findMatchingPass(context, passSpecTest) == (<span class=\"keywordtype\">unsigned</span> int)-1);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                isHandled = (!passSpec.forFatLine &amp;&amp; !passSpec.forFatPoint);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> isHandled;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> GLSLShaderNode::findMatchingPass(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> PassSpec&amp; passSpecTest)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    PassSpecMap::const_iterator it = fTechniquePassSpecs.<a name=\"a373\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a1ebac8c16ac95b2b81d78055841992f3\">begin</a>();</div>\n\
<div class=\"line\">    PassSpecMap::const_iterator itEnd = fTechniquePassSpecs.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(; it != itEnd; ++it)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> PassSpec&amp; passSpec = it-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( passSpec.forFatLine == passSpecTest.forFatLine &amp;&amp;</div>\n\
<div class=\"line\">            passSpec.forFatPoint == passSpecTest.forFatPoint &amp;&amp;</div>\n\
<div class=\"line\">            STRICMP(passSpec.drawContext.asChar(), passSpecTest.drawContext.asChar()) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> it-&gt;first;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>) -1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Returns the list of all parameters that are members of UI group at given index</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> GLSLShaderNode::getUIGroupParameters(<span class=\"keywordtype\">int</span> uiGroupIndex)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(uiGroupIndex &gt;= 0 &amp;&amp; (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)uiGroupIndex &lt; fUIGroupParameters.size())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fUIGroupParameters[(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)uiGroupIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Returns the index of the given UI group</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> GLSLShaderNode::getIndexForUIGroupName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; uiGroupName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> findInArray(const_cast&lt;MStringArray&amp;&gt;(fUIGroupNames), uiGroupName, <span class=\"keyword\">false</span> <span class=\"comment\">/*appendIfNotFound*/</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GLSLShaderNode::deleteUniformUserData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html\">MHWRender::MTextureManager</a>* txtManager = theRenderer ? theRenderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>() : NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt;UniformUserData*&gt;::iterator it = fUniformUserData.begin();</div>\n\
<div class=\"line\">    std::vector&lt;UniformUserData*&gt;::iterator itEnd = fUniformUserData.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(; it != itEnd; ++it) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (txtManager &amp;&amp; (*it)-&gt;fTexture) {</div>\n\
<div class=\"line\">            txtManager-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a\">releaseTexture</a>((*it)-&gt;fTexture);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> *it;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fUniformUserData.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* GLSLShaderNode::createUniformUserData(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; parameterName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    UniformUserData* newData = <span class=\"keyword\">new</span> UniformUserData(parameterName);</div>\n\
<div class=\"line\">    fUniformUserData.push_back(newData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">void</span>*)newData;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; GLSLShaderNode::getParameterName(<span class=\"keywordtype\">void</span>* userData)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ((UniformUserData*)userData)-&gt;fParameterName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* GLSLShaderNode::getTexture(<span class=\"keywordtype\">void</span>* userData)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ((UniformUserData*)userData)-&gt;fTexture;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";