var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheSample.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_sample_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheSample.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheSample.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheSample.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVBOProxy.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/Util/Murmur3.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL FUNCTIONS &amp; CLASSES</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ArrayBaseImp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ArrayBaseImp </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> ArrayBase::Callback Callback;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> ArrayBase::Key      Key;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> registerCreationCallback(Callback callback)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        creationCallbacks.push_back(callback);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> unregisterCreationCallback(Callback callback)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Callbacks::iterator it = std::find(</div>\n\
<div class=\"line\">            creationCallbacks.begin(), creationCallbacks.end(), callback);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != creationCallbacks.end()) {</div>\n\
<div class=\"line\">            creationCallbacks.erase(it);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> invokeCreationCallback(<span class=\"keyword\">const</span> Key&amp; key)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Callback&amp; callback : creationCallbacks) {</div>\n\
<div class=\"line\">            (*callback)(key);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> registerDestructionCallback(Callback callback)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        destructionCallbacks.push_back(callback);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> unregisterDestructionCallback(Callback callback)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Callbacks::iterator it = std::find(</div>\n\
<div class=\"line\">            destructionCallbacks.begin(), destructionCallbacks.end(), callback);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != destructionCallbacks.end()) {</div>\n\
<div class=\"line\">            destructionCallbacks.erase(it);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> invokeDestructionCallback(<span class=\"keyword\">const</span> Key&amp; key)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Callback&amp; callback : destructionCallbacks) {</div>\n\
<div class=\"line\">            (*callback)(key);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt;ArrayBase::Callback&gt; Callbacks;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> Callbacks creationCallbacks;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> Callbacks destructionCallbacks;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ArrayBaseImp::Callbacks ArrayBaseImp::creationCallbacks;</div>\n\
<div class=\"line\">ArrayBaseImp::Callbacks ArrayBaseImp::destructionCallbacks;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ArrayRegistryImp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ArrayRegistryImp</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> ArrayBase::Digest     Digest;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> ArrayBase::Key        Key;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> ArrayBase::KeyHash    KeyHash;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> ArrayBase::KeyEqualTo KeyEqualTo;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> ArrayRegistryImp&lt;T&gt;&amp; singleton()</div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fsSingleton; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~ArrayRegistryImp()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Unfortunately, we can&#39;t check that all buffers have been</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// freed here. The reason is Maya does not take the time to</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// clean-up the dependency graph when exiting. Therefore,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// there might still exist some ShapeNode alived at exit time</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and these will indirectly keep these buffers alive.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The way to check that the mechanism is working correctly is</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// therefore to perform the following MEL commands &quot;file -f</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// -new; gpuCache -q -sgs;&quot; and check that everything has</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// been freed. The gpuCache regression test does that.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// assert(fMap.size() == 0);</span></div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mutex&amp; mutex() </div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fMutex; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;T&gt; &gt; lookup(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Caller will accept either readable or non-readable.  First look for non-readable.</span></div>\n\
<div class=\"line\">        std::shared_ptr&lt;Array&lt;T&gt; &gt; ret = lookupNonReadable(digest, size);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">            ret = lookupReadable(digest, size);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;T&gt; &gt; lookupNonReadable(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> Map::const_iterator it = fMapNonReadable.find(Key(size * <span class=\"keyword\">sizeof</span>(T), digest));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != fMapNonReadable.end()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;Array&lt;T&gt; &gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                fMapNonReadable.erase(it);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::shared_ptr&lt;Array&lt;T&gt; &gt;();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; lookupReadable(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> MapReadable::const_iterator it = fMapReadable.find(Key(size * <span class=\"keyword\">sizeof</span>(T), digest));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != fMapReadable.end()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                fMapReadable.erase(it);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt;();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> insert(std::shared_ptr&lt;Array&lt;T&gt; &gt; array)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (array-&gt;isReadable()) {</div>\n\
<div class=\"line\">            fMapReadable.insert(std::make_pair(array-&gt;key(), array-&gt;getReadableArray()));</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            fMapNonReadable.insert(std::make_pair(array-&gt;key(), array));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> removeIfStaled(<span class=\"keyword\">const</span> Key&amp; key, <span class=\"keywordtype\">bool</span> readable)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (readable) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">typename</span> MapReadable::const_iterator it = fMapReadable.find(key);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != fMapReadable.end()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">                std::shared_ptr&lt;Array&lt;T&gt; &gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get rid of the stalled entry so that insert() can</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// work properly.</span></div>\n\
<div class=\"line\">                    fMapReadable.erase(it);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keyword\">typename</span> Map::const_iterator it = fMapNonReadable.find(key);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it != fMapNonReadable.end()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">                std::shared_ptr&lt;Array&lt;T&gt; &gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Get rid of the stalled entry so that insert() can</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// work properly.</span></div>\n\
<div class=\"line\">                    fMapNonReadable.erase(it);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;</div>\n\
<div class=\"line\">        Key,</div>\n\
<div class=\"line\">        std::weak_ptr&lt;Array&lt;T&gt; &gt;,</div>\n\
<div class=\"line\">        KeyHash,</div>\n\
<div class=\"line\">        KeyEqualTo&gt; Map;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;</div>\n\
<div class=\"line\">        Key,</div>\n\
<div class=\"line\">        std::weak_ptr&lt;ReadableArray&lt;T&gt; &gt;,</div>\n\
<div class=\"line\">        KeyHash,</div>\n\
<div class=\"line\">        KeyEqualTo&gt; MapReadable;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> ArrayRegistryImp fsSingleton;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mutex fMutex;</div>\n\
<div class=\"line\">    Map fMapNonReadable;</div>\n\
<div class=\"line\">    MapReadable fMapReadable;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">ArrayRegistryImp&lt;T&gt; ArrayRegistryImp&lt;T&gt;::fsSingleton;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ArrayRegistryImp&lt;IndexBuffer::index_t&gt;;</div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ArrayRegistryImp&lt;float&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS IndexBufferRegistry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>IndexBufferRegistry</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> IndexBuffer::index_t    index_t;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> IndexBuffer::Key        Key;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> IndexBuffer::KeyHash    KeyHash;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> IndexBuffer::KeyEqualTo KeyEqualTo;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> IndexBufferRegistry&amp; singleton()</div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fsSingleton; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~IndexBufferRegistry() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mutex&amp; mutex() </div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fMutex; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::shared_ptr&lt;IndexBuffer&gt; lookup(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> beginIdx,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> endIdx</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Map::const_iterator it = fMap.find(Key(array, beginIdx, endIdx));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != fMap.end()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Get rid of the stalled entry so that insert() can</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// work properly.</span></div>\n\
<div class=\"line\">                fMap.erase(it);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::shared_ptr&lt;IndexBuffer&gt;();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> insert(std::shared_ptr&lt;IndexBuffer&gt; buffer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fMap.insert(</div>\n\
<div class=\"line\">            std::make_pair(</div>\n\
<div class=\"line\">                Key(buffer-&gt;array(), buffer-&gt;beginIdx(), buffer-&gt;endIdx()),</div>\n\
<div class=\"line\">                buffer));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> removeIfStaled(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> beginIdx,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> endIdx</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Map::const_iterator it = fMap.find(Key(array, beginIdx, endIdx));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != fMap.end()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Get rid of the stalled entry so that insert() can</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// work properly.</span></div>\n\
<div class=\"line\">                fMap.erase(it);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbAllocated()</div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fMap.size(); }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbAllocatedBytes()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> bytes = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v : fMap) {</div>\n\
<div class=\"line\">            std::shared_ptr&lt;IndexBuffer&gt; buf = v.second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (buf) {</div>\n\
<div class=\"line\">                bytes += buf-&gt;bytes();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> bytes;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;</div>\n\
<div class=\"line\">        Key,</div>\n\
<div class=\"line\">        std::weak_ptr&lt;IndexBuffer&gt;,</div>\n\
<div class=\"line\">        KeyHash,</div>\n\
<div class=\"line\">        KeyEqualTo</div>\n\
<div class=\"line\">    &gt; Map;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> IndexBufferRegistry fsSingleton;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mutex fMutex;</div>\n\
<div class=\"line\">    Map fMap;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">IndexBufferRegistry IndexBufferRegistry::fsSingleton;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS VertexBufferRegistry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>VertexBufferRegistry</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VertexBuffer::Key Key;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VertexBuffer::KeyHash KeyHash;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> VertexBuffer::KeyEqualTo KeyEqualTo;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> VertexBufferRegistry&amp; singleton()</div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fsSingleton; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~VertexBufferRegistry() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mutex&amp; mutex() </div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fMutex; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::shared_ptr&lt;VertexBuffer&gt; lookup(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp;     array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp;   desc</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Map::const_iterator it = fMap.find(Key(array, desc));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != fMap.end()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Get rid of the stalled entry so that insert() can</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// work properly.</span></div>\n\
<div class=\"line\">                fMap.erase(it);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::shared_ptr&lt;VertexBuffer&gt;();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> insert(std::shared_ptr&lt;VertexBuffer&gt; buffer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fMap.insert(</div>\n\
<div class=\"line\">            std::make_pair(</div>\n\
<div class=\"line\">                Key(buffer-&gt;array(), buffer-&gt;descriptor()),</div>\n\
<div class=\"line\">                buffer));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> removeIfStaled(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp;     array,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp;   desc</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Map::const_iterator it = fMap.find(Key(array, desc));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != fMap.end()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Might return null if the weak_ptr&lt;&gt; is now dangling</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// but not yet removed from the map...</span></div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt; ret = it-&gt;second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Get rid of the stalled entry so that insert() can</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// work properly.</span></div>\n\
<div class=\"line\">                fMap.erase(it);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbAllocated()</div>\n\
<div class=\"line\">    { <span class=\"keywordflow\">return</span> fMap.size(); }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> nbAllocatedBytes()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> bytes = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> Map::value_type&amp; v : fMap) {</div>\n\
<div class=\"line\">            std::shared_ptr&lt;VertexBuffer&gt; buf = v.second.lock();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (buf) {</div>\n\
<div class=\"line\">                bytes += buf-&gt;bytes();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> bytes;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;</div>\n\
<div class=\"line\">        Key,</div>\n\
<div class=\"line\">        std::weak_ptr&lt;VertexBuffer&gt;,</div>\n\
<div class=\"line\">        KeyHash,</div>\n\
<div class=\"line\">        KeyEqualTo</div>\n\
<div class=\"line\">    &gt; Map;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> VertexBufferRegistry fsSingleton;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mutex fMutex;</div>\n\
<div class=\"line\">    Map fMap;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">VertexBufferRegistry VertexBufferRegistry::fsSingleton;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ArrayBase</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ArrayBase::registerCreationCallback(Callback callback)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ArrayBaseImp::registerCreationCallback(callback);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ArrayBase::unregisterCreationCallback(Callback callback)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ArrayBaseImp::unregisterCreationCallback(callback);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ArrayBase::registerDestructionCallback(Callback callback)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ArrayBaseImp::registerDestructionCallback(callback);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ArrayBase::unregisterDestructionCallback(Callback callback)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ArrayBaseImp::unregisterDestructionCallback(callback);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ArrayBase::ArrayBase(<span class=\"keywordtype\">size_t</span> bytes, <span class=\"keyword\">const</span> Digest&amp; digest, <span class=\"keywordtype\">bool</span> isReadable)</div>\n\
<div class=\"line\">    : fKey(bytes, digest)</div>\n\
<div class=\"line\">    , fIsReadable(isReadable)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ArrayBaseImp::invokeCreationCallback(fKey);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ArrayBase::~ArrayBase()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ArrayBaseImp::invokeDestructionCallback(fKey);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ArrayReadInterface</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ArrayReadInterface&lt;IndexBuffer::index_t&gt;;</div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ArrayReadInterface&lt;float&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS Array</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">Array&lt;T&gt;::~Array()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock(ArrayRegistryImp&lt;T&gt;::singleton().mutex());</div>\n\
<div class=\"line\">    ArrayRegistryImp&lt;T&gt;::singleton().removeIfStaled(key(), isReadable());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>Array&lt;IndexBuffer::index_t&gt;;</div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>Array&lt;float&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ReadableArray</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ReadableArray&lt;IndexBuffer::index_t&gt;;</div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ReadableArray&lt;float&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ArrayRegistry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">std::mutex&amp; ArrayRegistry&lt;T&gt;::mutex()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ArrayRegistryImp&lt;T&gt;::singleton().mutex();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">std::shared_ptr&lt;Array&lt;T&gt; &gt; ArrayRegistry&lt;T&gt;::lookup(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;T&gt; &gt; result =</div>\n\
<div class=\"line\">        ArrayRegistryImp&lt;T&gt;::singleton().lookup(digest, size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    assert(!result || result-&gt;digest() == digest);</div>\n\
<div class=\"line\">    assert(!result || result-&gt;bytes()  == size * <span class=\"keyword\">sizeof</span>(T));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">std::shared_ptr&lt;Array&lt;T&gt; &gt; ArrayRegistry&lt;T&gt;::lookupNonReadable(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;T&gt; &gt; result =</div>\n\
<div class=\"line\">        ArrayRegistryImp&lt;T&gt;::singleton().lookupNonReadable(digest, size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    assert(!result || result-&gt;digest() == digest);</div>\n\
<div class=\"line\">    assert(!result || result-&gt;bytes()  == size * <span class=\"keyword\">sizeof</span>(T));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"> std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt;  ArrayRegistry&lt;T&gt;::lookupReadable(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Digest&amp; digest,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> size</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; result =</div>\n\
<div class=\"line\">        ArrayRegistryImp&lt;T&gt;::singleton().lookupReadable(digest, size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    assert(!result || result-&gt;digest() == digest);</div>\n\
<div class=\"line\">    assert(!result || result-&gt;bytes()  == size * <span class=\"keyword\">sizeof</span>(T));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ArrayRegistry&lt;T&gt;::insert(</div>\n\
<div class=\"line\">    std::shared_ptr&lt;Array&lt;T&gt; &gt; array</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ArrayRegistryImp&lt;T&gt;::singleton().insert(array);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ArrayRegistry&lt;IndexBuffer::index_t&gt;;</div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>ArrayRegistry&lt;float&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS SharedArray</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>SharedArray&lt;T&gt;::MakeSharedEnabler : <span class=\"keyword\">public</span> SharedArray&lt;T&gt; {</div>\n\
<div class=\"line\">    MakeSharedEnabler(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> GPUCache::shared_array&lt;T&gt; &amp;data,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> size,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Digest &amp;digest</div>\n\
<div class=\"line\">    ) : SharedArray&lt;T&gt;(</div>\n\
<div class=\"line\">            data,</div>\n\
<div class=\"line\">            size,</div>\n\
<div class=\"line\">            digest</div>\n\
<div class=\"line\">    ) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt;</div>\n\
<div class=\"line\">SharedArray&lt;T&gt;::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::shared_array&lt;T&gt;&amp; data, <span class=\"keywordtype\">size_t</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute the Murmur3 cryptographic hash-key.</span></div>\n\
<div class=\"line\">    Digest digest;</div>\n\
<div class=\"line\">    Alembic::Util::MurmurHash3_x64_128(</div>\n\
<div class=\"line\">        data.get(), size * <span class=\"keyword\">sizeof</span>(T), <span class=\"keyword\">sizeof</span>(T), digest.words);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> create(data, digest, size);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt;</div>\n\
<div class=\"line\">SharedArray&lt;T&gt;::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::shared_array&lt;T&gt;&amp; data, Digest digest, <span class=\"keywordtype\">size_t</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We first look if a similar array already exists in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cache. If so, we return the cached array to promote sharing as</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// much as possible.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;ReadableArray&lt;T&gt; &gt; ret;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; lock(ArrayRegistry&lt;T&gt;::mutex());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ret = ArrayRegistry&lt;T&gt;::lookupReadable(digest, size);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">            ret = std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">                data, size, digest);</div>\n\
<div class=\"line\">            ArrayRegistry&lt;T&gt;::insert(ret);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">SharedArray&lt;T&gt;::~SharedArray()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> T* SharedArray&lt;T&gt;::get()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fData.get();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>SharedArray&lt;IndexBuffer::index_t&gt;;</div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class </span>SharedArray&lt;float&gt;;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS IndexBuffer</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>IndexBuffer::MakeSharedEnabler: <span class=\"keyword\">public</span> IndexBuffer {</div>\n\
<div class=\"line\">    MakeSharedEnabler(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> beginIdx,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> endIdx</div>\n\
<div class=\"line\">    ): IndexBuffer(</div>\n\
<div class=\"line\">            array,</div>\n\
<div class=\"line\">            beginIdx,</div>\n\
<div class=\"line\">            endIdx</div>\n\
<div class=\"line\">    ) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;IndexBuffer&gt; IndexBuffer::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; array,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> beginIdx,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> endIdx</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We first look if a similar array already exists in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cache. If so, we return the cached array to promote sharing as</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// much as possible.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;IndexBuffer&gt; ret;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">            IndexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ret = IndexBufferRegistry::singleton().lookup(</div>\n\
<div class=\"line\">            array, beginIdx, endIdx);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">            ret = std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">                array, beginIdx, endIdx);</div>\n\
<div class=\"line\">            IndexBufferRegistry::singleton().insert(ret);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> IndexBuffer::nbAllocated()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">        IndexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> IndexBufferRegistry::singleton().nbAllocated();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> IndexBuffer::nbAllocatedBytes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">        IndexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> IndexBufferRegistry::singleton().nbAllocatedBytes();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">IndexBuffer::~IndexBuffer()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">        IndexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\">    IndexBufferRegistry::singleton().removeIfStaled(</div>\n\
<div class=\"line\">        fArray, fBeginIdx, fEndIdx);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> IndexBuffer::ReplaceArrayInstance(std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; newArray)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(ArrayBase::KeyEqualTo()(fArray-&gt;key(), newArray-&gt;key()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fArray != newArray) {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;Array&lt;index_t&gt; &gt;&amp; nonConstArray = <span class=\"keyword\">const_cast&lt;</span>std::shared_ptr&lt;Array&lt;index_t&gt; <span class=\"keyword\">&gt;</span>&amp; &gt;(fArray);</div>\n\
<div class=\"line\">        nonConstArray = newArray;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS VertexBuffer</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>VertexBuffer::MakeSharedEnabler: <span class=\"keyword\">public</span> VertexBuffer{</div>\n\
<div class=\"line\">    MakeSharedEnabler(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp;     array,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp;   desc</div>\n\
<div class=\"line\">    ): VertexBuffer(</div>\n\
<div class=\"line\">            array,</div>\n\
<div class=\"line\">            desc</div>\n\
<div class=\"line\">    ) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;VertexBuffer&gt;</div>\n\
<div class=\"line\">VertexBuffer::createPositions(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; array)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> create(array,</div>\n\
<div class=\"line\">                  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>(</div>\n\
<div class=\"line\">                      <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&quot;</span>),</div>\n\
<div class=\"line\">                      <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>,</div>\n\
<div class=\"line\">                      <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>, 3));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;VertexBuffer&gt;</div>\n\
<div class=\"line\">VertexBuffer::createNormals(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; array)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> create(array,</div>\n\
<div class=\"line\">                  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>(</div>\n\
<div class=\"line\">                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;&quot;</span>),</div>\n\
<div class=\"line\">                      <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a227e8416235cd3b43077ca91504a463f\">MHWRender::MGeometry::kNormal</a>,</div>\n\
<div class=\"line\">                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>, 3));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;VertexBuffer&gt;</div>\n\
<div class=\"line\">VertexBuffer::createUVs(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; array)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> create( array,</div>\n\
<div class=\"line\">                   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>(</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;mayaUVIn&quot;</span>),</div>\n\
<div class=\"line\">                       <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MHWRender::MGeometry::kTexture</a>,</div>\n\
<div class=\"line\">                       <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>, 2));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;VertexBuffer&gt;</div>\n\
<div class=\"line\">VertexBuffer::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp;     array,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a>&amp;   desc)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We first look if a similar array already exists in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// cache. If so, we return the cached array to promote sharing as</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// much as possible.</span></div>\n\
<div class=\"line\">    std::shared_ptr&lt;VertexBuffer&gt; ret;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">            VertexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ret = VertexBufferRegistry::singleton().lookup(array, desc);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ret) {</div>\n\
<div class=\"line\">            ret = std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">                array, desc);</div>\n\
<div class=\"line\">            VertexBufferRegistry::singleton().insert(ret);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VertexBuffer::nbAllocated()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">        VertexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VertexBufferRegistry::singleton().nbAllocated();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> VertexBuffer::nbAllocatedBytes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">        VertexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VertexBufferRegistry::singleton().nbAllocatedBytes();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">VertexBuffer::~VertexBuffer()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock(</div>\n\
<div class=\"line\">        VertexBufferRegistry::singleton().mutex());</div>\n\
<div class=\"line\">    VertexBufferRegistry::singleton().removeIfStaled(</div>\n\
<div class=\"line\">        fArray, fDescriptor);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VertexBuffer::ReplaceArrayInstance(std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; newArray)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(ArrayBase::KeyEqualTo()(fArray-&gt;key(), newArray-&gt;key()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fArray != newArray) {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;Array&lt;float&gt; &gt;&amp; nonConstArray = <span class=\"keyword\">const_cast&lt;</span>std::shared_ptr&lt;Array&lt;float&gt; <span class=\"keyword\">&gt;</span>&amp; &gt;(fArray);</div>\n\
<div class=\"line\">        nonConstArray = newArray;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS ShapeSample</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>ShapeSample::MakeSharedEnabler: <span class=\"keyword\">public</span> ShapeSample {</div>\n\
<div class=\"line\">    MakeSharedEnabler(</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span>                visibility</div>\n\
<div class=\"line\">    ):ShapeSample(</div>\n\
<div class=\"line\">            timeInSeconds,</div>\n\
<div class=\"line\">            numWires,</div>\n\
<div class=\"line\">            numVerts,</div>\n\
<div class=\"line\">            wireVertIndices,</div>\n\
<div class=\"line\">            triangleVertIndices,</div>\n\
<div class=\"line\">            positions,</div>\n\
<div class=\"line\">            boundingBox,</div>\n\
<div class=\"line\">            diffuseColor,</div>\n\
<div class=\"line\">            visibility</div>\n\
<div class=\"line\">    ) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MakeSharedEnabler(</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span>                visibility</div>\n\
<div class=\"line\">    ):ShapeSample(</div>\n\
<div class=\"line\">            timeInSeconds,</div>\n\
<div class=\"line\">            numWires,</div>\n\
<div class=\"line\">            numVerts,</div>\n\
<div class=\"line\">            wireVertIndices,</div>\n\
<div class=\"line\">            triangleVertIndices,</div>\n\
<div class=\"line\">            positions,</div>\n\
<div class=\"line\">            boundingBox,</div>\n\
<div class=\"line\">            diffuseColor,</div>\n\
<div class=\"line\">            visibility</div>\n\
<div class=\"line\">    ) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ShapeSample::ShapeSample(</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                visibility</div>\n\
<div class=\"line\">) </div>\n\
<div class=\"line\">    : fTimeInSeconds(timeInSeconds),</div>\n\
<div class=\"line\">      fNumWires(numWires),</div>\n\
<div class=\"line\">      fNumVerts(numVerts),</div>\n\
<div class=\"line\">      fWireVertIndices(wireVertIndices),</div>\n\
<div class=\"line\">      fTriangleVertIndices(</div>\n\
<div class=\"line\">      std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;(1, triangleVertIndices)),</div>\n\
<div class=\"line\">      fPositions(positions),</div>\n\
<div class=\"line\">      fBoundingBox(boundingBox),</div>\n\
<div class=\"line\">      fDiffuseColor(diffuseColor),</div>\n\
<div class=\"line\">      fVisibility(visibility),</div>\n\
<div class=\"line\">      fBoundingBoxPlaceHolder(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert( wireVertIndices ? (wireVertIndices-&gt;numIndices() == 2 * fNumWires) : (fNumWires == 0) );</div>\n\
<div class=\"line\">    assert( positions ? (positions-&gt;numVerts() == fNumVerts) : (fNumVerts == 0) );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ShapeSample::ShapeSample(</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                visibility</div>\n\
<div class=\"line\">) </div>\n\
<div class=\"line\">    : fTimeInSeconds(timeInSeconds),</div>\n\
<div class=\"line\">      fNumWires(numWires),</div>\n\
<div class=\"line\">      fNumVerts(numVerts),</div>\n\
<div class=\"line\">      fWireVertIndices(wireVertIndices),</div>\n\
<div class=\"line\">      fTriangleVertIndices(triangleVertIndices),</div>\n\
<div class=\"line\">      fPositions(positions),</div>\n\
<div class=\"line\">      fBoundingBox(boundingBox),</div>\n\
<div class=\"line\">      fDiffuseColor(diffuseColor),</div>\n\
<div class=\"line\">      fVisibility(visibility),</div>\n\
<div class=\"line\">      fBoundingBoxPlaceHolder(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert( wireVertIndices ? (wireVertIndices-&gt;numIndices() == 2 * fNumWires) : (fNumWires == 0) );</div>\n\
<div class=\"line\">    assert( positions ? (positions-&gt;numVerts() == fNumVerts) : (fNumVerts == 0) );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">ShapeSample::~ShapeSample()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> ShapeSample::numTriangles()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> result = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">size_t</span> i=0; i&lt;numIndexGroups(); ++i) {</div>\n\
<div class=\"line\">        result += numTriangles(i);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ShapeSample::setNormals(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; normals</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert( !normals || normals-&gt;numVerts() == fNumVerts );</div>\n\
<div class=\"line\">    fNormals = normals;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ShapeSample::setUVs(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; uvs</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert( !uvs || uvs-&gt;numVerts() == fNumVerts );</div>\n\
<div class=\"line\">    fUVs = uvs;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;ShapeSample&gt; ShapeSample::create(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">            timeInSeconds,</div>\n\
<div class=\"line\">            numWires, numVerts,</div>\n\
<div class=\"line\">            wireVertIndices, triangleVertIndices,</div>\n\
<div class=\"line\">            positions, boundingBox, diffuseColor, visibility);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;ShapeSample&gt; ShapeSample::create(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numWires,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> numVerts,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;IndexBuffer&gt;&amp;  wireVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::vector&lt;std::shared_ptr&lt;IndexBuffer&gt; &gt;&amp;  triangleVertIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;VertexBuffer&gt;&amp; positions,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;       diffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">            timeInSeconds,</div>\n\
<div class=\"line\">            numWires, numVerts,</div>\n\
<div class=\"line\">            wireVertIndices, triangleVertIndices,</div>\n\
<div class=\"line\">            positions, boundingBox, diffuseColor, visibility);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS XformSample</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>XformSample::MakeSharedEnabler : <span class=\"keyword\">public</span> XformSample {</div>\n\
<div class=\"line\">    MakeSharedEnabler(<span class=\"keywordtype\">double</span> timeInSeconds,</div>\n\
<div class=\"line\">                      <span class=\"keyword\">const</span> <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp;xform,</div>\n\
<div class=\"line\">                      <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> &amp;boundingBox,</div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">bool</span> visibility) :</div>\n\
<div class=\"line\">            XformSample(</div>\n\
<div class=\"line\">                    timeInSeconds,</div>\n\
<div class=\"line\">                    xform,</div>\n\
<div class=\"line\">                    boundingBox,</div>\n\
<div class=\"line\">                    visibility) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::shared_ptr&lt;XformSample&gt; XformSample::create(</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>              timeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;      xform,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>&amp; boundingBox,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                visibility)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MakeSharedEnabler&gt;(</div>\n\
<div class=\"line\">            timeInSeconds, xform, boundingBox, visibility);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";