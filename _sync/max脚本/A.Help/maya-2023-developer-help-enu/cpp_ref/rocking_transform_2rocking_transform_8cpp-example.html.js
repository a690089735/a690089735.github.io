var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: rockingTransform/rockingTransform.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'rocking_transform_2rocking_transform_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: rockingTransform/rockingTransform.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">rockingTransform/rockingTransform.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Example custom transform:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This plug-in implements an example custom transform that</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  can be used to perform a rocking motion around the X axis.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Geometry of any rotation can be made a child of this transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  to demonstrate the effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The plug-in contains two pieces:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  1. The custom transform node -- rockingTransformNode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  2. The custom transformation matrix -- rockingTransformMatrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  These classes are used together in order to implement the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rocking motion.  Note that the rock attribute is stored outside</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  of the regular transform attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MEL usage:</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    // Create a rocking transform and make a rotated plane</span></div>\n\
<div class=\"line\"><span class=\"comment\">    // its child.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    loadPlugin rockingTransform;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    file -f -new;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    polyPlane -w 1 -h 1 -sx 10 -sy 10 -ax 0 1 0 -cuv 2 -ch 1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    select -r pPlane1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    rotate -r -ws -15 -15 -15 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    createNode rockingTransform;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    parent pPlane1 rockingTransform1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    setAttr rockingTransform1.rockx 55;</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;rockingTransform.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef M_PI</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize our static class variables</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> rockingTransformNode::aRockInX;</div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> rockingTransformNode::id(kRockingTransformNodeID);</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> rockingTransformMatrix::id(kRockingTransformMatrixID);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of our custom transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Constructor for matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformMatrix::rockingTransformMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    rockXValue = 0.0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Creator for matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *rockingTransformMatrix::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Utility method for getting the rock</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  motion in the X axis</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> rockingTransformMatrix::getRockInX()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> rockXValue;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Utility method for setting the rock</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  motion in the X axis</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> rockingTransformMatrix::setRockInX( <span class=\"keywordtype\">double</span> rock )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    rockXValue = rock;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method will be used to return information to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya.  Use the attributes which are outside of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the regular transform attributes to build a new</span></div>\n\
<div class=\"line\"><span class=\"comment\">// matrix.  This new matrix will be passed back to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> rockingTransformMatrix::asMatrix()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ParentClass::asMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> rockingTransformMatrix::asMatrix(<span class=\"keywordtype\">double</span> percent)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> m(*<span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Apply the percentage to the matrix components</span></div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> trans = m.translation();</div>\n\
<div class=\"line\">    trans *= percent;</div>\n\
<div class=\"line\">    m.translateTo( trans );</div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> rotatePivotTrans = m.rotatePivot();</div>\n\
<div class=\"line\">    rotatePivotTrans = rotatePivotTrans * percent;</div>\n\
<div class=\"line\">    m.setRotatePivot( rotatePivotTrans );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> scalePivotTrans = m.scalePivotTranslation();</div>\n\
<div class=\"line\">    scalePivotTrans = scalePivotTrans * percent;</div>\n\
<div class=\"line\">    m.setScalePivotTranslation( scalePivotTrans );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Apply the percentage to the rotate value.  Same</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// as above + the percentage gets applied</span></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> quat = rotation();</div>\n\
<div class=\"line\">    DegreeRadianConverter conv;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> newTheta = conv.degreesToRadians( getRockInX() );</div>\n\
<div class=\"line\">    quat.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html#a5528153a2165b66b22fe88ddf666707e\">setToXAxis</a>( newTheta );</div>\n\
<div class=\"line\">    m.rotateBy( quat );</div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> eulRotate = m.eulerRotation();</div>\n\
<div class=\"line\">    m.rotateTo(  eulRotate * percent, <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Apply the percentage to the scale</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> s(scale(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>));</div>\n\
<div class=\"line\">    s.x = 1.0 + (s.x - 1.0)*percent;</div>\n\
<div class=\"line\">    s.y = 1.0 + (s.y - 1.0)*percent;</div>\n\
<div class=\"line\">    s.z = 1.0 + (s.z - 1.0)*percent;</div>\n\
<div class=\"line\">    m.scaleTo(s, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> m.asMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> rockingTransformMatrix::asRotateMatrix()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> Ro = rotateOrientationValue.asMatrix();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> R  = rotationValue.asMatrix();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> Rr = preRotation().asMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> Rt;</div>\n\
<div class=\"line\">    Rt[3][0] = rotatePivotTranslationValue.x;</div>\n\
<div class=\"line\">    Rt[3][1] = rotatePivotTranslationValue.y;</div>\n\
<div class=\"line\">    Rt[3][2] = rotatePivotTranslationValue.z;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> Rp;</div>\n\
<div class=\"line\">    Rp[3][0] = rotatePivotValue.x;</div>\n\
<div class=\"line\">    Rp[3][1] = rotatePivotValue.y;</div>\n\
<div class=\"line\">    Rp[3][2] = rotatePivotValue.z;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> RpInv;</div>\n\
<div class=\"line\">    RpInv[3][0] = -rotatePivotValue.x;</div>\n\
<div class=\"line\">    RpInv[3][1] = -rotatePivotValue.y;</div>\n\
<div class=\"line\">    RpInv[3][2] = -rotatePivotValue.z;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (RpInv * Ro * R * Rr * Rp * Rt);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rockingTransformMatrix::setRotatePivot(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> &amp;rotatePivot, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8\">MSpace::Space</a> space, <span class=\"keywordtype\">bool</span> balance)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> newPivot(rotatePivot);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (space != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (space == <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8aa8283f05e25167dc028384785199709a\">MSpace::kPostTransform</a>) {</div>\n\
<div class=\"line\">            newPivot *= asMatrixInverse();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        newPivot *= asScaleMatrix();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (balance) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> Ro = rotateOrientationValue.asMatrix();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> R = rotationValue.asMatrix();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> Rr = preRotation().asMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> Rp;</div>\n\
<div class=\"line\">        Rp[3][0] = newPivot.x;</div>\n\
<div class=\"line\">        Rp[3][1] = newPivot.y;</div>\n\
<div class=\"line\">        Rp[3][2] = newPivot.z;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> RpInv;</div>\n\
<div class=\"line\">        RpInv[3][0] = -newPivot.x;</div>\n\
<div class=\"line\">        RpInv[3][1] = -newPivot.y;</div>\n\
<div class=\"line\">        RpInv[3][2] = -newPivot.z;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> leftMat = RpInv * Ro * R * Rr * Rp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> mat = leftMat.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>() * asRotateMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        rotatePivotTranslationValue[0] = mat[3][0];</div>\n\
<div class=\"line\">        rotatePivotTranslationValue[1] = mat[3][1];</div>\n\
<div class=\"line\">        rotatePivotTranslationValue[2] = mat[3][2];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    rotatePivotValue = newPivot;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This method returns the local rotation used by rotate manipulator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> rockingTransformMatrix::preRotation()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    DegreeRadianConverter conv;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> newTheta = conv.degreesToRadians(getRockInX());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> quat; quat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html#a5528153a2165b66b22fe88ddf666707e\">setToXAxis</a>(newTheta);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> quat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of our custom transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Constructor of the transform node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformNode::rockingTransformNode()</div>\n\
<div class=\"line\">: ParentClass()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Post constructor method.  Have access to *this.  Node setup</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  operations that do not go into the initialize() method should go</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  here.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> rockingTransformNode::postConstructor()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  Make sure the parent takes care of anything it needs.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    ParentClass::postConstructor();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> aRockInXPlug(thisMObject(), aRockInX);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method computes the transformation matrix for a passed data block</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  and places the output into a passed transformation matrix.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">rockingTransformNode::computeLocalTransformation(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *xform,</div>\n\
<div class=\"line\">                                                 <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> &amp;block)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  Get the value from the aRockInX attribute</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> rockInXHandle = block.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a> (aRockInX, &amp;status);</div>\n\
<div class=\"line\">    ReturnOnError(status);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Store it in the transformation matrix so that when asked for it through</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// asMatrix() it can construct the desired matrix</span></div>\n\
<div class=\"line\">    rockingTransformMatrix* ltm = <span class=\"keyword\">dynamic_cast&lt;</span>rockingTransformMatrix*<span class=\"keyword\">&gt;</span>(xform);</div>\n\
<div class=\"line\">    assert(ltm);</div>\n\
<div class=\"line\">    ltm-&gt;setRockInX(rockInXHandle.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ac1983b7d41a8dae60dc5b1eb9f44a53c\">asDouble</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ParentClass::computeLocalTransformation(xform, block);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The transform&#39;s compute method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rockingTransformNode::compute( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block )</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( (plug.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a03ffd0b722e887108a542da8a5936146\">MPxTransform::matrix</a>)</div>\n\
<div class=\"line\">    ||  (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a2654111fc6ea20feea7625efab825cbe\">MPxTransform::inverseMatrix</a>)</div>\n\
<div class=\"line\">    ||  (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#aae8765de146707c69dc4c25709b15456\">MPxTransform::worldMatrix</a>)</div>\n\
<div class=\"line\">    ||  (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a5750667fd6aab34b3019c86af66e56c1\">MPxTransform::worldInverseMatrix</a>)</div>\n\
<div class=\"line\">    ||  (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a9dcee4efddda947e5dfa916e0e672ca9\">MPxTransform::parentMatrix</a>)</div>\n\
<div class=\"line\">    ||  (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a60307c6c66af3a3e889bf0dde83ef54e\">MPxTransform::parentInverseMatrix</a>) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        rockingTransformMatrix *ltm = getRockingTransformMatrix();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ltm) {</div>\n\
<div class=\"line\">            computeLocalTransformation(ltm, block);</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Failed to get rock transform matrix&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transform.html#a2cc8b9cc759a6b194bd5b9b31f65a5e8\">MPxTransform::compute</a>(plug, block);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Destructor of the rocking transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformNode::~rockingTransformNode()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method that returns the new transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *rockingTransformNode::createTransformationMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method that returns a new transform node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *rockingTransformNode::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformNode();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Node initialize method.  We configure node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  attributes here.  Static method so</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  *this is not available.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rockingTransformNode::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numFn;</div>\n\
<div class=\"line\">    aRockInX = numFn.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;RockInX&quot;</span>, <span class=\"stringliteral\">&quot;rockx&quot;</span>, <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>, 0.0);</div>\n\
<div class=\"line\">    numFn.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    numFn.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a136a9a94f034ea314330ae1ee919e9fa\">setAffectsWorldSpace</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    addAttribute(aRockInX);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Need to update matrix when attribute aRockInX is modified</span></div>\n\
<div class=\"line\">    attributeAffects(aRockInX, matrix);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  This is required so that the validateAndSet method is called</span></div>\n\
<div class=\"line\">    mustCallValidateAndSet(aRockInX);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Debugging method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* rockingTransformNode::className()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;rockingTransformNode&quot;</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Reset transformation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>  rockingTransformNode::resetTransformation (<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp;matrix)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ParentClass::resetTransformation( matrix );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Reset transformation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>  rockingTransformNode::resetTransformation (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *resetMatrix )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ParentClass::resetTransformation( resetMatrix );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A very simple implementation of validAndSetValue().  No lock</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or limit checking on the rocking attribute is done in this method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// If you wish to apply locks and limits to the rocking attribute, you</span></div>\n\
<div class=\"line\"><span class=\"comment\">// would follow the approach taken in the rockingTransformCheck example.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Meaning you would implement methods similar to:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  * applyRotationLocks();</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  * applyRotationLimits();</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  * checkAndSetRotation();</span></div>\n\
<div class=\"line\"><span class=\"comment\">// but for the rocking attribute.  The method checkAndSetRotation()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// would be called below rather than updating the rocking attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">// directly.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rockingTransformNode::validateAndSetValue(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp; handle)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  Make sure that there is something interesting to process.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( plug == aRockInX )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> block = forceCache();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> blockHandle = block.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(plug, &amp;status);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update our new rock in x value</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> rockInX = handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ac1983b7d41a8dae60dc5b1eb9f44a53c\">asDouble</a>();</div>\n\
<div class=\"line\">        blockHandle.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(rockInX);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Update the custom transformation matrix to the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// right rock value.</span></div>\n\
<div class=\"line\">        rockingTransformMatrix *ltm = getRockingTransformMatrix();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ltm)</div>\n\
<div class=\"line\">            ltm-&gt;setRockInX(rockInX);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Failed to get rock transform matrix&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        blockHandle.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Mark the matrix as dirty so that DG information</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// will update.</span></div>\n\
<div class=\"line\">        dirtyMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Allow processing for other attributes</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ParentClass::validateAndSetValue(plug, handle);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method for returning the current rocking transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformMatrix *rockingTransformNode::getRockingTransformMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    rockingTransformMatrix *ltm = (rockingTransformMatrix *) transformationMatrixPtr();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ltm;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Utility class</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> DegreeRadianConverter::degreesToRadians( <span class=\"keywordtype\">double</span> degrees )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">     <span class=\"keywordflow\">return</span> degrees * ( M_PI/ 180.0 );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> DegreeRadianConverter::radiansToDegrees( <span class=\"keywordtype\">double</span> radians )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> radians * (180.0/M_PI);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";