var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: atomImportExport/atomNodeNameReplacer.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'atom_import_export_2atom_node_name_replacer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: atomImportExport/atomNodeNameReplacer.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">atomImportExport/atomNodeNameReplacer.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  File Name:  atomNodeNameReplacer.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   The atomeNodeNameReplacer is a class that returns a new node name based upon how we are replacing it ,either by string replacment</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  or by finding it in a map file.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MCommandResult.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomNodeNameReplacer.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kSemiColonChar   = <span class=\"charliteral\">&#39;;&#39;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kSpaceChar       = <span class=\"charliteral\">&#39; &#39;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kTabChar         = <span class=\"charliteral\">&#39;\\t&#39;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kHashChar        = <span class=\"charliteral\">&#39;#&#39;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kNewLineChar     = <span class=\"charliteral\">&#39;\\n&#39;</span>;</div>\n\
<div class=\"line\"><span class=\"comment\">//const char kSlashChar     = &#39;/&#39;;    // not used, keep for now</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kBraceLeftChar   = <span class=\"charliteral\">&#39;{&#39;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kBraceRightChar  = <span class=\"charliteral\">&#39;}&#39;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> kDoubleQuoteChar = <span class=\"charliteral\">&#39;&quot;&#39;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">streamIO::streamIO()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The constructor.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> streamIO::asDouble (std::ifstream &amp;clipFile)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Reads the next bit of valid data as a double.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    advance(clipFile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> value;</div>\n\
<div class=\"line\">    clipFile &gt;&gt; value;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> streamIO::isNextNumeric(std::ifstream &amp;clipFile)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The method skips past whitespace and comments and checks if</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the next character is numeric.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      true is returned if the character is numeric.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> numeric = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    advance(clipFile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> next = clipFile.peek();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((next &gt;= <span class=\"charliteral\">&#39;0&#39;</span> &amp;&amp; next &lt;= <span class=\"charliteral\">&#39;9&#39;</span>)</div>\n\
<div class=\"line\">        ||(next == <span class=\"charliteral\">&#39;.&#39;</span>) || (next == <span class=\"charliteral\">&#39;-&#39;</span>)) {</div>\n\
<div class=\"line\">        numeric = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> numeric;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> streamIO::advance (std::ifstream &amp;clipFile) </div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The method skips past all of the whitespace and commented lines</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      in the std::ifstream. It will also ignore semi-colons.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (clipFile) {</div>\n\
<div class=\"line\">        clipFile &gt;&gt; ws;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> next = clipFile.peek();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (next == kSemiColonChar) {</div>\n\
<div class=\"line\">            clipFile.ignore(1, kSemiColonChar);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (next == kHashChar) {</div>\n\
<div class=\"line\">            clipFile.ignore(INT_MAX, kNewLineChar);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span>* streamIO::asWord (std::ifstream &amp;clipFile, <span class=\"keywordtype\">bool</span> includeWS <span class=\"comment\">/* false */</span>)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Returns the next string of characters in an std::ifstream. The string</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      ends when whitespace or a semi-colon is encountered. If the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      includeWS argument is true, the string will not end if a white</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      space character is encountered.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      If a double quote is detected &#39;&quot;&#39;, then verything up to the next </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      double quote will be returned.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method returns a pointer to a static variable, so its contents</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      should be used immediately.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      </span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> kBufLength = 1024;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">char</span> *<span class=\"keywordtype\">string</span> = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!<span class=\"keywordtype\">string</span>) <span class=\"keywordtype\">string</span> = (<span class=\"keywordtype\">char</span> *)malloc(kBufLength*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">char</span>)+1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    advance(clipFile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *c = string;</div>\n\
<div class=\"line\">    clipFile.read (c, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*c == kDoubleQuoteChar) {</div>\n\
<div class=\"line\">        clipFile.read(c, 1);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span>(!clipFile.eof() &amp;&amp; (*c != kDoubleQuoteChar)) {</div>\n\
<div class=\"line\">            c++;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> len = c-string;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (len &gt;= kBufLength) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> newLen = 2*kBufLength;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">string</span> = (<span class=\"keywordtype\">char</span> *)realloc(<span class=\"keywordtype\">string</span>, newLen*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">char</span>)+1);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!<span class=\"keywordtype\">string</span>)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                c = <span class=\"keywordtype\">string</span> + len;</div>\n\
<div class=\"line\">                kBufLength = newLen;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            clipFile.read(c, 1);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">//  Get the case of the &#39;{&#39; or &#39;}&#39; character</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*c == kBraceLeftChar || *c == kBraceRightChar) {</div>\n\
<div class=\"line\">            c++;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>(!clipFile.eof() &amp;&amp; (*c != kSemiColonChar)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!includeWS &amp;&amp; ((*c == kSpaceChar) || (*c == kTabChar))) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                c++;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> len = c-string;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (len &gt;= kBufLength) {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> newLen = 2*kBufLength;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">string</span> = (<span class=\"keywordtype\">char</span> *)realloc(<span class=\"keywordtype\">string</span>, newLen*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">char</span>)+1);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!<span class=\"keywordtype\">string</span>)</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    c = <span class=\"keywordtype\">string</span> + len;</div>\n\
<div class=\"line\">                    kBufLength = newLen;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                clipFile.read(c, 1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    *c = 0x00;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">string</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span> streamIO::asChar (std::ifstream &amp;clipFile)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Returns the next character of interest in the std::ifstream. All </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      whitespace and commented lines are ignored.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    advance(clipFile);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> clipFile.get();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> streamIO::asInt (std::ifstream &amp;clipFile)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Reads the next bit of valid data as a int.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    advance(clipFile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> value;</div>\n\
<div class=\"line\">    clipFile &gt;&gt; value;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">short</span> streamIO::asShort (std::ifstream &amp;clipFile)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Reads the next bit of valid data as a short.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    advance(clipFile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">short</span> value;</div>\n\
<div class=\"line\">    clipFile &gt;&gt; value;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//use the filetest command to see if the file is really a file</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> streamIO::doesFileExist(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;fileName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fileName.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_command_result.html\">MCommandResult</a> result;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> isFile;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <span class=\"stringliteral\">&quot;filetest -f &quot;</span> + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>)  + fileName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (MS::kSuccess == <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, result, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_command_result.html#a1d1cfd8ffb84e947f82999c682b666a7a9bb31be73c01d40428195449f62588ac\">MCommandResult::kInt</a> == result.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_command_result.html#a34b602f9c751b7b914f13ad705c4bf6f\">resultType</a>()) </div>\n\
<div class=\"line\">            { </div>\n\
<div class=\"line\">                result.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_command_result.html#a17f2e31d8f0b42db03dcdb11896f5ce7\">getResult</a>(isFile);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> (isFile  &gt; 0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomNodeNameReplacer::atomNodeNameReplacer(ReplaceType type,<a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> &amp;sList, std::vector&lt;unsigned int&gt; &amp;depths,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;prefix, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;suffix, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;search,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;replace, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;mapFile)</div>\n\
<div class=\"line\">    :fReplaceType(type), fPrefix(prefix), fSuffix(suffix), fSearch(search), fReplace(replace), fMapFile(mapFile),</div>\n\
<div class=\"line\">     fSelectionList(sList),</div>\n\
<div class=\"line\">     fDepths(depths),</div>\n\
<div class=\"line\">     fAddMainPlaceholderNamespace(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fReplaceType == eMapFile &amp;&amp; fMapFile.length() &gt;0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fileName = fMapFile;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(doesFileExist(fileName) == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fReplaceType = eHierarchy;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        std::ifstream mapAnim(fileName.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(mapAnim.is_open() == <span class=\"keyword\">false</span>) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fReplaceType = eHierarchy;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(mapAnim.good() == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fReplaceType = eHierarchy;</div>\n\
<div class=\"line\">            <span class=\"comment\">//the fle is open so close it</span></div>\n\
<div class=\"line\">            mapAnim.close();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> *dataType;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> current = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (!mapAnim.eof())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            advance(mapAnim);</div>\n\
<div class=\"line\">            dataType = asWord(mapAnim);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(dataType != NULL)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> string(dataType);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(<span class=\"keywordtype\">string</span>.length() &gt;0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(current)</div>\n\
<div class=\"line\">                        fCurrentNames.append(<span class=\"keywordtype\">string</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> fNewNames.append(<span class=\"keywordtype\">string</span>);</div>\n\
<div class=\"line\">                    current =  !current;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fNewNames.length() != fCurrentNames.length() &amp;&amp; fCurrentNames.length() &gt; 0)</div>\n\
<div class=\"line\">            fCurrentNames.remove(fCurrentNames.length() -1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mapAnim.close();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  0 , 0,bob 0,dude,  1, none, 2, what, </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  find 0,1</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*  </span></div>\n\
<div class=\"line\"><span class=\"comment\">    typedef multimap&lt;unsigned int, MString&gt; ChildNodeName;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    typedef multimap&lt;unsigned int, ChildNodeName&gt; StringVec;</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    StringMap map;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    MapOfNodeNames nodeNames;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    </span></div>\n\
<div class=\"line\"><span class=\"comment\">    unsigned int numObjects = sList.length();</span></div>\n\
<div class=\"line\"><span class=\"comment\">    for (unsigned int i = 0; i &lt; numObjects; i++) </span></div>\n\
<div class=\"line\"><span class=\"comment\">    {</span></div>\n\
<div class=\"line\"><span class=\"comment\">        MDagPath path;</span></div>\n\
<div class=\"line\"><span class=\"comment\">        MObject node;</span></div>\n\
<div class=\"line\"><span class=\"comment\">        if (sList.getDagPath (i, path) == MS::kSuccess) {</span></div>\n\
<div class=\"line\"><span class=\"comment\">            MItDag dagIt (MItDag::kDepthFirst);</span></div>\n\
<div class=\"line\"><span class=\"comment\">            dagIt.reset (path, MItDag::kDepthFirst);</span></div>\n\
<div class=\"line\"><span class=\"comment\">            for (; !dagIt.isDone(); dagIt.next()) {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                MDagPath thisPath;</span></div>\n\
<div class=\"line\"><span class=\"comment\">                if (dagIt.getPath (thisPath) != MS::kSuccess) {</span></div>\n\
<div class=\"line\"><span class=\"comment\">                    continue;</span></div>\n\
<div class=\"line\"><span class=\"comment\">                }</span></div>\n\
<div class=\"line\"><span class=\"comment\">                MString name = thisPath.partialPathName;</span></div>\n\
<div class=\"line\"><span class=\"comment\">                unsigned int depth = dagIt.depth();</span></div>\n\
<div class=\"line\"><span class=\"comment\">                unsigned int child = thisPath.childCount();</span></div>\n\
<div class=\"line\"><span class=\"comment\">            }</span></div>\n\
<div class=\"line\"><span class=\"comment\">        }</span></div>\n\
<div class=\"line\"><span class=\"comment\">        else if (sList.getDependNode (i, node) == MS::kSuccess) {</span></div>\n\
<div class=\"line\"><span class=\"comment\">            //write (animFile, node,haveAnimatableChannels);</span></div>\n\
<div class=\"line\"><span class=\"comment\">        }</span></div>\n\
<div class=\"line\"><span class=\"comment\">    }</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">atomNodeNameReplacer::setAddMainPlaceholderNamespace(<span class=\"keywordtype\">bool</span> val)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fAddMainPlaceholderNamespace = val;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomNodeNameReplacer::matchByName() <span class=\"comment\">//do we match by name or not?</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fReplaceType == eHierarchy ? <span class=\"keyword\">false</span> : <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> stringSearchAndReplace(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; searchString, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; replaceString, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; originalString)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> newString; <span class=\"comment\">// The result to be returned</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> inputString(originalString); <span class=\"comment\">// The string we are going to do the work on</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> notDone = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> ( notDone )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> iw = inputString.indexW( searchString );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( iw &lt; 0 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            newString += inputString;</div>\n\
<div class=\"line\">            notDone = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> firstPart, secondPart;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( iw &gt; 0 )</div>\n\
<div class=\"line\">                firstPart = inputString.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>( 0, iw-1);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> lastIndex = inputString.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() - 1;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> firstIndex = iw + searchString.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( firstIndex &lt;= lastIndex )</div>\n\
<div class=\"line\">                secondPart = inputString.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ad748626e545fa6db3afc2f61644b5d62\">substringW</a>( firstIndex, lastIndex );</div>\n\
<div class=\"line\">            newString = newString + firstPart + replaceString;</div>\n\
<div class=\"line\">            inputString = secondPart;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> newString;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  atomNodeNameReplacer::replacedName(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;name)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fReplaceType == eSearchReplace)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> newString(name);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fSearch.length() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> inputString(name);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> replaceString(fReplace);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> searchString(fSearch);</div>\n\
<div class=\"line\">            newString = stringSearchAndReplace( searchString, replaceString, inputString );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fPrefix.length() &gt;0)</div>\n\
<div class=\"line\">            newString = fPrefix + newString;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fSuffix.length() &gt; 0)</div>\n\
<div class=\"line\">            newString = newString + fSuffix;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(newString.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt;0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> newString;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> name;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(fReplaceType == eMapFile)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> replacedNameFromMapFileStrings(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> name;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> atomNodeNameReplacer::replacedNameFromMapFileStrings(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;current)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;i&lt;fCurrentNames.length();++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fCurrentNames[i] == current &amp;&amp; i &lt; fNewNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fNewNames[i];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> current;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//this finds the node for a current passed in nodeName</span></div>\n\
<div class=\"line\"><span class=\"comment\">//we assume that we only pass this name in once per load</span></div>\n\
<div class=\"line\"><span class=\"comment\">//since with hierarchies once we resolve a node we remove it so that it doesn&#39;t get resolved more than once</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomNodeNameReplacer::findNode(atomNodeNameReplacer::NodeType nodeType, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> depth, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> childCount)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> list;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> selected = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isDag =  (nodeType == atomNodeNameReplacer::eDag);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isShape = (nodeType == atomNodeNameReplacer::eShape);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isAnimLayer = (nodeType == atomNodeNameReplacer::eAnimLayer);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(matchByName() || nodeType == atomNodeNameReplacer::eDepend || isAnimLayer) <span class=\"comment\">//if depend node or layer  we still match by name</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        nodeName = replacedName(nodeName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fAddMainPlaceholderNamespace) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> tmpName(<span class=\"stringliteral\">&quot;:&quot;</span>);           </div>\n\
<div class=\"line\">            tmpName += nodeName;</div>\n\
<div class=\"line\">            nodeName = tmpName;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        list.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(nodeName); <span class=\"comment\">//add the node to the selection list</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(list.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() != 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//it may be that the passed in node name has a name space, so split it and try again...</span></div>\n\
<div class=\"line\">            <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> nameSpaces;</div>\n\
<div class=\"line\">            nodeName.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;:&#39;</span>,nameSpaces);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = nameSpaces.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(len &gt; 1)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                nodeName = nameSpaces[len -1];</div>\n\
<div class=\"line\">                list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(nodeName);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() == 1)</div>\n\
<div class=\"line\">                    selected = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            selected = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(selected)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//if animlayer don&#39;t worry about selection</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(isAnimLayer)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"comment\">//node is in scene but is it selected?</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(nodeType != atomNodeNameReplacer::eDepend)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">                <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> localStat = list.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(0,dagPath);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(localStat != <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    selected = fSelectionList.hasItem(dagPath);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> depNode;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> localStat = list.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a>( 0, depNode);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(localStat != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    selected = fSelectionList.hasItem(depNode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> selected;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( isDag || isShape)<span class=\"comment\">//do a hierarchy search</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//after some attempts a straight forward algorithm works the best</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//for a given depth we look for the next object off that depth. yes</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//that&#39;s it. works really well if the selections match up</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//and we get the same pruning effect that&#39;s in pastekeys that works</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> i =0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> lastOne = -1;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> length = (int)fSelectionList.length();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(i = 0; i &lt; (int)length;++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> localStat = fSelectionList.getDagPath(i,dagPath);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span> = dagPath.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> selectedIsShape =  <span class=\"keywordtype\">object</span>.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a750b5e8123336c2306a300249b57201d\">MFn::kShape</a>); <span class=\"comment\">//if the current dag is actually a shape</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(localStat != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">//first we handle shapes</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> sceneDepth = fDepths[i];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>((isDag &amp;&amp; selectedIsShape) || (isShape &amp;&amp; (selectedIsShape ==<span class=\"keyword\">false</span>))) <span class=\"comment\">//the saved is a dag but we have a shape, in this case we skip it, or also skip if the opposite</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    selected = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    lastOne = i;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(isShape &amp;&amp; selectedIsShape == <span class=\"keyword\">true</span>) <span class=\"comment\">//both are shapes then they match</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">//TODO need to do a better check here than just shapes</span></div>\n\
<div class=\"line\">                    selected = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    nodeName = dagPath.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">                    lastOne =i;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">//this algorithm here let&#39;s us skip over depths lower then us</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//until we get back up to a depth that we are at.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(sceneDepth &lt; depth)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    selected = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(sceneDepth == depth)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    selected = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    nodeName = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a9aa2e126e83787f285f843fb528d82c6\">partialPathName</a>();</div>\n\
<div class=\"line\">                    lastOne =i;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">//else continue</span></div>\n\
<div class=\"line\">                lastOne =i;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">//remove all of the ones we skipped or used </span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">int</span> k = lastOne;  k &gt;=0 ;--k)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fSelectionList.remove(k);</div>\n\
<div class=\"line\">            fDepths.erase( fDepths.begin( ) + k );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> selected;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">        </div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";