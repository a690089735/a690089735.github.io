var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: vp2BlinnShader/vp2BlinnShader.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'vp2_blinn_shader_2vp2_blinn_shader_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: vp2BlinnShader/vp2BlinnShader.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">vp2BlinnShader/vp2BlinnShader.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cstdlib&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//#include &lt;maya/MUserData.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//#include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Includes for swatch rendering</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWShaderSwatchGenerator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderUtilities.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Viewport 2.0 includes</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxShaderOverride.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStateManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MShaderManager.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef ENABLE_TRACE_API_CALLS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//#define ENABLE_TRACE_API_CALLS 1</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef ENABLE_TRACE_API_CALLS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TRACE_API_CALLS(x) cerr &lt;&lt;(x)&lt;&lt;&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TRACE_API_CALLS(x)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;vp2BlinnShader.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Node id</span></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> vp2BlinnShader::id( 0x00081102 );</div>\n\
<div class=\"line\"><span class=\"comment\">// Node attributes</span></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aColor;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aDiffuse;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aTransparency;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aSpecularColor;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aSpecularRolloff;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aEccentricity;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aNonTexturedColor;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  vp2BlinnShader::aNonTexturedTransparency;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in implementation shows the usage of an MPxShaderOverride for </span></div>\n\
<div class=\"line\"><span class=\"comment\">// a Maya shader node. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The purpose is to show as simple a plug-in as possible without worrying</span></div>\n\
<div class=\"line\"><span class=\"comment\">// about the details of trying to write a shader system.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// As such it attempts to (re)use as many internal VP2 API</span></div>\n\
<div class=\"line\"><span class=\"comment\">// intterfaces and constructs as possible. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In this case the plug-in will use a stock shader instance (MShaderInstance)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// as it&#39;s single internal shader. As part of initialization it will reuse</span></div>\n\
<div class=\"line\"><span class=\"comment\">// internal MShaderInstance utility methods to show how a DX11 shader signature</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can be set as as well as how to return the vertex requirements simply.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// As there is only one shader instance the shader key used is also simplistic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// as it can be a constant value.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Transparency notificaiton is handle by setting the MPxShaderOverride::isTransparent() </span></div>\n\
<div class=\"line\"><span class=\"comment\">// virtual method return value appropriately based on node attribute values.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The code also demonstrates handling of non-textured draw by providing another stock </span></div>\n\
<div class=\"line\"><span class=\"comment\">// MShaderInstance to be returned from MPxShaderOverride::nonTexturedShaderInstance()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It will also handle transparency by appropriately updating the shader instance</span></div>\n\
<div class=\"line\"><span class=\"comment\">// transparency hint using MShaderInstance::setIsTransparent().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For update, the node attributes match a few of the MShaderInstance parameters</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to show DG update and device update. Additional attributes are added to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// show how the non-texture mode shader instance parameters can be driven</span></div>\n\
<div class=\"line\"><span class=\"comment\">// by attribute changes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For drawing, the code reuses the internally provided binding interfaces on</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MShaderInstance as well as the utility geometry drawing method:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MPxShaderOverride::drawGeometry().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For swatch rendering the basic VP2 supplied utility </span></div>\n\
<div class=\"line\"><span class=\"comment\">// MRenderUtilities::renderMaterialViewerGeometry() is used.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (De)registration is shown as part of plug-in (de)initialization, noting</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that the MPxShaderOverride association to the MPxNode node is achieved</span></div>\n\
<div class=\"line\"><span class=\"comment\">// by supplying the same &quot;drawdb/shader&quot; classification for both registration</span></div>\n\
<div class=\"line\"><span class=\"comment\">// interfaces.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">// Node methods</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"keywordtype\">void</span> * vp2BlinnShader::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShader::creator&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> vp2BlinnShader();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">vp2BlinnShader::vp2BlinnShader()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShader::vp2BlinnShader&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">vp2BlinnShader::~vp2BlinnShader()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShader::~vp2BlinnShader&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> vp2BlinnShader::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Shader attributes for the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// They have been created to match internal parameters of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// hardware shader instance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShader::initialize&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> nAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create textured mode input attributes</span></div>\n\
<div class=\"line\">    aColor = nAttr.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a3b53a86b42bc4da537c4be835797c4d5\">createColor</a>( <span class=\"stringliteral\">&quot;color&quot;</span>, <span class=\"stringliteral\">&quot;c&quot;</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.6f, 0.6f, 0.6f);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aDiffuse = nAttr.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;diffuse&quot;</span>, <span class=\"stringliteral\">&quot;dc&quot;</span>, <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a> );</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.8);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aTransparency = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;transparency&quot;</span>, <span class=\"stringliteral\">&quot;tr&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a> );</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aSpecularColor = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a3b53a86b42bc4da537c4be835797c4d5\">createColor</a>( <span class=\"stringliteral\">&quot;specularColor&quot;</span>, <span class=\"stringliteral\">&quot;sc&quot;</span> );</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(1.0f, 1.0f, 1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aSpecularRolloff = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;specularRollOff&quot;</span>, <span class=\"stringliteral\">&quot;sro&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a> );</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.7);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aEccentricity = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;eccentricity&quot;</span>, <span class=\"stringliteral\">&quot;ec&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a> );</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.3);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create non-textured mode input attributes</span></div>\n\
<div class=\"line\">    aNonTexturedColor = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a3b53a86b42bc4da537c4be835797c4d5\">createColor</a>( <span class=\"stringliteral\">&quot;nonTexturedColor&quot;</span>, <span class=\"stringliteral\">&quot;nc&quot;</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(1.0f, 0.0f, 0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aNonTexturedTransparency = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;nonTexturedTransparency&quot;</span>, <span class=\"stringliteral\">&quot;nt&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a> );</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a0810da59cbaac7ecbd26ba0a43d0ac35\">setAffectsAppearance</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create output attributes here</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// outColor is the only output attribute and it is inherited</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// so we do not need to create or add it.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the attributes to the node</span></div>\n\
<div class=\"line\">    addAttribute(aColor);</div>\n\
<div class=\"line\">    addAttribute(aDiffuse);</div>\n\
<div class=\"line\">    addAttribute(aTransparency);</div>\n\
<div class=\"line\">    addAttribute(aSpecularColor);</div>\n\
<div class=\"line\">    addAttribute(aSpecularRolloff);</div>\n\
<div class=\"line\">    addAttribute(aEccentricity);</div>\n\
<div class=\"line\">    addAttribute(aNonTexturedColor);</div>\n\
<div class=\"line\">    addAttribute(aNonTexturedTransparency);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attributeAffects (aColor,           outColor);</div>\n\
<div class=\"line\">    attributeAffects (aDiffuse,         outColor);</div>\n\
<div class=\"line\">    attributeAffects (aTransparency,    outColor);</div>\n\
<div class=\"line\">    attributeAffects (aSpecularColor,   outColor);</div>\n\
<div class=\"line\">    attributeAffects (aSpecularRolloff, outColor);</div>\n\
<div class=\"line\">    attributeAffects (aEccentricity,    outColor);</div>\n\
<div class=\"line\">    attributeAffects (aNonTexturedColor,outColor);</div>\n\
<div class=\"line\">    attributeAffects (aNonTexturedTransparency,outColor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Very simplistic software compute for the Maya software renderer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This code is not the focus of this plug-in example so just</span></div>\n\
<div class=\"line\"><span class=\"comment\">// returns a constant color.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> vp2BlinnShader::compute(</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp;      plug,</div>\n\
<div class=\"line\">      <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShader::compute&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((plug != outColor) &amp;&amp; (plug.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aa2338038d1c59dc4d35f37f918aabfab\">parent</a>() != outColor))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kUnknownParameter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> &amp; color  = block.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( aColor ).<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a5e7d49f6ed0e237f1e9e43b639f06d07\">asFloatVector</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set output color attribute</span></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outColorHandle = block.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( outColor );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>&amp; outColor = outColorHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a5e7d49f6ed0e237f1e9e43b639f06d07\">asFloatVector</a>();</div>\n\
<div class=\"line\">    outColor = color;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    outColorHandle.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Swatch rendering: </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Does not matter the mode for the viewport VP1 or VP2</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Uses material viewer utility which uses the VP2 render to draw the swatch.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> vp2BlinnShader::renderSwatchImage( <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> &amp; outImage )</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Use some sample objects for display</span></div>\n\
<div class=\"line\">        <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> meshSphere(<span class=\"stringliteral\">&quot;meshTeapot&quot;</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> meshShaderball(<span class=\"stringliteral\">&quot;meshShaderball&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> targetW, targetH;</div>\n\
<div class=\"line\">        outImage.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#acab1f6acf34fc74e4d717322fa35241a\">getSize</a>(targetW, targetH);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a73c521cb743ed9cc5a595f29d7428e91\">MHWRender::MRenderUtilities::renderMaterialViewerGeometry</a>(targetW &gt; 128 ? meshShaderball : meshSphere, </div>\n\
<div class=\"line\">                                                                        thisMObject(), </div>\n\
<div class=\"line\">                                                                        outImage, </div>\n\
<div class=\"line\">                                                                        <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#af9563ae2bd890aa0fb7782f626e35bc7a2cec741abb80798c163d0aea01676163\">MHWRender::MRenderUtilities::kPerspectiveCamera</a>, </div>\n\
<div class=\"line\">                                                                        <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#ad15b3d1fb21d3d61911ada0e2bc9b12bab22f7d3eb3e3131a6e8876dccaf3e934\">MHWRender::MRenderUtilities::kSwatchLight</a>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Viewport 2.0 shader override implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"keyword\">class </span>vp2BlinnShaderOverride : <span class=\"keyword\">public</span> <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html\">MHWRender::MPxShaderOverride</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Static method to create a new override</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html\">MHWRender::MPxShaderOverride</a>* Creator(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> vp2BlinnShaderOverride(obj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release the textured and non-textured mode shaders.</span></div>\n\
<div class=\"line\">    ~vp2BlinnShaderOverride()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* theRenderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (theRenderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = theRenderer-&gt;<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fColorShaderInstance)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    shaderMgr-&gt;<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(fColorShaderInstance);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                fColorShaderInstance = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fNonTexturedColorShaderInstance)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(fNonTexturedColorShaderInstance);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                fColorShaderInstance = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 1. Initialize phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For this plug-in we simply set up geometry requirements</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// based on an MShaderInstance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a0212be7dfc693d9d7a0f95ddcb81ba8d\">initialize</a>(<span class=\"keyword\">const</span> MInitContext&amp; initContext,</div>\n\
<div class=\"line\">                       <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_shared_ptr.html\">MSharedPtr&lt;MUserData&gt;</a>&amp;)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::initialize&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fColorShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// This plugin is using the utility method</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// MPxShaderOverride::drawGeometry(). For DX11 drawing,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// a shader signature is required. We use</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the signature from the same MShaderInstance used to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// set the geometry requirements so that the signature</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// will match the requirements.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ac57354226fd39a0000138d98e224d7b3\">addShaderSignature</a>( *fColorShaderInstance );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            <span class=\"comment\">// Set the geometry requirements based on the shader instance</span></div>\n\
<div class=\"line\">            <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#abd43fa3203bf4c9df6e3b3cdb7b4d117\">setGeometryRequirements</a>( *fColorShaderInstance );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Autodesk Maya vp2 Blinn Shader Override&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2. Update Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Access the node attributes and cache the values to update</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// during updateDevice()</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a3b74f9aeed8e4a00450e3d2045b53b39\">updateDG</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span>)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::updateDG&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<span class=\"keywordtype\">object</span> == <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the hardware shader node from the MObject.</span></div>\n\
<div class=\"line\">        vp2BlinnShader *shaderNode = (vp2BlinnShader *) <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#aa23ddc899bfdca52a5b703c3e7a66adb\">MPxHardwareShader::getHardwareShaderPtr</a>( <span class=\"keywordtype\">object</span> );      </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!shaderNode)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Cache any data from the node to local data members.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> node(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;colorR&quot;</span>, <span class=\"keyword\">true</span>).getValue(fDiffuseColor[0]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;colorG&quot;</span>, <span class=\"keyword\">true</span>).getValue(fDiffuseColor[1]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;colorB&quot;</span>, <span class=\"keyword\">true</span>).getValue(fDiffuseColor[2]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;diffuse&quot;</span>, <span class=\"keyword\">true</span>).getValue(fDiffuse);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;transparency&quot;</span>, <span class=\"keyword\">true</span>).getValue(fTransparency);</div>\n\
<div class=\"line\">            fDiffuseColor[3] = 1.0f - fTransparency;</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;specularColorR&quot;</span>, <span class=\"keyword\">true</span>).getValue(fSpecular[0]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;specularColorG&quot;</span>, <span class=\"keyword\">true</span>).getValue(fSpecular[1]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;specularColorB&quot;</span>, <span class=\"keyword\">true</span>).getValue(fSpecular[2]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;specularRollOff&quot;</span>, <span class=\"keyword\">true</span>).getValue(fSpecularRollOff);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;eccentricity&quot;</span>, <span class=\"keyword\">true</span>).getValue(fEccentricity);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;nonTexturedColorR&quot;</span>, <span class=\"keyword\">true</span>).getValue(fNonTextured[0]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;nonTexturedColorG&quot;</span>, <span class=\"keyword\">true</span>).getValue(fNonTextured[1]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;nonTexturedColorB&quot;</span>, <span class=\"keyword\">true</span>).getValue(fNonTextured[2]);</div>\n\
<div class=\"line\">            node.findPlug(<span class=\"stringliteral\">&quot;nonTexturedTransparency&quot;</span>, <span class=\"keyword\">true</span>).getValue(fNonTexturedTransparency);          </div>\n\
<div class=\"line\">            fNonTextured[3] = 1.0f - fNonTexturedTransparency;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2. Update Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Call into utility method to update the shader instance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// when device level update is allowed.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a84ad0250e8df6abe4a2bab23778c24de\">updateDevice</a>()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        updateShaderInstance();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2. Update Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Transparency hint</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ab79d6d7859fceb8fc8b0e4ace1869612\">isTransparent</a>()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::isTransparent&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (fTransparency &gt; 0.0f);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2. Update Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// There is nothing to do at the end of update.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Method is included for debug tracing only.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ae75638d96ce77bea32eb76333b76cbc5\">endUpdate</a>()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::endUpdate&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 3. Draw Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the shader instance used for rendering</span></div>\n\
<div class=\"line\">    <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ad5a9492e13c5e46460e36cf03b5821bc\">shaderInstance</a>()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::shaderInstance&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fColorShaderInstance;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 3. Draw Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bind the shader on activateKey() and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the termination occur in terminateKey().</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a8d7f721e0a413d81bd9c0b4c4bf451a9\">activateKey</a>(<a name=\"_a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; key)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> out(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::activateKey[&quot;</span>);</div>\n\
<div class=\"line\">        out += key;</div>\n\
<div class=\"line\">        out += <span class=\"stringliteral\">&quot;]&quot;</span>;</div>\n\
<div class=\"line\">        TRACE_API_CALLS(out.asChar());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fColorShaderInstance-&gt;bind( context );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 3. Draw Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use custom shader instance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a26fb6e971beb807417cb83a7b2b8268c\">draw</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context,</div>\n\
<div class=\"line\">                 <span class=\"keyword\">const</span> <a name=\"_a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> out(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::draw[Count=&quot;</span>);</div>\n\
<div class=\"line\">        out += renderItemList.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>();</div>\n\
<div class=\"line\">        out += <span class=\"stringliteral\">&quot;]&quot;</span>;</div>\n\
<div class=\"line\">        TRACE_API_CALLS(out);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Activate all the shader passes and draw using internal draw methods.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passCount = fColorShaderInstance-&gt;getPassCount( context );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;passCount; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;activatePass( context, i );</div>\n\
<div class=\"line\">            <a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a96b26e833c1533131841eb2bcb2288a4\">MHWRender::MPxShaderOverride::drawGeometry</a>(context);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 3. Draw Phase</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Unbind / terminate the shader instance here.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a9d3d971a5a62e06fcbac0537c11d33de\">terminateKey</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; key)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> out(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::terminateKey[&quot;</span>);</div>\n\
<div class=\"line\">        out += key;</div>\n\
<div class=\"line\">        out += <span class=\"stringliteral\">&quot;]&quot;</span>;</div>\n\
<div class=\"line\">        TRACE_API_CALLS(out.asChar());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Unbind the shader</span></div>\n\
<div class=\"line\">        fColorShaderInstance-&gt;unbind( context );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// We are using an internal resources so we support all draw APIs</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// automatically.</span></div>\n\
<div class=\"line\">    MHWRender::DrawAPI <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a9c43d7192e56c01d8dde77fabd843a0e\">supportedDrawAPIs</a>()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (MHWRender::kOpenGL | MHWRender::kDirectX11 | MHWRender::kOpenGLCoreProfile);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Supply a shader instance to be used when in non-textured mode. This</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// allows for identification of objects using the &quot;non-textured&quot; mode color.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#addc154cb86dafb4b95301938d97659d8\">nonTexturedShaderInstance</a>(<span class=\"keywordtype\">bool</span> &amp;monitor)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::nonTexturedShaderInstance&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNonTexturedColorShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            monitor = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"comment\">// Mark whether the shader is transparent or not</span></div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setIsTransparent( fNonTexturedTransparency &gt; 0.0f );</div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;diffuse&quot;</span>, 0.8f );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> spec[3] = { 1.0f, 1.0f, 1.0f };</div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;specularColor&quot;</span>, &amp;spec[0]);</div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;eccentricity&quot;</span>, 0.3f);</div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;specularRollOff&quot;</span>, 0.7f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fNonTexturedColorShaderInstance;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the shader using the values cached during DG evaluation</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Called from updateDevice() during update phase.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateShaderInstance()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::updateShaderInstance&quot;</span>);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fColorShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> debugShaderParameters = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (debugShaderParameters)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> list;</div>\n\
<div class=\"line\">                fColorShaderInstance-&gt;parameterList(list);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;list.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a4d63980e4031b0fc366e623868b27ed0\">MHWRender::MShaderInstance::ParameterType</a> ptype = fColorShaderInstance-&gt;parameterType(list[i]);</div>\n\
<div class=\"line\">                    fprintf(stderr, <span class=\"stringliteral\">&quot;Param[%d] = %s. type=%d\\n&quot;</span>, i, list[i].asChar(), ptype);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Update shader to mark it as drawing with transparency or not.</span></div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;setIsTransparent( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ab79d6d7859fceb8fc8b0e4ace1869612\">isTransparent</a>() );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> trans[3] = { fTransparency, fTransparency, fTransparency };       </div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;transparency&quot;</span>, &amp;trans[0]);</div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;diffuse&quot;</span>, fDiffuse);</div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;color&quot;</span>, &amp;fDiffuseColor[0]);</div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;specularColor&quot;</span>, &amp;fSpecular[0]);</div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;eccentricity&quot;</span>, fEccentricity);</div>\n\
<div class=\"line\">            fColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;specularRollOff&quot;</span>, fSpecularRollOff);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fNonTexturedColorShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setIsTransparent( fNonTexturedTransparency &gt; 0.0f );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> trans[3] = { fNonTexturedTransparency, fNonTexturedTransparency, fNonTexturedTransparency };      </div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;transparency&quot;</span>, &amp;trans[0]);</div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;color&quot;</span>, &amp;fNonTextured[0]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Code to create MShaderInstances using a stock internal Blinn shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create one shader for textured mode and one for non-textured mode.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> createShaderInstance()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        TRACE_API_CALLS(<span class=\"stringliteral\">&quot;vp2BlinnShaderOverride::createShaderInstance&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a> *renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer ? renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>() : NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!shaderMgr)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fColorShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fColorShaderInstance = shaderMgr-&gt;<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a75e397b8d02f3da09024156fe70eed44\">getFragmentShader</a>(<span class=\"stringliteral\">&quot;mayaBlinnSurface&quot;</span>, <span class=\"stringliteral\">&quot;outSurfaceFinal&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fNonTexturedColorShaderInstance)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            fNonTexturedColorShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a75e397b8d02f3da09024156fe70eed44\">getFragmentShader</a>(<span class=\"stringliteral\">&quot;mayaBlinnSurface&quot;</span>, <span class=\"stringliteral\">&quot;outSurfaceFinal&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fNonTexturedColorShaderInstance)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fNonTexturedColorShaderInstance-&gt;<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(<span class=\"stringliteral\">&quot;color&quot;</span>, &amp;fNonTextured[0]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Constructor. Simply initialize shader instances for usage.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    vp2BlinnShaderOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>::MPxShaderOverride(obj)</div>\n\
<div class=\"line\">    , fColorShaderInstance(NULL)</div>\n\
<div class=\"line\">    , fNonTexturedColorShaderInstance(NULL)</div>\n\
<div class=\"line\">    , fNonTexturedTransparency(0.0f)</div>\n\
<div class=\"line\">    , fTransparency(0.0f)</div>\n\
<div class=\"line\">    , fDiffuse(0.8f)</div>\n\
<div class=\"line\">    , fEccentricity(0.3f)</div>\n\
<div class=\"line\">    , fSpecularRollOff(0.7f)</div>\n\
<div class=\"line\">    {       </div>\n\
<div class=\"line\">        fDiffuseColor[0] = fDiffuseColor[1] = fDiffuseColor[2] = fDiffuseColor[3] = 0.0f;</div>\n\
<div class=\"line\">        fSpecular[0] = fSpecular[1] = fSpecular[2] = 0.0f;</div>\n\
<div class=\"line\">        fNonTextured[0] = 1.0; fNonTextured[1] = fNonTextured[2] = fNonTextured[3] = 0.0f;</div>\n\
<div class=\"line\">        fNonTexturedTransparency = 1.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a shader instance to use for drawing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        createShaderInstance();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Cached shader inputs values</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fTransparency;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fDiffuse;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fDiffuseColor[4];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fSpecular[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fSpecularRollOff;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fEccentricity;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fShininess[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fNonTextured[4];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fNonTexturedTransparency;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Shader to use to draw with</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *fColorShaderInstance;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Shader to use to draw non-textured with</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *fNonTexturedColorShaderInstance;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Plug-in handling</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> svp2BlinnShaderRegistrantId(<span class=\"stringliteral\">&quot;vp2BlinnShaderRegistrantId&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Note that we use the same drawdb classification for both registerNode()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and registerShaderOverrideCreator() to associate the override with the Maya node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;initializePlugin&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; swatchName = <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_shader_swatch_generator.html#acf0030e7f24277ad6805a14be529539f\">MHWShaderSwatchGenerator::initialize</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> UserClassify( <span class=\"stringliteral\">&quot;shader/surface/utility/:drawdb/shader/surface/vp2BlinnShader:swatch/&quot;</span>+swatchName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;1.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    status = plugin.registerNode( <span class=\"stringliteral\">&quot;vp2BlinnShader&quot;</span>, vp2BlinnShader::id,</div>\n\
<div class=\"line\">                                  vp2BlinnShader::creator, vp2BlinnShader::initialize,</div>\n\
<div class=\"line\">                                  <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7a97e77d194fd5039f88be9cbced6ef2c7\">MPxNode::kHardwareShader</a>, &amp;UserClassify );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register a shader override for this node</span></div>\n\
<div class=\"line\">    <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a7436ee759c9ea5113f5a222085dbfe6e\">MHWRender::MDrawRegistry::registerShaderOverrideCreator</a>(</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;drawdb/shader/surface/vp2BlinnShader&quot;</span>,</div>\n\
<div class=\"line\">        svp2BlinnShaderRegistrantId,</div>\n\
<div class=\"line\">        vp2BlinnShaderOverride::Creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess) <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TRACE_API_CALLS(<span class=\"stringliteral\">&quot;uninitializePlugin&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Unregister the shader node</span></div>\n\
<div class=\"line\">    plugin.deregisterNode( vp2BlinnShader::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Deregister the shader override</span></div>\n\
<div class=\"line\">    status = <a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a11ddbef3eada4895397b8acb6c77eb2e\">MHWRender::MDrawRegistry::deregisterShaderOverrideCreator</a>(</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;drawdb/shader/surface/vp2BlinnShader&quot;</span>, svp2BlinnShaderRegistrantId);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess) <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";