var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: simpleFluidEmitter/simpleFluidEmitter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'simple_fluid_emitter_2simple_fluid_emitter_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: simpleFluidEmitter/simpleFluidEmitter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">simpleFluidEmitter/simpleFluidEmitter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the dependency graph node &quot;simpleFluidEmitter&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This example demonstrates how to use the new MPxFluidEmitterNode class</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to implement most of the functionality in Maya&#39;s standard fluid emitters. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MEL usage:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  createNode simpleFluidEmitter -name simpleFluidEmitter;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // create particle object and connect to the plugin emitter node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  particle -name particles ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  connectDynamic -em simpleFluidEmitter particles;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr &quot;simpleFluidEmitter.rate&quot; 200;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setAttr &quot;simpleFluidEmitter.speed&quot; 25;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  playbackOptions -e -min 0.00 -max 60.0;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  currentTime -e 0;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  play -wait -forward true;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  // make some keyframes on emitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  currentTime 0 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  select -r simpleFluidEmitter ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.tx&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.ty&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.tz&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.rx&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.ry&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.rz&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  currentTime 30 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  move -r -2.011944 6.283524 -2.668834 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  move -r -ls -wd 0 0 12.97635 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rotate -r -os 0 -75.139762 0 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.tx&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.ty&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.tz&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.rx&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.ry&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.rz&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  currentTime 60 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  move -r 0 0 -14.526107 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  move -r 0 -8.130523 0 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rotate -r -os 0 0 78.039751 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rotate -r -os 0 0 53.86918 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.tx&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.ty&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.tz&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.rx&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.ry&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe &quot;simpleFluidEmitter.rz&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;simpleFluidEmitter.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVectorArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDoubleArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnUnitAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnVectorArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDoubleArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnArrayAttrsData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixData.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDynSweptGeometryData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDynSweptTriangle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> simpleFluidEmitter::id( 0x81020 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">simpleFluidEmitter::simpleFluidEmitter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">simpleFluidEmitter::~simpleFluidEmitter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *simpleFluidEmitter::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> simpleFluidEmitter;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> simpleFluidEmitter::initialize()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Initialize the node, create user defined attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( MS::kSuccess );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> simpleFluidEmitter::compute(<span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Fluid emitters do not perform emission in their compute() method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Instead, each fluid to which the emitter is connected will call the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluidEmitter() method once per frame, to allow the emitter to emit</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      directly into the fluid.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      It is ESSENTIAL that the compute routine return MS::kUnknownParameter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      when the &quot;emissionFunction&quot; attribute is being evaluated.  Doing so</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      will trigger the base class default compute() method, which will</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      register this node&#39;s &quot;fluidEmitter&quot; function with the fluid.  The</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      mechanisms for doing this are not exposed through the API, so it is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      important to let the default code handle this case.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      For all other attributes, users can override the compute() method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( plug.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>() == mEmissionFunction )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  ESSENTIAL!  Let the base class default compute method handle this</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kUnknownParameter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  can add custom handling for other attributes here</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kUnknownParameter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> </div>\n\
<div class=\"line\">simpleFluidEmitter::fluidEmitter( </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; fluidObject, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; worldMatrix, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> plugIndex </div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Callback function that gets called once per frame by each fluid</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      into which this emitter is emitting.  Emits values directly into</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the fluid object.  The MFnFluid object passed to this routine is</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      not pointing to a DAG object, it is pointing to an internal fluid</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      data structure that the fluid node is constructing, eventually to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      be set into the fluid&#39;s output attribute.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluid:          fluid into which we are emitting</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      worldMatrix:    object-&gt;world matrix for the fluid</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      plugIndex:      identifies which fluid connected to the emitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                      we are emitting into</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Returns:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kSuccess            if the method wishes to override the default</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                              emitter behaviour</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MS::kUnknownParameter   if the method wishes to have the default</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                              emitter behaviour execute after this routine</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                              exits.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Notes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The method first does some work common to all emitter types, then</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      calls one of 4 different methods to actually do the emission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The methods are:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          omniEmitter:    omni-directional emitter from a point,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          or from the vertices of an owner object.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          volumeEmitter:  emits from the surface of an exact cube, sphere,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          cone, cylinder, or torus.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//          surfaceEmitter: emits from the surface of an owner object.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  make sure the fluid is valid.  If it isn&#39;t, return MS::kSuccess, indicating</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  that no work needs to be done.  If we return a failure code, then the default</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  fluid emitter code will try to run, which is pointless if the fluid is not</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  valid.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html\">MFnFluid</a> fluid( fluidObject );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fluid.object() != <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get a data block for the emitter, so we can get attribute values</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> block = forceCache();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  figure out the time interval for emission for the given fluid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dTime = getDeltaTime( plugIndex, block ).as(<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( dTime == 0.0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// shouldn&#39;t happen, but if the time interval is 0, then no fluid should</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// be emitted</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  if currentTime &lt;= startTime, return. The startTime is connected to </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  the target fluid object.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> cTime = getCurrentTime( block );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> sTime = getStartTime( plugIndex, block );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  if we are at or before the start time, reset the random number</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  state to the appropriate seed value for the given fluid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( cTime &lt; sTime )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        resetRandomState( plugIndex, block );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  check to see if we need to emit anything into the target fluid.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  if the emission rate is 0, or if the fluid doesn&#39;t have a grid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  for one of the quantities, then we needn&#39;t do any emission</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  emission rates</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> density = fluidDensityEmission( block ); </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> heat = fluidHeatEmission( block );   </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> fuel = fluidFuelEmission( block );   </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> doColor = fluidEmitColor( block ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  fluid grid settings</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a06e70302c94c3c2b1e3bc16afa55947e\">MFnFluid::FluidMethod</a> densityMode, tempMode, fuelMode;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a015e5e29db221d9afe91cc9420336916\">MFnFluid::ColorMethod</a> colorMode;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a1b3ae8d1a745ca5e525f36f23c8805b0\">MFnFluid::FluidGradient</a> grad;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#ace81b0c7f687b1ac33b52fdc4b135a8f\">MFnFluid::FalloffMethod</a> falloffMode;</div>\n\
<div class=\"line\">    fluid.getDensityMode( densityMode, grad );</div>\n\
<div class=\"line\">    fluid.getTemperatureMode( tempMode, grad );</div>\n\
<div class=\"line\">    fluid.getFuelMode( fuelMode, grad );</div>\n\
<div class=\"line\">    fluid.getColorMode( colorMode );</div>\n\
<div class=\"line\">    fluid.getFalloffMode( falloffMode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  see if we need to emit density, heat, fuel, or color</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> densityToEmit = (density != 0.0) &amp;&amp; ((densityMode == <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a06e70302c94c3c2b1e3bc16afa55947eaef9f67a031607a74c4a6576aa6cb8a75\">MFnFluid::kDynamicGrid</a>)||(densityMode == <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a06e70302c94c3c2b1e3bc16afa55947ea6eb0349fd3d2d51612f440a9395fc1c1\">MFnFluid::kStaticGrid</a>));</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> heatToEmit = (heat != 0.0) &amp;&amp; ((tempMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a06e70302c94c3c2b1e3bc16afa55947eaef9f67a031607a74c4a6576aa6cb8a75\">MFnFluid::kDynamicGrid</a>)||(tempMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a06e70302c94c3c2b1e3bc16afa55947ea6eb0349fd3d2d51612f440a9395fc1c1\">MFnFluid::kStaticGrid</a>));</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fuelToEmit = (fuel != 0.0) &amp;&amp; ((fuelMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a06e70302c94c3c2b1e3bc16afa55947eaef9f67a031607a74c4a6576aa6cb8a75\">MFnFluid::kDynamicGrid</a>)||(fuelMode == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a06e70302c94c3c2b1e3bc16afa55947ea6eb0349fd3d2d51612f440a9395fc1c1\">MFnFluid::kStaticGrid</a>));</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> colorToEmit = doColor &amp;&amp; ((colorMode == <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a015e5e29db221d9afe91cc9420336916af22e8433503a154d29e8f8b9fd6dea6a\">MFnFluid::kDynamicColorGrid</a>)||(colorMode == <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a015e5e29db221d9afe91cc9420336916a7b6b43ea8e0862c669f4ec40106575bd\">MFnFluid::kStaticColorGrid</a>));</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> falloffEmit = (falloffMode == <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#ace81b0c7f687b1ac33b52fdc4b135a8fa0a0878fb289ff25a528b71f54cd772fe\">MFnFluid::kStaticFalloffGrid</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  nothing to emit, do nothing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !densityToEmit &amp;&amp; !heatToEmit &amp;&amp; !fuelToEmit &amp;&amp; !colorToEmit &amp;&amp; !falloffEmit )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get the dropoff rate for the fluid </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dropoff = fluidDropoff( block );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  modify the dropoff rate to account for fluids that have</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  been scaled in worldspace - larger scales mean slower</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  falloffs and vice versa</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a> xform( worldMatrix );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xformScale[3];</div>\n\
<div class=\"line\">    xform.getScale( xformScale, <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dropoffScale = sqrt( xformScale[0]*xformScale[0] + </div>\n\
<div class=\"line\">                                xformScale[1]*xformScale[1] + </div>\n\
<div class=\"line\">                                xformScale[2]*xformScale[2] );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( dropoffScale &gt; 0.1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        dropoff /= dropoffScale;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  retrieve the current random state from the &quot;randState&quot; attribute, and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  store it in the member variable &quot;randState&quot;.  We will use this member </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  value numerous times via the randgen() method.  Once we are done emitting,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  we will set the random state back into the attribute via setRandomState().</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    getRandomState( plugIndex, block );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  conversion value used to map user input emission rates into internal</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  values.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> conversion = 0.01;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MEmitterType emitterType = getEmitterType( block );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( emitterType )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kOmni:</div>\n\
<div class=\"line\">            omniFluidEmitter( fluid, worldMatrix, plugIndex, block, dTime,</div>\n\
<div class=\"line\">                              conversion, dropoff );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVolume:</div>\n\
<div class=\"line\">            volumeFluidEmitter( fluid, worldMatrix, plugIndex, block, dTime,</div>\n\
<div class=\"line\">                                conversion, dropoff );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kSurface:</div>\n\
<div class=\"line\">            surfaceFluidEmitter( fluid, worldMatrix, plugIndex, block, dTime,</div>\n\
<div class=\"line\">                                 conversion, dropoff );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  store the random state back into the datablock</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    setRandomState( plugIndex, block );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MIN</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef MIN</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef MAX</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef MAX</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MIN(x,y) ((x)&lt;(y)?(x):(y))</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MAX(x,y) ((x)&gt;(y)?(x):(y))</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">simpleFluidEmitter::omniFluidEmitter(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html\">MFnFluid</a>&amp;       fluid,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;  fluidWorldMatrix,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             plugIndex,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp;     block,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          dt,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          conversion,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          dropoff</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      simpleFluidEmitter::omniFluidEmitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Emits fluid from a point, or from a set of object control points.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluid:              fluid into which we are emitting</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluidWorldMatrix:   object-&gt;world matrix for the fluid</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      plugIndex:          identifies which fluid connected to the emitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          we are emitting into</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      block:              datablock for the emitter, to retrieve attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          values</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dt:                 time delta for this frame</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      conversion:         mapping from UI emission rates to internal units</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dropoff:            specifies how much emission rate drops off as</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          we move away from each emission point.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Notes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      If no owner object is present for the emitter, we simply emit from</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the emitter position.  If an owner object is present, then we emit</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      from each control point of that object in an identical fashion.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      To associate an owner object with an emitter, use the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      addDynamic MEL command, e.g. &quot;addDynamic simpleFluidEmitter1 pPlane1&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  find the positions that we need to emit from</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> emitterPositions;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  first, try to get them from an owner object, which will have its</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  &quot;ownerPositionData&quot; attribute feeding into the emitter.  These</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  values are in worldspace</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> gotOwnerPositions = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> ownerShape = getOwnerShape();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( ownerShape != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hOwnerPos = block.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( mOwnerPosData, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dOwnerPos = hOwnerPos.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">            <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnOwnerPos( dOwnerPos );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> posArray = fnOwnerPos.array( &amp;status );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// assign vectors from block to ownerPosArray.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; posArray.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i ++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    emitterPositions.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( posArray[i] );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                gotOwnerPositions = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  there was no owner object, so we just use the emitter position for</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  emission.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !gotOwnerPositions )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> emitterPos = getWorldPosition();</div>\n\
<div class=\"line\">        emitterPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( emitterPos );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get emission rates for density, fuel, heat, and emission color</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> densityEmit = fluidDensityEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> fuelEmit = fluidFuelEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> heatEmit = fluidHeatEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> doEmitColor = fluidEmitColor( block );</div>\n\
<div class=\"line\">    <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> emitColor = fluidColor( block );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  rate modulation based on frame time, user value conversion factor, and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  standard emitter &quot;rate&quot; value (not actually exposed in most fluid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  emitters, but there anyway).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> theRate = getRate(block) * dt * conversion;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get voxel dimensions and sizes (object space)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> size[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> res[3];</div>\n\
<div class=\"line\">    fluid.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#af92754eac18426549fd576c012e3bb5c\">getDimensions</a>( size[0], size[1], size[2] );</div>\n\
<div class=\"line\">    fluid.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#aac6fd1509707a639703ff3dfaefa25d6\">getResolution</a>( res[0], res[1], res[2] );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel sizes</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dx = size[0] / res[0];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dy = size[1] / res[1];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dz = size[2] / res[2];</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel centers</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Ox = -size[0]/2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Oy = -size[1]/2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Oz = -size[2]/2; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  emission will only happen for voxels whose centers lie within</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  &quot;minDist&quot; and &quot;maxDist&quot; of an emitter position</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> minDist = getMinDistance( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> maxDist = getMaxDistance( block );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  bump up the min/max distance values so that they</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  are both &gt; 0, and there is at least about a half</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel between the min and max values, to prevent aliasing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  artifacts caused by emitters missing most voxel centers</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a> fluidXform( fluidWorldMatrix );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> fluidScale[3];</div>\n\
<div class=\"line\">    fluidXform.getScale( fluidScale, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  compute smallest voxel diagonal length</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> wsX =  fabs(fluidScale[0]*dx);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> wsY = fabs(fluidScale[1]*dy);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> wsZ = fabs(fluidScale[2]*dz);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> wsMin = MIN( MIN( wsX, wsY), wsZ );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> wsMax = MAX( MAX( wsX, wsY), wsZ );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> wsDiag  = wsMin * sqrt(3.0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  make sure emission range is bigger than 0.5 voxels</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( maxDist &lt;= minDist || maxDist &lt;= (wsDiag/2.0) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( minDist &lt; 0 ) minDist = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        maxDist = minDist + wsDiag/2.0;</div>\n\
<div class=\"line\">        dropoff = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Now, it&#39;s time to actually emit into the fluid:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  foreach emitter point</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      foreach voxel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//          - select some points in the voxel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//          - compute a dropoff function from the emitter point</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//          - emit an appropriate amount of fluid into the voxel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Since we&#39;ve already expanded the min/max distances to cover</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  the smallest voxel dimension, we should only need 1 sample per</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel, unless the voxels are highly non-square.  We increase the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  number of samples in these cases.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  If the &quot;jitter&quot; flag is enabled, we jitter each sample position,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  using the rangen() function, which keeps track of independent </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  random states for each fluid, to make sure that results are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  repeatable for multiple simulation runs.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// basic sample count</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numSamples = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// increase samples if necessary for non-square voxels</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(wsMin &gt;.00001) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        numSamples = (int)(wsMax/wsMin + .5);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(numSamples &gt; 8) </div>\n\
<div class=\"line\">            numSamples = 8;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(numSamples &lt; 1)</div>\n\
<div class=\"line\">            numSamples = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> jitter =  fluidJitter(block);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !jitter )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  I don&#39;t have a good uniform sample generator for an </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  arbitrary number of samples.  It would be a good idea to use</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  one here.  For now, just use 1 sample for the non-jittered case.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        numSamples = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> p = 0; p &lt; emitterPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); p++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> emitterWorldPos = emitterPositions[p];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  loop through all voxels, looking for ones that lie at least</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  partially within the dropoff field around this emitter point</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; res[0]; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> x = Ox + i*dx;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; res[1]; j++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> y = Oy + j*dy;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; res[2]; k++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> z = Oz + k*dz;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> si;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>( si = 0; si &lt; numSamples; si++ )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">//  compute sample point (fluid object space)</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> rx, ry, rz;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( jitter )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            rx = x + randgen()*dx;</div>\n\
<div class=\"line\">                            ry = y + randgen()*dy;</div>\n\
<div class=\"line\">                            rz = z + randgen()*dz;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            rx = x + 0.5*dx;</div>\n\
<div class=\"line\">                            ry = y + 0.5*dy;</div>\n\
<div class=\"line\">                            rz = z + 0.5*dz;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">//  compute distance from sample to emitter point</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> point( rx, ry, rz );</div>\n\
<div class=\"line\">                        point *= fluidWorldMatrix;</div>\n\
<div class=\"line\">                        <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> diff = point - emitterWorldPos;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> distSquared = diff * diff;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> dist = diff.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                        <span class=\"comment\">//  discard if outside min/max range</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( (dist &lt; minDist) || (dist &gt; maxDist) )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        </div>\n\
<div class=\"line\">                        <span class=\"comment\">//  drop off the emission rate according to the falloff</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//  parameter, and divide to accound for multiple samples</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//  in the voxel</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> distDrop = dropoff * distSquared;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> newVal = theRate * exp( -distDrop ) / (double)numSamples;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">//  emit density/heat/fuel/color into the current voxel</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( newVal != 0 )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            fluid.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a871d6890c469e18672f3efe985aa994e\">emitIntoArrays</a>( (<span class=\"keywordtype\">float</span>) newVal, i, j, k, (<span class=\"keywordtype\">float</span>)densityEmit, (<span class=\"keywordtype\">float</span>)heatEmit, (<span class=\"keywordtype\">float</span>)fuelEmit, doEmitColor, emitColor );</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">float</span> *fArray = fluid.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#ac19d719dfefc839c6c3fe906fa795a13\">falloff</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( fArray != NULL )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> midPoint( x+0.5*dx, y+0.5*dy, z+0.5*dz );</div>\n\
<div class=\"line\">                            midPoint.x *= 0.2;</div>\n\
<div class=\"line\">                            midPoint.y *= 0.2;</div>\n\
<div class=\"line\">                            midPoint.z *= 0.2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> fdist = (float) sqrt( midPoint.x*midPoint.x + midPoint.y*midPoint.y + midPoint.z*midPoint.z );</div>\n\
<div class=\"line\">                            fdist /= sqrtf(3.0f);</div>\n\
<div class=\"line\">                            fArray[fluid.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#ac1c26be0cb5c6605c80d2acfc5741cff\">index</a>(i,j,k)] = 1.0f-fdist;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">simpleFluidEmitter::volumeFluidEmitter(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html\">MFnFluid</a>&amp;       fluid,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;  fluidWorldMatrix,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             plugIndex,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp;     block,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          dt,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          conversion,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          dropoff</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      simpleFluidEmitter::volumeFluidEmitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Emits fluid from points distributed over the surface of the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      emitter&#39;s owner object.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluid:              fluid into which we are emitting</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluidWorldMatrix:   object-&gt;world matrix for the fluid</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      plugIndex:          identifies which fluid connected to the emitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          we are emitting into</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      block:              datablock for the emitter, to retrieve attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          values</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dt:                 time delta for this frame</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      conversion:         mapping from UI emission rates to internal units</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dropoff:            specifies how much emission rate drops off as</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          we move away from the local y-axis of the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          volume emitter shape.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  get emitter position and relevant matrices </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> emitterPos = getWorldPosition();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> emitterWorldMatrix = getWorldMatrix();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> fluidInverseWorldMatrix = fluidWorldMatrix.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  get emission rates for density, fuel, heat, and emission color</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> densityEmit = fluidDensityEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> fuelEmit = fluidFuelEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> heatEmit = fluidHeatEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> doEmitColor = fluidEmitColor( block );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> emitColor = fluidColor( block );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  rate modulation based on frame time, user value conversion factor, and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  standard emitter &quot;rate&quot; value (not actually exposed in most fluid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  emitters, but there anyway).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> theRate = getRate(block) * dt * conversion;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  find the voxels that intersect the bounding box of the volume</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  primitive associated with the emitter</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> bbox;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !volumePrimitiveBoundingBox( bbox ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  shouldn&#39;t happen</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  transform volume primitive into fluid space</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    bbox.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a61b840da0866a8eea629857e067a5037\">transformUsing</a>( emitterWorldMatrix );</div>\n\
<div class=\"line\">    bbox.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a61b840da0866a8eea629857e067a5037\">transformUsing</a>( fluidInverseWorldMatrix );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> lowCorner = bbox.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> highCorner = bbox.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// see if autoresize to emitter is on, so we can resize before emitting</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// unfortunately, we need the fluidShape itself in order to check</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we&#39;ll just look at the first connected fluid,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// walking the multi is left as an excercise for the reader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// similarly, determining whether there is start frame emission</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and resizing at the start frame, or not, is left as an excercise</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and finally, emission with autoResize will need to include the dynamicOffset</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>         thisObj = thisMObject();</div>\n\
<div class=\"line\">    <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a>   nodeFn(thisObj);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> autoResize = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> resizeToEmitter = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> fnPlug = nodeFn.findPlug(<span class=\"stringliteral\">&quot;emissionFunction&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(fnPlug.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a40a52cd1e2411064f234ac9a6559385b\">isConnected</a>()) {</div>\n\
<div class=\"line\">        <a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> connections;</div>\n\
<div class=\"line\">        fnPlug.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(connections, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (connections.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sourceNode = connections[0].node();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sourceNode.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a4ef978e3c156dd2df1fe9d76459d20f3\">MFn::kFluid</a>)) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html\">MFnFluid</a> fluidFn(sourceNode);</div>\n\
<div class=\"line\">                autoResize = fluidFn.isAutoResize();</div>\n\
<div class=\"line\">                resizeToEmitter =  fluidFn.isResizeToEmitter();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(autoResize &amp;&amp; resizeToEmitter) {</div>\n\
<div class=\"line\">                    fluidFn.expandToInclude(lowCorner, highCorner);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(autoResize &amp;&amp; resizeToEmitter) {</div>\n\
<div class=\"line\">        fluid.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a182e3f1e96ee60604ee614e591a39b54\">updateGrid</a> ();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get voxel dimensions and sizes (object space)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> size[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> res[3];</div>\n\
<div class=\"line\">    fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#af92754eac18426549fd576c012e3bb5c\">getDimensions</a>( size[0], size[1], size[2] );</div>\n\
<div class=\"line\">    fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#aac6fd1509707a639703ff3dfaefa25d6\">getResolution</a>( res[0], res[1], res[2] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel sizes</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dx = size[0] / res[0];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dy = size[1] / res[1];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dz = size[2] / res[2];</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel centers</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Ox = -size[0]/2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Oy = -size[1]/2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Oz = -size[2]/2; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get fluid voxel coord range of bounding box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    int3 lowCoords;</div>\n\
<div class=\"line\">    int3 highCoords;</div>\n\
<div class=\"line\">    fluid.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#abaafcb61029d8a3dd802875bd4ca861b\">toGridIndex</a>( lowCorner, lowCoords );</div>\n\
<div class=\"line\">    fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#abaafcb61029d8a3dd802875bd4ca861b\">toGridIndex</a>( highCorner, highCoords );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i = 0; i &lt; 3; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( lowCoords[i] &lt; 0 ) {</div>\n\
<div class=\"line\">            lowCoords[i] = 0;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( lowCoords[i] &gt; ((<span class=\"keywordtype\">int</span>)res[i])-1 ) {</div>\n\
<div class=\"line\">            lowCoords[i] = ((int)res[i])-1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( highCoords[i] &lt; 0 ) {</div>\n\
<div class=\"line\">            highCoords[i] = 0;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( highCoords[i] &gt; ((<span class=\"keywordtype\">int</span>)res[i])-1 ) {</div>\n\
<div class=\"line\">            highCoords[i] = ((int)res[i])-1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  figure out the emitter size relative to the voxel size, and compute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  a per-voxel sampling rate that uses 1 sample/voxel for emitters that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  are &gt;= 2 voxels big in all dimensions.  For smaller emitters, use up</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  to 8 samples per voxel.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> emitterVoxelSize[3];</div>\n\
<div class=\"line\">    emitterVoxelSize[0] = (highCorner[0]-lowCorner[0])/dx;</div>\n\
<div class=\"line\">    emitterVoxelSize[1] = (highCorner[1]-lowCorner[1])/dy;</div>\n\
<div class=\"line\">    emitterVoxelSize[2] = (highCorner[2]-lowCorner[2])/dz;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> minVoxelSize = MIN(emitterVoxelSize[0],MIN(emitterVoxelSize[1],emitterVoxelSize[2]));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( minVoxelSize &lt; 1.0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        minVoxelSize = 1.0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> maxSamples = 8;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numSamples = (int)(8.0/(minVoxelSize*minVoxelSize*minVoxelSize) + 0.5);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( numSamples &lt; 1 ) numSamples = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( numSamples &gt; maxSamples ) numSamples = maxSamples;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  non-jittered, just use one sample in the voxel center.  Should replace</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  with uniform sampling pattern.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> jitter = fluidJitter(block);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !jitter )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        numSamples = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  for each voxel that could potentially intersect the volume emitter</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  primitive, take some samples in the voxel.  For those inside the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  volume, compute their dropoff relative to the primitive&#39;s local y-axis,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  and emit an appropriate amount into the voxel.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( i = lowCoords[0]; i &lt;= highCoords[0]; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x = Ox + (i+0.5)*dx;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> j = lowCoords[1]; j &lt; highCoords[1]; j++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> y = Oy + (j+0.5)*dy;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> k = lowCoords[2]; k &lt; highCoords[2]; k++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> z = Oz + (k+0.5)*dz;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> si = 0; si &lt; numSamples; si++) {</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"comment\">//  compute voxel sample point (object space)</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> rx, ry, rz;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(jitter) {</div>\n\
<div class=\"line\">                        rx = x + dx*(randgen() - 0.5);</div>\n\
<div class=\"line\">                        ry = y + dy*(randgen() - 0.5);</div>\n\
<div class=\"line\">                        rz = z + dz*(randgen() - 0.5);</div>\n\
<div class=\"line\">                    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        rx = x;</div>\n\
<div class=\"line\">                        ry = y;</div>\n\
<div class=\"line\">                        rz = z;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"comment\">//  to world space</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt( rx, ry, rz );</div>\n\
<div class=\"line\">                    pt *= fluidWorldMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">//  test to see if point is inside volume primitive</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>( volumePrimitivePointInside( pt, emitterWorldMatrix ) )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">//  compute dropoff</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> dist = pt.distanceTo( emitterPos );</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> distDrop = dropoff * (dist*dist);</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> newVal = (theRate * exp( -distDrop )) / (<span class=\"keywordtype\">double</span>)numSamples;</div>\n\
<div class=\"line\">                        </div>\n\
<div class=\"line\">                        <span class=\"comment\">//  emit into arrays</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( newVal != 0.0 )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a871d6890c469e18672f3efe985aa994e\">emitIntoArrays</a>( (<span class=\"keywordtype\">float</span>) newVal, i, j, k, (<span class=\"keywordtype\">float</span>)densityEmit, (<span class=\"keywordtype\">float</span>)heatEmit, (<span class=\"keywordtype\">float</span>)fuelEmit, doEmitColor, emitColor );</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> </div>\n\
<div class=\"line\">simpleFluidEmitter::surfaceFluidEmitter(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html\">MFnFluid</a>&amp;       fluid,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;  fluidWorldMatrix,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             plugIndex,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp;     block,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          dt,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          conversion,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          dropoff</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      simpleFluidEmitter::surfaceFluidEmitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Emits fluid from one of a predefined set of volumes (cube, sphere,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      cylinder, cone, torus).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluid:              fluid into which we are emitting</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fluidWorldMatrix:   object-&gt;world matrix for the fluid</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      plugIndex:          identifies which fluid connected to the emitter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          we are emitting into</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      block:              datablock for the emitter, to retrieve attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          values</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dt:                 time delta for this frame</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      conversion:         mapping from UI emission rates to internal units</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      dropoff:            specifies how much emission rate drops off as</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          the surface points move away from the centers</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                          of the voxels in which they lie.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Notes:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      To associate an owner object with an emitter, use the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      addDynamic MEL command, e.g. &quot;addDynamic simpleFluidEmitter1 pPlane1&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//  get relevant world matrices</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> fluidInverseWorldMatrix = fluidWorldMatrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  get emission rates for density, fuel, heat, and emission color</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> densityEmit = fluidDensityEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> fuelEmit = fluidFuelEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> heatEmit = fluidHeatEmission( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> doEmitColor = fluidEmitColor( block );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> emitColor = fluidColor( block );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  rate modulation based on frame time, user value conversion factor, and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  standard emitter &quot;rate&quot; value (not actually exposed in most fluid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  emitters, but there anyway).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> theRate = getRate(block) * dt * conversion;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get voxel dimensions and sizes (object space)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> size[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> res[3];</div>\n\
<div class=\"line\">    fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#af92754eac18426549fd576c012e3bb5c\">getDimensions</a>( size[0], size[1], size[2] );</div>\n\
<div class=\"line\">    fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#aac6fd1509707a639703ff3dfaefa25d6\">getResolution</a>( res[0], res[1], res[2] );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel sizes</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dx = size[0] / res[0];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dy = size[1] / res[1];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dz = size[2] / res[2];</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//  voxel centers</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Ox = -size[0]/2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Oy = -size[1]/2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Oz = -size[2]/2; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  get the &quot;swept geometry&quot; data for the emitter surface.  This structure</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  tracks the motion of each emitter triangle over the time interval</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  for this simulation step.  We just use positions on the emitter</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  surface at the end of the time step to do the emission.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> sweptHandle = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( mSweptGeometry );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> sweptData = sweptHandle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">    <a name=\"_a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dyn_swept_geometry_data.html\">MFnDynSweptGeometryData</a> fnSweptData( sweptData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  for &quot;non-jittered&quot; sampling, just reset the random state for each </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  triangle, which gives us a fixed set of samples all the time.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Sure, they&#39;re still jittered, but they&#39;re all jittered the same,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  which makes them kinda uniform.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> jitter = fluidJitter(block);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !jitter )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        resetRandomState( plugIndex, block );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( fnSweptData.triangleCount() &gt; 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  average voxel face area - use this as the canonical unit that</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  receives the emission rate specified by the users.  Scale the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  rate for other triangles accordingly.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> vfArea = pow(dx*dy*dz, 2.0/3.0);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">//  very rudimentary support for textured emission rate and</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  textured emission color.  We simply sample each texture once</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  at the center of each emitter surface triangle.  This will </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  cause aliasing artifacts when these triangles are large.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode( thisMObject() );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> rateTextureAttr = fnNode.attribute( <span class=\"stringliteral\">&quot;textureRate&quot;</span> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> colorTextureAttr = fnNode.attribute( <span class=\"stringliteral\">&quot;particleColor&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> texturedRate = hasValidEmission2dTexture( rateTextureAttr );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> texturedColor = hasValidEmission2dTexture( colorTextureAttr );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">//  construct texture coordinates for each triangle center</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">        <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> uCoords, vCoords;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( texturedRate || texturedColor )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uCoords.<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( fnSweptData.triangleCount() );</div>\n\
<div class=\"line\">            vCoords.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( fnSweptData.triangleCount() );</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> t;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( t = 0; t &lt; fnSweptData.triangleCount(); t++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html\">MDynSweptTriangle</a> tri = fnSweptData.sweptTriangle( t );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> uv0 = tri.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html#a6eafbf52344a92f8a388d7e5440de793\">uvPoint</a>(0);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> uv1 = tri.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html#a6eafbf52344a92f8a388d7e5440de793\">uvPoint</a>(1);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> uv2 = tri.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html#a6eafbf52344a92f8a388d7e5440de793\">uvPoint</a>(2);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> uvMid = (uv0+uv1+uv2)/3.0;</div>\n\
<div class=\"line\">                uCoords[t] = uvMid[0];</div>\n\
<div class=\"line\">                vCoords[t] = uvMid[1];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  evaluate textured rate and color values at the triangle centers</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> texturedRateValues;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( texturedRate )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            texturedRateValues.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( uCoords.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() );</div>\n\
<div class=\"line\">            evalEmission2dTexture( rateTextureAttr, uCoords, vCoords, NULL, &amp;texturedRateValues );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> texturedColorValues;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( texturedColor )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            texturedColorValues.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>( uCoords.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() );</div>\n\
<div class=\"line\">            evalEmission2dTexture( colorTextureAttr, uCoords, vCoords, &amp;texturedColorValues, NULL );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> t = 0; t &lt; fnSweptData.triangleCount(); t++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//  calculate emission rate and color values for this triangle</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> curTexturedRate = texturedRate ? texturedRateValues[t] : 1.0;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> curTexturedColor;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( texturedColor )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp; curVec = texturedColorValues[t];</div>\n\
<div class=\"line\">                curTexturedColor.<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> = (float)curVec[0];</div>\n\
<div class=\"line\">                curTexturedColor.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> = (float)curVec[1];</div>\n\
<div class=\"line\">                curTexturedColor.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> = (float)curVec[2];</div>\n\
<div class=\"line\">                curTexturedColor.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4aec1a5be9d9a4a394a2e49e9744286e\">a</a> = 1.0;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                curTexturedColor = emitColor;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html\">MDynSweptTriangle</a> tri = fnSweptData.sweptTriangle( t );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> v0 = tri.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html#a77482686329e113cc33e7ca9a4ab5149\">vertex</a>(0);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> v1 = tri.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html#a77482686329e113cc33e7ca9a4ab5149\">vertex</a>(1);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> v2 = tri.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html#a77482686329e113cc33e7ca9a4ab5149\">vertex</a>(2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//  compute number of samples for this triangle based on area,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//  with large triangles receiving approximately 1 sample for </span></div>\n\
<div class=\"line\">            <span class=\"comment\">//  each voxel that they intersect</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> triArea = tri.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dyn_swept_triangle.html#a86f85bbe6c99780208efd39ca10275b4\">area</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numSamples = (int)(triArea / vfArea);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( numSamples &lt; 1 ) numSamples = 1;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">//  compute emission rate for the points on the triangle.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//  Scale the canonical rate by the area ratio of this triangle</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//  to the average voxel size, then split it amongst all the samples.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> triRate = (theRate*(triArea/vfArea))/numSamples;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            triRate *= curTexturedRate;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> j = 0; j &lt; numSamples; j++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">//  generate a random point on the triangle,</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  map it into fluid local space</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> r1 = randgen();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> r2 = randgen();</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( r1 + r2 &gt; 1 )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    r1 = 1-r1;</div>\n\
<div class=\"line\">                    r2 = 1-r2;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> r3 = 1 - (r1+r2);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> randPoint = r1*v0 + r2*v1 + r3*v2;</div>\n\
<div class=\"line\">                randPoint *= fluidInverseWorldMatrix;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"comment\">//  figure out where the current point lies</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                int3 coord;</div>\n\
<div class=\"line\">                fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#abaafcb61029d8a3dd802875bd4ca861b\">toGridIndex</a>( randPoint, coord );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( (coord[0]&lt;0) || (coord[1]&lt;0) || (coord[2]&lt;0) ||</div>\n\
<div class=\"line\">                    (coord[0]&gt;=(<span class=\"keywordtype\">int</span>)res[0]) || (coord[1]&gt;=(<span class=\"keywordtype\">int</span>)res[1]) || (coord[2]&gt;=(<span class=\"keywordtype\">int</span>)res[2]) )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"comment\">//  do some falloff based on how far from the voxel center </span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  the current point lies</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> gridPoint;</div>\n\
<div class=\"line\">                gridPoint.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = Ox + (coord[0]+0.5)*dx;</div>\n\
<div class=\"line\">                gridPoint.y = Oy + (coord[1]+0.5)*dy;</div>\n\
<div class=\"line\">                gridPoint.z = Oz + (coord[2]+0.5)*dz;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> diff = gridPoint - randPoint;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> distSquared = diff * diff;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> distDrop = dropoff * distSquared;</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> newVal = triRate * exp( -distDrop );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">                <span class=\"comment\">//  emit into the voxel</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( newVal != 0 )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    fluid.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_fluid.html#a871d6890c469e18672f3efe985aa994e\">emitIntoArrays</a>( (<span class=\"keywordtype\">float</span>) newVal, coord[0], coord[1], coord[2], (<span class=\"keywordtype\">float</span>)densityEmit, (<span class=\"keywordtype\">float</span>)heatEmit, (<span class=\"keywordtype\">float</span>)fuelEmit, doEmitColor, curTexturedColor );      </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerNode( <span class=\"stringliteral\">&quot;simpleFluidEmitter&quot;</span>, simpleFluidEmitter::id,</div>\n\
<div class=\"line\">                            &amp;simpleFluidEmitter::creator, &amp;simpleFluidEmitter::initialize,</div>\n\
<div class=\"line\">                            <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7af7504f38cf4a0d67ff633ea53cf06968\">MPxNode::kFluidEmitterNode</a> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterNode( simpleFluidEmitter::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";