var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheMaterial.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_material_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheMaterial.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheMaterial.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheMaterial.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;functional&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialProperty</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::PropertyData</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    PropertyData()          {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PropertyData() {}</div>\n\
<div class=\"line\">    PropertyData(<span class=\"keyword\">const</span> PropertyData&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">    PropertyData&amp; operator=(<span class=\"keyword\">const</span> PropertyData&amp;) = <span class=\"keyword\">delete</span>;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::BoolPropertyData : MaterialProperty::PropertyData </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> value;</div>\n\
<div class=\"line\">    BoolPropertyData()       : value(<span class=\"keyword\">false</span>) {}</div>\n\
<div class=\"line\">    BoolPropertyData(<span class=\"keywordtype\">bool</span> v) : value(v)     {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::Int32PropertyData : MaterialProperty::PropertyData</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> value;</div>\n\
<div class=\"line\">    Int32PropertyData()      : value(0) {}</div>\n\
<div class=\"line\">    Int32PropertyData(<span class=\"keywordtype\">int</span> v) : value(v) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::FloatPropertyData : MaterialProperty::PropertyData</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> value;</div>\n\
<div class=\"line\">    FloatPropertyData()        : value(0) {}</div>\n\
<div class=\"line\">    FloatPropertyData(<span class=\"keywordtype\">float</span> v) : value(v) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::Float2PropertyData : MaterialProperty::PropertyData</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> x, y;</div>\n\
<div class=\"line\">    Float2PropertyData()                 : x(0), y(0) {}</div>\n\
<div class=\"line\">    Float2PropertyData(<span class=\"keywordtype\">float</span> a, <span class=\"keywordtype\">float</span> b) : x(a), y(b) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::Float3PropertyData : MaterialProperty::PropertyData</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> x, y, z;</div>\n\
<div class=\"line\">    Float3PropertyData()                          : x(0), y(0), z(0) {}</div>\n\
<div class=\"line\">    Float3PropertyData(<span class=\"keywordtype\">float</span> a, <span class=\"keywordtype\">float</span> b, <span class=\"keywordtype\">float</span> c) : x(a), y(b), z(c) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::ColorPropertyData : MaterialProperty::PropertyData</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> value;</div>\n\
<div class=\"line\">    ColorPropertyData()                           {}</div>\n\
<div class=\"line\">    ColorPropertyData(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; v) : value(v) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>MaterialProperty::StringPropertyData : MaterialProperty::PropertyData</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> value;</div>\n\
<div class=\"line\">    StringPropertyData()                            {}</div>\n\
<div class=\"line\">    StringPropertyData(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; v) : value(v) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialProperty::MPtr MaterialProperty::create(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;         name, </div>\n\
<div class=\"line\">    MaterialProperty::Type type</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::make_shared&lt;MaterialProperty&gt;(std::ref(name), type);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialProperty::MaterialProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, Type type)</div>\n\
<div class=\"line\">    : fName(name), fType(type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = createData(type);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialProperty::~MaterialProperty()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MaterialProperty::asBool(<span class=\"keywordtype\">double</span> seconds)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(fType == kBool);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> findValue&lt;BoolPropertyData&gt;(seconds)-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setBool(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">bool</span> value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fType == kBool);</div>\n\
<div class=\"line\">    setValue(seconds, std::make_shared&lt;BoolPropertyData&gt;(value));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> MaterialProperty::asInt32(<span class=\"keywordtype\">double</span> seconds)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(fType == kInt32);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> findValue&lt;Int32PropertyData&gt;(seconds)-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setInt32(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">int</span> value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fType == kInt32);</div>\n\
<div class=\"line\">    setValue(seconds, std::make_shared&lt;Int32PropertyData&gt;(value));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> MaterialProperty::asFloat(<span class=\"keywordtype\">double</span> seconds)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(fType == kFloat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> findValue&lt;FloatPropertyData&gt;(seconds)-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setFloat(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span> value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fType == kFloat);</div>\n\
<div class=\"line\">    setValue(seconds, std::make_shared&lt;FloatPropertyData&gt;(value));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::asFloat2(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(fType == kFloat2);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Float2PropertyData* data = findValue&lt;Float2PropertyData&gt;(seconds);</div>\n\
<div class=\"line\">    x = data-&gt;x;</div>\n\
<div class=\"line\">    y = data-&gt;y;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setFloat2(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fType == kFloat2);</div>\n\
<div class=\"line\">    setValue(seconds, std::make_shared&lt;Float2PropertyData&gt;(x, y));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::asFloat3(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y, <span class=\"keywordtype\">float</span>&amp; z)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(fType == kFloat3);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Float3PropertyData* data = findValue&lt;Float3PropertyData&gt;(seconds);</div>\n\
<div class=\"line\">    x = data-&gt;x;</div>\n\
<div class=\"line\">    y = data-&gt;y;</div>\n\
<div class=\"line\">    z = data-&gt;z;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setFloat3(<span class=\"keywordtype\">double</span> seconds, <span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y, <span class=\"keywordtype\">float</span> z)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fType == kFloat3);</div>\n\
<div class=\"line\">    setValue(seconds, std::make_shared&lt;Float3PropertyData&gt;(x, y, z));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; MaterialProperty::asColor(<span class=\"keywordtype\">double</span> seconds)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(fType == kRGB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> findValue&lt;ColorPropertyData&gt;(seconds)-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setColor(<span class=\"keywordtype\">double</span> seconds, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fType == kRGB);</div>\n\
<div class=\"line\">    setValue(seconds, std::make_shared&lt;ColorPropertyData&gt;(std::ref(value)));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; MaterialProperty::asString(<span class=\"keywordtype\">double</span> seconds)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    assert(fType == kString);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> findValue&lt;StringPropertyData&gt;(seconds)-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setString(<span class=\"keywordtype\">double</span> seconds, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fType == kString);</div>\n\
<div class=\"line\">    setValue(seconds, std::make_shared&lt;StringPropertyData&gt;(std::ref(value)));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setDefault(<span class=\"keywordtype\">bool</span> value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = std::make_shared&lt;BoolPropertyData&gt;(value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setDefault(<span class=\"keywordtype\">int</span> value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = std::make_shared&lt;Int32PropertyData&gt;(value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setDefault(<span class=\"keywordtype\">float</span> value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = std::make_shared&lt;FloatPropertyData&gt;(value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setDefault(<span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = std::make_shared&lt;Float2PropertyData&gt;(x, y);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setDefault(<span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y, <span class=\"keywordtype\">float</span> z)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = std::make_shared&lt;Float3PropertyData&gt;(x, y, z);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setDefault(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = std::make_shared&lt;ColorPropertyData&gt;(std::ref(value));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::setDefault(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; value)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDefaultValue = std::make_shared&lt;StringPropertyData&gt;(std::ref(value));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MaterialProperty::getDefaultAsBool()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> BoolPropertyData* data = <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>BoolPropertyData*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> data-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> MaterialProperty::getDefaultAsInt32()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Int32PropertyData* data = <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>Int32PropertyData*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> data-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> MaterialProperty::getDefaultAsFloat()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FloatPropertyData* data = <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>FloatPropertyData*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> data-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::getDefaultAsFloat2(<span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Float2PropertyData* data = <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>Float2PropertyData*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">    x = data-&gt;x;</div>\n\
<div class=\"line\">    y = data-&gt;y;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialProperty::getDefaultAsFloat3(<span class=\"keywordtype\">float</span>&amp; x, <span class=\"keywordtype\">float</span>&amp; y, <span class=\"keywordtype\">float</span>&amp; z)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Float3PropertyData* data = <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>Float3PropertyData*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">    x = data-&gt;x;</div>\n\
<div class=\"line\">    y = data-&gt;y;</div>\n\
<div class=\"line\">    z = data-&gt;z;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;  MaterialProperty::getDefaultAsColor()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ColorPropertyData* data = <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>ColorPropertyData*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> data-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; MaterialProperty::getDefaultAsString()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> StringPropertyData* data = <span class=\"keyword\">static_cast&lt;</span><span class=\"keyword\">const </span>StringPropertyData*<span class=\"keyword\">&gt;</span>(fDefaultValue.get());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> data-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialProperty::PropertyDataPtr MaterialProperty::createData(Type type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (type) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kBool:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;BoolPropertyData&gt;();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kInt32:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;Int32PropertyData&gt;();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kFloat:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;FloatPropertyData&gt;();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kFloat2:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;Float2PropertyData&gt;();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kFloat3:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;Float3PropertyData&gt;();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kRGB:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;ColorPropertyData&gt;();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kString:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;StringPropertyData&gt;();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        assert(0);  <span class=\"comment\">// Unknown type</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::make_shared&lt;FloatPropertyData&gt;();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialNode</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialProperty::MPtr MaterialNode::createProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, MaterialProperty::Type type)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a new property and insert to the map.</span></div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop = MaterialProperty::create(name, type);</div>\n\
<div class=\"line\">    assert(fProperties.find(name) == fProperties.end());</div>\n\
<div class=\"line\">    fProperties.insert(std::make_pair(name, prop));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> prop;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialNode::createProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name, MaterialProperty::Type type, MaterialPropertyRef&amp; ref)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a new property and initialize the property reference.</span></div>\n\
<div class=\"line\">    MaterialProperty::MPtr prop = createProperty(name, type);</div>\n\
<div class=\"line\">    ref.initialize(prop);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialProperty::MPtr MaterialNode::findProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Find a mutable property pointer.</span></div>\n\
<div class=\"line\">    PropertyMap::iterator it = fProperties.find(name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (it != fProperties.end()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> std::const_pointer_cast&lt;MaterialProperty&gt;((*it).second);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MaterialProperty::MPtr();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MaterialProperty::Ptr MaterialNode::findProperty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Find a const property pointer.</span></div>\n\
<div class=\"line\">    PropertyMap::const_iterator it = fProperties.find(name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (it != fProperties.end()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (*it).second;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MaterialProperty::Ptr();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialGraph</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MaterialGraph::isAnimated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> NamedMap::value_type&amp; val : fMaterialNodeMap) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MaterialNode::Ptr&amp; node = val.second;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!node) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keyword\">const</span> MaterialNode::PropertyMap::value_type&amp; val2 : node-&gt;properties()) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MaterialProperty::Ptr&amp; prop = val2.second;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!prop) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Any of the property is animated.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (prop-&gt;isAnimated()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS MaterialGraphMap</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MaterialGraphMap::addMaterialGraph(<span class=\"keyword\">const</span> MaterialGraph::Ptr&amp; graph)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(fMaterialGraphMap.find(graph-&gt;name()) == fMaterialGraphMap.end());</div>\n\
<div class=\"line\">    fMaterialGraphMap.insert(std::make_pair(graph-&gt;name(), graph));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Find the material graph by name.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> MaterialGraph::Ptr MaterialGraphMap::find(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    NamedMap::const_iterator it = fMaterialGraphMap.find(name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (it != fMaterialGraphMap.end()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (*it).second;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MaterialGraph::Ptr();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";