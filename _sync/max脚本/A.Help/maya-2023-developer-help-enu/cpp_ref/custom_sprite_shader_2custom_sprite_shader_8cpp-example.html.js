var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: customSpriteShader/customSpriteShader.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'custom_sprite_shader_2custom_sprite_shader_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: customSpriteShader/customSpriteShader.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">customSpriteShader/customSpriteShader.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2016 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><span class=\"comment\">// provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFragmentManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxHardwareShader.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxShaderOverride.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderUtilities.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MShaderManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStateManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in implementation shows the usage of MPxShaderOverride for a Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">// shader node which can be assigned to particle sprites for customized shading.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The purpose is to demonstrate how to define, connect and debug shader fragments</span></div>\n\
<div class=\"line\"><span class=\"comment\">// using C++ API or XML schema for shading fragments in plug-ins, and in particular</span></div>\n\
<div class=\"line\"><span class=\"comment\">// how to define and connect a geometry shader fragment. In this case the plug-in</span></div>\n\
<div class=\"line\"><span class=\"comment\">// will create a shader instance from a fragment graph whose connections, properties,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// values and outputs are defined in XML and connect it with a geometry shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">// fragment using MShaderInstance::addInputFragment().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Because the shader instance is generated from shader fragments, the lighting</span></div>\n\
<div class=\"line\"><span class=\"comment\">// fragments can be connected to the shader instance in order to allow the shader</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to work with maya lights. For more details please see the documentation for</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MPxSurfaceShadingNodeOverride.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// An implementation of color management on the input texture is also built into</span></div>\n\
<div class=\"line\"><span class=\"comment\">// customFileTextureOutputColor.xml, which is to show how maya converts texture</span></div>\n\
<div class=\"line\"><span class=\"comment\">// color from sRGB space to linear space. The implementation depends on input</span></div>\n\
<div class=\"line\"><span class=\"comment\">// color space and may vary according to needs, e.g. plug-ins can also choose</span></div>\n\
<div class=\"line\"><span class=\"comment\">// GPU linearization instead of a shader method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Transparency notification is handled by setting MPxShaderOverride::isTransparent()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// virtual method return value appropriately as needed. The support for advanced</span></div>\n\
<div class=\"line\"><span class=\"comment\">// transparency algorithms, such as depth peeling and weighted average, are also</span></div>\n\
<div class=\"line\"><span class=\"comment\">// handled by returning true for MPxShaderOverride::supportsAdvancedTransparency()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and checking specific pass semantics in MPxShaderOverride::handlesDraw().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The code also demonstrates handling of non-textured drawing by providing another</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MShaderInstance to be returned from MPxShaderOverride::nonTexturedShaderInstance().</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It will also handle transparency by appropriately setting the shader instance</span></div>\n\
<div class=\"line\"><span class=\"comment\">// transparency hint using MShaderInstance::setIsTransparent().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (De)registration is shown as part of plug-in (de)initialization, noting that</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the MPxShaderOverride association to the MPxNode node is achieved by supplying</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the same &quot;drawdb/shader&quot; classification for both registration interfaces.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For debugging shader fragments, the final effect source of the shader instance</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can be written to disk using MShaderInstance::writeEffectSourceToFile() and</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can be used to create another shader instance for being bound to a draw context.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In case of failure, shader compilation errors can be either displayed in Script</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Editor during binding or queried from MShaderManager::getLastError() afterwards.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// customSpriteShader.mel is provided for easier testing, which creates some</span></div>\n\
<div class=\"line\"><span class=\"comment\">// particle sprites with random scale and twist, and then assign them with</span></div>\n\
<div class=\"line\"><span class=\"comment\">// customSpriteShader.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The plugin assumes that the devkit location follows &quot;Setting up your build</span></div>\n\
<div class=\"line\"><span class=\"comment\">// environment&quot; at Maya Developer Help; otherwise, shaders/textures cannot be</span></div>\n\
<div class=\"line\"><span class=\"comment\">// located. In this case create a mod (module description file) as below in a</span></div>\n\
<div class=\"line\"><span class=\"comment\">// suitable modules folder (getenv &quot;MAYA_MODULE_PATH&quot;) and restart Maya.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   + devkit 1.0 &lt;local devkit path&gt;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>customSpriteShader : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html\">MPxHardwareShader</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~customSpriteShader()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>* creator()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> customSpriteShader();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initialize()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> id;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    customSpriteShader()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> customSpriteShader::id(0x00081033);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>customSpriteShaderOverride : <span class=\"keyword\">public</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html\">MHWRender::MPxShaderOverride</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~customSpriteShaderOverride() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html\">MHWRender::MPxShaderOverride</a>* creator(<span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> customSpriteShaderOverride(obj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MHWRender::DrawAPI <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a9c43d7192e56c01d8dde77fabd843a0e\">supportedDrawAPIs</a>()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MHWRender::kAllDevices;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ad5a9492e13c5e46460e36cf03b5821bc\">shaderInstance</a>(<a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fShaderInstance;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#addc154cb86dafb4b95301938d97659d8\">nonTexturedShaderInstance</a>(<span class=\"keywordtype\">bool</span> &amp;monitorNode)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        monitorNode = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fNonTexturedShaderInstance;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ab79d6d7859fceb8fc8b0e4ace1869612\">isTransparent</a>()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ae919985341ff7706a78139a098146ed3\">supportsAdvancedTransparency</a>()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a0212be7dfc693d9d7a0f95ddcb81ba8d\">initialize</a>(<span class=\"keyword\">const</span> MInitContext&amp; initContext, <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_shared_ptr.html\">MSharedPtr&lt;MUserData&gt;</a>&amp; userData) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a3b5dcab1b6940e042c0d4843a6ab6787\">handlesDraw</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a8d7f721e0a413d81bd9c0b4c4bf451a9\">activateKey</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; key) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a26fb6e971beb807417cb83a7b2b8268c\">draw</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context,<span class=\"keyword\">const</span> <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList) <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a9d3d971a5a62e06fcbac0537c11d33de\">terminateKey</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; key) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> registerShadeFragments();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> deregisterShadeFragments();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> addFragmentXML(<a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html\">MHWRender::MFragmentManager</a>&amp; fragMgr, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, <span class=\"keywordtype\">bool</span> asGraph);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    customSpriteShaderOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> createShaderInstances();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *fShaderInstance;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a> *fNonTexturedShaderInstance;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> sFragmentArray;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDebugFragment;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> customSpriteShaderOverride::sFragmentArray;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> customSpriteShaderOverride::sDebugFragment = (getenv(<span class=\"stringliteral\">&quot;MAYA_CUSTOMSPRITESHADER_DEBUG_FRAGMENTS&quot;</span>) != NULL);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">customSpriteShaderOverride::customSpriteShaderOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>::MPxShaderOverride(obj)</div>\n\
<div class=\"line\">    , fShaderInstance(NULL)</div>\n\
<div class=\"line\">    , fNonTexturedShaderInstance(NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    createShaderInstances();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">customSpriteShaderOverride::~customSpriteShaderOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fShaderInstance)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(fShaderInstance);</div>\n\
<div class=\"line\">                fShaderInstance = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fNonTexturedShaderInstance)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(fNonTexturedShaderInstance);</div>\n\
<div class=\"line\">                fNonTexturedShaderInstance = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> customSpriteShaderOverride::createShaderInstances()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// XML-based fragment graph supports multiple connections between</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// shade fragments, while MShaderInstance::addInputFragment can only</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// support single connection between the shader instance and input</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// fragment. To see how internal fragments are implemented, use the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// fragmentDumper plugin.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            fShaderInstance = shaderMgr-&gt;<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a75e397b8d02f3da09024156fe70eed44\">getFragmentShader</a>(</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;customFileTextureBlinnShader&quot;</span>, <span class=\"stringliteral\">&quot;outSurfaceFinal&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Connect the custom geometry shader.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            fShaderInstance-&gt;<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aecb9166e418601fee92b37c9fe39f3fe\">addInputFragment</a>(</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;customPoint2ViewAlignedTexturedQuad&quot;</span>, <span class=\"stringliteral\">&quot;GPUStage&quot;</span>, <span class=\"stringliteral\">&quot;GPUStage&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Acquire and bind the snow texture.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// The plugin assumes that the devkit location follows &quot;Setting up your build</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// environment&quot; at Maya Developer Help; otherwise, shaders/textures cannot be</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// located. In this case create a mod (module description file) as below in a</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// suitable modules folder (getenv &quot;MAYA_MODULE_PATH&quot;) and restart Maya.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//   + devkit 1.0 &lt;local devkit path&gt;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> path;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;getModulePath -moduleName \\&quot;devkit\\&quot;&quot;</span>), path))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                path = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(getenv(<span class=\"stringliteral\">&quot;MAYA_LOCATION&quot;</span>)) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;/devkit&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            path += <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;/plug-ins/customSpriteShader/&quot;</span>);</div>\n\
<div class=\"line\">            <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* texture =</div>\n\
<div class=\"line\">                renderer-&gt;<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa3f2ec2984800e2cd8ea09b4ad9f072e\">getTextureManager</a>()-&gt;<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a04aa3cfef217948abc8edd0f19565f95\">acquireTexture</a>(path + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;snow.png&quot;</span>), <span class=\"stringliteral\">&quot;&quot;</span>, 1);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (texture)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_h_w_render_1_1_m_texture_assignment.html\">MHWRender::MTextureAssignment</a> texResource;</div>\n\
<div class=\"line\">                texResource.<a name=\"a34\"></a>texture = texture;</div>\n\
<div class=\"line\">                fShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;map&quot;</span>, texResource);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;customSpriteShader failed to acquire texture from &quot;</span>) + path + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;snow.png&quot;</span>);</div>\n\
<div class=\"line\">                <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Acquire and bind the default texture sampler.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state_desc.html\">MHWRender::MSamplerStateDesc</a> samplerDesc;</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_sampler_state.html\">MHWRender::MSamplerState</a>* sampler =</div>\n\
<div class=\"line\">                <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a6277961291d22bd82a852c0b9c905570\">MHWRender::MStateManager::acquireSamplerState</a>(samplerDesc);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sampler)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;textureSampler&quot;</span>, *sampler);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Particle sprites cannot directly be drawn with the default non-</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// textured shader instance which is designed for polygons, so we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// create a non-texture shader instance as well. Note the geometry</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// shader is slightly different from the textured version.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            fNonTexturedShaderInstance = shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a75e397b8d02f3da09024156fe70eed44\">getFragmentShader</a>(</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;customSolidColorBlinnShader&quot;</span>, <span class=\"stringliteral\">&quot;outSurfaceFinal&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            fNonTexturedShaderInstance-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aecb9166e418601fee92b37c9fe39f3fe\">addInputFragment</a>(</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;customPoint2ViewAlignedSolidQuad&quot;</span>, <span class=\"stringliteral\">&quot;GPUStage&quot;</span>, <span class=\"stringliteral\">&quot;GPUStage&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set color and transparency.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> customColor[3] = {1.0, 0.0, 0.0};</div>\n\
<div class=\"line\">            fNonTexturedShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;customColor&quot;</span>, customColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> customTransparency[3] = { 0.0, 0.0, 0.0 };</div>\n\
<div class=\"line\">            fNonTexturedShaderInstance-&gt;setParameter(<span class=\"stringliteral\">&quot;customTransparency&quot;</span>, customTransparency);</div>\n\
<div class=\"line\">            fNonTexturedShaderInstance-&gt;setIsTransparent(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Dump final effect source and perform validation, for debugging the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// custom shader fragments on all device APIs. For validation, plugin</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// can bind a temporary draw context with a shader instance generated</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// from the effect source dump. Make sure it&#39;s unbound afterwards.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sDebugFragment)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> filePath = path + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;customSpriteShader.fx&quot;</span>);</div>\n\
<div class=\"line\">                fShaderInstance-&gt;writeEffectSourceToFile(filePath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>* dc =</div>\n\
<div class=\"line\">                    <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a740208508edba7934a27816decbb9570\">MHWRender::MRenderUtilities::acquireSwatchDrawContext</a>();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* shaderInstance =</div>\n\
<div class=\"line\">                    shaderMgr-&gt;<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a581c659670f0e3168750382c61a91a25\">getEffectsFileShader</a>(filePath, <span class=\"stringliteral\">&quot;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dc &amp;&amp; shaderInstance)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!shaderInstance-&gt;<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a705d4d83d28a26d08a792df0a25700d2\">bind</a>(*dc))</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = filePath +</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;:\\n&quot;</span>) +</div>\n\
<div class=\"line\">                            <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a32aa7a2b395ae162d8fc66abf5f5a14a\">MHWRender::MShaderManager::getLastError</a>() +</div>\n\
<div class=\"line\">                            <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a45e7598b79e4e7202aa4082baec16231\">MHWRender::MShaderManager::getLastErrorSource</a>(<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, 2);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    shaderInstance-&gt;<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#ac4a9d5b839ed15d1bc1330b7ce663f19\">unbind</a>(*dc);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                shaderMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(shaderInstance);</div>\n\
<div class=\"line\">                <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a5222892109760efc845e37469b0f6cb4\">MHWRender::MRenderUtilities::releaseDrawContext</a>(dc);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> customSpriteShaderOverride::initialize(<span class=\"keyword\">const</span> MInitContext&amp;, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_shared_ptr.html\">MSharedPtr&lt;MUserData&gt;</a>&amp;)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> empty;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> positionDesc(</div>\n\
<div class=\"line\">        empty,</div>\n\
<div class=\"line\">        <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>,</div>\n\
<div class=\"line\">        <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>,</div>\n\
<div class=\"line\">        3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> normalDesc(</div>\n\
<div class=\"line\">        empty,</div>\n\
<div class=\"line\">        <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a227e8416235cd3b43077ca91504a463f\">MHWRender::MGeometry::kNormal</a>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>,</div>\n\
<div class=\"line\">        3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> spritePP(<span class=\"stringliteral\">&quot;spritePP&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> spriteDesc(</div>\n\
<div class=\"line\">        spritePP,</div>\n\
<div class=\"line\">        <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MHWRender::MGeometry::kTexture</a>,</div>\n\
<div class=\"line\">        spritePP,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>,</div>\n\
<div class=\"line\">        4);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> uvDesc(</div>\n\
<div class=\"line\">        empty,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MHWRender::MGeometry::kTexture</a>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MHWRender::MGeometry::kFloat</a>,</div>\n\
<div class=\"line\">        2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    addGeometryRequirement(positionDesc);</div>\n\
<div class=\"line\">    addGeometryRequirement(normalDesc);</div>\n\
<div class=\"line\">    addGeometryRequirement(spriteDesc);</div>\n\
<div class=\"line\">    addGeometryRequirement(uvDesc);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fShaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addShaderSignature(*fShaderInstance);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;customSpriteShaderOverride&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> customSpriteShaderOverride::handlesDraw(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a>&amp; passCtx = context.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; passSem = passCtx.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> handlePass = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;passSem.<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; pass = passSem[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// For color passes, only handle if there isn&#39;t already a global override.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// This is the same as the default logic for this method in MPxShaderOverride</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pass == <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a97ffcfc5e6c4bd512eab6727c58a9ae8\">MHWRender::MPassContext::kColorPassSemantic</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!passCtx.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a54cb1ff5e4a10ffc51cb05ddab8e69ab\">hasShaderOverride</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                handlePass = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// Advanced transparency algorithms are supported.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (pass == <a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9160078f7d16515ce7b689a7e0356c90\">MHWRender::MPassContext::kTransparentPeelSemantic</a> ||</div>\n\
<div class=\"line\">                 pass == <a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#ad9f3e908d48e77144e99c804074485b1\">MHWRender::MPassContext::kTransparentPeelAndAvgSemantic</a> ||</div>\n\
<div class=\"line\">                 pass == <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a70c9d0658fe61e3154bb60cb40daf2a2\">MHWRender::MPassContext::kTransparentWeightedAvgSemantic</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handlePass = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// If these semantics are specified then they override the color pass</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// semantic handling.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (pass == <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a67e11eaab888b31695e3bc19dc1c26ef\">MHWRender::MPassContext::kDepthPassSemantic</a> ||</div>\n\
<div class=\"line\">                 pass == <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a30804db03c6cccf4fd8d480fe4af0660\">MHWRender::MPassContext::kNormalDepthPassSemantic</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            handlePass = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> handlePass;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> customSpriteShaderOverride::activateKey(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; key)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fShaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fShaderInstance-&gt;bind(context);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> customSpriteShaderOverride::draw(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fShaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passCount = fShaderInstance-&gt;getPassCount(context);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (passCount)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; passCount; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                fShaderInstance-&gt;activatePass(context, i);</div>\n\
<div class=\"line\">                <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#a96b26e833c1533131841eb2bcb2288a4\">MHWRender::MPxShaderOverride::drawGeometry</a>(context);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> customSpriteShaderOverride::terminateKey(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; key)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fShaderInstance)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fShaderInstance-&gt;unbind(context);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> customSpriteShaderOverride::addFragmentXML(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html\">MHWRender::MFragmentManager</a>&amp; fragMgr,</div>\n\
<div class=\"line\">                                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName,</div>\n\
<div class=\"line\">                                                <span class=\"keywordtype\">bool</span> asGraph)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fragName = asGraph ? fragMgr.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a222716cf7cc5d67a80ca5be267503813\">addFragmentGraphFromFile</a>( fileName ) :</div>\n\
<div class=\"line\">                                 fragMgr.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#ae0645c71bb25ece5bf5b556354e95f23\">addShadeFragmentFromFile</a>( fileName, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fragName.<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;customSpriteShader failed to add fragment from &quot;</span>) + fileName;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    sFragmentArray.append(fragName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> customSpriteShaderOverride::registerShadeFragments()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html\">MHWRender::MFragmentManager</a>* fragMgr = renderer-&gt;<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a0f42783e8eee6f472d6bbb2acb6b2f2d\">getFragmentManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fragMgr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Add search path (once only)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// The plugin assumes that the devkit location follows &quot;Setting up your build</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// environment&quot; at Maya Developer Help; otherwise, shaders/textures cannot be</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// located. In this case create a mod (module description file) as below in a</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// suitable modules folder (getenv &quot;MAYA_MODULE_PATH&quot;) and restart Maya.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//   + devkit 1.0 &lt;local devkit path&gt;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> path;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;getModulePath -moduleName \\&quot;devkit\\&quot;&quot;</span>), path, <span class=\"keyword\">false</span>))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                path = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(getenv(<span class=\"stringliteral\">&quot;MAYA_LOCATION&quot;</span>)) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;/devkit&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            path += <span class=\"stringliteral\">&quot;/plug-ins/customSpriteShader&quot;</span>;</div>\n\
<div class=\"line\">            fragMgr-&gt;<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#aea992c165682b9fe4c7155ba26b7f96c\">addFragmentPath</a>(path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> info = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;customSpriteShader added a fragment search path: &quot;</span>) + path;</div>\n\
<div class=\"line\">            <a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(info);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Fragment graphs are registered after shader fragments because of dependency.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (addFragmentXML(*fragMgr, <span class=\"stringliteral\">&quot;customFileTextureOutputColor.xml&quot;</span>, <span class=\"keyword\">false</span>) &amp;&amp;</div>\n\
<div class=\"line\">                addFragmentXML(*fragMgr, <span class=\"stringliteral\">&quot;customFileTextureOutputTransparency.xml&quot;</span>, <span class=\"keyword\">false</span>) &amp;&amp;</div>\n\
<div class=\"line\">                addFragmentXML(*fragMgr, <span class=\"stringliteral\">&quot;customPoint2ViewAlignedSolidQuad.xml&quot;</span>, <span class=\"keyword\">false</span>) &amp;&amp;</div>\n\
<div class=\"line\">                addFragmentXML(*fragMgr, <span class=\"stringliteral\">&quot;customPoint2ViewAlignedTexturedQuad.xml&quot;</span>, <span class=\"keyword\">false</span>) &amp;&amp;</div>\n\
<div class=\"line\">                addFragmentXML(*fragMgr, <span class=\"stringliteral\">&quot;customFileTextureBlinnShader.xml&quot;</span>, <span class=\"keyword\">true</span>) &amp;&amp;</div>\n\
<div class=\"line\">                addFragmentXML(*fragMgr, <span class=\"stringliteral\">&quot;customSolidColorBlinnShader.xml&quot;</span>, <span class=\"keyword\">true</span>))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> customSpriteShaderOverride::deregisterShadeFragments()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html\">MHWRender::MFragmentManager</a>* fragMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a0f42783e8eee6f472d6bbb2acb6b2f2d\">getFragmentManager</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fragMgr)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; sFragmentArray.length(); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fragName = sFragmentArray[i];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fragMgr-&gt;<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#af82d71b3a71c8752d51d0a9cb6081877\">hasFragment</a>(fragName) &amp;&amp; !fragMgr-&gt;<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a0986b6896f4fad94fc61ff750583187f\">removeFragment</a>(fragName))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> errorMsg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;customSpriteShader failed to remove fragment &quot;</span>) + sFragmentArray[i];</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(errorMsg);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    sFragmentArray.clear();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> success ? MS::kSuccess : MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sCustomSpriteShaderRegistrantId(<span class=\"stringliteral\">&quot;customSpriteShaderRegistrantId&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> sCustomSpriteShaderDrawdbClassification(<span class=\"stringliteral\">&quot;drawdb/shader/surface/customSpriteShader&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = customSpriteShaderOverride::registerShadeFragments();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerShadeFragments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj, <span class=\"stringliteral\">&quot;Autodesk&quot;</span>, <span class=\"stringliteral\">&quot;1.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> UserClassification(<span class=\"stringliteral\">&quot;shader/surface/:&quot;</span>);</div>\n\
<div class=\"line\">    UserClassification += sCustomSpriteShaderDrawdbClassification;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerNode(</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;customSpriteShader&quot;</span>,</div>\n\
<div class=\"line\">        customSpriteShader::id,</div>\n\
<div class=\"line\">        customSpriteShader::creator,</div>\n\
<div class=\"line\">        customSpriteShader::initialize,</div>\n\
<div class=\"line\">        <a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7a97e77d194fd5039f88be9cbced6ef2c7\">MPxNode::kHardwareShader</a>,</div>\n\
<div class=\"line\">        &amp;UserClassification);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = <a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a7436ee759c9ea5113f5a222085dbfe6e\">MHWRender::MDrawRegistry::registerShaderOverrideCreator</a>(</div>\n\
<div class=\"line\">        sCustomSpriteShaderDrawdbClassification,</div>\n\
<div class=\"line\">        sCustomSpriteShaderRegistrantId,</div>\n\
<div class=\"line\">        customSpriteShaderOverride::creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerShaderOverrideCreator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = plugin.deregisterNode(customSpriteShader::id);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = <a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a11ddbef3eada4895397b8acb6c77eb2e\">MHWRender::MDrawRegistry::deregisterShaderOverrideCreator</a>(</div>\n\
<div class=\"line\">        sCustomSpriteShaderDrawdbClassification,</div>\n\
<div class=\"line\">        sCustomSpriteShaderRegistrantId);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterShaderOverrideCreator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = customSpriteShaderOverride::deregisterShadeFragments();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterShadeFragments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";