var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcImport/MeshHelper.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_import_2_mesh_helper_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcImport/MeshHelper.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcImport/MeshHelper.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2014,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks, Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;util.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MeshHelper.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;NodeIteratorVisitorHelper.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTypes.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUintArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMeshData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshPolygon.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshVertex.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// utility to determine if a string is in the string array</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> inStrArray( <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; iArray, <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iStr )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> arrLength = iArray.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; arrLength; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iArray[i] == iStr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// utility to clear pt when doing a swap otherwise</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the new swap position could get messed up</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> clearPt(<a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> ptPlug = ioMesh.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;pt&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numElements = ptPlug.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae98c3fdbce1daefa127bae2fe66a187c\">numElements</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ptPlug.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ad9f7606199fb5d1bd8b872b1d0e7f6a3\">isArray</a>() &amp;&amp; (numElements &gt; 0))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numElements; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> elementPlug = ptPlug[i];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> childx = elementPlug.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(0);</div>\n\
<div class=\"line\">                childx.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(0.0);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> childy = elementPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(1);</div>\n\
<div class=\"line\">                childy.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(0.0);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> childz = elementPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(2);</div>\n\
<div class=\"line\">                childz.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(0.0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// normal vector is packed differently in file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// from the format Maya accepts directly</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setPolyNormals(<span class=\"keywordtype\">double</span> iFrame, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IN3fGeomParam iNormals)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// no normals to set?  bail early</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!iNormals)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iNormals.getScope() != Alembic::AbcGeom::kVertexScope &amp;&amp;</div>\n\
<div class=\"line\">            iNormals.getScope() != Alembic::AbcGeom::kVaryingScope &amp;&amp;</div>\n\
<div class=\"line\">            iNormals.getScope() != Alembic::AbcGeom::kFacevaryingScope)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printWarning(ioMesh.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#ac4b316731c4019c927aa63731d4749e8\">fullPathName</a>() +</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot; normal vector has an unsupported scope, skipping normals&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame,</div>\n\
<div class=\"line\">            iNormals.getTimeSampling(), iNormals.getNumSamples(),</div>\n\
<div class=\"line\">            index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::IN3fGeomParam::Sample samp;</div>\n\
<div class=\"line\">        iNormals.getExpanded(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> normalsIn;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::N3fArraySamplePtr sampVal = samp.getVals();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> sampSize = sampVal-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::N3fArraySamplePtr ceilVals;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (alpha != 0 &amp;&amp; index != ceilIndex)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IN3fGeomParam::Sample ceilSamp;</div>\n\
<div class=\"line\">            iNormals.getExpanded(ceilSamp,</div>\n\
<div class=\"line\">                Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">            ceilVals = ceilSamp.getVals();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sampSize == ceilVals-&gt;size())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Abc::N3fArraySamplePtr ceilVal = ceilSamp.getVals();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> normal(</div>\n\
<div class=\"line\">                        simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].x,</div>\n\
<div class=\"line\">                            (*ceilVal)[i].x),</div>\n\
<div class=\"line\">                        simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].y,</div>\n\
<div class=\"line\">                            (*ceilVal)[i].y),</div>\n\
<div class=\"line\">                        simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].z,</div>\n\
<div class=\"line\">                            (*ceilVal)[i].z));</div>\n\
<div class=\"line\">                    normalsIn.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>(normal);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> normal((*sampVal)[i].x, (*sampVal)[i].y,</div>\n\
<div class=\"line\">                        (*sampVal)[i].z);</div>\n\
<div class=\"line\">                    normalsIn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>(normal);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> normal((*sampVal)[i].x, (*sampVal)[i].y,</div>\n\
<div class=\"line\">                    (*sampVal)[i].z);</div>\n\
<div class=\"line\">                normalsIn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>(normal);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((iNormals.getScope() == Alembic::AbcGeom::kVertexScope ||</div>\n\
<div class=\"line\">            iNormals.getScope() == Alembic::AbcGeom::kVaryingScope) &amp;&amp;</div>\n\
<div class=\"line\">            sampSize == ( std::size_t ) ioMesh.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexList;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> iEnd = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(sampSize);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; iEnd; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                vertexList.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(i);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ioMesh.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ae8a691c2b544f265d6d4f4ad7e51d9b1\">setVertexNormals</a>(normalsIn, vertexList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sampSize == ( std::size_t ) ioMesh.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>() &amp;&amp;</div>\n\
<div class=\"line\">            iNormals.getScope() == Alembic::AbcGeom::kFacevaryingScope)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> faceList(static_cast&lt;unsigned int&gt;(sampSize));</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexList(static_cast&lt;unsigned int&gt;(sampSize));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// per vertex per-polygon normal</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numFaces = ioMesh.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> nIndex = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> polyVerts;</div>\n\
<div class=\"line\">                ioMesh.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a469fc8126bc4424cd00853821d78a55a\">getPolygonVertices</a>(faceIndex, polyVerts);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> numVertices = polyVerts.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> v = numVertices - 1; v &gt;= 0; v--, ++nIndex)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    faceList[nIndex] = faceIndex;</div>\n\
<div class=\"line\">                    vertexList[nIndex] = polyVerts[v];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            ioMesh.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a793dd5effb06ae02dc67312fe03ff147\">setFaceVertexNormals</a>(normalsIn, faceList, vertexList);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sampSize != 0 &amp;&amp; ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            printWarning(ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#ac4b316731c4019c927aa63731d4749e8\">fullPathName</a>() +</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot; normal vector scope does not match size of data, &quot;</span> +</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;skipping normals&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillPoints(<a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> &amp; oPointArray,</div>\n\
<div class=\"line\">        Alembic::Abc::P3fArraySamplePtr iPoints,</div>\n\
<div class=\"line\">        Alembic::Abc::P3fArraySamplePtr iCeilPoints, <span class=\"keywordtype\">double</span> alpha)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span>(!iPoints)</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPoints = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(iPoints-&gt;size());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(!numPoints)</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        oPointArray.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(numPoints);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (alpha == 0 || iCeilPoints == NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numPoints; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                oPointArray.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#ada71941065bee0cd0b6e687570092a70\">set</a>(i,</div>\n\
<div class=\"line\">                    (*iPoints)[i].x, (*iPoints)[i].y, (*iPoints)[i].z);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numPoints; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                oPointArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#ada71941065bee0cd0b6e687570092a70\">set</a>(i,</div>\n\
<div class=\"line\">                    simpleLerp&lt;float&gt;(alpha,</div>\n\
<div class=\"line\">                        (*iPoints)[i].x, (*iCeilPoints)[i].x),</div>\n\
<div class=\"line\">                    simpleLerp&lt;float&gt;(alpha,</div>\n\
<div class=\"line\">                        (*iPoints)[i].y, (*iCeilPoints)[i].y),</div>\n\
<div class=\"line\">                    simpleLerp&lt;float&gt;(alpha,</div>\n\
<div class=\"line\">                        (*iPoints)[i].z, (*iCeilPoints)[i].z));</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillTopology(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> &amp; iPoints,</div>\n\
<div class=\"line\">        Alembic::Abc::Int32ArraySamplePtr iIndices,</div>\n\
<div class=\"line\">        Alembic::Abc::Int32ArraySamplePtr iCounts)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// since we are changing the topology we will be creating a new mesh</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get face count info</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPolys = iCounts ? <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(iCounts-&gt;size()) : 0;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> polyCounts;</div>\n\
<div class=\"line\">        polyCounts.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(numPolys);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numPolys; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            polyCounts[i] = (*iCounts)[i];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numConnects = iIndices ? <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(iIndices-&gt;size()) : 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> polyConnects;</div>\n\
<div class=\"line\">        polyConnects.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a8c66dfa06f3736b2a214c5aed58bd216\">setLength</a>(numConnects);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> facePointIndex = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> base = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numPolys; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// reverse the order of the faces</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> curNum = polyCounts[i];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; curNum; ++j, ++facePointIndex)</div>\n\
<div class=\"line\">                polyConnects[facePointIndex] = (*iIndices)[base+curNum-j-1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            base += curNum;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a36d4f04f316d615a7d0af771a91016b9\">parentCount</a>() != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ioMesh.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3f723a01bbdf26f5cb58742739de97c4\">createInPlace</a>(iPoints.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(), numPolys, iPoints,</div>\n\
<div class=\"line\">                polyCounts, polyConnects);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ioMesh.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#af9b9e5d33d289134d567c62bad4ca3d5\">create</a>(iPoints.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(), numPolys, iPoints,</div>\n\
<div class=\"line\">               polyCounts, polyConnects, iParent);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setUVSet(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> &amp; iUlist, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> &amp; iVlist,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::UInt32ArraySamplePtr &amp; iSampIndices,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iUVSetName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// per vertex per-polygon uv</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numFaces = ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> nIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> uvCounts(ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>(), 0);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> uvIds(ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>(), 0);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> uvCountsIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// per-polygon per-vertex</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>() == (int) iSampIndices-&gt;size())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> numVertices = ioMesh.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a4ca016a3feb28fee0b9f373f86aebced\">polygonVertexCount</a>(faceIndex);</div>\n\
<div class=\"line\">                uvCounts[uvCountsIndex++] = numVertices;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> curIndex = nIndex;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> v = numVertices - 1; v &gt;= 0; v--, ++nIndex)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uvIds[nIndex] = (int)(*iSampIndices)[curIndex + v];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// per-vertex</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> numVertices = ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a4ca016a3feb28fee0b9f373f86aebced\">polygonVertexCount</a>(faceIndex);</div>\n\
<div class=\"line\">                uvCounts[uvCountsIndex++] = numVertices;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexList;</div>\n\
<div class=\"line\">                ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a469fc8126bc4424cd00853821d78a55a\">getPolygonVertices</a> (faceIndex, vertexList);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> v = 0; v &lt; numVertices; ++v, ++nIndex)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uvIds[nIndex] = (int)(*iSampIndices)[vertexList[v]];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// clear out the UVs if we need to shrink the size of the UV table</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a8ec9383ddfdf01902e7d5c8affd0c14c\">numUVs</a>(iUVSetName) &gt; (int) iUlist.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ioMesh.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a642e3c0881f698c1a7c1ca93f0085d3b\">clearUVs</a>(&amp;iUVSetName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = ioMesh.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a51bf5200523771e59ec4bf4c6bfdd0bc\">setUVs</a>(iUlist, iVlist, &amp;iUVSetName);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Couldnt set UVs for &quot;</span> + iUVSetName +</div>\n\
<div class=\"line\">                status.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad57d0c926a6ff0c782bfa67278925863\">errorString</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = ioMesh.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#aecf710967d185b161c044dd95c04345b\">assignUVs</a>(uvCounts, uvIds, &amp;iUVSetName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Couldnt assign UVs for &quot;</span> + iUVSetName +</div>\n\
<div class=\"line\">                status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad57d0c926a6ff0c782bfa67278925863\">errorString</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setUV2f(<span class=\"keywordtype\">double</span> iFrame, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::AbcGeom::IV2fGeomParam &amp; iV2f,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::AbcGeom::IUInt32ArrayProperty &amp; indexProperty,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iUVSetName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//Get the floor sample values</span></div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame, iV2f.getTimeSampling(),</div>\n\
<div class=\"line\">            iV2f.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::IV2fGeomParam::Sample samp;</div>\n\
<div class=\"line\">        iV2f.getIndexed(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">        Alembic::Abc::V2fArraySamplePtr sampVal = samp.getVals();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> sampSize = sampVal-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() != 0 &amp;&amp;</div>\n\
<div class=\"line\">            ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>() != (int) samp.getIndices()-&gt;size() &amp;&amp;</div>\n\
<div class=\"line\">            ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() != (int) samp.getIndices()-&gt;size())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;UV set sample size is: &quot;</span>;</div>\n\
<div class=\"line\">            msg += (int) samp.getIndices()-&gt;size();</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot; expecting: &quot;</span>;</div>\n\
<div class=\"line\">            msg += ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>();</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot; or &quot;</span>;</div>\n\
<div class=\"line\">            msg += ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> uList;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> vList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//Interpolate between 2 samples (as long as the indices are constant)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//(non index is considered constant)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( alpha != 0 &amp;&amp; index != ceilIndex &amp;&amp;</div>\n\
<div class=\"line\">            (!indexProperty || indexProperty.isConstant()) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IV2fGeomParam::Sample ceilSamp;</div>\n\
<div class=\"line\">            iV2f.getIndexed(ceilSamp,</div>\n\
<div class=\"line\">                    Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">            Alembic::Abc::V2fArraySamplePtr ceilVal = ceilSamp.getVals();</div>\n\
<div class=\"line\">            <span class=\"comment\">// Make sure the point count hasn&#39;t changed</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (ceilVal-&gt;size() == sampSize)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uList.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>(</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].x,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].x));</div>\n\
<div class=\"line\">                    vList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>(</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].y,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].y));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    uList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>((*sampVal)[i].x);</div>\n\
<div class=\"line\">                    vList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>((*sampVal)[i].y);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                uList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>((*sampVal)[i].x);</div>\n\
<div class=\"line\">                vList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a6d61a0ea5cd7a087db5ee81a990d4307\">append</a>((*sampVal)[i].y);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        setUVSet(ioMesh, uList, vList, samp.getIndices(), iUVSetName);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> createUVset(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; meshIO, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iSetName)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (meshIO.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a66b851e2784751105ebc03adec0dfeee\">createUVSetDataMesh</a>(iSetName) != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            meshIO.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9cd4c10fe30b80798d8e9585bfa44783\">createUVSet</a>(iSetName, NULL, NULL);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> createColorSet(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; meshIO, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iSetName,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::AbcCoreAbstract::MetaData &amp; iMetaData)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = meshIO.<a name=\"a46\"></a>createColorSetDataMesh(iSetName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            meshIO.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ac392a4fcb7da0759a4301119a395bcd7\">createColorSetWithName</a>(iSetName, NULL, NULL, NULL);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iMetaData.get(<span class=\"stringliteral\">&quot;mayaColorSet&quot;</span>) == <span class=\"stringliteral\">&quot;1&quot;</span>)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                meshIO.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ae4acd6b84edaab8e7b6234db0337021b\">setCurrentColorSetName</a>(iSetName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if MAYA_API_VERSION &gt; 201200</span></div>\n\
<div class=\"line\">            meshIO.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ac5b1b4574da46a7530b5c2782e08ab05\">setDisplayColors</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setColor(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, <a name=\"_a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html\">MColorArray</a> &amp; iColorList,</div>\n\
<div class=\"line\">        Alembic::Abc::UInt32ArraySamplePtr &amp; iSampIndices,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iColorSet,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a80dc8673cdbdbb813c71dfa32e0643f2\">MFnMesh::MColorRepresentation</a> iRepr)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// per vertex per-polygon color</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numFaces = ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> nIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isFacevarying =</div>\n\
<div class=\"line\">            ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>() == (int) iSampIndices-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> assignmentList(ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isFacevarying)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> numVertices = ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a4ca016a3feb28fee0b9f373f86aebced\">polygonVertexCount</a>(faceIndex);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> curIndex = nIndex;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> v = numVertices - 1; v &gt;= 0; v--, ++nIndex)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    assignmentList[nIndex] = (int)(*iSampIndices)[curIndex + v];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceIndex = 0; faceIndex &lt; numFaces; faceIndex++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> numVertices = ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a4ca016a3feb28fee0b9f373f86aebced\">polygonVertexCount</a>(faceIndex);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexList;</div>\n\
<div class=\"line\">                ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a469fc8126bc4424cd00853821d78a55a\">getPolygonVertices</a> (faceIndex, vertexList);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> v = numVertices - 1; v &gt;= 0; v--, ++nIndex)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    assignmentList[nIndex] =</div>\n\
<div class=\"line\">                        (int)(*iSampIndices)[vertexList[v]];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = ioMesh.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#aa770030da9bf7ac10dcb6d554edd2ebf\">setColors</a>(iColorList, &amp;iColorSet, iRepr);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Couldnt set colors for &quot;</span> + iColorSet +</div>\n\
<div class=\"line\">                status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad57d0c926a6ff0c782bfa67278925863\">errorString</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = ioMesh.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9db86252d7a7d109c5b496207168bc20\">assignColors</a>(assignmentList, &amp;iColorSet);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;Couldnt assign colors for &quot;</span> + iColorSet +</div>\n\
<div class=\"line\">                status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ad57d0c926a6ff0c782bfa67278925863\">errorString</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setColor3f(<span class=\"keywordtype\">double</span> iFrame, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IC3fGeomParam &amp; iC3f)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//Get the floor sample values</span></div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame, iC3f.getTimeSampling(),</div>\n\
<div class=\"line\">            iC3f.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::IC3fGeomParam::Sample samp;</div>\n\
<div class=\"line\">        iC3f.getIndexed(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">        Alembic::Abc::C3fArraySamplePtr sampVal = samp.getVals();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> sampSize = sampVal-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() != 0 &amp;&amp;</div>\n\
<div class=\"line\">            ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>() != (int) samp.getIndices()-&gt;size() &amp;&amp;</div>\n\
<div class=\"line\">            ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() != (int) samp.getIndices()-&gt;size())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <span class=\"stringliteral\">&quot;Color sample size is: &quot;</span>;</div>\n\
<div class=\"line\">            msg += (int) samp.getIndices()-&gt;size();</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot; expecting: &quot;</span>;</div>\n\
<div class=\"line\">            msg += ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>();</div>\n\
<div class=\"line\">            msg += <span class=\"stringliteral\">&quot; or &quot;</span>;</div>\n\
<div class=\"line\">            msg += ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html\">MColorArray</a> colorList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//Interpolate between 2 samples (as long as the indices are constant)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//(non index is considered constant)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( alpha != 0 &amp;&amp; index != ceilIndex &amp;&amp;</div>\n\
<div class=\"line\">            (!iC3f.getIndexProperty() || iC3f.getIndexProperty().isConstant()) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IC3fGeomParam::Sample ceilSamp;</div>\n\
<div class=\"line\">            iC3f.getIndexed(ceilSamp,</div>\n\
<div class=\"line\">                    Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">            Alembic::Abc::C3fArraySamplePtr ceilVal = ceilSamp.getVals();</div>\n\
<div class=\"line\">            <span class=\"comment\">// Make sure the point count hasn&#39;t changed</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sampSize == ceilVal-&gt;size())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    colorList.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a9740f98aca5891832ee7b8bfc5839106\">append</a>(</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].x,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].x),</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].y,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].y),</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].z,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].z));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    colorList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a9740f98aca5891832ee7b8bfc5839106\">append</a>((*sampVal)[i].x, (*sampVal)[i].y,</div>\n\
<div class=\"line\">                            (*sampVal)[i].z);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                colorList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a9740f98aca5891832ee7b8bfc5839106\">append</a>((*sampVal)[i].x, (*sampVal)[i].y,</div>\n\
<div class=\"line\">                        (*sampVal)[i].z);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorSetName(iC3f.getName().c_str());</div>\n\
<div class=\"line\">        Alembic::Abc::UInt32ArraySamplePtr indices = samp.getIndices();</div>\n\
<div class=\"line\">        setColor(ioMesh, colorList, indices, colorSetName, <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a80dc8673cdbdbb813c71dfa32e0643f2a8cadb7b1406f2e3233ddf5276c8c07ed\">MFnMesh::kRGB</a>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setColor4f(<span class=\"keywordtype\">double</span> iFrame, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IC4fGeomParam &amp; iC4f)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//Get the floor sample values</span></div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame, iC4f.getTimeSampling(),</div>\n\
<div class=\"line\">            iC4f.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::IC4fGeomParam::Sample samp;</div>\n\
<div class=\"line\">        iC4f.getIndexed(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\">        Alembic::Abc::C4fArraySamplePtr sampVal = samp.getVals();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> sampSize = sampVal-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ade2b77f791f506aba04d9d4818c12fee\">numFaceVertices</a>() != (int)samp.getIndices()-&gt;size() &amp;&amp;</div>\n\
<div class=\"line\">            ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a9959c49420dce143087cb0abe402923e\">numVertices</a>() != (int) samp.getIndices()-&gt;size())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;Color sample size != num face vertices&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html\">MColorArray</a> colorList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//Interpolate between 2 samples</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( alpha != 0 &amp;&amp; index != ceilIndex &amp;&amp;</div>\n\
<div class=\"line\">            (!iC4f.getIndexProperty() || iC4f.getIndexProperty().isConstant()) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IC4fGeomParam::Sample ceilSamp;</div>\n\
<div class=\"line\">            iC4f.getIndexed(ceilSamp,</div>\n\
<div class=\"line\">                    Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">            Alembic::Abc::C4fArraySamplePtr ceilVal = ceilSamp.getVals();</div>\n\
<div class=\"line\">            <span class=\"comment\">// Make sure the point count hasn&#39;t changed</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sampSize == ceilVal-&gt;size())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    colorList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a9740f98aca5891832ee7b8bfc5839106\">append</a>(</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].r,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].r),</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].g,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].g),</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].b,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].b),</div>\n\
<div class=\"line\">                            simpleLerp&lt;float&gt;(alpha, (*sampVal)[i].a,</div>\n\
<div class=\"line\">                                    (*ceilVal)[i].a)</div>\n\
<div class=\"line\">                                    );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    colorList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a9740f98aca5891832ee7b8bfc5839106\">append</a>((*sampVal)[i].r, (*sampVal)[i].g,</div>\n\
<div class=\"line\">                            (*sampVal)[i].b, (*sampVal)[i].a);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; sampSize; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                colorList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color_array.html#a9740f98aca5891832ee7b8bfc5839106\">append</a>((*sampVal)[i].r, (*sampVal)[i].g,</div>\n\
<div class=\"line\">                        (*sampVal)[i].b, (*sampVal)[i].a);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorSetName(iC4f.getName().c_str());</div>\n\
<div class=\"line\">        Alembic::Abc::UInt32ArraySamplePtr indices = samp.getIndices();</div>\n\
<div class=\"line\">        setColor(ioMesh, colorList, indices, colorSetName, <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a80dc8673cdbdbb813c71dfa32e0643f2a3c05b20237a36142d29e02c2141ce685\">MFnMesh::kRGBA</a>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt; Alembic::AbcGeom::IV2fGeomParam &gt; IV2fGPVec;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt; Alembic::AbcGeom::IC3fGeomParam &gt; IC3fGPVec;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt; Alembic::AbcGeom::IC4fGeomParam &gt; IC4fGPVec;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setColorsAndUVs(<span class=\"keywordtype\">double</span> iFrame, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::IV2fGeomParam iPrimaryV2f,</div>\n\
<div class=\"line\">        IV2fGPVec iV2s, IC3fGPVec iC3s, IC4fGPVec iC4s, <span class=\"keywordtype\">bool</span> iSetStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iPrimaryV2f.getNumSamples() &lt; 1 &amp;&amp; iV2s.empty() &amp;&amp; iC3s.empty() &amp;&amp;</div>\n\
<div class=\"line\">            iC4s.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> uvSetNames;</div>\n\
<div class=\"line\">        ioMesh.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a2f32f69a6f2b124ac085df4b067c76de\">getUVSetNames</a>(uvSetNames);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iPrimaryV2f.getNumSamples() &gt; 0 &amp;&amp;</div>\n\
<div class=\"line\">            (iSetStatic || !iPrimaryV2f.isConstant()))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uvSetName =</div>\n\
<div class=\"line\">                Alembic::Abc::GetSourceName(iPrimaryV2f.getMetaData()).c_str();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (uvSetName.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                uvSetName = <span class=\"stringliteral\">&quot;map1&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!inStrArray(uvSetNames, uvSetName))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                createUVset(ioMesh, uvSetName);</div>\n\
<div class=\"line\">                ioMesh.<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a880eb944dc60e145d27dad4468c9fd11\">setCurrentUVSetName</a>(uvSetName);</div>\n\
<div class=\"line\">                uvSetNames.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(uvSetName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            setUV2f(iFrame, ioMesh, iPrimaryV2f,</div>\n\
<div class=\"line\">                iPrimaryV2f.getIndexProperty(), uvSetName);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        IV2fGPVec::const_iterator v2sEnd = iV2s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (IV2fGPVec::iterator v2s = iV2s.begin(); v2s != v2sEnd; ++v2s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (v2s-&gt;getNumSamples() &gt; 0 &amp;&amp; (iSetStatic || !v2s-&gt;isConstant()))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> uvSetName(v2s-&gt;getName().c_str());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!inStrArray(uvSetNames, uvSetName))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    createUVset(ioMesh, uvSetName);</div>\n\
<div class=\"line\">                    uvSetNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(uvSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                setUV2f(iFrame, ioMesh, *v2s, v2s-&gt;getIndexProperty(), uvSetName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> colorSetNames;</div>\n\
<div class=\"line\">        ioMesh.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#aa5f322f25f97f76df932054bf5847c8e\">getColorSetNames</a>(colorSetNames);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        IC3fGPVec::const_iterator c3sEnd = iC3s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (IC3fGPVec::iterator c3s = iC3s.begin(); c3s != c3sEnd; ++c3s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (c3s-&gt;getNumSamples() &gt; 0 &amp;&amp; (iSetStatic || !c3s-&gt;isConstant()))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorSetName(c3s-&gt;getName().c_str());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!inStrArray(colorSetNames, colorSetName))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    createColorSet(ioMesh, colorSetName, c3s-&gt;getMetaData());</div>\n\
<div class=\"line\">                    colorSetNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(colorSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                setColor3f(iFrame, ioMesh, *c3s);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        IC4fGPVec::const_iterator c4sEnd = iC4s.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (IC4fGPVec::iterator c4s = iC4s.begin(); c4s != c4sEnd; ++c4s)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (c4s-&gt;getNumSamples() &gt; 0 &amp;&amp; (iSetStatic || !c4s-&gt;isConstant()))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorSetName(c4s-&gt;getName().c_str());</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!inStrArray(colorSetNames, colorSetName))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    createColorSet(ioMesh, colorSetName, c4s-&gt;getMetaData());</div>\n\
<div class=\"line\">                    colorSetNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(colorSetName);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                setColor4f(iFrame, ioMesh, *c4s);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillCreases(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, SubDAndFriends &amp; iNode,</div>\n\
<div class=\"line\">                     Alembic::Abc::FloatArraySamplePtr creases,</div>\n\
<div class=\"line\">                     Alembic::Abc::Int32ArraySamplePtr indices,</div>\n\
<div class=\"line\">                     Alembic::Abc::Int32ArraySamplePtr lengths)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!creases || creases-&gt;size() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// based on logic from the gpuCache, create edge map for edgeId lookup</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// unordered_map might be a better choice for this, but it isn&#39;t quite</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// portable yet.  Hopefully when everyone is mostly on good C++11</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// compliant compilers and beyond we can switch it.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt;std::pair&lt;int, int&gt;, <span class=\"keywordtype\">int</span>&gt; EdgeMap;</div>\n\
<div class=\"line\">        EdgeMap edgeMap;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numEdges = ioMesh.<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a742ce017199905f06ad07c178375a2d8\">numEdges</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numEdges; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> vertexList[2];</div>\n\
<div class=\"line\">            ioMesh.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a603d73f3637830a372ab3678d24ca6e6\">getEdgeVertices</a>(i, vertexList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (vertexList[0] &gt; vertexList[1])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::swap(vertexList[0], vertexList[1]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            edgeMap.insert(std::make_pair(</div>\n\
<div class=\"line\">                std::make_pair(vertexList[0], vertexList[1]), i));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::size_t numLengths = lengths-&gt;size();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> edgeIds;</div>\n\
<div class=\"line\">        <a name=\"_a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> creaseData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::size_t curIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// curIndex incremented here to move on to the next crease length</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (std::size_t i = 0; i &lt; numLengths; ++i, ++curIndex)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::size_t len = (*lengths)[i] - 1;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> creaseSharpness = (*creases)[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// curIndex incremented here to go between all the edges that make</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// up a given length</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (std::size_t j = 0; j &lt; len; ++j, ++curIndex)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                Alembic::Util::int32_t vertA = (*indices)[curIndex];</div>\n\
<div class=\"line\">                Alembic::Util::int32_t vertB = (*indices)[curIndex+1];</div>\n\
<div class=\"line\">                std::pair&lt;int, int&gt; edge = std::make_pair(vertA, vertB);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (edge.first &gt; edge.second)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::swap(edge.first, edge.second);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                EdgeMap::iterator iter = edgeMap.find(edge);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iter != edgeMap.end() &amp;&amp; iter-&gt;second &lt; numEdges)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    creaseData.<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#aafcfe8ff7afecc2dee4defccbdfb8e55\">append</a>(creaseSharpness);</div>\n\
<div class=\"line\">                    edgeIds.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a29ccefc020c96f15e099924ebe83eb07\">append</a>(iter-&gt;second);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a62355f26f350f9725bccd7eaa7542df3\">setCreaseEdges</a>(edgeIds, creaseData) != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = <span class=\"stringliteral\">&quot;Failed to set creases on: &quot;</span>;</div>\n\
<div class=\"line\">            warn += iNode.mMesh.getName().c_str();</div>\n\
<div class=\"line\">            printWarning(warn);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillCorners(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, SubDAndFriends &amp; iNode,</div>\n\
<div class=\"line\">                     Alembic::Abc::FloatArraySamplePtr corners,</div>\n\
<div class=\"line\">                     Alembic::Abc::Int32ArraySamplePtr cornerVerts)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!corners || corners-&gt;size() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCorners = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(corners-&gt;size());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> vertIds(numCorners);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> cornerData(numCorners);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numCorners; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cornerData[i] = (*corners)[i];</div>\n\
<div class=\"line\">            vertIds[i] = (*cornerVerts)[i];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a34be7d28408b76c1011d4122a90786ff\">setCreaseVertices</a>(vertIds, cornerData) != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = <span class=\"stringliteral\">&quot;Failed to set corners on: &quot;</span>;</div>\n\
<div class=\"line\">            warn += iNode.mMesh.getName().c_str();</div>\n\
<div class=\"line\">            printWarning(warn);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillHoles(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, SubDAndFriends &amp; iNode,</div>\n\
<div class=\"line\">                   Alembic::Abc::Int32ArraySamplePtr holes)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #if MAYA_API_VERSION &gt;= 201100</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!holes || holes-&gt;size() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numHoles = (<span class=\"keywordtype\">unsigned</span> int)holes-&gt;size();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a> holeData(numHoles);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numHoles; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            holeData[i] = (*holes)[i];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ioMesh.<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a5be791c0049247ab13e27cdffff5185a\">setInvisibleFaces</a>(holeData) != MS::kSuccess)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> warn = <span class=\"stringliteral\">&quot;Failed to set holes on: &quot;</span>;</div>\n\
<div class=\"line\">            warn += iNode.mMesh.getName().c_str();</div>\n\
<div class=\"line\">            printWarning(warn);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillCreasesCornersAndHoles(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, SubDAndFriends &amp; iNode,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::ISubDSchema::Sample &amp;samp)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fillCreases(ioMesh, iNode, samp.getCreaseSharpnesses(),</div>\n\
<div class=\"line\">                    samp.getCreaseIndices(), samp.getCreaseLengths());</div>\n\
<div class=\"line\">        fillCorners(ioMesh, iNode, samp.getCornerSharpnesses(),</div>\n\
<div class=\"line\">                    samp.getCornerIndices());</div>\n\
<div class=\"line\">        fillHoles(ioMesh, iNode, samp.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#ab0e871427039e4f00635a3c5b4af19f1\">getHoles</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}  <span class=\"comment\">// namespace</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> readPoly(<span class=\"keywordtype\">double</span> iFrame, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent,</div>\n\
<div class=\"line\">    PolyMeshAndFriends &amp; iNode, <span class=\"keywordtype\">bool</span> iInitialized)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::IPolyMeshSchema schema = iNode.mMesh.getSchema();</div>\n\
<div class=\"line\">    Alembic::AbcGeom::MeshTopologyVariance ttype = schema.getTopologyVariance();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame,</div>\n\
<div class=\"line\">        schema.getTimeSampling(), schema.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> pointArray;</div>\n\
<div class=\"line\">    Alembic::Abc::P3fArraySamplePtr ceilPoints;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// we can just read the points</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ttype != Alembic::AbcGeom::kHeterogenousTopology &amp;&amp; iInitialized)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::P3fArraySamplePtr points = schema.getPositionsProperty(</div>\n\
<div class=\"line\">            ).getValue(Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (alpha != 0.0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ceilPoints = schema.getPositionsProperty().getValue(</div>\n\
<div class=\"line\">                Alembic::Abc::ISampleSelector(ceilIndex) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       fillPoints(pointArray, points, ceilPoints, alpha);</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span>(pointArray.length() &gt; 0)</div>\n\
<div class=\"line\">       {</div>\n\
<div class=\"line\">           ioMesh.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a739dfbdbe4935389ac2d3e72d8c1f7dd\">setPoints</a>(pointArray, <a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8ad74f4c7c6562dc3f8339a8bba2d28dd0\">MSpace::kObject</a>);</div>\n\
<div class=\"line\">       }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        setColorsAndUVs(iFrame, ioMesh, schema.getUVsParam(),</div>\n\
<div class=\"line\">            iNode.mV2s, iNode.mC3s, iNode.mC4s, !iInitialized);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (schema.getNormalsParam().getNumSamples() &gt; 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setPolyNormals(iFrame, ioMesh, schema.getNormalsParam());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// we need to read the topology</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::IPolyMeshSchema::Sample samp;</div>\n\
<div class=\"line\">    schema.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; ttype != Alembic::AbcGeom::kHeterogenousTopology)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ceilPoints = schema.getPositionsProperty().getValue(</div>\n\
<div class=\"line\">            Alembic::Abc::ISampleSelector(ceilIndex) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fillPoints(pointArray, samp.getPositions(), ceilPoints, alpha);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   fillTopology(ioMesh, iParent, pointArray, samp.getFaceIndices(),</div>\n\
<div class=\"line\">       samp.getFaceCounts());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setPolyNormals(iFrame, ioMesh, schema.getNormalsParam());</div>\n\
<div class=\"line\">    setColorsAndUVs(iFrame, ioMesh, schema.getUVsParam(),</div>\n\
<div class=\"line\">        iNode.mV2s, iNode.mC3s, iNode.mC4s, !iInitialized);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> readSubD(<span class=\"keywordtype\">double</span> iFrame, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> &amp; ioMesh, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent,</div>\n\
<div class=\"line\">    SubDAndFriends &amp; iNode, <span class=\"keywordtype\">bool</span> iInitialized)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::ISubDSchema schema = iNode.mMesh.getSchema();</div>\n\
<div class=\"line\">    Alembic::AbcGeom::MeshTopologyVariance tv = schema.getTopologyVariance();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame,</div>\n\
<div class=\"line\">        schema.getTimeSampling(), schema.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> pointArray;</div>\n\
<div class=\"line\">    Alembic::Abc::P3fArraySamplePtr ceilPoints;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// we can just read the points</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (tv != Alembic::AbcGeom::kHeterogenousTopology &amp;&amp; iInitialized)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::ISampleSelector sampSel(index);</div>\n\
<div class=\"line\">        Alembic::Abc::P3fArraySamplePtr points =</div>\n\
<div class=\"line\">            schema.getPositionsProperty().getValue(sampSel);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (alpha != 0.0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ceilPoints = schema.getPositionsProperty().getValue(</div>\n\
<div class=\"line\">                Alembic::Abc::ISampleSelector(ceilIndex) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fillPoints(pointArray, points, ceilPoints, alpha);</div>\n\
<div class=\"line\">        ioMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a739dfbdbe4935389ac2d3e72d8c1f7dd\">setPoints</a>(pointArray, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8ad74f4c7c6562dc3f8339a8bba2d28dd0\">MSpace::kObject</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        setColorsAndUVs(iFrame, ioMesh, schema.getUVsParam(), iNode.mV2s,</div>\n\
<div class=\"line\">            iNode.mC3s, iNode.mC4s, !iInitialized);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// we need to read the topology</span></div>\n\
<div class=\"line\">    Alembic::AbcGeom::ISubDSchema::Sample samp;</div>\n\
<div class=\"line\">    schema.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (alpha != 0.0 &amp;&amp; tv != Alembic::AbcGeom::kHeterogenousTopology)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ceilPoints = schema.getPositionsProperty().getValue(</div>\n\
<div class=\"line\">            Alembic::Abc::ISampleSelector(ceilIndex) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fillPoints(pointArray, samp.getPositions(), ceilPoints, alpha);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fillTopology(ioMesh, iParent, pointArray, samp.getFaceIndices(),</div>\n\
<div class=\"line\">        samp.getFaceCounts());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setColorsAndUVs(iFrame, ioMesh, schema.getUVsParam(),</div>\n\
<div class=\"line\">        iNode.mV2s, iNode.mC3s, iNode.mC4s, !iInitialized);</div>\n\
<div class=\"line\">    fillCreasesCornersAndHoles(ioMesh, iNode, samp);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> disconnectMesh(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iMeshObject,</div>\n\
<div class=\"line\">    std::vector&lt;Prop&gt; &amp; iSampledPropList,</div>\n\
<div class=\"line\">    std::size_t iFirstProp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh;</div>\n\
<div class=\"line\">    fnMesh.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html#a6b2301b53683a8e8f56dd0b9cb088b0f\">setObject</a>(iMeshObject);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// disconnect old connection from AlembicNode or some other nodes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to inMesh if one such connection exist</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dstPlug = fnMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;inMesh&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    disconnectAllPlugsTo(dstPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    disconnectProps(fnMesh, iSampledPropList, iFirstProp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    clearPt(fnMesh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> createPoly(<span class=\"keywordtype\">double</span> iFrame, PolyMeshAndFriends &amp; iNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::IPolyMeshSchema &amp;schema = iNode.mMesh.getSchema();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name(iNode.mMesh.getName().c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add other properties</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!schema.isConstant())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> emptyPt;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> emptyInt;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh;</div>\n\
<div class=\"line\">        obj = fnMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#af9b9e5d33d289134d567c62bad4ca3d5\">create</a>(0, 0, emptyPt, emptyInt, emptyInt, iParent);</div>\n\
<div class=\"line\">        fnMesh.<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a386bb83443e16a98e6fa10c683e76b6c\">setName</a>(name);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> alpha = getWeightAndIndex(iFrame, schema.getTimeSampling(),</div>\n\
<div class=\"line\">            schema.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::IPolyMeshSchema::Sample samp;</div>\n\
<div class=\"line\">        schema.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> ptArray;</div>\n\
<div class=\"line\">        Alembic::Abc::P3fArraySamplePtr ceilPoints;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (index != ceilIndex)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Alembic::AbcGeom::IPolyMeshSchema::Sample ceilSamp;</div>\n\
<div class=\"line\">            schema.<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#ad86e61cd0b53ec369e132303f6c44823\">get</a>(ceilSamp, Alembic::Abc::ISampleSelector(ceilIndex));</div>\n\
<div class=\"line\">            ceilPoints = ceilSamp.getPositions();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fillPoints(ptArray, samp.getPositions(), ceilPoints, alpha);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh;</div>\n\
<div class=\"line\">        fillTopology(fnMesh, iParent, ptArray, samp.getFaceIndices(),</div>\n\
<div class=\"line\">            samp.getFaceCounts());</div>\n\
<div class=\"line\">        fnMesh.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#a386bb83443e16a98e6fa10c683e76b6c\">setName</a>(iNode.mMesh.getName().c_str());</div>\n\
<div class=\"line\">        setPolyNormals(iFrame, fnMesh, schema.getNormalsParam());</div>\n\
<div class=\"line\">        obj = fnMesh.object();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh(obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> pathName = fnMesh.partialPathName();</div>\n\
<div class=\"line\">    setInitialShadingGroup(pathName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setColorsAndUVs(iFrame, fnMesh, schema.getUVsParam(),</div>\n\
<div class=\"line\">        iNode.mV2s, iNode.mC3s, iNode.mC4s, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !schema.getNormalsParam().valid() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> attr;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName(<span class=\"stringliteral\">&quot;noNormals&quot;</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = attr.<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(attrName, attrName,</div>\n\
<div class=\"line\">        <a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        attr.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        attr.<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab8e48be1f1009a30d0e40dfcaf9e649d\">setHidden</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        fnMesh.addAttribute(attrObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> obj;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> createSubD(<span class=\"keywordtype\">double</span> iFrame, SubDAndFriends &amp; iNode, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; iParent)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::ISubDSchema schema = iNode.mMesh.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcCoreAbstract::index_t index, ceilIndex;</div>\n\
<div class=\"line\">    getWeightAndIndex(iFrame, schema.getTimeSampling(),</div>\n\
<div class=\"line\">        schema.getNumSamples(), index, ceilIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::ISubDSchema::Sample samp;</div>\n\
<div class=\"line\">    schema.get(samp, Alembic::Abc::ISampleSelector(index));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name(iNode.mMesh.getName().c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> pointArray;</div>\n\
<div class=\"line\">    Alembic::Abc::P3fArraySamplePtr emptyPtr;</div>\n\
<div class=\"line\">    fillPoints(pointArray, samp.getPositions(), emptyPtr, 0.0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fillTopology(fnMesh, iParent, pointArray, samp.getFaceIndices(),</div>\n\
<div class=\"line\">        samp.getFaceCounts());</div>\n\
<div class=\"line\">    fnMesh.setName(iNode.mMesh.getName().c_str());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setInitialShadingGroup(fnMesh.partialPathName());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj = fnMesh.object();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    setColorsAndUVs(iFrame, fnMesh, schema.getUVsParam(),</div>\n\
<div class=\"line\">        iNode.mV2s, iNode.mC3s, iNode.mC4s, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add the mFn-specific attributes to fnMesh node</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName(<span class=\"stringliteral\">&quot;SubDivisionMesh&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = numAttr.create(attrName, attrName,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>, 1);</div>\n\
<div class=\"line\">    numAttr.setKeyable(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    numAttr.setHidden(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    fnMesh.addAttribute(attrObj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (samp.getInterpolateBoundary() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;interpolateBoundary&quot;</span>);</div>\n\
<div class=\"line\">        attrObj = numAttr.create(attrName, attrName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>,</div>\n\
<div class=\"line\">            samp.getInterpolateBoundary());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        numAttr.setKeyable(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        numAttr.setHidden(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        fnMesh.addAttribute(attrObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (samp.getFaceVaryingInterpolateBoundary() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;faceVaryingInterpolateBoundary&quot;</span>);</div>\n\
<div class=\"line\">        attrObj = numAttr.create(attrName, attrName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>,</div>\n\
<div class=\"line\">            samp.getFaceVaryingInterpolateBoundary());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        numAttr.setKeyable(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        numAttr.setHidden(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        fnMesh.addAttribute(attrObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (samp.getFaceVaryingPropagateCorners() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        attrName = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;faceVaryingPropagateCorners&quot;</span>);</div>\n\
<div class=\"line\">        attrObj = numAttr.create(attrName, attrName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>,</div>\n\
<div class=\"line\">            samp.getFaceVaryingPropagateCorners());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        numAttr.setKeyable(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        numAttr.setHidden(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        fnMesh.addAttribute(attrObj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fillCreasesCornersAndHoles(fnMesh, iNode, samp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> obj;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";