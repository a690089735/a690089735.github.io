var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: ik2Bsolver/AwVector.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'ik2_bsolver_2_aw_vector_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: ik2Bsolver/AwVector.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">ik2Bsolver/AwVector.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _AwVector</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _AwVector</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  CLASS:    AwVector</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  CLASS DESCRIPTION (AwVector)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  A vector is a mathematical entity used to express the notion of</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  direction and magnitude (not to be confused with a point that expresses</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  location).  The direction is defined by the line from the origin</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  to the vector&#39;s x, y, z coordinate.  Vectors can be used to represent</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  translations, in the way that quaternions are used to represent</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rotations.  When vectors are used to represent a direction, multiplying</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  it by a transformation matrix results in the vector being properly</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  re-oriented by the transformation (eg. a pure translation doesn&#39;t affect</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  the direction something is pointing, so a vector remains unchanged under</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  a pure translation).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(__APPLE__)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwMath.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kVectorEquivalentTolerance  kDoubleEpsilon</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AwPoint;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AwMatrix;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AwQuaternion;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AwVector {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> Axis {</div>\n\
<div class=\"line\">        kXaxis,</div>\n\
<div class=\"line\">        kYaxis,</div>\n\
<div class=\"line\">        kZaxis</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwVector(); </div>\n\
<div class=\"line\">    AwVector(<span class=\"keyword\">const</span> AwVector &amp;); </div>\n\
<div class=\"line\">    AwVector(<span class=\"keyword\">const</span> AwPoint &amp;); </div>\n\
<div class=\"line\">    AwVector(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz = 0.0); </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef COMPILE_OUTSIDE_MAYA</span></div>\n\
<div class=\"line\">    AwVector(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;); </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    ~AwVector(); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwVector &amp;operator=(<span class=\"keyword\">const</span> AwVector &amp;); </div>\n\
<div class=\"line\">    AwVector &amp;operator=(<span class=\"keyword\">const</span> AwMatrix &amp;); </div>\n\
<div class=\"line\">    AwVector &amp;set(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz = 0.0); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> &amp;operator[](<span class=\"keywordtype\">size_t</span> i); </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> operator[](<span class=\"keywordtype\">size_t</span> i) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> operator*(<span class=\"keyword\">const</span> AwVector &amp;right) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector operator^(<span class=\"keyword\">const</span> AwVector &amp;right) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dotProduct(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector crossProduct(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwVector operator*(<span class=\"keyword\">const</span> AwMatrix &amp;right) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector &amp;operator*=(<span class=\"keyword\">const</span> AwMatrix &amp;right);</div>\n\
<div class=\"line\">    AwVector operator*(<span class=\"keywordtype\">double</span>) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    AwVector operator+(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector operator-(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector operator-() <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator==(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator!=(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> length() <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> norm() <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector normal() <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector &amp;normalize(); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwVector rotateBy(<span class=\"keyword\">const</span> AwQuaternion &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isParallel(<span class=\"keyword\">const</span> AwVector &amp;, </div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> = kVectorEquivalentTolerance) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    Axis dominantAxis() <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> angle(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">operator</span> AwMatrix() <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;operator&lt;&lt;(ostream &amp;os, <span class=\"keyword\">const</span> AwVector &amp;);  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AwVector zero;     <span class=\"comment\">// The identity transformation. </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AwVector xAxis;    <span class=\"comment\">// The x axis </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AwVector yAxis;    <span class=\"comment\">// The y axis </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AwVector zAxis;    <span class=\"comment\">// The z axis </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> x, y, z;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  Inline methods</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector::AwVector ()</div>\n\
<div class=\"line\">: x(0.0), y(0.0), z(0.0) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector::AwVector(<span class=\"keyword\">const</span> AwVector &amp;v)</div>\n\
<div class=\"line\">: x(v.x), y(v.y), z(v.z) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector::AwVector(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz)</div>\n\
<div class=\"line\">: x(xx), y(yy), z(zz) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef COMPILE_OUTSIDE_MAYA</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector::AwVector(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;v)</div>\n\
<div class=\"line\">: x(v.x), y(v.y), z(v.z) {}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector::~AwVector ()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector &amp;AwVector::operator=(<span class=\"keyword\">const</span> AwVector &amp;src)</div>\n\
<div class=\"line\">{ x = src.x; y = src.y; z = src.z; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector &amp;AwVector::set(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz)</div>\n\
<div class=\"line\">{ x = xx; y = yy; z = zz; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> &amp; AwVector::operator[](<span class=\"keywordtype\">size_t</span> i)</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> (&amp;x)[i]; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> AwVector::operator[](<span class=\"keywordtype\">size_t</span> i)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> (&amp;x)[i]; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> AwVector::dotProduct(<span class=\"keyword\">const</span> AwVector &amp;v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> (x*v.x  + y*v.y + z*v.z); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwVector::crossProduct(<span class=\"keyword\">const</span> AwVector &amp;r)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> AwVector(y*r.z - z*r.y, z*r.x - x*r.z, x*r.y - y*r.x); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> AwVector::operator*(<span class=\"keyword\">const</span> AwVector &amp;a)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> dotProduct(a); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwVector::operator^(<span class=\"keyword\">const</span> AwVector &amp;a)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> crossProduct(a); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwVector::operator+(<span class=\"keyword\">const</span> AwVector &amp;v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> AwVector(x + v.x, y + v.y, z + v.z); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwVector::operator-(<span class=\"keyword\">const</span> AwVector &amp;v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> AwVector(x - v.x, y - v.y, z - v.z); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector &amp;AwVector::operator*=(<span class=\"keyword\">const</span> AwMatrix &amp;m)</div>\n\
<div class=\"line\">{ *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * m; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwVector::operator*(<span class=\"keywordtype\">double</span> s)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> AwVector(x * s, y * s, z * s); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwVector::operator-()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> AwVector(-x, -y, -z); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> AwVector::operator==(<span class=\"keyword\">const</span> AwVector &amp;v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> (x == v.x &amp;&amp; y == v.y &amp;&amp; z == v.z); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> AwVector::operator!=(<span class=\"keyword\">const</span> AwVector &amp;v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> !(*<span class=\"keyword\">this</span> == v); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> AwVector::norm()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> (x*x + y*y + z*z); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> AwVector::length()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> sqrt(norm()); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwVector::normal()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ AwVector tmp(*<span class=\"keyword\">this</span>); <span class=\"keywordflow\">return</span> tmp.normalize(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif // _AwVector</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";