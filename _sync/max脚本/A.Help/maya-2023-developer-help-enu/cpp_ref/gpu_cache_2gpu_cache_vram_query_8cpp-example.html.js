var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheVramQuery.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_vram_query_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheVramQuery.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheVramQuery.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVramQuery.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheGLFT.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHardwareRenderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;cassert&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define INITGUID</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;windows.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;oleauto.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;initguid.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;wbemidl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;dxgi.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined(__APPLE__) || defined(__MACH__)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;ApplicationServices/ApplicationServices.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;iostream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;sstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;xcb/xcb.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGL.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL FUNCTIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Windows-specific helper functions.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> BOOL (WINAPI *PfnCoSetProxyBlanket)(</div>\n\
<div class=\"line\">        IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc,</div>\n\
<div class=\"line\">        OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel,</div>\n\
<div class=\"line\">        RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CoInitializeHelper</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        CoInitializeHelper() {</div>\n\
<div class=\"line\">            fResult = CoInitialize(0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ~CoInitializeHelper() {</div>\n\
<div class=\"line\">            CoUninitialize();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keyword\">operator</span> bool() {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (SUCCEEDED(fResult));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        HRESULT fResult;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Win32LibraryHelper</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        Win32LibraryHelper(<span class=\"keyword\">const</span> <span class=\"keywordtype\">wchar_t</span>* library) {</div>\n\
<div class=\"line\">            fModule = LoadLibraryW(library);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ~Win32LibraryHelper() {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fModule) {</div>\n\
<div class=\"line\">                FreeLibrary(fModule);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keyword\">operator</span> HINSTANCE()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fModule;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        HINSTANCE fModule;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> CoObjectType&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CoObjectCreator</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~CoObjectCreator() {}</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> CoObjectType* operator() () <span class=\"keyword\">const</span> = NULL;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> CoObjectType&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CoObjectHelper</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        CoObjectHelper(<span class=\"keyword\">const</span> CoObjectCreator&lt;CoObjectType&gt;&amp; creator) {</div>\n\
<div class=\"line\">            fObject = creator();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        CoObjectHelper(CoObjectType* <span class=\"keywordtype\">object</span>) {</div>\n\
<div class=\"line\">            fObject = object;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ~CoObjectHelper() {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fObject) {</div>\n\
<div class=\"line\">                fObject-&gt;Release();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        CoObjectType* operator-&gt; ()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fObject;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keyword\">operator</span> bool()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (fObject != NULL);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keyword\">operator</span> CoObjectType*() <span class=\"keyword\">const</span> {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fObject;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        CoObjectType* fObject;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>CoStringHelper</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        CoStringHelper(<span class=\"keyword\">const</span> <span class=\"keywordtype\">wchar_t</span>* str) {</div>\n\
<div class=\"line\">            fString = SysAllocString(str);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        ~CoStringHelper() {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fString) {</div>\n\
<div class=\"line\">                SysFreeString(fString);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keyword\">operator</span> BSTR()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> fString;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        BSTR fString;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>WbemLocatorHelper : <span class=\"keyword\">public</span> CoObjectCreator&lt;IWbemLocator&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> IWbemLocator* operator() ()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            IWbemLocator* wbemLocator = NULL;</div>\n\
<div class=\"line\">            HRESULT hres = CoCreateInstance(CLSID_WbemLocator, NULL, CLSCTX_INPROC_SERVER,</div>\n\
<div class=\"line\">                IID_IWbemLocator, (LPVOID*)&amp;wbemLocator);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> SUCCEEDED(hres) ? wbemLocator : NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>WbemServicesHelper : <span class=\"keyword\">public</span> CoObjectCreator&lt;IWbemServices&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        WbemServicesHelper(IWbemLocator* wbemLocator) : fWbemLocator(wbemLocator) {}</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> IWbemServices* operator() ()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            CoStringHelper ns(L<span class=\"stringliteral\">&quot;\\\\\\\\.\\\\root\\\\cimv2&quot;</span>);</div>\n\
<div class=\"line\">            IWbemServices* wbemServices = NULL;</div>\n\
<div class=\"line\">            HRESULT hres = fWbemLocator-&gt;ConnectServer(ns, NULL, NULL, 0L, 0L, NULL, NULL, &amp;wbemServices);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> SUCCEEDED(hres) ? wbemServices : NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        IWbemLocator* fWbemLocator;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>EnumVideoCtrlHelper : <span class=\"keyword\">public</span> CoObjectCreator&lt;IEnumWbemClassObject&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        EnumVideoCtrlHelper(IWbemServices* wbemServices) : fWbemServices(wbemServices) {}</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> IEnumWbemClassObject* operator() ()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            CoStringHelper className(L<span class=\"stringliteral\">&quot;Win32_VideoController&quot;</span>);</div>\n\
<div class=\"line\">            IEnumWbemClassObject* enumVideoControllers = NULL;</div>\n\
<div class=\"line\">            HRESULT hres = fWbemServices-&gt;CreateInstanceEnum(className, 0, NULL, &amp;enumVideoControllers);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> SUCCEEDED(hres) ? enumVideoControllers : NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        IWbemServices* fWbemServices;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> HRESULT ( WINAPI* LPCREATEDXGIFACTORY )( REFIID, <span class=\"keywordtype\">void</span>** );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DXGIFactoryHelper : <span class=\"keyword\">public</span> CoObjectCreator&lt;IDXGIFactory&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        DXGIFactoryHelper(HINSTANCE dxgiModule) : fDXGIModule(dxgiModule) {}</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> IDXGIFactory* operator() ()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            LPCREATEDXGIFACTORY createDXGIFactory = (LPCREATEDXGIFACTORY)</div>\n\
<div class=\"line\">                GetProcAddress(fDXGIModule, <span class=\"stringliteral\">&quot;CreateDXGIFactory&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!createDXGIFactory) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            IDXGIFactory* dxgiFactory = NULL;</div>\n\
<div class=\"line\">            createDXGIFactory(__uuidof(IDXGIFactory), (LPVOID*)&amp;dxgiFactory);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> dxgiFactory;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        HINSTANCE fDXGIModule;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>DXGIAdapterHelper : <span class=\"keyword\">public</span> CoObjectCreator&lt;IDXGIAdapter&gt;</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        DXGIAdapterHelper(IDXGIFactory* dxgiFactory, UINT index)</div>\n\
<div class=\"line\">            : fDXGIFactory(dxgiFactory), fIndex(index) {}</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> IDXGIAdapter* operator() ()<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            IDXGIAdapter* dxgiAdapter = NULL;</div>\n\
<div class=\"line\">            HRESULT result = fDXGIFactory-&gt;EnumAdapters(fIndex, &amp;dxgiAdapter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// End of enumeration</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (FAILED(result)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> dxgiAdapter;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        IDXGIFactory* fDXGIFactory;</div>\n\
<div class=\"line\">        UINT          fIndex;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined(__APPLE__) || defined(__MACH__)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// OSX-specific helper functions.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Nothing for now.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Linux-specific helper functions.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::string getXorgLogFilePath()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Provide a workaround to specify the Xorg log path in the case of a weird</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// installation.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* xorgLogFilePathOverride = ::getenv(<span class=\"stringliteral\">&quot;MAYA_XORG_LOG_FILE_PATH_OVERRIDE&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (xorgLogFilePathOverride)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> xorgLogFilePathOverride;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Default string on most systems.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* kDefaultFilePath = <span class=\"stringliteral\">&quot;/var/log/Xorg.0.log&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the current display in case the X server was started on a display number</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// different than 0.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* host = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> display = 0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> xcbSuccess = xcb_parse_display(<span class=\"keyword\">nullptr</span>, &amp;host, &amp;display, <span class=\"keyword\">nullptr</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!xcbSuccess)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> kDefaultFilePath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We don&#39;t care about the returned host.  However, the approach of parsing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the local Xorg log file to determine access to graphics hardware will not</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// work if the X server is on a remote host.  However, I&#39;m guessing a lot of</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// other stuff will be broken in that case as well, and the host could still</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// be referring to something like &quot;localhost&quot; or &quot;127.0.0.1&quot; and we don&#39;t</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// want to handle these possibilities.</span></div>\n\
<div class=\"line\">        ::free(host);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// In a similar way, the default location for the Xorg log can be set in</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// many ways:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// - Default path at server compilation time</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// - Configuration file</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// - Command line argument</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// - Etc.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// We don&#39;t really have a way to query for it, so we assume the default;</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// we only adjust for display number.</span></div>\n\
<div class=\"line\">        std::ostringstream o;</div>\n\
<div class=\"line\">        o &lt;&lt; <span class=\"stringliteral\">&quot;/var/log/Xorg.&quot;</span> &lt;&lt; display &lt;&lt; <span class=\"stringliteral\">&quot;.log&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> o.str();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS VramQuery</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">MUint64 VramQuery::queryVram()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialized in constructor</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VramQuery::getInstance().fVram;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> VramQuery::isGeforce()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialized in constructor</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VramQuery::getInstance().fIsGeforce;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> VramQuery::isQuadro()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialized in constructor</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VramQuery::getInstance().fIsQuadro;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; VramQuery::manufacturer()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialized in constructor</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VramQuery::getInstance().fManufacturer;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; VramQuery::model()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialized in constructor</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> VramQuery::getInstance().fModel;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VramQuery::driverVersion(<span class=\"keywordtype\">int</span> version[3])</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialized in constructor</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> VramQuery&amp; query = VramQuery::getInstance();</div>\n\
<div class=\"line\">    version[0] = query.fDriverVersion[0];</div>\n\
<div class=\"line\">    version[1] = query.fDriverVersion[1];</div>\n\
<div class=\"line\">    version[2] = query.fDriverVersion[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//assert(version[0] != 0 || version[1] != 0 || version[2] != 0);</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VramQuery::queryVramAndDriverWMI(MUint64&amp; vram, <span class=\"keywordtype\">int</span> driverVersion[3], <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; manufacturer, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; model)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    vram = driverVersion[0] = driverVersion[1] = driverVersion[2] = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize COM</span></div>\n\
<div class=\"line\">    CoInitializeHelper coInit;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!coInit) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create WMI COM instance</span></div>\n\
<div class=\"line\">    WbemLocatorHelper wbemLocatorCreator;</div>\n\
<div class=\"line\">    CoObjectHelper&lt;IWbemLocator&gt; wbemLocator(wbemLocatorCreator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!wbemLocator) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// connect to WMI</span></div>\n\
<div class=\"line\">    WbemServicesHelper wbemServiceCreator(wbemLocator);</div>\n\
<div class=\"line\">    CoObjectHelper&lt;IWbemServices&gt; wbemServices(wbemServiceCreator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!wbemServices) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// switch security level to IMPERSONATE </span></div>\n\
<div class=\"line\">    Win32LibraryHelper ole32Library(L<span class=\"stringliteral\">&quot;ole32.dll&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ole32Library) {</div>\n\
<div class=\"line\">        PfnCoSetProxyBlanket pfnCoSetProxyBlanket = </div>\n\
<div class=\"line\">            (PfnCoSetProxyBlanket)GetProcAddress(ole32Library, <span class=\"stringliteral\">&quot;CoSetProxyBlanket&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pfnCoSetProxyBlanket) {</div>\n\
<div class=\"line\">            pfnCoSetProxyBlanket(wbemServices, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE,</div>\n\
<div class=\"line\">                NULL, RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create video controller enum</span></div>\n\
<div class=\"line\">    EnumVideoCtrlHelper enumVideoCtrlCreator(wbemServices);</div>\n\
<div class=\"line\">    CoObjectHelper&lt;IEnumWbemClassObject&gt; enumVideoCtrls(enumVideoCtrlCreator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!enumVideoCtrls) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the first 10 video controllers</span></div>\n\
<div class=\"line\">    IWbemClassObject* videoCtrls[10] = {0};</div>\n\
<div class=\"line\">    DWORD returned = 0;</div>\n\
<div class=\"line\">    enumVideoCtrls-&gt;Reset();</div>\n\
<div class=\"line\">    HRESULT hres = enumVideoCtrls-&gt;Next(5000, 10, videoCtrls, &amp;returned);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (FAILED(hres) || returned == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// query the video memory</span></div>\n\
<div class=\"line\">    VARIANT var;</div>\n\
<div class=\"line\">    VariantInit(&amp;var);</div>\n\
<div class=\"line\">    CoStringHelper vramPropName(L<span class=\"stringliteral\">&quot;AdapterRAM&quot;</span>);</div>\n\
<div class=\"line\">    CoStringHelper compatPropName(L<span class=\"stringliteral\">&quot;AdapterCompatibility&quot;</span>);</div>\n\
<div class=\"line\">    CoStringHelper driverVersionPropName(L<span class=\"stringliteral\">&quot;DriverVersion&quot;</span>);</div>\n\
<div class=\"line\">    CoStringHelper modelPropName(L<span class=\"stringliteral\">&quot;Name&quot;</span>);</div>\n\
<div class=\"line\">    MUint64 maxVidMem = 0;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> driverVersionStr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (UINT ctrlIndex = 0; ctrlIndex &lt; returned; ctrlIndex++) {</div>\n\
<div class=\"line\">        CoObjectHelper&lt;IWbemClassObject&gt; videoCtrl(videoCtrls[ctrlIndex]);</div>\n\
<div class=\"line\">        hres = videoCtrl-&gt;Get(vramPropName, 0L, &amp;var, NULL, NULL);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (SUCCEEDED(hres)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (var.ulVal &gt; maxVidMem) {</div>\n\
<div class=\"line\">                maxVidMem = var.ulVal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                VariantClear(&amp;var);</div>\n\
<div class=\"line\">                videoCtrl-&gt;Get(compatPropName, 0L, &amp;var, NULL, NULL);</div>\n\
<div class=\"line\">                manufacturer = var.bstrVal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                VariantClear(&amp;var);</div>\n\
<div class=\"line\">                videoCtrl-&gt;Get(driverVersionPropName, 0L, &amp;var, NULL, NULL);</div>\n\
<div class=\"line\">                driverVersionStr = var.bstrVal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                VariantClear(&amp;var);</div>\n\
<div class=\"line\">                videoCtrl-&gt;Get(modelPropName, 0L, &amp;var, NULL, NULL);</div>\n\
<div class=\"line\">                model = var.bstrVal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        VariantClear(&amp;var);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    vram = maxVidMem;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (manufacturer == <span class=\"stringliteral\">&quot;NVIDIA&quot;</span></div>\n\
<div class=\"line\">        || manufacturer == <span class=\"stringliteral\">&quot;NVIDIA &quot;</span> <span class=\"comment\">// beta drivers</span></div>\n\
<div class=\"line\">        ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// e.g. 8.17.12.8026 = 280.26</span></div>\n\
<div class=\"line\">        <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> versions;</div>\n\
<div class=\"line\">        driverVersionStr.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;.&#39;</span>, versions);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (versions.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 4) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChars2 = versions[2].numChars();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChars3 = versions[3].numChars();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numChars2 &gt;= 1 &amp;&amp; numChars3 &gt;= 2) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">while</span> (numChars3 &lt; 4) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// If it has less than 4 digits, patch it with leading zeros.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// e.g. 9.18.13.529 = 305.29</span></div>\n\
<div class=\"line\">                    versions[3] = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;0&quot;</span>) + versions[3];</div>\n\
<div class=\"line\">                    numChars3++;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> major1 = versions[2].substringW(numChars2-1, numChars2-1);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> major2 = versions[3].substringW(0, 1);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> major = major1 + major2;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> minor = versions[3].substringW(2, numChars3-1);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (major.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a36f5e915ae736395c577cf32724af3bf\">isUnsigned</a>() &amp;&amp; minor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a36f5e915ae736395c577cf32724af3bf\">isUnsigned</a>()) {</div>\n\
<div class=\"line\">                    driverVersion[0] = major.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a33a3313205686174bef095f523f9408b\">asUnsigned</a>();</div>\n\
<div class=\"line\">                    driverVersion[1] = minor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a33a3313205686174bef095f523f9408b\">asUnsigned</a>();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (manufacturer == <span class=\"stringliteral\">&quot;ATI Technologies Inc.&quot;</span> || </div>\n\
<div class=\"line\">        manufacturer == <span class=\"stringliteral\">&quot;Advanced Micro Devices, Inc.&quot;</span>) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// e.g. 8.861.0.0 = 8.861</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> version[4], ret;</div>\n\
<div class=\"line\">        ret = sscanf_s(driverVersionStr.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), <span class=\"stringliteral\">&quot;%d.%d.%d.%d&quot;</span>,</div>\n\
<div class=\"line\">                &amp;version[0], &amp;version[1], &amp;version[2], &amp;version[3]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ret == 4) {</div>\n\
<div class=\"line\">            driverVersion[0] = version[0];</div>\n\
<div class=\"line\">            driverVersion[1] = version[1];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MUint64 VramQuery::queryVramDXGI()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize COM</span></div>\n\
<div class=\"line\">    CoInitializeHelper coInit;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!coInit) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Load dxgi.dll (need Vista or later)</span></div>\n\
<div class=\"line\">    Win32LibraryHelper dxgiLibrary(L<span class=\"stringliteral\">&quot;dxgi.dll&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!dxgiLibrary) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create DXGI Factory</span></div>\n\
<div class=\"line\">    DXGIFactoryHelper dxgiFactoryCreator(dxgiLibrary);</div>\n\
<div class=\"line\">    CoObjectHelper&lt;IDXGIFactory&gt; dxgiFactory(dxgiFactoryCreator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!dxgiFactory) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    MUint64 maxVidMem = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (UINT index = 0; ; ++index) {</div>\n\
<div class=\"line\">        DXGIAdapterHelper dxgiAdapterCreator(dxgiFactory, index);</div>\n\
<div class=\"line\">        CoObjectHelper&lt;IDXGIAdapter&gt; dxgiAdapter(dxgiAdapterCreator);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!dxgiAdapter) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        DXGI_ADAPTER_DESC dxgiAdapterDesc;</div>\n\
<div class=\"line\">        ZeroMemory(&amp;dxgiAdapterDesc, <span class=\"keyword\">sizeof</span>(DXGI_ADAPTER_DESC));</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        HRESULT result = dxgiAdapter-&gt;GetDesc(&amp;dxgiAdapterDesc);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (SUCCEEDED(result)) {</div>\n\
<div class=\"line\">            SIZE_T vidMem = dxgiAdapterDesc.DedicatedVideoMemory;</div>\n\
<div class=\"line\">            maxVidMem = (vidMem &gt; maxVidMem) ? vidMem : maxVidMem;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> maxVidMem;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined(__APPLE__) || defined(__MACH__)</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VramQuery::queryVramAndDriverMAC(MUint64&amp; vram, <span class=\"keywordtype\">int</span> driverVersion[3], <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; manufacturer, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; model)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    vram = 0;</div>\n\
<div class=\"line\">    driverVersion[0] = driverVersion[1] = driverVersion[2] = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CGError res = CGDisplayNoErr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// query active displays</span></div>\n\
<div class=\"line\">    CGDisplayCount dspCount = 0;</div>\n\
<div class=\"line\">    res = CGGetActiveDisplayList(0, NULL, &amp;dspCount);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (res || dspCount == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// use boost here</span></div>\n\
<div class=\"line\">    CGDirectDisplayID* displays = (CGDirectDisplayID*)calloc((<span class=\"keywordtype\">size_t</span>)dspCount, <span class=\"keyword\">sizeof</span>(CGDirectDisplayID));</div>\n\
<div class=\"line\">    res = CGGetActiveDisplayList(dspCount, displays, &amp;dspCount);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (res || dspCount == 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    SInt64 maxVramTotal = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (CGDisplayCount i = 0; i &lt; dspCount; i++) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the service port for the display</span></div>\n\
<div class=\"line\">        io_service_t dspPort = CGDisplayIOServicePort(displays[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// ask IOKit for the VRAM size property</span></div>\n\
<div class=\"line\">        <span class=\"comment\">/* HD 2600: IOFBMemorySize = 256MB. VRAM,totalsize = 256MB</span></div>\n\
<div class=\"line\"><span class=\"comment\">           HD 5770: IOFBMemorySize = 512MB. VRAM,totalsize = 1024MB</span></div>\n\
<div class=\"line\"><span class=\"comment\">           Apple&#39;s QA page is not correct. We should search for IOPCIDevice&#39;s VRAM,totalsize property.</span></div>\n\
<div class=\"line\"><span class=\"comment\">        CFTypeRef typeCode = IORegistryEntryCreateCFProperty(dspPort,</span></div>\n\
<div class=\"line\"><span class=\"comment\">            CFSTR(kIOFBMemorySizeKey),</span></div>\n\
<div class=\"line\"><span class=\"comment\">            kCFAllocatorDefault,</span></div>\n\
<div class=\"line\"><span class=\"comment\">            kNilOptions);</span></div>\n\
<div class=\"line\"><span class=\"comment\">        */</span></div>\n\
<div class=\"line\">        SInt64 vramScale = 1;</div>\n\
<div class=\"line\">        CFTypeRef typeCode = IORegistryEntrySearchCFProperty(dspPort,</div>\n\
<div class=\"line\">            kIOServicePlane,</div>\n\
<div class=\"line\">            CFSTR(<span class=\"stringliteral\">&quot;VRAM,totalsize&quot;</span>),</div>\n\
<div class=\"line\">            kCFAllocatorDefault,</div>\n\
<div class=\"line\">            kIORegistryIterateRecursively | kIORegistryIterateParents);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!typeCode) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// On the new Mac Pro, we have VRAM,totalMB instead.</span></div>\n\
<div class=\"line\">            typeCode = IORegistryEntrySearchCFProperty(dspPort,</div>\n\
<div class=\"line\">                kIOServicePlane,</div>\n\
<div class=\"line\">                CFSTR(<span class=\"stringliteral\">&quot;VRAM,totalMB&quot;</span>),</div>\n\
<div class=\"line\">                kCFAllocatorDefault,</div>\n\
<div class=\"line\">                kIORegistryIterateRecursively | kIORegistryIterateParents);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (typeCode) {</div>\n\
<div class=\"line\">                vramScale = 1024 * 1024;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// ensure we have valid data from IOKit</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (typeCode) {</div>\n\
<div class=\"line\">            SInt64 vramTotal = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (CFGetTypeID(typeCode) == CFNumberGetTypeID()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// AMD, VRAM,totalsize is CFNumber</span></div>\n\
<div class=\"line\">                CFNumberGetValue((<span class=\"keyword\">const</span> __CFNumber*)typeCode, kCFNumberSInt64Type, &amp;vramTotal);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (CFGetTypeID(typeCode) == CFDataGetTypeID()) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// NVIDIA, VRAM,totalsize is CFData</span></div>\n\
<div class=\"line\">                CFIndex      length = CFDataGetLength((<span class=\"keyword\">const</span> __CFData*)typeCode);</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> UInt8* data   = CFDataGetBytePtr((<span class=\"keyword\">const</span> __CFData*)typeCode);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (length == 4) {</div>\n\
<div class=\"line\">                    vramTotal = *(<span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)data;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (length == 8) {</div>\n\
<div class=\"line\">                    vramTotal = *(<span class=\"keyword\">const</span> SInt64*)data;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            vramTotal *= vramScale;</div>\n\
<div class=\"line\">            CFRelease(typeCode);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (vramTotal &gt; maxVramTotal) {</div>\n\
<div class=\"line\">                maxVramTotal = vramTotal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                typeCode = IORegistryEntrySearchCFProperty(dspPort,</div>\n\
<div class=\"line\">                            kIOServicePlane,</div>\n\
<div class=\"line\">                            CFSTR(<span class=\"stringliteral\">&quot;NVDA,Features&quot;</span>),</div>\n\
<div class=\"line\">                            kCFAllocatorDefault,</div>\n\
<div class=\"line\">                            kIORegistryIterateRecursively | kIORegistryIterateParents);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (typeCode) {</div>\n\
<div class=\"line\">                    manufacturer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;NVIDIA&quot;</span>);</div>\n\
<div class=\"line\">                    CFRelease(typeCode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                typeCode = IORegistryEntrySearchCFProperty(dspPort,</div>\n\
<div class=\"line\">                            kIOServicePlane,</div>\n\
<div class=\"line\">                            CFSTR(<span class=\"stringliteral\">&quot;ATY,Copyright&quot;</span>),</div>\n\
<div class=\"line\">                            kCFAllocatorDefault,</div>\n\
<div class=\"line\">                            kIORegistryIterateRecursively | kIORegistryIterateParents);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (typeCode) {</div>\n\
<div class=\"line\">                    manufacturer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Advanced Micro Devices, Inc.&quot;</span>);</div>\n\
<div class=\"line\">                    CFRelease(typeCode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// GPU model</span></div>\n\
<div class=\"line\">                typeCode = IORegistryEntrySearchCFProperty(dspPort,</div>\n\
<div class=\"line\">                            kIOServicePlane,</div>\n\
<div class=\"line\">                            CFSTR(<span class=\"stringliteral\">&quot;model&quot;</span>),</div>\n\
<div class=\"line\">                            kCFAllocatorDefault,</div>\n\
<div class=\"line\">                            kIORegistryIterateRecursively | kIORegistryIterateParents);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (typeCode) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (CFGetTypeID(typeCode) == CFDataGetTypeID()) {</div>\n\
<div class=\"line\">                        model = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>((<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)CFDataGetBytePtr((<span class=\"keyword\">const</span> __CFData*)typeCode));</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    CFRelease(typeCode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    vram = (MUint64)maxVramTotal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Query the display driver version.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// e.g. 2.1 NVIDIA-7.2.9</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// e.g. 1.5 ATI-1.4.18</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* glVersion = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)gGLFT-&gt;glGetString(MGL_VERSION);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (glVersion) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* implVersion = strstr(glVersion, <span class=\"stringliteral\">&quot;-&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (implVersion) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> version[3], ret;</div>\n\
<div class=\"line\">            ret = sscanf(implVersion+1, <span class=\"stringliteral\">&quot;%d.%d.%d&quot;</span>,</div>\n\
<div class=\"line\">                &amp;version[0], &amp;version[1], &amp;version[2]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (ret == 3) {</div>\n\
<div class=\"line\">                driverVersion[0] = version[0];</div>\n\
<div class=\"line\">                driverVersion[1] = version[1];</div>\n\
<div class=\"line\">                driverVersion[2] = version[2];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> VramQuery::queryVramAndDriverXORG(MUint64&amp; vram, <span class=\"keywordtype\">int</span> driverVersion[3], <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; manufacturer, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; model)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    vram = 0;</div>\n\
<div class=\"line\">    driverVersion[0] = driverVersion[1] = driverVersion[2] = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// open the Xorg.0.log</span></div>\n\
<div class=\"line\">    std::string   line;</div>\n\
<div class=\"line\">    std::ifstream xorgLog(getXorgLogFilePath());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!xorgLog.is_open()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> maxVidMemKb = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> version[3] = {0, 0, 0}, versionSize = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (xorgLog.good()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// read a line</span></div>\n\
<div class=\"line\">        std::getline(xorgLog, line);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Try to detect card model in the pattern of the following line:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// &quot;(--) PCI:*(0:15:0:0) 10de:061a:10de:055f nVidia Corporation G92 [Quadro FX 3700] rev 162, Mem @ 0xfa000000/16777216, 0xe0000000/268435456, 0xf8000000/33554432, I/O @ 0x0000d000/128&quot;</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> initPos = line.find(<span class=\"stringliteral\">&quot;(--) PCI:&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (model.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0 &amp;&amp;</div>\n\
<div class=\"line\">            initPos != std::string::npos &amp;&amp;</div>\n\
<div class=\"line\">            line.find(<span class=\"stringliteral\">&quot;Mem @&quot;</span>) != std::string::npos &amp;&amp;</div>\n\
<div class=\"line\">            line.find(<span class=\"stringliteral\">&quot;I/O @&quot;</span>) != std::string::npos</div>\n\
<div class=\"line\">            ) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> start = line.find(<span class=\"stringliteral\">&quot;[&quot;</span>, initPos);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (start != std::string::npos) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// NVIDIA</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> end = line.find(<span class=\"stringliteral\">&quot;]&quot;</span>, start);</div>\n\
<div class=\"line\">                model = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(line.substr(start + 1, end - start - 1).c_str());</div>\n\
<div class=\"line\">                manufacturer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;NVIDIA&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                start = line.find(<span class=\"stringliteral\">&quot;ATI Technologies Inc&quot;</span>, initPos);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (start != std::string::npos) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// AMD</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> end0 = line.find(<span class=\"stringliteral\">&quot; (&quot;</span>, start);</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> end1 = line.find(<span class=\"stringliteral\">&quot;, Mem @&quot;</span>, start);</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">size_t</span> end = (end0 != std::string::npos &amp;&amp; end0 &lt; end1) ? end0 : end1; </div>\n\
<div class=\"line\">                    model = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(line.substr(start + 20, end - start - 20).c_str());</div>\n\
<div class=\"line\">                    manufacturer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Advanced Micro Devices, Inc.&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Try to detect card model in the pattern of the following line:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// &quot;(II) NVIDIA(0): NVIDIA GPU Quadro 4000 (GF100GL) at PCI:1:1:0 (GPU-0)&quot;</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (model.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> start = line.find(<span class=\"stringliteral\">&quot;NVIDIA GPU &quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (start != std::string::npos &amp;&amp;</div>\n\
<div class=\"line\">                line.find(<span class=\"stringliteral\">&quot;NVIDIA(&quot;</span>) != std::string::npos) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> end0 = line.find(<span class=\"stringliteral\">&quot; (&quot;</span>, start);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> end1 = line.find(<span class=\"stringliteral\">&quot; at&quot;</span>, start);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">size_t</span> end = (end0 != std::string::npos &amp;&amp; end0 &lt; end1) ? end0 : end1; </div>\n\
<div class=\"line\">                model = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(line.substr(start + 11, end - start - 11).c_str());</div>\n\
<div class=\"line\">                manufacturer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;NVIDIA&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// find VRAM</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> startOffset = std::string::npos;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> endOffset   = std::string::npos;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (line.find(<span class=\"stringliteral\">&quot;NVIDIA&quot;</span>) != std::string::npos) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// found NVIDIA</span></div>\n\
<div class=\"line\">            startOffset = line.find(<span class=\"stringliteral\">&quot;Memory:&quot;</span>) + 7;</div>\n\
<div class=\"line\">            endOffset   = line.find(<span class=\"stringliteral\">&quot;kBytes&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (startOffset == std::string::npos ||</div>\n\
<div class=\"line\">                endOffset == std::string::npos) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// possible AMD</span></div>\n\
<div class=\"line\">            startOffset = line.find(<span class=\"stringliteral\">&quot;Video RAM:&quot;</span>) + 10;</div>\n\
<div class=\"line\">            endOffset   = line.find(<span class=\"stringliteral\">&quot;kByte&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (startOffset != std::string::npos &amp;&amp;</div>\n\
<div class=\"line\">                endOffset != std::string::npos) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// parse the number between start and end</span></div>\n\
<div class=\"line\">            std::string strVidMem = line.substr(startOffset, endOffset - startOffset);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> vidMemKb = atoi(strVidMem.c_str());</div>\n\
<div class=\"line\">            maxVidMemKb  = (vidMemKb &gt; maxVidMemKb) ? vidMemKb : maxVidMemKb;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// find driver version</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* driver = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((driver = strstr(line.c_str(), <span class=\"stringliteral\">&quot;NVIDIA dlloader X Driver&quot;</span>))) {</div>\n\
<div class=\"line\">            versionSize = sscanf(driver+24, <span class=\"stringliteral\">&quot;%d.%d.%d&quot;</span>,</div>\n\
<div class=\"line\">                &amp;version[0], &amp;version[1], &amp;version[2]);</div>\n\
<div class=\"line\">            manufacturer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;NVIDIA&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ((driver = strstr(line.c_str(), <span class=\"stringliteral\">&quot;ATI Proprietary Linux Driver Release Identifier:&quot;</span>))) {</div>\n\
<div class=\"line\">            versionSize = sscanf(driver+48, <span class=\"stringliteral\">&quot;%d.%d&quot;</span>,</div>\n\
<div class=\"line\">                &amp;version[0], &amp;version[1]);</div>\n\
<div class=\"line\">            manufacturer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Advanced Micro Devices, Inc.&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    vram = MUint64(maxVidMemKb) * 1024;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; versionSize; i++) {</div>\n\
<div class=\"line\">        driverVersion[i] = version[i];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">MUint64 VramQuery::queryVramOGL()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Query Vram by OpenGL extensions.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This function needs an OpenGL context.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (gGLFT &amp;&amp; gGLFT-&gt;extensionExists(kMGLext_NVX_gpu_memory_info)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// NVIDIA GL_NVX_gpu_memory_info exists</span></div>\n\
<div class=\"line\">        MGLint dedicatedVidMem = 0;</div>\n\
<div class=\"line\">        gGLFT-&gt;glGetIntegerv(MGL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX, &amp;dedicatedVidMem);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MUint64(dedicatedVidMem) * 1024;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (gGLFT &amp;&amp; gGLFT-&gt;extensionExists(kMGLext_ATI_meminfo)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// AMD GL_ATI_meminfo exists</span></div>\n\
<div class=\"line\">        MGLint freeVBOMem[4] = {0, 0, 0, 0};</div>\n\
<div class=\"line\">        gGLFT-&gt;glGetIntegerv(MGL_VBO_FREE_MEMORY_ATI, freeVBOMem);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MUint64(freeVBOMem[0]) * 1024;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> VramQuery::isGeforceOGL()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Query the renderer by glGetString.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This function needs an OpenGL context</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* renderer = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)gGLFT-&gt;glGetString(MGL_RENDERER);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (renderer &amp;&amp; strstr(renderer, <span class=\"stringliteral\">&quot;GeForce&quot;</span>));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> VramQuery::isQuadroOGL()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Query the renderer by glGetString.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This function needs an OpenGL context</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* renderer = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)gGLFT-&gt;glGetString(MGL_RENDERER);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (renderer &amp;&amp; strstr(renderer, <span class=\"stringliteral\">&quot;Quadro&quot;</span>));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> VramQuery&amp; VramQuery::getInstance()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// singleton, init on function call needs an OpenGL context</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> VramQuery query;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> query;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">VramQuery::VramQuery()</div>\n\
<div class=\"line\">    : fVram(0),</div>\n\
<div class=\"line\">      fIsGeforce(false),</div>\n\
<div class=\"line\">      fIsQuadro(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fDriverVersion[0] = fDriverVersion[1] = fDriverVersion[2] = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#afb0008b4212928b7913ba9cfc64fe88bafd5ecc6725f6695a70a949747cf89546\">MGlobal::kInteractive</a> == <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac7296da94b1d0b659833fc653a6af10e\">MGlobal::mayaState</a>()) {</div>\n\
<div class=\"line\">        InitializeGLFT();</div>\n\
<div class=\"line\">        MUint64 vram = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>     driverVersion[3] = {0, 0, 0};</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> manufacturer;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> model;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Windows, let&#39;s query VRAM via WMI</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Please see the Video Memory sample in DirectX SDK</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// http://msdn.microsoft.com/en-us/library/ee419018%28v=vs.85%29.aspx</span></div>\n\
<div class=\"line\">        MUint64 vramDXGI = VramQuery::queryVramDXGI();</div>\n\
<div class=\"line\">        VramQuery::queryVramAndDriverWMI(vram, driverVersion, manufacturer, model);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vramDXGI != 0) {</div>\n\
<div class=\"line\">            vram = vramDXGI;  <span class=\"comment\">// DXGI can detect VRAM over 4G</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined(__APPLE__) || defined(__MACH__)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Mac OSX, let&#39;s query VRAM via Core Graphics and IOKit</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// http://developer.apple.com/library/mac/#qa/qa1168/_index.html </span></div>\n\
<div class=\"line\">        VramQuery::queryVramAndDriverMAC(vram, driverVersion, manufacturer, model);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Linux, let&#39;s parse Xorg.0.log</span></div>\n\
<div class=\"line\">        VramQuery::queryVramAndDriverXORG(vram, driverVersion, manufacturer, model);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// the platform specific query failed</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// http://www.opengl.org/registry/specs/ATI/meminfo.txt </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// http://developer.download.nvidia.com/opengl/specs/GL_NVX_gpu_memory_info.txt </span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vram == 0) {</div>\n\
<div class=\"line\">            vram = VramQuery::queryVramOGL();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"comment\">// everything failed.. use a predefined value: 1G</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vram == 0) {</div>\n\
<div class=\"line\">            vram = 1 &lt;&lt; 30;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fVram      = vram;</div>\n\
<div class=\"line\">        fDriverVersion[0] = driverVersion[0];</div>\n\
<div class=\"line\">        fDriverVersion[1] = driverVersion[1];</div>\n\
<div class=\"line\">        fDriverVersion[2] = driverVersion[2];</div>\n\
<div class=\"line\">        fIsGeforce = VramQuery::isGeforceOGL();</div>\n\
<div class=\"line\">        fIsQuadro  = VramQuery::isQuadroOGL();</div>\n\
<div class=\"line\">        fManufacturer = manufacturer;</div>\n\
<div class=\"line\">        fModel = model;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";