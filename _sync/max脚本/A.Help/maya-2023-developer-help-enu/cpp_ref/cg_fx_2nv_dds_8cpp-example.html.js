var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: cgFx/nv_dds.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2nv_dds_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: cgFx/nv_dds.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/nv_dds.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (C) 2002-2003 NVIDIA </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// File: nv_dds.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Loads DDS images (DXTC1, DXTC3, DXTC5, RGB (888, 888X), and RGBA (8888) are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// supported) for use in OpenGL. Image is flipped when its loaded as DX images</span></div>\n\
<div class=\"line\"><span class=\"comment\">// are stored with different coordinate system. If file has mipmaps and/or </span></div>\n\
<div class=\"line\"><span class=\"comment\">// cubemaps then these are loaded as well. Volume textures can be loaded as </span></div>\n\
<div class=\"line\"><span class=\"comment\">// well but they must be uncompressed.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// When multiple textures are loaded (i.e a volume or cubemap texture), </span></div>\n\
<div class=\"line\"><span class=\"comment\">// additional faces can be accessed using the array operator. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The mipmaps for each face are also stored in a list and can be accessed like </span></div>\n\
<div class=\"line\"><span class=\"comment\">// so: image.get_mipmap() (which accesses the first mipmap of the first </span></div>\n\
<div class=\"line\"><span class=\"comment\">// image). To get the number of mipmaps call the get_num_mipmaps function for</span></div>\n\
<div class=\"line\"><span class=\"comment\">// a given texture.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Call the is_volume() or is_cubemap() function to check that a loaded image</span></div>\n\
<div class=\"line\"><span class=\"comment\">// is a volume or cubemap texture respectively. If a volume texture is loaded</span></div>\n\
<div class=\"line\"><span class=\"comment\">// then the get_depth() function should return a number greater than 1. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Mipmapped volume textures and DXTC compressed volume textures are supported.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Update: 6/11/2002</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Added some convenience functions to handle uploading textures to OpenGL. The</span></div>\n\
<div class=\"line\"><span class=\"comment\">// following functions have been added:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     bool upload_texture1D();</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     bool upload_texture2D(int imageIndex = 0, GLenum target = GL_TEXTURE_2D);</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     bool upload_textureRectangle();</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     bool upload_texture3D();</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     bool upload_textureCubemap();</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// See function implementation below for instructions/comments on using each</span></div>\n\
<div class=\"line\"><span class=\"comment\">// function.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The open function has also been updated to take an optional second parameter</span></div>\n\
<div class=\"line\"><span class=\"comment\">// specifying whether the image should be flipped on load. This defaults to </span></div>\n\
<div class=\"line\"><span class=\"comment\">// true.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">// Sample usage</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Loading a compressed texture:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CDDSImage image;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// GLuint texobj;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// image.load(&quot;compressed.dds&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// glGenTextures(1, &amp;texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glEnable(GL_TEXTURE_2D);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glBindTexture(GL_TEXTURE_2D, texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glCompressedTexImage2DARB(GL_TEXTURE_2D, 0, image.get_format(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     image.get_width(), image.get_height(), 0, image.get_size(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     image);</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for (int i = 0; i &lt; image.get_num_mipmaps(); i++)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// {</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     glCompressedTexImage2DARB(GL_TEXTURE_2D, i+1, image.get_format(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image.get_mipmap(i).get_width(), image.get_mipmap(i).get_height(), 0, </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image.get_mipmap(i).get_size(), image.get_mipmap(i));</span></div>\n\
<div class=\"line\"><span class=\"comment\">// } </span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Loading an uncompressed texture:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CDDSImage image;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// GLuint texobj;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// image.load(&quot;uncompressed.dds&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glGenTextures(1, &amp;texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glEnable(GL_TEXTURE_2D);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glBindTexture(GL_TEXTURE_2D, texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glTexImage2D(GL_TEXTURE_2D, 0, image.get_components(), image.get_width(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     image.get_height(), 0, image.get_format(), GL_UNSIGNED_BYTE, image);</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for (int i = 0; i &lt; image.get_num_mipmaps(); i++)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// {</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     glTexImage2D(GL_TEXTURE_2D, i+1, image.get_components(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image.get_mipmap(i).get_width(), image.get_mipmap(i).get_height(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         0, image.get_format(), GL_UNSIGNED_BYTE, image.get_mipmap(i));</span></div>\n\
<div class=\"line\"><span class=\"comment\">// }</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Loading an uncompressed cubemap texture:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CDDSImage image;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// GLuint texobj;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// GLenum target;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// image.load(&quot;cubemap.dds&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// glGenTextures(1, &amp;texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glEnable(GL_TEXTURE_CUBE_MAP_ARB);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glBindTexture(GL_TEXTURE_CUBE_MAP_ARB, texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// for (int n = 0; n &lt; 6; n++)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// {</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     target = GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB+n;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     glTexImage2D(target, 0, image.get_components(), image[n].get_width(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image[n].get_height(), 0, image.get_format(), GL_UNSIGNED_BYTE, </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image[n]);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     for (int i = 0; i &lt; image[n].get_num_mipmaps(); i++)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     {</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         glTexImage2D(target, i+1, image.get_components(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//             image[n].get_mipmap(i).get_width(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//             image[n].get_mipmap(i).get_height(), 0,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//             image.get_format(), GL_UNSIGNED_BYTE, image[n].get_mipmap(i));</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     }</span></div>\n\
<div class=\"line\"><span class=\"comment\">// }</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Loading a volume texture:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CDDSImage image;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// GLuint texobj;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// image.load(&quot;volume.dds&quot;);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// glGenTextures(1, &amp;texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glEnable(GL_TEXTURE_3D);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glBindTexture(GL_TEXTURE_3D, texobj);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// PFNGLTEXIMAGE3DPROC glTexImage3D;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// glTexImage3D(GL_TEXTURE_3D, 0, image.get_components(), image.get_width(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     image.get_height(), image.get_depth(), 0, image.get_format(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//     GL_UNSIGNED_BYTE, image);</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// for (int i = 0; i &lt; image.get_num_mipmaps(); i++)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// {</span></div>\n\
<div class=\"line\"><span class=\"comment\">//     glTexImage3D(GL_TEXTURE_3D, i+1, image.get_components(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image[0].get_mipmap(i).get_width(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image[0].get_mipmap(i).get_height(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         image[0].get_mipmap(i).get_depth(), 0, image.get_format(), </span></div>\n\
<div class=\"line\"><span class=\"comment\">//         GL_UNSIGNED_BYTE, image[0].get_mipmap(i));</span></div>\n\
<div class=\"line\"><span class=\"comment\">// }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;nv_dds.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;windows.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define GET_EXT_POINTER(name, type) \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">         name = (type)wglGetProcAddress(#name)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined(__linux__)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;GL/glx.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define GET_EXT_POINTER(name, type) \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">          name = (type)::glXGetProcAddress((const GLubyte*)#name)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else // __APPLE__</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;OpenGL/gl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>std;</div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>nv_dds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// static function pointers for uploading 3D textures and compressed 1D, 2D</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and 3D textures.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">PFNGLTEXIMAGE3DEXTPROC CDDSImage::glTexImage3D = NULL;</div>\n\
<div class=\"line\">PFNGLCOMPRESSEDTEXIMAGE1DARBPROC CDDSImage::glCompressedTexImage1DARB = NULL;</div>\n\
<div class=\"line\">PFNGLCOMPRESSEDTEXIMAGE2DARBPROC CDDSImage::glCompressedTexImage2DARB = NULL;</div>\n\
<div class=\"line\">PFNGLCOMPRESSEDTEXIMAGE3DARBPROC CDDSImage::glCompressedTexImage3DARB = NULL;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// CDDSImage public functions</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// default constructor</span></div>\n\
<div class=\"line\">CDDSImage::CDDSImage()</div>\n\
<div class=\"line\">  : format(0),</div>\n\
<div class=\"line\">    components(0),</div>\n\
<div class=\"line\">    compressed(false),</div>\n\
<div class=\"line\">    cubemap(false),</div>\n\
<div class=\"line\">    volume(false),</div>\n\
<div class=\"line\">    valid(false)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">CDDSImage::~CDDSImage()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// loads DDS image</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// filename - fully qualified name of DDS image</span></div>\n\
<div class=\"line\"><span class=\"comment\">// flipImage - specifies whether image is flipped on load, default is true</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CDDSImage::load(<span class=\"keywordtype\">string</span> filename, <span class=\"keywordtype\">bool</span> flipImage)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    DDS_HEADER ddsh;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> filecode[4];</div>\n\
<div class=\"line\">    FILE *fp;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> width, height, depth;</div>\n\
<div class=\"line\">    int (CDDSImage::*sizefunc)(int, int);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear any previously loaded images</span></div>\n\
<div class=\"line\">    clear();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// open file</span></div>\n\
<div class=\"line\">    fp = fopen(filename.data(), <span class=\"stringliteral\">&quot;rb&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fp == NULL)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// read in file marker, make sure its a DDS file</span></div>\n\
<div class=\"line\">    fread(filecode, 1, 4, fp);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strncmp(filecode, <span class=\"stringliteral\">&quot;DDS &quot;</span>, 4) != 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fclose(fp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// read in DDS header</span></div>\n\
<div class=\"line\">    fread(&amp;ddsh, <span class=\"keyword\">sizeof</span>(ddsh), 1, fp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwSize);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwFlags);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwHeight);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwWidth);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwPitchOrLinearSize);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwMipMapCount);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.ddspf.dwSize);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.ddspf.dwFlags);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.ddspf.dwFourCC);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.ddspf.dwRGBBitCount);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwCaps1);</div>\n\
<div class=\"line\">    swap_endian(&amp;ddsh.dwCaps2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check if image is a cubempa</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ddsh.dwCaps2 &amp; DDS_CUBEMAP)</div>\n\
<div class=\"line\">        cubemap = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check if image is a volume texture</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((ddsh.dwCaps2 &amp; DDS_VOLUME) &amp;&amp; (ddsh.dwDepth &gt; 0))</div>\n\
<div class=\"line\">        volume = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// figure out what the image format is</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ddsh.ddspf.dwFlags &amp; DDS_FOURCC) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>(ddsh.ddspf.dwFourCC)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> FOURCC_DXT1:</div>\n\
<div class=\"line\">                format = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;</div>\n\
<div class=\"line\">                components = 3;</div>\n\
<div class=\"line\">                compressed = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> FOURCC_DXT3:</div>\n\
<div class=\"line\">                format = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;</div>\n\
<div class=\"line\">                components = 4;</div>\n\
<div class=\"line\">                compressed = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> FOURCC_DXT5:</div>\n\
<div class=\"line\">                format = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;</div>\n\
<div class=\"line\">                components = 4;</div>\n\
<div class=\"line\">                compressed = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                fclose(fp);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ddsh.ddspf.dwFlags == DDS_RGBA &amp;&amp; ddsh.ddspf.dwRGBBitCount == 32)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        format = GL_BGRA_EXT; </div>\n\
<div class=\"line\">        compressed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        components = 4;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ddsh.ddspf.dwFlags == DDS_RGB  &amp;&amp; ddsh.ddspf.dwRGBBitCount == 32)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        format = GL_BGRA_EXT; </div>\n\
<div class=\"line\">        compressed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        components = 4;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ddsh.ddspf.dwFlags == DDS_RGB  &amp;&amp; ddsh.ddspf.dwRGBBitCount == 24)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        format = GL_BGR_EXT; </div>\n\
<div class=\"line\">        compressed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        components = 3;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ddsh.ddspf.dwRGBBitCount == 8)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        format = GL_LUMINANCE; </div>\n\
<div class=\"line\">        compressed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        components = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fclose(fp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// store primary surface width/height/depth</span></div>\n\
<div class=\"line\">    width = ddsh.dwWidth;</div>\n\
<div class=\"line\">    height = ddsh.dwHeight;</div>\n\
<div class=\"line\">    depth = clamp_size(ddsh.dwDepth);   <span class=\"comment\">// set to 1 if 0</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// use correct size calculation function depending on whether image is </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// compressed</span></div>\n\
<div class=\"line\">    sizefunc = (compressed ? &amp;CDDSImage::size_dxtc : &amp;CDDSImage::size_rgb);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// load all surfaces for the image (6 surfaces for cubemaps)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> n = 0; n &lt; (cubemap ? 6 : 1); n++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> size; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// calculate surface size</span></div>\n\
<div class=\"line\">        size = (this-&gt;*sizefunc)(width, height)*depth;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// load surface</span></div>\n\
<div class=\"line\">        CTexture img(width, height, depth, size);</div>\n\
<div class=\"line\">        fread(img, 1, img.size, fp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        align_memory(&amp;img);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!cubemap &amp;&amp; flipImage)</div>\n\
<div class=\"line\">            flip(img, img.width, img.height, img.depth, img.size);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> w = clamp_size(width &gt;&gt; 1);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> h = clamp_size(height &gt;&gt; 1);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> d = clamp_size(depth &gt;&gt; 1); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// store number of mipmaps</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numMipmaps = ddsh.dwMipMapCount;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// number of mipmaps in file includes main surface so decrease count </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// by one</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numMipmaps != 0)</div>\n\
<div class=\"line\">            numMipmaps--;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmaps for current surface</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numMipmaps &amp;&amp; (w || h); i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// calculate mipmap size</span></div>\n\
<div class=\"line\">            size = (this-&gt;*sizefunc)(w, h)*d;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            CSurface mipmap(w, h, d, size);</div>\n\
<div class=\"line\">            fread(mipmap, 1, mipmap.size, fp);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!cubemap &amp;&amp; flipImage)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                flip(mipmap, mipmap.width, mipmap.height, mipmap.depth, </div>\n\
<div class=\"line\">                    mipmap.size);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            img.mipmaps.push_back(mipmap);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// shrink to next power of 2</span></div>\n\
<div class=\"line\">            w = clamp_size(w &gt;&gt; 1);</div>\n\
<div class=\"line\">            h = clamp_size(h &gt;&gt; 1);</div>\n\
<div class=\"line\">            d = clamp_size(d &gt;&gt; 1); </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        images.push_back(img);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// swap cubemaps on y axis (since image is flipped in OGL)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cubemap &amp;&amp; flipImage)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        CTexture tmp;</div>\n\
<div class=\"line\">        tmp = images[3];</div>\n\
<div class=\"line\">        images[3] = images[2];</div>\n\
<div class=\"line\">        images[2] = tmp;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fclose(fp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    valid = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// free image memory</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::clear()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    components = 0;</div>\n\
<div class=\"line\">    format = 0;</div>\n\
<div class=\"line\">    compressed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    cubemap = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    volume = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    valid = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    images.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// returns individual texture when multiple textures are loaded (as is the case</span></div>\n\
<div class=\"line\"><span class=\"comment\">// with volume textures and cubemaps)</span></div>\n\
<div class=\"line\">CTexture &amp;CDDSImage::operator[](<span class=\"keywordtype\">int</span> index)</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"comment\">// make sure an image has been loaded</span></div>\n\
<div class=\"line\">    assert(valid);</div>\n\
<div class=\"line\">    assert(index &lt; (<span class=\"keywordtype\">int</span>)images.size());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> images[index]; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// returns pointer to main image</span></div>\n\
<div class=\"line\">CDDSImage::operator <span class=\"keywordtype\">char</span>*()</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    assert(valid);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> images[0]; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// uploads a compressed/uncompressed 1D texture</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CDDSImage::upload_texture1D()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(valid);</div>\n\
<div class=\"line\">    assert(images[0].height == 1);</div>\n\
<div class=\"line\">    assert(images[0].width &gt; 0);</div>\n\
<div class=\"line\">    assert(images[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (compressed)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// get function pointer if needed</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glCompressedTexImage1DARB == NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GET_EXT_POINTER(glCompressedTexImage1DARB, </div>\n\
<div class=\"line\">                            PFNGLCOMPRESSEDTEXIMAGE1DARBPROC);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glCompressedTexImage1DARB == NULL)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        glCompressedTexImage1DARB(GL_TEXTURE_1D, 0, format, </div>\n\
<div class=\"line\">            images[0].width, 0, images[0].size, </div>\n\
<div class=\"line\">            images[0]);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmaps</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[0].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glCompressedTexImage1DARB(GL_TEXTURE_1D, i+1, format, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].width, 0, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].size, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAX_LEVEL, numMipMaps);       </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        glCompressedTexImage1D(GL_TEXTURE_1D, 0, format, </div>\n\
<div class=\"line\">            images[0].width, 0, images[0].size, </div>\n\
<div class=\"line\">            images[0]);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmaps</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[0].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glCompressedTexImage1D(GL_TEXTURE_1D, i+1, format, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].width, 0, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].size, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAX_LEVEL, numMipMaps);       </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glTexImage1D(GL_TEXTURE_1D, 0, format, images[0].width, 0,</div>\n\
<div class=\"line\">            format, GL_UNSIGNED_BYTE, images[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmaps</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[0].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glTexImage1D(GL_TEXTURE_1D, i+1, components, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].width, 0, format, </div>\n\
<div class=\"line\">                    GL_UNSIGNED_BYTE, images[0].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAX_LEVEL, numMipMaps);       </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// uploads a compressed/uncompressed 2D texture</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// imageIndex - allows you to optionally specify other loaded surfaces for 2D</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              textures such as a face in a cubemap or a slice in a volume</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              default: 0</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// target     - allows you to optionally specify a different texture target for</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              the 2D texture such as a specific face of a cubemap</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              default: GL_TEXTURE_2D</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CDDSImage::upload_texture2D(<span class=\"keywordtype\">int</span> imageIndex, GLenum target)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(valid);</div>\n\
<div class=\"line\">    assert(imageIndex &gt;= 0);</div>\n\
<div class=\"line\">    assert(imageIndex &lt; (<span class=\"keywordtype\">int</span>)images.size());</div>\n\
<div class=\"line\">    assert(images[imageIndex].height &gt; 0);</div>\n\
<div class=\"line\">    assert(images[imageIndex].width &gt; 0);</div>\n\
<div class=\"line\">    assert(images[imageIndex]);</div>\n\
<div class=\"line\">    assert(target == GL_TEXTURE_2D || </div>\n\
<div class=\"line\">        (target &gt;= GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB &amp;&amp; </div>\n\
<div class=\"line\">         target &lt;= GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (compressed)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// load function pointer if needed</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glCompressedTexImage2DARB == NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GET_EXT_POINTER(glCompressedTexImage2DARB, </div>\n\
<div class=\"line\">                            PFNGLCOMPRESSEDTEXIMAGE2DARBPROC);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glCompressedTexImage2DARB == NULL)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        glCompressedTexImage2DARB(target, 0, format, </div>\n\
<div class=\"line\">            images[imageIndex].width, images[imageIndex].height, 0, </div>\n\
<div class=\"line\">            images[imageIndex].size, images[imageIndex]);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmaps</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[imageIndex].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glCompressedTexImage2DARB(target, i+1, format, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].width, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].height, 0, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].size, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(target, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(target, GL_TEXTURE_MAX_LEVEL, numMipMaps);      </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        glCompressedTexImage2D(target, 0, format, </div>\n\
<div class=\"line\">            images[imageIndex].width, images[imageIndex].height, 0, </div>\n\
<div class=\"line\">            images[imageIndex].size, images[imageIndex]);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmaps</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[imageIndex].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glCompressedTexImage2D(target, i+1, format, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].width, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].height, 0, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].size, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(target, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(target, GL_TEXTURE_MAX_LEVEL, numMipMaps);      </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glTexImage2D(target, 0, components, images[imageIndex].width, </div>\n\
<div class=\"line\">            images[imageIndex].height, 0, format, GL_UNSIGNED_BYTE, </div>\n\
<div class=\"line\">            images[imageIndex]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmaps</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[imageIndex].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glTexImage2D(target, i+1, components, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].width, </div>\n\
<div class=\"line\">                    images[imageIndex].mipmaps[i].height, 0, format, </div>\n\
<div class=\"line\">                    GL_UNSIGNED_BYTE, images[imageIndex].mipmaps[i]); </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(target, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(target, GL_TEXTURE_MAX_LEVEL, numMipMaps);      </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef GL_NV_texture_rectangle</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CDDSImage::upload_textureRectangle()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(valid);</div>\n\
<div class=\"line\">    assert(images.size() &gt;= 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!upload_texture2D(0, GL_TEXTURE_RECTANGLE_NV))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// uploads a compressed/uncompressed cubemap texture</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CDDSImage::upload_textureCubemap()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(valid);</div>\n\
<div class=\"line\">    assert(cubemap);</div>\n\
<div class=\"line\">    assert(images.size() == 6);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GLenum target;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// loop through cubemap faces and load them as 2D textures </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> n = 0; n &lt; 6; n++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// specify cubemap face</span></div>\n\
<div class=\"line\">        target = GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB+n;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!upload_texture2D(n, target))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// uploads a compressed/uncompressed 3D texture</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> CDDSImage::upload_texture3D()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(valid);</div>\n\
<div class=\"line\">    assert(volume);</div>\n\
<div class=\"line\">    assert(images[0].depth &gt;= 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (compressed)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// retrieve function pointer if needed</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glCompressedTexImage3DARB == NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GET_EXT_POINTER(glCompressedTexImage3DARB, </div>\n\
<div class=\"line\">                            PFNGLCOMPRESSEDTEXIMAGE3DARBPROC);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glCompressedTexImage3DARB == NULL)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glCompressedTexImage3DARB(GL_TEXTURE_3D, 0, format,  images[0].width, </div>\n\
<div class=\"line\">            images[0].height, images[0].depth, 0, images[0].size, images[0]);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmap volumes</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[0].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glCompressedTexImage3DARB(GL_TEXTURE_3D, i+1, format, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].width, images[0].mipmaps[i].height, </div>\n\
<div class=\"line\">                    images[0].depth, 0, images[0].mipmaps[i].size, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MAX_LEVEL, numMipMaps);       </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        glCompressedTexImage3D(GL_TEXTURE_3D, 0, format,  images[0].width, </div>\n\
<div class=\"line\">            images[0].height, images[0].depth, 0, images[0].size, images[0]);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmap volumes</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[0].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glCompressedTexImage3D(GL_TEXTURE_3D, i+1, format, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].width, images[0].mipmaps[i].height, </div>\n\
<div class=\"line\">                    images[0].depth, 0, images[0].mipmaps[i].size, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MAX_LEVEL, numMipMaps);       </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(__linux__)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// retrieve function pointer if needed</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glTexImage3D == NULL)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            GET_EXT_POINTER(glTexImage3D, PFNGLTEXIMAGE3DEXTPROC);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (glTexImage3D == NULL)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        glTexImage3D(GL_TEXTURE_3D, 0, components, images[0].width, </div>\n\
<div class=\"line\">            images[0].height, images[0].depth, 0, format, GL_UNSIGNED_BYTE, </div>\n\
<div class=\"line\">            images[0]);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// load all mipmap volumes</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numMipMaps = (<span class=\"keywordtype\">unsigned</span> int)images[0].mipmaps.size();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( numMipMaps)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numMipMaps; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                glTexImage3D(GL_TEXTURE_3D, i+1, components, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].width, images[0].mipmaps[i].height, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i].depth, 0, format, GL_UNSIGNED_BYTE, </div>\n\
<div class=\"line\">                    images[0].mipmaps[i]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_BASE_LEVEL, 0 );</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MAX_LEVEL, numMipMaps);       </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// clamps input size to [1-size]</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> CDDSImage::clamp_size(<span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (size &lt;= 0)</div>\n\
<div class=\"line\">        size = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> size;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// CDDSImage private functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">// calculates 4-byte aligned width of image</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> CDDSImage::get_line_width(<span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> bpp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ((width * bpp + 31) &amp; -32) &gt;&gt; 3;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// calculates size of DXTC texture in bytes</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> CDDSImage::size_dxtc(<span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> height)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ((width+3)/4)*((height+3)/4)*</div>\n\
<div class=\"line\">        (format == GL_COMPRESSED_RGBA_S3TC_DXT1_EXT ? 8 : 16);   </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// calculates size of uncompressed RGB texture in bytes</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> CDDSImage::size_rgb(<span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> height)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> width*height*components;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Swap the bytes in a 32 bit value</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> CDDSImage::swap_endian(<span class=\"keywordtype\">void</span> *val)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef __APPLE__</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> *ival = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> *)val;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    *ival = ((*ival &gt;&gt; 24) &amp; 0x000000ff) |</div>\n\
<div class=\"line\">            ((*ival &gt;&gt;  8) &amp; 0x0000ff00) |</div>\n\
<div class=\"line\">            ((*ival &lt;&lt;  8) &amp; 0x00ff0000) |</div>\n\
<div class=\"line\">            ((*ival &lt;&lt; 24) &amp; 0xff000000);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// align to 4 byte boundary (add pad bytes to end of each line in the image)</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::align_memory(CTexture *surface)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// don&#39;t bother with compressed images, volume textures, or cubemaps</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (compressed || volume || cubemap)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// calculate new image size</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> linesize = get_line_width(surface-&gt;width, components*8);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> imagesize = linesize*surface-&gt;height;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// exit if already aligned</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (surface-&gt;size == imagesize)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create new image of new size</span></div>\n\
<div class=\"line\">    CTexture newSurface(surface-&gt;width, surface-&gt;height, surface-&gt;depth, </div>\n\
<div class=\"line\">        imagesize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add pad bytes to end of each line</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *srcimage = (<span class=\"keywordtype\">char</span>*)*surface;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *dstimage = (<span class=\"keywordtype\">char</span>*)newSurface;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> n = 0; n &lt; surface-&gt;depth; n++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> *curline = srcimage;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> *newline = dstimage;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> imsize = surface-&gt;size / surface-&gt;depth;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> lnsize = imsize / surface-&gt;height;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; surface-&gt;height; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            memcpy(newline, curline, lnsize);</div>\n\
<div class=\"line\">            newline += linesize;</div>\n\
<div class=\"line\">            curline += lnsize;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// save padded image</span></div>\n\
<div class=\"line\">    *surface = newSurface;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// flip image around X axis</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::flip(<span class=\"keywordtype\">char</span> *image, <span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">int</span> height, <span class=\"keywordtype\">int</span> depth, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> linesize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> offset;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!compressed)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        assert(depth &gt; 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> imagesize = size/depth;</div>\n\
<div class=\"line\">        linesize = imagesize / height;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> n = 0; n &lt; depth; n++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            offset = imagesize*n;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span> *top = image + offset;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">char</span> *bottom = top + (imagesize-linesize);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; (height &gt;&gt; 1); i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                swap(bottom, top, linesize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                top += linesize;</div>\n\
<div class=\"line\">                bottom -= linesize;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        void (CDDSImage::*flipblocks)(DXTColBlock*, int);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> xblocks = width / 4;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> yblocks = height / 4;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> blocksize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (format)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: </div>\n\
<div class=\"line\">                blocksize = 8;</div>\n\
<div class=\"line\">                flipblocks = &amp;CDDSImage::flip_blocks_dxtc1; </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: </div>\n\
<div class=\"line\">                blocksize = 16;</div>\n\
<div class=\"line\">                flipblocks = &amp;CDDSImage::flip_blocks_dxtc3; </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: </div>\n\
<div class=\"line\">                blocksize = 16;</div>\n\
<div class=\"line\">                flipblocks = &amp;CDDSImage::flip_blocks_dxtc5; </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        linesize = xblocks * blocksize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        DXTColBlock *top;</div>\n\
<div class=\"line\">        DXTColBlock *bottom;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; (yblocks &gt;&gt; 1); j++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            top = (DXTColBlock*)(image + j * linesize);</div>\n\
<div class=\"line\">            bottom = (DXTColBlock*)(image + (((yblocks-j)-1) * linesize));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            (this-&gt;*flipblocks)(top, xblocks);</div>\n\
<div class=\"line\">            (this-&gt;*flipblocks)(bottom, xblocks);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            swap(bottom, top, linesize);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// swap to sections of memory</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::swap(<span class=\"keywordtype\">void</span> *byte1, <span class=\"keywordtype\">void</span> *byte2, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *tmp = <span class=\"keyword\">new</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>[size];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    memcpy(tmp, byte1, size);</div>\n\
<div class=\"line\">    memcpy(byte1, byte2, size);</div>\n\
<div class=\"line\">    memcpy(byte2, tmp, size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] tmp;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// flip a DXT1 color block</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::flip_blocks_dxtc1(DXTColBlock *line, <span class=\"keywordtype\">int</span> numBlocks)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    DXTColBlock *curblock = line;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numBlocks; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        swap(&amp;curblock-&gt;row[0], &amp;curblock-&gt;row[3], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>));</div>\n\
<div class=\"line\">        swap(&amp;curblock-&gt;row[1], &amp;curblock-&gt;row[2], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        curblock++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// flip a DXT3 color block</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::flip_blocks_dxtc3(DXTColBlock *line, <span class=\"keywordtype\">int</span> numBlocks)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    DXTColBlock *curblock = line;</div>\n\
<div class=\"line\">    DXT3AlphaBlock *alphablock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numBlocks; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        alphablock = (DXT3AlphaBlock*)curblock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        swap(&amp;alphablock-&gt;row[0], &amp;alphablock-&gt;row[3], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>));</div>\n\
<div class=\"line\">        swap(&amp;alphablock-&gt;row[1], &amp;alphablock-&gt;row[2], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        curblock++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        swap(&amp;curblock-&gt;row[0], &amp;curblock-&gt;row[3], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>));</div>\n\
<div class=\"line\">        swap(&amp;curblock-&gt;row[1], &amp;curblock-&gt;row[2], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        curblock++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// flip a DXT5 alpha block</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::flip_dxt5_alpha(DXT5AlphaBlock *block)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> gBits[4][4];</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> mask = 0x00000007;          <span class=\"comment\">// bits = 00 00 01 11</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> bits = 0;</div>\n\
<div class=\"line\">    memcpy(&amp;bits, &amp;block-&gt;row[0], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>) * 3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    gBits[0][0] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[0][1] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[0][2] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[0][3] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[1][0] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[1][1] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[1][2] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[1][3] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    bits = 0;</div>\n\
<div class=\"line\">    memcpy(&amp;bits, &amp;block-&gt;row[3], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>) * 3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    gBits[2][0] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[2][1] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[2][2] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[2][3] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[3][0] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[3][1] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[3][2] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\">    bits &gt;&gt;= 3;</div>\n\
<div class=\"line\">    gBits[3][3] = (<span class=\"keywordtype\">unsigned</span> char)(bits &amp; mask);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear existing alpha bits</span></div>\n\
<div class=\"line\">    memset(block-&gt;row, 0, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>) * 6);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> *pBits = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*) &amp;(block-&gt;row[0]));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[3][0] &lt;&lt; 0);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[3][1] &lt;&lt; 3);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[3][2] &lt;&lt; 6);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[3][3] &lt;&lt; 9);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[2][0] &lt;&lt; 12);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[2][1] &lt;&lt; 15);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[2][2] &lt;&lt; 18);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[2][3] &lt;&lt; 21);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    pBits = ((<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*) &amp;(block-&gt;row[3]));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[1][0] &lt;&lt; 0);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[1][1] &lt;&lt; 3);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[1][2] &lt;&lt; 6);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[1][3] &lt;&lt; 9);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[0][0] &lt;&lt; 12);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[0][1] &lt;&lt; 15);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[0][2] &lt;&lt; 18);</div>\n\
<div class=\"line\">    *pBits = *pBits | (gBits[0][3] &lt;&lt; 21);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// flip a DXT5 color block</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CDDSImage::flip_blocks_dxtc5(DXTColBlock *line, <span class=\"keywordtype\">int</span> numBlocks)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    DXTColBlock *curblock = line;</div>\n\
<div class=\"line\">    DXT5AlphaBlock *alphablock;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numBlocks; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        alphablock = (DXT5AlphaBlock*)curblock;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        flip_dxt5_alpha(alphablock);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        curblock++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        swap(&amp;curblock-&gt;row[0], &amp;curblock-&gt;row[3], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>));</div>\n\
<div class=\"line\">        swap(&amp;curblock-&gt;row[1], &amp;curblock-&gt;row[2], <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        curblock++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// CTexture implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">// default constructor</span></div>\n\
<div class=\"line\">CTexture::CTexture()</div>\n\
<div class=\"line\">  : CSurface()  <span class=\"comment\">// initialize base class part</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// creates an empty texture</span></div>\n\
<div class=\"line\">CTexture::CTexture(<span class=\"keywordtype\">int</span> w, <span class=\"keywordtype\">int</span> h, <span class=\"keywordtype\">int</span> d, <span class=\"keywordtype\">int</span> imgSize)</div>\n\
<div class=\"line\">  : CSurface(w, h, d, imgSize)  <span class=\"comment\">// initialize base class part</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// copy constructor</span></div>\n\
<div class=\"line\">CTexture::CTexture(<span class=\"keyword\">const</span> CTexture &amp;copy)</div>\n\
<div class=\"line\">  : CSurface(copy)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; copy.mipmaps.size(); i++)</div>\n\
<div class=\"line\">        mipmaps.push_back(copy.mipmaps[i]);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// assignment operator</span></div>\n\
<div class=\"line\">CTexture &amp;CTexture::operator= (<span class=\"keyword\">const</span> CTexture &amp;rhs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">this</span> != &amp;rhs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        CSurface::operator = (rhs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mipmaps.clear();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; rhs.mipmaps.size(); i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mipmaps.push_back(rhs.mipmaps[i]);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// clean up texture memory</span></div>\n\
<div class=\"line\">CTexture::~CTexture()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mipmaps.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// CSurface implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">// default constructor</span></div>\n\
<div class=\"line\">CSurface::CSurface()</div>\n\
<div class=\"line\">  : width(0),</div>\n\
<div class=\"line\">    height(0),</div>\n\
<div class=\"line\">    depth(0),</div>\n\
<div class=\"line\">    size(0),</div>\n\
<div class=\"line\">    pixels(NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// creates an empty image</span></div>\n\
<div class=\"line\">CSurface::CSurface(<span class=\"keywordtype\">int</span> w, <span class=\"keywordtype\">int</span> h, <span class=\"keywordtype\">int</span> d, <span class=\"keywordtype\">int</span> imgsize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    pixels = NULL;</div>\n\
<div class=\"line\">    create(w, h, d, imgsize);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// copy constructor</span></div>\n\
<div class=\"line\">CSurface::CSurface(<span class=\"keyword\">const</span> CSurface &amp;copy)</div>\n\
<div class=\"line\">  : width(0),</div>\n\
<div class=\"line\">    height(0),</div>\n\
<div class=\"line\">    depth(0),</div>\n\
<div class=\"line\">    size(0),</div>\n\
<div class=\"line\">    pixels(NULL)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (copy.pixels)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        size = copy.size;</div>\n\
<div class=\"line\">        width = copy.width;</div>\n\
<div class=\"line\">        height = copy.height;</div>\n\
<div class=\"line\">        depth = copy.depth;</div>\n\
<div class=\"line\">        pixels = <span class=\"keyword\">new</span> <span class=\"keywordtype\">char</span>[size];</div>\n\
<div class=\"line\">        memcpy(pixels, copy.pixels, copy.size);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// assignment operator</span></div>\n\
<div class=\"line\">CSurface &amp;CSurface::operator= (<span class=\"keyword\">const</span> CSurface &amp;rhs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">this</span> != &amp;rhs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (rhs.pixels)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            size = rhs.size;</div>\n\
<div class=\"line\">            width = rhs.width;</div>\n\
<div class=\"line\">            height = rhs.height;</div>\n\
<div class=\"line\">            depth = rhs.depth;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            pixels = <span class=\"keyword\">new</span> <span class=\"keywordtype\">char</span>[size];</div>\n\
<div class=\"line\">            memcpy(pixels, rhs.pixels, size);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// clean up image memory</span></div>\n\
<div class=\"line\">CSurface::~CSurface()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// returns a pointer to image</span></div>\n\
<div class=\"line\">CSurface::operator <span class=\"keywordtype\">char</span>*()</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> pixels; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// creates an empty image</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CSurface::create(<span class=\"keywordtype\">int</span> w, <span class=\"keywordtype\">int</span> h, <span class=\"keywordtype\">int</span> d, <span class=\"keywordtype\">int</span> imgsize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    width = w;</div>\n\
<div class=\"line\">    height = h;</div>\n\
<div class=\"line\">    depth = d;</div>\n\
<div class=\"line\">    size = imgsize;</div>\n\
<div class=\"line\">    pixels = <span class=\"keyword\">new</span> <span class=\"keywordtype\">char</span>[imgsize];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// free surface memory</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> CSurface::clear()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] pixels;</div>\n\
<div class=\"line\">    pixels = NULL;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";