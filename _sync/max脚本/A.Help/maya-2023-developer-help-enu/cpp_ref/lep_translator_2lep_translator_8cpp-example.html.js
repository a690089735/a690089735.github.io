var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: lepTranslator/lepTranslator.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'lep_translator_2lep_translator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: lepTranslator/lepTranslator.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">lepTranslator/lepTranslator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Adds the new file format Lep to the file manipulation dialogs.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// As soon as this plug-in is loaded, the new file format will be available in</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the &quot;Open&quot;, &quot;Import, and &quot;Export&quot; dialogs.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The icon that is displayed in the file selection boxes is contained in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// file &quot;lepTranslator.rgb&quot;, which is also located in the example</span></div>\n\
<div class=\"line\"><span class=\"comment\">// plug-in directory. Maya will find this icon as long as the path to the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// directory that contains it is included in the FILE_ICON_PATH environment variable.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A &quot;Lep&quot; file is an ASCII file with a first line of &quot;&lt;LEP&gt;&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The remainder of the file contains MEL commands that create one of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// these primitives: nurbsSphere, nurbsCone, and nurbsCylinder, as well as move</span></div>\n\
<div class=\"line\"><span class=\"comment\">// commands to position them.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// When writing the file, only primitives of these three types will be created</span></div>\n\
<div class=\"line\"><span class=\"comment\">// along with their positions in 3D space. The reader routine will actually handle</span></div>\n\
<div class=\"line\"><span class=\"comment\">// more MEL commands than these, but only this limited set of types will be written.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Additionally, this example demonstrates how to utilize file options.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// When saving a file, if you click on the option box beside the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// File &gt; Export All menu item, a dialog appears that contains two radio boxes asking</span></div>\n\
<div class=\"line\"><span class=\"comment\">// whether to &quot;Write Positions&quot;. The default is true, and if false is selected, then the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// move commands for primitives will not be written to the output file. This dialog is</span></div>\n\
<div class=\"line\"><span class=\"comment\">// implemented by the MEL script &quot;lepTranslatorOpts.mel&quot;, which is also located in</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the plug-in directory.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A sample input file is supplied in the example plug-in directory as &quot;lepTranslator.lep&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">// This example plugin demonstrates how to implement a Maya File Translator.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The LEP files can be referenced by Maya files.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Note that this is a simple example.  Hence, there are limitations.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For example, every geometry saved will have its values reset to default,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// except their translation if the option &quot;Show Position&quot; has been turned on. To find what </span></div>\n\
<div class=\"line\"><span class=\"comment\">// geometries we can export, we search them by name. Hence, if a polygon cube contains in its </span></div>\n\
<div class=\"line\"><span class=\"comment\">// name the string &quot;nurbsSphere&quot;, it will be written out as a nurbs sphere.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStatus.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxFileTranslator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFileIO.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MNamespace.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ios&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//This is the backbone for creating a MPxFileTranslator</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>LepTranslator : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html\">MPxFileTranslator</a> {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//Constructor</span></div>\n\
<div class=\"line\">    LepTranslator () {};</div>\n\
<div class=\"line\">    <span class=\"comment\">//Destructor</span></div>\n\
<div class=\"line\">               ~LepTranslator ()<span class=\"keyword\"> override </span>{};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//This tells maya that the translator can read files.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//Basically, you can import or load with your translator.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a5bdde07c444bcc490367efe4f3424ade\">haveReadMethod</a>()<span class=\"keyword\"> const override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//This tells maya that the translator can write files.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//Basically, you can export or save with your translator.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#ab58322cfe1d3437d3fc627be3a49121c\">haveWriteMethod</a>()<span class=\"keyword\"> const override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//If this method returns true, and the lep file is referenced in a scene, the write method will be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//called when a write operation is performed on the parent file.  This use is for users who wish</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//to implement a custom file referencing system.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//For this example, we will return false as we will use Maya&#39;s file referencing system.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a43ef24125f987f9f3a27639afe4b6ffc\">haveReferenceMethod</a>()<span class=\"keyword\"> const override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//If this method returns true, it means we support namespaces.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#afca676f2056a1a37aac4bf499d82b793\">haveNamespaceSupport</a>()<span class=\"keyword\">    const override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//This method is used by Maya to create instances of the translator.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>* creator();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//This returns the default extension &quot;.lep&quot; in this case.</span></div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a48074cfa41f4caf87bfa0bc533ea6f25\">defaultExtension</a> () <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//If this method returns true it means that the translator can handle opening files </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//as well as importing them.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//If the method returns false then only imports are handled. The difference between </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//an open and an import is that the scene is cleared(e.g. &#39;file -new&#39;) prior to an </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//open, which may affect the behaviour of the translator.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a21cb60f2121ebce3f21367325c940fbc\">canBeOpened</a>()<span class=\"keyword\"> const override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//Maya will call this method to determine if our translator</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//is capable of handling this file.</span></div>\n\
<div class=\"line\">    MFileKind <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a109c18b551ef7c162399326799ab67e6\">identifyFile</a> (    <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; fileName,</div>\n\
<div class=\"line\">                                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer,</div>\n\
<div class=\"line\">                                                <span class=\"keywordtype\">short</span> size) <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//This function is called by maya when import or open is called.</span></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#ab66b1f5adee9fb511e49f5f6730a7c42\">reader</a> ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; optionsString,</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417\">MPxFileTranslator::FileAccessMode</a> mode) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//This function is called by maya when export or save is called.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a7d2e676fd6823e199ba4fe1da95098ac\">writer</a> ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; optionsString,</div>\n\
<div class=\"line\">                             <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417\">MPxFileTranslator::FileAccessMode</a> mode) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">//The magic string to verify it&#39;s a LEP file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//simply &quot;&lt;LEP&gt;&quot;</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> <span class=\"keyword\">const</span> magic;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//Creates one instance of the LepTranslator</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* LepTranslator::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> LepTranslator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize our magic string</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> <span class=\"keyword\">const</span> LepTranslator::magic(<span class=\"stringliteral\">&quot;&lt;LEP&gt;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// An LEP file is an ascii whose first line contains the string &lt;LEP&gt;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The read does not support comments, and assumes that the each</span></div>\n\
<div class=\"line\"><span class=\"comment\">// subsequent line of the file contains a valid MEL command that can</span></div>\n\
<div class=\"line\"><span class=\"comment\">// be executed via the &quot;executeCommand&quot; method of the MGlobal class.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> LepTranslator::reader ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417\">MPxFileTranslator::FileAccessMode</a> mode)</div>\n\
<div class=\"line\">{    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fname = file.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rval(MS::kSuccess);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> maxLineSize = 1024;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> buf[maxLineSize];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::ifstream inputfile(fname.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), std::ios::in);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!inputfile) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// open failed</span></div>\n\
<div class=\"line\">        std::cerr &lt;&lt; fname &lt;&lt; <span class=\"stringliteral\">&quot;: could not be opened for reading\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!inputfile.getline (buf, maxLineSize)) {</div>\n\
<div class=\"line\">        std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;file &quot;</span> &lt;&lt; fname &lt;&lt; <span class=\"stringliteral\">&quot; contained no lines ... aborting\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (0 != strncmp(buf, magic.asChar(), magic.length())) {</div>\n\
<div class=\"line\">        std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;first line of file &quot;</span> &lt;&lt; fname;</div>\n\
<div class=\"line\">        std::cerr &lt;&lt; <span class=\"stringliteral\">&quot; did not contain &quot;</span> &lt;&lt; magic.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot; ... aborting\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (inputfile.getline (buf, maxLineSize)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cmdString;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cmdString.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(buf);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(cmdString))</div>\n\
<div class=\"line\">            rval = MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    inputfile.close();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> rval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The currently recognised primitives.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* primitiveStrings[] = {</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;nurbsSphere&quot;</span>,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;nurbsCone&quot;</span>,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;nurbsCylinder&quot;</span>,</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> numPrimitives = <span class=\"keyword\">sizeof</span>(primitiveStrings) / <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">char</span>*);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Corresponding commands to create the primitives</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* primitiveCommands[] = {</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;sphere&quot;</span>,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;cone&quot;</span>,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;cylinder&quot;</span>,</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//The writer simply goes gathers all objects from the scene.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//We will check if the object has a transform, if so, we will check</span></div>\n\
<div class=\"line\"><span class=\"comment\">//if it&#39;s either a nurbsSphere, nurbsCone or nurbsCylinder.  If so,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//we will write it out.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> LepTranslator::writer ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417\">MPxFileTranslator::FileAccessMode</a> mode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> showPositions = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>  i;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fname = file.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::ofstream newf(fname.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), std::ios::out);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!newf) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// open failed</span></div>\n\
<div class=\"line\">        std::cerr &lt;&lt; fname &lt;&lt; <span class=\"stringliteral\">&quot;: could not be opened for reading\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    newf.setf(std::ios::unitbuf);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (options.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Start parsing.</span></div>\n\
<div class=\"line\">        <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> optionList;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> theOption;</div>\n\
<div class=\"line\">        options.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;;&#39;</span>, optionList);    <span class=\"comment\">// break out all the options.</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; optionList.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i ){</div>\n\
<div class=\"line\">            theOption.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">            optionList[i].split( <span class=\"charliteral\">&#39;=&#39;</span>, theOption );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( theOption[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;showPositions&quot;</span>) &amp;&amp;</div>\n\
<div class=\"line\">                                                    theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1 ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( theOption[1].asInt() &gt; 0 ){</div>\n\
<div class=\"line\">                    showPositions = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }<span class=\"keywordflow\">else</span>{</div>\n\
<div class=\"line\">                    showPositions = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// output our magic number</span></div>\n\
<div class=\"line\">    newf &lt;&lt; <span class=\"stringliteral\">&quot;&lt;LEP&gt;\\n&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIterator( <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a8ad4d0a286855b50181b12df48942291\">MItDag::kBreadthFirst</a>, <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a>, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !status) {</div>\n\
<div class=\"line\">        status.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a> (<span class=\"stringliteral\">&quot;Failure in DAG iterator setup&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> selection;</div>\n\
<div class=\"line\">    <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a> (selection);</div>\n\
<div class=\"line\">    <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> selIterator (selection, <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a7f6b3e140a92b64ca6c088012cca49af\">MFn::kDagNode</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> done = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (<span class=\"keyword\">true</span>) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> currentNode;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (mode)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417a64282dfea3d1ae99cd9c8220dfa5d0a7\">MPxFileTranslator::kSaveAccessMode</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417a2b6cc89b2e3d91b69ec9af440ef0bc94\">MPxFileTranslator::kExportAccessMode</a>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dagIterator.isDone ())</div>\n\
<div class=\"line\">                    done = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    currentNode = dagIterator.currentItem ();</div>\n\
<div class=\"line\">                    dagIterator.next ();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417ab8316a826501eb9bae9132346b5db59f\">MPxFileTranslator::kExportActiveAccessMode</a>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (selIterator.isDone ())</div>\n\
<div class=\"line\">                    done = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    selIterator.getDependNode (currentNode);</div>\n\
<div class=\"line\">                    selIterator.next ();</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;Unrecognized write mode: &quot;</span> &lt;&lt; mode &lt;&lt; std::endl;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (done)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//We only care about nodes that are transforms</span></div>\n\
<div class=\"line\">        <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> dagNode(currentNode, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( status == MS::kSuccess ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeNameNoNamespace=<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_namespace.html#a3d06313c5ef9f98cc8feaef331cae7ec\">MNamespace::stripNamespaceFromName</a>(dagNode.name());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; numPrimitives; ++i) {                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(nodeNameNoNamespace.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aaa76dfd27998dc2ff937d3690d11391c\">indexW</a>(primitiveStrings[i]) &gt;= 0){</div>\n\
<div class=\"line\">                    <span class=\"comment\">// This is a node we support</span></div>\n\
<div class=\"line\">                    newf &lt;&lt; primitiveCommands[i] &lt;&lt; <span class=\"stringliteral\">&quot; -n &quot;</span> &lt;&lt; nodeNameNoNamespace &lt;&lt; std::endl;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (showPositions) {</div>\n\
<div class=\"line\">                        <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> pos;</div>\n\
<div class=\"line\">                        pos = dagNode.getTranslation(<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8ad74f4c7c6562dc3f8339a8bba2d28dd0\">MSpace::kObject</a>);</div>\n\
<div class=\"line\">                        newf &lt;&lt; <span class=\"stringliteral\">&quot;move &quot;</span> &lt;&lt; pos.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; pos.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; pos.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> &lt;&lt; std::endl;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }<span class=\"comment\">//if (status == MS::kSuccess)</span></div>\n\
<div class=\"line\">    }<span class=\"comment\">//while loop</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    newf.close();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Whenever Maya needs to know the preferred extension of this file format,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// it calls this method. For example, if the user tries to save a file called</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;test&quot; using the Save As dialog, Maya will call this method and actually</span></div>\n\
<div class=\"line\"><span class=\"comment\">// save it as &quot;test.lep&quot;. Note that the period should *not* be included in</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the extension.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> LepTranslator::defaultExtension ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;lep&quot;</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//This method is pretty simple, maya will call this function</span></div>\n\
<div class=\"line\"><span class=\"comment\">//to make sure it is really a file from our translator.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//To make sure, we have a little magic number and we verify against it.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a8966f27c569f8ef7182b63f0a66e79dd\">MPxFileTranslator::MFileKind</a> LepTranslator::identifyFile (</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; fileName,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer,</div>\n\
<div class=\"line\">                                        <span class=\"keywordtype\">short</span> size)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Check the buffer for the &quot;LEP&quot; magic number, the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// string &quot;&lt;LEP&gt;\\n&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MFileKind rval = kNotMyFileType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((size &gt;= (<span class=\"keywordtype\">short</span>)magic.length()) &amp;&amp;</div>\n\
<div class=\"line\">        (0 == strncmp(buffer, magic.asChar(), magic.length()))) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        rval = kIsMyFileType;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> rval;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register the translator with the system</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The last boolean in this method is very important.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It should be set to true if the reader method in the derived class</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// intends to issue MEL commands via the MGlobal::executeCommand </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// method.  Setting this to true will slow down the creation of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// new objects, but allows MEL commands other than those that are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// part of the Maya Ascii file format to function correctly.</span></div>\n\
<div class=\"line\">    status =  plugin.registerFileTranslator( <span class=\"stringliteral\">&quot;Lep&quot;</span>,</div>\n\
<div class=\"line\">                                        <span class=\"stringliteral\">&quot;lepTranslator.rgb&quot;</span>,</div>\n\
<div class=\"line\">                                        LepTranslator::creator,</div>\n\
<div class=\"line\">                                        <span class=\"stringliteral\">&quot;lepTranslatorOpts&quot;</span>,</div>\n\
<div class=\"line\">                                        <span class=\"stringliteral\">&quot;showPositions=1&quot;</span>,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerFileTranslator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status =  plugin.deregisterFileTranslator( <span class=\"stringliteral\">&quot;Lep&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterFileTranslator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";