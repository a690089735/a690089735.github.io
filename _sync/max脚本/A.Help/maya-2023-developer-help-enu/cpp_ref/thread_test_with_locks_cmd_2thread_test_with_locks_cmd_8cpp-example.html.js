var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: threadTestWithLocksCmd/threadTestWithLocksCmd.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'thread_test_with_locks_cmd_2thread_test_with_locks_cmd_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: threadTestWithLocksCmd/threadTestWithLocksCmd.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">threadTestWithLocksCmd/threadTestWithLocksCmd.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the MEL command &quot;threadTestWithLocksCmd&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is similar to the threadTestCmd, but incorporates thread spin locking</span></div>\n\
<div class=\"line\"><span class=\"comment\">// with the MSpinLock class. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To use this plug-in, first load it and then execute the following:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    threadTestWithLocksCmd 100000</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Here, the argument specifies the iteration count. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSimple.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTimer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MThreadAsync.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MThreadPool.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSpinLock.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;mutex&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;thread&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;chrono&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gaf3b44fe07495c3792b926494fca7b517\">DeclareSimpleCommand</a>( threadTestWithLocksCmd, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;2008&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define NUM_TASKS           32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define NUM_ASYNC_TASKS 13</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MThreadRetVal Pi(<span class=\"keywordtype\">void</span> *data);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>_threadDataTag</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> threadNo;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> pi, step, *globalPi;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> start, end;</div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html\">MSpinLock</a> *spinLock;</div>\n\
<div class=\"line\">    std::mutex *mutexLock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}threadData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>_taskDataTag</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>      iterations;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>    totalPi;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}taskData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Pi computation. This function is called from a single thread</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> CalcPiSingleThreaded(<span class=\"keywordtype\">int</span> iterations)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> pi = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> step = 1.0/double(iterations);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; iterations; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x = step * ((double)i-0.5);</div>\n\
<div class=\"line\">        pi += 4.0 / (1.0 + x*x);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    pi /= double(iterations);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> pi;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Pi computation. This function is called from multiple threads</span></div>\n\
<div class=\"line\">MThreadRetVal Pi(<span class=\"keywordtype\">void</span> *data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    threadData *myData = (threadData *)data;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> pi = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = myData-&gt;start; i &lt; myData-&gt;end; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x = myData-&gt;step * ((double)i-0.5);</div>\n\
<div class=\"line\">        pi += 4.0 / (1.0 + x*x);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    myData-&gt;pi = pi;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (MThreadRetVal)0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Function to create thread tasks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DecomposePi(<span class=\"keywordtype\">void</span> *data, MThreadRootTask *root)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    taskData *taskD = (taskData *)data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> iterationsPerTask = taskD-&gt;iterations/NUM_TASKS;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> limit;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    threadData tdata[NUM_TASKS];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> step = 1.0f/taskD-&gt;iterations;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_TASKS; ++i )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        limit                = (i+1)*iterationsPerTask;</div>\n\
<div class=\"line\">        tdata[i].threadNo    = i;</div>\n\
<div class=\"line\">        tdata[i].pi          = 0;</div>\n\
<div class=\"line\">        tdata[i].start       = i*iterationsPerTask;</div>\n\
<div class=\"line\">        limit                = tdata[i].start + iterationsPerTask;</div>\n\
<div class=\"line\">        tdata[i].end         = ( limit &lt; taskD-&gt;iterations) ? limit : taskD-&gt;iterations;</div>\n\
<div class=\"line\">        tdata[i].step        = step;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a611da972604ffe306fdb87b4ab06ed16\">MThreadPool::createTask</a>(Pi, (<span class=\"keywordtype\">void</span> *)&amp;tdata[i], root);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#ae9e9c1be8def42f1040adf93edf4d5e7\">MThreadPool::executeAndJoin</a>(root);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_TASKS; ++i )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        taskD-&gt;totalPi += tdata[i].pi;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Set up and tear down parallel tasks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> CalcPi(<span class=\"keywordtype\">int</span> iterations)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>              Pi = 0;</div>\n\
<div class=\"line\">    taskData            tdata;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    tdata.iterations = 0; tdata.totalPi = 0;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> pr = <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a81616e4d1ab97b678585e86b19e3cdff\">MThreadPool::init</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == pr )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        tdata.iterations  = iterations;</div>\n\
<div class=\"line\">        tdata.totalPi     = 0;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a943a1eb7bb753be409a66388900890e4\">MThreadPool::newParallelRegion</a>(DecomposePi, (<span class=\"keywordtype\">void</span> *)&amp;tdata);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        Pi = tdata.totalPi/iterations;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Release reference to thread pool</span></div>\n\
<div class=\"line\">        <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a23b477d0e2d399f75d585d154c346591\">MThreadPool::release</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Pi;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Pi computation with spin-lock. This function is called from multiple threads</span></div>\n\
<div class=\"line\">MThreadRetVal SpinSyncPi(<span class=\"keywordtype\">void</span> *data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    threadData *myData = (threadData *)data;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> pi = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = myData-&gt;start; i &lt; myData-&gt;end; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x = myData-&gt;step * ((double)i-0.5);</div>\n\
<div class=\"line\">        pi += 4.0 / (1.0 + x*x);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    myData-&gt;spinLock-&gt;lock();</div>\n\
<div class=\"line\">    (*myData-&gt;globalPi) += pi;</div>\n\
<div class=\"line\">    myData-&gt;spinLock-&gt;unlock();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Function to create thread tasks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DecomposeSpinSyncPi(<span class=\"keywordtype\">void</span> *data, MThreadRootTask *root)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    taskData *taskD = (taskData *)data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> iterationsPerTask = taskD-&gt;iterations/NUM_TASKS;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> limit;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> pr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::unique_ptr&lt;MSpinLock&gt; spinLock(<span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html\">MSpinLock</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == pr )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        threadData tdata[NUM_TASKS];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> step = 1.0f/taskD-&gt;iterations;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_TASKS; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            limit                = (i+1)*iterationsPerTask;</div>\n\
<div class=\"line\">            tdata[i].threadNo    = i;</div>\n\
<div class=\"line\">            tdata[i].pi          = 0;</div>\n\
<div class=\"line\">            tdata[i].globalPi    = &amp;taskD-&gt;totalPi;</div>\n\
<div class=\"line\">            tdata[i].start       = i*iterationsPerTask;</div>\n\
<div class=\"line\">            limit                = tdata[i].start + iterationsPerTask;</div>\n\
<div class=\"line\">            tdata[i].end         = ( limit &lt; taskD-&gt;iterations) ? limit : taskD-&gt;iterations;</div>\n\
<div class=\"line\">            tdata[i].step        = step;</div>\n\
<div class=\"line\">            tdata[i].spinLock    = spinLock.get();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a611da972604ffe306fdb87b4ab06ed16\">MThreadPool::createTask</a>(SpinSyncPi, (<span class=\"keywordtype\">void</span> *)&amp;tdata[i], root);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#ae9e9c1be8def42f1040adf93edf4d5e7\">MThreadPool::executeAndJoin</a>(root);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_TASKS; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            taskD-&gt;totalPi += tdata[i].pi;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Pi computation with mutex lock. This function is called from multiple threads</span></div>\n\
<div class=\"line\">MThreadRetVal MutexSyncPi(<span class=\"keywordtype\">void</span> *data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    threadData *myData = (threadData *)data;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> pi = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = myData-&gt;start; i &lt; myData-&gt;end; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x = myData-&gt;step * ((double)i-0.5);</div>\n\
<div class=\"line\">        pi += 4.0 / (1.0 + x*x);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    myData-&gt;mutexLock-&gt;lock();</div>\n\
<div class=\"line\">    (*myData-&gt;globalPi) += pi;</div>\n\
<div class=\"line\">    myData-&gt;mutexLock-&gt;unlock();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Function to create thread tasks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DecomposeMutexSyncPi(<span class=\"keywordtype\">void</span> *data, MThreadRootTask *root)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    taskData *taskD = (taskData *)data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> iterationsPerTask = taskD-&gt;iterations/NUM_TASKS;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> limit;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> pr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::mutex* mutexLock = <span class=\"keyword\">new</span> std::mutex();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == pr )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        threadData tdata[NUM_TASKS];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> step = 1.0f/taskD-&gt;iterations;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_TASKS; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            limit                = (i+1)*iterationsPerTask;</div>\n\
<div class=\"line\">            tdata[i].threadNo    = i;</div>\n\
<div class=\"line\">            tdata[i].pi          = 0;</div>\n\
<div class=\"line\">            tdata[i].globalPi    = &amp;taskD-&gt;totalPi;</div>\n\
<div class=\"line\">            tdata[i].start       = i*iterationsPerTask;</div>\n\
<div class=\"line\">            limit                = tdata[i].start + iterationsPerTask;</div>\n\
<div class=\"line\">            tdata[i].end         = ( limit &lt; taskD-&gt;iterations) ? limit : taskD-&gt;iterations;</div>\n\
<div class=\"line\">            tdata[i].step        = step;</div>\n\
<div class=\"line\">            tdata[i].mutexLock       = mutexLock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a611da972604ffe306fdb87b4ab06ed16\">MThreadPool::createTask</a>(MutexSyncPi, (<span class=\"keywordtype\">void</span> *)&amp;tdata[i], root);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#ae9e9c1be8def42f1040adf93edf4d5e7\">MThreadPool::executeAndJoin</a>(root);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_TASKS; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            taskD-&gt;totalPi += tdata[i].pi;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Free resources and delete lock</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> mutexLock;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Set up and tear down parallel tasks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> CalcSpinSyncPi(<span class=\"keywordtype\">int</span> iterations)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>              Pi = 0;</div>\n\
<div class=\"line\">    taskData            tdata;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> pr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a81616e4d1ab97b678585e86b19e3cdff\">MThreadPool::init</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == pr )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        tdata.iterations  = iterations;</div>\n\
<div class=\"line\">        tdata.totalPi     = 0;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a943a1eb7bb753be409a66388900890e4\">MThreadPool::newParallelRegion</a>(DecomposeSpinSyncPi, (<span class=\"keywordtype\">void</span> *)&amp;tdata);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Pi = tdata.totalPi/iterations;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a23b477d0e2d399f75d585d154c346591\">MThreadPool::release</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Pi;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Set up and tear down parallel tasks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> CalcMutexSyncPi(<span class=\"keywordtype\">int</span> iterations)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>              Pi = 0;</div>\n\
<div class=\"line\">    taskData            tdata;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> pr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a81616e4d1ab97b678585e86b19e3cdff\">MThreadPool::init</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == pr )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        tdata.iterations  = iterations;</div>\n\
<div class=\"line\">        tdata.totalPi     = 0;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a943a1eb7bb753be409a66388900890e4\">MThreadPool::newParallelRegion</a>(DecomposeMutexSyncPi, (<span class=\"keywordtype\">void</span> *)&amp;tdata);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Pi = tdata.totalPi/iterations;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_pool.html#a23b477d0e2d399f75d585d154c346591\">MThreadPool::release</a>();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Pi;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Compute pi. This function is called from multiple asynchonous threads</span></div>\n\
<div class=\"line\">MThreadRetVal AsyncPi(<span class=\"keywordtype\">void</span> *data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    threadData *myData = (threadData *)data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = myData-&gt;start; i &lt; myData-&gt;end; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">         <span class=\"keywordtype\">double</span> x = myData-&gt;step * ((double)i-0.5);</div>\n\
<div class=\"line\">        myData-&gt;pi += 4.0 / (1.0 + x*x);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// variable to track threads. As each thread finishes it&#39;s work it</span></div>\n\
<div class=\"line\"><span class=\"comment\">// increments this variable. The main thread will wait until this</span></div>\n\
<div class=\"line\"><span class=\"comment\">// variable is equal to the thread count, meaning all threads have</span></div>\n\
<div class=\"line\"><span class=\"comment\">// completed their work variable will equal the threadcount and the</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keywordtype\">int</span> g_async_count = 0; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html\">MSpinLock</a> asyncSpinLock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// increment thread completion variable. Uses a lock to prevent race</span></div>\n\
<div class=\"line\"><span class=\"comment\">// conditions where two threads attempt to update the variable</span></div>\n\
<div class=\"line\"><span class=\"comment\">// simultaneously</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AsyncCB(<span class=\"keywordtype\">void</span> *data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    asyncSpinLock.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html#aa81aed607133209dade63a226818224d\">lock</a>();</div>\n\
<div class=\"line\">    g_async_count++;</div>\n\
<div class=\"line\">    asyncSpinLock.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html#a9278be8203e1c42e2619179882ae4403\">unlock</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html\">MSpinLock</a> exchangeSpinLock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// test if variable matches the expected value. Locks required to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ensure threadsafe access to variables</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Maya_InterlockedCompare(<span class=\"keyword\">volatile</span> <span class=\"keywordtype\">int</span>* variable, <span class=\"keywordtype\">int</span> compareValue)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    exchangeSpinLock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html#aa81aed607133209dade63a226818224d\">lock</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> rtn = (*variable == compareValue);</div>\n\
<div class=\"line\">    exchangeSpinLock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html#a9278be8203e1c42e2619179882ae4403\">unlock</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> rtn;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Barrier function. Main thread enters here and polls the count</span></div>\n\
<div class=\"line\"><span class=\"comment\">// variable until all worker threads have indicated they have</span></div>\n\
<div class=\"line\"><span class=\"comment\">// completed by incrementing this count.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> WaitForAsyncThreads(<span class=\"keywordtype\">int</span> val)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( !Maya_InterlockedCompare(&amp;g_async_count, val)) {</div>\n\
<div class=\"line\">        std::this_thread::yield();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Set up and tear down asynchronous thread tasks</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> CalcAsyncPi(<span class=\"keywordtype\">int</span> iterations)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Pi = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    g_async_count = 0;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> pr = <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_async.html#a81616e4d1ab97b678585e86b19e3cdff\">MThreadAsync::init</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> == pr )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> iterationsPerTask = iterations/NUM_ASYNC_TASKS;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> limit;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        threadData tdata[NUM_ASYNC_TASKS];</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> step = 1.0f/iterations;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_ASYNC_TASKS; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            limit                = (i+1)*iterationsPerTask;</div>\n\
<div class=\"line\">            tdata[i].threadNo    = i;</div>\n\
<div class=\"line\">            tdata[i].pi          = 0;</div>\n\
<div class=\"line\">            tdata[i].start       = i*iterationsPerTask;</div>\n\
<div class=\"line\">            limit                = tdata[i].start + iterationsPerTask;</div>\n\
<div class=\"line\">            tdata[i].end         = ( limit &lt; iterations) ? limit : iterations;</div>\n\
<div class=\"line\">            tdata[i].step        = step;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">// start threads. Each thread makes a call to AsyncCB</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// when completed which increments a counter. The wait</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// function below waits until all threads have completed</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// and incremented this counter.</span></div>\n\
<div class=\"line\">            pr = <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_async.html#ad805f347e198954c15fa9c384a2bd5e5\">MThreadAsync::createTask</a>(AsyncPi, (<span class=\"keywordtype\">void</span> *)&amp;tdata[i], AsyncCB, NULL);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( pr != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// barrier here, waits until all threads have completed before continuing</span></div>\n\
<div class=\"line\">        WaitForAsyncThreads(NUM_ASYNC_TASKS);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// accumulate sum from each thread</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">int</span> i = 0; i &lt; NUM_ASYNC_TASKS; ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Pi += tdata[i].pi;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        Pi /= iterations;</div>\n\
<div class=\"line\">        <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_async.html#a23b477d0e2d399f75d585d154c346591\">MThreadAsync::release</a>(); <span class=\"comment\">// release async thread</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Pi;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// MSimple command that invokes the serial and parallel thread calculations</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> threadTestWithLocksCmd::doIt( <span class=\"keyword\">const</span> <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Computation of pi using the Maya API\\n&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(str);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(args.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() != 1) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Invalid number of arguments, supply iteration count, usage: threadTestWithLocksCmd 100000&quot;</span>);</div>\n\
<div class=\"line\">        <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(str);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> iterations = args.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a54e9c6d91b7b999624b2384bc52f12a2\">asInt</a>( 0, &amp;stat );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Invalid number of arguments, supply iteration count, usage: threadTestWithLocksCmd 100000&quot;</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(str);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> pi = 0.0;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> piStr;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> elapsedTime = 0.0;</div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html\">MTimer</a> timer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// run single threaded</span></div>\n\
<div class=\"line\">    timer.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ac336e3fea7e0479c0496beccd27ba152\">beginTimer</a>();</div>\n\
<div class=\"line\">    pi = CalcPiSingleThreaded(iterations);</div>\n\
<div class=\"line\">    timer.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ab1cd82365475316c3b987f456df5e14c\">endTimer</a>();</div>\n\
<div class=\"line\">    elapsedTime = timer.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#af216bfafd4829e364522a4c93e737fe8\">elapsedTime</a>();</div>\n\
<div class=\"line\">    piStr.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(pi, 10); <span class=\"comment\">// 10 digits of precision</span></div>\n\
<div class=\"line\">    str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Unthreaded computation, pi = &quot;</span>) + piStr + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; calculated in &quot;</span>) + elapsedTime + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;s&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(str);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// run threaded and lock-free</span></div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ac336e3fea7e0479c0496beccd27ba152\">beginTimer</a>();</div>\n\
<div class=\"line\">    pi = CalcPi(iterations);</div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ab1cd82365475316c3b987f456df5e14c\">endTimer</a>();</div>\n\
<div class=\"line\">    elapsedTime = timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#af216bfafd4829e364522a4c93e737fe8\">elapsedTime</a>();</div>\n\
<div class=\"line\">    piStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(pi, 10); <span class=\"comment\">// 10 digits of precision</span></div>\n\
<div class=\"line\">    str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Threaded computation, pi = &quot;</span>) + piStr + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; calculated in &quot;</span>) + elapsedTime + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;s&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(str);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// run threaded with spin-lock synchronisation</span></div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ac336e3fea7e0479c0496beccd27ba152\">beginTimer</a>();</div>\n\
<div class=\"line\">    pi = CalcSpinSyncPi(iterations);</div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ab1cd82365475316c3b987f456df5e14c\">endTimer</a>();</div>\n\
<div class=\"line\">    elapsedTime = timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#af216bfafd4829e364522a4c93e737fe8\">elapsedTime</a>();</div>\n\
<div class=\"line\">    piStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(pi, 10); <span class=\"comment\">// 10 digits of precision</span></div>\n\
<div class=\"line\">    str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Threaded computation with spin-lock synchronization, pi = &quot;</span>) + piStr + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; calculated in &quot;</span>) + elapsedTime + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;s&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(str);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// run threaded with mutex synchronisation</span></div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ac336e3fea7e0479c0496beccd27ba152\">beginTimer</a>();</div>\n\
<div class=\"line\">    pi = CalcMutexSyncPi(iterations);</div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ab1cd82365475316c3b987f456df5e14c\">endTimer</a>();</div>\n\
<div class=\"line\">    elapsedTime = timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#af216bfafd4829e364522a4c93e737fe8\">elapsedTime</a>();</div>\n\
<div class=\"line\">    piStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(pi, 10); <span class=\"comment\">// 10 digits of precision</span></div>\n\
<div class=\"line\">    str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Threaded computation with mutex synchronization, pi = &quot;</span>) + piStr + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; calculated in &quot;</span>) + elapsedTime + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;s&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(str);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// run async threaded</span></div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ac336e3fea7e0479c0496beccd27ba152\">beginTimer</a>();</div>\n\
<div class=\"line\">    pi = CalcAsyncPi(iterations);</div>\n\
<div class=\"line\">    timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#ab1cd82365475316c3b987f456df5e14c\">endTimer</a>();</div>\n\
<div class=\"line\">    elapsedTime = timer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_timer.html#af216bfafd4829e364522a4c93e737fe8\">elapsedTime</a>();</div>\n\
<div class=\"line\">    piStr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(pi, 10); <span class=\"comment\">// 10 digits of precision</span></div>\n\
<div class=\"line\">    str = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Threaded computation with async thread, pi = &quot;</span>) + piStr + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; calculated in &quot;</span>) + elapsedTime + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;s\\n&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(str);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";