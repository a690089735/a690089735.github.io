var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: sceneAssembly/assemblyDefinition.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'scene_assembly_2assembly_definition_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: sceneAssembly/assemblyDefinition.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">sceneAssembly/assemblyDefinition.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#include &quot;assemblyDefinition.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;adskRepresentationFactory.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxRepresentation.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAssembly.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnContainerNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCompoundAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MNamespace.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MExternalContentInfoTable.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MExternalContentLocationTable.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span>             <span class=\"comment\">// For CHECK_MSTATUS_AND_RETURN_IT.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>std;            <span class=\"comment\">// For CHECK_MSTATUS macros.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define DIMOF(array) (sizeof(array)/sizeof((array)[0]))</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL DECLARATIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*----- constants -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keyword\">const</span> ICON_NAME = <span class=\"stringliteral\">&quot;out_assemblyDefinition.png&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> REPRESENTATIONS_ATTR_UINAME( <span class=\"stringliteral\">&quot;representations&quot;</span> );</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> REPRESENTATIONS_ATTR_SHORTNAME( <span class=\"stringliteral\">&quot;rep&quot;</span> );</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> REPRESENTATION_DATA_ATTR_UINAME( <span class=\"stringliteral\">&quot;repData&quot;</span> );</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> REPRESENTATION_DATA_ATTR_SHORTNAME( <span class=\"stringliteral\">&quot;rda&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*----- types and enumerations -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> std::map&lt;std::string, AdskRepresentationFactory*&gt;</div>\n\
<div class=\"line\">RepresentationFactories;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*----- variables -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">RepresentationFactories repFactories;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AssemblyDefinition</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> AssemblyDefinition::id(0x580000b2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::typeName(<span class=\"stringliteral\">&quot;assemblyDefinition&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyDefinition::aRepresentations;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyDefinition::aRepName;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyDefinition::aRepLabel;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyDefinition::aRepType;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> AssemblyDefinition::aRepData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* AssemblyDefinition::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> AssemblyDefinition;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyDefinition::initRepresentations(</div>\n\
<div class=\"line\">   eStorable storable,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;  aRepresentations,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;  aRepName,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;  aRepLabel,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;  aRepType,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;  aRepData</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">   <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> stringAttrFn;</div>\n\
<div class=\"line\">   aRepName = stringAttrFn.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;repName&quot;</span>, <span class=\"stringliteral\">&quot;rna&quot;</span>, <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>);</div>\n\
<div class=\"line\">   stat = <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aRepName);</div>\n\
<div class=\"line\">   <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   aRepLabel = stringAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;repLabel&quot;</span>, <span class=\"stringliteral\">&quot;rla&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>);</div>\n\
<div class=\"line\">   stat = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aRepLabel);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   aRepType = stringAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;repType&quot;</span>, <span class=\"stringliteral\">&quot;rty&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>);</div>\n\
<div class=\"line\">   stat = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aRepType);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   aRepData = stringAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(</div>\n\
<div class=\"line\">      REPRESENTATION_DATA_ATTR_UINAME, REPRESENTATION_DATA_ATTR_SHORTNAME,</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7afab53ea4a643325262b9c140af093279\">MFnData::kString</a>);   </div>\n\
<div class=\"line\">   stat = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aRepData);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// List of representations.</span></div>\n\
<div class=\"line\">   <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html\">MFnCompoundAttribute</a> representationsAttrFn;</div>\n\
<div class=\"line\">   aRepresentations = representationsAttrFn.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html#a94a6d5e93a85fb18bc7accc18ee0d9f6\">create</a>(</div>\n\
<div class=\"line\">      REPRESENTATIONS_ATTR_UINAME, REPRESENTATIONS_ATTR_SHORTNAME);  </div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (storable == kNotStorable) {</div>\n\
<div class=\"line\">      <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>(representationsAttrFn.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">false</span>));</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>(representationsAttrFn.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#acc80b84249f9c028f2c6d085a026b50c\">setArray</a>(<span class=\"keyword\">true</span>));</div>\n\
<div class=\"line\">   representationsAttrFn.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html#a45469146fcfb96cdc96ad3a07df5dfa7\">addChild</a>(aRepName);</div>\n\
<div class=\"line\">   representationsAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html#a45469146fcfb96cdc96ad3a07df5dfa7\">addChild</a>(aRepLabel);</div>\n\
<div class=\"line\">   representationsAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html#a45469146fcfb96cdc96ad3a07df5dfa7\">addChild</a>(aRepType);</div>\n\
<div class=\"line\">   representationsAttrFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_compound_attribute.html#a45469146fcfb96cdc96ad3a07df5dfa7\">addChild</a>(aRepData);</div>\n\
<div class=\"line\">   stat = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a837094252166c0b365fafb53e4a0203b\">MPxNode::addAttribute</a>(aRepresentations);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyDefinition::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Initialize our storable list of representations.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = initRepresentations(</div>\n\
<div class=\"line\">      kStorable, aRepresentations, aRepName, aRepLabel, aRepType, aRepData);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga2f3f1ac62ed663f5efd20ff99991335b\">CHECK_MSTATUS_AND_RETURN_IT</a>(stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyDefinition::uninitialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Delete and remove any representation factories left behind.</span></div>\n\
<div class=\"line\">   RepresentationFactories::iterator i = repFactories.begin();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (; i != repFactories.end(); ++i) {</div>\n\
<div class=\"line\">      <span class=\"keyword\">delete</span> i-&gt;second;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   repFactories.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#ac8bb3912a3ce86b15842e79d0b421204\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> AssemblyDefinition::registeredTypes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> repTypes;</div>\n\
<div class=\"line\">   RepresentationFactories::const_iterator i = repFactories.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a1ebac8c16ac95b2b81d78055841992f3\">begin</a>();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (; i != repFactories.end(); ++i) {</div>\n\
<div class=\"line\">      repTypes.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(i-&gt;first.c_str()));</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> repTypes;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AssemblyDefinition::registerRepresentationFactory(</div>\n\
<div class=\"line\">   AdskRepresentationFactory* f</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (f == 0 ||</div>\n\
<div class=\"line\">       repFactories.find(f-&gt;getType().asChar()) != repFactories.end()) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   repFactories[f-&gt;getType().asChar()] = f;</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AssemblyDefinition::deregisterRepresentationFactory(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   RepresentationFactories::iterator found = repFactories.find(type.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (found == repFactories.end()) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keyword\">delete</span> found-&gt;second;</div>\n\
<div class=\"line\">   repFactories.erase(found);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">AssemblyDefinition::AssemblyDefinition() : fActiveRep(nullptr)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">AssemblyDefinition::~AssemblyDefinition()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyDefinition::getExternalContent(</div>\n\
<div class=\"line\">   <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html\">MExternalContentInfoTable</a>&amp; table</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> repNames( getRepresentations( &amp;status ) );</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbReps = repNames.length();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (status != MS::kSuccess || nbReps == 0) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// To be friendly to the file path editor, which assumes all paths are stored</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// verbatim in plugs, we provide the external content entries with the plug</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// name as the key.  This simplified approach can be changed if the filepath</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// editor supports a more generic interface in the future.</span></div>\n\
<div class=\"line\">   <span class=\"comment\">//</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// This is based on assumptions (true as of this writing) that</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// representations will have, at most, a single external content item, and</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// that the key that representations give for the item is irrelevant (they</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// will read the path from the first item we pass back in setExternalContent,</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// no matter what its name is).</span></div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> entryFormat( <span class=\"stringliteral\">&quot;^1s[^2s].^3s&quot;</span> );</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> entryName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; nbReps; ++i) {</div>\n\
<div class=\"line\">      RepresentationPtr rep( representationFactory( repNames[ i ] ) );</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> ( rep.get() == 0 ) {</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html\">MExternalContentInfoTable</a> repTable;</div>\n\
<div class=\"line\">      rep-&gt;getExternalContent( repTable );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> ( repTable.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0 ) {</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> unusedKey;</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> unresolvedLocation;</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> resolvedLocation;</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> contextNodeFullName;</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> roles;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"comment\">// As explained above, we are only reading the first item in the table, as</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// we know that the currently implemented representations only have one,</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// at most.  The case where there is no external content has already been</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// filtered out at this point.</span></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> ( repTable.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html#aa52fbca9287699057b1ac28c99a03297\">getEntry</a>(</div>\n\
<div class=\"line\">              0, unusedKey, unresolvedLocation, resolvedLocation, contextNodeFullName, roles ) !=</div>\n\
<div class=\"line\">           <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> ) {</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> plugIndex;</div>\n\
<div class=\"line\">      plugIndex += i;</div>\n\
<div class=\"line\">      entryName.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a07ae464181c795f43fa1bcc288acff91\">format</a>( entryFormat, REPRESENTATIONS_ATTR_UINAME,</div>\n\
<div class=\"line\">                        plugIndex, REPRESENTATION_DATA_ATTR_UINAME );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      table.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html#a065dfd4fad52eddb6ec6f612fc80dfa0\">addResolvedEntry</a>(</div>\n\
<div class=\"line\">         entryName, unresolvedLocation, resolvedLocation, contextNodeFullName, roles );</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyDefinition::setExternalContent(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html\">MExternalContentLocationTable</a>&amp; table</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> repNames( getRepresentations( &amp;status ) );</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbReps = repNames.length();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (status != MS::kSuccess || nbReps == 0) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbEntries = table.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> oldActive = getActive();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; nbEntries; ++i) {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> key;</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> location;</div>\n\
<div class=\"line\">      table.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html#a64fc25e6e6fa3433ee41b9bff040e834\">getEntry</a>( i, key, location );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"comment\">// The key name is set in getExternalContent, and will be along the</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// lines of</span></div>\n\
<div class=\"line\">      <span class=\"comment\">//</span></div>\n\
<div class=\"line\">      <span class=\"comment\">//    representations[0].repData</span></div>\n\
<div class=\"line\">      <span class=\"comment\">//</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// The only information that is relevant for this implementation is the</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// index as the rest is implicit.  So just extract the index by finding</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// what lies between brackets.</span></div>\n\
<div class=\"line\">      <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> openingBracketIdx = key.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a7487f32861d955d3ac0d8722cc5797b2\">index</a>( <span class=\"charliteral\">&#39;[&#39;</span> );</div>\n\
<div class=\"line\">      <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> closingBracketIdx = key.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a7487f32861d955d3ac0d8722cc5797b2\">index</a>( <span class=\"charliteral\">&#39;]&#39;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> ( openingBracketIdx &lt; 0 || closingBracketIdx &lt; 0 ) {</div>\n\
<div class=\"line\">         <span class=\"comment\">// Key syntax got garbled, not much we can do.</span></div>\n\
<div class=\"line\">         <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> repIdxStr(</div>\n\
<div class=\"line\">         key.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a41ba57372bc1082383b4f1929a8030fa\">substring</a>( openingBracketIdx + 1, closingBracketIdx - 1 ) );</div>\n\
<div class=\"line\">      </div>\n\
<div class=\"line\">      <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> repIdx = repIdxStr.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a33a3313205686174bef095f523f9408b\">asUnsigned</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> ( repIdx &gt;= nbReps ) {</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      std::unique_ptr&lt; MPxRepresentation &gt; rep(</div>\n\
<div class=\"line\">         representationFactory( repNames[ repIdx ] ) );</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> ( rep.get() == 0 ) {</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <span class=\"comment\">// Create a table just for the representation.  The entry name is not</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// really important in this limited implementation: we know in advance</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// that the currently existing representations will only use the first</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// item, whatever its name.</span></div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html\">MExternalContentLocationTable</a> repTable;</div>\n\
<div class=\"line\">      repTable.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html#a6488faa3dec73da625fe519162a1cec0\">addEntry</a>( <span class=\"stringliteral\">&quot;Data&quot;</span>, location );</div>\n\
<div class=\"line\">      rep-&gt;setExternalContent( repTable );</div>\n\
<div class=\"line\">      </div>\n\
<div class=\"line\">      <span class=\"comment\">// Since the file has been changed,</span></div>\n\
<div class=\"line\">      <span class=\"comment\">// refresh representation if it is active</span></div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span>(repNames[ repIdx ] == oldActive)</div>\n\
<div class=\"line\">      {</div>\n\
<div class=\"line\">        activate(oldActive);</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::createRepresentation(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; input,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; representation,</div>\n\
<div class=\"line\">   <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a>*  <span class=\"comment\">/* undoRedo */</span>,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>*       status</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Early out: unknown representation type.</span></div>\n\
<div class=\"line\">   RepresentationFactories::const_iterator found =</div>\n\
<div class=\"line\">      repFactories.find(type.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (found == repFactories.end()) {</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (status) *status = <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> AdskRepresentationFactory* <span class=\"keyword\">const</span> repFactory = found-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// If it wasn&#39;t given to us, set the return representation name.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> newRepName = </div>\n\
<div class=\"line\">       (representation.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() &gt; 0) ?</div>\n\
<div class=\"line\">       representation :</div>\n\
<div class=\"line\">       repFactory-&gt;creationName(<span class=\"keyword\">this</span>, input);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// If the factory couldn&#39;t create a name for the representation,</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// report failure.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (newRepName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() == 0) {</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">if</span> (status) *status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">       <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">   performCreateRepresentation(</div>\n\
<div class=\"line\">      newRepName,                             <span class=\"comment\">// Name</span></div>\n\
<div class=\"line\">      type,                                   <span class=\"comment\">// Type</span></div>\n\
<div class=\"line\">      repFactory-&gt;creationLabel(<span class=\"keyword\">this</span>, input), <span class=\"comment\">// Label</span></div>\n\
<div class=\"line\">      repFactory-&gt;creationData(<span class=\"keyword\">this</span>, input)   <span class=\"comment\">// Data</span></div>\n\
<div class=\"line\">   );</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (status) *status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> newRepName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AssemblyDefinition::inactivateRep()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Unload the previously-active representation (if any).</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> oldActive = getActive();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (oldActive.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() != 0) {</div>\n\
<div class=\"line\">      <span class=\"keywordtype\">bool</span> returnVal = fActiveRep.get() ? fActiveRep-&gt;inactivate(): <span class=\"keyword\">false</span>;      </div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> (!returnVal) {</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      <span class=\"comment\">// Null out the active representation only if inactivation succeeds.</span></div>\n\
<div class=\"line\">      fActiveRep = RepresentationPtr();</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AssemblyDefinition::activateRep(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; representation)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Activation of an empty string is a no-op.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (representation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() != 0) {</div>\n\
<div class=\"line\">      fActiveRep = RepresentationPtr(representationFactory(representation));</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span> fActiveRep.get() ?  fActiveRep-&gt;activate() : <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::getActive()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> fActiveRep.get() ? fActiveRep-&gt;getName() : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> AssemblyDefinition::getRepresentations(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>* status)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> representations;</div>\n\
<div class=\"line\">   <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationsPlug(thisMObject(), aRepresentations);</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;static_cast&lt;int&gt;(representationsPlug.numElements()); ++i) {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationPlug = representationsPlug[i];</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> namePlug = representationPlug.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name;</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status_ = namePlug.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(name);</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> (status_ != MS::kSuccess) {</div>\n\
<div class=\"line\">          <span class=\"comment\">// Retrieving the plug name should never fail. If it did,</span></div>\n\
<div class=\"line\">          <span class=\"comment\">// something went terribly wrong, so let&#39;s report it.</span></div>\n\
<div class=\"line\">          <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>(status_);</div>\n\
<div class=\"line\">          <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">      </div>\n\
<div class=\"line\">      representations.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(name);</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// There exists no documented reason that would cause this function</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// to fail. We therefore unconditionally return success.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (status != 0) {</div>\n\
<div class=\"line\">       *status = MS::kSuccess;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> representations;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::getRepType(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> getRepAttrValue(repName, aRepType);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::getRepLabel(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> getRepAttrValue(repName, aRepLabel);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::getRepData(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> getRepAttrValue(repName, aRepData);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyDefinition::setRepData(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; data</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   setRepAttrValue( repName, aRepData, data );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::getRepNamespace()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"comment\">// returning an empty string will make sure that no namespace is created for this assembly</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();   </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> AssemblyDefinition::repTypes()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"comment\">// This is the representation creation query for existing assembly</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// definitions.  Previously-created representations impose no</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// constraints to new representation creation, so simply return the</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// full list of representation types.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> registeredTypes();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyDefinition::deleteRepresentation(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName)</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationsPlug(thisMObject(), aRepresentations);</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numElements = representationsPlug.numElements();</div>\n\
<div class=\"line\">   <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attribs[] = {aRepName, aRepData, aRepLabel, aRepType};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;numElements; ++i) </div>\n\
<div class=\"line\">   {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationPlug = representationsPlug[i];</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> namePlug = representationPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepName);</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> value;    </div>\n\
<div class=\"line\">      namePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(value);</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> (value == repName) {       </div>\n\
<div class=\"line\">         <span class=\"comment\">// Keep the representation list compacted.</span></div>\n\
<div class=\"line\">         <span class=\"comment\">// Overwrite the item data that we want to delete by copying </span></div>\n\
<div class=\"line\">         <span class=\"comment\">// all the data items -1 position where they are.</span></div>\n\
<div class=\"line\">         <span class=\"comment\">// Delete the last item of the list.       </span></div>\n\
<div class=\"line\">         <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = i + 1 ; j &lt; numElements; j++)</div>\n\
<div class=\"line\">         {          </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; DIMOF(attribs); ++k){</div>\n\
<div class=\"line\">               representationsPlug[j].child(attribs[k]).getValue(value);</div>\n\
<div class=\"line\">               representationsPlug[j-1].child(attribs[k]).setValue(value);               </div>\n\
<div class=\"line\">            }           </div>\n\
<div class=\"line\">         }  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">         <span class=\"comment\">// remove the numElements-1 item.</span></div>\n\
<div class=\"line\">         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cmd(<span class=\"stringliteral\">&quot;removeMultiInstance -b true &quot;</span>);</div>\n\
<div class=\"line\">         cmd += representationsPlug[numElements-1].name();</div>\n\
<div class=\"line\">         <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(cmd);  </div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">         <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyDefinition::deleteAllRepresentations()</div>\n\
<div class=\"line\">{  </div>\n\
<div class=\"line\">   clearRepresentationList();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationsPlug(thisMObject(), aRepresentations);</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> representationsPlug.numElements() == 0 ? <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a> : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_representation.html\">MPxRepresentation</a>* AssemblyDefinition::representationFactory(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> repType = getRepType(name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (repType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() &gt; 0) {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> repData = getRepData(name);</div>\n\
<div class=\"line\">      RepresentationFactories::const_iterator found =</div>\n\
<div class=\"line\">         repFactories.find(repType.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> (found != repFactories.end()) {</div>\n\
<div class=\"line\">         <span class=\"comment\">// Representations require a non-const pointer to their</span></div>\n\
<div class=\"line\">         <span class=\"comment\">// assembly, which they will then use in a const-correct way.</span></div>\n\
<div class=\"line\">         <span class=\"keywordflow\">return</span> found-&gt;second-&gt;create(</div>\n\
<div class=\"line\">            const_cast&lt;AssemblyDefinition*&gt;(<span class=\"keyword\">this</span>), name, repData);</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyDefinition::postLoad()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Activate the default representation, which is representation 0.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> representations = getRepresentations(&amp;status);</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> len = representations.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (status != MS::kSuccess || len == 0) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// If we can&#39;t activate a representation (because our parent assembly is</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// being called with activateNonRecursive()), stop now.  As of</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// 20-Nov-2012, nesting assembly definitions is not a recommended</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// workflow, but it is not prohibited.</span></div>\n\
<div class=\"line\">   <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_assembly.html\">MFnAssembly</a> aFn(thisMObject());</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (!aFn.canActivate()) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// MFnAssembly::activate() must be called to benefit from scene</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// assembly infrastructure activation services.</span></div>\n\
<div class=\"line\">   aFn.activate(representations[0]);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::getDefaultIcon()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(ICON_NAME);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyDefinition::postConstructor()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"comment\">// Set the assembly default icon.</span></div>\n\
<div class=\"line\">   <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> <span class=\"keyword\">self</span>(thisMObject());</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> iconName = <span class=\"keyword\">self</span>.findPlug(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;iconName&quot;</span>), <span class=\"keyword\">true</span>, &amp;status);</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   iconName.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(getDefaultIcon());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyDefinition::clearRepresentationList()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> representations;</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationsPlug(thisMObject(), aRepresentations);</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;static_cast&lt;int&gt;(representationsPlug.numElements()); ++i) {</div>\n\
<div class=\"line\">      representations.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(representationsPlug[i].name());</div>\n\
<div class=\"line\">   }   </div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;static_cast&lt;int&gt;(representations.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()); ++i) {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cmd(<span class=\"stringliteral\">&quot;removeMultiInstance -b true &quot;</span>);</div>\n\
<div class=\"line\">      cmd += representations[i];</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(cmd);</div>\n\
<div class=\"line\">   }   </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AssemblyDefinition::performCreateRepresentation(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; type,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; label,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; data</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationsPlug(thisMObject(), aRepresentations);</div>\n\
<div class=\"line\">   <span class=\"keywordtype\">int</span> nbElements = representationsPlug.numElements();</div>\n\
<div class=\"line\">   representationsPlug.selectAncestorLogicalIndex(nbElements, aRepresentations);</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> namePlug = representationsPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepName);</div>\n\
<div class=\"line\">   namePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> labelPlug = representationsPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepLabel);</div>\n\
<div class=\"line\">   labelPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(label);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// In the future, could consider making representation type as not editable.</span></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> typePlug = representationsPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepType);</div>\n\
<div class=\"line\">   typePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dataPlug = representationsPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepData);</div>\n\
<div class=\"line\">   dataPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(data);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::getRepAttrValue(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;       repAttr</div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (repName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() == 0) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>();</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> data;</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationsPlug(thisMObject(), aRepresentations);</div>\n\
<div class=\"line\">   <span class=\"comment\">// O(n) search over all representations should not matter because</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// the number of representations is small.</span></div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numElements = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(representationsPlug.numElements());</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;numElements; ++i) {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationPlug = representationsPlug[i];</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> namePlug = representationPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepName);</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name;</div>\n\
<div class=\"line\">      namePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(name);</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> (name == repName) {</div>\n\
<div class=\"line\">         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dataPlug = representationPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(repAttr);</div>\n\
<div class=\"line\">         dataPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(data);</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> data;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyDefinition::setRepAttrValue(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;       repAttr,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; data</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (repName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() == 0) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationsPlug(thisMObject(), aRepresentations);</div>\n\
<div class=\"line\">   <span class=\"comment\">// O(n) search over all representations should not matter because</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// the number of representations is small.</span></div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numElements = <span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">int</span><span class=\"keyword\">&gt;</span>(representationsPlug.numElements());</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;numElements; ++i) {</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> representationPlug = representationsPlug[i];</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> namePlug = representationPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(aRepName);</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name;</div>\n\
<div class=\"line\">      namePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(name);</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">if</span> (name == repName) {</div>\n\
<div class=\"line\">         <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> dataPlug = representationPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a482274cc996238a9a9e77be5781caa90\">child</a>(repAttr);</div>\n\
<div class=\"line\">         dataPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(data);</div>\n\
<div class=\"line\">         <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">      }</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> AssemblyDefinition::setRepName(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; newName,</div>\n\
<div class=\"line\">   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>*       status</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> s = setRepAttrValue(repName, aRepName, newName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status) *status = s;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> newName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> AssemblyDefinition::setRepLabel(</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; repName,</div>\n\
<div class=\"line\">   <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; label</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> setRepAttrValue(repName, aRepLabel, label);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> AssemblyDefinition::canRepApplyEdits(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; representation)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (representation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a9f0f85031c628ef5111739fe8573003b\">numChars</a>() == 0) {</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"comment\">// If the argument isn&#39;t the active representation, need to build a</span></div>\n\
<div class=\"line\">   <span class=\"comment\">// temporary transient representation to ask it.</span></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">if</span> (getActive() != representation || fActiveRep.get() == 0) {</div>\n\
<div class=\"line\">      RepresentationPtr ptr(representationFactory(representation));</div>\n\
<div class=\"line\">      <span class=\"keywordflow\">return</span> (ptr.get() == 0 ? <span class=\"keyword\">false</span> : ptr-&gt;canApplyEdits());</div>\n\
<div class=\"line\">   }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">   <span class=\"keywordflow\">return</span> fActiveRep-&gt;canApplyEdits();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy</span></div>\n\
<div class=\"line\"><span class=\"comment\">// form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";