var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheConfig.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_config_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheConfig.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheConfig.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheConfig.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheVramQuery.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// On Windows, the max macro conflicts with</span></div>\n\
<div class=\"line\"><span class=\"comment\">// std::numeric_limits&lt;T&gt;::max().</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef max</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef max</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL FUNCTIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> expandEnv(<a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; expandedEnv, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; env)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> envQuery = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;$&quot;</span>) + env;</div>\n\
<div class=\"line\">    expandedEnv = envQuery.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#af44d9587972be235b7d5ed4ec887cf0b\">expandEnvironmentVariablesAndTilde</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> expandedEnv != envQuery;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getVP2OverrideAPIDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Default value</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> vp2OverrideEnv;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (expandEnv(vp2OverrideEnv, <span class=\"stringliteral\">&quot;MAYA_GPUCACHE_VP2_OVERRIDE_API&quot;</span>)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vp2OverrideEnv == <span class=\"stringliteral\">&quot;MPxDrawOverride&quot;</span>) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> Config::kMPxDrawOverride;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (vp2OverrideEnv == <span class=\"stringliteral\">&quot;MPxSubSceneOverride&quot;</span>) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> Config::kMPxSubSceneOverride;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot;MAYA_GPUCACHE_VP2_OVERRIDE_API is set but it is neither &quot;</span></div>\n\
<div class=\"line\">                   <span class=\"stringliteral\">&quot;MPxDrawOverride nor MPxSubSceneOverride. &quot;</span></div>\n\
<div class=\"line\">                   <span class=\"stringliteral\">&quot;Using MPxSubSceneOverride instead.\\n&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> Config::kMPxSubSceneOverride;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Config::kMPxSubSceneOverride;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getIgnoreUVsDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Default value</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getMinVertsForVBOsDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Default value</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// FIXME: No serious tuning regarding the optimal value of this</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// value has been performed upto now!</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> result = 128;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getMaxVBOCountDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Default value</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// FIXME: No serious tuning regarding the optimal value of this</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// value has been performed up to now!</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef __APPLE__</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The GPU memory manager on Mac seems to become completely</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// overloaded when we allocate to many buffers.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> defVal = 8192;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else    </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> defVal = std::numeric_limits&lt;int&gt;::max();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> result = defVal;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getMaxVBOSizeDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> result;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Detect the dedicated VRAM and use the following heuristic</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for sizing the VBO cache.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   VRAM   Used for    Available for</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   (MB)   gpuCache&#39;s  other uses (MB)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   (MB)   VBOs (MB)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      0        0           0</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    128        0         128</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    512      256         256</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   1024      640         384</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   2048     1536         512</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   3072     2560         512</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> vramMB = VramQuery::queryVram() / 1024 / 1024;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> resultMB = 0.0f;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (vramMB &lt; 128) {</div>\n\
<div class=\"line\">        resultMB = 0.f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (vramMB &lt; 512) {</div>\n\
<div class=\"line\">        resultMB = (vramMB -  128) * (( 256.f -   0.f) / ( 512.f -  128.f)) +   0.f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (vramMB &lt; 1024) {</div>\n\
<div class=\"line\">        resultMB = (vramMB -  512) * (( 640.f - 256.f) / (1024.f -  512.f)) + 256.f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (vramMB &lt; 2048) {</div>\n\
<div class=\"line\">        resultMB = (vramMB - 1024) * ((1536.f - 640.f) / (2048.f - 1024.f)) + 640.f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        resultMB = vramMB - 512;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    result = size_t(resultMB * 1024 * 1024);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getUseVertexArrayWhenVRAMIsLowDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// On Windows, using a temporary VBO is 3 times faster than</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// using vertex arrays. (Tested with an NVidia Quadro gfx).</span></div>\n\
<div class=\"line\">    result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#elif defined(__linux__)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// On Linux, using vertex arrays is 2 times faster than using</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a temporary VBO. (Tested with an NVidia Quadro gfx).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Unfortunately, the NVidia driver seems to have a bug where</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// drawing using vertex arrays causes memory corruption. So,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// this can&#39;t be used reliably on Quadro cards...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (BTW, this has never been tested on a Linux machine with an</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// NVidia GeForce or an ATI graphic card so, using temporary</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// VBOs might not necessarily be the best option on these</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// platforms!)</span></div>\n\
<div class=\"line\">    result = !VramQuery::isQuadro();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else        </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// On MacOS, using vertex arrays is 3 times faster than using</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a temporary VBO. (Tested with an AMD Radeon HD 6770M).</span></div>\n\
<div class=\"line\">    result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getUseVertexArrayForGLPickingDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef __APPLE__</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Do not use VBO in conjunction with GL picking on Mac. When</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// profiling on Mac OS X 10.7.2 / NVidia GT330M, we have found</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// out that using VBO is 20X (i.e. 2000%) slower than simply</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// using Vertex Arrays....</span></div>\n\
<div class=\"line\">    result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getUseGLPrimitivesInsteadOfVADefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (VramQuery::isQuadro() ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// For some reason, using vertex arrays on Windows/nVidia</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Quadro gfx leads to memory corruption. Using primitive</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// OpenGL calls instead as a workaround.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// nVidia has fixed the memory corruption bug in 295.65</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> driverVersion[3] = {0};</div>\n\
<div class=\"line\">        VramQuery::driverVersion(driverVersion);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (driverVersion[0] &lt; 295 || </div>\n\
<div class=\"line\">                (driverVersion[0] == 295 &amp;&amp; driverVersion[1] &lt; 65)) {</div>\n\
<div class=\"line\">            result = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getEmulateTwoSidedLightingDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// check Geforce graphics cards on windows</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">    result = VramQuery::isGeforce();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SELECTION METHODS EVs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The environment variables listed below are used to control the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// method used to perform a given selection.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Below the given threshold value, we use OpenGL picking. Above this</span></div>\n\
<div class=\"line\"><span class=\"comment\">// value, we use either raster-based picking or CPU-based picking,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// because these methods are faster for large objects. The threshold</span></div>\n\
<div class=\"line\"><span class=\"comment\">// value is respectively expressed in terms number of vertices, edges</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or triangles per object. There are different threshold value for</span></div>\n\
<div class=\"line\"><span class=\"comment\">// kSurfaceSelectMethod and kWireframeSelectMethod.  A negative value</span></div>\n\
<div class=\"line\"><span class=\"comment\">// means to always use OpenGL picking. A zero value means to never use</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OpenGL picking.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getOpenGLPickingWireframeThresholdDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef __APPLE__</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// On Mac, OpenGL picking seems to be hardware accelerated since</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// it is always faster than raster-based picking.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> defVal = std::numeric_limits&lt;int&gt;::max();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else    </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> defVal = 128;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> defVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getOpenGLPickingSurfaceThresholdDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef __APPLE__</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// On Mac, OpenGL picking seems to be hardware accelerated since</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// it is always faster than raster-based picking.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> defVal = std::numeric_limits&lt;int&gt;::max();</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else    </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> defVal = 1024;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> defVal;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getBackgroundReadingDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getBackgroundReadingRefreshDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1000;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getUseHardwareInstancingDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> getHardwareInstancingThresholdDefault()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 2;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS Config</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> Config::kDefaultGrayColor = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.5f, 0.5f, 0.5f) * 0.8f;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> Config::kDefaultTransparency = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.0f, 0.0f, 0.0f);</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> Config::kLineStippleShortDashed = 0x0303;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> Config::kLineStippleDotted = 0x0101;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> Config::kDisplayFilter = <span class=\"stringliteral\">&quot;gpuCacheDisplayFilter&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sInitialized = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultMaxVBOSize;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultMaxVBOCount;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultMinVertsForVBOs;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sDefaultUseVertexArrayWhenVRAMIsLow;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sDefaultUseVertexArrayForGLPicking;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultOpenGLPickingWireframeThreshold;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultOpenGLPickingSurfaceThreshold;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sDefaultUseGLPrimitivesInsteadOfVA;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sDefaultEmulateTwoSidedLighting;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sDefaultIsIgnoringUVs;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultVP2OverrideAPI;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sDefaultBackgroundReading;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultBackgroundReadingRefresh;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sDefaultUseHardwareInstancing;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sDefaultHardwareInstancingThreshold;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sMaxVBOSize;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sMaxVBOCount;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sMinVertsForVBOs;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sUseVertexArrayWhenVRAMIsLow;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sUseVertexArrayForGLPicking;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sOpenGLPickingWireframeThreshold;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sOpenGLPickingSurfaceThreshold;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sUseGLPrimitivesInsteadOfVA;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sEmulateTwoSidedLighting;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sIsIgnoringUVs;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sVP2OverrideAPI;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sBackgroundReading;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sBackgroundReadingRefresh;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>   Config::sUseHardwareInstancing;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::sHardwareInstancingThreshold;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kGPUCacheCategory = <span class=\"stringliteral\">&quot;Cache.GPU Cache&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> syncIntOptionVar(<span class=\"keywordtype\">bool</span> automatic, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * autoOptVar, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * valueOptVar, <span class=\"keywordtype\">size_t</span> defaultValue, <span class=\"keywordtype\">size_t</span>&amp; dest, <span class=\"keywordtype\">int</span> multiplier=1)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> existAuto = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> autoValue = <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(autoOptVar, &amp;existAuto);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !automatic &amp;&amp; existAuto &amp;&amp; autoValue == 0 ) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> exist = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> value = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(valueOptVar, &amp;exist);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (exist) {</div>\n\
<div class=\"line\">            dest = value * multiplier;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            dest = defaultValue;</div>\n\
<div class=\"line\">            <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac4846b16993246fd74b83d1d5b9b6a9f\">MGlobal::setOptionVarValue</a>(valueOptVar, static_cast&lt;int&gt;(defaultValue/multiplier));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        dest = defaultValue;</div>\n\
<div class=\"line\">        <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3a7fada7c5a6d02bcd547ba7efa4fe03\">MGlobal::initOptionVar</a>(autoOptVar, 1, kGPUCacheCategory);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3a7fada7c5a6d02bcd547ba7efa4fe03\">MGlobal::initOptionVar</a>(valueOptVar, static_cast&lt;int&gt;(defaultValue/multiplier), kGPUCacheCategory);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> syncBoolOptionVar(<span class=\"keywordtype\">bool</span> automatic, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * autoOptVar, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * valueOptVar, <span class=\"keywordtype\">bool</span> defaultValue, <span class=\"keywordtype\">bool</span>&amp; dest, <span class=\"keywordtype\">bool</span> valueToCompare)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> existAuto = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> autoValue = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(autoOptVar, &amp;existAuto);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !automatic &amp;&amp; existAuto &amp;&amp; autoValue == 0 ){</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> exist = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> value = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(valueOptVar, &amp;exist);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (exist) {</div>\n\
<div class=\"line\">            dest = (<span class=\"keyword\">static_cast&lt;</span><span class=\"keywordtype\">bool</span><span class=\"keyword\">&gt;</span>(value) == valueToCompare);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            dest = defaultValue;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac4846b16993246fd74b83d1d5b9b6a9f\">MGlobal::setOptionVarValue</a>(valueOptVar, defaultValue ? 1 : 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        dest = defaultValue;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3a7fada7c5a6d02bcd547ba7efa4fe03\">MGlobal::initOptionVar</a>(autoOptVar, 1, kGPUCacheCategory);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3a7fada7c5a6d02bcd547ba7efa4fe03\">MGlobal::initOptionVar</a>(valueOptVar, defaultValue ? 1 : 0, kGPUCacheCategory);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> syncBoolOptionVar(<span class=\"keywordtype\">bool</span> automatic, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * autoOptVar, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * valueOptVar, <span class=\"keywordtype\">bool</span> defaultValue, <span class=\"keywordtype\">bool</span>&amp; dest, <span class=\"keywordtype\">int</span> valueToCompare)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> existAuto = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> autoValue = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(autoOptVar, &amp;existAuto);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// convert defaultInt to radiobox enum.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> defaultInt = (valueToCompare==1 ? (defaultValue ? 1 : 2) : (defaultValue ? 2 : 1) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !automatic &amp;&amp; existAuto &amp;&amp; autoValue == 0 ){</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> exist = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> value = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(valueOptVar, &amp;exist);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (exist) {</div>\n\
<div class=\"line\">            dest = (value == valueToCompare);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            dest = defaultValue;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac4846b16993246fd74b83d1d5b9b6a9f\">MGlobal::setOptionVarValue</a>(valueOptVar, defaultInt);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        dest = defaultValue;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3a7fada7c5a6d02bcd547ba7efa4fe03\">MGlobal::initOptionVar</a>(autoOptVar, 1, kGPUCacheCategory);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3a7fada7c5a6d02bcd547ba7efa4fe03\">MGlobal::initOptionVar</a>(valueOptVar, defaultInt, kGPUCacheCategory);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Config::VP2OverrideAPI Config::vp2OverrideAPI()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Once initialized, we save the API choice to this local static variable.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The return value of vp2OverrideAPI() should be the same regardless of </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the user preference until the plug-in is unloaded.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> initialized = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> VP2OverrideAPI sCurrentVP2OverrideAPI = kMPxSubSceneOverride;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This must be initialized separately with other config variables</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// because vp2OverrideAPI() is called on plugin load.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!initialized) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Initialize the current and default values</span></div>\n\
<div class=\"line\">        sVP2OverrideAPI = sDefaultVP2OverrideAPI = getVP2OverrideAPIDefault();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// If there is no pref or &#39;automatic&#39; is chosen</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> existAllAuto = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> allAutoValue = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(<span class=\"stringliteral\">&quot;gpuCacheAllAuto&quot;</span>, &amp;existAllAuto);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> automatic = !existAllAuto || allAutoValue == 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Sync with option var (read user pref)</span></div>\n\
<div class=\"line\">        syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheVP2OverrideAPIAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheVP2OverrideAPI&quot;</span>, sDefaultVP2OverrideAPI, sVP2OverrideAPI);</div>\n\
<div class=\"line\">        sCurrentVP2OverrideAPI = (Config::VP2OverrideAPI)sVP2OverrideAPI;</div>\n\
<div class=\"line\">        initialized = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sCurrentVP2OverrideAPI;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Config::isIgnoringUVs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sIsIgnoringUVs;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::minVertsForVBOs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sMinVertsForVBOs;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::maxVBOCount()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sMaxVBOCount;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::maxVBOSize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sMaxVBOSize;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Config::useVertexArrayWhenVRAMIsLow()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sUseVertexArrayWhenVRAMIsLow;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Config::useVertexArrayForGLPicking()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sUseVertexArrayForGLPicking;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Config::useGLPrimitivesInsteadOfVA()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sUseGLPrimitivesInsteadOfVA;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Config::emulateTwoSidedLighting()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sEmulateTwoSidedLighting;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::openGLPickingWireframeThreshold()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sOpenGLPickingWireframeThreshold;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::openGLPickingSurfaceThreshold()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sOpenGLPickingSurfaceThreshold;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Config::backgroundReading()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sBackgroundReading;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::backgroundReadingRefresh()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sBackgroundReadingRefresh;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> Config::useHardwareInstancing()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sUseHardwareInstancing;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">size_t</span> Config::hardwareInstancingThreshold()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    initialize();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sHardwareInstancingThreshold;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Config::refresh()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!sInitialized) {</div>\n\
<div class=\"line\">        initialize();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;  <span class=\"comment\">// refresh() is called in initialize()</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> existAllAuto = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> allAutoValue = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a7b35236b639518320b2885b4fd673bab\">MGlobal::optionVarIntValue</a>(<span class=\"stringliteral\">&quot;gpuCacheAllAuto&quot;</span>, &amp;existAllAuto);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!existAllAuto) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3a7fada7c5a6d02bcd547ba7efa4fe03\">MGlobal::initOptionVar</a>(<span class=\"stringliteral\">&quot;gpuCacheAllAuto&quot;</span>, 1, kGPUCacheCategory);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> automatic = !existAllAuto || allAutoValue == 1;</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheMaxVramAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheMaxVram&quot;</span>, sDefaultMaxVBOSize, sMaxVBOSize, 1024*1024);</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheMaxNumOfBuffersAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheMaxNumOfBuffers&quot;</span>, sDefaultMaxVBOCount, sMaxVBOCount);</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheMinVerticesPerShapeAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheMinVerticesPerShape&quot;</span>, sDefaultMinVertsForVBOs, sMinVertsForVBOs);</div>\n\
<div class=\"line\">    syncBoolOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheLowVramOperationAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheLowMemMode&quot;</span>, sDefaultUseVertexArrayWhenVRAMIsLow, sUseVertexArrayWhenVRAMIsLow, 2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syncBoolOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheGlSelectionModeAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheGlSelectionMode&quot;</span>, sDefaultUseVertexArrayForGLPicking, sUseVertexArrayForGLPicking, 1);</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheSelectionWireThresholdAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheSelectionWireThreshold&quot;</span>, sDefaultOpenGLPickingWireframeThreshold, sOpenGLPickingWireframeThreshold);</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheSelectionSurfaceThresholdAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheSelectionSurfaceThreshold&quot;</span>, sDefaultOpenGLPickingSurfaceThreshold, sOpenGLPickingSurfaceThreshold);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    syncBoolOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheDisableVertexArraysAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheUseVertexArrays&quot;</span>, sDefaultUseGLPrimitivesInsteadOfVA, sUseGLPrimitivesInsteadOfVA, 2);</div>\n\
<div class=\"line\">    syncBoolOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheTwoSidedLightingAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheTwoSidedLightingMode&quot;</span>, sDefaultEmulateTwoSidedLighting, sEmulateTwoSidedLighting, 2);</div>\n\
<div class=\"line\">    syncBoolOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheUvCoordinatesAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheIgnoreUv&quot;</span>, sDefaultIsIgnoringUVs, sIsIgnoringUVs, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheVP2OverrideAPIAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheVP2OverrideAPI&quot;</span>, sDefaultVP2OverrideAPI, sVP2OverrideAPI);</div>\n\
<div class=\"line\">    syncBoolOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheBackgroundReadingAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheBackgroundReading&quot;</span>, sDefaultBackgroundReading, sBackgroundReading, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheBackgroundReadingRefreshAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheBackgroundReadingRefresh&quot;</span>, sDefaultBackgroundReadingRefresh, sBackgroundReadingRefresh);</div>\n\
<div class=\"line\">    syncBoolOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheUseHardwareInsancingAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheUseHardwareInstancing&quot;</span>, sDefaultUseHardwareInstancing, sUseHardwareInstancing, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    syncIntOptionVar(automatic, <span class=\"stringliteral\">&quot;gpuCacheHardwareInstancingThresholdAuto&quot;</span>, <span class=\"stringliteral\">&quot;gpuCacheHardwareInstancingThreshold&quot;</span>, sDefaultHardwareInstancingThreshold, sHardwareInstancingThreshold);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Config::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize once on demand</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!sInitialized) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Initialize the default values</span></div>\n\
<div class=\"line\">        sDefaultMaxVBOSize                      = getMaxVBOSizeDefault();</div>\n\
<div class=\"line\">        sDefaultMaxVBOCount                     = getMaxVBOCountDefault();</div>\n\
<div class=\"line\">        sDefaultMinVertsForVBOs                 = getMinVertsForVBOsDefault();</div>\n\
<div class=\"line\">        sDefaultUseVertexArrayWhenVRAMIsLow     = getUseVertexArrayWhenVRAMIsLowDefault();</div>\n\
<div class=\"line\">        sDefaultUseVertexArrayForGLPicking      = getUseVertexArrayForGLPickingDefault();</div>\n\
<div class=\"line\">        sDefaultOpenGLPickingWireframeThreshold = getOpenGLPickingWireframeThresholdDefault();</div>\n\
<div class=\"line\">        sDefaultOpenGLPickingSurfaceThreshold   = getOpenGLPickingSurfaceThresholdDefault();</div>\n\
<div class=\"line\">        sDefaultUseGLPrimitivesInsteadOfVA      = getUseGLPrimitivesInsteadOfVADefault();</div>\n\
<div class=\"line\">        sDefaultEmulateTwoSidedLighting         = getEmulateTwoSidedLightingDefault();</div>\n\
<div class=\"line\">        sDefaultIsIgnoringUVs                   = getIgnoreUVsDefault();</div>\n\
<div class=\"line\">        sDefaultBackgroundReading               = getBackgroundReadingDefault();</div>\n\
<div class=\"line\">        sDefaultBackgroundReadingRefresh        = getBackgroundReadingRefreshDefault();</div>\n\
<div class=\"line\">        sDefaultUseHardwareInstancing           = getUseHardwareInstancingDefault();</div>\n\
<div class=\"line\">        sDefaultHardwareInstancingThreshold     = getHardwareInstancingThresholdDefault();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Initialize current values with default values</span></div>\n\
<div class=\"line\">        sMaxVBOSize                      = sDefaultMaxVBOSize;</div>\n\
<div class=\"line\">        sMaxVBOCount                     = sDefaultMaxVBOCount;</div>\n\
<div class=\"line\">        sMinVertsForVBOs                 = sDefaultMinVertsForVBOs;</div>\n\
<div class=\"line\">        sUseVertexArrayWhenVRAMIsLow     = sDefaultUseVertexArrayWhenVRAMIsLow;</div>\n\
<div class=\"line\">        sUseVertexArrayForGLPicking      = sDefaultUseVertexArrayForGLPicking;</div>\n\
<div class=\"line\">        sOpenGLPickingWireframeThreshold = sDefaultOpenGLPickingWireframeThreshold;</div>\n\
<div class=\"line\">        sOpenGLPickingSurfaceThreshold   = sDefaultOpenGLPickingSurfaceThreshold;</div>\n\
<div class=\"line\">        sUseGLPrimitivesInsteadOfVA      = sDefaultUseGLPrimitivesInsteadOfVA;</div>\n\
<div class=\"line\">        sEmulateTwoSidedLighting         = sDefaultEmulateTwoSidedLighting;</div>\n\
<div class=\"line\">        sIsIgnoringUVs                   = sDefaultIsIgnoringUVs;</div>\n\
<div class=\"line\">        sBackgroundReading               = sDefaultBackgroundReading;</div>\n\
<div class=\"line\">        sBackgroundReadingRefresh        = sDefaultBackgroundReadingRefresh;</div>\n\
<div class=\"line\">        sUseHardwareInstancing           = sDefaultUseHardwareInstancing;</div>\n\
<div class=\"line\">        sHardwareInstancingThreshold     = sDefaultHardwareInstancingThreshold;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        sInitialized = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"comment\">// Sync with option vars</span></div>\n\
<div class=\"line\">        refresh();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Emit a warning if the graphics driver has known issues.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Quadro driver interferes with ReadFile function. (MAYA-32563)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (VramQuery::isQuadro()) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> driverVersion[3] = {0};</div>\n\
<div class=\"line\">            VramQuery::driverVersion(driverVersion);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (driverVersion[0] != 0 &amp;&amp; getenv(<span class=\"stringliteral\">&quot;MAYA_GPUCACHE_WORKAROUND_QUADRO_PAGE_READONLY&quot;</span>) == NULL &amp;&amp;</div>\n\
<div class=\"line\">                (driverVersion[0] &lt; 332 ||</div>\n\
<div class=\"line\">                    (driverVersion[0] == 332 &amp;&amp; driverVersion[1] &lt; 50))) {</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;The graphics driver (%d.%d.%d) has known issues and might not work properly with gpuCache.\\n&quot;</span>,</div>\n\
<div class=\"line\">                    driverVersion[0], driverVersion[1], driverVersion[2]);</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;Please upgrade the graphics driver to the latest version. (&gt; 332.50)\\n&quot;</span>);</div>\n\
<div class=\"line\">                printf(<span class=\"stringliteral\">&quot;Otherwise, set MAYA_GPUCACHE_WORKAROUND_QUADRO_PAGE_READONLY env if the driver has to be kept.\\n&quot;</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";