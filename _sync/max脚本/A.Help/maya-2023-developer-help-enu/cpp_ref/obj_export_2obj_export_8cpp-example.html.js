var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: objExport/objExport.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'obj_export_2obj_export_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: objExport/objExport.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">objExport/objExport.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2020 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sys/types.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStatus.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPathArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSet.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshPolygon.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshVertex.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshEdge.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVectorArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxFileTranslator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDistance.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined  (__APPLE__)</span></div>\n\
<div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"stringliteral\">&quot;C&quot;</span> Boolean createMacFile (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *fileName, FSRef *fsRef, <span class=\"keywordtype\">long</span> creator, <span class=\"keywordtype\">long</span> type);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define NO_SMOOTHING_GROUP      -1</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define INITIALIZE_SMOOTHING    -2</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define INVALID_ID              -1</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Edge info structure</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>EdgeInfo {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                 polyIds[2]; <span class=\"comment\">// Id&#39;s of polygons that reference edge</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                 vertId;     <span class=\"comment\">// The second vertex of this edge</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>EdgeInfo *   next;       <span class=\"comment\">// Pointer to next edge</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                smooth;     <span class=\"comment\">// Is this edge smooth</span></div>\n\
<div class=\"line\">} * EdgeInfoPtr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>ObjTranslator : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html\">MPxFileTranslator</a> {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">                    ObjTranslator () {};</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span>         ~ObjTranslator () {};</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>*    creator();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#ab66b1f5adee9fb511e49f5f6730a7c42\">reader</a> ( <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                             <span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; optionsString,</div>\n\
<div class=\"line\">                             FileAccessMode mode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a7d2e676fd6823e199ba4fe1da95098ac\">writer</a> ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                             <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; optionsString,</div>\n\
<div class=\"line\">                             FileAccessMode mode );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a5bdde07c444bcc490367efe4f3424ade\">haveReadMethod</a> () <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#ab58322cfe1d3437d3fc627be3a49121c\">haveWriteMethod</a> () <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a48074cfa41f4caf87bfa0bc533ea6f25\">defaultExtension</a> () <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    MFileKind       <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a109c18b551ef7c162399326799ab67e6\">identifyFile</a> ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; fileName,</div>\n\
<div class=\"line\">                                   <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer,</div>\n\
<div class=\"line\">                                   <span class=\"keywordtype\">short</span> size) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            outputSetsAndGroups    ( <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp;, <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">bool</span>, <span class=\"keywordtype\">int</span> );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         OutputPolygons( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp;, <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         exportSelected();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         exportAll();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            initializeSetsAndLookupTables( <span class=\"keywordtype\">bool</span> exportAll );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            freeLookupTables();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            lookup( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp;, <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">bool</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            setToLongUnitName( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49ed\">MDistance::Unit</a>&amp;, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            recFindTransformDAGNodes( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp;, <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Edge lookup methods</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            buildEdgeTable( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            addEdgeInfo( <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">bool</span> );</div>\n\
<div class=\"line\">    EdgeInfoPtr     findEdgeInfo( <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">int</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>            destroyEdgeTable();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            smoothingAlgorithm( <span class=\"keywordtype\">int</span>, <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// counters</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> v,vt,vn;</div>\n\
<div class=\"line\">    <span class=\"comment\">// offsets</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> voff,vtoff,vnoff;</div>\n\
<div class=\"line\">    <span class=\"comment\">// options</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> groups, ptgroups, materials, smoothing, normals;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FILE *fp;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Keeps track of all sets.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numSets;</div>\n\
<div class=\"line\">    <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> *sets;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Keeps track of all objects and components.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The Tables are used to mark which sets each </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// component belongs to.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> *objectNames;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> **polygonTablePtr;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> **vertexTablePtr;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> * polygonTable;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> * vertexTable;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> **objectGroupsTablePtr;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Used to determine if the last set(s) written out are the same</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// as the current sets to be written. We don&#39;t need to write out</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// sets unless they change between components. Same goes for</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// materials.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> *lastSets;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> *lastMaterials;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// We have to do 2 dag iterations so keep track of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// objects found in the first iteration by this index.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> objectId;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> objectCount;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Edge lookup table (by vertex id) and smoothing group info</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    EdgeInfoPtr *   edgeTable;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> *           polySmoothingGroups;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             edgeTableSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             nextSmoothingGroup;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             currSmoothingGroup;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            newSmoothingGroup;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// List of names of the mesh shapes that we export from maya</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    objectNodeNamesArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Used to keep track of Maya groups (transform DAG nodes) that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// contain objects being exported</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    transformNodeNameArray;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<span class=\"keyword\">const</span> objOptionScript = <span class=\"stringliteral\">&quot;objExportOptions&quot;</span>;</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<span class=\"keyword\">const</span> objDefaultOptions =</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;groups=1;&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;ptgroups=1;&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;materials=1;&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;smoothing=1;&quot;</span></div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;normals=1;&quot;</span></div>\n\
<div class=\"line\">    ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* ObjTranslator::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> ObjTranslator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ObjTranslator::reader ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                                FileAccessMode mode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fprintf(stderr, <span class=\"stringliteral\">&quot;ObjTranslator::reader called in error\\n&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ObjTranslator::writer ( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; options,</div>\n\
<div class=\"line\">                                FileAccessMode mode )</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mname = file.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>(), unitName;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *fname = mname.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    fp = fopen(fname,<span class=\"stringliteral\">&quot;w&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fp == NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error: The file &quot;</span> &lt;&lt; fname &lt;&lt; <span class=\"stringliteral\">&quot; could not be opened for writing.&quot;</span> &lt;&lt; endl;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Options</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    groups      = <span class=\"keyword\">true</span>; <span class=\"comment\">// write out facet groups</span></div>\n\
<div class=\"line\">    ptgroups    = <span class=\"keyword\">true</span>; <span class=\"comment\">// write out vertex groups</span></div>\n\
<div class=\"line\">    materials   = <span class=\"keyword\">true</span>; <span class=\"comment\">// write out shading groups</span></div>\n\
<div class=\"line\">    smoothing   = <span class=\"keyword\">true</span>; <span class=\"comment\">// write out facet smoothing information</span></div>\n\
<div class=\"line\">    normals     = <span class=\"keyword\">true</span>; <span class=\"comment\">// write out normal table and facet normals</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">  <span class=\"keywordflow\">if</span> (options.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> i, length;</div>\n\
<div class=\"line\">        <span class=\"comment\">// Start parsing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> optionList;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> theOption;</div>\n\
<div class=\"line\">        options.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;;&#39;</span>, optionList); <span class=\"comment\">// break out all the options.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        length = optionList.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i = 0; i &lt; length; ++i ){</div>\n\
<div class=\"line\">            theOption.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">            optionList[i].split( <span class=\"charliteral\">&#39;=&#39;</span>, theOption );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( theOption[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;groups&quot;</span>) &amp;&amp;</div>\n\
<div class=\"line\">                                                    theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1 ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( theOption[1].asInt() &gt; 0 ){</div>\n\
<div class=\"line\">                    groups = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }<span class=\"keywordflow\">else</span>{</div>\n\
<div class=\"line\">                    groups = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( theOption[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;materials&quot;</span>) &amp;&amp;</div>\n\
<div class=\"line\">                                                    theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1 ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( theOption[1].asInt() &gt; 0 ){</div>\n\
<div class=\"line\">                    materials = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }<span class=\"keywordflow\">else</span>{</div>\n\
<div class=\"line\">                    materials = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( theOption[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;ptgroups&quot;</span>) &amp;&amp;</div>\n\
<div class=\"line\">                                                    theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1 ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( theOption[1].asInt() &gt; 0 ){</div>\n\
<div class=\"line\">                    ptgroups = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }<span class=\"keywordflow\">else</span>{</div>\n\
<div class=\"line\">                    ptgroups = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( theOption[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;normals&quot;</span>) &amp;&amp;</div>\n\
<div class=\"line\">                                                    theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1 ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( theOption[1].asInt() &gt; 0 ){</div>\n\
<div class=\"line\">                    normals = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }<span class=\"keywordflow\">else</span>{</div>\n\
<div class=\"line\">                    normals = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( theOption[0] == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;smoothing&quot;</span>) &amp;&amp;</div>\n\
<div class=\"line\">                                                    theOption.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 1 ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( theOption[1].asInt() &gt; 0 ){</div>\n\
<div class=\"line\">                    smoothing = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }<span class=\"keywordflow\">else</span>{</div>\n\
<div class=\"line\">                    smoothing = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/* print current linear units used as a comment in the obj file */</span></div>\n\
<div class=\"line\">    setToLongUnitName(<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#ad7868b7deab93de1213d816364e634cc\">MDistance::uiUnit</a>(), unitName);</div>\n\
<div class=\"line\">    <span class=\"comment\">//fprintf( fp, &quot;# This file uses %s as units for non-parametric coordinates.\\n\\n&quot;, unitName.asChar() ); </span></div>\n\
<div class=\"line\">    fprintf( fp, <span class=\"stringliteral\">&quot;# The units used in this file are %s.\\n&quot;</span>, unitName.asChar() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( ( mode == <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417a2b6cc89b2e3d91b69ec9af440ef0bc94\">MPxFileTranslator::kExportAccessMode</a> ) ||</div>\n\
<div class=\"line\">        ( mode == <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417a64282dfea3d1ae99cd9c8220dfa5d0a7\">MPxFileTranslator::kSaveAccessMode</a> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        exportAll();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( mode == <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a248681daa33e11b68c934862cfe49417ab8316a826501eb9bae9132346b5db59f\">MPxFileTranslator::kExportActiveAccessMode</a> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        exportSelected();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fclose(fp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::setToLongUnitName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49ed\">MDistance::Unit</a> &amp;unit, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; unitName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( unit ) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda30a33c2e169c9e6115692eda1c173f30\">MDistance::kInches</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;inches&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49edaedebe6dc6efd5df379da89064414ac43\">MDistance::kFeet</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;feet&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49edaf2f6037d43bc87078b310f919b832330\">MDistance::kYards</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;yards&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49edab1c96b8257a6332e1506915a34d8a47f\">MDistance::kMiles</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;miles&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda86e73f520eca40e3e3d4a08a43ddbffb\">MDistance::kMillimeters</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;millimeters&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda0603f671fbadde0729a2e79a80fb9a0e\">MDistance::kCentimeters</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;centimeters&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49edadc4fd556c40d608a34d8c2246ad6e4a5\">MDistance::kKilometers</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;kilometers&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49eda803a162c123bbe61a9d63d7f406e2b7c\">MDistance::kMeters</a>:</div>\n\
<div class=\"line\">        unitName = <span class=\"stringliteral\">&quot;meters&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> ObjTranslator::haveReadMethod ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> ObjTranslator::haveWriteMethod ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ObjTranslator::defaultExtension ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;obj&quot;</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a8966f27c569f8ef7182b63f0a66e79dd\">MPxFileTranslator::MFileKind</a> ObjTranslator::identifyFile (</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; fileName,</div>\n\
<div class=\"line\">                                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* buffer,</div>\n\
<div class=\"line\">                                        <span class=\"keywordtype\">short</span> size)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * name = fileName.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a614484d9028d9d09418b5e337c39b7a0\">resolvedName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>   nameLength = strlen(name);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((nameLength &gt; 4) &amp;&amp; !strcasecmp(name+nameLength-4, <span class=\"stringliteral\">&quot;.obj&quot;</span>))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> kCouldBeMyFileType;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> kNotMyFileType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register the translator with the system</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> plugin.registerFileTranslator( <span class=\"stringliteral\">&quot;OBJexport&quot;</span>, <span class=\"stringliteral\">&quot;none&quot;</span>,</div>\n\
<div class=\"line\">                                          ObjTranslator::creator,</div>\n\
<div class=\"line\">                                          (<span class=\"keywordtype\">char</span> *)objOptionScript,</div>\n\
<div class=\"line\">                                          (<span class=\"keywordtype\">char</span> *)objDefaultOptions );                                        </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> plugin.deregisterFileTranslator( <span class=\"stringliteral\">&quot;OBJexport&quot;</span> );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ObjTranslator::OutputPolygons( </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; mdagPath,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;  mComponent</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8\">MSpace::Space</a> space = <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh( mdagPath, &amp;stat );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat) {</div>\n\
<div class=\"line\">        fprintf(stderr,<span class=\"stringliteral\">&quot;Failure in MFnMesh initialization.\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_polygon.html\">MItMeshPolygon</a> polyIter( mdagPath, mComponent, &amp;stat );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat) {</div>\n\
<div class=\"line\">        fprintf(stderr,<span class=\"stringliteral\">&quot;Failure in MItMeshPolygon initialization.\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_vertex.html\">MItMeshVertex</a> vtxIter( mdagPath, mComponent, &amp;stat );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat) {</div>\n\
<div class=\"line\">        fprintf(stderr,<span class=\"stringliteral\">&quot;Failure in MItMeshVertex initialization.\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> objectIdx = -1, length;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> mdagPathNodeName = fnMesh.name();</div>\n\
<div class=\"line\">    <span class=\"comment\">// Find i such that objectGroupsTablePtr[i] corresponds to the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// object node pointed to by mdagPath</span></div>\n\
<div class=\"line\">    length = objectNodeNamesArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( i=0; i&lt;length; i++ ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( objectNodeNamesArray[i] == mdagPathNodeName ) {</div>\n\
<div class=\"line\">            objectIdx = i;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the vertex table</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !vtxIter.isDone(); vtxIter.next() ) {</div>\n\
<div class=\"line\">        <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> p = vtxIter.position( space );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ptgroups &amp;&amp; groups &amp;&amp; (objectIdx &gt;= 0)) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> compIdx = vtxIter.index();</div>\n\
<div class=\"line\">            outputSetsAndGroups( mdagPath, compIdx, <span class=\"keyword\">true</span>, objectIdx );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// convert from internal units to the current ui units</span></div>\n\
<div class=\"line\">        p.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a5a5e192ecaaeee5f1703603298322676\">MDistance::internalToUI</a>(p.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>);</div>\n\
<div class=\"line\">        p.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a5a5e192ecaaeee5f1703603298322676\">MDistance::internalToUI</a>(p.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>);</div>\n\
<div class=\"line\">        p.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#a5a5e192ecaaeee5f1703603298322676\">MDistance::internalToUI</a>(p.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">        fprintf(fp,<span class=\"stringliteral\">&quot;v %f %f %f\\n&quot;</span>,p.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>,p.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>,p.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">        v++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the uv table</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html\">MFloatArray</a> uArray, vArray;</div>\n\
<div class=\"line\">    fnMesh.getUVs( uArray, vArray );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> uvLength = uArray.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> x=0; x&lt;uvLength; x++ ) {</div>\n\
<div class=\"line\">        fprintf(fp,<span class=\"stringliteral\">&quot;vt %f %f\\n&quot;</span>,uArray[x],vArray[x]);</div>\n\
<div class=\"line\">        vt++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the normal table</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( normals ) {</div>\n\
<div class=\"line\">        <a name=\"_a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector_array.html\">MFloatVectorArray</a> norms;</div>\n\
<div class=\"line\">        fnMesh.getNormals( norms, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> normsLength = norms.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> t=0; t&lt;normsLength; t++ ) {</div>\n\
<div class=\"line\">            <a name=\"_a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> tmpf = norms[t];</div>\n\
<div class=\"line\">            fprintf(fp,<span class=\"stringliteral\">&quot;vn %f %f %f\\n&quot;</span>,tmpf[0],tmpf[1],tmpf[2]);</div>\n\
<div class=\"line\">            vn++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For each polygon, write out: </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    s  smoothing_group</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    sets/groups the polygon belongs to </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//    f  vertex_index/uvIndex/normalIndex</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> lastSmoothingGroup = INITIALIZE_SMOOTHING;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !polyIter.isDone(); polyIter.next() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Write out the smoothing group that this polygon belongs to</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// We only write out the smoothing group if it is different</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// from the last polygon.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( smoothing ) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> compIdx = polyIter.index();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> smoothingGroup = polySmoothingGroups[ compIdx ];</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( lastSmoothingGroup != smoothingGroup ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( NO_SMOOTHING_GROUP == smoothingGroup ) {</div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;s off\\n&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;s %d\\n&quot;</span>, smoothingGroup );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                lastSmoothingGroup = smoothingGroup;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Write out all the sets that this polygon belongs to</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((groups || materials) &amp;&amp; (objectIdx &gt;= 0)) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> compIdx = polyIter.index();</div>\n\
<div class=\"line\">            outputSetsAndGroups( mdagPath, compIdx, <span class=\"keyword\">false</span>, objectIdx );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">        <span class=\"comment\">// Write out vertex/uv/normal index information</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        fprintf(fp,<span class=\"stringliteral\">&quot;f&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> polyVertexCount = polyIter.polygonVertexCount();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> vtx=0; vtx&lt;polyVertexCount; vtx++ ) {</div>\n\
<div class=\"line\">            fprintf(fp,<span class=\"stringliteral\">&quot; %d&quot;</span>, polyIter.vertexIndex( vtx ) +1 +voff);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> noUV = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( fnMesh.numUVs() &gt; 0 ) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> uvIndex;</div>\n\
<div class=\"line\">                <span class=\"comment\">// If the call to getUVIndex fails then there is no</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// mapping information for this polyon so we don&#39;t write</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// anything</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( polyIter.getUVIndex(vtx,uvIndex) ) {</div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;/%d&quot;</span>,uvIndex+1 +vtoff);</div>\n\
<div class=\"line\">                    noUV = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( (normals) &amp;&amp; (fnMesh.numNormals() &gt; 0) ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( noUV ) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// If there are no UVs then our polygon is written</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// in the form vertex//normal</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;/&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                fprintf(fp,<span class=\"stringliteral\">&quot;/%d&quot;</span>,polyIter.normalIndex( vtx ) +1 +vnoff);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        fprintf(fp,<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"comment\">// Do not do this ... it is not neccessary and is deadly on windows</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// see MAYA-17370 - Ming</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      fflush(fp);</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::outputSetsAndGroups( </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; mdagPath, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> cid,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isVertexIterator,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> objectIdx</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i, length;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> * currentSets = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> * currentMaterials = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> gArray, mArray;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (groups || materials) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i=0; i&lt;numSets; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( lookup(mdagPath,i,cid,isVertexIterator) ) {</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">                <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> fnSet( (*sets)[i] );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#a009e6a49ae66589e1bd624a5a8cf5044a272fb18bac9f899f8468ba90f18b09a2\">MFnSet::kRenderableOnly</a> == fnSet.restriction(&amp;stat) ) {</div>\n\
<div class=\"line\">                    currentMaterials-&gt;<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( i );</div>\n\
<div class=\"line\">                    mArray.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( fnSet.name() );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    currentSets-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( i );</div>\n\
<div class=\"line\">                    gArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( fnSet.name() );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( !isVertexIterator ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// export group nodes (transform DAG nodes) in Maya that</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// the current object is a</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// child/grandchild/grandgrandchild/... of</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> *objectGroupTable = objectGroupsTablePtr[objectIdx];</div>\n\
<div class=\"line\">            length = transformNodeNameArray.length();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( i=0; i&lt;length; i++ ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( objectGroupTable[i] ) {</div>\n\
<div class=\"line\">                    currentSets-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( numSets + i );</div>\n\
<div class=\"line\">                    gArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(transformNodeNameArray[i]);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// prevent grouping incoherence, use tav default group schema.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (0 == currentSets-&gt;<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            currentSets-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( 0 );</div>\n\
<div class=\"line\">            gArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <span class=\"stringliteral\">&quot;default&quot;</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">        <span class=\"comment\">// Test for equivalent sets</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> setsEqual = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( (lastSets != NULL) &amp;&amp; </div>\n\
<div class=\"line\">              (lastSets-&gt;length() == currentSets-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">        ) {</div>\n\
<div class=\"line\">            setsEqual = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            length = lastSets-&gt;length();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i=0; i&lt;length; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( (*lastSets)[i] != (*currentSets)[i] ) {</div>\n\
<div class=\"line\">                    setsEqual = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }   </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !setsEqual ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( lastSets != NULL )</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> lastSets;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            lastSets = currentSets;     </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (groups) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> gLength = gArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( gLength &gt; 0  ) {</div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;g&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> ( i=0; i&lt;gLength; i++ ) {</div>\n\
<div class=\"line\">                        fprintf(fp,<span class=\"stringliteral\">&quot; %s&quot;</span>,gArray[i].asChar());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> currentSets;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Test for equivalent materials</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> materialsEqual = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( (lastMaterials != NULL) &amp;&amp; </div>\n\
<div class=\"line\">              (lastMaterials-&gt;length() == currentMaterials-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">        ) {</div>\n\
<div class=\"line\">            materialsEqual = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            length = lastMaterials-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i=0; i&lt;length; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( (*lastMaterials)[i] != (*currentMaterials)[i] ) {</div>\n\
<div class=\"line\">                    materialsEqual = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }           </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !materialsEqual ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( lastMaterials != NULL )</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> lastMaterials;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            lastMaterials = currentMaterials;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (materials) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> mLength = mArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( mLength &gt; 0  ) {</div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;usemtl&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> ( i=0; i&lt;mLength; i++ ) {</div>\n\
<div class=\"line\">                        fprintf(fp,<span class=\"stringliteral\">&quot; %s&quot;</span>,mArray[i].asChar());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    fprintf(fp,<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> currentMaterials;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::initializeSetsAndLookupTables( <span class=\"keywordtype\">bool</span> exportAll )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description :</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    Creates a list of all sets in Maya, a list of mesh objects,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    and polygon/vertex lookup tables that will be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    determine which sets are referenced by the poly components.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i=0,j=0, length;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize class data.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note: we cannot do this in the constructor as it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// only gets called upon registry of the plug-in.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    numSets = 0;</div>\n\
<div class=\"line\">    sets = NULL;</div>\n\
<div class=\"line\">    lastSets = NULL;</div>\n\
<div class=\"line\">    lastMaterials = NULL;</div>\n\
<div class=\"line\">    objectId = 0;</div>\n\
<div class=\"line\">    objectCount = 0;</div>\n\
<div class=\"line\">    polygonTable = NULL;</div>\n\
<div class=\"line\">    vertexTable = NULL;</div>\n\
<div class=\"line\">    polygonTablePtr = NULL;</div>\n\
<div class=\"line\">    vertexTablePtr = NULL;</div>\n\
<div class=\"line\">    objectGroupsTablePtr = NULL;</div>\n\
<div class=\"line\">    objectNodeNamesArray.clear();</div>\n\
<div class=\"line\">    transformNodeNameArray.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find all sets in Maya and store the ones we care about in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the &#39;sets&#39; array. Also make note of the number of sets.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Get all of the sets in maya and put them into</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a selection list</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> result;</div>\n\
<div class=\"line\">    <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>( <span class=\"stringliteral\">&quot;ls -sets&quot;</span>, result );</div>\n\
<div class=\"line\">    <a name=\"_a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> * setList = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a>;</div>\n\
<div class=\"line\">    length = result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i=0; i&lt;length; i++ )</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">        setList-&gt;<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>( result[i] );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Extract each set as an MObject and add them to the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// sets array.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We may be excluding groups, matierials, or ptGroups</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// in which case we can ignore those sets. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> mset;</div>\n\
<div class=\"line\">    sets = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>();</div>\n\
<div class=\"line\">    length = setList-&gt;<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i=0; i&lt;length; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setList-&gt;<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a72d8cd9c78fd234dcf68cd2fb70bc432\">getDependNode</a>( i, mset );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> fnSet( mset, &amp;stat );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( stat ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html#a009e6a49ae66589e1bd624a5a8cf5044a272fb18bac9f899f8468ba90f18b09a2\">MFnSet::kRenderableOnly</a> == fnSet.restriction(&amp;stat) ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( materials ) {</div>\n\
<div class=\"line\">                    sets-&gt;append( mset );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( groups ) {</div>\n\
<div class=\"line\">                    sets-&gt;append( mset );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }   </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> setList;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    numSets = sets-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Do a dag-iteration and for every mesh found, create facet and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// vertex look-up tables. These tables will keep track of which</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// sets each component belongs to.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If exportAll is false then iterate over the activeSelection </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// list instead of the entire DAG.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// These arrays have a corrisponding entry in the name</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// stringArray.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexCounts;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> polygonCounts;    </div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( exportAll ) {</div>\n\
<div class=\"line\">        <a name=\"_a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIterator( <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a8ad4d0a286855b50181b12df48942291\">MItDag::kBreadthFirst</a>, <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat) {</div>\n\
<div class=\"line\">            fprintf(stderr,<span class=\"stringliteral\">&quot;Failure in DAG iterator setup.\\n&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        objectNames = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; !dagIterator.isDone(); dagIterator.next() ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">            stat = dagIterator.getPath( dagPath );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( stat ) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// skip over intermediate objects</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a name=\"_a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode( dagPath, &amp;stat );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dagNode.isIntermediateObject()) </div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (( dagPath.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)) &amp;&amp;</div>\n\
<div class=\"line\">                    ( dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We want only the shape, </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// not the transform-extended-to-shape.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We have a mesh so create a vertex and polygon table</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// for this object.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh( dagPath );</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> vtxCount = fnMesh.numVertices();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> polygonCount = fnMesh.numPolygons();</div>\n\
<div class=\"line\">                    <span class=\"comment\">// we do not need this call anymore, we have the shape.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// dagPath.extendToShape();</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = dagPath.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>();</div>\n\
<div class=\"line\">                    objectNames-&gt;append( name );</div>\n\
<div class=\"line\">                    objectNodeNamesArray.append( fnMesh.name() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    vertexCounts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( vtxCount );</div>\n\
<div class=\"line\">                    polygonCounts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( polygonCount );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    objectCount++;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }   </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> slist;</div>\n\
<div class=\"line\">        <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( slist );</div>\n\
<div class=\"line\">        <a name=\"_a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> iter( slist );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        objectNames = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We will need to interate over a selected node&#39;s heirarchy</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// in the case where shapes are grouped, and the group is selected.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIterator( <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a>, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; !iter.isDone(); iter.next() ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> objectPath;</div>\n\
<div class=\"line\">            stat = iter.getDagPath( objectPath );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// reset iterator&#39;s root node to be the selected node.</span></div>\n\
<div class=\"line\">            status = dagIterator.reset (objectPath.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), </div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// DAG iteration beginning at at selected node</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( ; !dagIterator.isDone(); dagIterator.next() )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  component = <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\">                status = dagIterator.getPath(dagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">                    fprintf(stderr,<span class=\"stringliteral\">&quot;Failure getting DAG path.\\n&quot;</span>);</div>\n\
<div class=\"line\">                    freeLookupTables();</div>\n\
<div class=\"line\">                    return ;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// skip over intermediate objects</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode( dagPath, &amp;stat );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dagNode.isIntermediateObject()) </div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (( dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)) &amp;&amp;</div>\n\
<div class=\"line\">                    ( dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We want only the shape, </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// not the transform-extended-to-shape.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We have a mesh so create a vertex and polygon table</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// for this object.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh( dagPath );</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> vtxCount = fnMesh.numVertices();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span> polygonCount = fnMesh.numPolygons();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// we do not need this call anymore, we have the shape.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// dagPath.extendToShape();</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a7cffb69661adc6ae7ac9e03c297caf01\">fullPathName</a>();</div>\n\
<div class=\"line\">                    objectNames-&gt;append( name );</div>\n\
<div class=\"line\">                    objectNodeNamesArray.append( fnMesh.name() );</div>\n\
<div class=\"line\">                                    </div>\n\
<div class=\"line\">                    vertexCounts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( vtxCount );</div>\n\
<div class=\"line\">                    polygonCounts.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>( polygonCount );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    objectCount++;  </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now we know how many objects we are dealing with </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and we have counts of the vertices/polygons for each</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// object so create the maya group look-up table.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( objectCount &gt; 0 ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// To export Maya groups we traverse the hierarchy starting at</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// each objectNodeNamesArray[i] going towards the root collecting transform</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// nodes as we go.</span></div>\n\
<div class=\"line\">        length = objectNodeNamesArray.length();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( i=0; i&lt;length; i++ ) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> transformNodeNameIndicesArray;</div>\n\
<div class=\"line\">            recFindTransformDAGNodes( objectNodeNamesArray[i], transformNodeNameIndicesArray );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( transformNodeNameArray.length() &gt; 0 ) {</div>\n\
<div class=\"line\">            objectGroupsTablePtr = (<span class=\"keywordtype\">bool</span>**) malloc( <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">bool</span>*)*objectCount );</div>\n\
<div class=\"line\">            length = transformNodeNameArray.length();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i=0; i&lt;objectCount; i++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                objectGroupsTablePtr[i] =</div>\n\
<div class=\"line\">                    (<span class=\"keywordtype\">bool</span>*)calloc( length, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">bool</span>) );  </div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( objectGroupsTablePtr[i] == NULL ) {</div>\n\
<div class=\"line\">                    cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error: calloc returned NULL (objectGroupsTablePtr)\\n&quot;</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the vertex/polygon look-up tables.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( objectCount &gt; 0 ) {</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        vertexTablePtr = (<span class=\"keywordtype\">bool</span>**) malloc( <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">bool</span>*)*objectCount );</div>\n\
<div class=\"line\">        polygonTablePtr = (<span class=\"keywordtype\">bool</span>**) malloc( <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">bool</span>*)*objectCount );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i=0; i&lt;objectCount; i++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            vertexTablePtr[i] =</div>\n\
<div class=\"line\">                 (<span class=\"keywordtype\">bool</span>*)calloc( vertexCounts[i]*numSets, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">bool</span>) );    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( vertexTablePtr[i] == NULL ) {</div>\n\
<div class=\"line\">                cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error: calloc returned NULL (vertexTable)\\n&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            polygonTablePtr[i] =</div>\n\
<div class=\"line\">                 (<span class=\"keywordtype\">bool</span>*)calloc( polygonCounts[i]*numSets, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">bool</span>) );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( polygonTablePtr[i] == NULL ) {</div>\n\
<div class=\"line\">                cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error: calloc returned NULL (polygonTable)\\n&quot;</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }   </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If we found no meshes then return</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( objectCount == 0 ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Go through all of the set members (flattened lists) and mark</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// in the lookup-tables, the sets that each mesh component belongs</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"keywordtype\">bool</span> flattenedList = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> object;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> component;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> memberList;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i=0; i&lt;numSets; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> fnSet( (*sets)[i] );     </div>\n\
<div class=\"line\">        memberList.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">        stat = fnSet.getMembers( memberList, flattenedList );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (MS::kSuccess != stat) {</div>\n\
<div class=\"line\">            fprintf(stderr,<span class=\"stringliteral\">&quot;Error in fnSet.getMembers()!\\n&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> m, numMembers;</div>\n\
<div class=\"line\">        numMembers = memberList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( m=0; m&lt;numMembers; m++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( memberList.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a16dda1a34d5f10be257d8421ac6deabd\">getDagPath</a>(m,<span class=\"keywordtype\">object</span>,component) ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( (!component.<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) &amp;&amp; (<span class=\"keywordtype\">object</span>.apiType() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>) )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (component.<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>() == <a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_vertex.html\">MItMeshVertex</a> viter( <span class=\"keywordtype\">object</span>, component );   </div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> ( ; !viter.isDone(); viter.next() )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> compIdx = viter.index();</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = <span class=\"keywordtype\">object</span>.fullPathName();</div>\n\
<div class=\"line\">                            </div>\n\
<div class=\"line\">                            <span class=\"comment\">// Figure out which object vertexTable</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// to get.</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> o, numObjectNames;</div>\n\
<div class=\"line\">                            numObjectNames = objectNames-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> ( o=0; o&lt;numObjectNames; o++ ) {</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> ( (*objectNames)[o] == name ) {</div>\n\
<div class=\"line\">                                    <span class=\"comment\">// Mark set i as true in the table</span></div>\n\
<div class=\"line\">                                    <span class=\"comment\">//      </span></div>\n\
<div class=\"line\">                                    vertexTable = vertexTablePtr[o];</div>\n\
<div class=\"line\">                                    *(vertexTable + numSets*compIdx + i) = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (component.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>() == <a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a5ddabf9726f89e07cff62014221fe6fb\">MFn::kMeshPolygonComponent</a>) </div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_polygon.html\">MItMeshPolygon</a> piter( <span class=\"keywordtype\">object</span>, component );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> ( ; !piter.isDone(); piter.next() )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> compIdx = piter.index();</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = <span class=\"keywordtype\">object</span>.fullPathName();</div>\n\
<div class=\"line\">                            </div>\n\
<div class=\"line\">                            <span class=\"comment\">// Figure out which object polygonTable</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">// to get.</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">//                          </span></div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> o, numObjectNames;</div>\n\
<div class=\"line\">                            numObjectNames = objectNames-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> ( o=0; o&lt;numObjectNames; o++ ) {</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">if</span> ( (*objectNames)[o] == name ) {</div>\n\
<div class=\"line\">                                    </div>\n\
<div class=\"line\">                                    <span class=\"comment\">// Mark set i as true in the table</span></div>\n\
<div class=\"line\">                                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Check for bad components in the set</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  </span></div>\n\
<div class=\"line\"><span class=\"keywordflow\">if</span> ( compIdx &gt;= polygonCounts[o] ) {</div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error: component in set &gt;= numPolygons, skipping!\\n&quot;</span>;</div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;  Component index    = &quot;</span> &lt;&lt; compIdx &lt;&lt; endl;</div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;  Number of polygons = &quot;</span> &lt;&lt; polygonCounts[o] &lt;&lt; endl;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">                                    </div>\n\
<div class=\"line\">                                    polygonTable = polygonTablePtr[o];</div>\n\
<div class=\"line\">                                    *(polygonTable + numSets*compIdx + i) = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\">                            }   </div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }                                       </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> { </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// There are no components, therefore we can mark</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// all polygons as members of the given set.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (<span class=\"keywordtype\">object</span>.hasFn(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh( <span class=\"keywordtype\">object</span>, &amp;stat );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat) {</div>\n\
<div class=\"line\">                        fprintf(stderr,<span class=\"stringliteral\">&quot;Failure in MFnMesh initialization.\\n&quot;</span>);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// We are going to iterate over all the polygons.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_polygon.html\">MItMeshPolygon</a> piter( <span class=\"keywordtype\">object</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;stat );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( MS::kSuccess != stat) {</div>\n\
<div class=\"line\">                        fprintf(stderr,</div>\n\
<div class=\"line\">                                <span class=\"stringliteral\">&quot;Failure in MItMeshPolygon initialization.\\n&quot;</span>);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> ( ; !piter.isDone(); piter.next() )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> compIdx = piter.index();</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = <span class=\"keywordtype\">object</span>.fullPathName();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Figure out which object polygonTable to get.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> o, numObjectNames;</div>\n\
<div class=\"line\">                        numObjectNames = objectNames-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> ( o=0; o&lt;numObjectNames; o++ ) {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> ( (*objectNames)[o] == name ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Check for bad components in the set</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordflow\">if</span> ( compIdx &gt;= polygonCounts[o] ) {</div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;Error: component in set &gt;= numPolygons, skipping!\\n&quot;</span>;</div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;  Component index    = &quot;</span> &lt;&lt; compIdx &lt;&lt; endl;</div>\n\
<div class=\"line\">    cerr &lt;&lt; <span class=\"stringliteral\">&quot;  Number of polygons = &quot;</span> &lt;&lt; polygonCounts[o] &lt;&lt; endl;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">                                <span class=\"comment\">// Mark set i as true in the table</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                                polygonTable = polygonTablePtr[o];</div>\n\
<div class=\"line\">                                *(polygonTable + numSets*compIdx + i) = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    } <span class=\"comment\">// end of piter.next() loop</span></div>\n\
<div class=\"line\">                } <span class=\"comment\">// end of condition if (object.hasFn(MFn::kMesh))</span></div>\n\
<div class=\"line\">                } <span class=\"comment\">// end of else condifion if (!component.isNull()) </span></div>\n\
<div class=\"line\">            } <span class=\"comment\">// end of memberList.getDagPath(m,object,component)</span></div>\n\
<div class=\"line\">        } <span class=\"comment\">// end of memberList loop</span></div>\n\
<div class=\"line\">    } <span class=\"comment\">// end of for-loop for sets</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Go through all of the group members and mark in the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// lookup-table, the group that each shape belongs to.</span></div>\n\
<div class=\"line\">    length = objectNodeNamesArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( i=0; i&lt;length; i++ ) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> groupTableIndicesArray;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> *objectGroupTable = objectGroupsTablePtr[i];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> length2;</div>\n\
<div class=\"line\">        recFindTransformDAGNodes( objectNodeNamesArray[i], groupTableIndicesArray );</div>\n\
<div class=\"line\">        length2 = groupTableIndicesArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>( j=0; j&lt;length2; j++ ) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> groupIdx = groupTableIndicesArray[j];</div>\n\
<div class=\"line\">            objectGroupTable[groupIdx] = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::freeLookupTables()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Frees up all tables and arrays allocated by this plug-in.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;objectCount; i++ ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( vertexTablePtr[i] != NULL ) {</div>\n\
<div class=\"line\">            free( vertexTablePtr[i] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( polygonTablePtr[i] != NULL ) {</div>\n\
<div class=\"line\">            free( polygonTablePtr[i] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( objectGroupsTablePtr != NULL ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt;objectCount; i++ ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( objectGroupsTablePtr[i] != NULL ) {</div>\n\
<div class=\"line\">                free( objectGroupsTablePtr[i] );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        free( objectGroupsTablePtr );</div>\n\
<div class=\"line\">        objectGroupsTablePtr = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( vertexTablePtr != NULL ) {</div>\n\
<div class=\"line\">        free( vertexTablePtr );</div>\n\
<div class=\"line\">        vertexTablePtr = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( polygonTablePtr != NULL ) {</div>\n\
<div class=\"line\">        free( polygonTablePtr );</div>\n\
<div class=\"line\">        polygonTablePtr = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( lastSets != NULL ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> lastSets;</div>\n\
<div class=\"line\">        lastSets = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( lastMaterials != NULL ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> lastMaterials;</div>\n\
<div class=\"line\">        lastMaterials = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( sets != NULL ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> sets;</div>\n\
<div class=\"line\">        sets = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( objectNames != NULL ) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> objectNames;</div>\n\
<div class=\"line\">        objectNames = NULL;</div>\n\
<div class=\"line\">    }       </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> ObjTranslator::lookup( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath, </div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> setIndex,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> compIdx,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">bool</span> isVtxIter )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isVtxIter) {</div>\n\
<div class=\"line\">        vertexTable = vertexTablePtr[objectId];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> ret = *(vertexTable + numSets*compIdx + setIndex);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>  {             </div>\n\
<div class=\"line\">        polygonTable = polygonTablePtr[objectId];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> ret = *(polygonTable + numSets*compIdx + setIndex);            </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::buildEdgeTable( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; mesh )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !smoothing )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Create our edge lookup table and initialize all entries to NULL</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh( mesh );</div>\n\
<div class=\"line\">    edgeTableSize = fnMesh.numVertices();</div>\n\
<div class=\"line\">    edgeTable = (EdgeInfoPtr*) calloc( edgeTableSize, <span class=\"keyword\">sizeof</span>(EdgeInfoPtr) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add entries, for each edge, to the lookup table</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_edge.html\">MItMeshEdge</a> eIt( mesh );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !eIt.isDone(); eIt.next() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> smooth = eIt.isSmooth();</div>\n\
<div class=\"line\">        addEdgeInfo( eIt.index(0), eIt.index(1), smooth );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill in referenced polygons</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_mesh_polygon.html\">MItMeshPolygon</a> pIt( mesh );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !pIt.isDone(); pIt.next() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> pvc = pIt.polygonVertexCount();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> v=0; v&lt;pvc; v++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> a = pIt.vertexIndex( v );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> b = pIt.vertexIndex( v==(pvc-1) ? 0 : v+1 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            EdgeInfoPtr elem = findEdgeInfo( a, b );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( NULL != elem ) {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> edgeId = pIt.index();</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( INVALID_ID == elem-&gt;polyIds[0] ) {</div>\n\
<div class=\"line\">                    elem-&gt;polyIds[0] = edgeId;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    elem-&gt;polyIds[1] = edgeId;</div>\n\
<div class=\"line\">                }                </div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now create a polyId-&gt;smoothingGroup table</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   </span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numPolygons = fnMesh.numPolygons();</div>\n\
<div class=\"line\">    polySmoothingGroups = (<span class=\"keywordtype\">int</span>*)malloc( <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">int</span>) *  numPolygons );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i=0; i&lt; numPolygons; i++ ) {</div>\n\
<div class=\"line\">        polySmoothingGroups[i] = NO_SMOOTHING_GROUP;</div>\n\
<div class=\"line\">    }    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Now call the smoothingAlgorithm to fill in the polySmoothingGroups</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// table.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note: we have to traverse ALL polygons to handle the case</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of disjoint polygons.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    nextSmoothingGroup = 1;</div>\n\
<div class=\"line\">    currSmoothingGroup = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> pid=0; pid&lt;numPolygons; pid++ ) {</div>\n\
<div class=\"line\">        newSmoothingGroup = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// Check polygon has not already been visited</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( NO_SMOOTHING_GROUP == polySmoothingGroups[pid] ) {</div>\n\
<div class=\"line\">           <span class=\"keywordflow\">if</span> ( !smoothingAlgorithm(pid,fnMesh) ) {</div>\n\
<div class=\"line\">               <span class=\"comment\">// No smooth edges for this polygon so we set</span></div>\n\
<div class=\"line\">               <span class=\"comment\">// the smoothing group to NO_SMOOTHING_GROUP (off)</span></div>\n\
<div class=\"line\">               polySmoothingGroups[pid] = NO_SMOOTHING_GROUP;</div>\n\
<div class=\"line\">           }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> ObjTranslator::smoothingAlgorithm( <span class=\"keywordtype\">int</span> polyId, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>&amp; fnMesh )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexList;</div>\n\
<div class=\"line\">    fnMesh.<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a469fc8126bc4424cd00853821d78a55a\">getPolygonVertices</a>( polyId, vertexList );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vcount = vertexList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> smoothEdgeFound = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> vid=0; vid&lt;vcount;vid++ ) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> a = vertexList[vid];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> b = vertexList[ vid==(vcount-1) ? 0 : vid+1 ];</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        EdgeInfoPtr elem = findEdgeInfo( a, b );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( NULL != elem ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// NOTE: We assume there are at most 2 polygons per edge</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//       halfEdge polygons get a smoothing group of</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//       NO_SMOOTHING_GROUP which is equivalent to &quot;s off&quot;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( NO_SMOOTHING_GROUP != elem-&gt;polyIds[1] ) { <span class=\"comment\">// Edge not a border</span></div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"comment\">// We are starting a new smoothing group</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//                </span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( newSmoothingGroup ) {</div>\n\
<div class=\"line\">                    currSmoothingGroup = nextSmoothingGroup++;</div>\n\
<div class=\"line\">                    newSmoothingGroup = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"comment\">// This is a SEED (starting) polygon and so we always</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// give it the new smoothing group id.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Even if all edges are hard this must be done so</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// that we know we have visited the polygon.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    polySmoothingGroups[polyId] = currSmoothingGroup;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"comment\">// If we have a smooth edge then this poly must be a member</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// of the current smoothing group.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( elem-&gt;smooth ) {</div>\n\
<div class=\"line\">                    polySmoothingGroups[polyId] = currSmoothingGroup;</div>\n\
<div class=\"line\">                    smoothEdgeFound = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> { <span class=\"comment\">// Hard edge so ignore this polygon</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"comment\">// Find the adjacent poly id</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> adjPoly = elem-&gt;polyIds[0];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( adjPoly == polyId ) {</div>\n\
<div class=\"line\">                    adjPoly = elem-&gt;polyIds[1];</div>\n\
<div class=\"line\">                }                             </div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"comment\">// If we are this far then adjacent poly belongs in this</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// smoothing group.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// If the adjacent polygon&#39;s smoothing group is not</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// NO_SMOOTHING_GROUP then it has already been visited</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// so we ignore it.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( NO_SMOOTHING_GROUP == polySmoothingGroups[adjPoly] ) {</div>\n\
<div class=\"line\">                    smoothingAlgorithm( adjPoly, fnMesh );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( polySmoothingGroups[adjPoly] != currSmoothingGroup ) {</div>\n\
<div class=\"line\">                    cerr &lt;&lt; <span class=\"stringliteral\">&quot;Warning: smoothing group problem at polyon &quot;</span>;</div>\n\
<div class=\"line\">                    cerr &lt;&lt; adjPoly &lt;&lt; endl;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> smoothEdgeFound;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::addEdgeInfo( <span class=\"keywordtype\">int</span> v1, <span class=\"keywordtype\">int</span> v2, <span class=\"keywordtype\">bool</span> smooth )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Adds a new edge info element to the vertex table.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    EdgeInfoPtr element = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL == edgeTable[v1] ) {</div>\n\
<div class=\"line\">        edgeTable[v1] = (EdgeInfoPtr)malloc( <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> EdgeInfo) );</div>\n\
<div class=\"line\">        element = edgeTable[v1];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        element = edgeTable[v1];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( NULL != element-&gt;next ) {</div>\n\
<div class=\"line\">            element = element-&gt;next;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        element-&gt;next = (EdgeInfoPtr)malloc( <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> EdgeInfo) );</div>\n\
<div class=\"line\">        element = element-&gt;next;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Setup data for new edge</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    element-&gt;vertId     = v2;</div>\n\
<div class=\"line\">    element-&gt;smooth     = smooth;</div>\n\
<div class=\"line\">    element-&gt;next       = NULL;</div>\n\
<div class=\"line\">   </div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize array of id&#39;s of polygons that reference this edge.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// There are at most 2 polygons per edge.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    element-&gt;polyIds[0] = INVALID_ID;</div>\n\
<div class=\"line\">    element-&gt;polyIds[1] = INVALID_ID;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">EdgeInfoPtr ObjTranslator::findEdgeInfo( <span class=\"keywordtype\">int</span> v1, <span class=\"keywordtype\">int</span> v2 )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Finds the info for the specified edge.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    EdgeInfoPtr element = NULL;</div>\n\
<div class=\"line\">    element = edgeTable[v1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> ( NULL != element ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( v2 == element-&gt;vertId ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> element;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        element = element-&gt;next;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( element == NULL ) {</div>\n\
<div class=\"line\">        element = edgeTable[v2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( NULL != element ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( v1 == element-&gt;vertId ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> element;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            element = element-&gt;next;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::destroyEdgeTable()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Free up all of the memory used by the edgeTable.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !smoothing )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    EdgeInfoPtr element = NULL;</div>\n\
<div class=\"line\">    EdgeInfoPtr tmp = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> v=0; v&lt;edgeTableSize; v++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        element = edgeTable[v];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( NULL != element )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            tmp = element;</div>\n\
<div class=\"line\">            element = element-&gt;next;</div>\n\
<div class=\"line\">            free( tmp );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != edgeTable ) {</div>\n\
<div class=\"line\">        free( edgeTable );</div>\n\
<div class=\"line\">        edgeTable = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != polySmoothingGroups ) {</div>\n\
<div class=\"line\">        free( polySmoothingGroups );</div>\n\
<div class=\"line\">        polySmoothingGroups = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ObjTranslator::exportSelected( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> filename;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    initializeSetsAndLookupTables( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create an iterator for the active selection list</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> slist;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a>( slist );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> iter( slist );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iter.isDone()) {</div>\n\
<div class=\"line\">        fprintf(stderr,<span class=\"stringliteral\">&quot;Error: Nothing is selected.\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We will need to interate over a selected node&#39;s heirarchy </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// in the case where shapes are grouped, and the group is selected.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIterator( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a>, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// reset counters</span></div>\n\
<div class=\"line\">    v = vt = vn = 0;</div>\n\
<div class=\"line\">    voff = vtoff = vnoff = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Selection list loop</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !iter.isDone(); iter.next() )</div>\n\
<div class=\"line\">    {    </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> objectPath;</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the selected node</span></div>\n\
<div class=\"line\">        status = iter.getDagPath( objectPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// reset iterator&#39;s root node to be the selected node.</span></div>\n\
<div class=\"line\">        status = dagIterator.reset (objectPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), </div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a> );   </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// DAG iteration beginning at at selected node</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; !dagIterator.isDone(); dagIterator.next() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  component = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\">            status = dagIterator.getPath(dagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">                fprintf(stderr,<span class=\"stringliteral\">&quot;Failure getting DAG path.\\n&quot;</span>);</div>\n\
<div class=\"line\">                freeLookupTables();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status ) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// skip over intermediate objects</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode( dagPath, &amp;status );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dagNode.isIntermediateObject()) </div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    status = MS::kSuccess;</div>\n\
<div class=\"line\">                    fprintf(stderr,<span class=\"stringliteral\">&quot;Warning: skipping Nurbs Surface.\\n&quot;</span>);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ((  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)) &amp;&amp;</div>\n\
<div class=\"line\">                         (  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// We want only the shape, </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// not the transform-extended-to-shape.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Build a lookup table so we can determine which </span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// polygons belong to a particular edge as well as</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// smoothing information</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    buildEdgeTable( dagPath );</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    status = OutputPolygons(dagPath, component);</div>\n\
<div class=\"line\">                    objectId++;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (status != MS::kSuccess) {</div>\n\
<div class=\"line\">                        fprintf(stderr, <span class=\"stringliteral\">&quot;Error: exporting geom failed, check your selection.\\n&quot;</span>);</div>\n\
<div class=\"line\">                        freeLookupTables();</div>\n\
<div class=\"line\">                        destroyEdgeTable(); <span class=\"comment\">// Free up the edge table               </span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    destroyEdgeTable(); <span class=\"comment\">// Free up the edge table               </span></div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                voff = v;</div>\n\
<div class=\"line\">                vtoff = vt;</div>\n\
<div class=\"line\">                vnoff = vn;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    freeLookupTables();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ObjTranslator::exportAll( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    initializeSetsAndLookupTables( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIterator( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a8ad4d0a286855b50181b12df48942291\">MItDag::kBreadthFirst</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a>, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( MS::kSuccess != status) {</div>\n\
<div class=\"line\">        fprintf(stderr,<span class=\"stringliteral\">&quot;Failure in DAG iterator setup.\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// reset counters</span></div>\n\
<div class=\"line\">    v = vt = vn = 0;</div>\n\
<div class=\"line\">    voff = vtoff = vnoff = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !dagIterator.isDone(); dagIterator.next() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  component = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\">        status = dagIterator.getPath(dagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">            fprintf(stderr,<span class=\"stringliteral\">&quot;Failure getting DAG path.\\n&quot;</span>);</div>\n\
<div class=\"line\">            freeLookupTables();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// skip over intermediate objects</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode( dagPath, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagNode.isIntermediateObject()) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>)) &amp;&amp;</div>\n\
<div class=\"line\">            (  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            status = MS::kSuccess;</div>\n\
<div class=\"line\">            fprintf(stderr,<span class=\"stringliteral\">&quot;Warning: skipping Nurbs Surface.\\n&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ((  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>)) &amp;&amp;</div>\n\
<div class=\"line\">                 (  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adafa274206df602835f0f22ae887e126\">MFn::kTransform</a>)))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// We want only the shape, </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// not the transform-extended-to-shape.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (  dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Build a lookup table so we can determine which </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// polygons belong to a particular edge as well as</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// smoothing information</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            buildEdgeTable( dagPath );</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">// Now output the polygon information</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            status = OutputPolygons(dagPath, component);</div>\n\
<div class=\"line\">            objectId++;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status != MS::kSuccess) {</div>\n\
<div class=\"line\">                fprintf(stderr,<span class=\"stringliteral\">&quot;Error: exporting geom failed.\\n&quot;</span>);</div>\n\
<div class=\"line\">                freeLookupTables();                </div>\n\
<div class=\"line\">                destroyEdgeTable(); <span class=\"comment\">// Free up the edge table               </span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            destroyEdgeTable(); <span class=\"comment\">// Free up the edge table</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        voff = v;</div>\n\
<div class=\"line\">        vtoff = vt;</div>\n\
<div class=\"line\">        vnoff = vn;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    freeLookupTables();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ObjTranslator::recFindTransformDAGNodes( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; nodeName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; transformNodeIndicesArray )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// To handle Maya groups we traverse the hierarchy starting at</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// each objectNames[i] going towards the root collecting transform</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// nodes as we go.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> result;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> cmdStr = <span class=\"stringliteral\">&quot;listRelatives -ap &quot;</span> + nodeName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>( cmdStr, result );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0 )</div>\n\
<div class=\"line\">        <span class=\"comment\">// nodeName must be at the root of the DAG.  Stop recursing</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j=0; j&lt;result.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); j++ ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// check if the node result[i] is of type transform</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> result2;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>( <span class=\"stringliteral\">&quot;nodeType &quot;</span> + result[j], result2 );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( result2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1 &amp;&amp; result2[0] == <span class=\"stringliteral\">&quot;transform&quot;</span> ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// check if result[j] is already in result[j]</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> found=<span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>( i=0; i&lt;transformNodeNameArray.length(); i++) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( transformNodeNameArray[i] == result[j] ) {</div>\n\
<div class=\"line\">                    found = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( !found ) {</div>\n\
<div class=\"line\">                transformNodeIndicesArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(transformNodeNameArray.length());</div>\n\
<div class=\"line\">                transformNodeNameArray.append(result[j]);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                transformNodeIndicesArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a>(i);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            recFindTransformDAGNodes(result[j], transformNodeIndicesArray);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";