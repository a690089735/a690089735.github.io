var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: animExportUtil/animExportUtil.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'anim_export_util_2anim_export_util_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: animExportUtil/animExportUtil.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">animExportUtil/animExportUtil.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  File Name:  animExportUtil.h</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description: an animation export utility which illustrates how to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  use the MAnimUtil animation helper class, as well as how to export</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  animation using the Maya .anim format</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// INCLUDED HEADER FILES</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxFileTranslator.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyNodes.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSet.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSelectionList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItSelectionList.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAnimCurve.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimUtil.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;animExportUtil.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;animFileExport.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// HELPER METHODS</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef min</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span></div>\n\
<div class=\"line\">min (<span class=\"keywordtype\">double</span> a, <span class=\"keywordtype\">double</span> b)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (a &lt; b ? a : b);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef max</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span></div>\n\
<div class=\"line\">max (<span class=\"keywordtype\">double</span> a, <span class=\"keywordtype\">double</span> b)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (a &gt; b ? a : b);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// PUBLIC MEMBER FUNCTIONS</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TanimExportUtil::TanimExportUtil()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">TanimExportUtil::~TanimExportUtil()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">TanimExportUtil::writer (</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> &amp;file,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;<span class=\"comment\">/*options*/</span>,</div>\n\
<div class=\"line\">    FileAccessMode mode</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the export file</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    std::ofstream animFile (file.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a1e36aee73cb919f85ab93bb30967df89\">expandedFullName</a>().<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a selection list to hold the objects we want to export</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> list;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mode == kExportActiveAccessMode) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Use the active list</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a6d81d38246555884897fb153c93aaf42\">MGlobal::getActiveSelectionList</a> (list);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a selection list with all the objects in the world</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Add the top level dag objects</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIt (<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a8ad4d0a286855b50181b12df48942291\">MItDag::kBreadthFirst</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (dagIt.next(); !dagIt.isDone(); dagIt.next()) {</div>\n\
<div class=\"line\">            <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (dagIt.getPath (path) != MS::kSuccess) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            list.add (path);</div>\n\
<div class=\"line\">            <span class=\"comment\">// We only want the top level objects (since we will walk</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// down the hierarchy later</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            dagIt.prune ();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// Gather the rest of the dependency nodes</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html\">MItDependencyNodes</a> nodeIt;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (; !nodeIt.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); nodeIt.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#a73616f002814b8abe6d921db72d7a496\">next</a>()) {</div>\n\
<div class=\"line\">            <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = nodeIt.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_nodes.html#ad4c0bca65bccc7451dd91a88d443e5a8\">thisNode</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (node.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// We have already saved the dag objects, so skip them here</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (node.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a7f6b3e140a92b64ca6c088012cca49af\">MFn::kDagNode</a>)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// Watch out for characters, and only write the top level</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// character</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6c259cca58d48ce0ff34a8f4563dce2c\">MFn::kCharacter</a>)) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Find out which (if any) sets this node belongs to</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Get the message attribute</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (node);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> aMessage = fnNode.attribute (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> (<span class=\"stringliteral\">&quot;message&quot;</span>));</div>\n\
<div class=\"line\">                <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> messagePlug (node, aMessage);</div>\n\
<div class=\"line\">                <span class=\"comment\">// Now find what it is connected to as a source plug</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> srcPlugArray;</div>\n\
<div class=\"line\">                messagePlug.connectedTo (srcPlugArray, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">                <span class=\"comment\">// Now walk through each connection and see if any is to</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// another character</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = srcPlugArray.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> belongsToCharacter = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; (i &lt; numPlugs) &amp;&amp; !belongsToCharacter; i++) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;plug = srcPlugArray[i];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (!plug.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6c259cca58d48ce0ff34a8f4563dce2c\">MFn::kCharacter</a>)) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    belongsToCharacter = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!belongsToCharacter) {</div>\n\
<div class=\"line\">                    list.add (node);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// A superfluous test to filter out unanimated objects, just to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// show how to use MAnimUtil</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#a5d95aa00fe191689c32832f1750e3ddb\">MAnimUtil::isAnimated</a> (node)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            list.add (node);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The Maya .anim format needs to know the bounds of the animation</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// since it could be used in pasteKey operations (which support</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// scaling in time), so gather that information now</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find all the plugs that are animated in our selection list</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatedPlugs;</div>\n\
<div class=\"line\">    <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#a7ef5c3ccfe3bcf1549b280a3f08443e8\">MAnimUtil::findAnimatedPlugs</a> (list, animatedPlugs);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasTime = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> startTime = 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> endTime = 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasUnitless = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> startUnitless = 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> endUnitless = 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"comment\">// For each animated plug, determine the bounds of the animation</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numPlugs; i++) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = animatedPlugs[i];</div>\n\
<div class=\"line\">        <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> animation;</div>\n\
<div class=\"line\">        <span class=\"comment\">// Find the animation curve(s) that animate this plug</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#aef24962be304b2121549d410c9543e41\">MAnimUtil::findAnimation</a> (plug, animation)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCurves = animation.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; numCurves; j++) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> animCurveNode = animation[j];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!animCurveNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af63f422e6ba7a68f03391f9dbfb580fd\">MFn::kAnimCurve</a>)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_anim_curve.html\">MFnAnimCurve</a> animCurve (animCurveNode);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numKeys = animCurve.numKeys();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numKeys == 0) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (animCurve.isUnitlessInput()) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!hasUnitless) {</div>\n\
<div class=\"line\">                    startUnitless = animCurve.unitlessInput (0);</div>\n\
<div class=\"line\">                    endUnitless = animCurve.unitlessInput (numKeys - 1);</div>\n\
<div class=\"line\">                    hasUnitless = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    startUnitless = min (startUnitless, animCurve.unitlessInput (0));</div>\n\
<div class=\"line\">                    endUnitless = max (endUnitless, animCurve.unitlessInput (numKeys - 1));</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!hasTime) {</div>\n\
<div class=\"line\">                    startTime = animCurve.time (0).value();</div>\n\
<div class=\"line\">                    endTime = animCurve.time (numKeys - 1).value();</div>\n\
<div class=\"line\">                    hasTime = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    startTime = min (startTime, animCurve.time (0).value());</div>\n\
<div class=\"line\">                    endTime = max (endTime, animCurve.time (numKeys - 1).value());</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write out the header information</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    animWriter writer;</div>\n\
<div class=\"line\">    writer.writeHeader (animFile, startTime, endTime, startUnitless, endUnitless);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now write out the animation for each object on the selection list</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numObjects = list.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; numObjects; i++) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (list.getDagPath (i, path) == MS::kSuccess) {</div>\n\
<div class=\"line\">            write (animFile, path);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (list.getDependNode (i, node) == MS::kSuccess) {</div>\n\
<div class=\"line\">            write (animFile, node);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    animFile.flush();</div>\n\
<div class=\"line\">    animFile.close();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (MS::kSuccess);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">TanimExportUtil::write (std::ofstream &amp;animFile, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;path)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Walk through the dag breadth first</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIt (<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>);</div>\n\
<div class=\"line\">    dagIt.reset (path, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !dagIt.isDone(); dagIt.next()) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> thisPath;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dagIt.getPath (thisPath) != MS::kSuccess) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// Find the animated plugs for this object</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatedPlugs;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = thisPath.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (node);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#a7ef5c3ccfe3bcf1549b280a3f08443e8\">MAnimUtil::findAnimatedPlugs</a> (thisPath, animatedPlugs);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numPlugs == 0) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// If the object is not animated, then write out place holder</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// information</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            animFile &lt;&lt; <span class=\"stringliteral\">&quot;anim &quot;</span> &lt;&lt; fnNode.name().asChar() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; dagIt.depth() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; thisPath.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412\">childCount</a>() &lt;&lt; <span class=\"stringliteral\">&quot; 0;\\n&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Otherwise write out each animation curve</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            writeAnimatedPlugs (animFile, animatedPlugs, fnNode.name(), dagIt.depth(), thisPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a4545b4a1547fa72221afb9fa9f149412\">childCount</a>());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">TanimExportUtil::write (std::ofstream &amp;animFile, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;node)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Watch out for characters and handle them a little differently</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6c259cca58d48ce0ff34a8f4563dce2c\">MFn::kCharacter</a>)) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> characterList;</div>\n\
<div class=\"line\">        characterList.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a3694392863ba632bca5d76cbbf190ef5\">append</a> (node);</div>\n\
<div class=\"line\">        <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> depths;</div>\n\
<div class=\"line\">        depths.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a11568087ac2ca16f4106cee62f65afd7\">append</a> (0);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> current = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (current &lt; characterList.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;thisNode = characterList[current];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> thisDepth = depths[current++];</div>\n\
<div class=\"line\">            <span class=\"comment\">// If this node is a character, then check for any immediate</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// subCharacters</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> fnSet (thisNode);</div>\n\
<div class=\"line\">            <span class=\"comment\">// Now find the set members</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> members;</div>\n\
<div class=\"line\">            fnSet.getMembers (members, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> childCount = 0;</div>\n\
<div class=\"line\">            <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_selection_list.html\">MItSelectionList</a> iter (members, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6c259cca58d48ce0ff34a8f4563dce2c\">MFn::kCharacter</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (; !iter.isDone(); iter.next()) {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> childNode;</div>\n\
<div class=\"line\">                iter.getDependNode (childNode);</div>\n\
<div class=\"line\">                characterList.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a201ad18620fcb47dc692e1d337ad0e7e\">insert</a> (childNode, current + childCount);</div>\n\
<div class=\"line\">                depths.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a95aaff2c93e48e4da000d79e8324c714\">insert</a> (thisDepth + 1, current + childCount);</div>\n\
<div class=\"line\">                childCount++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// Find the animated plugs for this object</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatedPlugs;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#a7ef5c3ccfe3bcf1549b280a3f08443e8\">MAnimUtil::findAnimatedPlugs</a> (thisNode, animatedPlugs);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (numPlugs == 0) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// If the object is not animated, then write out place holder</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// information</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                animFile &lt;&lt; <span class=\"stringliteral\">&quot;anim &quot;</span> &lt;&lt; fnSet.name().asChar() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; thisDepth &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; childCount &lt;&lt; <span class=\"stringliteral\">&quot; 0;\\n&quot;</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Otherwise write out each animation curve</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                writeAnimatedPlugs (animFile, animatedPlugs, fnSet.name(), thisDepth, childCount);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the animated plugs for this object</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> animatedPlugs;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (node);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#a7ef5c3ccfe3bcf1549b280a3f08443e8\">MAnimUtil::findAnimatedPlugs</a> (node, animatedPlugs);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numPlugs != 0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If the object is animated the write out each animation curve</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        writeAnimatedPlugs (animFile, animatedPlugs, fnNode.name(), 0, 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">TanimExportUtil::writeAnimatedPlugs (</div>\n\
<div class=\"line\">    std::ofstream &amp;animFile,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp;animatedPlugs,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> depth,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> childCount</div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Walk through each animated plug and write out the animation curve(s)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numPlugs; i++) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = animatedPlugs[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> animation;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#aef24962be304b2121549d410c9543e41\">MAnimUtil::findAnimation</a> (plug, animation)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// Write out the plugs&#39; anim statement</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        animFile &lt;&lt; <span class=\"stringliteral\">&quot;anim &quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// build up the full attribute name</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> attrPlug (plug);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = attrPlug.attribute();</div>\n\
<div class=\"line\">        <a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> fnAttr (attrObj);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fullAttrName (fnAttr.name());</div>\n\
<div class=\"line\">        attrPlug = attrPlug.parent();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (!attrPlug.isNull()) {</div>\n\
<div class=\"line\">            attrObj = attrPlug.attribute();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> fnAttr2 (attrObj);</div>\n\
<div class=\"line\">            fullAttrName = fnAttr2.name() + <span class=\"stringliteral\">&quot;.&quot;</span> + fullAttrName;</div>\n\
<div class=\"line\">            attrPlug = attrPlug.parent();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        attrObj = plug.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> fnLeafAttr (attrObj);</div>\n\
<div class=\"line\">        animFile &lt;&lt; fullAttrName.asChar() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; fnLeafAttr.name().asChar() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; nodeName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>() &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; depth &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; childCount &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"stringliteral\">&quot;;\\n&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numCurves = animation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"comment\">// Write out each animation curve that animates the plug</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; numCurves; j++) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> animCurveNode = animation[j];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!animCurveNode.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af63f422e6ba7a68f03391f9dbfb580fd\">MFn::kAnimCurve</a>)) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            animWriter writer;</div>\n\
<div class=\"line\">            writer.writeAnimCurve (animFile, &amp;animCurveNode);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">TanimExportUtil::haveWriteMethod ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a></div>\n\
<div class=\"line\">TanimExportUtil::defaultExtension ()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;anim&quot;</span>));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_file_translator.html#a8966f27c569f8ef7182b63f0a66e79dd\">MPxFileTranslator::MFileKind</a></div>\n\
<div class=\"line\">TanimExportUtil::identifyFile (</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a> &amp;file,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * <span class=\"comment\">/*buffer*/</span>,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">short</span> <span class=\"comment\">/*size*/</span></div>\n\
<div class=\"line\">)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name = file.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html#a614484d9028d9d09418b5e337c39b7a0\">resolvedName</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>   nameLength = (int)strlen(name);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((nameLength &gt; 5) &amp;&amp; !strcasecmp(name+nameLength-5, <span class=\"stringliteral\">&quot;.anim&quot;</span>)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (kIsMyFileType);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (kNotMyFileType);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span> <span class=\"keywordtype\">void</span> *</div>\n\
<div class=\"line\">TanimExportUtil::creator ()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keyword\">new</span> TanimExportUtil);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Plugin management</span></div>\n\
<div class=\"line\"><span class=\"comment\">//--------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">initializePlugin (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin (obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>);</div>\n\
<div class=\"line\">    status = plugin.registerFileTranslator (<span class=\"stringliteral\">&quot;animExportUtil&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>, TanimExportUtil::creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (status);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">uninitializePlugin (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin (obj);</div>\n\
<div class=\"line\">    plugin.deregisterFileTranslator (<span class=\"stringliteral\">&quot;animExportUtil&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (MS::kSuccess);</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";