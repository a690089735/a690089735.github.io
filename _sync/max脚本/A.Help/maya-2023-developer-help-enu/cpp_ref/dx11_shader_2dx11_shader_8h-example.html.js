var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: dx11Shader/dx11Shader.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'dx11_shader_2dx11_shader_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: dx11Shader/dx11Shader.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">dx11Shader/dx11Shader.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _dx11ShaderNode_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _dx11ShaderNode_h_</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><span class=\"comment\">// provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxHardwareShader.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVaryingParameterList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUniformParameterList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMessage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Includes for DX11</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define WIN32_LEAN_AND_MEAN</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3d11.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// for VS 2012, Win8 SDK includes DX sdk with some header removed</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &gt;= 1700</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;dxgi.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;d3dx11.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if USE_D3DX11EFFECTS</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// d3dx11effect.h comes from the D3DX11Effects library installer</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// or the DirectX SDK installer (legacy)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// DirectX is now part of the Windows SDK installer</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #include &lt;d3dx11effect.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// have legacy DirectX SDK (June 2010)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #if USE_DIRECTXSDK_D3DX11EFFECTS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        #ifndef USE_BOOL</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        #define USE_BOOL // use BOOL instead of bool</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        #endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11Device ID3D11Device</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11DeviceContext ID3D11DeviceContext</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11Effect ID3DX11Effect</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11EffectTechnique ID3DX11EffectTechnique</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11Pass ID3DX11EffectPass</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11InputLayout ID3D11InputLayout</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11InputElementDesc D3D11_INPUT_ELEMENT_DESC</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11EffectVariable ID3DX11EffectVariable</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11EffectShaderResourceVariable ID3DX11EffectShaderResourceVariable</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11RasterizerState ID3D11RasterizerState</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11DepthStencilState ID3D11DepthStencilState</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11BlendState ID3D11BlendState</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11Device void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11DeviceContext void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11Effect void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11EffectTechnique void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11Pass void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11InputLayout void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11InputElementDesc void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11EffectVariable void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11EffectShaderResourceVariable void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11RasterizerState void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11DepthStencilState void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define dx11ShaderDX11BlendState void</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;set&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>CUniformParameterBuilder;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define USE_GL_TEXTURE_CACHING</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya hardware shader node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>dx11ShaderNode : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html\">MPxHardwareShader</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Identify the purpose of the current rendering process</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> ERenderType</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        RENDER_SCENE,               <span class=\"comment\">// Render the textured material to the viewport 2.0</span></div>\n\
<div class=\"line\">        RENDER_SCENE_NON_MATERIAL,  <span class=\"comment\">// Render non material items to the viewport 2.0</span></div>\n\
<div class=\"line\">        RENDER_SWATCH,              <span class=\"comment\">// Render the swatch that represents the current selected technique</span></div>\n\
<div class=\"line\">        RENDER_SWATCH_PROXY,        <span class=\"comment\">// Render a dummy swatch when no effect or no valid technique selected</span></div>\n\
<div class=\"line\">        RENDER_UVTEXTURE            <span class=\"comment\">// Render a texture for the UV editor</span></div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> isRenderScene(ERenderType renderType)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (renderType == RENDER_SCENE || renderType == RENDER_SCENE_NON_MATERIAL); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> isRenderSwatch(ERenderType renderType)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (renderType == RENDER_SWATCH); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> isRenderNonMaterialItem(ERenderType renderType)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (renderType == RENDER_SCENE_NON_MATERIAL); }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> needUpdateImplicitLightConnections(ERenderType renderType)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (renderType == RENDER_SCENE || renderType == RENDER_SWATCH); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> needUpdateExplicitLightConnections(ERenderType renderType)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (renderType == RENDER_SCENE); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> overrideRasterizerState(ERenderType renderType)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> !isRenderScene(renderType); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> needUpdateMayaSwatchRenderVar(ERenderType renderType)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (renderType == RENDER_SWATCH || renderType == RENDER_SWATCH_PROXY); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>RenderItemDesc</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isFatLine;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isFatPoint;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> ELightType</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        eInvalidLight,</div>\n\
<div class=\"line\">        eUndefinedLight,</div>\n\
<div class=\"line\">        eSpotLight,</div>\n\
<div class=\"line\">        ePointLight,</div>\n\
<div class=\"line\">        eDirectionalLight,</div>\n\
<div class=\"line\">        eAmbientLight,</div>\n\
<div class=\"line\">        eVolumeLight,</div>\n\
<div class=\"line\">        eAreaLight,</div>\n\
<div class=\"line\">        eDefaultLight,</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        eLightCount</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Identify the transparency state of the selected technique</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> ETransparencyState</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        eOpaque,                <span class=\"comment\">// Technique is always opaque</span></div>\n\
<div class=\"line\">        eTransparent,           <span class=\"comment\">// Technique is always transparent</span></div>\n\
<div class=\"line\">        eTestOpacitySemantics,  <span class=\"comment\">// Technique transparency depends on the value of the float parameter with kOpacity semantic ( transparent if less than 1.0)</span></div>\n\
<div class=\"line\">        eScriptedTest           <span class=\"comment\">// Technique transparency depends on the result of the transparencyTest MEL procedure</span></div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>ContextStates</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        dx11ShaderDX11RasterizerState*      rasterizerState = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">        dx11ShaderDX11DepthStencilState*    depthStencilState = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">        UINT                                stencilRef;</div>\n\
<div class=\"line\">        dx11ShaderDX11BlendState*           blendState = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>                               blendFactor[4];</div>\n\
<div class=\"line\">        UINT                                sampleMask;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MRasterizerState* mayaRasterizerState = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MDepthStencilState* mayaDepthStencilState = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MBlendState* mayaBlendState = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>LightParameterInfo</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> dx11ShaderNode::ELightType ELightType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        LightParameterInfo(ELightType lightType = dx11ShaderNode::eInvalidLight, <span class=\"keywordtype\">bool</span> hasLightTypeSemantics = <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        ELightType  lightType() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        ELightType  fLightType;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>        fHasLightTypeSemantics;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>        fIsDirty;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// This is a map&lt;MUniformParameterList-&gt;index, ELightParameterType&gt;</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt;int, int&gt; TConnectableParameters;</div>\n\
<div class=\"line\">        TConnectableParameters fConnectableParameters;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     fAttrUseImplicit;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     fAttrConnectedLight;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     fCachedImplicitLight;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Constructor/Destructor housekeeping: create, copy setup</span></div>\n\
<div class=\"line\">                        dx11ShaderNode();</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span>             ~dx11ShaderNode();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>     <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a9a842aadc96ca39565ad68e366d6b83e\">typeId</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"keywordtype\">void</span>*       creator();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     initialize();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"keywordtype\">void</span>        initializeNodeAttrs();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Query the renderers supported by this shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html\">MRenderProfile</a>&amp; <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#a269d88f7a24099bc25280475c931e49d\">profile</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Internal attribute housekeeping</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span>        <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aca0f48b1467c0e3dc8643a18b0b855da\">copyInternalData</a>( <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* pSrc );</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"keywordtype\">void</span>        postDuplicateCB( <span class=\"keywordtype\">void</span> *data );</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span>        <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#aa88f4dd4cfd3e964e0806d6e5b253347\">getInternalValue</a>( <span class=\"keyword\">const</span> <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp;, <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp;);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span>        <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a6caab4434e836748680958883564af35\">setInternalValue</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp;, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a>&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a82d0d0e95d46b8f41c4fd4bea409c1b3\">connectionMade</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; otherPlug, <span class=\"keywordtype\">bool</span> asSrc );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a9af8c4dfe96f9f03b7edd22be9dcd79a\">dependsOn</a>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; otherPlug, <span class=\"keywordtype\">bool</span>&amp; depends) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Dynamic light connection housekeeping:</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#abd7d1dad4e4f0b922bf5ac4fc9c0230a\">setDependentsDirty</a>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; plugBeingDirtied, <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp; affectedPlugs);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Topology Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> rebuildAlways(<span class=\"keywordtype\">size_t</span> baseVersionId) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isDirty(<span class=\"keywordtype\">size_t</span> baseVersionId) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> geometryVersionId() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasUpdatedVaryingInput() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setTopoDirty();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Effect Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> reloadAll(<span class=\"keyword\">const</span> <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> reload();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    dx11ShaderDX11Effect* effect() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> boundingBoxExtraScale() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> loadEffect( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; effectName );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> loadFromFile( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; fileName, dx11ShaderDX11Device* dxDevice);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> loadFromBuffer( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; identifier, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* pData, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> dataSize, dx11ShaderDX11Device* dxDevice);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> initializeEffect();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> resetData(<span class=\"keywordtype\">bool</span> clearEffect = <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; techniques() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> techniqueCount() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> techniqueIsTransparent() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> techniqueSupportsAdvancedTransparency() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> techniqueOverridesDrawState() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> techniqueOverridesNonMaterialItems() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> techniqueHandlesConsolidatedGeometry() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> techniqueIsSelectable() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Does the technique know how to render shadows or other special context?</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> techniqueHandlesContext(<a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> passHandlesContext(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; passSemantics, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passIndex, ERenderType renderType, <span class=\"keyword\">const</span> RenderItemDesc* renderItemDesc = NULL) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the active technique number. Will be -1 if none</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> activeTechnique() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return pointer to active technique</span></div>\n\
<div class=\"line\">    dx11ShaderDX11EffectTechnique* technique() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return name of active technique</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; activeTechniqueName() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return name of index buffer type of active technique</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; techniqueIndexBufferType() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> initializeTechniques();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> setTechnique( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; techniqueName );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> setTechnique( <span class=\"keywordtype\">int</span> techniqueNumber );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> initTechniqueParameters();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> storeDefaultTextureNames();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> restoreDefaultTextureNames();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Pass Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the number of pass in active technique</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> techniquePassCount() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    dx11ShaderDX11Pass* activatePass( dx11ShaderDX11Device *dxDevice, dx11ShaderDX11DeviceContext *dxContext, dx11ShaderDX11EffectTechnique* dxTechnique, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passId, ERenderType renderType ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    dx11ShaderDX11Pass* activatePass( dx11ShaderDX11Device *dxDevice, dx11ShaderDX11DeviceContext *dxContext, dx11ShaderDX11EffectTechnique* dxTechnique, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> passId, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; passSem, ERenderType renderType, <span class=\"keyword\">const</span> RenderItemDesc* renderItemDesc = NULL ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> passHasHullShader(dx11ShaderDX11Pass* dxPass) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    dx11ShaderDX11InputLayout* getInputLayout(dx11ShaderDX11Device* dxDevice, dx11ShaderDX11Pass* dxPass, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numLayouts, <span class=\"keyword\">const</span> dx11ShaderDX11InputElementDesc* layoutDesc) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Rendering</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Render to GL viewport</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#ab0b2f571236b629874c940728deb854b\">render</a>( <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_geometry_list.html\">MGeometryList</a>&amp; iterator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Override this method to draw a image for swatch rendering.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#a765f8d7c0499e87180ff884b6967550e\">renderSwatchImage</a>( <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> &amp; image );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Override these methods to support texture display in the UV texture editor.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#a81e24ef2548b68ed74555de9ceee1b88\">getAvailableImages</a>( <span class=\"keyword\">const</span> <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_shader_context.html\">MPxHardwareShader::ShaderContext</a> &amp;context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; uvSetName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;imageNames );</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#afc0b543d630b77f3019e3759323673f8\">renderImage</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_shader_context.html\">MPxHardwareShader::ShaderContext</a> &amp;context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; imageName, floatRegion region, <span class=\"keyword\">const</span> <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_render_parameters.html\">MPxHardwareShader::RenderParameters</a>&amp; parameters, <span class=\"keywordtype\">int</span> &amp;imageWidth, <span class=\"keywordtype\">int</span> &amp;imageHeight );</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#afc0b543d630b77f3019e3759323673f8\">renderImage</a>( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_shader_context.html\">MPxHardwareShader::ShaderContext</a> &amp;context, <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html\">MHWRender::MUIDrawManager</a>&amp; uiDrawManager, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; imageName, floatRegion region, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/struct_m_px_hardware_shader_1_1_render_parameters.html\">MPxHardwareShader::RenderParameters</a>&amp; parameters, <span class=\"keywordtype\">int</span> &amp;imageWidth, <span class=\"keywordtype\">int</span> &amp;imageHeight );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render to DX vp2</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#ab0b2f571236b629874c940728deb854b\">render</a>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItemList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt;const MHWRender::MRenderItem*&gt; RenderItemList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render functions for a list of render items</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> renderTechnique(dx11ShaderDX11Device *dxDevice, dx11ShaderDX11DeviceContext *dxContext, dx11ShaderDX11EffectTechnique* dxTechnique,</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPasses, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; passSem,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> RenderItemList&amp; renderItemList,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter_list.html\">MVaryingParameterList</a>&amp; varyingParameters, ERenderType renderType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; indexBufferType) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> renderPass(dx11ShaderDX11Device *dxDevice, dx11ShaderDX11DeviceContext *dxContext, dx11ShaderDX11Pass* dxPass,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> RenderItemList&amp; renderItemList,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter_list.html\">MVaryingParameterList</a>&amp; varyingParameters, ERenderType renderType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; indexBufferType) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render functions for a single geometry</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> renderTechnique(dx11ShaderDX11Device *dxDevice, dx11ShaderDX11DeviceContext *dxContext, dx11ShaderDX11EffectTechnique* dxTechnique, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPasses,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html\">MHWRender::MGeometry</a>* geometry, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MHWRender::MGeometry::Primitive</a> primitiveType, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> primitiveStride,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter_list.html\">MVaryingParameterList</a>&amp; varyingParameters, ERenderType renderType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; indexBufferType ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> renderPass(dx11ShaderDX11Device *dxDevice, dx11ShaderDX11DeviceContext *dxContext, dx11ShaderDX11Pass* dxPass,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html\">MHWRender::MGeometry</a>* geometry, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MHWRender::MGeometry::Primitive</a> primitiveType, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> primitiveStride,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter_list.html\">MVaryingParameterList</a>&amp; varyingParameters, ERenderType renderType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; indexBufferType) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render function for a single geometry into a texture target</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> renderTechnique(dx11ShaderDX11Device *dxDevice, dx11ShaderDX11EffectTechnique* dxTechnique, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPasses,</div>\n\
<div class=\"line\">                    <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_target.html\">MHWRender::MRenderTarget</a>* textureTarget, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> height, <span class=\"keywordtype\">float</span> clearColor[4],</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html\">MHWRender::MGeometry</a>* geometry, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1e\">MHWRender::MGeometry::Primitive</a> primitiveType, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> primitiveStride,</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter_list.html\">MVaryingParameterList</a>&amp; varyingParameters, ERenderType renderType, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; indexBufferType) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> backupStates(dx11ShaderDX11DeviceContext *dxContext, ContextStates &amp;states, <span class=\"keyword\">const</span> MStateManager* mayaStates) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> restoreStates(dx11ShaderDX11DeviceContext *dxContext, ContextStates &amp;states, MStateManager* mayaStates) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt; dx11ShaderDX11EffectShaderResourceVariable*, MHWRender::MTexture* &gt; ResourceTextureMap;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> updateParameters( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter_list.html\">MUniformParameterList</a>&amp; uniformParameters, ResourceTextureMap &amp;resourceTexture, ERenderType renderType ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateOverrideNonMaterialItemParameters( <span class=\"keyword\">const</span> <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* item, RenderItemDesc&amp; renderItemDesc ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateViewportGlobalParameters( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateShaderBasedGeoChanges();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateLightsInformation();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;int, bool&gt; TshadowFlagBackupState;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> initShadowFlagBackupState(TshadowFlagBackupState&amp; stateBackup ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setPerGeometryShadowOnFlag(<span class=\"keywordtype\">bool</span> receivesShadows, TshadowFlagBackupState&amp; stateBackup ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Uniform and varying parameters</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> clearParameters();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Uniform and varying parameters</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> preBuildUniformParameterList();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> buildUniformParameterList();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> buildVaryingParameterList();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> buildVertexDescriptorFromVaryingParameters();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Internal</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> initMayaParameters();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Attribute Editor</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; getUIGroups() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> getUIGroupParameters(<span class=\"keywordtype\">int</span> uiGroupIndex) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> getIndexForUIGroupName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; uiGroupName, <span class=\"keywordtype\">bool</span> appendGroup = <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; lightInfoDescription() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> getLightConnectionInfo(<span class=\"keywordtype\">int</span> lightIndex);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> getLightableParameters(<span class=\"keywordtype\">int</span> lightIndex, <span class=\"keywordtype\">bool</span> showSemantics);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> getIndexForLightName(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; lightName, <span class=\"keywordtype\">bool</span> appendLight = <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> getVariableNameAsAttributeName(){ <span class=\"keywordflow\">return</span> fVariableNameAsAttributeName; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> appendParameterNameIfVisible(<span class=\"keywordtype\">int</span> paramIndex, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; paramArray) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Light Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> refreshLightConnectionAttributes(<span class=\"keywordtype\">bool</span> inSceneUpdateNotification=<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> connectLight(<span class=\"keywordtype\">int</span> lightIndex, <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> light);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> disconnectLight(<span class=\"keywordtype\">int</span> lightIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> refreshView() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setLightRequiresShadows(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; lightObject, <span class=\"keywordtype\">bool</span> requiresShadow) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateImplicitLightConnections(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, ERenderType renderType) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateExplicitLightConnections(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, ERenderType renderType) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> updateImplicitLightParameterCache(std::vector&lt;CUniformParameterBuilder*&gt;&amp; builders);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> clearLightConnectionData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> getLightParametersToUpdate(std::set&lt;int&gt;&amp; parametersToUpdate, ERenderType renderType) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> connectLight(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo, <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html\">MHWRender::MLightParameterInformation</a>* lightParam, ERenderType renderType=RENDER_SCENE) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> connectExplicitAmbientLight(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; sourceLight) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> turnOffLight(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setLightParameterLocking(<span class=\"keyword\">const</span> LightParameterInfo&amp; lightInfo, <span class=\"keywordtype\">bool</span> locked) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Texture Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* loadTexture(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; textureName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; layerName, <span class=\"keywordtype\">int</span> alphaChannelIdx, <span class=\"keywordtype\">int</span> mipmapLevels, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>()) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> releaseTexture(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* texture) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> assignTexture(dx11ShaderDX11EffectShaderResourceVariable* resourceVariable, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; textureName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; layerName, <span class=\"keywordtype\">int</span> alphaChannelIdx, ResourceTextureMap&amp; resourceTexture, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>()) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> releaseAllTextures(ResourceTextureMap&amp; resourceTexture) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> releaseAllTextures();</div>\n\
<div class=\"line\">  </div>\n\
<div class=\"line\">  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* getUVTexture(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> *context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; imageName, <span class=\"keywordtype\">int</span>&amp; imageWidth, <span class=\"keywordtype\">int</span>&amp; imageHeight);</div>\n\
<div class=\"line\">  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>* getUVTexture(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a> *context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; imageName, <span class=\"keywordtype\">int</span>&amp; imageWidth, <span class=\"keywordtype\">int</span>&amp; imageHeight,</div>\n\
<div class=\"line\">      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;textureName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; layerName, <span class=\"keywordtype\">int</span> &amp;alphaChannelIdx, <span class=\"keywordtype\">int</span> &amp;mipmapLevels);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> getTextureFile(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; uniformName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; textureFile) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Convenient functions</span></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterAsVector(<span class=\"keywordtype\">int</span> paramIndex, <span class=\"keywordtype\">float</span>* data) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterAsScalar(<span class=\"keywordtype\">int</span> paramIndex, <span class=\"keywordtype\">float</span> data) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterAsScalar(<span class=\"keywordtype\">int</span> paramIndex, <span class=\"keywordtype\">bool</span> data) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterAsScalar(<span class=\"keywordtype\">int</span> paramIndex, <span class=\"keywordtype\">int</span> data) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterAsMatrix(<span class=\"keywordtype\">int</span> paramIndex, <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; data) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterAsResource(<span class=\"keywordtype\">int</span> paramIndex, ID3D11ShaderResourceView* inResource) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterFromUniformAsVector(<span class=\"keywordtype\">int</span> paramIndex,<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> *data = NULL) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setParameterFromUniformAsScalar(<span class=\"keywordtype\">int</span> paramIndex,<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor_list.html\">MHWRender::MVertexBufferDescriptorList</a>* vertexBufferDescLists();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Diagnostics/description strings</span></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> displayErrorAndWarnings() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> reportInternalError( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keyword\">function</span>, <span class=\"keywordtype\">size_t</span> errcode ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// External content management  </span></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#abfc494661ea0f7f957a9e437cebb2642\">getExternalContent</a>(<a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_info_table.html\">MExternalContentInfoTable</a>&amp; table) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a389fc88c7e5236aa2b9980a1b452cc49\">setExternalContent</a>(<span class=\"keyword\">const</span> <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_external_content_location_table.html\">MExternalContentLocationTable</a>&amp; table);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>PassSpec</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> drawContext;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> forFatLine;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> forFatPoint;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> findMatchingPass(<span class=\"keyword\">const</span> PassSpec&amp; passSpecTest) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Version id, used by VP2.0 override to determine when a rebuild is necessary</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                          fGeometryVersionId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Keeps track if the anything in the shader may change the geo</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fShaderChangesGeo;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>                          fLastTime;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fIgnoreLightLimits;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Force the shader variable name to become the Maya attribute name, regardless of UIName annotation</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fVariableNameAsAttributeName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Identifier to track scene-render-frame in order to optimize the updateParameter routine.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> MUint64                 fLastFrameStamp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For duplicate</span></div>\n\
<div class=\"line\">    dx11ShaderNode*                 fDuplicateNodeSource;</div>\n\
<div class=\"line\">    MCallbackId                     fPostDuplicateCallBackId;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>                      fDuplicatedConnections;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Effect name</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fEffectName;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Pointer to effect</span></div>\n\
<div class=\"line\">    dx11ShaderDX11Effect*           fEffect;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// List of techniques by name</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>                    fTechniqueNames;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Active technique index</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                             fTechniqueIdx;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Active technique name</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fTechniqueName;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Pointer to active technique</span></div>\n\
<div class=\"line\">    dx11ShaderDX11EffectTechnique*  fTechnique;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Active technique mipmapLevels value when loading textures</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                             fTechniqueTextureMipMapLevels;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Active technique custom primitive generator that will be used to generate the index buffer.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fTechniqueIndexBufferType;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fTechniqueIsSelectable;</div>\n\
<div class=\"line\">    ETransparencyState              fTechniqueIsTransparent;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fOpacityPlugName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fTransparencyTestProcName;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fTechniqueSupportsAdvancedTransparency;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fTechniqueOverridesNonMaterialItems;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fTechniqueHandlesConsolidatedGeometry;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fTechniqueOverridesDrawState;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The enum version of .technique attribute (node local dynamic attr)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>                         fTechniqueEnumAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Active technique pass count</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>                    fTechniquePassCount;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;unsigned int, PassSpec&gt; PassSpecMap;</div>\n\
<div class=\"line\">    PassSpecMap                     fTechniquePassSpecs;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// List of uniform parameters.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uniform_parameter_list.html\">MUniformParameterList</a>           fUniformParameters;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// List of vertex buffer descriptions.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_varying_parameter_list.html\">MVaryingParameterList</a>                   fVaryingParameters;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor_list.html\">MHWRender::MVertexBufferDescriptorList</a>  fVaryingParametersVertexDescriptorList;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                                  fVaryingParametersGeometryVersionId;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                                  fVaryingParametersUpdateId;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// default UV editor textures</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>                            fDefaultTextureNames;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt;LightParameterInfo&gt; LightParameterInfoVec;</div>\n\
<div class=\"line\">    LightParameterInfoVec           fLightParameters;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>                    fLightNames;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>                    fLightDescriptions;</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keywordtype\">int</span>                     fImplicitAmbientLight;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>                    fUIGroupNames;</div>\n\
<div class=\"line\">    std::vector&lt;std::vector&lt;int&gt; &gt;  fUIGroupParameters;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ResourceTextureMap              fResourceTextureMap;</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keywordtype\">bool</span>                    fForceUpdateTexture;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                             fFixedTextureMipMapLevels;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_texture.html\">MHWRender::MTexture</a>*            fUVEditorTexture;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef USE_GL_TEXTURE_CACHING</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Caching for UV Texture image</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fUVEditorLastTexture;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fUVEditorLastLayer;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>                             fUVEditorLastAlphaChannel;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>                           fUVEditorBaseColor[4];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>                            fUVEditorShowAlphaMask;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>                    fUVEditorGLTextureId;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>                           fUVEditorGLTextureScaleU;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>                           fUVEditorGLTextureScaleV;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif //USE_GL_TEXTURE_CACHING</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bounding Box Extra Scale</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                         fBBoxExtraScalePlugName;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>                          fBBoxExtraScaleValue;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya Swatch Render</span></div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaSwatchRenderVar;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya full screen gamma correction</span></div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaGammaCorrectVar;</div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaHwFogEnabled;</div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaHwFogMode;</div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaHwFogStart;</div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaHwFogEnd;</div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaHwFogDensity;</div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fMayaHwFogColor;</div>\n\
<div class=\"line\">    dx11ShaderDX11EffectVariable*   fDepthRange;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt; dx11ShaderDX11Pass*, bool &gt; PassHasHullShaderMap;</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> PassHasHullShaderMap    fPassHasHullShaderMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>CachedInputElementDesc</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> SemanticName;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> SemanticIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> Format;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> InputSlot;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> AlignedByteOffset;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> InputSlotClass;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> InstanceDataStepRate;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>InputLayoutData</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        dx11ShaderDX11InputLayout* inputLayout;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numLayouts;</div>\n\
<div class=\"line\">        CachedInputElementDesc* layoutDesc;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt; dx11ShaderDX11Pass*, InputLayoutData &gt; PassInputLayoutMap;</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> PassInputLayoutMap      fPassInputLayoutMap;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                 fErrorLog;</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                 fWarningLog;</div>\n\
<div class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>            fErrorCount;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// INLINE</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Topology Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> dx11ShaderNode::rebuildAlways(<span class=\"keywordtype\">size_t</span> baseVersionId)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> hasUpdatedVaryingInput() || isDirty(baseVersionId);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> dx11ShaderNode::isDirty(<span class=\"keywordtype\">size_t</span> baseVersionId)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (fGeometryVersionId != baseVersionId);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">size_t</span> dx11ShaderNode::geometryVersionId()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fGeometryVersionId;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Effect Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; dx11ShaderNode::effectName()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fEffectName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> dx11ShaderDX11Effect* dx11ShaderNode::effect()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fEffect;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> dx11ShaderNode::boundingBoxExtraScale()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (fBBoxExtraScaleValue &gt; 1.0f ? fBBoxExtraScaleValue : 1.0f);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Technique Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; dx11ShaderNode::techniques()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueNames;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> dx11ShaderNode::techniqueCount()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">int</span>)fTechniqueNames.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> dx11ShaderNode::activeTechnique()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueIdx;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> dx11ShaderDX11EffectTechnique* dx11ShaderNode::technique()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechnique;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; dx11ShaderNode::activeTechniqueName()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; dx11ShaderNode::techniqueIndexBufferType()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueIndexBufferType;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> dx11ShaderNode::techniqueOverridesDrawState()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueOverridesDrawState;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> dx11ShaderNode::techniqueSupportsAdvancedTransparency()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueSupportsAdvancedTransparency;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> dx11ShaderNode::techniqueOverridesNonMaterialItems()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueOverridesNonMaterialItems;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> dx11ShaderNode::techniqueHandlesConsolidatedGeometry()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueHandlesConsolidatedGeometry;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> dx11ShaderNode::techniqueIsSelectable()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniqueIsSelectable;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Pass Management</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">int</span> dx11ShaderNode::techniquePassCount()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fTechniquePassCount;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Attribute Editor</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; dx11ShaderNode::getUIGroups()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fUIGroupNames;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>&amp; dx11ShaderNode::lightInfoDescription()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fLightDescriptions;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* _dx11ShaderNode_h_ */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";