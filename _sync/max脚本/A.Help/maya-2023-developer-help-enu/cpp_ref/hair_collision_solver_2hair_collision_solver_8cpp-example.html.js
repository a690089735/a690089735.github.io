var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: hairCollisionSolver/hairCollisionSolver.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'hair_collision_solver_2hair_collision_solver_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: hairCollisionSolver/hairCollisionSolver.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">hairCollisionSolver/hairCollisionSolver.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStatus.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHairSystem.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span> </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define kPluginName     &quot;hairCollisionSolver&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OVERVIEW:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in implements a custom collision solver for Maya&#39;s dynamic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// hair system. This allows users to override the following aspects of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Maya&#39;s dynamic hair systems:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      o Override the Maya dynamic hair system&#39;s object-to-hair</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        collision algorithm with a user-defined algorithm.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      o Optionally perform global filtering on hair, such as freeze,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//        smoothing, etc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It should be noted that Maya&#39;s dynamic hair system involves four</span></div>\n\
<div class=\"line\"><span class=\"comment\">// arears of collision detection, and this plug-in is specific to the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Hair-to-Object aspect only. The four areas collision which the Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">// dynamic hair system involves are:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      1) Hair to object collision.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      2) Hair to implicit object collision.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      3) Hair to ground plane collision.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      4) Self collision between hairs.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in illustrates the first case, overriding Maya&#39;s internal</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Hair-to-Object collision solver. There is currently no API for over-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// riding the other three collision solvers.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// RATIONALE:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// There are several reasons why are user may wish to override Maya&#39;s</span></div>\n\
<div class=\"line\"><span class=\"comment\">// internal hair to object collision algorithm. These are:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      1) The internal algorithm may not be accurate enough. After all,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         it is a simulation of real-life physics and there are tradeoffs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         taken to provide reasonable performance. Note that there are</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         means of increasing the accuracy without writing a custom</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         implementation, such as decreasing the dynamics time step, or</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         increasing the hair width.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      2) The built-in algorithm might be too accurate. If you only want</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         simplified collisions, such as against a bounding box repre-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         sentation instead of the internal algorithm&#39;s exhasutive test-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         ing against each surface of the object, you could write a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         lighter-weight implementation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      3) You might have a desire to process the hairs, such as smooth</span></div>\n\
<div class=\"line\"><span class=\"comment\">//         them out.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// STRATEGY:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The basic idea is to implement a custom callback which is registered</span></div>\n\
<div class=\"line\"><span class=\"comment\">// via MHairSystem::registerCollisionSolverCollide(). Your callback will</span></div>\n\
<div class=\"line\"><span class=\"comment\">// then be invoked in place of Maya&#39;s internal collision solver. By simply</span></div>\n\
<div class=\"line\"><span class=\"comment\">// registering a collision solver, you can completely implement a custom</span></div>\n\
<div class=\"line\"><span class=\"comment\">// hair-to-object solution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// However, since the collision solver is called once per hair times the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// number of solver iterations, it is wise to pre-process the data if</span></div>\n\
<div class=\"line\"><span class=\"comment\">// possible to speed up the collision tests. For this reason, you can</span></div>\n\
<div class=\"line\"><span class=\"comment\">// assign a pre-frame callback. One approach is to create a pre-processed</span></div>\n\
<div class=\"line\"><span class=\"comment\">// representation of your object pre-frame (e.g. an octree representation)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and then access this representation during the collision testing.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For the purposes of our simple demo plug-in, our private data will</span></div>\n\
<div class=\"line\"><span class=\"comment\">// consist of a COLLISION_INFO which contains an array of COLLISION_OBJ</span></div>\n\
<div class=\"line\"><span class=\"comment\">// structures, each one holding the bounding box of the object in world</span></div>\n\
<div class=\"line\"><span class=\"comment\">// space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// One issue with pre-processing the data involves managing the private</span></div>\n\
<div class=\"line\"><span class=\"comment\">// data. A collision object could be deleted or turned off during a</span></div>\n\
<div class=\"line\"><span class=\"comment\">// simulation. One way to cleanly manage such data is to store your</span></div>\n\
<div class=\"line\"><span class=\"comment\">// private data on a typed attribute which is added to the node. You</span></div>\n\
<div class=\"line\"><span class=\"comment\">// would build your private data once at the start of simulation in your</span></div>\n\
<div class=\"line\"><span class=\"comment\">// pre-frame callback (keep track of the current time, and if the curTime</span></div>\n\
<div class=\"line\"><span class=\"comment\">// passed in is less than what you store locally, assume the playback</span></div>\n\
<div class=\"line\"><span class=\"comment\">// has restarted from the beginning -- or the user is being silly and</span></div>\n\
<div class=\"line\"><span class=\"comment\">// trying to play the simulation backwards :-) Since it is relatively</span></div>\n\
<div class=\"line\"><span class=\"comment\">// expensive to look up a dynamic attribute value, and the collide()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// callback can get triggered 1000&#39;s of times per frame, for efficiency</span></div>\n\
<div class=\"line\"><span class=\"comment\">// you can pass back your private data as a pointer from your pre-frame</span></div>\n\
<div class=\"line\"><span class=\"comment\">// routine, and this pointer is then passed directly into your collide()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// callback.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             numVerts;   <span class=\"comment\">// Number of vertices in object.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          minx;       <span class=\"comment\">// Bounding box minimal extrema.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          miny;       <span class=\"comment\">// Bounding box minimal extrema.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          minz;       <span class=\"comment\">// Bounding box minimal extrema.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          maxx;       <span class=\"comment\">// Bounding box maximal extrema.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          maxy;       <span class=\"comment\">// Bounding box maximal extrema.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>          maxz;       <span class=\"comment\">// Bounding box maximal extrema.</span></div>\n\
<div class=\"line\">} COLLISION_OBJ ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             numObjs;    <span class=\"comment\">// Number of collision objects.</span></div>\n\
<div class=\"line\">    COLLISION_OBJ   *objs;      <span class=\"comment\">// Array of per-object info.</span></div>\n\
<div class=\"line\">} COLLISION_INFO ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Synopsis:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    preFrame( hairSystem, curTime, privateData )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This callback is invoked once at the start of each frame, allowing</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  the user to perform any pre-processing as they see fit, such as build-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  ing or updating private collision-detection structures.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Note: it is possible for collision objects to change between</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  frames during a simulation (for example, the user could delete a col-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  lision object), so if you choose to store your pre-processed data, it</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  is critical to track any edits or deletions to the collision object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  to keep your pre-processed data valid.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      There are lots of hints for writing an effective pre-frame call-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  back in the STRATEGY section listed earlier in this file.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MObject hairSystem  : (in)  The hair system shape node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      double  curTime     : (in)  Current time in seconds.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      void    **privateData:(out) Allows the user to return a private</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  data pointer to be passed into their</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  collision solver. If you store your</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  pre-processed data in data structure</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  which is difficult to access, such as</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  on a typed attribute, this provides</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  an easy way to provide the pointer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    true        : Successfully performed any needed initial-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            isation for the hair simulation this frame.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    false       : An error was detected.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>        preFrame(</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>       hairSystem,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>        curTime,</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>                **privateData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If you need want to perform any preprocessing on your collision</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// objects pre-frame, do it here. One option for storing the pre-</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// processed data is on a typed attribute on the hairSystem node.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// That data could be fetched and updated here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// In our example, we&#39;ll just compute a bounding box here and NOT use</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attribute storage. That is an exercise for the reader.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnHairSystem( hairSystem, &amp;status );</div>\n\
<div class=\"line\">    <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga1c1d4871f9859a07b14c0218a3609fd9\">CHECK_MSTATUS_AND_RETURN</a>( status, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    fprintf( stderr,</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;preFrame: calling hairSystem node=`%s&#39;, time=%g\\n&quot;</span>,</div>\n\
<div class=\"line\">            fnHairSystem.name().asChar(), curTime );</div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a>    cols;</div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>       logIdxs;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga1c1d4871f9859a07b14c0218a3609fd9\">CHECK_MSTATUS_AND_RETURN</a>( <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hair_system.html#a0aed534fe1495976805ff9848853b3b4\">MHairSystem::getCollisionObject</a>( hairSystem,</div>\n\
<div class=\"line\">            cols, logIdxs ), <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nobj = cols.length();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Allocate private data.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This allows us to pre-process data on a pre-frame basis to avoid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// calculating it per hair inside the collide() call. As noted earlier</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we could allocate this in preFrame() and hang it off the hairSystem</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// node via a dynamic attribute.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Instead we&#39;ll allocate it here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    COLLISION_INFO *collisionInfo = (COLLISION_INFO *) malloc(</div>\n\
<div class=\"line\">            <span class=\"keyword\">sizeof</span>( COLLISION_INFO ) );</div>\n\
<div class=\"line\">    collisionInfo-&gt;objs = (COLLISION_OBJ *) malloc(</div>\n\
<div class=\"line\">            nobj * <span class=\"keyword\">sizeof</span>( COLLISION_OBJ ) );</div>\n\
<div class=\"line\">    collisionInfo-&gt;numObjs = nobj;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the private data that we&#39;ll make available to the collide</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// method. The data should actually be stored in a way that it can</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// be cleaned up (such as storing the pointer on the hairSystem node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// using a dynamic attribute). As it stands right now, there is a</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// memory leak with this plug-in because the memory we&#39;re allocating</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for the private data is never cleaned up.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that when using the dynamic attribute approach, it is still</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// wise to set *privateData because this avoids the need to look up</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the plug inside the collide() routine which is a high-traffic</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// method.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    *privateData = (<span class=\"keywordtype\">void</span> *) collisionInfo;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Loop through the collision objects and pre-process, storing the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// results in the collisionInfo structure.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>    obj;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( obj = 0; obj &lt; nobj; ++obj ) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the ith collision geometry we are connected to.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> colObj = cols[obj];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the DAG path for the collision object so we can transform</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the vertices to world space.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> fnDagNode( colObj, &amp;status );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga1c1d4871f9859a07b14c0218a3609fd9\">CHECK_MSTATUS_AND_RETURN</a>( status, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">        status = fnDagNode.getPath( path );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga1c1d4871f9859a07b14c0218a3609fd9\">CHECK_MSTATUS_AND_RETURN</a>( status, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh( path, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status ) {</div>\n\
<div class=\"line\">            fprintf( stderr,</div>\n\
<div class=\"line\">                    <span class=\"stringliteral\">&quot;%s:%d: collide was not passed a valid mesh shape\\n&quot;</span>,</div>\n\
<div class=\"line\">                    __FILE__, __LINE__ );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the vertices of the object transformed to world space.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a>    verts;</div>\n\
<div class=\"line\">        status = fnMesh.getPoints( verts, <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#ga1c1d4871f9859a07b14c0218a3609fd9\">CHECK_MSTATUS_AND_RETURN</a>( status, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Compute the bounding box for the collision object.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// As this is a quick and dirty demo, we&#39;ll just support collisions</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// between hair and the bbox.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> minx, miny, minz, maxx, maxy, maxz, x, y, z;</div>\n\
<div class=\"line\">        minx = maxx = verts[0].x;</div>\n\
<div class=\"line\">        miny = maxy = verts[0].y;</div>\n\
<div class=\"line\">        minz = maxz = verts[0].z;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> nv = verts.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i = 1; i &lt; nv; ++i ) {</div>\n\
<div class=\"line\">            x = verts[i].x;</div>\n\
<div class=\"line\">            y = verts[i].y;</div>\n\
<div class=\"line\">            z = verts[i].z;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( x &lt; minx ) {</div>\n\
<div class=\"line\">                minx = x;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( y &lt; miny ) {</div>\n\
<div class=\"line\">                miny = y;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( z &lt; minz ) {</div>\n\
<div class=\"line\">                minz = z;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( x &gt; maxx ) {</div>\n\
<div class=\"line\">                maxx = x;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( y &gt; maxy ) {</div>\n\
<div class=\"line\">                maxy = y;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( z &gt; maxz ) {</div>\n\
<div class=\"line\">                maxz = z;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Store this precomputed informantion into our private data</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// structure.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        collisionInfo-&gt;objs[obj].numVerts = nv;</div>\n\
<div class=\"line\">        collisionInfo-&gt;objs[obj].minx = minx;</div>\n\
<div class=\"line\">        collisionInfo-&gt;objs[obj].miny = miny;</div>\n\
<div class=\"line\">        collisionInfo-&gt;objs[obj].minz = minz;</div>\n\
<div class=\"line\">        collisionInfo-&gt;objs[obj].maxx = maxx;</div>\n\
<div class=\"line\">        collisionInfo-&gt;objs[obj].maxy = maxy;</div>\n\
<div class=\"line\">        collisionInfo-&gt;objs[obj].maxz = maxz;</div>\n\
<div class=\"line\">        fprintf( stderr, <span class=\"stringliteral\">&quot;Inside preFrameInit, bbox=%g %g %g %g %g %g\\n&quot;</span>,</div>\n\
<div class=\"line\">                minx,miny,minz,maxx,maxy,maxz);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Synopsis:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    belowCollisionPlane( co, pnt )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Test if `pnt&#39; is directly below the collision plane of `co&#39;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      COLLISION_OBJ   *co : (in)  The collision object to test against.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MVector         &amp;pnt: (in)  Point to test.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    true        : The `pnt&#39; is directly below the collision</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            plane specified by `co&#39;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    false       : The `pnt&#39; is not directly below the collis-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            ion plane specified by `co&#39;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>    belowCollisionPlane( <span class=\"keyword\">const</span> COLLISION_OBJ *co, <span class=\"keyword\">const</span> <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;pnt )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>(    pnt.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &gt; co-&gt;minx &amp;&amp; pnt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> &lt; co-&gt;maxx</div>\n\
<div class=\"line\">                                &amp;&amp; pnt.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a> &lt; co-&gt;maxy</div>\n\
<div class=\"line\">            &amp;&amp; pnt.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> &gt; co-&gt;minz &amp;&amp; pnt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> &lt; co-&gt;maxz );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Synopsis:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MStatus collide( hairSystem, follicleIndex, hairPositions,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                      hairPositionsLast, hairWidths, startIndex,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                      endIndex, curTime, friction, privateData )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This callback is invoked by Maya to test if a collision exists be-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  tween the follicle (defined by `hairPositions&#39;, `hairPositionsLast&#39;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  and `hairWidths&#39;) and the collision objects associated with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  hairSystem. If a collision is detected, this routine should adjust</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  `hairPositions&#39; to compensate. The `hairPositionsLast&#39; can also be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  modified to adjust the velocity, but this should only be a dampening</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  effect as the hair solver expects collisions to be dampened,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method is invoked often (actually its once per hair times the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  hairSystem shape&#39;s iterations factor). Thus with 10,000 follicles it</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  would be called 80,000 times per frame (Note: as of Maya 7.0, the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  iterations factor is multipled by 2, so at its default value of 4, you</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  get 8x calls. However, if you set iterations=0, it clamps to 1x calls).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MObject hairSystem  : (in)  The hair system shape node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      int     follicleIndex:(in)  Which follicle we are processing.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  You can get the follicle node if you</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  wish via MHairSystem::getFollicle().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MVectorArray &amp;hairPositions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            (mod) Array of locations in world space</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  where the hair system is trying to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  move the follicle. The first entry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  corresponds to the root of the hair</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  and the last entry to the tip. If a</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  collision is detected, these values</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  should be updated appropriately.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  Note that hairPositions can change</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  from iteration to iteration on the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  same hair and same frame. You can set</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  a position, and then find the hair has</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  moved a bit the next iteration. There</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  are two reasons for this phenomenom:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    1) Other collisions could occur,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                       including self collision.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                    2) Stiffness is actually applied PER</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                       ITERATION.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MVectorArray &amp;hairPositionsLast:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            (mod) Array of the position at the previous</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  time for each entry in `hairPositions&#39;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MDoubleArray &amp;hairWidths:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            (in)  Array of widths, representing the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  width of the follcle at each entry in</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  `hairPositions&#39;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      int     startIndex  : (in)  First index in `hairPositions&#39; we</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  can move. This will be 0 unless the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  root is locked in which case it will</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  be 1.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      int     endIndex    : (in)  Last index in `hairPositions&#39; we can</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  move. Will be the full array (N-1)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  unless the tip is locked.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      double  curTime     : (in)  Start of current time interval.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      double  friction    : (in)  Frictional coefficient.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      void    *privateData: (in)  If a privateData record was returned</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  from preFrame() it will be passed in</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  here. This is an optimisation to save</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  expensive lookups of your private data</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                                  if stored on the node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    true        : Successfully performed collision testing and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            adjustment of the hair array data.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      bool    false       : An error occurred.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define EPSILON 0.0001</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>    collide(</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>       hairSystem,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>           follicleIndex,</div>\n\
<div class=\"line\">                <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a>        &amp;hairPositions,</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a>        &amp;hairPositionsLast,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a>  &amp;hairWidths,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>           startIndex,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>           endIndex,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>        curTime,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>        friction,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>          *privateData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the private data for the collision objects which was returned</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// from preFrame().</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    COLLISION_INFO *ci = (COLLISION_INFO *) privateData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !ci ) {</div>\n\
<div class=\"line\">        fprintf( stderr,<span class=\"stringliteral\">&quot;%s:%d: collide() privateData pointer is NULL\\n&quot;</span>,</div>\n\
<div class=\"line\">                __FILE__, __LINE__ );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If object has no vertices, or hair has no segments, then there is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// nothing to collide. In our example, we&#39;ll return here, but if you</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// want to implement your own hair processing such as smoothing or</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// freeze on the hair, you could proceed and let the processing happen</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// after the object loop so that the data gets processed even if no</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// collisions occur.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ci-&gt;numObjs &lt;= 0 || hairPositions.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &lt;= 0 ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>     obj;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( obj = 0; obj &lt; ci-&gt;numObjs; ++obj ) {</div>\n\
<div class=\"line\">        COLLISION_OBJ *co = &amp;ci-&gt;objs[obj];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// For our plug-in example, we just collide the segments of the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// hair against the top of the bounding box for the geometry.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// In an implementation where you only care about hair falling</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// downwards onto flat objects, this might be OK. However, in the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// most deluxe of implementation, you should do the following:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      o  Determine the motion of each face of your collision</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         object during the time range.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      o  Step through the follicle, and consider each segment</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         to be a moving cylinder where the start and end radii</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         can differ. The radii come from `hairWidths&#39; and the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         motion comes from the difference between `hairPositions&#39;</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         and `hairPositionsLast&#39;.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      o  Intersect each moving element (e.g. moving triangle</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         if you have a mesh obect) with each hair segment</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         e.g. moving cylinder). This intersection may occur</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         at a point within the frame. (Remember that the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         hairPositions[] array holds the DESIRED location where</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         the hair system wants the hair to go.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      o  There can be multiple collisions along a hair segment.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//         Use the first location found and the maximal velocity.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// If a collision is detected, the `hairPositions&#39; array should be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// updated. `hairPositionsLast&#39; may also be updated to provide a</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// dampening effect only.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Loop through the follicle, starting at the root and advancing</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// toward the tip.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>     numSegments = hairPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() - 1;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>     seg;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( seg = 0; seg &lt; numSegments; ++seg ) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the desired position of the segment (i.e. where the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// solver is trying to put the hair for the current frame)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// and the velocity required to get to that desired position.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Thus,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//      P = hairPositions       // Desired pos&#39;n at cur frame.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//      L = hairPositionsLast   // Position at prev frame.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//      V = P - L               // Desired velocity of hair.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> pStart = hairPositions[seg];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> pEnd = hairPositions[seg + 1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vStart = pStart - hairPositionsLast[seg];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> vEnd = pEnd - hairPositionsLast[seg + 1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// The proper way to time sample is to intersect the moving</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// segment of width `hairWidths[seg] to hairWidths[seg + 1]&#39;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// with the moving collision object. For the purposes of our</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// demo plug-in, we will simply assume the collision object is</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// static, the hair segment has zero width, and instead of</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// intersecting continuously in time, we will sample discrete</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// steps along the segment.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">            #define STEPS 4</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span>     step;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( step = 0; step &lt; STEPS; ++step ) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Compute the point for this step and its corresponding</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// velocity. This is a &quot;time swept&quot; point:</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  p1 = desired position at current time</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//  p0 = position at previous time to achieve desired pos</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> pCur, pPrev, v;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> fracAlongSeg = step / ( (double) STEPS );</div>\n\
<div class=\"line\">                v = vStart * ( 1.0 - fracAlongSeg ) + vEnd * fracAlongSeg;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> p1 = pStart * ( 1.0 - fracAlongSeg )</div>\n\
<div class=\"line\">                        + pEnd * fracAlongSeg;</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> p0 = p1 - v;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// See if BOTH endpoints are outside of the bounding box</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// on the same side. If so, then the segment cannot</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// intersect the bounding box. Note that we assume the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// bounding box is static.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (       (p0.x &lt; co-&gt;minx &amp;&amp; p1.x &lt; co-&gt;minx)</div>\n\
<div class=\"line\">                        || (p0.y &lt; co-&gt;miny &amp;&amp; p1.y &lt; co-&gt;miny)</div>\n\
<div class=\"line\">                        || (p0.z &lt; co-&gt;minz &amp;&amp; p1.z &lt; co-&gt;minz)</div>\n\
<div class=\"line\">                        || (p0.x &gt; co-&gt;maxx &amp;&amp; p1.x &gt; co-&gt;maxx)</div>\n\
<div class=\"line\">                        || (p0.y &gt; co-&gt;maxy &amp;&amp; p1.y &gt; co-&gt;maxy)</div>\n\
<div class=\"line\">                        || (p0.z &gt; co-&gt;maxz &amp;&amp; p1.z &gt; co-&gt;maxz) ) {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// For the purposes of this example plug-in, we&#39;ll assume</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the hair always moves downwards (due to gravity and</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// thus in the negative Y direction). As such, we only</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// need to test for collisions with the TOP of the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// bounding box. Expanding the example to all 6 sides is</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// left as an exercise for the reader.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Remember that p1 is the point at current time, and</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// p0 is the point at the previous time. Since we assume</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the bounding box to be static, this simplifies things.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> where(-100000,-100000,-100000); <span class=\"comment\">// Loc&#39;n of collision</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span>  fracTime;   <span class=\"comment\">// Time at which collision happens 0..1</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( fabs( v.y ) &lt; EPSILON      <span class=\"comment\">// velocity is zero</span></div>\n\
<div class=\"line\">                        &amp;&amp; fabs( p1.y - co-&gt;maxy ) &lt; EPSILON ) {    <span class=\"comment\">// right on the bbox</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Velocity is zero and the desired location (p1) is</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// right on top of the bounding box.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    where = p1;</div>\n\
<div class=\"line\">                    fracTime = 1.0;     <span class=\"comment\">// Collides right at end;</span></div>\n\
<div class=\"line\">                } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    fracTime = ( co-&gt;maxy -  p0.y ) / v.y;</div>\n\
<div class=\"line\">                    if ( fracTime &gt;= 0.0 &amp;&amp; fracTime &lt;= 1.0 ) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Compute the collision of the swept point with the</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// plane defined by the top of the bounding box.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        where = p0 + v * fracTime;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// If `seg&#39; lies between startIndex and endIndex</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// we can move it. If its &lt;= startIndex, the root is</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// locked and if &gt;= endIndex the tip is locked.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( seg &gt;= startIndex &amp;&amp; seg &lt;= endIndex ) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Since we are just colliding with the top of the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// bounding box, the normal where we hit is (0,1,0).</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// For the object velocity, we SHOULD measure the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// relative motion of the object during the time</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// interval, but for our example, we&#39;ll assume its</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// not moving (0,0,0).</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> segCollides = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> normal(0.0,1.0,0.0);    <span class=\"comment\">// normal is always up</span></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> objectVel(0.0,0.0,0.0); <span class=\"comment\">// assume bbox is static</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// If we get the this point, then the intersection</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// point `where&#39; is on the plane of the bounding box</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// top. See if it lies within the actual bounds of the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// boxtop, and if so compute the position and velocity</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// information and apply to the hair segment.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( where.x &gt;= co-&gt;minx &amp;&amp; where.x &lt;= co-&gt;maxx</div>\n\
<div class=\"line\">                            &amp;&amp; where.z &gt;= co-&gt;minz &amp;&amp; where.z &lt;= co-&gt;maxz</div>\n\
<div class=\"line\">                            &amp;&amp; fracTime &gt;= 0.0 &amp;&amp; fracTime &lt;= 0.0 ) {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// We have a collision at `where&#39; with the plane.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Compute the new velocity for the hair at the</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// point of collision.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> objVelAlongNormal = (objectVel * normal)</div>\n\
<div class=\"line\">                                * normal;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> objVelAlongTangent = objectVel</div>\n\
<div class=\"line\">                                - objVelAlongNormal;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> pntVelAlongTangent = v - ( v * normal )</div>\n\
<div class=\"line\">                                * normal;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> reflectedPntVelAlongTangent</div>\n\
<div class=\"line\">                                = pntVelAlongTangent * ( 1.0 - friction )</div>\n\
<div class=\"line\">                                + objVelAlongTangent * friction;</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> newVel = objVelAlongNormal</div>\n\
<div class=\"line\">                                + reflectedPntVelAlongTangent;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Update the hair position. It actually looks</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// more stable from a simulation standpoint to</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// just move the closest segment endpoint, but</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// you are free to experiment. What we&#39;ll do in</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// our example is move the closest segment end-</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// point by the amount the collided point (where)</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// has to move to have velocity `newVel&#39; yet still</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// pass through `where&#39; at time `fracTime&#39;.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> ( fracAlongSeg &gt; 0.5 ) {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> deltaPos = -newVel * fracTime;</div>\n\
<div class=\"line\">                            hairPositionsLast[seg + 1] += deltaPos;</div>\n\
<div class=\"line\">                            hairPositions[seg + 1] = hairPositionsLast[seg]</div>\n\
<div class=\"line\">                                    + newVel;</div>\n\
<div class=\"line\">                        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> deltaPos = newVel * fracTime;</div>\n\
<div class=\"line\">                            hairPositionsLast[seg] += deltaPos;</div>\n\
<div class=\"line\">                            hairPositions[seg] = hairPositionsLast[seg]</div>\n\
<div class=\"line\">                                    + newVel;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        segCollides = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Check for segment endpoints that may still be</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// inside. Note that segments which started out being</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// totally inside will never collide using the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// algorithm we use above, so we&#39;ll simply clamp them</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// here. One might expect an inside-the-bounding-box</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// test instead. However, this does not work if the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// collision object is a very thin object.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> inside = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( belowCollisionPlane( co, hairPositions[seg] ) ) {</div>\n\
<div class=\"line\">                        hairPositions[seg].y = co-&gt;maxy + EPSILON;</div>\n\
<div class=\"line\">                        hairPositionsLast[seg] = hairPositions[seg] - objectVel;</div>\n\
<div class=\"line\">                        inside = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( belowCollisionPlane( co, hairPositions[seg+1] ) ) {</div>\n\
<div class=\"line\">                        hairPositions[seg+1].y = co-&gt;maxy + EPSILON;</div>\n\
<div class=\"line\">                        hairPositionsLast[seg+1] = hairPositions[seg+1] - objectVel;</div>\n\
<div class=\"line\">                        inside = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// If we collided, go onto the next segment.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( segCollides || inside ) {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">goto</span> nextSeg;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">nextSeg:;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// You could perform any global filtering that you want on the hair</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// right here. For example: smoothing. This code is independent of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// whether or not a collision occurred, and note that collide() is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// called even with zero collision objects, so you will be guaranteed</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of reaching here once per hair per iteration.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Synopsis:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MStatus initializePlugin( MObject obj )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Invoked upon plug-in load to register the plug-in and initialise.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MObject obj         : (in)  Plug-in object being loaded.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MStatus::kSuccess   : Successfully performed any needed initial-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//                            isation for the plug-in.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MStatus statusCode  : Error was detected.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a>   plugin( obj, <span class=\"stringliteral\">&quot;Autodesk&quot;</span>, <span class=\"stringliteral\">&quot;8.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>( <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hair_system.html#a2428d36bd0a47deeb8c43d2138ace7da\">MHairSystem::registerCollisionSolverCollide</a>( collide ) );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>( <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hair_system.html#a78aa477cff5ec54b1810d5a3f13b6e1a\">MHairSystem::registerCollisionSolverPreFrame</a>( preFrame ) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( MS::kSuccess );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Synopsis:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MStatus uninitializePlugin( MObject obj )</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Invoked upon plug-in unload to deregister the plug-in and clean up.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Parameters:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MObject obj         : (in)  Plug-in object being unloaded.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MStatus::kSuccess   : Successfully performed any needed cleanup.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      MStatus statusCode  : Error was detected.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a>   plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>( <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hair_system.html#aed270f78aa2c10fe69fef015be60921a\">MHairSystem::unregisterCollisionSolverCollide</a>() );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/group___macros.html#gae3dc78724237805e00a767b587b7cf79\">CHECK_MSTATUS</a>( <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_hair_system.html#a01eeb1c0cf1fd6abe5b9a609157e3fca\">MHairSystem::unregisterCollisionSolverPreFrame</a>() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( MS::kSuccess );</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";