var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: AbcExport/MayaTransformWriter.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_export_2_maya_transform_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: AbcExport/MayaTransformWriter.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcExport/MayaTransformWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2012,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaTransformWriter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> addTranslate(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> &amp; iTrans,</div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> parentName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> xName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> yName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> zName,</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t iHint, <span class=\"keywordtype\">bool</span> inverse, <span class=\"keywordtype\">bool</span> forceStatic,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> forceAnimated, Alembic::AbcGeom::XformSample &amp; oSample,</div>\n\
<div class=\"line\">    std::vector &lt; AnimChan &gt; &amp; oAnimChanList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformOp op(Alembic::AbcGeom::kTranslateOperation, iHint);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> xPlug = iTrans.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(xName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> xSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            xSamp = util::getSampledType(xPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            xSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xVal = xPlug.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> yPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(yName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ySamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            ySamp = util::getSampledType(yPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            ySamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> yVal = yPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> zPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(zName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> zSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            zSamp = util::getSampledType(zPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            zSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> zVal = zPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// this is to handle the case where there is a connection to the parent</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// plug but not to the child plugs, if the connection is there then all</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of the children are considered animated</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(parentName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> parentSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            parentSamp = util::getSampledType(parentPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            parentSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (parentSamp != 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        xSamp = 1;</div>\n\
<div class=\"line\">        ySamp = 1;</div>\n\
<div class=\"line\">        zSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// something is sampled or not identity, add it to the stack</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (xSamp != 0 || ySamp != 0 || zSamp != 0 || xVal != 0.0 || yVal != 0.0 ||</div>\n\
<div class=\"line\">        zVal != 0.0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            xVal = -xVal;</div>\n\
<div class=\"line\">            yVal = -yVal;</div>\n\
<div class=\"line\">            zVal = -zVal;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        op.setChannelValue(0, xVal);</div>\n\
<div class=\"line\">        op.setChannelValue(1, yVal);</div>\n\
<div class=\"line\">        op.setChannelValue(2, zVal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (xSamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = xPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">                chan.scale = -1.0;</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 0;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ySamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = yPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">                chan.scale = -1.0;</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 1;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (zSamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = zPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">                chan.scale = -1.0;</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 2;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        oSample.addOp(op);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// names need to be passed in x,y,z order, iOrder is the order to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// use these indices</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> addRotate(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> &amp; iTrans,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> parentName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>* iNames, <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* iOrder,</div>\n\
<div class=\"line\">    Alembic::Util::uint8_t iHint, <span class=\"keywordtype\">bool</span> forceStatic, <span class=\"keywordtype\">bool</span> forceAnimated,</div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformSample &amp; oSample,</div>\n\
<div class=\"line\">    std::vector &lt; AnimChan &gt; &amp; oAnimChanList,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> oOpIndex[3])</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// for each possible rotation axis</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alembic::AbcGeom::XformOperationType rots[3] = {</div>\n\
<div class=\"line\">         Alembic::AbcGeom::kRotateXOperation,</div>\n\
<div class=\"line\">         Alembic::AbcGeom::kRotateYOperation,</div>\n\
<div class=\"line\">         Alembic::AbcGeom::kRotateZOperation</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// this is to handle the case where there is a connection to the parent</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// plug but not to the child plugs, if the connection is there then all</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of the children are considered animated</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(parentName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> parentSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            parentSamp = util::getSampledType(parentPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            parentSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// whether we are using the XYZ rotation order</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isXYZ = ((iOrder[0] == 0) &amp;&amp; (iOrder[1] == 1) &amp;&amp; (iOrder[2] == 2));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add them in backwards since we are dealing with a stack</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i = 2;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; i &gt; -1; i--)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index = iOrder[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(iNames[index], <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> samp = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">                samp = util::getSampledType(plug);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                samp = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (samp == 0)</div>\n\
<div class=\"line\">                samp = parentSamp;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> plugVal = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::XformOp op(rots[index], iHint);</div>\n\
<div class=\"line\">        op.setChannelValue(0, Alembic::AbcGeom::RadiansToDegrees(plugVal));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// the sampled case</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (samp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = plug;</div>\n\
<div class=\"line\">            chan.scale = Alembic::AbcGeom::RadiansToDegrees(1.0);</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 0;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// non sampled, XYZ axis and the angle is 0, do not add to the stack</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (isXYZ &amp;&amp; plugVal == 0.0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        oOpIndex[index] = oSample.addOp(op);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// the test on whether or not to add it is very similiar to addTranslate</span></div>\n\
<div class=\"line\"><span class=\"comment\">// but the operation it creates is very different</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> addShear(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> &amp; iTrans, <span class=\"keywordtype\">bool</span> forceStatic,</div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformSample &amp; oSample,</div>\n\
<div class=\"line\">    std::vector &lt; AnimChan &gt; &amp; oAnimChanList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformOp op(Alembic::AbcGeom::kMatrixOperation,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::kMayaShearHint);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> str = <span class=\"stringliteral\">&quot;shearXY&quot;</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> xyPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(str, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> xySamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        xySamp = util::getSampledType(xyPlug);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xyVal = xyPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    str = <span class=\"stringliteral\">&quot;shearXZ&quot;</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> xzPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(str, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> xzSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        xzSamp = util::getSampledType(xzPlug);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xzVal = xzPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    str = <span class=\"stringliteral\">&quot;shearYZ&quot;</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> yzPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(str, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> yzSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        yzSamp = util::getSampledType(yzPlug);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> yzVal = yzPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// this is to handle the case where there is a connection to the parent</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// plug but not to the child plugs, if the connection is there then all</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of the children are considered animated</span></div>\n\
<div class=\"line\">    str = <span class=\"stringliteral\">&quot;shear&quot;</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(str, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic &amp;&amp; util::getSampledType(parentPlug) != 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        xySamp = 1;</div>\n\
<div class=\"line\">        xzSamp = 1;</div>\n\
<div class=\"line\">        yzSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// something is sampled or not identity, add it to the stack</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (xySamp != 0 || xzSamp != 0 || yzSamp != 0 ||</div>\n\
<div class=\"line\">        xyVal != 0.0 || xzVal != 0.0 || yzVal != 0.0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Alembic::Abc::M44d m;</div>\n\
<div class=\"line\">        m.makeIdentity();</div>\n\
<div class=\"line\">        op.setMatrix(m);</div>\n\
<div class=\"line\">        op.setChannelValue(4, xyVal);</div>\n\
<div class=\"line\">        op.setChannelValue(8, xzVal);</div>\n\
<div class=\"line\">        op.setChannelValue(9, yzVal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (xySamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = xyPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 4;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (xzSamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = xzPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 8;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (yzSamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = yzPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 9;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        oSample.addOp(op);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// this test is very similiar to addTranslate, except that it doesn&#39;t add it</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to the stack if x,y, and z are 1.0</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> addScale(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> &amp; iTrans,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> parentName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> xName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> yName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> zName, <span class=\"keywordtype\">bool</span> inverse,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> forceStatic, <span class=\"keywordtype\">bool</span> forceAnimated, Alembic::AbcGeom::XformSample &amp; oSample,</div>\n\
<div class=\"line\">    std::vector &lt; AnimChan &gt; &amp; oAnimChanList)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::XformOp op(Alembic::AbcGeom::kScaleOperation,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::kScaleHint);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> xPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(xName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> xSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            xSamp = util::getSampledType(xPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            xSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xVal = xPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> yPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(yName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ySamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            ySamp = util::getSampledType(yPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            ySamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> yVal = yPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> zPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(zName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> zSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            zSamp = util::getSampledType(zPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            zSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> zVal = zPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// this is to handle the case where there is a connection to the parent</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// plug but not to the child plugs, if the connection is there then all</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of the children are considered animated</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> parentPlug = iTrans.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(parentName, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> parentSamp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!forceStatic)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!forceAnimated)</div>\n\
<div class=\"line\">            parentSamp = util::getSampledType(parentPlug);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            parentSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (parentSamp != 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        xSamp = 1;</div>\n\
<div class=\"line\">        ySamp = 1;</div>\n\
<div class=\"line\">        zSamp = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// something is sampled or not identity, add it to the stack</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (xSamp != 0 || ySamp != 0 || zSamp != 0 || xVal != 1.0 || yVal != 1.0 ||</div>\n\
<div class=\"line\">        zVal != 1.0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            xVal = util::inverseScale(xVal);</div>\n\
<div class=\"line\">            yVal = util::inverseScale(yVal);</div>\n\
<div class=\"line\">            zVal = util::inverseScale(zVal);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        op.setChannelValue(0, xVal);</div>\n\
<div class=\"line\">        op.setChannelValue(1, yVal);</div>\n\
<div class=\"line\">        op.setChannelValue(2, zVal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (xSamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = xPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">                chan.scale = -std::numeric_limits&lt;double&gt;::infinity();</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 0;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ySamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = yPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">                chan.scale = -std::numeric_limits&lt;double&gt;::infinity();</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 1;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (zSamp != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AnimChan chan;</div>\n\
<div class=\"line\">            chan.plug = zPlug;</div>\n\
<div class=\"line\">            chan.scale = 1.0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (inverse)</div>\n\
<div class=\"line\">                chan.scale = -std::numeric_limits&lt;double&gt;::infinity();</div>\n\
<div class=\"line\">            chan.opNum = oSample.getNumOps();</div>\n\
<div class=\"line\">            chan.channelNum = 2;</div>\n\
<div class=\"line\">            oAnimChanList.push_back(chan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        oSample.addOp(op);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> getSampledRotation(<span class=\"keyword\">const</span> Alembic::AbcGeom::XformSample&amp; sample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> opIndex[3], <span class=\"keywordtype\">double</span>&amp; xx, <span class=\"keywordtype\">double</span>&amp; yy, <span class=\"keywordtype\">double</span>&amp; zz)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    xx = 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opIndex[0] &lt; sample.getNumOps())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> angleX = sample[opIndex[0]].getChannelValue(0);</div>\n\
<div class=\"line\">        xx = Alembic::AbcGeom::DegreesToRadians(angleX);</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    yy = 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opIndex[1] &lt; sample.getNumOps())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> angleY = sample[opIndex[1]].getChannelValue(0);</div>\n\
<div class=\"line\">        yy = Alembic::AbcGeom::DegreesToRadians(angleY);</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    zz = 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opIndex[2] &lt; sample.getNumOps())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> angleZ = sample[opIndex[2]].getChannelValue(0);</div>\n\
<div class=\"line\">        zz = Alembic::AbcGeom::DegreesToRadians(angleZ);</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> success;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> setSampledRotation(Alembic::AbcGeom::XformSample&amp; sample,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">size_t</span> opIndex[3], <span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> success = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opIndex[0] &lt; sample.getNumOps())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        sample[opIndex[0]].setChannelValue(0, Alembic::AbcGeom::RadiansToDegrees(xx));</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opIndex[1] &lt; sample.getNumOps())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        sample[opIndex[1]].setChannelValue(0, Alembic::AbcGeom::RadiansToDegrees(yy));</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (opIndex[2] &lt; sample.getNumOps())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        sample[opIndex[2]].setChannelValue(0, Alembic::AbcGeom::RadiansToDegrees(zz));</div>\n\
<div class=\"line\">        success = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> success;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaTransformWriter::MayaTransformWriter(Alembic::AbcGeom::OObject &amp; iParent,</div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; iDag, Alembic::Util::uint32_t iTimeIndex, <span class=\"keyword\">const</span> JobArgs &amp; iArgs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mFilterEulerRotations = iArgs.filterEulerRotations;</div>\n\
<div class=\"line\">    mJointOrientOpIndex[0] = mJointOrientOpIndex[1] = mJointOrientOpIndex[2] =</div>\n\
<div class=\"line\">    mRotateOpIndex[0]      = mRotateOpIndex[1]      = mRotateOpIndex[2]      =</div>\n\
<div class=\"line\">    mRotateAxisOpIndex[0]  = mRotateAxisOpIndex[1]  = mRotateAxisOpIndex[2]  = ~size_t(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iDag.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab8b14d1ed753088b316e8ee8c5d38ca9\">MFn::kJoint</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html\">MFnIkJoint</a> joint(iDag);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> jointName = joint.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        jointName = util::stripNamespaces(jointName, iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OXform obj(iParent, jointName.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">            iTimeIndex);</div>\n\
<div class=\"line\">        mSchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(joint, iArgs))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cp = mSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            up = mSchema.getUserProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, joint,</div>\n\
<div class=\"line\">            iTimeIndex, iArgs, <span class=\"keyword\">false</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!iArgs.writeTransforms)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!iArgs.worldSpace)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            pushTransformStack(joint, iTimeIndex == 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// need to look at inheritsTransform</span></div>\n\
<div class=\"line\">            <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(iDag);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> inheritPlug = dagNode.findPlug(<span class=\"stringliteral\">&quot;inheritsTransform&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!inheritPlug.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (util::getSampledType(inheritPlug) != 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mInheritsPlug = inheritPlug;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                mSample.setInheritsXforms(inheritPlug.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// no animated inherits plug and no animated samples?</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// then use the default time sampling</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mAnimChanList.empty() &amp;&amp; mInheritsPlug.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mSchema.setTimeSampling(0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// everything is default, don&#39;t write anything</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mSample.getNumOps() == 0 &amp;&amp; mSample.getInheritsXforms())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mSchema.set(mSample);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> trans(iDag);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> transName = trans.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        transName = util::stripNamespaces(transName, iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OXform obj(iParent, transName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">            iTimeIndex);</div>\n\
<div class=\"line\">        mSchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(trans, iArgs))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cp = mSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            up = mSchema.getUserProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, trans,</div>\n\
<div class=\"line\">            iTimeIndex, iArgs, <span class=\"keyword\">false</span>));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!iArgs.writeTransforms)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!iArgs.worldSpace)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            pushTransformStack(trans, iTimeIndex == 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// need to look at inheritsTransform</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(iDag);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> inheritPlug = dagNode.findPlug(<span class=\"stringliteral\">&quot;inheritsTransform&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (util::getSampledType(inheritPlug) != 0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mInheritsPlug = inheritPlug;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                mSample.setInheritsXforms(inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// no animated inherits plug and no animated samples?</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// then use the default time sampling</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mAnimChanList.empty() &amp;&amp; mInheritsPlug.isNull())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mSchema.setTimeSampling(0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// everything is default, don&#39;t write anything</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (mSample.getNumOps() == 0 &amp;&amp; mSample.getInheritsXforms())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mSchema.set(mSample);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if we didn&#39;t bail early then we need to add all the transform</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// information at the current node and above</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy the dag path because we&#39;ll be popping from it</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dag(iDag);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numPaths = dag.length();</div>\n\
<div class=\"line\">    std::vector&lt; MDagPath &gt; dagList;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = numPaths - 1; i &gt; -1; i--, dag.pop())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        dagList.push_back(dag);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// inheritsTransform exists on both joints and transforms</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dag);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> inheritPlug = dagNode.findPlug(<span class=\"stringliteral\">&quot;inheritsTransform&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// if inheritsTransform exists and is set to false, then we</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// don&#39;t need to worry about ancestor nodes above this one</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>() &amp;&amp; !inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; MDagPath &gt;::iterator iStart = dagList.begin();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::vector&lt; MDagPath &gt;::iterator iCur = dagList.end();</div>\n\
<div class=\"line\">    iCur--;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// now loop backwards over our dagpath list so we push ancestor nodes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// first, all the way down to the current node</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; iCur != iStart; iCur--)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// only add it to the stack don&#39;t write it yet!</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iCur-&gt;hasFn(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab8b14d1ed753088b316e8ee8c5d38ca9\">MFn::kJoint</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html\">MFnIkJoint</a> joint(*iCur);</div>\n\
<div class=\"line\">            pushTransformStack(joint, iTimeIndex == 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> trans(*iCur);</div>\n\
<div class=\"line\">            pushTransformStack(trans, iTimeIndex == 0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// finally add any transform info on the final node and write it</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iCur-&gt;hasFn(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab8b14d1ed753088b316e8ee8c5d38ca9\">MFn::kJoint</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html\">MFnIkJoint</a> joint(*iCur);</div>\n\
<div class=\"line\">        pushTransformStack(joint, iTimeIndex == 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> trans(*iCur);</div>\n\
<div class=\"line\">        pushTransformStack(trans, iTimeIndex == 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// need to look at inheritsTransform</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(iDag);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> inheritPlug = dagNode.findPlug(<span class=\"stringliteral\">&quot;inheritsTransform&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (util::getSampledType(inheritPlug) != 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mInheritsPlug = inheritPlug;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        mSample.setInheritsXforms(inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// no animated inherits plug and no animated samples?</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// then use the default time sampling</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mAnimChanList.empty() &amp;&amp; mInheritsPlug.isNull())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mSchema.setTimeSampling(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// everything is default, don&#39;t write anything and use the default</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// time sampling</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mSample.getNumOps() == 0 &amp;&amp; mSample.getInheritsXforms())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mSchema.set(mSample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaTransformWriter::MayaTransformWriter(MayaTransformWriter &amp; iParent,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; iDag, Alembic::Util::uint32_t iTimeIndex, <span class=\"keyword\">const</span> JobArgs &amp; iArgs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mFilterEulerRotations = iArgs.filterEulerRotations;</div>\n\
<div class=\"line\">    mJointOrientOpIndex[0] = mJointOrientOpIndex[1] = mJointOrientOpIndex[2] =</div>\n\
<div class=\"line\">    mRotateOpIndex[0]      = mRotateOpIndex[1]      = mRotateOpIndex[2]      =</div>\n\
<div class=\"line\">    mRotateAxisOpIndex[0]  = mRotateAxisOpIndex[1]  = mRotateAxisOpIndex[2]  = ~size_t(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iDag.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab8b14d1ed753088b316e8ee8c5d38ca9\">MFn::kJoint</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html\">MFnIkJoint</a> joint(iDag);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> jointName = joint.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        jointName = util::stripNamespaces(jointName, iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OXform obj(iParent.getObject(), jointName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">            iTimeIndex);</div>\n\
<div class=\"line\">        mSchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(joint, iArgs))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cp = mSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            up = mSchema.getUserProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, joint,</div>\n\
<div class=\"line\">            iTimeIndex, iArgs, <span class=\"keyword\">false</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!iArgs.writeTransforms)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pushTransformStack(joint, iTimeIndex == 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> trans(iDag);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> transName = trans.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        transName = util::stripNamespaces(transName, iArgs.stripNamespace);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::AbcGeom::OXform obj(iParent.getObject(), transName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">            iTimeIndex);</div>\n\
<div class=\"line\">        mSchema = obj.getSchema();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty cp;</div>\n\
<div class=\"line\">        Alembic::Abc::OCompoundProperty up;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (AttributesWriter::hasAnyAttr(trans, iArgs))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            cp = mSchema.getArbGeomParams();</div>\n\
<div class=\"line\">            up = mSchema.getUserProperties();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mAttrs = AttributesWriterPtr(<span class=\"keyword\">new</span> AttributesWriter(cp, up, obj, trans,</div>\n\
<div class=\"line\">            iTimeIndex, iArgs, <span class=\"keyword\">false</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!iArgs.writeTransforms)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pushTransformStack(trans, iTimeIndex == 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// need to look at inheritsTransform</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(iDag);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> inheritPlug = dagNode.findPlug(<span class=\"stringliteral\">&quot;inheritsTransform&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (util::getSampledType(inheritPlug) != 0)</div>\n\
<div class=\"line\">            mInheritsPlug = inheritPlug;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mSample.setInheritsXforms(inheritPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// everything is default, don&#39;t write anything</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mSample.getNumOps() == 0 &amp;&amp; mSample.getInheritsXforms())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    mSchema.set(mSample);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MayaTransformWriter::~MayaTransformWriter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaTransformWriter::write()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> numSamples = mAnimChanList.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numSamples &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::vector &lt; AnimChan &gt;::iterator it, itEnd;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (it = mAnimChanList.begin(), itEnd = mAnimChanList.end();</div>\n\
<div class=\"line\">            it != itEnd; ++it)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> val = it-&gt;plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a62411b4c90ef50797f86b049bb1f934b\">asDouble</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (it-&gt;scale == -std::numeric_limits&lt;double&gt;::infinity())</div>\n\
<div class=\"line\">                val = util::inverseScale(val);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (it-&gt;scale != 1.0)</div>\n\
<div class=\"line\">                val *= it-&gt;scale;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            mSample[it-&gt;opNum].setChannelValue(it-&gt;channelNum, val);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mInheritsPlug.isNull())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mSample.setInheritsXforms(mInheritsPlug.asBool());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mFilterEulerRotations)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> xx(0), yy(0), zz(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (getSampledRotation(mSample, mJointOrientOpIndex, xx, yy, zz))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> euler(xx, yy, zz, mPrevJointOrientSolution.order);</div>\n\
<div class=\"line\">                euler.setToClosestSolution(mPrevJointOrientSolution);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// update sample with new solution</span></div>\n\
<div class=\"line\">                setSampledRotation(mSample, mJointOrientOpIndex, euler.x, euler.y, euler.z);</div>\n\
<div class=\"line\">                mPrevJointOrientSolution = euler;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (getSampledRotation(mSample, mRotateOpIndex, xx, yy, zz))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> euler(xx, yy, zz, mPrevRotateSolution.order);</div>\n\
<div class=\"line\">                euler.setToClosestSolution(mPrevRotateSolution);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// update sample with new solution</span></div>\n\
<div class=\"line\">                setSampledRotation(mSample, mRotateOpIndex, euler.x, euler.y, euler.z);</div>\n\
<div class=\"line\">                mPrevRotateSolution = euler;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (getSampledRotation(mSample, mRotateAxisOpIndex, xx, yy, zz))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> euler(xx, yy, zz, mPrevRotateAxisSolution.order);</div>\n\
<div class=\"line\">                euler.setToClosestSolution(mPrevRotateAxisSolution);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// update sample with new solution</span></div>\n\
<div class=\"line\">                setSampledRotation(mSample, mRotateAxisOpIndex, euler.x, euler.y, euler.z);</div>\n\
<div class=\"line\">                mPrevRotateAxisSolution = euler;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        mSchema.set(mSample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> MayaTransformWriter::isAnimated()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mAnimChanList.size() &gt; 0 || !mInheritsPlug.isNull();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaTransformWriter::pushTransformStack(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html\">MFnTransform</a> &amp; iTrans,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iForceStatic)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the translate</span></div>\n\
<div class=\"line\">    addTranslate(iTrans, <span class=\"stringliteral\">&quot;translate&quot;</span>, <span class=\"stringliteral\">&quot;translateX&quot;</span>, <span class=\"stringliteral\">&quot;translateY&quot;</span>, <span class=\"stringliteral\">&quot;translateZ&quot;</span>,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::kTranslateHint, <span class=\"keyword\">false</span>, iForceStatic, <span class=\"keyword\">false</span>, mSample,</div>\n\
<div class=\"line\">        mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the rotate pivot translate</span></div>\n\
<div class=\"line\">    addTranslate(iTrans, <span class=\"stringliteral\">&quot;rotatePivotTranslate&quot;</span>, <span class=\"stringliteral\">&quot;rotatePivotTranslateX&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;rotatePivotTranslateY&quot;</span>, <span class=\"stringliteral\">&quot;rotatePivotTranslateZ&quot;</span>,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::kRotatePivotTranslationHint, <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">            iForceStatic, <span class=\"keyword\">false</span>, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the rotate pivot</span></div>\n\
<div class=\"line\">    addTranslate(iTrans, <span class=\"stringliteral\">&quot;rotatePivot&quot;</span>, <span class=\"stringliteral\">&quot;rotatePivotX&quot;</span>, <span class=\"stringliteral\">&quot;rotatePivotY&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;rotatePivotZ&quot;</span>,  Alembic::AbcGeom::kRotatePivotPointHint,</div>\n\
<div class=\"line\">        <span class=\"keyword\">false</span>, iForceStatic, <span class=\"keyword\">false</span>, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect rotate names</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> rotateNames[3];</div>\n\
<div class=\"line\">    rotateNames[0] = <span class=\"stringliteral\">&quot;rotateX&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[1] = <span class=\"stringliteral\">&quot;rotateY&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[2] = <span class=\"stringliteral\">&quot;rotateZ&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> rotOrder[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if this returns false then the rotation order was kInvalid or kLast</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bc\">MTransformationMatrix::RotationOrder</a> eRotOrder(iTrans.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a4279a68f07bfa316935e61610786e6aa\">rotationOrder</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (util::getRotOrder(eRotOrder, rotOrder[0], rotOrder[1],</div>\n\
<div class=\"line\">        rotOrder[2]))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addRotate(iTrans, <span class=\"stringliteral\">&quot;rotate&quot;</span>, rotateNames, rotOrder,</div>\n\
<div class=\"line\">            Alembic::AbcGeom::kRotateHint, iForceStatic, <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">            mSample, mAnimChanList, mRotateOpIndex);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// now look at the rotation orientation, aka rotate axis</span></div>\n\
<div class=\"line\">    rotateNames[0] = <span class=\"stringliteral\">&quot;rotateAxisX&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[1] = <span class=\"stringliteral\">&quot;rotateAxisY&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[2] = <span class=\"stringliteral\">&quot;rotateAxisZ&quot;</span>;</div>\n\
<div class=\"line\">    rotOrder[0] = 0;</div>\n\
<div class=\"line\">    rotOrder[1] = 1;</div>\n\
<div class=\"line\">    rotOrder[2] = 2;</div>\n\
<div class=\"line\">    addRotate(iTrans, <span class=\"stringliteral\">&quot;rotateAxis&quot;</span>, rotateNames, rotOrder,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::kRotateOrientationHint, iForceStatic, <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">        mSample, mAnimChanList, mRotateAxisOpIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// invert the rotate pivot if necessary</span></div>\n\
<div class=\"line\">    addTranslate(iTrans, <span class=\"stringliteral\">&quot;rotatePivot&quot;</span>, <span class=\"stringliteral\">&quot;rotatePivotX&quot;</span>, <span class=\"stringliteral\">&quot;rotatePivotY&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;rotatePivotZ&quot;</span>, Alembic::AbcGeom::kRotatePivotPointHint,</div>\n\
<div class=\"line\">        <span class=\"keyword\">true</span>, iForceStatic, <span class=\"keyword\">false</span>, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the scale pivot translation</span></div>\n\
<div class=\"line\">    addTranslate(iTrans, <span class=\"stringliteral\">&quot;scalePivotTranslate&quot;</span>, <span class=\"stringliteral\">&quot;scalePivotTranslateX&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;scalePivotTranslateY&quot;</span>, <span class=\"stringliteral\">&quot;scalePivotTranslateZ&quot;</span>,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::kScalePivotTranslationHint, <span class=\"keyword\">false</span>, iForceStatic,</div>\n\
<div class=\"line\">        <span class=\"keyword\">false</span>, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the scale pivot point</span></div>\n\
<div class=\"line\">    addTranslate(iTrans, <span class=\"stringliteral\">&quot;scalePivot&quot;</span>, <span class=\"stringliteral\">&quot;scalePivotX&quot;</span>, <span class=\"stringliteral\">&quot;scalePivotY&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;scalePivotZ&quot;</span>, Alembic::AbcGeom::kScalePivotPointHint, <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">        iForceStatic, <span class=\"keyword\">false</span>, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the shear</span></div>\n\
<div class=\"line\">    addShear(iTrans, iForceStatic, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add the scale</span></div>\n\
<div class=\"line\">    addScale(iTrans, <span class=\"stringliteral\">&quot;scale&quot;</span>, <span class=\"stringliteral\">&quot;scaleX&quot;</span>, <span class=\"stringliteral\">&quot;scaleY&quot;</span>, <span class=\"stringliteral\">&quot;scaleZ&quot;</span>, <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">        iForceStatic, <span class=\"keyword\">false</span>, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inverse the scale pivot point if necessary</span></div>\n\
<div class=\"line\">    addTranslate(iTrans, <span class=\"stringliteral\">&quot;scalePivot&quot;</span>, <span class=\"stringliteral\">&quot;scalePivotX&quot;</span>, <span class=\"stringliteral\">&quot;scalePivotY&quot;</span>,</div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;scalePivotZ&quot;</span>, Alembic::AbcGeom::kScalePivotPointHint, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">        iForceStatic, <span class=\"keyword\">false</span>, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// remember current rotation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mFilterEulerRotations)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> xx(0), yy(0), zz(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// there are 2 rotation order enum definitions:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//     MEulerRotation::RotationOrder = MTransformationMatrix::RotationOrder-1</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (getSampledRotation( mSample, mRotateOpIndex, xx, yy, zz ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mPrevRotateSolution.setValue(xx, yy, zz, (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af3d74c777e523f2725cdf87c15a4b5bc\">MEulerRotation::RotationOrder</a>)(eRotOrder-1));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (getSampledRotation( mSample, mRotateAxisOpIndex, xx, yy, zz ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mPrevRotateAxisSolution.setValue(xx, yy, zz, <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af3d74c777e523f2725cdf87c15a4b5bcacfa82ee0eaf4075f3cda4152dd020d99\">MEulerRotation::kXYZ</a>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> MayaTransformWriter::pushTransformStack(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html\">MFnIkJoint</a> &amp; iJoint,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> iForceStatic)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Some special cases that the joint is animated but has no input connections.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> forceAnimated = util::isDrivenByFBIK(iJoint) || util::isDrivenBySplineIK(iJoint);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the translate</span></div>\n\
<div class=\"line\">    addTranslate(iJoint, <span class=\"stringliteral\">&quot;translate&quot;</span>, <span class=\"stringliteral\">&quot;translateX&quot;</span>, <span class=\"stringliteral\">&quot;translateY&quot;</span>, <span class=\"stringliteral\">&quot;translateZ&quot;</span>,</div>\n\
<div class=\"line\">        Alembic::AbcGeom::kTranslateHint, <span class=\"keyword\">false</span>, iForceStatic, forceAnimated,</div>\n\
<div class=\"line\">        mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the inverseParent scale</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// [IS] is ignored when Segment Scale Compensate is false</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> scaleCompensatePlug = iJoint.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;segmentScaleCompensate&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (scaleCompensatePlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a69b4092a85b4edf58b7d50f331cc38cf\">asBool</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addScale(iJoint, <span class=\"stringliteral\">&quot;inverseScale&quot;</span>, <span class=\"stringliteral\">&quot;inverseScaleX&quot;</span>, <span class=\"stringliteral\">&quot;inverseScaleY&quot;</span>,</div>\n\
<div class=\"line\">            <span class=\"stringliteral\">&quot;inverseScaleZ&quot;</span>, <span class=\"keyword\">true</span>, iForceStatic, forceAnimated, mSample, mAnimChanList);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bc\">MTransformationMatrix::RotationOrder</a> eJointOrientOrder, eRotOrder, eRotateAxisOrder;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> vals[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// for reordering rotate names</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> rotateNames[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> rotOrder[3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// now look at the joint orientation</span></div>\n\
<div class=\"line\">    rotateNames[0] = <span class=\"stringliteral\">&quot;jointOrientX&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[1] = <span class=\"stringliteral\">&quot;jointOrientY&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[2] = <span class=\"stringliteral\">&quot;jointOrientZ&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iJoint.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html#a0f41ef4fb484400b2472a6d9c1c5afcb\">getOrientation</a>(vals, eJointOrientOrder);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (util::getRotOrder(eJointOrientOrder, rotOrder[0], rotOrder[1], rotOrder[2]))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addRotate(iJoint, <span class=\"stringliteral\">&quot;jointOrient&quot;</span>, rotateNames, rotOrder,</div>\n\
<div class=\"line\">            Alembic::AbcGeom::kRotateHint, iForceStatic, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">            mSample, mAnimChanList, mJointOrientOpIndex);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    rotateNames[0] = <span class=\"stringliteral\">&quot;rotateX&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[1] = <span class=\"stringliteral\">&quot;rotateY&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[2] = <span class=\"stringliteral\">&quot;rotateZ&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if this returns false then the rotation order was kInvalid or kLast</span></div>\n\
<div class=\"line\">    eRotOrder = iJoint.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a4279a68f07bfa316935e61610786e6aa\">rotationOrder</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (util::getRotOrder(eRotOrder, rotOrder[0], rotOrder[1],</div>\n\
<div class=\"line\">        rotOrder[2]))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addRotate(iJoint, <span class=\"stringliteral\">&quot;rotate&quot;</span>, rotateNames, rotOrder,</div>\n\
<div class=\"line\">            Alembic::AbcGeom::kRotateHint, iForceStatic, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">            mSample, mAnimChanList, mRotateOpIndex);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// now look at the rotation orientation, aka rotate axis</span></div>\n\
<div class=\"line\">    rotateNames[0] = <span class=\"stringliteral\">&quot;rotateAxisX&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[1] = <span class=\"stringliteral\">&quot;rotateAxisY&quot;</span>;</div>\n\
<div class=\"line\">    rotateNames[2] = <span class=\"stringliteral\">&quot;rotateAxisZ&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iJoint.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_ik_joint.html#a77418f351887f797ea214317a0c6e1bd\">getScaleOrientation</a>(vals, eRotateAxisOrder);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (util::getRotOrder(eRotateAxisOrder, rotOrder[0], rotOrder[1], rotOrder[2]))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        addRotate(iJoint, <span class=\"stringliteral\">&quot;rotateAxis&quot;</span>, rotateNames, rotOrder,</div>\n\
<div class=\"line\">            Alembic::AbcGeom::kRotateOrientationHint, iForceStatic, <span class=\"keyword\">true</span>,</div>\n\
<div class=\"line\">            mSample, mAnimChanList, mRotateAxisOpIndex);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// inspect the scale</span></div>\n\
<div class=\"line\">    addScale(iJoint, <span class=\"stringliteral\">&quot;scale&quot;</span>, <span class=\"stringliteral\">&quot;scaleX&quot;</span>, <span class=\"stringliteral\">&quot;scaleY&quot;</span>, <span class=\"stringliteral\">&quot;scaleZ&quot;</span>, <span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">        iForceStatic, forceAnimated, mSample, mAnimChanList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// remember current rotation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mFilterEulerRotations)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> xx(0), yy(0), zz(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// there are 2 rotation order enum definitions:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//     MEulerRotation::RotationOrder = MTransformationMatrix::RotationOrder-1</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (getSampledRotation( mSample, mJointOrientOpIndex, xx, yy, zz ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mPrevJointOrientSolution.setValue(xx, yy, zz, (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af3d74c777e523f2725cdf87c15a4b5bc\">MEulerRotation::RotationOrder</a>)(eJointOrientOrder-1));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (getSampledRotation( mSample, mRotateOpIndex, xx, yy, zz ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mPrevRotateSolution.setValue(xx, yy, zz, (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af3d74c777e523f2725cdf87c15a4b5bc\">MEulerRotation::RotationOrder</a>)(eRotOrder-1));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (getSampledRotation( mSample, mRotateAxisOpIndex, xx, yy, zz ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mPrevRotateAxisSolution.setValue(xx, yy, zz, (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af3d74c777e523f2725cdf87c15a4b5bc\">MEulerRotation::RotationOrder</a>)(eRotateAxisOrder-1));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";