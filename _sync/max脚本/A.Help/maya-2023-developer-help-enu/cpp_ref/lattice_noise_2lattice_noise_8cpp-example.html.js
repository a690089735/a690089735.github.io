var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: latticeNoise/latticeNoise.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'lattice_noise_2lattice_noise_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: latticeNoise/latticeNoise.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">latticeNoise/latticeNoise.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the dependency graph node &quot;latticeNoise&quot; and MEL command &quot;latticeNoise&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in is an example of the following:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - how to have node attributes input and output geometry</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - how to modify dependency graph connections using the API</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - how to take Maya objects as arguments to a user defined MEL command</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The &quot;latticeNoise&quot; command creates a new lattice deformer around the currently selected geometry</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or around the objects specified on the command line. The command also inserts a &quot;latticeNoise&quot; node</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in between the lattice shape in the DAG and the node that performs the deformation.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The end effect of the &quot;latticeNoise&quot; command is that the objects inside the lattice deform</span></div>\n\
<div class=\"line\"><span class=\"comment\">// with respect to the lattice, but they also wobble about randomly as noise is applied to the lattice points.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The &quot;latticeNoise&quot; node has attributes for amplitude and frequency that control the amount of noise applied.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// An example of using the command is:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  latticeNoise nurbsSphereShape1 nurbsConeShape1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;latticeNoise.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register latticeNoise node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plugin.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html#aaae14c466b57bba85f52b96e2f73a9db\">registerNode</a>( <span class=\"stringliteral\">&quot;latticeNoise&quot;</span>, latticeNoiseNode::id,</div>\n\
<div class=\"line\">                                         latticeNoiseNode::creator,</div>\n\
<div class=\"line\">                                         latticeNoiseNode::initialize);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register latticeNoise command</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plugin.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html#a66f0e341f74cba9d100ab8a45e71cc0b\">registerCommand</a>( <span class=\"stringliteral\">&quot;latticeNoise&quot;</span>, latticeNoiseCmd::creator );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        plugin.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html#ad79b620e76ce78e1f6b218cfe4d09b46\">deregisterNode</a>( latticeNoiseNode::id );</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerCommand&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Deregister latticeNoise node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plugin.deregisterNode( latticeNoiseNode::id ); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register latticeNoise command</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    status = plugin.deregisterCommand( <span class=\"stringliteral\">&quot;latticeNoise&quot;</span> ); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterCommand&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Class: noise</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The noise class is used for generating pseudo-random continuous noise.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The noise values generated are always between 0 and 1.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The technique used is a simple lattice noise algorithm based upon one </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      by Ken Perlin.  This particular implementation is adapted from </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Darwyn Peachey&#39;s (Texturing and Modeling: a Procedural Approach, S. Ebert</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Editor, 1994).</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> kTableMask = TABLE_SIZE - 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//                       PUBLIC                             //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> noise::atValue( <span class=\"keywordtype\">float</span> x )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Get the noise value at the given point in 1-space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Arguments:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      x - the point at which to calculate the noise</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the noise value at the point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ix; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fx; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !isInitialized ) {</div>\n\
<div class=\"line\">        initTable( 23479015 );</div>\n\
<div class=\"line\">        isInitialized = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ix = (int)floorf( x );</div>\n\
<div class=\"line\">    fx = x - (float)ix; </div>\n\
<div class=\"line\"> </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> spline( fx, value( ix - 1 ),</div>\n\
<div class=\"line\">                       value( ix ),</div>\n\
<div class=\"line\">                       value( ix + 1 ),</div>\n\
<div class=\"line\">                       value( ix + 2 ) );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> noise::atPoint( <span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y, <span class=\"keywordtype\">float</span> z )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Get the noise value at the given point in 3-space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Arguments:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      x - x component of point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      y - x component of point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      z - x component of point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the noise value at the point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ix, iy, iz;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i, j, k;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fx, fy, fz;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> xknots[4], yknots[4], zknots[4];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !isInitialized ) {</div>\n\
<div class=\"line\">        initTable( 23479015 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ix = (int)floorf( x );</div>\n\
<div class=\"line\">    fx = x - (float)ix; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iy = (int)floorf( y );</div>\n\
<div class=\"line\">    fy = y - (float)iy;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iz = (int)floorf( z );</div>\n\
<div class=\"line\">    fz = z - (float)iz;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( k = -1; k &lt;= 2; k++ ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( j = -1; j &lt;= 2; j++ ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( i = -1; i &lt;= 2 ; i++ ) {</div>\n\
<div class=\"line\">                xknots[i+1] = value( ix + i, iy + j, iz + k );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            yknots[j+1] = spline( fx, xknots[0], xknots[1], xknots[2], xknots[3] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        zknots[k+1] = spline( fy, yknots[0], yknots[1], yknots[2], yknots[3] );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> val = spline( fz, zknots[0], zknots[1], zknots[2], zknots[3] ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> val;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">pnt noise::atPointAndTime( <span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> y, <span class=\"keywordtype\">float</span> z, <span class=\"keywordtype\">float</span> t )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Get three noise values at the given point in 4-space.  This is actually</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      a reasonably expensive operation.  It requires 255 simple spline </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      interpolations.  However, the noise function is continuous. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Arguments:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      x - x component of point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      y - x component of point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      z - x component of point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      t - t component of point (time component)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Return Value:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      the noise value at the point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    pnt ret;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ix, iy, iz, it;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i, j, k, l;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> fx, fy, fz, ft;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> xknots[3][4], yknots[3][4], zknots[3][4], tknots[3][4];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !isInitialized ) {</div>\n\
<div class=\"line\">        initTable( 23479015 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ix = (int)floorf( x );</div>\n\
<div class=\"line\">    fx = x - (float)ix; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iy = (int)floorf( y );</div>\n\
<div class=\"line\">    fy = y - (float)iy;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iz = (int)floorf( z );</div>\n\
<div class=\"line\">    fz = z - (float)iz;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    it = (int)floorf( t);</div>\n\
<div class=\"line\">    ft = t - (float)it;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( l = -1; l &lt;= 2; l++ ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( k = -1; k &lt;= 2; k++ ) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( j = -1; j &lt;= 2; j++ ) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( i = -1; i &lt;= 2 ; i++ ) {</div>\n\
<div class=\"line\">                    xknots[0][i+1] = value( ix + i, iy + j, iz + k, it + l,</div>\n\
<div class=\"line\">                                            valueTable1 ); </div>\n\
<div class=\"line\">                    xknots[1][i+1] = value( ix + i, iy + j, iz + k, it + l,</div>\n\
<div class=\"line\">                                            valueTable2 ); </div>\n\
<div class=\"line\">                    xknots[2][i+1] = value( ix + i, iy + j, iz + k, it + l,</div>\n\
<div class=\"line\">                                            valueTable3 ); </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                yknots[0][j+1] = spline( fx, xknots[0][0], xknots[0][1], </div>\n\
<div class=\"line\">                                         xknots[0][2], xknots[0][3] );</div>\n\
<div class=\"line\">                yknots[1][j+1] = spline( fx, xknots[1][0], xknots[1][1], </div>\n\
<div class=\"line\">                                         xknots[1][2], xknots[1][3] );</div>\n\
<div class=\"line\">                yknots[2][j+1] = spline( fx, xknots[2][0], xknots[2][1], </div>\n\
<div class=\"line\">                                         xknots[2][2], xknots[2][3] );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            zknots[0][k+1] = spline( fy, yknots[0][0], yknots[0][1], </div>\n\
<div class=\"line\">                                     yknots[0][2], yknots[0][3] );</div>\n\
<div class=\"line\">            zknots[1][k+1] = spline( fy, yknots[1][0], yknots[1][1], </div>\n\
<div class=\"line\">                                     yknots[1][2], yknots[1][3] );</div>\n\
<div class=\"line\">            zknots[2][k+1] = spline( fy, yknots[2][0], yknots[2][1], </div>\n\
<div class=\"line\">                                     yknots[2][2], yknots[2][3] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        tknots[0][l+1] = spline( fz, zknots[0][0], zknots[0][1], </div>\n\
<div class=\"line\">                                 zknots[0][2], zknots[0][3] );</div>\n\
<div class=\"line\">        tknots[1][l+1] = spline( fz, zknots[1][0], zknots[1][1], </div>\n\
<div class=\"line\">                                 zknots[1][2], zknots[1][3] );</div>\n\
<div class=\"line\">        tknots[2][l+1] = spline( fz, zknots[2][0], zknots[2][1], </div>\n\
<div class=\"line\">                                 zknots[2][2], zknots[2][3] );</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    ret.x = spline( ft, tknots[0][0], tknots[0][1], tknots[0][2], tknots[0][3] ); </div>\n\
<div class=\"line\">    ret.y = spline( ft, tknots[1][0], tknots[1][1], tknots[1][2], tknots[1][3] ); </div>\n\
<div class=\"line\">    ret.z = spline( ft, tknots[2][0], tknots[2][1], tknots[2][2], tknots[2][3] ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"> </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>  noise::initTable( <span class=\"keywordtype\">long</span> seed )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Initialize the table of random values with the given seed. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Arguments:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      seed - the new seed value </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    srand48( seed );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; TABLE_SIZE; i++ ) {</div>\n\
<div class=\"line\">        valueTable1[i] = (float)drand48();</div>\n\
<div class=\"line\">        valueTable2[i] = (float)drand48();</div>\n\
<div class=\"line\">        valueTable3[i] = (float)drand48();</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    isInitialized = 1; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//                       PRIVATE                            //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span> </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> noise::spline( <span class=\"keywordtype\">float</span> x, <span class=\"keywordtype\">float</span> knot0, <span class=\"keywordtype\">float</span> knot1, <span class=\"keywordtype\">float</span> knot2, <span class=\"keywordtype\">float</span> knot3 )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This is a simple version of a Catmull-Rom spline interpolation.  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Assumptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      0 &lt; x &lt; 1</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> c0, c1, c2, c3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Evaluate span of cubic at x using Horner&#39;s rule</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    c3 = (-0.5F * knot0 ) + ( 1.5F * knot1 ) + (-1.5F * knot2 ) + ( 0.5F * knot3 );</div>\n\
<div class=\"line\">    c2 = ( 1.0F * knot0 ) + (-2.5F * knot1 ) + ( 2.0F * knot2 ) + (-0.5F * knot3 );</div>\n\
<div class=\"line\">    c1 = (-0.5F * knot0 ) + ( 0.0F * knot1 ) + ( 0.5F * knot2 ) + ( 0.0F * knot3 );</div>\n\
<div class=\"line\">    c0 = ( 0.0F * knot0 ) + ( 1.0F * knot1 ) + ( 0.0F * knot2 ) + ( 0.0F * knot3 );</div>\n\
<div class=\"line\">          </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ( ( c3 * x + c2 ) * x + c1 ) * x + c0;;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> noise::isInitialized = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> noise::permtable[256] = {</div>\n\
<div class=\"line\">    254,    91,     242,    186,    90,     204,    85,     133,    233,</div>\n\
<div class=\"line\">    50,     187,    49,     182,    224,    144,    166,    7,      51,</div>\n\
<div class=\"line\">    20,     179,    36,     203,    114,    156,    195,    40,     24,</div>\n\
<div class=\"line\">    60,     162,    84,     126,    102,    63,     194,    220,    161,</div>\n\
<div class=\"line\">    72,     94,     193,    229,    140,    57,     3,      189,    106,</div>\n\
<div class=\"line\">    54,     164,    198,    199,    44,     245,    235,    100,    87,</div>\n\
<div class=\"line\">    25,     41,     62,     111,    13,     70,     27,     82,     69,</div>\n\
<div class=\"line\">    53,     66,     247,    124,    67,     163,    125,    155,    228,</div>\n\
<div class=\"line\">    122,    19,     113,    143,    121,    9,      1,      241,    171,</div>\n\
<div class=\"line\">    200,    83,     244,    185,    170,    141,    115,    190,    154,</div>\n\
<div class=\"line\">    48,     32,     178,    127,    167,    56,     134,    15,     160,</div>\n\
<div class=\"line\">    238,    64,     6,      11,     196,    232,    26,     89,     0,</div>\n\
<div class=\"line\">    219,    112,    68,     30,     215,    227,    75,     132,    71,</div>\n\
<div class=\"line\">    239,    251,    92,     14,     104,    231,    29,     180,    150,</div>\n\
<div class=\"line\">    226,    191,    47,     73,     37,     183,    88,     105,    42,</div>\n\
<div class=\"line\">    22,     2,      38,     5,      119,    74,     249,    184,    52,</div>\n\
<div class=\"line\">    8,      55,     118,    255,    206,    173,    165,    78,     31,</div>\n\
<div class=\"line\">    123,    98,     212,    80,     139,    61,     138,    77,     177,</div>\n\
<div class=\"line\">    45,     137,    145,    28,     168,    128,    95,     223,    35,</div>\n\
<div class=\"line\">    205,    76,     211,    175,    81,     33,     207,    21,     131,</div>\n\
<div class=\"line\">    58,     152,    16,     240,    18,     96,     210,    109,    214,</div>\n\
<div class=\"line\">    216,    202,    148,    34,     146,    117,    176,    93,     246,</div>\n\
<div class=\"line\">    172,    97,     159,    197,    218,    65,     147,    253,    221,</div>\n\
<div class=\"line\">    217,    79,     101,    142,    23,     149,    99,     39,     12,</div>\n\
<div class=\"line\">    135,    110,    234,    108,    153,    129,    4,      169,    174,</div>\n\
<div class=\"line\">    116,    243,    130,    107,    222,    10,     43,     188,    46,</div>\n\
<div class=\"line\">    213,    252,    86,     157,    192,    236,    158,    120,    17,</div>\n\
<div class=\"line\">    103,    248,    225,    230,    250,    208,    181,    151,    237,</div>\n\
<div class=\"line\">    201,    59,     136,    209 </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> noise::valueTable1[256];</div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> noise::valueTable2[256];</div>\n\
<div class=\"line\"><span class=\"keywordtype\">float</span> noise::valueTable3[256];</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";