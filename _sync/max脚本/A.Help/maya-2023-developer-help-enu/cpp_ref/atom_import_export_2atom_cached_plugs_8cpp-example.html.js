var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: atomImportExport/atomCachedPlugs.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'atom_import_export_2atom_cached_plugs_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: atomImportExport/atomCachedPlugs.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">atomImportExport/atomCachedPlugs.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  File Name:  atomCachedPlugs.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      When exporting we need to collect all items that we want to cache</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This holds cached only.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomCachedPlugs.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimUtil.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObjectArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDGContextGuard.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;fstream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomCachedValues&lt;T&gt;::resize(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> stride)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mNumItems = numItems;</div>\n\
<div class=\"line\">    mStride = stride;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> total = numItems *stride;</div>\n\
<div class=\"line\">    mValues.resize(total);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomCachedValues&lt;T&gt;::setValue(T &amp;value,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> item,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> element)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mValues[(item * mStride) + element] = value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\">T atomCachedValues&lt;T&gt;::getValue(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> item, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> element)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mValues[(item * mStride) + element];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    atomShortValues</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">atomShortValues::atomShortValues(<a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;plug, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems) :atomBasePlugAndValues(plug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mCachedValues.resize(numItems,1);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomShortValues::setValue(<a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a> &amp;context,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attribute = mPlug.attribute();</div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context_guard.html\">MDGContextGuard</a> guard(context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( attribute.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnAttrib(attribute);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>(fnAttrib.unitType())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">short</span> ival = value == <span class=\"keyword\">true</span> ? 1 : 0;</div>\n\
<div class=\"line\">                mCachedValues.setValue(ival,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a589716b974587a5b575bf02d0b74245a\">MFnNumericData::kChar</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">char</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">short</span> ival = (short) value;</div>\n\
<div class=\"line\">                mCachedValues.setValue(ival,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">short</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad68d8aedd6c8e61a3b259d6984b47d6f\">MFn::kEnumAttribute</a> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">short</span> value;</div>\n\
<div class=\"line\">        mPlug.getValue(value);</div>\n\
<div class=\"line\">        mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomShortValues::writeToAtomFile(std::ofstream &amp; clip)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;i&lt;mCachedValues.numItems();++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        clip &lt;&lt; mCachedValues.getValue(i);</div>\n\
<div class=\"line\">        clip &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    atomIntValues</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">atomIntValues::atomIntValues(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;plug, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems) :atomBasePlugAndValues(plug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mCachedValues.resize(numItems,1);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomIntValues::setValue(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a> &amp;context,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attribute = mPlug.attribute();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context_guard.html\">MDGContextGuard</a> guard(context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnAttrib(attribute);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(fnAttrib.unitType()==<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a762e1602488228e1b11b83501bb3832e\">MFnNumericData::kLong</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> value;</div>\n\
<div class=\"line\">            mPlug.getValue(value);</div>\n\
<div class=\"line\">            mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomIntValues::writeToAtomFile(std::ofstream &amp; clip)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;i&lt;mCachedValues.numItems();++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        clip &lt;&lt; mCachedValues.getValue(i);</div>\n\
<div class=\"line\">        clip &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    atomFloatValues</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">atomFloatValues::atomFloatValues(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;plug, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> stride) :atomBasePlugAndValues(plug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mCachedValues.resize(numItems,stride);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomFloatValues::setValue(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a> &amp;context,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attribute = mPlug.attribute();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context_guard.html\">MDGContextGuard</a> guard(context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnAttrib(attribute);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>(fnAttrib.unitType())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomFloatValues::writeToAtomFile(std::ofstream &amp; clip)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;i&lt;mCachedValues.numItems();++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j=0;j&lt;mCachedValues.stride();++j)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            clip &lt;&lt; mCachedValues.getValue(i,j);</div>\n\
<div class=\"line\">            clip &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    atomDoubleValues</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">atomDoubleValues::atomDoubleValues(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;plug, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems,<span class=\"keywordtype\">double</span> scale) :atomBasePlugAndValues(plug), mScale(scale)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    mCachedValues.resize(numItems,1);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomDoubleValues::setValue(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a> &amp;context,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> index)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attribute = mPlug.attribute();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context_guard.html\">MDGContextGuard</a> guard(context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnAttrib(attribute);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>(fnAttrib.unitType())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1f483b65a79a5100d8f7a91e2c4c68a3\">MFn::kUnitAttribute</a> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html\">MFnUnitAttribute</a> fnAttrib(attribute);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span>(fnAttrib.unitType())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a7a9a81c214c05358fc6382f8e1f54196\">MFnUnitAttribute::kAngle</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                value *= mScale;</div>\n\
<div class=\"line\">                mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a1925172d8d6f77cdb98f7f486f706024\">MFnUnitAttribute::kDistance</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                value *= mScale;</div>\n\
<div class=\"line\">                mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a65c3a8bb75ba1a57e36c86855169752e\">MFnUnitAttribute::kTime</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> value;</div>\n\
<div class=\"line\">                mPlug.getValue(value);</div>\n\
<div class=\"line\">                mCachedValues.setValue(value,index);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomDoubleValues::writeToAtomFile(std::ofstream &amp; clip)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;i&lt;mCachedValues.numItems();++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        clip &lt;&lt; mCachedValues.getValue(i);</div>\n\
<div class=\"line\">        clip &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">atom cached plugs</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomCachedPlugs::atomCachedPlugs(<a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;<span class=\"keywordtype\">object</span>, <span class=\"keyword\">const</span> <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>&amp; animatablePlugs,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> sdk, <span class=\"keywordtype\">bool</span> constraint, <span class=\"keywordtype\">bool</span> animLayers, std::set&lt;std::string&gt; &amp;attrStrings,</div>\n\
<div class=\"line\">        atomTemplateReader &amp;templateReader,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html#abceb2331ad056e3c5ad27894199a49ed\">MAngle::Unit</a> angularUnit,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49ed\">MDistance::Unit</a> linearUnit)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    getCachedPlugs(nodeName,animatablePlugs, sdk, constraint, animLayers, attrStrings,templateReader,numItems,angularUnit,linearUnit);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomCachedPlugs::~atomCachedPlugs()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> z =0; z&lt; mCachedPlugs.size(); ++z)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(mCachedPlugs[z])</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> mCachedPlugs[z];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomCachedPlugs::getCachedPlugs(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp;animatablePlugs,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> sdk, <span class=\"keywordtype\">bool</span> constraint, <span class=\"keywordtype\">bool</span> animLayers,</div>\n\
<div class=\"line\">        std::set&lt;std::string&gt; &amp;attrStrings,atomTemplateReader &amp;templateReader,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html#abceb2331ad056e3c5ad27894199a49ed\">MAngle::Unit</a> angularUnit,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#abceb2331ad056e3c5ad27894199a49ed\">MDistance::Unit</a> linearUnit)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::set&lt;std::string&gt;::const_iterator constIter = attrStrings.end();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numPlugs = animatablePlugs.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> cachedPlugs;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; numPlugs; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = animatablePlugs[i];</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> destPlugArray;</div>\n\
<div class=\"line\">        <span class=\"comment\">//temp test here. If the plug is connected, but not directly to an anim curve, then cache it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//will get smarter about this later, but good for testing for now.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isConnected = plug.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a> (destPlugArray, <span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isConnectedButNotToAnimCurve = (isConnected    &amp;&amp; (destPlugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 1 &amp;&amp; </div>\n\
<div class=\"line\">            destPlugArray[0].node().hasFn(<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af63f422e6ba7a68f03391f9dbfb580fd\">MFn::kAnimCurve</a>)==<span class=\"keyword\">false</span>));</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> animCurveIsConnected = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">//now check to see if the anim curve returned is connected and driven by something else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isConnectedButNotToAnimCurve ==<span class=\"keyword\">false</span> &amp;&amp; destPlugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() ==1 &amp;&amp;</div>\n\
<div class=\"line\">            destPlugArray[0].node().hasFn(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af63f422e6ba7a68f03391f9dbfb580fd\">MFn::kAnimCurve</a>)==<span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> curve = destPlugArray[0];</div>\n\
<div class=\"line\">            destPlugArray.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">            curve.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>(destPlugArray,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            animCurveIsConnected = destPlugArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; 0; <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> shouldBeCached = isConnectedButNotToAnimCurve ||animCurveIsConnected;</div>\n\
<div class=\"line\">        <span class=\"comment\">//if not cached yet, see if hooked up to a sdk, don&#39;t do the same for a constraint or anim layers</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//since shouldBeCached will be true for them. Only sdk&#39;s may still be false here.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(sdk==<span class=\"keyword\">false</span>) <span class=\"comment\">//sdk is false when not doing export edits so do caching instead.</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> animationNodes;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> drivers;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#a21f7f750e7b42f0dfb81b38e7f9fe07b\">MAnimUtil::findSetDrivenKeyAnimation</a>(plug,animationNodes,</div>\n\
<div class=\"line\">                drivers)) <span class=\"comment\">//it&#39;s an sdk</span></div>\n\
<div class=\"line\">                shouldBeCached = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shouldBeCached ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> attrPlug (plug);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = attrPlug.attribute();</div>\n\
<div class=\"line\">            <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> fnLeafAttr (attrObj);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName;</div>\n\
<div class=\"line\">            atomBase::getAttrName(plug,attrName);</div>\n\
<div class=\"line\">            <span class=\"comment\">//template filter check first</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(templateReader.findNodeAndAttr(nodeName,attrName) == <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">//then if we have specified attr strings then don&#39;t save it out if it&#39;s not found</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//must use shortName since the channelBox command will always return a short name</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//the long name flag there is only used to turn long name (or nice name) display on</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(attrStrings.size() == 0 || attrStrings.find(std::string(fnLeafAttr.shortName().asChar())) != constIter)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">//okay at this point we may have a contraint which we don&#39;t want to cache if we are export editing them</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(constraint)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> constraint;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> targets;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#acf9093c039ca3eecb8833780e281f3fa\">MAnimUtil::findConstraint</a>(plug,constraint,targets)) <span class=\"comment\">//it&#39;s a constraint, don&#39;t cache</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">//or it may be hooked up to animLayers, again we don&#39;t want to cache it if that option is on</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(animLayers)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> layers;</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> plugs;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(MAnimUtil::findAnimationLayers(plug,layers,plugs))</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                cachedPlugs.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a12338b7a1987007e931b031646c9b4be\">append</a>(plug);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">//okay if we have any cached plugs then create the correct value array </span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(cachedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt;0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        mCachedPlugs.resize(cachedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i =0 ;i&lt; cachedPlugs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            atomBasePlugAndValues * plugAndValue = NULL;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;plug = cachedPlugs[i];</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attribute = plug.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a240c26abf3ba7645371553cb130691fa\">attribute</a>();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af4d74c9963cfa765f9acbf542a2dd9ed\">MFn::kNumericAttribute</a> ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> fnAttrib(attribute);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span>(fnAttrib.unitType())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a46b9941f17f513de8e30e46ac53e684b\">MFnNumericData::kByte</a>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a589716b974587a5b575bf02d0b74245a\">MFnNumericData::kChar</a>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>:</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a868c593a83291c3c805f13f49e46bd44\">MFnNumericData::kShort</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plugAndValue = <span class=\"keyword\">new</span> atomShortValues(plug, numItems);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a762e1602488228e1b11b83501bb3832e\">MFnNumericData::kLong</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plugAndValue = <span class=\"keyword\">new</span> atomIntValues(plug, numItems);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plugAndValue = <span class=\"keyword\">new</span> atomFloatValues(plug, numItems,1);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plugAndValue = <span class=\"keyword\">new</span> atomDoubleValues(plug, numItems,1.0);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1f483b65a79a5100d8f7a91e2c4c68a3\">MFn::kUnitAttribute</a> ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html\">MFnUnitAttribute</a> fnAttrib(attribute);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">switch</span>(fnAttrib.unitType())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a7a9a81c214c05358fc6382f8e1f54196\">MFnUnitAttribute::kAngle</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a name=\"_a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html\">MAngle</a> angle(1.0);</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> scale = angle.as(angularUnit);</div>\n\
<div class=\"line\">                        plugAndValue = <span class=\"keyword\">new</span> atomDoubleValues(plug, numItems,scale);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a1925172d8d6f77cdb98f7f486f706024\">MFnUnitAttribute::kDistance</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a> distance(1.0);</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> scale = distance.as(linearUnit);</div>\n\
<div class=\"line\">                        plugAndValue = <span class=\"keyword\">new</span> atomDoubleValues(plug, numItems,scale);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">case</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a65c3a8bb75ba1a57e36c86855169752e\">MFnUnitAttribute::kTime</a>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        plugAndValue = <span class=\"keyword\">new</span> atomDoubleValues(plug, numItems,1.0);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( attribute.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad68d8aedd6c8e61a3b259d6984b47d6f\">MFn::kEnumAttribute</a> ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                plugAndValue = <span class=\"keyword\">new</span> atomShortValues(plug, numItems);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">            mCachedPlugs[i] = plugAndValue;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; atomCachedPlugs::getPlug(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> item)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mCachedPlugs[item]-&gt;getPlug();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomCachedPlugs::calculateValue(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a> &amp;ctx,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> item)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0;i&lt; mCachedPlugs.size(); ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(mCachedPlugs[i])</div>\n\
<div class=\"line\">            mCachedPlugs[i]-&gt;<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(ctx,item);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomCachedPlugs::writeValues(std::ofstream &amp;clip,<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> item)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(item&lt; mCachedPlugs.size())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(mCachedPlugs[item])</div>\n\
<div class=\"line\">            mCachedPlugs[item]-&gt;writeToAtomFile(clip);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//todo need to add layerName support</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomCachedPlugs::isAttrCached(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;attrName,<span class=\"keyword\">const</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;layerName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(hasCached())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//currently since the plugs are in a vector we iterate one by one,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//we may change this implementation to use a map instead to speed this up though it won&#39;t be too</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//bad we don&#39;t think.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0;i&lt; mCachedPlugs.size(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(mCachedPlugs[i])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = mCachedPlugs[i]-&gt;getPlug();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name;</div>\n\
<div class=\"line\">                atomBase::getAttrName(plug,name);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(name == attrName)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";