var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: torusField/torusField.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'torus_field_2torus_field_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: torusField/torusField.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">torusField/torusField.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the dependency graph node &quot;torusField&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This node is an example of a dynamics field that creates a attract-repel field</span></div>\n\
<div class=\"line\"><span class=\"comment\">// between itself and a distance.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The example MEL script &quot;torusField.mel&quot; shows how to create the node</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and appropriate connections to correctly establish a user defined field. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;torusField.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTime.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVectorArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDoubleArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArrayDataBuilder.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCompoundAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnUnitAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnVectorArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDoubleArrayData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixData.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> torusField::aMinDistance;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> torusField::aAttractDistance;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> torusField::aRepelDistance;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> torusField::aDrag;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> torusField::aSwarmAmplitude;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> torusField::aSwarmFrequency;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> torusField::aSwarmPhase;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> torusField::id( 0x80018 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *torusField::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> torusField;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> torusField::initialize()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Initialize the node, attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> numAttr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create the field basic attributes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    aMinDistance = numAttr.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;minDistance&quot;</span>,<span class=\"stringliteral\">&quot;mnd&quot;</span>,<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">    numAttr.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>( 0.0 );</div>\n\
<div class=\"line\">    numAttr.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    status = addAttribute( aMinDistance );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR adding aMinDistance attribute.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aAttractDistance = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;attractDistance&quot;</span>,<span class=\"stringliteral\">&quot;ad&quot;</span>,</div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>( 20.0 );</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    status = addAttribute( aAttractDistance );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR adding aAttractDistance attribute.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aRepelDistance = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;repelDistance&quot;</span>,<span class=\"stringliteral\">&quot;rd&quot;</span>,</div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>( 10.0 );</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    status = addAttribute( aRepelDistance );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR adding aRepelDistance attribute.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aDrag = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;drag&quot;</span>, <span class=\"stringliteral\">&quot;d&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>( 0.0 );</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    status = addAttribute( aDrag );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR adding aDrag attribute.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aSwarmAmplitude = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;swarmAmplitude&quot;</span>, <span class=\"stringliteral\">&quot;samp&quot;</span>,</div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>( 0.0 );</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    status = addAttribute( aSwarmAmplitude );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR adding aSwarmAmplitude attribute.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aSwarmFrequency = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;swarmFrequency&quot;</span>, <span class=\"stringliteral\">&quot;sfrq&quot;</span>,</div>\n\
<div class=\"line\">                                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>( 1.0 );</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    status = addAttribute( aSwarmFrequency );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR adding aSwarmFrequency attribute.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    aSwarmPhase = numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;swarmPhase&quot;</span>, <span class=\"stringliteral\">&quot;sa&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7acd70f5d2b5e8c1bb8e83b0482a33e518\">MFnNumericData::kDouble</a>);</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>( 0.0 );</div>\n\
<div class=\"line\">    numAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    status = addAttribute( aSwarmPhase );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR adding aSwarmPhase attribute.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// the new attribute will affect output force.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//status = attributeAffects( aMinDistance, outputForce );</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//McheckErr(status, &quot;ERROR in attributeAffects(aMinDistance,outputForce).\\n&quot;);</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//status = attributeAffects( aAttractDistance, outputForce );</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//McheckErr(status, &quot;ERROR in attributeAffects(aAttractDistance,outputForce).\\n&quot;);</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//status = attributeAffects( aRepelDistance, outputForce );</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//McheckErr(status, &quot;ERROR in attributeAffects(aRepelDistance,outputForce).\\n&quot;);</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//status = attributeAffects( aDrag, outputForce );</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//McheckErr(status, &quot;ERROR in attributeAffects(aDrag,outputForce).\\n&quot;);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( MS::kSuccess );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> torusField::compute(<span class=\"keyword\">const</span> <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      compute output force.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !(plug == mOutputForce) )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>( MS::kUnknownParameter );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the logical index of the element this plug refers to.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> multiIndex = plug.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>( &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in plug.logicalIndex.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get input data handle, use outputArrayValue since we do not</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// want to evaluate both inputs, only the one related to the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// requested multiIndex. Evaluating both inputs at once would cause</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a dependency graph loop.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> hInputArray = block.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a11fd41c7d97d656a2bffdc23015f1496\">outputArrayValue</a>( mInputData, &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status,<span class=\"stringliteral\">&quot;ERROR in hInputArray = block.outputArrayValue().\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = hInputArray.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a8d77f0fea87bb6854b60cd199bf26240\">jumpToElement</a>( multiIndex );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR: hInputArray.jumpToElement failed.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get children of aInputData.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hCompond = hInputArray.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a81d24dca6d647d8d0a8fe0ef2c63b170\">inputValue</a>( &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in hCompond=hInputArray.inputValue\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hPosition = hCompond.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a58951af761a410e17982060cae4fdf49\">child</a>( mInputPositions );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dPosition = hPosition.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnPosition( dPosition );</div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> points = fnPosition.array( &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in fnPosition.array(), not find points.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hVelocity = hCompond.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a58951af761a410e17982060cae4fdf49\">child</a>( mInputVelocities );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dVelocity = hVelocity.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnVelocity( dVelocity );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> velocities = fnVelocity.array( &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in fnVelocity.array(), not find velocities.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hMass = hCompond.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a58951af761a410e17982060cae4fdf49\">child</a>( mInputMass );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dMass = hMass.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_double_array_data.html\">MFnDoubleArrayData</a> fnMass( dMass );</div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> masses = fnMass.array( &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in fnMass.array(), not find masses.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute the output force.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> forceArray;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useMaxDistSet = useMaxDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( useMaxDistSet )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        applyMaxDist( block, points, velocities, masses, forceArray );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        applyNoMaxDist( block, points, velocities, masses, forceArray );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get output data handle</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> hOutArray = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a11fd41c7d97d656a2bffdc23015f1496\">outputArrayValue</a>( mOutputForce, &amp;status);</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in hOutArray = block.outputArrayValue.\\n&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html\">MArrayDataBuilder</a> bOutArray = hOutArray.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a48b34beab40fa4ae60cfe40e556f591a\">builder</a>( &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in bOutArray = hOutArray.builder.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get output force array from block.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hOut = bOutArray.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_builder.html#a6d195a24b9624f2e38079e1ce412c9bb\">addElement</a>(multiIndex, &amp;status);</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in hOut = bOutArray.addElement.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnOutputForce;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dOutputForce = fnOutputForce.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>( forceArray, &amp;status );</div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR in dOutputForce = fnOutputForce.create\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update data block with new output force data.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    hOut.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>( dOutputForce );</div>\n\
<div class=\"line\">    block.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#aceb46f1065ef1cd730c4ab15d61466cc\">setClean</a>( plug );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( MS::kSuccess );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> torusField::applyNoMaxDist</div>\n\
<div class=\"line\">    (</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> &amp;block,              <span class=\"comment\">// get field param from this block</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp;points,     <span class=\"comment\">// current position of Object</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp;velocities, <span class=\"comment\">// current velocity of Object</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> &amp;<span class=\"comment\">/*masses*/</span>,     <span class=\"comment\">// mass of Object</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp;outputForce       <span class=\"comment\">// output force</span></div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Compute output force in the case that the useMaxDistance is not set.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// points and velocities should have the same length. If not return.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( points.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != velocities.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear the output force array.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    outputForce.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get field parameters.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> magValue = magnitudeValue( block );</div>\n\
<div class=\"line\">    <span class=\"comment\">// double attenValue = attenuationValue( block );</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> minDist = minDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> attractDist = attractDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> repelDist = repelDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dragMag = dragValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> swarmAmp = swarmAmplitudeValue( block );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get owner&#39;s data. posArray may have only one point which is the centroid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (if this has owner) or field position(if without owner). Or it may have</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a list of points if with owner and applyPerVertex.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> posArray;</div>\n\
<div class=\"line\">    posArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">    ownerPosition( block, posArray );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> fieldPosCount = posArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> receptorSize = points.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// With this model,if max distance isn&#39;t set then we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// also don&#39;t attenuate, because 1 - dist/maxDist isn&#39;t</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// meaningful. No max distance and no attenuation.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (dragMag &lt;= 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (swarmAmp &lt;= 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// No max dist, no attenuation, no drag, no swarm</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ptIndex = 0; ptIndex &lt; receptorSize; ptIndex ++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> forceV(0.0,0.0,0.0);</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;receptorPoint = points[ptIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply from every field position to every receptor position.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">int</span> i = fieldPosCount; --i&gt;=0; )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = (receptorPoint-posArray[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> distance = difference.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt; minDist) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt;= repelDist)</div>\n\
<div class=\"line\">                        forceV += difference * magValue;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (distance &gt;= attractDist)</div>\n\
<div class=\"line\">                        forceV += -difference * magValue;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                outputForce.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( forceV );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// No max dist, no attenuation, no drag, yes swarm</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ptIndex = 0; ptIndex &lt; receptorSize; ptIndex ++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> forceV(0.0,0.0,0.0);</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;receptorPoint = points[ptIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply from every field position to every receptor position.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> distance = 0.0;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(i = fieldPosCount; --i&gt;=0; )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = (receptorPoint-posArray[i]);</div>\n\
<div class=\"line\">                    distance = difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt; minDist) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt;= repelDist)</div>\n\
<div class=\"line\">                        forceV += difference * magValue;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (distance &gt;= attractDist)</div>\n\
<div class=\"line\">                        forceV += -difference * magValue;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply swarm only if the object is inside the zone</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the repulsion-attraction is pushing the object to.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( distance &gt;= repelDist &amp;&amp; distance &lt;= attractDist)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> frequency = swarmFrequencyValue( block );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> phase( 0.0, 0.0, swarmPhaseValue(block) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Add swarm in here</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(i = fieldPosCount; --i &gt;= 0;)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = receptorPoint - posArray[i];</div>\n\
<div class=\"line\">                        difference = (difference + phase) * frequency;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> *noiseEffect = &amp;difference.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( (noiseEffect[0] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[0] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[1] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[1] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[2] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[2] &gt;  2147483647.0) )</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> noiseOut[4];</div>\n\
<div class=\"line\">                        noiseFunction( noiseEffect, noiseOut );</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> swarmForce( noiseOut[0] * swarmAmp,</div>\n\
<div class=\"line\">                                            noiseOut[1] * swarmAmp,</div>\n\
<div class=\"line\">                                            noiseOut[2] * swarmAmp );</div>\n\
<div class=\"line\">                        forceV += swarmForce;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                outputForce.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( forceV );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (swarmAmp &lt;= 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Yes drag, no swarm</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ptIndex = 0; ptIndex &lt; receptorSize; ptIndex ++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>&amp; receptorPoint = points[ptIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply from every field position to every receptor position.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> forceV(0,0,0);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> distance = 0.0;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">int</span> i = fieldPosCount; --i&gt;=0; )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = (receptorPoint-posArray[i]);</div>\n\
<div class=\"line\">                    distance = difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt; minDist) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt;= repelDist)</div>\n\
<div class=\"line\">                        forceV += difference * magValue;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (distance &gt;= attractDist)</div>\n\
<div class=\"line\">                        forceV += -difference * magValue;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply drag only if the object is inside the zone</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the repulsion-attraction is pushing the object to.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( distance &gt;= repelDist &amp;&amp; distance &lt;= attractDist)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fieldPosCount &gt; 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> dragForceV;</div>\n\
<div class=\"line\">                        dragForceV = velocities[ptIndex] *</div>\n\
<div class=\"line\">                                                (-dragMag) * fieldPosCount;</div>\n\
<div class=\"line\">                        forceV += dragForceV;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                outputForce.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( forceV );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Yes drag, yes swarm</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ptIndex = 0; ptIndex &lt; receptorSize; ptIndex ++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;receptorPoint = points[ptIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply from every field position to every receptor position.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> forceV(0,0,0);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> distance = 0.0;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>(i = fieldPosCount; --i&gt;=0; )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = (receptorPoint-posArray[i]);</div>\n\
<div class=\"line\">                    distance = difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt; minDist) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (distance &lt;= repelDist)</div>\n\
<div class=\"line\">                        forceV += difference * magValue;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (distance &gt;= attractDist)</div>\n\
<div class=\"line\">                        forceV += -difference * magValue;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply drag and swarm only if the object is inside</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the zone the repulsion-attraction is pushing the object to.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( distance &gt;= repelDist &amp;&amp; distance &lt;= attractDist)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fieldPosCount &gt; 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> dragForceV;</div>\n\
<div class=\"line\">                        dragForceV = velocities[ptIndex] *</div>\n\
<div class=\"line\">                                                (-dragMag) * fieldPosCount;</div>\n\
<div class=\"line\">                        forceV += dragForceV;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Add swarm in here</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> frequency = swarmFrequencyValue( block );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> phase( 0.0, 0.0, swarmPhaseValue(block) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(i = fieldPosCount; --i&gt;=0; )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = receptorPoint - posArray[i];</div>\n\
<div class=\"line\">                        difference = (difference + phase) * frequency;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> *noiseEffect = &amp;difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>( (noiseEffect[0] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[0] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[1] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[1] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[2] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                            (noiseEffect[2] &gt;  2147483647.0) )</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> noiseOut[4];</div>\n\
<div class=\"line\">                        noiseFunction( noiseEffect, noiseOut );</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> swarmForce( noiseOut[0] * swarmAmp,</div>\n\
<div class=\"line\">                                            noiseOut[1] * swarmAmp,</div>\n\
<div class=\"line\">                                            noiseOut[2] * swarmAmp );</div>\n\
<div class=\"line\">                        forceV += swarmForce;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                outputForce.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( forceV );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> torusField::applyMaxDist</div>\n\
<div class=\"line\">    (</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block,              <span class=\"comment\">// get field param from this block</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp;points,     <span class=\"comment\">// current position of Object</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp;velocities, <span class=\"comment\">// current velocity of Object</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> &amp;<span class=\"comment\">/*masses*/</span>,     <span class=\"comment\">// mass of Object</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp;outputForce       <span class=\"comment\">// output force</span></div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Compute output force in the case that the useMaxDistance is set.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// points and velocities should have the same length. If not return.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( points.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != velocities.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear the output force array.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    outputForce.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get field parameters.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> magValue = magnitudeValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> attenValue = attenuationValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> maxDist = maxDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> minDist = minDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> attractDist = attractDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> repelDist = repelDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dragMag = dragValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> swarmAmp = swarmAmplitudeValue( block );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get owner&#39;s data. posArray may have only one point which is the centroid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (if this has owner) or field position(if without owner). Or it may have</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a list of points if with owner and applyPerVertex.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> posArray;</div>\n\
<div class=\"line\">    posArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">    ownerPosition( block, posArray );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> fieldPosCount = posArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> receptorSize = points.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (attenValue &gt; 0.0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Max distance applies and so does attenuation.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ptIndex = 0; ptIndex &lt; receptorSize; ptIndex ++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;receptorPoint = points[ptIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Apply from every field position to every receptor position.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> forceV(0,0,0);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> sumForceV(0,0,0);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">int</span> i = fieldPosCount; --i&gt;=0; )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = receptorPoint-posArray[i];</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> distance  = difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (distance &lt;= maxDist &amp;&amp; distance &gt;= minDist )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">double</span> force = magValue *</div>\n\
<div class=\"line\">                                    (pow((1.0-(distance/maxDist)),attenValue));</div>\n\
<div class=\"line\">                    forceV = difference * force;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Apply drag and swarm if the object is inside</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// the zone the repulsion-attraction is pushing the</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// object to, and if they are set.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( distance &gt;= repelDist &amp;&amp; distance &lt;= attractDist)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (fieldPosCount &gt; 0 &amp;&amp; dragMag &gt; 0)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> dragForceV;</div>\n\
<div class=\"line\">                            dragForceV = velocities[ptIndex] *</div>\n\
<div class=\"line\">                                            (-dragMag) * fieldPosCount;</div>\n\
<div class=\"line\">                            forceV += dragForceV;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Add swarm if swarm aplitude is set.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (swarmAmp &gt; 0)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> frequency = swarmFrequencyValue( block );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> phase( 0.0, 0.0, swarmPhaseValue(block) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            difference = receptorPoint - posArray[i];</div>\n\
<div class=\"line\">                            difference = (difference + phase) * frequency;</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> *noiseEffect = &amp;difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( (noiseEffect[0] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[0] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[1] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[1] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[2] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[2] &gt;  2147483647.0) )</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> noiseOut[4];</div>\n\
<div class=\"line\">                            noiseFunction( noiseEffect, noiseOut );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> swarmForce( noiseOut[0] * swarmAmp,</div>\n\
<div class=\"line\">                                                noiseOut[1] * swarmAmp,</div>\n\
<div class=\"line\">                                                noiseOut[2] * swarmAmp );</div>\n\
<div class=\"line\">                            forceV += swarmForce;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (maxDist &gt; 0.0) forceV *= falloffCurve(distance/maxDist);</div>\n\
<div class=\"line\">                sumForceV += forceV;                    </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            outputForce.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( sumForceV );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Max dist applies, but not attenuation.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ptIndex = 0; ptIndex &lt; receptorSize; ptIndex ++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp; receptorPoint = points[ptIndex];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Apply from every field position to every receptor position.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> forceV(0,0,0);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> sumForceV(0,0,0);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(i = fieldPosCount; --i&gt;=0; )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> difference = (receptorPoint-posArray[i]);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">double</span> distance = difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ad207cb443e371f73f07e874c504f60c1\">length</a>();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (distance &lt; minDist || distance &gt; maxDist) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (distance &lt;= repelDist)</div>\n\
<div class=\"line\">                    forceV = difference * magValue;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (distance &gt;= attractDist)</div>\n\
<div class=\"line\">                    forceV = -difference * magValue;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Apply drag and swarm if the object is inside</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// the zone the repulsion-attraction is pushing the</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// object to, and if they are set.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( distance &gt;= repelDist &amp;&amp; distance &lt;= attractDist)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (fieldPosCount &gt; 0 &amp;&amp; dragMag &gt; 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> dragForceV;</div>\n\
<div class=\"line\">                        dragForceV = velocities[ptIndex] *</div>\n\
<div class=\"line\">                                            (-dragMag) * fieldPosCount;</div>\n\
<div class=\"line\">                        forceV += dragForceV;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Add swarm if swarm aplitude is set.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (swarmAmp &gt; 0)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">double</span> frequency = swarmFrequencyValue( block );</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> phase( 0.0, 0.0, swarmPhaseValue(block) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span>(i = fieldPosCount; --i &gt;= 0;)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            difference = receptorPoint - posArray[i];</div>\n\
<div class=\"line\">                            difference = (difference + phase) * frequency;</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> *noiseEffect = &amp;difference.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>( (noiseEffect[0] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[0] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[1] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[1] &gt;  2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[2] &lt; -2147483647.0) ||</div>\n\
<div class=\"line\">                                (noiseEffect[2] &gt;  2147483647.0) )</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">double</span> noiseOut[4];</div>\n\
<div class=\"line\">                            noiseFunction( noiseEffect, noiseOut );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> swarmForce( noiseOut[0] * swarmAmp,</div>\n\
<div class=\"line\">                                                noiseOut[1] * swarmAmp,</div>\n\
<div class=\"line\">                                                noiseOut[2] * swarmAmp );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            forceV += swarmForce;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (maxDist &gt; 0.0) forceV *= falloffCurve(distance/maxDist);</div>\n\
<div class=\"line\">                sumForceV += forceV;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            outputForce.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( sumForceV );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> torusField::ownerPosition</div>\n\
<div class=\"line\">    (</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> &amp;ownerPosArray</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      If this field has an owner, get the owner&#39;s position array or</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      centroid, then assign it to the ownerPosArray.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      If it does not have owner, get the field position in the world</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      space, and assign it to the given array, ownerPosArray.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( applyPerVertexValue(block) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hOwnerPos = block.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( mOwnerPosData, &amp;status );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dOwnerPos = hOwnerPos.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a31773b870681e1f6b3ad82ff58de33bc\">data</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_vector_array_data.html\">MFnVectorArrayData</a> fnOwnerPos( dOwnerPos );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a> posArray = fnOwnerPos.array( &amp;status );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// assign vectors from block to ownerPosArray.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span>( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; posArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i ++ )</div>\n\
<div class=\"line\">                    ownerPosArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( posArray[i] );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> worldPos(0.0, 0.0, 0.0);</div>\n\
<div class=\"line\">                <span class=\"comment\">//status = getWorldPosition( block, worldPos );</span></div>\n\
<div class=\"line\">                status = getWorldPosition( worldPos );</div>\n\
<div class=\"line\">                ownerPosArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( worldPos );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// get the field position in the world space</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// and add it into ownerPosArray.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> worldPos(0.0, 0.0, 0.0);</div>\n\
<div class=\"line\">            <span class=\"comment\">//status = getWorldPosition( block, worldPos );</span></div>\n\
<div class=\"line\">            status = getWorldPosition( worldPos );</div>\n\
<div class=\"line\">            ownerPosArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( worldPos );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> centroidV(0.0, 0.0, 0.0);</div>\n\
<div class=\"line\">        status = ownerCentroidValue( block, centroidV );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// assign centroid vector to ownerPosArray.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            ownerPosArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( centroidV );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// get the field position in the world space.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> worldPos(0.0, 0.0, 0.0);</div>\n\
<div class=\"line\">            <span class=\"comment\">//status = getWorldPosition( block, worldPos );</span></div>\n\
<div class=\"line\">            status = getWorldPosition( worldPos );</div>\n\
<div class=\"line\">            ownerPosArray.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html#a01b5503917181b1b379579cc1d6d802e\">append</a>( worldPos );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> torusField::getWorldPosition( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;vector )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      get the field position in the world space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      The position value is from inherited attribute, aWorldMatrix.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode = thisMObject();</div>\n\
<div class=\"line\">    <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnThisNode( thisNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get worldMatrix attribute.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> worldMatrixAttr = fnThisNode.attribute( <span class=\"stringliteral\">&quot;worldMatrix&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build worldMatrix plug, and specify which element the plug refers to.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We use the first element(the first dagPath of this field).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> matrixPlug( thisNode, worldMatrixAttr );</div>\n\
<div class=\"line\">    matrixPlug = matrixPlug.elementByLogicalIndex( 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the value of the &#39;worldMatrix&#39; attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> matrixObject;</div>\n\
<div class=\"line\">    status = matrixPlug.getValue( matrixObject );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;torusField::getWorldPosition: get matrixObject&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>( status );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_data.html\">MFnMatrixData</a> worldMatrixData( matrixObject, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;torusField::getWorldPosition: get worldMatrixData&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>( status );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> worldMatrix = worldMatrixData.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>( &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !status )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;torusField::getWorldPosition: get worldMatrix&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>( status );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// assign the translate to the given vector.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    vector[0] = worldMatrix( 3, 0 );</div>\n\
<div class=\"line\">    vector[1] = worldMatrix( 3, 1 );</div>\n\
<div class=\"line\">    vector[2] = worldMatrix( 3, 2 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> torusField::getWorldPosition( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> &amp;vector )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Find the field position in the world space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode = thisMObject();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnThisNode( thisNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get worldMatrix attribute.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> worldMatrixAttr = fnThisNode.attribute( <span class=\"stringliteral\">&quot;worldMatrix&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build worldMatrix plug, and specify which element the plug refers to.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We use the first element(the first dagPath of this field).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> matrixPlug( thisNode, worldMatrixAttr );</div>\n\
<div class=\"line\">    matrixPlug = matrixPlug.elementByLogicalIndex( 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//MDataHandle hWMatrix = block.inputValue( worldMatrix, &amp;status );</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> hWMatrix = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>( matrixPlug, &amp;status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    McheckErr(status, <span class=\"stringliteral\">&quot;ERROR getting hWMatrix from dataBlock.\\n&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( status == MS::kSuccess )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> wMatrix = hWMatrix.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aaa25e9866d30fc06edc510817e32a8f2\">asMatrix</a>();</div>\n\
<div class=\"line\">        vector[0] = wMatrix(3, 0);</div>\n\
<div class=\"line\">        vector[1] = wMatrix(3, 1);</div>\n\
<div class=\"line\">        vector[2] = wMatrix(3, 2);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>( status );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> torusField::getForceAtPoint(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a>&amp; points,</div>\n\
<div class=\"line\">                                  <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a>&amp;   velocities,</div>\n\
<div class=\"line\">                                  <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a>&amp;   masses,</div>\n\
<div class=\"line\">                                  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector_array.html\">MVectorArray</a>&amp; forceArray,</div>\n\
<div class=\"line\">                                  <span class=\"keywordtype\">double</span>    <span class=\"comment\">/*deltaTime*/</span>)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This method is not required to be overridden, it is only necessary</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    for compatibility with the MFnField function set.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> block = forceCache();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useMaxDistSet = useMaxDistanceValue( block );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( useMaxDistSet )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        applyMaxDist( block, points, velocities, masses, forceArray );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        applyNoMaxDist( block, points, velocities, masses, forceArray );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> torusField::iconSizeAndOrigin(  GLuint&amp; width,</div>\n\
<div class=\"line\">                    GLuint&amp; height,</div>\n\
<div class=\"line\">                    GLuint&amp; xbo,</div>\n\
<div class=\"line\">                    GLuint&amp; ybo   )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method is not required to be overridden.  It should be overridden</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  if the plug-in has custom icon.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The width and height have to be a multiple of 32 on Windows and 16 on </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  other platform.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Define an 8x8 icon at the lower left corner of the 32x32 grid. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  (xbo, ybo) of (4,4) makes sure the icon is center at origin.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    width = 32;</div>\n\
<div class=\"line\">    height = 32;</div>\n\
<div class=\"line\">    xbo = 4;</div>\n\
<div class=\"line\">    ybo = 4;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> torusField::iconBitmap(GLubyte* bitmap)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method is not required to be overridden.  It should be overridden</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  if the plug-in has custom icon.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Define an 8x8 icon at the lower left corner of the 32x32 grid. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  (xbo, ybo) of (4,4) makes sure the icon is center at origin.</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    bitmap[0] = 0x18;</div>\n\
<div class=\"line\">    bitmap[4] = 0x66;</div>\n\
<div class=\"line\">    bitmap[8] = 0xC3;</div>\n\
<div class=\"line\">    bitmap[12] = 0x81;</div>\n\
<div class=\"line\">    bitmap[16] = 0x81;</div>\n\
<div class=\"line\">    bitmap[20] = 0xC3;</div>\n\
<div class=\"line\">    bitmap[24] = 0x66;</div>\n\
<div class=\"line\">    bitmap[28] = 0x18;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define rand3a(x,y,z)   frand(67*(x)+59*(y)+71*(z))</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define rand3b(x,y,z)   frand(73*(x)+79*(y)+83*(z))</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define rand3c(x,y,z)   frand(89*(x)+97*(y)+101*(z))</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define rand3d(x,y,z)   frand(103*(x)+107*(y)+109*(z))</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span>     xlim[3][2];     <span class=\"comment\">// integer bound for point</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span>  xarg[3];        <span class=\"comment\">// fractional part</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> frand( <span class=\"keywordtype\">int</span> s )   <span class=\"comment\">// get random number from seed</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    s = s &lt;&lt; 13^s;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>(1. - ((s*(s*s*15731+789221)+1376312589)&amp;0x7fffffff)/1073741824.);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> hermite( <span class=\"keywordtype\">double</span> p0, <span class=\"keywordtype\">double</span> p1, <span class=\"keywordtype\">double</span> r0, <span class=\"keywordtype\">double</span> r1, <span class=\"keywordtype\">double</span> t )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> t2, t3, _3t2, _2t3 ;</div>\n\
<div class=\"line\">    t2 = t * t;</div>\n\
<div class=\"line\">    t3 = t2 * t;</div>\n\
<div class=\"line\">    _3t2 = 3. * t2;</div>\n\
<div class=\"line\">    _2t3 = 2. * t3 ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>(p0*(_2t3-_3t2+1) + p1*(-_2t3+_3t2) + r0*(t3-2.*t2+t) + r1*(t3-t2));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> interpolate( <span class=\"keywordtype\">double</span> f[4], <span class=\"keywordtype\">int</span> i, <span class=\"keywordtype\">int</span> n )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  f[] returned tangent and value *</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  i   location ?</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  n   order</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> f0[4], f1[4] ;  <span class=\"comment\">//results for first and second halves</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( n == 0 )    <span class=\"comment\">// at 0, return lattice value</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        f[0] = rand3a( xlim[0][i&amp;1], xlim[1][i&gt;&gt;1&amp;1], xlim[2][i&gt;&gt;2] );</div>\n\
<div class=\"line\">        f[1] = rand3b( xlim[0][i&amp;1], xlim[1][i&gt;&gt;1&amp;1], xlim[2][i&gt;&gt;2] );</div>\n\
<div class=\"line\">        f[2] = rand3c( xlim[0][i&amp;1], xlim[1][i&gt;&gt;1&amp;1], xlim[2][i&gt;&gt;2] );</div>\n\
<div class=\"line\">        f[3] = rand3d( xlim[0][i&amp;1], xlim[1][i&gt;&gt;1&amp;1], xlim[2][i&gt;&gt;2] );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    n--;</div>\n\
<div class=\"line\">    interpolate( f0, i, n );        <span class=\"comment\">// compute first half</span></div>\n\
<div class=\"line\">    interpolate( f1, i| 1&lt;&lt;n, n );  <span class=\"comment\">// compute second half</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// use linear interpolation for slopes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    f[0] = (1. - xarg[n]) * f0[0] + xarg[n] * f1[0];</div>\n\
<div class=\"line\">    f[1] = (1. - xarg[n]) * f0[1] + xarg[n] * f1[1];</div>\n\
<div class=\"line\">    f[2] = (1. - xarg[n]) * f0[2] + xarg[n] * f1[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// use hermite interpolation for values</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    f[3] = hermite( f0[3], f1[3], f0[n], f1[n], xarg[n] );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> torusField::noiseFunction( <span class=\"keywordtype\">double</span> *inNoise, <span class=\"keywordtype\">double</span> *out )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      A noise function.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    xlim[0][0] = (int)floor( inNoise[0] );</div>\n\
<div class=\"line\">    xlim[0][1] = xlim[0][0] + 1;</div>\n\
<div class=\"line\">    xlim[1][0] = (int)floor( inNoise[1] );</div>\n\
<div class=\"line\">    xlim[1][1] = xlim[1][0] + 1;</div>\n\
<div class=\"line\">    xlim[2][0] = (int)floor( inNoise[2] );</div>\n\
<div class=\"line\">    xlim[2][1] = xlim[2][0] + 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    xarg[0] = inNoise[0] - xlim[0][0];</div>\n\
<div class=\"line\">    xarg[1] = inNoise[1] - xlim[1][0];</div>\n\
<div class=\"line\">    xarg[2] = inNoise[2] - xlim[2][0];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    interpolate( out, 0, 3 ) ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TORUS_PI 3.14159265</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TORUS_2PI 2*TORUS_PI</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define EDGES 30</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define SEGMENTS 20</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Descriptions:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Draw a set of rings to symbolie the field. This does not override default icon, you can do that by implementing the iconBitmap() function</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> torusField::draw( <a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view, <span class=\"keyword\">const</span> <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a1b68f8823b8e275a4b548fdd27263e8a\">M3dView::DisplayStyle</a> style, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ad9c34c5373567566950642c16a7c4bca\">M3dView:: DisplayStatus</a> )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">     view.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">     _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">     <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; SEGMENTS; j++ )</div>\n\
<div class=\"line\">     {</div>\n\
<div class=\"line\">        glPushMatrix();</div>\n\
<div class=\"line\">        glRotatef( GLfloat(360 * j / SEGMENTS), 0.0, 1.0, 0.0 );</div>\n\
<div class=\"line\">        glTranslatef( 1.5, 0.0, 0.0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">         <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; EDGES; i++ )</div>\n\
<div class=\"line\">         {</div>\n\
<div class=\"line\">            glBegin(GL_LINE_STRIP);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> p0 = float( TORUS_2PI * i / EDGES );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> p1 = float( TORUS_2PI * (i+1) / EDGES );</div>\n\
<div class=\"line\">            glVertex2f( cos(p0), sin(p0) );</div>\n\
<div class=\"line\">            glVertex2f( cos(p1), sin(p1) );</div>\n\
<div class=\"line\">            glEnd();</div>\n\
<div class=\"line\">         }</div>\n\
<div class=\"line\">        glPopMatrix();</div>\n\
<div class=\"line\">     }</div>\n\
<div class=\"line\">     _OPENMAYA_DEPRECATION_PUSH_AND_DISABLE_WARNING</div>\n\
<div class=\"line\">     view.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a> ();</div>\n\
<div class=\"line\">     _OPENMAYA_POP_WARNING</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerNode( <span class=\"stringliteral\">&quot;torusField&quot;</span>, torusField::id,</div>\n\
<div class=\"line\">                            &amp;torusField::creator, &amp;torusField::initialize,</div>\n\
<div class=\"line\">                            <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7a1ee02d3f908149cf7ee4de4fef95e357\">MPxNode::kFieldNode</a> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin(obj);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterNode( torusField::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";