var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: polyPrimitiveCmd/polyPrimitiveCmd.cpp</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'poly_primitive_cmd_2poly_primitive_cmd_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: polyPrimitiveCmd/polyPrimitiveCmd.cpp</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">polyPrimitiveCmd/polyPrimitiveCmd.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the MEL command &quot;polyPrimitiveTest&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in creates the following types of polygon primitives at the origin:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  1) Icosahedron</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  2) Dodecahedron</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  3) Tetrahedron</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  4) Cube</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  5) Octahedron</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  6) Plane</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  7) Cylinder</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  8) Truncated Icosahedron (soccer ball)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It demonstrates the creation of polygonal data. Once it is loaded, executing</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;polyPrimitiveTest &lt;primitive_number&gt;&quot; in the command window will cause a polygon</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to be created at the origin.          </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Usage:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  polyPrimitiveTest &lt;primitive_number&gt;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Related files:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  polyPrimitiveCmd.mel</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Limitations:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Newly created primitives are always placed at origin</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Note:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Original implementation for OpenAlias in the jptPolyPrimitives plugin.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArgList.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagModifier.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDoubleArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatPointArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMeshData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIntArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxCommand.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef M_PI</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define M_PI    3.14159265358979323846  </span><span class=\"comment\">/* pi */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Macro for error checking</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define checkErr(stat,msg)          \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    if ( MS::kSuccess != stat ) {   \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        displayError(MString(msg) + &quot;: &quot; + stat.errorString());   \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        return stat;                \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    }</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Primitive face connect data //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> tetra_gons[12] = {</div>\n\
<div class=\"line\">    1,2,3,</div>\n\
<div class=\"line\">    2,4,3,</div>\n\
<div class=\"line\">    1,3,4,</div>\n\
<div class=\"line\">    1,4,2</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> cube_gons[24] = {</div>\n\
<div class=\"line\">    1,4,3,2,</div>\n\
<div class=\"line\">    8,5,6,7,</div>\n\
<div class=\"line\">    3,7,6,2,</div>\n\
<div class=\"line\">    1,5,8,4,</div>\n\
<div class=\"line\">    3,4,8,7,</div>\n\
<div class=\"line\">    2,6,5,1</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> octa_gons[24] = {</div>\n\
<div class=\"line\">    2,3,1,</div>\n\
<div class=\"line\">    3,4,1,</div>\n\
<div class=\"line\">    4,5,1,</div>\n\
<div class=\"line\">    1,5,2,</div>\n\
<div class=\"line\">    6,3,2,</div>\n\
<div class=\"line\">    6,4,3,</div>\n\
<div class=\"line\">    6,5,4,</div>\n\
<div class=\"line\">    6,2,5</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> dodeca_gons[60] = {</div>\n\
<div class=\"line\">    1,5,3,4,2,</div>\n\
<div class=\"line\">    8,6,7,1,2,</div>\n\
<div class=\"line\">    1,7,17,20,5,</div>\n\
<div class=\"line\">    6,11,12,17,7,</div>\n\
<div class=\"line\">    17,12,9,16,20,</div>\n\
<div class=\"line\">    5,20,16,14,3,</div>\n\
<div class=\"line\">    3,14,15,19,4,</div>\n\
<div class=\"line\">    2,4,19,18,8,</div>\n\
<div class=\"line\">    8,18,13,11,6,</div>\n\
<div class=\"line\">    9,12,11,13,10,</div>\n\
<div class=\"line\">    10,13,18,19,15,</div>\n\
<div class=\"line\">    10,15,14,16,9</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> icosa_gons[60] = {</div>\n\
<div class=\"line\">    2,10,1,</div>\n\
<div class=\"line\">    1,11,2,</div>\n\
<div class=\"line\">    1,8,7,</div>\n\
<div class=\"line\">    1,7,11,</div>\n\
<div class=\"line\">    1,10,8,</div>\n\
<div class=\"line\">    5,2,6,</div>\n\
<div class=\"line\">    10,2,5,</div>\n\
<div class=\"line\">    2,11,6,</div>\n\
<div class=\"line\">    4,9,3,</div>\n\
<div class=\"line\">    3,12,4,</div>\n\
<div class=\"line\">    5,6,3,</div>\n\
<div class=\"line\">    3,9,5,</div>\n\
<div class=\"line\">    6,12,3,</div>\n\
<div class=\"line\">    7,8,4,</div>\n\
<div class=\"line\">    4,12,7,</div>\n\
<div class=\"line\">    4,8,9,</div>\n\
<div class=\"line\">    5,9,10,</div>\n\
<div class=\"line\">    6,11,12,</div>\n\
<div class=\"line\">    7,12,11,</div>\n\
<div class=\"line\">    8,10,9</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">double</span> trunc_icosa_vtxArray[][3] = {</div>\n\
<div class=\"line\">    { 0.00000000, 0.00000000, 1.00000000 },</div>\n\
<div class=\"line\">    { 0.39524780, 0.00000000, 0.91857395 },</div>\n\
<div class=\"line\">    { -0.22278550, 0.32647698, 0.91857395 },</div>\n\
<div class=\"line\">    { -0.14409696, -0.36804505, 0.91857395 },</div>\n\
<div class=\"line\">    { 0.56771009, 0.32647698, 0.75572282 },</div>\n\
<div class=\"line\">    { 0.49542801, -0.36804505, 0.78682468 },</div>\n\
<div class=\"line\">    { -0.58966797, 0.28490989, 0.75572282 },</div>\n\
<div class=\"line\">    { -0.05032380, 0.65295495, 0.75572282 },</div>\n\
<div class=\"line\">    { 0.16209500, -0.59550930, 0.78682468 },</div>\n\
<div class=\"line\">    { -0.51097943, -0.40961312, 0.75572282 },</div>\n\
<div class=\"line\">    { 0.84035260, 0.28490989, 0.46112243 },</div>\n\
<div class=\"line\">    { 0.34492458, 0.65295495, 0.67429775 },</div>\n\
<div class=\"line\">    { 0.76807052, -0.40961312, 0.49222429 },</div>\n\
<div class=\"line\">    { -0.64395201, 0.58569638, 0.49222429 },</div>\n\
<div class=\"line\">    { -0.73376494, -0.08313546, 0.67429775 },</div>\n\
<div class=\"line\">    { -0.31061900, 0.81316063, 0.49222429 },</div>\n\
<div class=\"line\">    { 0.10140353, -0.86454163, 0.49222429 },</div>\n\
<div class=\"line\">    { -0.57166993, -0.67864447, 0.46112243 },</div>\n\
<div class=\"line\">    { 0.78606856, 0.58569638, 0.19762390 },</div>\n\
<div class=\"line\">    { 0.94053281, -0.08313546, 0.32937316 },</div>\n\
<div class=\"line\">    { 0.47987757, 0.81316063, 0.32937316 },</div>\n\
<div class=\"line\">    { 0.70737904, -0.67864447, 0.19762390 },</div>\n\
<div class=\"line\">    { -0.84233203, 0.51843879, 0.14730069 },</div>\n\
<div class=\"line\">    { -0.93214496, -0.15039373, 0.32937316 },</div>\n\
<div class=\"line\">    { -0.17566601, 0.97336729, 0.14730069 },</div>\n\
<div class=\"line\">    { 0.37404603, -0.90610970, 0.19762390 },</div>\n\
<div class=\"line\">    { -0.26547894, -0.90610970, 0.32937316 },</div>\n\
<div class=\"line\">    { -0.83196474, -0.51843879, 0.19762390 },</div>\n\
<div class=\"line\">    { 0.83196474, 0.51843879, -0.19762390 },</div>\n\
<div class=\"line\">    { 0.98642507, -0.15039373, -0.06587463 },</div>\n\
<div class=\"line\">    { 0.21958178, 0.97336729, 0.06587463 },</div>\n\
<div class=\"line\">    { 0.84233203, -0.51843879, -0.14730069 },</div>\n\
<div class=\"line\">    { -0.70737904, 0.67864447, -0.19762390 },</div>\n\
<div class=\"line\">    { -0.98642507, 0.15039373, 0.06587463 },</div>\n\
<div class=\"line\">    { -0.37404603, 0.90610970, -0.19762390 },</div>\n\
<div class=\"line\">    { 0.17566601, -0.97336729, -0.14730069 },</div>\n\
<div class=\"line\">    { -0.21958178, -0.97336729, -0.06587463 },</div>\n\
<div class=\"line\">    { -0.78606856, -0.58569638, -0.19762390 },</div>\n\
<div class=\"line\">    { 0.57166993, 0.67864447, -0.46112243 },</div>\n\
<div class=\"line\">    { 0.93214496, 0.15039373, -0.32937316 },</div>\n\
<div class=\"line\">    { 0.26547894, 0.90610970, -0.32937316 },</div>\n\
<div class=\"line\">    { 0.64395201, -0.58569638, -0.49222429 },</div>\n\
<div class=\"line\">    { -0.76807052, 0.40961312, -0.49222429 },</div>\n\
<div class=\"line\">    { -0.94053281, 0.08313546, -0.32937316 },</div>\n\
<div class=\"line\">    { -0.10140353, 0.86454163, -0.49222429 },</div>\n\
<div class=\"line\">    { 0.31061900, -0.81316063, -0.49222429 },</div>\n\
<div class=\"line\">    { -0.47987757, -0.81316063, -0.32937316 },</div>\n\
<div class=\"line\">    { -0.84035260, -0.28490989, -0.46112243 },</div>\n\
<div class=\"line\">    { 0.51097943, 0.40961312, -0.75572282 },</div>\n\
<div class=\"line\">    { 0.73376494, 0.08313546, -0.67429775 },</div>\n\
<div class=\"line\">    { 0.58966797, -0.28490989, -0.75572282 },</div>\n\
<div class=\"line\">    { -0.49542801, 0.36804505, -0.78682468 },</div>\n\
<div class=\"line\">    { -0.16209500, 0.59550930, -0.78682468 },</div>\n\
<div class=\"line\">    { 0.05032380, -0.65295495, -0.75572282 },</div>\n\
<div class=\"line\">    { -0.34492458, -0.65295495, -0.67429775 },</div>\n\
<div class=\"line\">    { -0.56771009, -0.32647698, -0.75572282 },</div>\n\
<div class=\"line\">    { 0.14409696, 0.36804505, -0.91857395 },</div>\n\
<div class=\"line\">    { 0.22278550, -0.32647698, -0.91857395 },</div>\n\
<div class=\"line\">    { -0.39524780, 0.00000000, -0.91857395 },</div>\n\
<div class=\"line\">    { 0.00000000, 0.00000000, -1.00000000 }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> trunc_icosa_faceCountArray[] =</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    6, 6, 5, 6, 5,</div>\n\
<div class=\"line\">    6, 5, 6, 6, 6,</div>\n\
<div class=\"line\">    5, 6, 5, 6, 5,</div>\n\
<div class=\"line\">    6, 6, 6, 5, 6,</div>\n\
<div class=\"line\">    5, 5, 6, 6, 6,</div>\n\
<div class=\"line\">    5, 6, 5, 6, 6,</div>\n\
<div class=\"line\">    5, 6 </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> trunc_icosa_faceConnectArray[] = </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    0,1,4,11,7,2,</div>\n\
<div class=\"line\">    0,2,6,14,9,3,</div>\n\
<div class=\"line\">    3,8,5,1,0,</div>\n\
<div class=\"line\">    5,12,19,10,4,1,</div>\n\
<div class=\"line\">    7,15,13,6,2,</div>\n\
<div class=\"line\">    9,17,26,16,8,3,</div>\n\
<div class=\"line\">    4,10,18,20,11,</div>\n\
<div class=\"line\">    5,8,16,25,21,12,</div>\n\
<div class=\"line\">    6,13,22,33,23,14,</div>\n\
<div class=\"line\">    7,11,20,30,24,15,</div>\n\
<div class=\"line\">    9,14,23,27,17,</div>\n\
<div class=\"line\">    19,29,39,28,18,10,</div>\n\
<div class=\"line\">    21,31,29,19,12,</div>\n\
<div class=\"line\">    13,15,24,34,32,22,</div>\n\
<div class=\"line\">    26,36,35,25,16,</div>\n\
<div class=\"line\">    27,37,46,36,26,17,</div>\n\
<div class=\"line\">    28,38,40,30,20,18,</div>\n\
<div class=\"line\">    21,25,35,45,41,31,</div>\n\
<div class=\"line\">    22,32,42,43,33,</div>\n\
<div class=\"line\">    33,43,47,37,27,23,</div>\n\
<div class=\"line\">    24,30,40,44,34,</div>\n\
<div class=\"line\">    39,49,48,38,28,</div>\n\
<div class=\"line\">    29,31,41,50,49,39,</div>\n\
<div class=\"line\">    32,34,44,52,51,42,</div>\n\
<div class=\"line\">    35,36,46,54,53,45,</div>\n\
<div class=\"line\">    47,55,54,46,37,</div>\n\
<div class=\"line\">    48,56,52,44,40,38,</div>\n\
<div class=\"line\">    41,45,53,57,50,</div>\n\
<div class=\"line\">    51,58,55,47,43,42,</div>\n\
<div class=\"line\">    48,49,50,57,59,56,</div>\n\
<div class=\"line\">    51,52,56,59,58,</div>\n\
<div class=\"line\">    53,54,55,58,59,57</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Class definition //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>polyPrimitive : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html\">MPxCommand</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">                 polyPrimitive() {};</div>\n\
<div class=\"line\">         ~polyPrimitive() <span class=\"keyword\">override</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#ade7d0a873cbe811d6eab464e695390a9\">doIt</a>( <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args ) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a3b583cbc082553f11853db459b2f7795\">redoIt</a>() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a0789a8d51244cad0495abb2b811c39db\">undoIt</a>() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span>  <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_command.html#a2f6c567cc02d575ab14006d9c5e37761\">isUndoable</a>()<span class=\"keyword\"> const override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; };</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span>* creator();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      assignShadingGroup(<a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform, <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> groupName);</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span>  FILL( <span class=\"keywordtype\">double</span> x, <span class=\"keywordtype\">double</span> y, <span class=\"keywordtype\">double</span> z );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         create_icosa_points();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         create_dodecahedron();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         create_tetrahedron();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         create_cube();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         create_octahedron();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         create_truncated_icosahedron();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         createPlane();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         createCylinder();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      createNodes();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>         generatePrimitiveData();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      renameNodes(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> baseName);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>      setMeshData(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dataWrapper);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// What sort of shape we&#39;re making</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> shapeFlag;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Misc. primitive data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> num_verts;            <span class=\"comment\">// Number of vertices of polygon</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> num_faces;            <span class=\"comment\">// Number of faces on polygon</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> num_edges;            <span class=\"comment\">// Number of edges on polygon</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> edges_per_face;        <span class=\"comment\">// Number of edges (or verticies) per face</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> num_face_connects;    <span class=\"comment\">// Number of elements in face connect array</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> *p_gons;            <span class=\"comment\">// Pointer to static array of face connects</span></div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> iarr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> pa;</div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> faceCounts;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> faceConnects;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a> dagMod;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Class implementation //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\">polyPrimitive::~polyPrimitive() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* polyPrimitive::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> polyPrimitive();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::FILL( <span class=\"keywordtype\">double</span> x, <span class=\"keywordtype\">double</span> y, <span class=\"keywordtype\">double</span> z )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> pnt( (<span class=\"keywordtype\">float</span>)x, (<span class=\"keywordtype\">float</span>)y, (<span class=\"keywordtype\">float</span>)z );</div>\n\
<div class=\"line\">    iarr.append( pnt );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Primitive creation methods //</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyPrimitive::assignShadingGroup(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> groupName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the name of the mesh node.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// We need to use an MFnDagNode rather than an MFnMesh because the mesh</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is not fully realized at this point and would be rejected by MFnMesh.</span></div>\n\
<div class=\"line\">    <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  dagFn(transform);</div>\n\
<div class=\"line\">    dagFn.setObject(dagFn.child(0));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>     meshName = dagFn.name();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the DAG modifier to put the mesh into a shading group</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>     cmd(<span class=\"stringliteral\">&quot;sets -e -fe &quot;</span>);</div>\n\
<div class=\"line\">    cmd += groupName + <span class=\"stringliteral\">&quot; &quot;</span> + meshName;</div>\n\
<div class=\"line\">    st = dagMod.commandToExecute(cmd);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not add mesh to shading group&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the DAG modifier to select the new mesh.</span></div>\n\
<div class=\"line\">    cmd = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;select &quot;</span>) + meshName;</div>\n\
<div class=\"line\">    st = dagMod.commandToExecute(cmd);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not select new mesh&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::create_icosa_points()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> a = sqrt( ( 1.0 - sqrt( .2 ) ) / 2.0 );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> b = sqrt( ( 1.0 + sqrt( .2 ) ) / 2.0 );</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> z = 0.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FILL(b,a,z); FILL(b,-a,z); FILL(-b,-a,z); FILL(-b,a,z);</div>\n\
<div class=\"line\">    FILL(0,-b,-a); FILL(0,-b,a); FILL(0,b,a); FILL(0,b,-a);</div>\n\
<div class=\"line\">    FILL(-a,0,-b); FILL(a,0,-b); FILL(a,0,b); FILL(-a,0,b);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::create_dodecahedron()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Generated from icosahedron points.</span></div>\n\
<div class=\"line\">    create_icosa_points();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> my_info[12];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> idx;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( idx = 0; idx &lt; 12; idx++ ) {</div>\n\
<div class=\"line\">        my_info[idx].<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>=iarr[idx].x;</div>\n\
<div class=\"line\">        my_info[idx].<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>=iarr[idx].y;</div>\n\
<div class=\"line\">        my_info[idx].<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a>=iarr[idx].z;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iarr.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// now generate the dodecahedron points:</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> x1,y1,z1,x2,y2,z2,x3,y3,z3;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> xf, yf, zf;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> len;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>( idx = 0; idx &lt; 20; idx++ ) {</div>\n\
<div class=\"line\">        x1 = my_info[ icosa_gons[3*idx]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>;</div>\n\
<div class=\"line\">        y1 = my_info[ icosa_gons[3*idx]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>;</div>\n\
<div class=\"line\">        z1 = my_info[ icosa_gons[3*idx]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        x2 = my_info[ icosa_gons[3*idx + 1]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>;</div>\n\
<div class=\"line\">        y2 = my_info[ icosa_gons[3*idx + 1]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>;</div>\n\
<div class=\"line\">        z2 = my_info[ icosa_gons[3*idx + 1]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        x3 = my_info[ icosa_gons[3*idx + 2]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>;</div>\n\
<div class=\"line\">        y3 = my_info[ icosa_gons[3*idx + 2]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>;</div>\n\
<div class=\"line\">        z3 = my_info[ icosa_gons[3*idx + 2]-1 ].<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// the docecahedron vertex is the average of these points.</span></div>\n\
<div class=\"line\">        xf = (x1+x2+x3)/3.0;</div>\n\
<div class=\"line\">        yf = (y1+y2+y3)/3.0;</div>\n\
<div class=\"line\">        zf = (z1+z2+z3)/3.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// One more transformation: scale this point so it lies on the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// unit sphere...</span></div>\n\
<div class=\"line\">        len = sqrt( xf*xf + yf*yf + zf*zf );</div>\n\
<div class=\"line\">        xf /= len; yf /= len; zf /= len;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        FILL( xf, yf, zf );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::create_tetrahedron( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// First, create the points:</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> sq = sqrt(3.0);</div>\n\
<div class=\"line\">    FILL(0.0,0.0,1.0); FILL(sq/2.0,0.0,-.5);</div>\n\
<div class=\"line\">    FILL(-sq/4.0,.75,-.5); FILL(-sq/4.0,-.75,-.5);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::create_cube( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// First, create the points:</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> a = sqrt( 1.0/3.0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FILL(a,a,a); FILL(a,-a,a); FILL(-a,-a,a); FILL(-a,a,a);</div>\n\
<div class=\"line\">    FILL(a,a,-a); FILL(a,-a,-a); FILL(-a,-a,-a); FILL(-a,a,-a);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::create_octahedron( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    FILL(0.0,0.0,1.0); FILL(1.0,0.0,0.0);</div>\n\
<div class=\"line\">    FILL(0.0,1.0,0.0); FILL(-1.0,0.0,0.0);</div>\n\
<div class=\"line\">    FILL(0.0,-1.0,0.0); FILL(0.0,0.0,-1.0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::create_truncated_icosahedron( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    num_verts = 60;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> idx;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( idx = 0; idx &lt; num_verts; idx++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        FILL(trunc_icosa_vtxArray[idx][0], </div>\n\
<div class=\"line\">             trunc_icosa_vtxArray[idx][1],</div>\n\
<div class=\"line\">             trunc_icosa_vtxArray[idx][2]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    num_faces = 32;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( idx = 0; idx &lt; num_faces; idx++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        faceCounts.append( trunc_icosa_faceCountArray[idx] );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( idx = 0; idx &lt; 180; idx++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        faceConnects.append( trunc_icosa_faceConnectArray[idx] );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::createPlane( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> w = 2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> h = 2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> size = 2.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> hSize, wSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize class data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    num_verts      = 0;</div>\n\
<div class=\"line\">    num_faces      = 0;</div>\n\
<div class=\"line\">    edges_per_face = 4;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( w &lt; 1 ) w = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( h &lt; 1 ) h = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( size &lt; 0.0001 ) size = 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    wSize = size / w;</div>\n\
<div class=\"line\">    hSize = size / h;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create vertices</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> x, z;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( z = -size/2.0; z &lt;= size / 2.0; z += hSize )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( x = -size/2.0; x &lt;= size/2.0; x += wSize )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            FILL( x, 0, z );</div>\n\
<div class=\"line\">            num_verts++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create polys</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> v0, v1, v2, v3;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; h; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> j = 0; j &lt; w; j++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            v0 = j + (w+1) * i;</div>\n\
<div class=\"line\">            v1 = j + 1 + (w+1) * i;</div>\n\
<div class=\"line\">            v2 = j + 1 + (w+1) * (i+1);</div>\n\
<div class=\"line\">            v3 = j + (w+1) * (i+1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            faceConnects.append( v0 );</div>\n\
<div class=\"line\">            faceConnects.append( v3 );</div>\n\
<div class=\"line\">            faceConnects.append( v2 );</div>\n\
<div class=\"line\">            faceConnects.append( v1 );</div>\n\
<div class=\"line\">            num_faces++;</div>\n\
<div class=\"line\">            faceCounts.append( edges_per_face );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    num_face_connects = num_faces * edges_per_face;</div>\n\
<div class=\"line\">    num_edges = num_face_connects / 2;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::createCylinder()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> r        = 1.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> height   = 2.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> sides       = 8;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> sections    = 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize class data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    num_verts       = 0;</div>\n\
<div class=\"line\">    num_faces       = 0;</div>\n\
<div class=\"line\">    edges_per_face  = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( sides &lt; 3 ) sides = 3;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( sections &lt; 1 ) sections = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( height &lt;= 0 ) height = 1.0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( r &lt;= 0 ) r = 1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create verts</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> angle, deg = 360.0 / (double) sides;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> hSize = height / (double) sections;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> x, z, y = height / 2.0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i,j;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i = 0; i &lt;= sections; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( j = sides - 1; j &gt;= 0; j-- )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            angle = deg * j / 180.0 * M_PI;</div>\n\
<div class=\"line\">            x = cos( angle );</div>\n\
<div class=\"line\">            z = sin( angle );</div>\n\
<div class=\"line\">            FILL( x, y, z );</div>\n\
<div class=\"line\">            num_verts++;</div>\n\
<div class=\"line\">        } <span class=\"comment\">// for j</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        y -= hSize;</div>\n\
<div class=\"line\">    } <span class=\"comment\">// for i</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create polys</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i = 0; i &lt; sides; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        faceConnects.append( i );</div>\n\
<div class=\"line\">        edges_per_face++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    num_faces++;</div>\n\
<div class=\"line\">    faceCounts.append( edges_per_face );</div>\n\
<div class=\"line\">    edges_per_face = 0;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i = sides-1; i &gt;= 0; i-- )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        faceConnects.append( i + sides * sections );</div>\n\
<div class=\"line\">        edges_per_face++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    num_faces++;</div>\n\
<div class=\"line\">    faceCounts.append( edges_per_face );</div>\n\
<div class=\"line\">    edges_per_face = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> v0, v1, v2, v3;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i = 0; i &lt; sections; i++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( j = 0; j &lt; sides; j++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( j == 0 )    <span class=\"comment\">// use last vtx on this section</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                v0 = sides - 1 + sides * i;</div>\n\
<div class=\"line\">                v3 = sides - 1 + sides * (i+1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span>            <span class=\"comment\">// use prev vtx</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                v0 = j - 1 + sides * i;</div>\n\
<div class=\"line\">                v3 = j - 1 + sides * (i+1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            v1 = j + sides * i;</div>\n\
<div class=\"line\">            v2 = j + sides * (i+1);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            faceConnects.append( v0 );</div>\n\
<div class=\"line\">            faceConnects.append( v3 );</div>\n\
<div class=\"line\">            faceConnects.append( v2 );</div>\n\
<div class=\"line\">            faceConnects.append( v1 );</div>\n\
<div class=\"line\">            num_faces++;</div>\n\
<div class=\"line\">            faceCounts.append( 4 );</div>\n\
<div class=\"line\">        } <span class=\"comment\">// for j</span></div>\n\
<div class=\"line\">    } <span class=\"comment\">// for i</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    num_face_connects = faceConnects.length();</div>\n\
<div class=\"line\">    num_edges = num_face_connects/2;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> polyPrimitive::generatePrimitiveData()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Decide which type of primitive to create</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    iarr.clear();</div>\n\
<div class=\"line\">    faceCounts.clear();</div>\n\
<div class=\"line\">    faceConnects.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( shapeFlag ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 1:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            create_icosa_points();</div>\n\
<div class=\"line\">            num_verts         = 12;</div>\n\
<div class=\"line\">            num_faces         = 20;</div>\n\
<div class=\"line\">            edges_per_face    =  3;</div>\n\
<div class=\"line\">            p_gons = icosa_gons;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 2:</div>\n\
<div class=\"line\">            create_dodecahedron();</div>\n\
<div class=\"line\">            num_verts         = 20;</div>\n\
<div class=\"line\">            num_faces         = 12;</div>\n\
<div class=\"line\">            edges_per_face    =  5;</div>\n\
<div class=\"line\">            p_gons = dodeca_gons;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 3:</div>\n\
<div class=\"line\">            create_tetrahedron();</div>\n\
<div class=\"line\">            num_verts         = 4;</div>\n\
<div class=\"line\">            num_faces         = 4;</div>\n\
<div class=\"line\">            edges_per_face    = 3;</div>\n\
<div class=\"line\">            p_gons = tetra_gons;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 4:</div>\n\
<div class=\"line\">            create_cube();</div>\n\
<div class=\"line\">            num_verts         = 8;</div>\n\
<div class=\"line\">            num_faces         = 6;</div>\n\
<div class=\"line\">            edges_per_face    = 4;</div>\n\
<div class=\"line\">            p_gons = cube_gons;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 5:</div>\n\
<div class=\"line\">            create_octahedron();</div>\n\
<div class=\"line\">            num_verts         = 6;</div>\n\
<div class=\"line\">            num_faces         = 8;</div>\n\
<div class=\"line\">            edges_per_face    = 3;</div>\n\
<div class=\"line\">            p_gons = octa_gons;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 6:</div>\n\
<div class=\"line\">            createPlane();</div>\n\
<div class=\"line\">            p_gons = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 7:</div>\n\
<div class=\"line\">            createCylinder();</div>\n\
<div class=\"line\">            p_gons = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> 8:</div>\n\
<div class=\"line\">            create_truncated_icosahedron();</div>\n\
<div class=\"line\">            p_gons = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Construct the point array</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    pa.clear();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i=0; i&lt;num_verts; i++ )</div>\n\
<div class=\"line\">        pa.append( iarr[i] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If we are using polygon data then set up the face connect array</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// here. Otherwise, the create function will do it.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( NULL != p_gons ) {</div>\n\
<div class=\"line\">        num_face_connects = num_faces * edges_per_face;</div>\n\
<div class=\"line\">        num_edges = num_face_connects/2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i=0; i&lt;num_faces; i++ )</div>\n\
<div class=\"line\">            faceCounts.append( edges_per_face );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( i=0; i&lt;(num_faces*edges_per_face); i++ )</div>\n\
<div class=\"line\">            faceConnects.append( p_gons[i]-1 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyPrimitive::createNodes()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>  st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Generate the raw data for the requested primitive.</span></div>\n\
<div class=\"line\">    generatePrimitiveData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a mesh data wrapper to hold the new geometry.</span></div>\n\
<div class=\"line\">    <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html\">MFnMeshData</a>    dataFn;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>        dataWrapper = dataFn.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh_data.html#af1adb4abaf5243c6c0749bcca7b5c418\">create</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the mesh geometry and put it into the wrapper.</span></div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a>        meshFn;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>        dataObj = meshFn.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#af9b9e5d33d289134d567c62bad4ca3d5\">create</a>(</div>\n\
<div class=\"line\">                                num_verts,</div>\n\
<div class=\"line\">                                num_faces,</div>\n\
<div class=\"line\">                                pa,</div>\n\
<div class=\"line\">                                faceCounts,</div>\n\
<div class=\"line\">                                faceConnects,</div>\n\
<div class=\"line\">                                dataWrapper,</div>\n\
<div class=\"line\">                                &amp;st</div>\n\
<div class=\"line\">                            );</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not create mesh data&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the DAG modifier to create an empty mesh node and its parent</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// transform.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform = dagMod.createNode(<span class=\"stringliteral\">&quot;mesh&quot;</span>, <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>, &amp;st);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not create empty mesh&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Commit the creation so that the transform and its child will be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// valid below.</span></div>\n\
<div class=\"line\">    st = dagMod.doIt();</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not commit creation of empty mesh&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// At the moment we have a transform named something like &#39;transform1&#39;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and a mesh named something like &#39;polySurfaceShape1&#39;. Let&#39;s tidy that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// up by renaming them as &#39;pPrimitive#&#39; and &#39;pPrimitiveShape#&#39;, where</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// &#39;#&#39; is a number to ensure uniqueness.</span></div>\n\
<div class=\"line\">    st = renameNodes(transform, <span class=\"stringliteral\">&quot;pPrimitive&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!st) <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Commit the rename so that assignShadingGroup() can get the new name.</span></div>\n\
<div class=\"line\">    st = dagMod.doIt();</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not commit renaming of nodes&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Assign the mesh to a shading group.</span></div>\n\
<div class=\"line\">    st = assignShadingGroup(transform, <span class=\"stringliteral\">&quot;initialShadingGroup&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!st) <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Commit the changes.</span></div>\n\
<div class=\"line\">    st = dagMod.doIt();</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not commit final changes&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the mesh node to use the geometry we created for it.</span></div>\n\
<div class=\"line\">    st = setMeshData(transform, dataWrapper);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!st) <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Rename a transform and its shape so that they have the following names:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      &lt;baseName&gt;#</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      &lt;baseName&gt;Shape#</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// where &lt;baseName&gt; is the string provided in the &#39;baseName&#39; parameter and</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &#39;#&#39; is an integer value which ensures the names are unique within the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// scene.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyPrimitive::renameNodes(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> baseName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Rename the transform to something we know no node will be using.</span></div>\n\
<div class=\"line\">    st = dagMod.renameNode(transform, <span class=\"stringliteral\">&quot;polyPrimitiveCmdTemp&quot;</span>);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not rename transform node to temp name&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Rename the mesh to the same thing but with &#39;Shape&#39; on the end.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>    dagFn(transform);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    st = dagMod.renameNode(dagFn.child(0), <span class=\"stringliteral\">&quot;polyPrimitiveCmdTempShape&quot;</span>);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not rename mesh node to temp name&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Now that they are in the &#39;something/somethingShape&#39; format, any</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  changes we make to the name of the transform will automatically be</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  propagated to the shape as well.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  Maya will replace the &#39;#&#39; in the string below with a number which</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  ensures uniqueness.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>  transformName = baseName + <span class=\"stringliteral\">&quot;#&quot;</span>;</div>\n\
<div class=\"line\">    st = dagMod.renameNode(transform, transformName);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not rename transform node to final name&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyPrimitive::setMeshData(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> dataWrapper)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the mesh node.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a>  dagFn(transform);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     mesh = dagFn.child(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The mesh node has two geometry inputs: &#39;inMesh&#39; and &#39;cachedInMesh&#39;.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// &#39;inMesh&#39; is only used when it has an incoming connection, otherwise</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// &#39;cachedInMesh&#39; is used. Unfortunately, the docs say that &#39;cachedInMesh&#39;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is for internal use only and that changing it may render Maya</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// unstable.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// To get around that, we do the little dance below...</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use a temporary MDagModifier to create a temporary mesh attribute on</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the node.</span></div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a>  tAttr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>            tempAttr = tAttr.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html#af785af0a66bd4a4da1d9f7bd74d4de0a\">create</a>(<span class=\"stringliteral\">&quot;tempMesh&quot;</span>, <span class=\"stringliteral\">&quot;tmpm&quot;</span>, <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_data.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFnData::kMesh</a>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a>       tempMod;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    st = tempMod.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#ad714eb6c2e6f51659e3e50f176c75a91\">addAttribute</a>(mesh, tempAttr);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not add &#39;tempMesh&#39; attribute&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    st = tempMod.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not commit addition of &#39;tempMesh&#39; attribute&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the geometry data onto the temp attribute.</span></div>\n\
<div class=\"line\">    dagFn.setObject(mesh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>  tempPlug = dagFn.findPlug(tempAttr, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    st = tempPlug.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aec7c3792a53d27a61ece4f7b81cc123b\">setValue</a>(dataWrapper);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not set mesh geometry&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the temporary MDagModifier to connect the temp attribute to the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// node&#39;s &#39;inMesh&#39;.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>  inMeshPlug = dagFn.findPlug(<span class=\"stringliteral\">&quot;inMesh&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    st = tempMod.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(tempPlug, inMeshPlug);</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not connect &#39;tempMesh&#39; to &#39;inMesh&#39;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    st = tempMod.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a984345cd272bc1a32a9fc2e93a6678b2\">doIt</a>();</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not commit connection of &#39;tempMesh&#39; to &#39;inMesh&#39;&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Force the mesh to update by grabbing its output geometry.</span></div>\n\
<div class=\"line\">    dagFn.findPlug(<span class=\"stringliteral\">&quot;outMesh&quot;</span>, <span class=\"keyword\">true</span>).asMObject();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Undo the temporary modifier.</span></div>\n\
<div class=\"line\">    st = tempMod.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#a0789a8d51244cad0495abb2b811c39db\">undoIt</a>();</div>\n\
<div class=\"line\">    checkErr(st, <span class=\"stringliteral\">&quot;Could not undo &#39;tempMesh&#39; attribute&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyPrimitive::doIt( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html\">MArgList</a>&amp; args )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>  st;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Command line argument specifies type of primitive to create</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    shapeFlag = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( args.<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>() &gt; 0 )</div>\n\
<div class=\"line\">        shapeFlag = args.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_arg_list.html#a54e9c6d91b7b999624b2384bc52f12a2\">asInt</a>(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the mesh and its transform.</span></div>\n\
<div class=\"line\">    st = createNodes();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the creation failed, clean up any partial changes made.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!st) {</div>\n\
<div class=\"line\">        dagMod.undoIt();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> st;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyPrimitive::redoIt()</div>\n\
<div class=\"line\">{        </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> dagMod.doIt();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> polyPrimitive::undoIt()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> dagMod.undoIt();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;4.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerCommand( <span class=\"stringliteral\">&quot;polyPrimitiveTest&quot;</span>, polyPrimitive::creator );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerCommand&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    status = plugin.registerUI(<span class=\"stringliteral\">&quot;polyPrimitiveCreateUI&quot;</span>, <span class=\"stringliteral\">&quot;polyPrimitiveDeleteUI&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerUI&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterCommand( <span class=\"stringliteral\">&quot;polyPrimitiveTest&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterCommand&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";