var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>Python API 2.0 Reference: python/api2/py2ViewRenderOverride.py</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"py_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"py_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"py_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(py_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'py_ref/\'; }\n\
function py_ref_initializeToc(forceTrigger) {\n\
    py_ref_adsk_ref_toc.initResizable();\n\
    py_ref_adsk_ref_toc.initNavTree(\'python_2api2_2py2_view_render_override_8py-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(py_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = py_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { py_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Python API 2.0 Reference: python/api2/py2ViewRenderOverride.py</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./py_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./py_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./py_ref/namespaces.html\"><span>Packages</span></a></li>\n\
      <li><a href=\"#!/url=./py_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./py_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"py_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"py_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">python/api2/py2ViewRenderOverride.py</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><a name=\"l00001\"></a><span class=\"lineno\">    1</span>&#160;<span class=\"comment\">#-</span></div>\n\
<div class=\"line\"><a name=\"l00002\"></a><span class=\"lineno\">    2</span>&#160;<span class=\"comment\"># Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><a name=\"l00003\"></a><span class=\"lineno\">    3</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00004\"></a><span class=\"lineno\">    4</span>&#160;<span class=\"comment\"># Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><a name=\"l00005\"></a><span class=\"lineno\">    5</span>&#160;<span class=\"comment\"># provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><a name=\"l00006\"></a><span class=\"lineno\">    6</span>&#160;<span class=\"comment\"># accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><a name=\"l00007\"></a><span class=\"lineno\">    7</span>&#160;<span class=\"comment\">#+</span></div>\n\
<div class=\"line\"><a name=\"l00008\"></a><span class=\"lineno\">    8</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00009\"></a><span class=\"lineno\">    9</span>&#160;<span class=\"keyword\">from</span> builtins <span class=\"keyword\">import</span> object</div>\n\
<div class=\"line\"><a name=\"l00010\"></a><span class=\"lineno\">   10</span>&#160;<span class=\"keyword\">from</span> builtins <span class=\"keyword\">import</span> range</div>\n\
<div class=\"line\"><a name=\"l00011\"></a><span class=\"lineno\">   11</span>&#160;<span class=\"keyword\">import</span> sys</div>\n\
<div class=\"line\"><a name=\"l00012\"></a><span class=\"lineno\">   12</span>&#160;<span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</div>\n\
<div class=\"line\"><a name=\"l00013\"></a><span class=\"lineno\">   13</span>&#160;<span class=\"keyword\">import</span> maya.api.OpenMayaRender <span class=\"keyword\">as</span> omr</div>\n\
<div class=\"line\"><a name=\"l00014\"></a><span class=\"lineno\">   14</span>&#160;<span class=\"keyword\">import</span> maya.api.OpenMayaUI <span class=\"keyword\">as</span> omui</div>\n\
<div class=\"line\"><a name=\"l00015\"></a><span class=\"lineno\">   15</span>&#160;<span class=\"keyword\">import</span> maya.api.OpenMaya <span class=\"keyword\">as</span> om</div>\n\
<div class=\"line\"><a name=\"l00016\"></a><span class=\"lineno\">   16</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00017\"></a><span class=\"lineno\">   17</span>&#160;<span class=\"keyword\">def </span>maya_useNewAPI():</div>\n\
<div class=\"line\"><a name=\"l00018\"></a><span class=\"lineno\">   18</span>&#160;    <span class=\"stringliteral\">&quot;&quot;&quot;</span></div>\n\
<div class=\"line\"><a name=\"l00019\"></a><span class=\"lineno\">   19</span>&#160;<span class=\"stringliteral\">    The presence of this function tells Maya that the plugin produces, and</span></div>\n\
<div class=\"line\"><a name=\"l00020\"></a><span class=\"lineno\">   20</span>&#160;<span class=\"stringliteral\">    expects to be passed, objects created using the Maya Python API 2.0.</span></div>\n\
<div class=\"line\"><a name=\"l00021\"></a><span class=\"lineno\">   21</span>&#160;<span class=\"stringliteral\">    &quot;&quot;&quot;</span></div>\n\
<div class=\"line\"><a name=\"l00022\"></a><span class=\"lineno\">   22</span>&#160;    <span class=\"keywordflow\">pass</span></div>\n\
<div class=\"line\"><a name=\"l00023\"></a><span class=\"lineno\">   23</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00024\"></a><span class=\"lineno\">   24</span>&#160;<span class=\"comment\"># Enumerations to identify an operation within a list of operations.</span></div>\n\
<div class=\"line\"><a name=\"l00025\"></a><span class=\"lineno\">   25</span>&#160;kBackgroundBlit                 = 0</div>\n\
<div class=\"line\"><a name=\"l00026\"></a><span class=\"lineno\">   26</span>&#160;kMaya3dSceneRender              = 1     <span class=\"comment\"># 3d scene render to target 1</span></div>\n\
<div class=\"line\"><a name=\"l00027\"></a><span class=\"lineno\">   27</span>&#160;kMaya3dSceneRenderOpaque        = 2     <span class=\"comment\"># 3d opaque scene render to target 1</span></div>\n\
<div class=\"line\"><a name=\"l00028\"></a><span class=\"lineno\">   28</span>&#160;kMaya3dSceneRenderTransparent   = 3     <span class=\"comment\"># 3d transparent scene render to target 1</span></div>\n\
<div class=\"line\"><a name=\"l00029\"></a><span class=\"lineno\">   29</span>&#160;kThresholdOp                    = 4     <span class=\"comment\"># Brightness threshold</span></div>\n\
<div class=\"line\"><a name=\"l00030\"></a><span class=\"lineno\">   30</span>&#160;kHorizBlurOp                    = 5     <span class=\"comment\"># Down sample to target 2</span></div>\n\
<div class=\"line\"><a name=\"l00031\"></a><span class=\"lineno\">   31</span>&#160;kVertBlurOp                     = 6</div>\n\
<div class=\"line\"><a name=\"l00032\"></a><span class=\"lineno\">   32</span>&#160;kBlendOp                        = 7     <span class=\"comment\"># Blend target 1 and 2 back to target 1</span></div>\n\
<div class=\"line\"><a name=\"l00033\"></a><span class=\"lineno\">   33</span>&#160;kPostOperation1                 = 8     <span class=\"comment\"># Post ops on target 1</span></div>\n\
<div class=\"line\"><a name=\"l00034\"></a><span class=\"lineno\">   34</span>&#160;kPostOperation2                 = 9</div>\n\
<div class=\"line\"><a name=\"l00035\"></a><span class=\"lineno\">   35</span>&#160;kMaya3dSceneRenderUI            = 10    <span class=\"comment\"># Post ui draw to target 1</span></div>\n\
<div class=\"line\"><a name=\"l00036\"></a><span class=\"lineno\">   36</span>&#160;kUserOpNumber                   = 11    <span class=\"comment\"># User op draw to target 1</span></div>\n\
<div class=\"line\"><a name=\"l00037\"></a><span class=\"lineno\">   37</span>&#160;kHUDBlit                        = 12    <span class=\"comment\"># Draw HUD on top</span></div>\n\
<div class=\"line\"><a name=\"l00038\"></a><span class=\"lineno\">   38</span>&#160;kPresentOp                      = 13    <span class=\"comment\"># Present</span></div>\n\
<div class=\"line\"><a name=\"l00039\"></a><span class=\"lineno\">   39</span>&#160;kNumberOfOps                    = 14</div>\n\
<div class=\"line\"><a name=\"l00040\"></a><span class=\"lineno\">   40</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00041\"></a><span class=\"lineno\">   41</span>&#160;<span class=\"comment\"># Helper to enumerate the target indexing</span></div>\n\
<div class=\"line\"><a name=\"l00042\"></a><span class=\"lineno\">   42</span>&#160;kMyColorTarget  = 0</div>\n\
<div class=\"line\"><a name=\"l00043\"></a><span class=\"lineno\">   43</span>&#160;kMyDepthTarget  = 1</div>\n\
<div class=\"line\"><a name=\"l00044\"></a><span class=\"lineno\">   44</span>&#160;kMyBlurTarget   = 2</div>\n\
<div class=\"line\"><a name=\"l00045\"></a><span class=\"lineno\">   45</span>&#160;kTargetCount    = 3</div>\n\
<div class=\"line\"><a name=\"l00046\"></a><span class=\"lineno\">   46</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00047\"></a><span class=\"lineno\">   47</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00048\"></a><span class=\"lineno\">   48</span>&#160;<span class=\"comment\">#   Utilty to print out lighting information from a draw context</span></div>\n\
<div class=\"line\"><a name=\"l00049\"></a><span class=\"lineno\">   49</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00050\"></a><span class=\"lineno\">   50</span>&#160;<span class=\"keyword\">def </span>printDrawContextLightInfo(drawContext):</div>\n\
<div class=\"line\"><a name=\"l00051\"></a><span class=\"lineno\">   51</span>&#160;    <span class=\"comment\"># Get all the lighting information in the scene</span></div>\n\
<div class=\"line\"><a name=\"l00052\"></a><span class=\"lineno\">   52</span>&#160;    considerAllSceneLights = omr.MDrawContext.kFilteredIgnoreLightLimit</div>\n\
<div class=\"line\"><a name=\"l00053\"></a><span class=\"lineno\">   53</span>&#160;    omr.MRenderer.needEvaluateAllLights()</div>\n\
<div class=\"line\"><a name=\"l00054\"></a><span class=\"lineno\">   54</span>&#160;    lightCount = drawContext.numberOfActiveLights(considerAllSceneLights)</div>\n\
<div class=\"line\"><a name=\"l00055\"></a><span class=\"lineno\">   55</span>&#160;    <span class=\"keywordflow\">if</span> lightCount == 0:</div>\n\
<div class=\"line\"><a name=\"l00056\"></a><span class=\"lineno\">   56</span>&#160;        <span class=\"keywordflow\">return</span></div>\n\
<div class=\"line\"><a name=\"l00057\"></a><span class=\"lineno\">   57</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00058\"></a><span class=\"lineno\">   58</span>&#160;    positions = om.MFloatPointArray()</div>\n\
<div class=\"line\"><a name=\"l00059\"></a><span class=\"lineno\">   59</span>&#160;    position = om.MFloatPoint(0, 0, 0)</div>\n\
<div class=\"line\"><a name=\"l00060\"></a><span class=\"lineno\">   60</span>&#160;    direction = om.MFloatVector()</div>\n\
<div class=\"line\"><a name=\"l00061\"></a><span class=\"lineno\">   61</span>&#160;    color = om.MColor()</div>\n\
<div class=\"line\"><a name=\"l00062\"></a><span class=\"lineno\">   62</span>&#160;    positionCount = 0</div>\n\
<div class=\"line\"><a name=\"l00063\"></a><span class=\"lineno\">   63</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00064\"></a><span class=\"lineno\">   64</span>&#160;    <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(lightCount):</div>\n\
<div class=\"line\"><a name=\"l00065\"></a><span class=\"lineno\">   65</span>&#160;        lightParam = drawContext.getLightParameterInformation( i, considerAllSceneLights )</div>\n\
<div class=\"line\"><a name=\"l00066\"></a><span class=\"lineno\">   66</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> lightParam <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00067\"></a><span class=\"lineno\">   67</span>&#160;            print(<span class=\"stringliteral\">&quot;\\tLight &quot;</span> + str(i) +<span class=\"stringliteral\">&quot;\\n\\t{&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00068\"></a><span class=\"lineno\">   68</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00069\"></a><span class=\"lineno\">   69</span>&#160;            <span class=\"keywordflow\">for</span> pname <span class=\"keywordflow\">in</span> lightParam.parameterList():</div>\n\
<div class=\"line\"><a name=\"l00070\"></a><span class=\"lineno\">   70</span>&#160;                ptype = lightParam.parameterType(pname)</div>\n\
<div class=\"line\"><a name=\"l00071\"></a><span class=\"lineno\">   71</span>&#160;                <span class=\"keywordflow\">if</span> ptype == omr.MLightParameterInformation.kBoolean:</div>\n\
<div class=\"line\"><a name=\"l00072\"></a><span class=\"lineno\">   72</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. Bool &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00073\"></a><span class=\"lineno\">   73</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kInteger:</div>\n\
<div class=\"line\"><a name=\"l00074\"></a><span class=\"lineno\">   74</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. Integer &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00075\"></a><span class=\"lineno\">   75</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kFloat:</div>\n\
<div class=\"line\"><a name=\"l00076\"></a><span class=\"lineno\">   76</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. Float &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00077\"></a><span class=\"lineno\">   77</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kFloat2:</div>\n\
<div class=\"line\"><a name=\"l00078\"></a><span class=\"lineno\">   78</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. Float &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00079\"></a><span class=\"lineno\">   79</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kFloat3:</div>\n\
<div class=\"line\"><a name=\"l00080\"></a><span class=\"lineno\">   80</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. Float3 &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00081\"></a><span class=\"lineno\">   81</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kFloat4:</div>\n\
<div class=\"line\"><a name=\"l00082\"></a><span class=\"lineno\">   82</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. Float4 &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00083\"></a><span class=\"lineno\">   83</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kFloat4x4Row:</div>\n\
<div class=\"line\"><a name=\"l00084\"></a><span class=\"lineno\">   84</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. Float4x4Row &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00085\"></a><span class=\"lineno\">   85</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kFloat4x4Col:</div>\n\
<div class=\"line\"><a name=\"l00086\"></a><span class=\"lineno\">   86</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. kFloat4x4Col &quot;</span> + str(lightParam.getParameter(pname)))</div>\n\
<div class=\"line\"><a name=\"l00087\"></a><span class=\"lineno\">   87</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kTexture2:</div>\n\
<div class=\"line\"><a name=\"l00088\"></a><span class=\"lineno\">   88</span>&#160;                    <span class=\"comment\"># Get shadow map as a resource handle directly in OpenGL</span></div>\n\
<div class=\"line\"><a name=\"l00089\"></a><span class=\"lineno\">   89</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight texture parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. OpenGL texture id = &quot;</span> + str(lightParam.getParameterTextureHandle(pname)))</div>\n\
<div class=\"line\"><a name=\"l00090\"></a><span class=\"lineno\">   90</span>&#160;                    <span class=\"comment\"># Similar access for DX would look something like this:</span></div>\n\
<div class=\"line\"><a name=\"l00091\"></a><span class=\"lineno\">   91</span>&#160;                    <span class=\"comment\"># (ID3D11ShaderResourceView *) lightParam.getParameterTextureHandle(pname)</span></div>\n\
<div class=\"line\"><a name=\"l00092\"></a><span class=\"lineno\">   92</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kSampler:</div>\n\
<div class=\"line\"><a name=\"l00093\"></a><span class=\"lineno\">   93</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight sampler parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. filter = &quot;</span> + str(lightParam.getParameter(pname).filter))</div>\n\
<div class=\"line\"><a name=\"l00094\"></a><span class=\"lineno\">   94</span>&#160;                <span class=\"keywordflow\">elif</span> ptype == omr.MLightParameterInformation.kTextureCube:</div>\n\
<div class=\"line\"><a name=\"l00095\"></a><span class=\"lineno\">   95</span>&#160;                    <span class=\"comment\"># Get shadow map as a resource handle directly in OpenGL</span></div>\n\
<div class=\"line\"><a name=\"l00096\"></a><span class=\"lineno\">   96</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\tLight texture parameter &quot;</span> + pname + <span class=\"stringliteral\">&quot;. OpenGL texture id = &quot;</span> + str(lightParam.getParameterTextureHandle(pname)))</div>\n\
<div class=\"line\"><a name=\"l00097\"></a><span class=\"lineno\">   97</span>&#160;                    <span class=\"comment\"># Similar access for DX would look something like this:</span></div>\n\
<div class=\"line\"><a name=\"l00098\"></a><span class=\"lineno\">   98</span>&#160;                    <span class=\"comment\"># (ID3D11ShaderResourceView *) lightParam.getParameterTextureHandle(pname)</span></div>\n\
<div class=\"line\"><a name=\"l00099\"></a><span class=\"lineno\">   99</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00100\"></a><span class=\"lineno\">  100</span>&#160;                <span class=\"comment\"># Do some discovery to map stock parameters to usable values</span></div>\n\
<div class=\"line\"><a name=\"l00101\"></a><span class=\"lineno\">  101</span>&#160;                <span class=\"comment\"># based on the semantic</span></div>\n\
<div class=\"line\"><a name=\"l00102\"></a><span class=\"lineno\">  102</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00103\"></a><span class=\"lineno\">  103</span>&#160;                semantic = lightParam.parameterSemantic(pname)</div>\n\
<div class=\"line\"><a name=\"l00104\"></a><span class=\"lineno\">  104</span>&#160;                <span class=\"keywordflow\">if</span> semantic == omr.MLightParameterInformation.kLightEnabled:</div>\n\
<div class=\"line\"><a name=\"l00105\"></a><span class=\"lineno\">  105</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : light enabled&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00106\"></a><span class=\"lineno\">  106</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kWorldPosition:</div>\n\
<div class=\"line\"><a name=\"l00107\"></a><span class=\"lineno\">  107</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : world position&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00108\"></a><span class=\"lineno\">  108</span>&#160;                    floatVals = lightParam.getParameter(pname)</div>\n\
<div class=\"line\"><a name=\"l00109\"></a><span class=\"lineno\">  109</span>&#160;                    position += om.MFloatPoint( floatVals[0], floatVals[1], floatVals[2] )</div>\n\
<div class=\"line\"><a name=\"l00110\"></a><span class=\"lineno\">  110</span>&#160;                    positionCount = positionCount + 1</div>\n\
<div class=\"line\"><a name=\"l00111\"></a><span class=\"lineno\">  111</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kWorldDirection:</div>\n\
<div class=\"line\"><a name=\"l00112\"></a><span class=\"lineno\">  112</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : world direction&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00113\"></a><span class=\"lineno\">  113</span>&#160;                    direction = lightParam.getParameter(pname)</div>\n\
<div class=\"line\"><a name=\"l00114\"></a><span class=\"lineno\">  114</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kIntensity:</div>\n\
<div class=\"line\"><a name=\"l00115\"></a><span class=\"lineno\">  115</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : intensity&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00116\"></a><span class=\"lineno\">  116</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kColor:</div>\n\
<div class=\"line\"><a name=\"l00117\"></a><span class=\"lineno\">  117</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : color&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00118\"></a><span class=\"lineno\">  118</span>&#160;                    color = om.MColor( lightParam.getParameter(pname) )</div>\n\
<div class=\"line\"><a name=\"l00119\"></a><span class=\"lineno\">  119</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kEmitsDiffuse:</div>\n\
<div class=\"line\"><a name=\"l00120\"></a><span class=\"lineno\">  120</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : emits-diffuse&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00121\"></a><span class=\"lineno\">  121</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kEmitsSpecular:</div>\n\
<div class=\"line\"><a name=\"l00122\"></a><span class=\"lineno\">  122</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : emits-specular&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00123\"></a><span class=\"lineno\">  123</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kDecayRate:</div>\n\
<div class=\"line\"><a name=\"l00124\"></a><span class=\"lineno\">  124</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : decay rate&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00125\"></a><span class=\"lineno\">  125</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kDropoff:</div>\n\
<div class=\"line\"><a name=\"l00126\"></a><span class=\"lineno\">  126</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : drop-off&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00127\"></a><span class=\"lineno\">  127</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kCosConeAngle:</div>\n\
<div class=\"line\"><a name=\"l00128\"></a><span class=\"lineno\">  128</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : cosine cone angle&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00129\"></a><span class=\"lineno\">  129</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowMap:</div>\n\
<div class=\"line\"><a name=\"l00130\"></a><span class=\"lineno\">  130</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00131\"></a><span class=\"lineno\">  131</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowSamp:</div>\n\
<div class=\"line\"><a name=\"l00132\"></a><span class=\"lineno\">  132</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map sampler&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00133\"></a><span class=\"lineno\">  133</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowBias:</div>\n\
<div class=\"line\"><a name=\"l00134\"></a><span class=\"lineno\">  134</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map bias&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00135\"></a><span class=\"lineno\">  135</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowMapSize:</div>\n\
<div class=\"line\"><a name=\"l00136\"></a><span class=\"lineno\">  136</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map size&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00137\"></a><span class=\"lineno\">  137</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowViewProj:</div>\n\
<div class=\"line\"><a name=\"l00138\"></a><span class=\"lineno\">  138</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow map view projection matrix&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00139\"></a><span class=\"lineno\">  139</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowColor:</div>\n\
<div class=\"line\"><a name=\"l00140\"></a><span class=\"lineno\">  140</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : shadow color&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00141\"></a><span class=\"lineno\">  141</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kGlobalShadowOn:</div>\n\
<div class=\"line\"><a name=\"l00142\"></a><span class=\"lineno\">  142</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : global shadows on&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00143\"></a><span class=\"lineno\">  143</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowOn:</div>\n\
<div class=\"line\"><a name=\"l00144\"></a><span class=\"lineno\">  144</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : local shadows on&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00145\"></a><span class=\"lineno\">  145</span>&#160;                <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kDepthRange:</div>\n\
<div class=\"line\"><a name=\"l00146\"></a><span class=\"lineno\">  146</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t\\t- Parameter semantic : depth range&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00147\"></a><span class=\"lineno\">  147</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00148\"></a><span class=\"lineno\">  148</span>&#160;            <span class=\"comment\"># Compute an average position</span></div>\n\
<div class=\"line\"><a name=\"l00149\"></a><span class=\"lineno\">  149</span>&#160;            <span class=\"keywordflow\">if</span> positionCount &gt; 1:</div>\n\
<div class=\"line\"><a name=\"l00150\"></a><span class=\"lineno\">  150</span>&#160;                position /= positionCount</div>\n\
<div class=\"line\"><a name=\"l00151\"></a><span class=\"lineno\">  151</span>&#160;                print(<span class=\"stringliteral\">&quot;\\t\\tCompute average position &quot;</span> + str(position))</div>\n\
<div class=\"line\"><a name=\"l00152\"></a><span class=\"lineno\">  152</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00153\"></a><span class=\"lineno\">  153</span>&#160;            <span class=\"comment\"># Print by semantic</span></div>\n\
<div class=\"line\"><a name=\"l00154\"></a><span class=\"lineno\">  154</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\tSemantic -&gt; Parameter Name Lookups&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00155\"></a><span class=\"lineno\">  155</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kLightEnabled)</div>\n\
<div class=\"line\"><a name=\"l00156\"></a><span class=\"lineno\">  156</span>&#160;            floatVals = <span class=\"stringliteral\">&quot;&quot;</span></div>\n\
<div class=\"line\"><a name=\"l00157\"></a><span class=\"lineno\">  157</span>&#160;            <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00158\"></a><span class=\"lineno\">  158</span>&#160;                floatVals = lightParam.getParameter(omr.MLightParameterInformation.kLightEnabled)</div>\n\
<div class=\"line\"><a name=\"l00159\"></a><span class=\"lineno\">  159</span>&#160;            <span class=\"keywordflow\">except</span> RuntimeError:</div>\n\
<div class=\"line\"><a name=\"l00160\"></a><span class=\"lineno\">  160</span>&#160;                <span class=\"keywordflow\">pass</span></div>\n\
<div class=\"line\"><a name=\"l00161\"></a><span class=\"lineno\">  161</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkLightEnabled -&gt; &quot;</span> + str(paramNames) + <span class=\"stringliteral\">&quot; -- &quot;</span> + str(floatVals))</div>\n\
<div class=\"line\"><a name=\"l00162\"></a><span class=\"lineno\">  162</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kWorldPosition)</div>\n\
<div class=\"line\"><a name=\"l00163\"></a><span class=\"lineno\">  163</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkWorldPosition -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00164\"></a><span class=\"lineno\">  164</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kWorldDirection)</div>\n\
<div class=\"line\"><a name=\"l00165\"></a><span class=\"lineno\">  165</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkWorldDirection -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00166\"></a><span class=\"lineno\">  166</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kIntensity)</div>\n\
<div class=\"line\"><a name=\"l00167\"></a><span class=\"lineno\">  167</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkIntensity -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00168\"></a><span class=\"lineno\">  168</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kColor)</div>\n\
<div class=\"line\"><a name=\"l00169\"></a><span class=\"lineno\">  169</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkColor -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00170\"></a><span class=\"lineno\">  170</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kEmitsDiffuse)</div>\n\
<div class=\"line\"><a name=\"l00171\"></a><span class=\"lineno\">  171</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkEmitsDiffuse -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00172\"></a><span class=\"lineno\">  172</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kEmitsSpecular)</div>\n\
<div class=\"line\"><a name=\"l00173\"></a><span class=\"lineno\">  173</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkEmitsSpecular -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00174\"></a><span class=\"lineno\">  174</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kDecayRate)</div>\n\
<div class=\"line\"><a name=\"l00175\"></a><span class=\"lineno\">  175</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkDecayRate -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00176\"></a><span class=\"lineno\">  176</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kDropoff)</div>\n\
<div class=\"line\"><a name=\"l00177\"></a><span class=\"lineno\">  177</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkDropoff -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00178\"></a><span class=\"lineno\">  178</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kCosConeAngle)</div>\n\
<div class=\"line\"><a name=\"l00179\"></a><span class=\"lineno\">  179</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkCosConeAngle -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00180\"></a><span class=\"lineno\">  180</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kIrradianceIn)</div>\n\
<div class=\"line\"><a name=\"l00181\"></a><span class=\"lineno\">  181</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkIrradianceIn -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00182\"></a><span class=\"lineno\">  182</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kShadowMap)</div>\n\
<div class=\"line\"><a name=\"l00183\"></a><span class=\"lineno\">  183</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowMap -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00184\"></a><span class=\"lineno\">  184</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kShadowSamp)</div>\n\
<div class=\"line\"><a name=\"l00185\"></a><span class=\"lineno\">  185</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowSamp -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00186\"></a><span class=\"lineno\">  186</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kShadowBias)</div>\n\
<div class=\"line\"><a name=\"l00187\"></a><span class=\"lineno\">  187</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowBias -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00188\"></a><span class=\"lineno\">  188</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kShadowMapSize)</div>\n\
<div class=\"line\"><a name=\"l00189\"></a><span class=\"lineno\">  189</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowMapSize -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00190\"></a><span class=\"lineno\">  190</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kShadowColor)</div>\n\
<div class=\"line\"><a name=\"l00191\"></a><span class=\"lineno\">  191</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowColor -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00192\"></a><span class=\"lineno\">  192</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kGlobalShadowOn)</div>\n\
<div class=\"line\"><a name=\"l00193\"></a><span class=\"lineno\">  193</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkGlobalShadowOn -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00194\"></a><span class=\"lineno\">  194</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kShadowOn)</div>\n\
<div class=\"line\"><a name=\"l00195\"></a><span class=\"lineno\">  195</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkShadowOn -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00196\"></a><span class=\"lineno\">  196</span>&#160;            paramNames = lightParam.parameterNames(omr.MLightParameterInformation.kDepthRange)</div>\n\
<div class=\"line\"><a name=\"l00197\"></a><span class=\"lineno\">  197</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\t\\tkDepthRange -&gt; &quot;</span> + str(paramNames))</div>\n\
<div class=\"line\"><a name=\"l00198\"></a><span class=\"lineno\">  198</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00199\"></a><span class=\"lineno\">  199</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t}&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00200\"></a><span class=\"lineno\">  200</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00201\"></a><span class=\"lineno\">  201</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00202\"></a><span class=\"lineno\">  202</span>&#160;<span class=\"comment\"># Shader override helpers:</span></div>\n\
<div class=\"line\"><a name=\"l00203\"></a><span class=\"lineno\">  203</span>&#160;<span class=\"comment\"># As part of a shader override it is possible to attach callbacks which</span></div>\n\
<div class=\"line\"><a name=\"l00204\"></a><span class=\"lineno\">  204</span>&#160;<span class=\"comment\"># are invoked when the shader is to be used. The following are some examples</span></div>\n\
<div class=\"line\"><a name=\"l00205\"></a><span class=\"lineno\">  205</span>&#160;<span class=\"comment\"># of what could be performed.</span></div>\n\
<div class=\"line\"><a name=\"l00206\"></a><span class=\"lineno\">  206</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00207\"></a><span class=\"lineno\">  207</span>&#160;<span class=\"comment\">#   Example utility used by a callback to:</span></div>\n\
<div class=\"line\"><a name=\"l00208\"></a><span class=\"lineno\">  208</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00209\"></a><span class=\"lineno\">  209</span>&#160;<span class=\"comment\">#   1. Print out the shader parameters for a give MShaderInsrtance</span></div>\n\
<div class=\"line\"><a name=\"l00210\"></a><span class=\"lineno\">  210</span>&#160;<span class=\"comment\">#   2. Examine the list of render items which will be rendered with this MShaderInstance</span></div>\n\
<div class=\"line\"><a name=\"l00211\"></a><span class=\"lineno\">  211</span>&#160;<span class=\"comment\">#   3. Examine the pass context and print out information in the context.</span></div>\n\
<div class=\"line\"><a name=\"l00212\"></a><span class=\"lineno\">  212</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00213\"></a><span class=\"lineno\">  213</span>&#160;<span class=\"keyword\">def </span>callbackDataPrint(context, renderItemList, shaderInstance):</div>\n\
<div class=\"line\"><a name=\"l00214\"></a><span class=\"lineno\">  214</span>&#160;    <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> shaderInstance <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00215\"></a><span class=\"lineno\">  215</span>&#160;        paramNames = shaderInstance.parameterList()</div>\n\
<div class=\"line\"><a name=\"l00216\"></a><span class=\"lineno\">  216</span>&#160;        paramCount = len(paramNames)</div>\n\
<div class=\"line\"><a name=\"l00217\"></a><span class=\"lineno\">  217</span>&#160;        print(<span class=\"stringliteral\">&quot;\\tSHADER: # of parameters = &quot;</span> + str(paramCount))</div>\n\
<div class=\"line\"><a name=\"l00218\"></a><span class=\"lineno\">  218</span>&#160;        <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(paramCount):</div>\n\
<div class=\"line\"><a name=\"l00219\"></a><span class=\"lineno\">  219</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t\\tPARAM[&quot;</span> + paramNames[i] + <span class=\"stringliteral\">&quot;]&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00220\"></a><span class=\"lineno\">  220</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00221\"></a><span class=\"lineno\">  221</span>&#160;    numItems = len(renderItemList)</div>\n\
<div class=\"line\"><a name=\"l00222\"></a><span class=\"lineno\">  222</span>&#160;    <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(numItems):</div>\n\
<div class=\"line\"><a name=\"l00223\"></a><span class=\"lineno\">  223</span>&#160;        item = renderItemList[i]</div>\n\
<div class=\"line\"><a name=\"l00224\"></a><span class=\"lineno\">  224</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> item <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00225\"></a><span class=\"lineno\">  225</span>&#160;            path = item.sourceDagPath()</div>\n\
<div class=\"line\"><a name=\"l00226\"></a><span class=\"lineno\">  226</span>&#160;            print(<span class=\"stringliteral\">&quot;\\tRENDER ITEM: &#39;&quot;</span> + item.name() + <span class=\"stringliteral\">&quot;&#39; -- SOURCE: &#39;&quot;</span> + path.fullPathName() + <span class=\"stringliteral\">&quot;&#39;&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00227\"></a><span class=\"lineno\">  227</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00228\"></a><span class=\"lineno\">  228</span>&#160;    passCtx = context.getPassContext()</div>\n\
<div class=\"line\"><a name=\"l00229\"></a><span class=\"lineno\">  229</span>&#160;    passId = passCtx.passIdentifier()</div>\n\
<div class=\"line\"><a name=\"l00230\"></a><span class=\"lineno\">  230</span>&#160;    passSem = passCtx.passSemantics()</div>\n\
<div class=\"line\"><a name=\"l00231\"></a><span class=\"lineno\">  231</span>&#160;    print(<span class=\"stringliteral\">&quot;PASS ID[&quot;</span> + passId + <span class=\"stringliteral\">&quot;], PASS SEMANTICS[&quot;</span> + str(passSem) + <span class=\"stringliteral\">&quot;]&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00232\"></a><span class=\"lineno\">  232</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00233\"></a><span class=\"lineno\">  233</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00234\"></a><span class=\"lineno\">  234</span>&#160;<span class=\"comment\">#   Example utility used by callback to bind lighting information to a shader instance.</span></div>\n\
<div class=\"line\"><a name=\"l00235\"></a><span class=\"lineno\">  235</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00236\"></a><span class=\"lineno\">  236</span>&#160;<span class=\"comment\">#   This callback works specific with the MayaBlinnDirectionLightShadow shader example.</span></div>\n\
<div class=\"line\"><a name=\"l00237\"></a><span class=\"lineno\">  237</span>&#160;<span class=\"comment\">#   It will explicitly binding lighting and shadowing information to the shader instance.</span></div>\n\
<div class=\"line\"><a name=\"l00238\"></a><span class=\"lineno\">  238</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00239\"></a><span class=\"lineno\">  239</span>&#160;<span class=\"keyword\">def </span>shaderOverrideCallbackBindLightingInfo(drawContext, renderItemList, shaderInstance):</div>\n\
<div class=\"line\"><a name=\"l00240\"></a><span class=\"lineno\">  240</span>&#160;    <span class=\"keywordflow\">if</span> shaderInstance <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00241\"></a><span class=\"lineno\">  241</span>&#160;        <span class=\"keywordflow\">return</span></div>\n\
<div class=\"line\"><a name=\"l00242\"></a><span class=\"lineno\">  242</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00243\"></a><span class=\"lineno\">  243</span>&#160;    <span class=\"comment\"># Defaults in case there are no lights</span></div>\n\
<div class=\"line\"><a name=\"l00244\"></a><span class=\"lineno\">  244</span>&#160;    <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00245\"></a><span class=\"lineno\">  245</span>&#160;    globalShadowsOn = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00246\"></a><span class=\"lineno\">  246</span>&#160;    localShadowsOn = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00247\"></a><span class=\"lineno\">  247</span>&#160;    direction = om.MFloatVector(0.0, 0.0, 1.0)</div>\n\
<div class=\"line\"><a name=\"l00248\"></a><span class=\"lineno\">  248</span>&#160;    lightIntensity = 0.0 <span class=\"comment\"># If no lights then black out the light</span></div>\n\
<div class=\"line\"><a name=\"l00249\"></a><span class=\"lineno\">  249</span>&#160;    lightColor = [ 0.0, 0.0, 0.0 ]</div>\n\
<div class=\"line\"><a name=\"l00250\"></a><span class=\"lineno\">  250</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00251\"></a><span class=\"lineno\">  251</span>&#160;    <span class=\"comment\"># Scan to find the first light that has a direction component in it</span></div>\n\
<div class=\"line\"><a name=\"l00252\"></a><span class=\"lineno\">  252</span>&#160;    <span class=\"comment\"># It&#39;s possible we find no lights.</span></div>\n\
<div class=\"line\"><a name=\"l00253\"></a><span class=\"lineno\">  253</span>&#160;    <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00254\"></a><span class=\"lineno\">  254</span>&#160;    considerAllSceneLights = omr.MDrawContext.kFilteredIgnoreLightLimit</div>\n\
<div class=\"line\"><a name=\"l00255\"></a><span class=\"lineno\">  255</span>&#160;    omr.MRenderer.needEvaluateAllLights()</div>\n\
<div class=\"line\"><a name=\"l00256\"></a><span class=\"lineno\">  256</span>&#160;    lightCount = drawContext.numberOfActiveLights(considerAllSceneLights)</div>\n\
<div class=\"line\"><a name=\"l00257\"></a><span class=\"lineno\">  257</span>&#160;    <span class=\"keywordflow\">if</span> lightCount &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00258\"></a><span class=\"lineno\">  258</span>&#160;        shadowViewProj = om.MMatrix()</div>\n\
<div class=\"line\"><a name=\"l00259\"></a><span class=\"lineno\">  259</span>&#160;        shadowResourceTexture = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00260\"></a><span class=\"lineno\">  260</span>&#160;        samplerDesc = omr.MSamplerStateDesc()</div>\n\
<div class=\"line\"><a name=\"l00261\"></a><span class=\"lineno\">  261</span>&#160;        shadowColor = [ 0.0, 0.0, 0.0 ]</div>\n\
<div class=\"line\"><a name=\"l00262\"></a><span class=\"lineno\">  262</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00263\"></a><span class=\"lineno\">  263</span>&#160;        foundDirectional = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00264\"></a><span class=\"lineno\">  264</span>&#160;        <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(lightCount):</div>\n\
<div class=\"line\"><a name=\"l00265\"></a><span class=\"lineno\">  265</span>&#160;            <span class=\"keywordflow\">if</span> foundDirectional:</div>\n\
<div class=\"line\"><a name=\"l00266\"></a><span class=\"lineno\">  266</span>&#160;                <span class=\"keywordflow\">break</span></div>\n\
<div class=\"line\"><a name=\"l00267\"></a><span class=\"lineno\">  267</span>&#160;            globalShadowsOn = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00268\"></a><span class=\"lineno\">  268</span>&#160;            localShadowsOn = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00269\"></a><span class=\"lineno\">  269</span>&#160;            direction = om.MFloatVector(0.0, 0.0, 1.0)</div>\n\
<div class=\"line\"><a name=\"l00270\"></a><span class=\"lineno\">  270</span>&#160;            lightIntensity = 0.0</div>\n\
<div class=\"line\"><a name=\"l00271\"></a><span class=\"lineno\">  271</span>&#160;            lightColor = [ 0.0, 0.0, 0.0 ]</div>\n\
<div class=\"line\"><a name=\"l00272\"></a><span class=\"lineno\">  272</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00273\"></a><span class=\"lineno\">  273</span>&#160;            lightParam = drawContext.getLightParameterInformation( i, considerAllSceneLights )</div>\n\
<div class=\"line\"><a name=\"l00274\"></a><span class=\"lineno\">  274</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> lightParam <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00275\"></a><span class=\"lineno\">  275</span>&#160;                <span class=\"keywordflow\">for</span> pname <span class=\"keywordflow\">in</span> lightParam.parameterList():</div>\n\
<div class=\"line\"><a name=\"l00276\"></a><span class=\"lineno\">  276</span>&#160;                    semantic = lightParam.parameterSemantic( pname )</div>\n\
<div class=\"line\"><a name=\"l00277\"></a><span class=\"lineno\">  277</span>&#160;                    <span class=\"comment\"># Pick a few light parameters to pick up as an example</span></div>\n\
<div class=\"line\"><a name=\"l00278\"></a><span class=\"lineno\">  278</span>&#160;                    <span class=\"keywordflow\">if</span> semantic == omr.MLightParameterInformation.kWorldDirection:</div>\n\
<div class=\"line\"><a name=\"l00279\"></a><span class=\"lineno\">  279</span>&#160;                        floatVals = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00280\"></a><span class=\"lineno\">  280</span>&#160;                        direction = om.MFloatVector( floatVals[0], floatVals[1], floatVals[2] )</div>\n\
<div class=\"line\"><a name=\"l00281\"></a><span class=\"lineno\">  281</span>&#160;                        foundDirectional = <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l00282\"></a><span class=\"lineno\">  282</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kIntensity:</div>\n\
<div class=\"line\"><a name=\"l00283\"></a><span class=\"lineno\">  283</span>&#160;                        floatVals = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00284\"></a><span class=\"lineno\">  284</span>&#160;                        lightIntensity = floatVals[0]</div>\n\
<div class=\"line\"><a name=\"l00285\"></a><span class=\"lineno\">  285</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kColor:</div>\n\
<div class=\"line\"><a name=\"l00286\"></a><span class=\"lineno\">  286</span>&#160;                        lightColor = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00287\"></a><span class=\"lineno\">  287</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00288\"></a><span class=\"lineno\">  288</span>&#160;                    <span class=\"comment\"># Pick up shadowing parameters</span></div>\n\
<div class=\"line\"><a name=\"l00289\"></a><span class=\"lineno\">  289</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kGlobalShadowOn:</div>\n\
<div class=\"line\"><a name=\"l00290\"></a><span class=\"lineno\">  290</span>&#160;                        intVals = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00291\"></a><span class=\"lineno\">  291</span>&#160;                        <span class=\"keywordflow\">if</span> len(intVals) &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00292\"></a><span class=\"lineno\">  292</span>&#160;                            globalShadowsOn = (intVals[0] != 0)</div>\n\
<div class=\"line\"><a name=\"l00293\"></a><span class=\"lineno\">  293</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowOn:</div>\n\
<div class=\"line\"><a name=\"l00294\"></a><span class=\"lineno\">  294</span>&#160;                        intVals = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00295\"></a><span class=\"lineno\">  295</span>&#160;                        <span class=\"keywordflow\">if</span> len(intVals) &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00296\"></a><span class=\"lineno\">  296</span>&#160;                            localShadowsOn = (intVals[0] != 0)</div>\n\
<div class=\"line\"><a name=\"l00297\"></a><span class=\"lineno\">  297</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowViewProj:</div>\n\
<div class=\"line\"><a name=\"l00298\"></a><span class=\"lineno\">  298</span>&#160;                        shadowViewProj = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00299\"></a><span class=\"lineno\">  299</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowMap:</div>\n\
<div class=\"line\"><a name=\"l00300\"></a><span class=\"lineno\">  300</span>&#160;                        shadowResourceTexture = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00301\"></a><span class=\"lineno\">  301</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowSamp:</div>\n\
<div class=\"line\"><a name=\"l00302\"></a><span class=\"lineno\">  302</span>&#160;                        samplerDesc = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00303\"></a><span class=\"lineno\">  303</span>&#160;                    <span class=\"keywordflow\">elif</span> semantic == omr.MLightParameterInformation.kShadowColor:</div>\n\
<div class=\"line\"><a name=\"l00304\"></a><span class=\"lineno\">  304</span>&#160;                        shadowColor = lightParam.getParameter( pname )</div>\n\
<div class=\"line\"><a name=\"l00305\"></a><span class=\"lineno\">  305</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00306\"></a><span class=\"lineno\">  306</span>&#160;            <span class=\"comment\"># Set shadow map and projection if shadows are turned on.</span></div>\n\
<div class=\"line\"><a name=\"l00307\"></a><span class=\"lineno\">  307</span>&#160;            <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00308\"></a><span class=\"lineno\">  308</span>&#160;            <span class=\"keywordflow\">if</span> foundDirectional <span class=\"keywordflow\">and</span> globalShadowsOn <span class=\"keywordflow\">and</span> localShadowsOn <span class=\"keywordflow\">and</span> <span class=\"keywordflow\">not</span> shadowResourceTexture <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00309\"></a><span class=\"lineno\">  309</span>&#160;                resourceHandle = shadowResourceTexture.resourceHandle()</div>\n\
<div class=\"line\"><a name=\"l00310\"></a><span class=\"lineno\">  310</span>&#160;                <span class=\"keywordflow\">if</span> resourceHandle &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00311\"></a><span class=\"lineno\">  311</span>&#160;                    debugShadowBindings = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00312\"></a><span class=\"lineno\">  312</span>&#160;                    <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00313\"></a><span class=\"lineno\">  313</span>&#160;                        shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaShadowPCF1_shadowMap&quot;</span>, shadowResource )</div>\n\
<div class=\"line\"><a name=\"l00314\"></a><span class=\"lineno\">  314</span>&#160;                        <span class=\"keywordflow\">if</span> debugShadowBindings:</div>\n\
<div class=\"line\"><a name=\"l00315\"></a><span class=\"lineno\">  315</span>&#160;                            print(<span class=\"stringliteral\">&quot;Bound shadow map to shader param mayaShadowPCF1_shadowMap&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00316\"></a><span class=\"lineno\">  316</span>&#160;                    <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00317\"></a><span class=\"lineno\">  317</span>&#160;                        <span class=\"keywordflow\">pass</span></div>\n\
<div class=\"line\"><a name=\"l00318\"></a><span class=\"lineno\">  318</span>&#160;                    <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00319\"></a><span class=\"lineno\">  319</span>&#160;                        shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaShadowPCF1_shadowViewProj&quot;</span>, shadowViewProj )</div>\n\
<div class=\"line\"><a name=\"l00320\"></a><span class=\"lineno\">  320</span>&#160;                        <span class=\"keywordflow\">if</span> debugShadowBindings:</div>\n\
<div class=\"line\"><a name=\"l00321\"></a><span class=\"lineno\">  321</span>&#160;                            print(<span class=\"stringliteral\">&quot;Bound shadow map transform to shader param mayaShadowPCF1_shadowViewProj&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00322\"></a><span class=\"lineno\">  322</span>&#160;                    <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00323\"></a><span class=\"lineno\">  323</span>&#160;                        <span class=\"keywordflow\">pass</span></div>\n\
<div class=\"line\"><a name=\"l00324\"></a><span class=\"lineno\">  324</span>&#160;                    <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00325\"></a><span class=\"lineno\">  325</span>&#160;                        shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaShadowPCF1_shadowColor&quot;</span>, shadowColor )</div>\n\
<div class=\"line\"><a name=\"l00326\"></a><span class=\"lineno\">  326</span>&#160;                        <span class=\"keywordflow\">if</span> debugShadowBindings:</div>\n\
<div class=\"line\"><a name=\"l00327\"></a><span class=\"lineno\">  327</span>&#160;                            print(<span class=\"stringliteral\">&quot;Bound shadow map color to shader param mayaShadowPCF1_shadowColor&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00328\"></a><span class=\"lineno\">  328</span>&#160;                    <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00329\"></a><span class=\"lineno\">  329</span>&#160;                        <span class=\"keywordflow\">pass</span></div>\n\
<div class=\"line\"><a name=\"l00330\"></a><span class=\"lineno\">  330</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00331\"></a><span class=\"lineno\">  331</span>&#160;                textureManager = omr.MRenderer.getTextureManager()</div>\n\
<div class=\"line\"><a name=\"l00332\"></a><span class=\"lineno\">  332</span>&#160;                <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> textureManager <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00333\"></a><span class=\"lineno\">  333</span>&#160;                    textureManager.releaseTexture(shadowResourceTexture)</div>\n\
<div class=\"line\"><a name=\"l00334\"></a><span class=\"lineno\">  334</span>&#160;                shadowResourceTexture = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00335\"></a><span class=\"lineno\">  335</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00336\"></a><span class=\"lineno\">  336</span>&#160;    <span class=\"comment\"># Set up parameters which should be set regardless of light existence.</span></div>\n\
<div class=\"line\"><a name=\"l00337\"></a><span class=\"lineno\">  337</span>&#160;    shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaDirectionalLight_direction&quot;</span>, direction)</div>\n\
<div class=\"line\"><a name=\"l00338\"></a><span class=\"lineno\">  338</span>&#160;    shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaDirectionalLight_intensity&quot;</span>, lightIntensity)</div>\n\
<div class=\"line\"><a name=\"l00339\"></a><span class=\"lineno\">  339</span>&#160;    shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaDirectionalLight_color&quot;</span>, lightColor)</div>\n\
<div class=\"line\"><a name=\"l00340\"></a><span class=\"lineno\">  340</span>&#160;    shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaShadowPCF1_mayaGlobalShadowOn&quot;</span>, globalShadowsOn)</div>\n\
<div class=\"line\"><a name=\"l00341\"></a><span class=\"lineno\">  341</span>&#160;    shaderInstance.setParameter(<span class=\"stringliteral\">&quot;mayaShadowPCF1_mayaShadowOn&quot;</span>, localShadowsOn)</div>\n\
<div class=\"line\"><a name=\"l00342\"></a><span class=\"lineno\">  342</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00343\"></a><span class=\"lineno\">  343</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00344\"></a><span class=\"lineno\">  344</span>&#160;<span class=\"comment\">#   Example pre-render callback attached to a shader instance</span></div>\n\
<div class=\"line\"><a name=\"l00345\"></a><span class=\"lineno\">  345</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00346\"></a><span class=\"lineno\">  346</span>&#160;<span class=\"keyword\">def </span>shaderOverridePreDrawCallback(context, renderItemList, shaderInstance):</div>\n\
<div class=\"line\"><a name=\"l00347\"></a><span class=\"lineno\">  347</span>&#160;    print(<span class=\"stringliteral\">&quot;PRE-draw callback triggered for render item list with data:&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00348\"></a><span class=\"lineno\">  348</span>&#160;    callbackDataPrint(context, renderItemList, shaderInstance)</div>\n\
<div class=\"line\"><a name=\"l00349\"></a><span class=\"lineno\">  349</span>&#160;    print(<span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00350\"></a><span class=\"lineno\">  350</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00351\"></a><span class=\"lineno\">  351</span>&#160;    print(<span class=\"stringliteral\">&quot;\\tLIGHTS&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00352\"></a><span class=\"lineno\">  352</span>&#160;    printDrawContextLightInfo( context )</div>\n\
<div class=\"line\"><a name=\"l00353\"></a><span class=\"lineno\">  353</span>&#160;    print(<span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00354\"></a><span class=\"lineno\">  354</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00355\"></a><span class=\"lineno\">  355</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00356\"></a><span class=\"lineno\">  356</span>&#160;<span class=\"comment\">#   Example post-render callback attached to a shader instance</span></div>\n\
<div class=\"line\"><a name=\"l00357\"></a><span class=\"lineno\">  357</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00358\"></a><span class=\"lineno\">  358</span>&#160;<span class=\"keyword\">def </span>shaderOverridePostDrawCallback(context, renderItemList, shaderInstance):</div>\n\
<div class=\"line\"><a name=\"l00359\"></a><span class=\"lineno\">  359</span>&#160;    print(<span class=\"stringliteral\">&quot;POST-draw callback triggered for render item list with data:&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00360\"></a><span class=\"lineno\">  360</span>&#160;    callbackDataPrint(context, renderItemList, shaderInstance)</div>\n\
<div class=\"line\"><a name=\"l00361\"></a><span class=\"lineno\">  361</span>&#160;    print(<span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00362\"></a><span class=\"lineno\">  362</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00363\"></a><span class=\"lineno\">  363</span>&#160;<span class=\"comment\">###################################################################</span></div>\n\
<div class=\"line\"><a name=\"l00364\"></a><span class=\"lineno\">  364</span>&#160;<span class=\"comment\">#   Custom HUD operation</span></div>\n\
<div class=\"line\"><a name=\"l00365\"></a><span class=\"lineno\">  365</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00366\"></a><span class=\"lineno\">  366</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00367\"></a><span class=\"lineno\">  367</span>&#160;<span class=\"keyword\">class </span>viewRenderHUDOperation(omr.MHUDRender):</div>\n\
<div class=\"line\"><a name=\"l00368\"></a><span class=\"lineno\">  368</span>&#160;    <span class=\"keyword\">def </span>__init__(self):</div>\n\
<div class=\"line\"><a name=\"l00369\"></a><span class=\"lineno\">  369</span>&#160;        omr.MHUDRender.__init__(self)</div>\n\
<div class=\"line\"><a name=\"l00370\"></a><span class=\"lineno\">  370</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00371\"></a><span class=\"lineno\">  371</span>&#160;        self.mTargets = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00372\"></a><span class=\"lineno\">  372</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00373\"></a><span class=\"lineno\">  373</span>&#160;    <span class=\"comment\"># Target override</span></div>\n\
<div class=\"line\"><a name=\"l00374\"></a><span class=\"lineno\">  374</span>&#160;    <span class=\"keyword\">def </span>targetOverrideList(self):</div>\n\
<div class=\"line\"><a name=\"l00375\"></a><span class=\"lineno\">  375</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00376\"></a><span class=\"lineno\">  376</span>&#160;            <span class=\"keywordflow\">return</span> [ self.mTargets[kMyColorTarget], self.mTargets[kMyDepthTarget] ]</div>\n\
<div class=\"line\"><a name=\"l00377\"></a><span class=\"lineno\">  377</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00378\"></a><span class=\"lineno\">  378</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00379\"></a><span class=\"lineno\">  379</span>&#160;    <span class=\"keyword\">def </span>hasUIDrawables(self):</div>\n\
<div class=\"line\"><a name=\"l00380\"></a><span class=\"lineno\">  380</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l00381\"></a><span class=\"lineno\">  381</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00382\"></a><span class=\"lineno\">  382</span>&#160;    <span class=\"keyword\">def </span>addUIDrawables(self, drawManager2D, frameContext):</div>\n\
<div class=\"line\"><a name=\"l00383\"></a><span class=\"lineno\">  383</span>&#160;        <span class=\"comment\"># Start draw UI</span></div>\n\
<div class=\"line\"><a name=\"l00384\"></a><span class=\"lineno\">  384</span>&#160;        drawManager2D.beginDrawable()</div>\n\
<div class=\"line\"><a name=\"l00385\"></a><span class=\"lineno\">  385</span>&#160;        <span class=\"comment\"># Set font color</span></div>\n\
<div class=\"line\"><a name=\"l00386\"></a><span class=\"lineno\">  386</span>&#160;        drawManager2D.setColor( om.MColor( (0.455, 0.212, 0.596) ) )</div>\n\
<div class=\"line\"><a name=\"l00387\"></a><span class=\"lineno\">  387</span>&#160;        <span class=\"comment\"># Set font size</span></div>\n\
<div class=\"line\"><a name=\"l00388\"></a><span class=\"lineno\">  388</span>&#160;        drawManager2D.setFontSize( omr.MUIDrawManager.kSmallFontSize )</div>\n\
<div class=\"line\"><a name=\"l00389\"></a><span class=\"lineno\">  389</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00390\"></a><span class=\"lineno\">  390</span>&#160;        <span class=\"comment\"># Draw renderer name</span></div>\n\
<div class=\"line\"><a name=\"l00391\"></a><span class=\"lineno\">  391</span>&#160;        dim = frameContext.getViewportDimensions()</div>\n\
<div class=\"line\"><a name=\"l00392\"></a><span class=\"lineno\">  392</span>&#160;        x=dim[0]</div>\n\
<div class=\"line\"><a name=\"l00393\"></a><span class=\"lineno\">  393</span>&#160;        y=dim[1]</div>\n\
<div class=\"line\"><a name=\"l00394\"></a><span class=\"lineno\">  394</span>&#160;        w=dim[2]</div>\n\
<div class=\"line\"><a name=\"l00395\"></a><span class=\"lineno\">  395</span>&#160;        h=dim[3]</div>\n\
<div class=\"line\"><a name=\"l00396\"></a><span class=\"lineno\">  396</span>&#160;        drawManager2D.text( om.MPoint(w*0.5, h*0.91), <span class=\"stringliteral\">&quot;Sample VP2 Renderer Override&quot;</span>, omr.MUIDrawManager.kCenter )</div>\n\
<div class=\"line\"><a name=\"l00397\"></a><span class=\"lineno\">  397</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00398\"></a><span class=\"lineno\">  398</span>&#160;        <span class=\"comment\"># Draw viewport information</span></div>\n\
<div class=\"line\"><a name=\"l00399\"></a><span class=\"lineno\">  399</span>&#160;        viewportInfoText = <span class=\"stringliteral\">&quot;Viewport information: x= &quot;</span></div>\n\
<div class=\"line\"><a name=\"l00400\"></a><span class=\"lineno\">  400</span>&#160;        viewportInfoText += str(x)</div>\n\
<div class=\"line\"><a name=\"l00401\"></a><span class=\"lineno\">  401</span>&#160;        viewportInfoText += <span class=\"stringliteral\">&quot;, y= &quot;</span></div>\n\
<div class=\"line\"><a name=\"l00402\"></a><span class=\"lineno\">  402</span>&#160;        viewportInfoText += str(y)</div>\n\
<div class=\"line\"><a name=\"l00403\"></a><span class=\"lineno\">  403</span>&#160;        viewportInfoText += <span class=\"stringliteral\">&quot;, w= &quot;</span></div>\n\
<div class=\"line\"><a name=\"l00404\"></a><span class=\"lineno\">  404</span>&#160;        viewportInfoText += str(w)</div>\n\
<div class=\"line\"><a name=\"l00405\"></a><span class=\"lineno\">  405</span>&#160;        viewportInfoText += <span class=\"stringliteral\">&quot;, h= &quot;</span></div>\n\
<div class=\"line\"><a name=\"l00406\"></a><span class=\"lineno\">  406</span>&#160;        viewportInfoText += str(h)</div>\n\
<div class=\"line\"><a name=\"l00407\"></a><span class=\"lineno\">  407</span>&#160;        drawManager2D.text( om.MPoint(w*0.5, h*0.885), viewportInfoText, omr.MUIDrawManager.kCenter )</div>\n\
<div class=\"line\"><a name=\"l00408\"></a><span class=\"lineno\">  408</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00409\"></a><span class=\"lineno\">  409</span>&#160;        <span class=\"comment\"># End draw UI</span></div>\n\
<div class=\"line\"><a name=\"l00410\"></a><span class=\"lineno\">  410</span>&#160;        drawManager2D.endDrawable()</div>\n\
<div class=\"line\"><a name=\"l00411\"></a><span class=\"lineno\">  411</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00412\"></a><span class=\"lineno\">  412</span>&#160;    <span class=\"keyword\">def </span>setRenderTargets(self, targets):</div>\n\
<div class=\"line\"><a name=\"l00413\"></a><span class=\"lineno\">  413</span>&#160;        self.mTargets = targets</div>\n\
<div class=\"line\"><a name=\"l00414\"></a><span class=\"lineno\">  414</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00415\"></a><span class=\"lineno\">  415</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00416\"></a><span class=\"lineno\">  416</span>&#160;<span class=\"comment\">###################################################################</span></div>\n\
<div class=\"line\"><a name=\"l00417\"></a><span class=\"lineno\">  417</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00418\"></a><span class=\"lineno\">  418</span>&#160;<span class=\"comment\">#   Custom present target operation</span></div>\n\
<div class=\"line\"><a name=\"l00419\"></a><span class=\"lineno\">  419</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00420\"></a><span class=\"lineno\">  420</span>&#160;<span class=\"comment\">#   Only overrides the targets to present</span></div>\n\
<div class=\"line\"><a name=\"l00421\"></a><span class=\"lineno\">  421</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00422\"></a><span class=\"lineno\">  422</span>&#160;<span class=\"keyword\">class </span>viewRenderPresentTarget(omr.MPresentTarget):</div>\n\
<div class=\"line\"><a name=\"l00423\"></a><span class=\"lineno\">  423</span>&#160;    <span class=\"keyword\">def </span>__init__(self, name):</div>\n\
<div class=\"line\"><a name=\"l00424\"></a><span class=\"lineno\">  424</span>&#160;        omr.MPresentTarget.__init__(self, name)</div>\n\
<div class=\"line\"><a name=\"l00425\"></a><span class=\"lineno\">  425</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00426\"></a><span class=\"lineno\">  426</span>&#160;        <span class=\"comment\"># Targets used as input parameters to mShaderInstance</span></div>\n\
<div class=\"line\"><a name=\"l00427\"></a><span class=\"lineno\">  427</span>&#160;        self.mTargets = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00428\"></a><span class=\"lineno\">  428</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00429\"></a><span class=\"lineno\">  429</span>&#160;    <span class=\"keyword\">def </span>targetOverrideList(self):</div>\n\
<div class=\"line\"><a name=\"l00430\"></a><span class=\"lineno\">  430</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00431\"></a><span class=\"lineno\">  431</span>&#160;            <span class=\"keywordflow\">return</span> [ self.mTargets[kMyColorTarget], self.mTargets[kMyDepthTarget] ]</div>\n\
<div class=\"line\"><a name=\"l00432\"></a><span class=\"lineno\">  432</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00433\"></a><span class=\"lineno\">  433</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00434\"></a><span class=\"lineno\">  434</span>&#160;    <span class=\"keyword\">def </span>setRenderTargets(self, targets):</div>\n\
<div class=\"line\"><a name=\"l00435\"></a><span class=\"lineno\">  435</span>&#160;        self.mTargets = targets</div>\n\
<div class=\"line\"><a name=\"l00436\"></a><span class=\"lineno\">  436</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00437\"></a><span class=\"lineno\">  437</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00438\"></a><span class=\"lineno\">  438</span>&#160;<span class=\"comment\">###################################################################</span></div>\n\
<div class=\"line\"><a name=\"l00439\"></a><span class=\"lineno\">  439</span>&#160;<span class=\"comment\">#   Custom quad operation</span></div>\n\
<div class=\"line\"><a name=\"l00440\"></a><span class=\"lineno\">  440</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00441\"></a><span class=\"lineno\">  441</span>&#160;<span class=\"comment\">#   General quad operation which can be instantiated with a few</span></div>\n\
<div class=\"line\"><a name=\"l00442\"></a><span class=\"lineno\">  442</span>&#160;<span class=\"comment\">#   different shaders.</span></div>\n\
<div class=\"line\"><a name=\"l00443\"></a><span class=\"lineno\">  443</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00444\"></a><span class=\"lineno\">  444</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00445\"></a><span class=\"lineno\">  445</span>&#160;<span class=\"keyword\">class </span>viewRenderQuadRender(omr.MQuadRender):</div>\n\
<div class=\"line\"><a name=\"l00446\"></a><span class=\"lineno\">  446</span>&#160;    <span class=\"comment\"># Shader list</span></div>\n\
<div class=\"line\"><a name=\"l00447\"></a><span class=\"lineno\">  447</span>&#160;    kEffectNone             = 0</div>\n\
<div class=\"line\"><a name=\"l00448\"></a><span class=\"lineno\">  448</span>&#160;    kPost_EffectMonochrome  = 1   <span class=\"comment\"># Mono color shader</span></div>\n\
<div class=\"line\"><a name=\"l00449\"></a><span class=\"lineno\">  449</span>&#160;    kPost_EffectEdgeDetect  = 2   <span class=\"comment\"># Edge detect shader</span></div>\n\
<div class=\"line\"><a name=\"l00450\"></a><span class=\"lineno\">  450</span>&#160;    kPost_EffectInvert      = 3   <span class=\"comment\"># Invert color shader</span></div>\n\
<div class=\"line\"><a name=\"l00451\"></a><span class=\"lineno\">  451</span>&#160;    kScene_Threshold        = 4   <span class=\"comment\"># Color threshold shader</span></div>\n\
<div class=\"line\"><a name=\"l00452\"></a><span class=\"lineno\">  452</span>&#160;    kScene_BlurHoriz        = 5   <span class=\"comment\"># Horizontal blur shader</span></div>\n\
<div class=\"line\"><a name=\"l00453\"></a><span class=\"lineno\">  453</span>&#160;    kScene_BlurVert         = 6   <span class=\"comment\"># Vertical blur shader</span></div>\n\
<div class=\"line\"><a name=\"l00454\"></a><span class=\"lineno\">  454</span>&#160;    kSceneBlur_Blend        = 7   <span class=\"comment\"># Blend shader</span></div>\n\
<div class=\"line\"><a name=\"l00455\"></a><span class=\"lineno\">  455</span>&#160;    kPre_MandelBrot         = 8   <span class=\"comment\"># Mandelbrot shader</span></div>\n\
<div class=\"line\"><a name=\"l00456\"></a><span class=\"lineno\">  456</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00457\"></a><span class=\"lineno\">  457</span>&#160;    <span class=\"keyword\">def </span>__init__(self, name):</div>\n\
<div class=\"line\"><a name=\"l00458\"></a><span class=\"lineno\">  458</span>&#160;        omr.MQuadRender.__init__(self, name)</div>\n\
<div class=\"line\"><a name=\"l00459\"></a><span class=\"lineno\">  459</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00460\"></a><span class=\"lineno\">  460</span>&#160;        <span class=\"comment\"># Shader to use for the quad render</span></div>\n\
<div class=\"line\"><a name=\"l00461\"></a><span class=\"lineno\">  461</span>&#160;        self.mShaderInstance = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00462\"></a><span class=\"lineno\">  462</span>&#160;        <span class=\"comment\"># Targets used as input parameters to mShaderInstance</span></div>\n\
<div class=\"line\"><a name=\"l00463\"></a><span class=\"lineno\">  463</span>&#160;        self.mTargets = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00464\"></a><span class=\"lineno\">  464</span>&#160;        <span class=\"comment\"># View rectangle</span></div>\n\
<div class=\"line\"><a name=\"l00465\"></a><span class=\"lineno\">  465</span>&#160;        self.mViewRectangle = om.MFloatPoint()</div>\n\
<div class=\"line\"><a name=\"l00466\"></a><span class=\"lineno\">  466</span>&#160;        <span class=\"comment\"># Shader to use for quad rendering</span></div>\n\
<div class=\"line\"><a name=\"l00467\"></a><span class=\"lineno\">  467</span>&#160;        self.mShader = self.kEffectNone</div>\n\
<div class=\"line\"><a name=\"l00468\"></a><span class=\"lineno\">  468</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00469\"></a><span class=\"lineno\">  469</span>&#160;    <span class=\"keyword\">def </span>__del__(self):</div>\n\
<div class=\"line\"><a name=\"l00470\"></a><span class=\"lineno\">  470</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mShaderInstance <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00471\"></a><span class=\"lineno\">  471</span>&#160;            shaderMgr = omr.MRenderer.getShaderManager()</div>\n\
<div class=\"line\"><a name=\"l00472\"></a><span class=\"lineno\">  472</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> shaderMgr <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00473\"></a><span class=\"lineno\">  473</span>&#160;                shaderMgr.releaseShader(self.mShaderInstance)</div>\n\
<div class=\"line\"><a name=\"l00474\"></a><span class=\"lineno\">  474</span>&#160;            self.mShaderInstance = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00475\"></a><span class=\"lineno\">  475</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00476\"></a><span class=\"lineno\">  476</span>&#160;    <span class=\"comment\"># Return the appropriate shader instance based on the what</span></div>\n\
<div class=\"line\"><a name=\"l00477\"></a><span class=\"lineno\">  477</span>&#160;    <span class=\"comment\"># we want the quad operation to perform</span></div>\n\
<div class=\"line\"><a name=\"l00478\"></a><span class=\"lineno\">  478</span>&#160;    <span class=\"keyword\">def </span>shader(self):</div>\n\
<div class=\"line\"><a name=\"l00479\"></a><span class=\"lineno\">  479</span>&#160;        <span class=\"comment\"># Create a new shader instance for this quad render instance</span></div>\n\
<div class=\"line\"><a name=\"l00480\"></a><span class=\"lineno\">  480</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00481\"></a><span class=\"lineno\">  481</span>&#160;        <span class=\"keywordflow\">if</span> self.mShaderInstance <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00482\"></a><span class=\"lineno\">  482</span>&#160;            shaderMgr = omr.MRenderer.getShaderManager()</div>\n\
<div class=\"line\"><a name=\"l00483\"></a><span class=\"lineno\">  483</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> shaderMgr <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00484\"></a><span class=\"lineno\">  484</span>&#160;                <span class=\"comment\"># Note in the following code that we are not specifying the</span></div>\n\
<div class=\"line\"><a name=\"l00485\"></a><span class=\"lineno\">  485</span>&#160;                <span class=\"comment\"># full file name, but relying on the getEffectFileShader() logic</span></div>\n\
<div class=\"line\"><a name=\"l00486\"></a><span class=\"lineno\">  486</span>&#160;                <span class=\"comment\"># to determine the correct file name extension based on the shading language</span></div>\n\
<div class=\"line\"><a name=\"l00487\"></a><span class=\"lineno\">  487</span>&#160;                <span class=\"comment\"># which is appropriate for the drawing API (DirectX or OpenGL).</span></div>\n\
<div class=\"line\"><a name=\"l00488\"></a><span class=\"lineno\">  488</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00489\"></a><span class=\"lineno\">  489</span>&#160;                <span class=\"comment\"># Refer to the documentation for this method to review how the</span></div>\n\
<div class=\"line\"><a name=\"l00490\"></a><span class=\"lineno\">  490</span>&#160;                <span class=\"comment\"># final name on disk is derived.</span></div>\n\
<div class=\"line\"><a name=\"l00491\"></a><span class=\"lineno\">  491</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00492\"></a><span class=\"lineno\">  492</span>&#160;                <span class=\"comment\"># The second argument here is the technique. If desired</span></div>\n\
<div class=\"line\"><a name=\"l00493\"></a><span class=\"lineno\">  493</span>&#160;                <span class=\"comment\"># and effect on disk can hold different techniques. For each unique</span></div>\n\
<div class=\"line\"><a name=\"l00494\"></a><span class=\"lineno\">  494</span>&#160;                <span class=\"comment\"># effect + technique a different shader instance is created.</span></div>\n\
<div class=\"line\"><a name=\"l00495\"></a><span class=\"lineno\">  495</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00496\"></a><span class=\"lineno\">  496</span>&#160;                <span class=\"keywordflow\">if</span> self.mShader == self.kPre_MandelBrot:</div>\n\
<div class=\"line\"><a name=\"l00497\"></a><span class=\"lineno\">  497</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;MandelBrot&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00498\"></a><span class=\"lineno\">  498</span>&#160;                <span class=\"keywordflow\">elif</span> self.mShader == self.kPost_EffectMonochrome:</div>\n\
<div class=\"line\"><a name=\"l00499\"></a><span class=\"lineno\">  499</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;FilterMonochrome&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00500\"></a><span class=\"lineno\">  500</span>&#160;                <span class=\"keywordflow\">elif</span> self.mShader == self.kPost_EffectEdgeDetect:</div>\n\
<div class=\"line\"><a name=\"l00501\"></a><span class=\"lineno\">  501</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;FilterEdgeDetect&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00502\"></a><span class=\"lineno\">  502</span>&#160;                <span class=\"keywordflow\">elif</span> self.mShader == self.kPost_EffectInvert:</div>\n\
<div class=\"line\"><a name=\"l00503\"></a><span class=\"lineno\">  503</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;Invert&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00504\"></a><span class=\"lineno\">  504</span>&#160;                <span class=\"keywordflow\">elif</span> self.mShader == self.kScene_Threshold:</div>\n\
<div class=\"line\"><a name=\"l00505\"></a><span class=\"lineno\">  505</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;Threshold&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00506\"></a><span class=\"lineno\">  506</span>&#160;                <span class=\"keywordflow\">elif</span> self.mShader == self.kScene_BlurHoriz:</div>\n\
<div class=\"line\"><a name=\"l00507\"></a><span class=\"lineno\">  507</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;Blur&quot;</span>, <span class=\"stringliteral\">&quot;BlurHoriz&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00508\"></a><span class=\"lineno\">  508</span>&#160;                <span class=\"keywordflow\">elif</span> self.mShader == self.kScene_BlurVert:</div>\n\
<div class=\"line\"><a name=\"l00509\"></a><span class=\"lineno\">  509</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;Blur&quot;</span>, <span class=\"stringliteral\">&quot;BlurVert&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00510\"></a><span class=\"lineno\">  510</span>&#160;                <span class=\"keywordflow\">elif</span> self.mShader == self.kSceneBlur_Blend:</div>\n\
<div class=\"line\"><a name=\"l00511\"></a><span class=\"lineno\">  511</span>&#160;                    self.mShaderInstance = shaderMgr.getEffectsFileShader( <span class=\"stringliteral\">&quot;Blend&quot;</span>, <span class=\"stringliteral\">&quot;Add&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l00512\"></a><span class=\"lineno\">  512</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00513\"></a><span class=\"lineno\">  513</span>&#160;        <span class=\"comment\"># Set parameters on the shader instance.</span></div>\n\
<div class=\"line\"><a name=\"l00514\"></a><span class=\"lineno\">  514</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00515\"></a><span class=\"lineno\">  515</span>&#160;        <span class=\"comment\"># This is where the input render targets can be specified by binding</span></div>\n\
<div class=\"line\"><a name=\"l00516\"></a><span class=\"lineno\">  516</span>&#160;        <span class=\"comment\"># a render target to the appropriate parameter on the shader instance.</span></div>\n\
<div class=\"line\"><a name=\"l00517\"></a><span class=\"lineno\">  517</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00518\"></a><span class=\"lineno\">  518</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mShaderInstance <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00519\"></a><span class=\"lineno\">  519</span>&#160;            <span class=\"keywordflow\">if</span> self.mShader == self.kPre_MandelBrot:</div>\n\
<div class=\"line\"><a name=\"l00520\"></a><span class=\"lineno\">  520</span>&#160;                <span class=\"comment\"># Example of a simple float parameter setting.</span></div>\n\
<div class=\"line\"><a name=\"l00521\"></a><span class=\"lineno\">  521</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00522\"></a><span class=\"lineno\">  522</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gIterate&quot;</span>, 50)</div>\n\
<div class=\"line\"><a name=\"l00523\"></a><span class=\"lineno\">  523</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00524\"></a><span class=\"lineno\">  524</span>&#160;                    print(<span class=\"stringliteral\">&quot;Could not change mandelbrot parameter&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00525\"></a><span class=\"lineno\">  525</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00526\"></a><span class=\"lineno\">  526</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00527\"></a><span class=\"lineno\">  527</span>&#160;            <span class=\"keywordflow\">elif</span> self.mShader == self.kPost_EffectInvert:</div>\n\
<div class=\"line\"><a name=\"l00528\"></a><span class=\"lineno\">  528</span>&#160;                <span class=\"comment\"># Set the input texture parameter &#39;gInputTex&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00529\"></a><span class=\"lineno\">  529</span>&#160;                <span class=\"comment\"># a given color target</span></div>\n\
<div class=\"line\"><a name=\"l00530\"></a><span class=\"lineno\">  530</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00531\"></a><span class=\"lineno\">  531</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gInputTex&quot;</span>, self.mTargets[kMyColorTarget])</div>\n\
<div class=\"line\"><a name=\"l00532\"></a><span class=\"lineno\">  532</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00533\"></a><span class=\"lineno\">  533</span>&#160;                    print(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on invert shader&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00534\"></a><span class=\"lineno\">  534</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00535\"></a><span class=\"lineno\">  535</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00536\"></a><span class=\"lineno\">  536</span>&#160;            <span class=\"keywordflow\">elif</span> self.mShader == self.kScene_Threshold:</div>\n\
<div class=\"line\"><a name=\"l00537\"></a><span class=\"lineno\">  537</span>&#160;                <span class=\"comment\"># Set the input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00538\"></a><span class=\"lineno\">  538</span>&#160;                <span class=\"comment\"># a given color target</span></div>\n\
<div class=\"line\"><a name=\"l00539\"></a><span class=\"lineno\">  539</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00540\"></a><span class=\"lineno\">  540</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, self.mTargets[kMyColorTarget])</div>\n\
<div class=\"line\"><a name=\"l00541\"></a><span class=\"lineno\">  541</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00542\"></a><span class=\"lineno\">  542</span>&#160;                    print(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on threshold shader&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00543\"></a><span class=\"lineno\">  543</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00544\"></a><span class=\"lineno\">  544</span>&#160;                self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gBrightThreshold&quot;</span>, 0.7 )</div>\n\
<div class=\"line\"><a name=\"l00545\"></a><span class=\"lineno\">  545</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00546\"></a><span class=\"lineno\">  546</span>&#160;            <span class=\"keywordflow\">elif</span> self.mShader == self.kScene_BlurHoriz:</div>\n\
<div class=\"line\"><a name=\"l00547\"></a><span class=\"lineno\">  547</span>&#160;                <span class=\"comment\"># Set the input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00548\"></a><span class=\"lineno\">  548</span>&#160;                <span class=\"comment\"># a given color target</span></div>\n\
<div class=\"line\"><a name=\"l00549\"></a><span class=\"lineno\">  549</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00550\"></a><span class=\"lineno\">  550</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, self.mTargets[kMyBlurTarget])</div>\n\
<div class=\"line\"><a name=\"l00551\"></a><span class=\"lineno\">  551</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00552\"></a><span class=\"lineno\">  552</span>&#160;                    print(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on hblur shader&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00553\"></a><span class=\"lineno\">  553</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00554\"></a><span class=\"lineno\">  554</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00555\"></a><span class=\"lineno\">  555</span>&#160;            <span class=\"keywordflow\">elif</span> self.mShader == self.kScene_BlurVert:</div>\n\
<div class=\"line\"><a name=\"l00556\"></a><span class=\"lineno\">  556</span>&#160;                <span class=\"comment\"># Set the input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00557\"></a><span class=\"lineno\">  557</span>&#160;                <span class=\"comment\"># a given color target</span></div>\n\
<div class=\"line\"><a name=\"l00558\"></a><span class=\"lineno\">  558</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00559\"></a><span class=\"lineno\">  559</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, self.mTargets[kMyBlurTarget])</div>\n\
<div class=\"line\"><a name=\"l00560\"></a><span class=\"lineno\">  560</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00561\"></a><span class=\"lineno\">  561</span>&#160;                    print(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on vblur shader&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00562\"></a><span class=\"lineno\">  562</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00563\"></a><span class=\"lineno\">  563</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00564\"></a><span class=\"lineno\">  564</span>&#160;            <span class=\"keywordflow\">elif</span> self.mShader == self.kSceneBlur_Blend:</div>\n\
<div class=\"line\"><a name=\"l00565\"></a><span class=\"lineno\">  565</span>&#160;                <span class=\"comment\"># Set the first input texture parameter &#39;gSourceTex&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00566\"></a><span class=\"lineno\">  566</span>&#160;                <span class=\"comment\"># one color target.</span></div>\n\
<div class=\"line\"><a name=\"l00567\"></a><span class=\"lineno\">  567</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00568\"></a><span class=\"lineno\">  568</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gSourceTex&quot;</span>, self.mTargets[kMyColorTarget])</div>\n\
<div class=\"line\"><a name=\"l00569\"></a><span class=\"lineno\">  569</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00570\"></a><span class=\"lineno\">  570</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00571\"></a><span class=\"lineno\">  571</span>&#160;                <span class=\"comment\"># Set the second input texture parameter &#39;gSourceTex2&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00572\"></a><span class=\"lineno\">  572</span>&#160;                <span class=\"comment\"># a second color target.</span></div>\n\
<div class=\"line\"><a name=\"l00573\"></a><span class=\"lineno\">  573</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00574\"></a><span class=\"lineno\">  574</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gSourceTex2&quot;</span>, self.mTargets[kMyBlurTarget])</div>\n\
<div class=\"line\"><a name=\"l00575\"></a><span class=\"lineno\">  575</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00576\"></a><span class=\"lineno\">  576</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00577\"></a><span class=\"lineno\">  577</span>&#160;                self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gBlendSrc&quot;</span>, 0.3 )</div>\n\
<div class=\"line\"><a name=\"l00578\"></a><span class=\"lineno\">  578</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00579\"></a><span class=\"lineno\">  579</span>&#160;            <span class=\"keywordflow\">elif</span> self.mShader == self.kPost_EffectMonochrome:</div>\n\
<div class=\"line\"><a name=\"l00580\"></a><span class=\"lineno\">  580</span>&#160;                <span class=\"comment\"># Set the input texture parameter &#39;gInputTex&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00581\"></a><span class=\"lineno\">  581</span>&#160;                <span class=\"comment\"># a given color target</span></div>\n\
<div class=\"line\"><a name=\"l00582\"></a><span class=\"lineno\">  582</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00583\"></a><span class=\"lineno\">  583</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gInputTex&quot;</span>, self.mTargets[kMyColorTarget])</div>\n\
<div class=\"line\"><a name=\"l00584\"></a><span class=\"lineno\">  584</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00585\"></a><span class=\"lineno\">  585</span>&#160;                    print(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on monochrome shader&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00586\"></a><span class=\"lineno\">  586</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00587\"></a><span class=\"lineno\">  587</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00588\"></a><span class=\"lineno\">  588</span>&#160;            <span class=\"keywordflow\">elif</span> self.mShader == self.kPost_EffectEdgeDetect:</div>\n\
<div class=\"line\"><a name=\"l00589\"></a><span class=\"lineno\">  589</span>&#160;                <span class=\"comment\"># Set the input texture parameter &#39;gInputTex&#39; to use</span></div>\n\
<div class=\"line\"><a name=\"l00590\"></a><span class=\"lineno\">  590</span>&#160;                <span class=\"comment\"># a given color target</span></div>\n\
<div class=\"line\"><a name=\"l00591\"></a><span class=\"lineno\">  591</span>&#160;                <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00592\"></a><span class=\"lineno\">  592</span>&#160;                    self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gInputTex&quot;</span>, self.mTargets[kMyColorTarget])</div>\n\
<div class=\"line\"><a name=\"l00593\"></a><span class=\"lineno\">  593</span>&#160;                <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00594\"></a><span class=\"lineno\">  594</span>&#160;                    print(<span class=\"stringliteral\">&quot;Could not set input render target / texture parameter on edge detect shader&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00595\"></a><span class=\"lineno\">  595</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00596\"></a><span class=\"lineno\">  596</span>&#160;                self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gThickness&quot;</span>, 1.0 )</div>\n\
<div class=\"line\"><a name=\"l00597\"></a><span class=\"lineno\">  597</span>&#160;                self.mShaderInstance.setParameter(<span class=\"stringliteral\">&quot;gThreshold&quot;</span>, 0.1 )</div>\n\
<div class=\"line\"><a name=\"l00598\"></a><span class=\"lineno\">  598</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00599\"></a><span class=\"lineno\">  599</span>&#160;        <span class=\"keywordflow\">return</span> self.mShaderInstance</div>\n\
<div class=\"line\"><a name=\"l00600\"></a><span class=\"lineno\">  600</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00601\"></a><span class=\"lineno\">  601</span>&#160;    <span class=\"comment\"># Based on which shader is being used for the quad render</span></div>\n\
<div class=\"line\"><a name=\"l00602\"></a><span class=\"lineno\">  602</span>&#160;    <span class=\"comment\"># we want to render to different targets. For the</span></div>\n\
<div class=\"line\"><a name=\"l00603\"></a><span class=\"lineno\">  603</span>&#160;    <span class=\"comment\"># threshold and two blur shaders the temporary &#39;blur&#39;</span></div>\n\
<div class=\"line\"><a name=\"l00604\"></a><span class=\"lineno\">  604</span>&#160;    <span class=\"comment\"># target is used. Otherwise rendering should be directed</span></div>\n\
<div class=\"line\"><a name=\"l00605\"></a><span class=\"lineno\">  605</span>&#160;    <span class=\"comment\"># to the custom color and depth target.</span></div>\n\
<div class=\"line\"><a name=\"l00606\"></a><span class=\"lineno\">  606</span>&#160;    <span class=\"keyword\">def </span>targetOverrideList(self):</div>\n\
<div class=\"line\"><a name=\"l00607\"></a><span class=\"lineno\">  607</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00608\"></a><span class=\"lineno\">  608</span>&#160;            <span class=\"comment\"># Render to blur target for blur operations</span></div>\n\
<div class=\"line\"><a name=\"l00609\"></a><span class=\"lineno\">  609</span>&#160;            <span class=\"keywordflow\">if</span> self.mShader == self.kScene_Threshold <span class=\"keywordflow\">or</span> self.mShader == self.kScene_BlurHoriz <span class=\"keywordflow\">or</span> self.mShader == self.kScene_BlurVert:</div>\n\
<div class=\"line\"><a name=\"l00610\"></a><span class=\"lineno\">  610</span>&#160;                <span class=\"keywordflow\">return</span> [ self.mTargets[kMyBlurTarget] ]</div>\n\
<div class=\"line\"><a name=\"l00611\"></a><span class=\"lineno\">  611</span>&#160;            <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l00612\"></a><span class=\"lineno\">  612</span>&#160;                <span class=\"keywordflow\">return</span> [ self.mTargets[kMyColorTarget], self.mTargets[kMyDepthTarget] ]</div>\n\
<div class=\"line\"><a name=\"l00613\"></a><span class=\"lineno\">  613</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00614\"></a><span class=\"lineno\">  614</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00615\"></a><span class=\"lineno\">  615</span>&#160;    <span class=\"comment\"># Set the clear override to use.</span></div>\n\
<div class=\"line\"><a name=\"l00616\"></a><span class=\"lineno\">  616</span>&#160;    <span class=\"keyword\">def </span>clearOperation(self):</div>\n\
<div class=\"line\"><a name=\"l00617\"></a><span class=\"lineno\">  617</span>&#160;        clearOp = self.mClearOperation</div>\n\
<div class=\"line\"><a name=\"l00618\"></a><span class=\"lineno\">  618</span>&#160;        <span class=\"comment\"># Want to clear everything since the quad render is the first operation.</span></div>\n\
<div class=\"line\"><a name=\"l00619\"></a><span class=\"lineno\">  619</span>&#160;        <span class=\"keywordflow\">if</span> self.mShader == self.kPre_MandelBrot:</div>\n\
<div class=\"line\"><a name=\"l00620\"></a><span class=\"lineno\">  620</span>&#160;            clearOp.setClearGradient( <span class=\"keyword\">False</span> )</div>\n\
<div class=\"line\"><a name=\"l00621\"></a><span class=\"lineno\">  621</span>&#160;            clearOp.setMask( omr.MClearOperation.kClearAll )</div>\n\
<div class=\"line\"><a name=\"l00622\"></a><span class=\"lineno\">  622</span>&#160;        <span class=\"comment\"># This is a post processing operation, so we don&#39;t want to clear anything</span></div>\n\
<div class=\"line\"><a name=\"l00623\"></a><span class=\"lineno\">  623</span>&#160;        <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l00624\"></a><span class=\"lineno\">  624</span>&#160;            clearOp.setClearGradient( <span class=\"keyword\">False</span> )</div>\n\
<div class=\"line\"><a name=\"l00625\"></a><span class=\"lineno\">  625</span>&#160;            clearOp.setMask( omr.MClearOperation.kClearNone )</div>\n\
<div class=\"line\"><a name=\"l00626\"></a><span class=\"lineno\">  626</span>&#160;        <span class=\"keywordflow\">return</span> clearOp</div>\n\
<div class=\"line\"><a name=\"l00627\"></a><span class=\"lineno\">  627</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00628\"></a><span class=\"lineno\">  628</span>&#160;    <span class=\"keyword\">def </span>setRenderTargets(self, targets):</div>\n\
<div class=\"line\"><a name=\"l00629\"></a><span class=\"lineno\">  629</span>&#160;        self.mTargets = targets</div>\n\
<div class=\"line\"><a name=\"l00630\"></a><span class=\"lineno\">  630</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00631\"></a><span class=\"lineno\">  631</span>&#160;    <span class=\"keyword\">def </span>setShader(self, shader):</div>\n\
<div class=\"line\"><a name=\"l00632\"></a><span class=\"lineno\">  632</span>&#160;        self.mShader = shader</div>\n\
<div class=\"line\"><a name=\"l00633\"></a><span class=\"lineno\">  633</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00634\"></a><span class=\"lineno\">  634</span>&#160;    <span class=\"keyword\">def </span>viewRectangle(self):</div>\n\
<div class=\"line\"><a name=\"l00635\"></a><span class=\"lineno\">  635</span>&#160;        <span class=\"keywordflow\">return</span> self.mViewRectangle</div>\n\
<div class=\"line\"><a name=\"l00636\"></a><span class=\"lineno\">  636</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00637\"></a><span class=\"lineno\">  637</span>&#160;    <span class=\"keyword\">def </span>setViewRectangle(self, rect):</div>\n\
<div class=\"line\"><a name=\"l00638\"></a><span class=\"lineno\">  638</span>&#160;        self.mViewRectangle = rect</div>\n\
<div class=\"line\"><a name=\"l00639\"></a><span class=\"lineno\">  639</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00640\"></a><span class=\"lineno\">  640</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00641\"></a><span class=\"lineno\">  641</span>&#160;<span class=\"comment\">###################################################################</span></div>\n\
<div class=\"line\"><a name=\"l00642\"></a><span class=\"lineno\">  642</span>&#160;<span class=\"comment\">#   Simple scene operation</span></div>\n\
<div class=\"line\"><a name=\"l00643\"></a><span class=\"lineno\">  643</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00644\"></a><span class=\"lineno\">  644</span>&#160;<span class=\"comment\">#   Example of just overriding a few options on the scene render.</span></div>\n\
<div class=\"line\"><a name=\"l00645\"></a><span class=\"lineno\">  645</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00646\"></a><span class=\"lineno\">  646</span>&#160;<span class=\"keyword\">class </span>simpleViewRenderSceneRender(omr.MSceneRender):</div>\n\
<div class=\"line\"><a name=\"l00647\"></a><span class=\"lineno\">  647</span>&#160;    <span class=\"keyword\">def </span>__init__(self, name):</div>\n\
<div class=\"line\"><a name=\"l00648\"></a><span class=\"lineno\">  648</span>&#160;        omr.MSceneRender.__init__(self, name)</div>\n\
<div class=\"line\"><a name=\"l00649\"></a><span class=\"lineno\">  649</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00650\"></a><span class=\"lineno\">  650</span>&#160;        self.mViewRectangle = om.MFloatPoint(0.0, 0.0, 1.0, 1.0) <span class=\"comment\"># 100 % of target size</span></div>\n\
<div class=\"line\"><a name=\"l00651\"></a><span class=\"lineno\">  651</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00652\"></a><span class=\"lineno\">  652</span>&#160;    <span class=\"keyword\">def </span>viewportRectangleOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00653\"></a><span class=\"lineno\">  653</span>&#160;        <span class=\"comment\"># Enable this flag to use viewport sizing</span></div>\n\
<div class=\"line\"><a name=\"l00654\"></a><span class=\"lineno\">  654</span>&#160;        testRectangleSize = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00655\"></a><span class=\"lineno\">  655</span>&#160;        <span class=\"keywordflow\">if</span> testRectangleSize:</div>\n\
<div class=\"line\"><a name=\"l00656\"></a><span class=\"lineno\">  656</span>&#160;            <span class=\"comment\"># 1/3 to the right and 10 % up. 1/2 the target size.</span></div>\n\
<div class=\"line\"><a name=\"l00657\"></a><span class=\"lineno\">  657</span>&#160;            self.mViewRectangle = om.MFloatPoint(0.33, 0.10, 0.50, 0.50)</div>\n\
<div class=\"line\"><a name=\"l00658\"></a><span class=\"lineno\">  658</span>&#160;        <span class=\"keywordflow\">return</span> self.mViewRectangle</div>\n\
<div class=\"line\"><a name=\"l00659\"></a><span class=\"lineno\">  659</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00660\"></a><span class=\"lineno\">  660</span>&#160;    <span class=\"keyword\">def </span>clearOperation(self):</div>\n\
<div class=\"line\"><a name=\"l00661\"></a><span class=\"lineno\">  661</span>&#160;        <span class=\"comment\"># Override to clear to these gradient colors</span></div>\n\
<div class=\"line\"><a name=\"l00662\"></a><span class=\"lineno\">  662</span>&#160;        val1 = [ 0.0, 0.2, 0.8, 1.0 ]</div>\n\
<div class=\"line\"><a name=\"l00663\"></a><span class=\"lineno\">  663</span>&#160;        val2 = [ 0.5, 0.4, 0.1, 1.0 ]</div>\n\
<div class=\"line\"><a name=\"l00664\"></a><span class=\"lineno\">  664</span>&#160;        clearOp = self.mClearOperation</div>\n\
<div class=\"line\"><a name=\"l00665\"></a><span class=\"lineno\">  665</span>&#160;        clearOp.setClearColor( val1 )</div>\n\
<div class=\"line\"><a name=\"l00666\"></a><span class=\"lineno\">  666</span>&#160;        clearOp.setClearColor2( val2 )</div>\n\
<div class=\"line\"><a name=\"l00667\"></a><span class=\"lineno\">  667</span>&#160;        clearOp.setClearGradient( <span class=\"keyword\">True</span> )</div>\n\
<div class=\"line\"><a name=\"l00668\"></a><span class=\"lineno\">  668</span>&#160;        <span class=\"keywordflow\">return</span> clearOp</div>\n\
<div class=\"line\"><a name=\"l00669\"></a><span class=\"lineno\">  669</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00670\"></a><span class=\"lineno\">  670</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00671\"></a><span class=\"lineno\">  671</span>&#160;<span class=\"comment\">###################################################################</span></div>\n\
<div class=\"line\"><a name=\"l00672\"></a><span class=\"lineno\">  672</span>&#160;<span class=\"comment\">#   Custom scene operation</span></div>\n\
<div class=\"line\"><a name=\"l00673\"></a><span class=\"lineno\">  673</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00674\"></a><span class=\"lineno\">  674</span>&#160;<span class=\"comment\">#   A scene render which is reused as necessary with different</span></div>\n\
<div class=\"line\"><a name=\"l00675\"></a><span class=\"lineno\">  675</span>&#160;<span class=\"comment\">#   override parameters</span></div>\n\
<div class=\"line\"><a name=\"l00676\"></a><span class=\"lineno\">  676</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00677\"></a><span class=\"lineno\">  677</span>&#160;<span class=\"keyword\">class </span>viewRenderSceneRender(omr.MSceneRender):</div>\n\
<div class=\"line\"><a name=\"l00678\"></a><span class=\"lineno\">  678</span>&#160;    <span class=\"keyword\">def </span>__init__(self, name, sceneFilter, clearMask):</div>\n\
<div class=\"line\"><a name=\"l00679\"></a><span class=\"lineno\">  679</span>&#160;        omr.MSceneRender.__init__(self, name)</div>\n\
<div class=\"line\"><a name=\"l00680\"></a><span class=\"lineno\">  680</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00681\"></a><span class=\"lineno\">  681</span>&#160;        self.mSelectionList = om.MSelectionList()</div>\n\
<div class=\"line\"><a name=\"l00682\"></a><span class=\"lineno\">  682</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00683\"></a><span class=\"lineno\">  683</span>&#160;        <span class=\"comment\"># 3D viewport panel name, if available</span></div>\n\
<div class=\"line\"><a name=\"l00684\"></a><span class=\"lineno\">  684</span>&#160;        self.mPanelName = <span class=\"stringliteral\">&quot;&quot;</span></div>\n\
<div class=\"line\"><a name=\"l00685\"></a><span class=\"lineno\">  685</span>&#160;        <span class=\"comment\"># Camera override</span></div>\n\
<div class=\"line\"><a name=\"l00686\"></a><span class=\"lineno\">  686</span>&#160;        self.mCameraOverride = omr.MCameraOverride()</div>\n\
<div class=\"line\"><a name=\"l00687\"></a><span class=\"lineno\">  687</span>&#160;        <span class=\"comment\"># Viewport rectangle override</span></div>\n\
<div class=\"line\"><a name=\"l00688\"></a><span class=\"lineno\">  688</span>&#160;        self.mViewRectangle = om.MFloatPoint(0.0, 0.0, 1.0, 1.0) <span class=\"comment\"># 100 % of target size</span></div>\n\
<div class=\"line\"><a name=\"l00689\"></a><span class=\"lineno\">  689</span>&#160;        <span class=\"comment\"># Available render targets</span></div>\n\
<div class=\"line\"><a name=\"l00690\"></a><span class=\"lineno\">  690</span>&#160;        self.mTargets = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00691\"></a><span class=\"lineno\">  691</span>&#160;        <span class=\"comment\"># Shader override for surfaces</span></div>\n\
<div class=\"line\"><a name=\"l00692\"></a><span class=\"lineno\">  692</span>&#160;        self.mShaderOverride = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00693\"></a><span class=\"lineno\">  693</span>&#160;        <span class=\"comment\"># Scene draw filter override</span></div>\n\
<div class=\"line\"><a name=\"l00694\"></a><span class=\"lineno\">  694</span>&#160;        self.mSceneFilter = sceneFilter</div>\n\
<div class=\"line\"><a name=\"l00695\"></a><span class=\"lineno\">  695</span>&#160;        <span class=\"comment\"># Mask for clear override</span></div>\n\
<div class=\"line\"><a name=\"l00696\"></a><span class=\"lineno\">  696</span>&#160;        self.mClearMask = clearMask</div>\n\
<div class=\"line\"><a name=\"l00697\"></a><span class=\"lineno\">  697</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00698\"></a><span class=\"lineno\">  698</span>&#160;        <span class=\"comment\"># Some sample override flags</span></div>\n\
<div class=\"line\"><a name=\"l00699\"></a><span class=\"lineno\">  699</span>&#160;        self.mUseShaderOverride = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00700\"></a><span class=\"lineno\">  700</span>&#160;        self.mUseStockShaderOverride = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00701\"></a><span class=\"lineno\">  701</span>&#160;        self.mAttachPrePostShaderCallback = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00702\"></a><span class=\"lineno\">  702</span>&#160;        self.mUseShadowShader = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00703\"></a><span class=\"lineno\">  703</span>&#160;        self.mOverrideDisplayMode = <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l00704\"></a><span class=\"lineno\">  704</span>&#160;        self.mOverrideLightingMode = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00705\"></a><span class=\"lineno\">  705</span>&#160;        self.mOverrideCullingMode = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00706\"></a><span class=\"lineno\">  706</span>&#160;        self.mDebugTargetResourceHandle = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00707\"></a><span class=\"lineno\">  707</span>&#160;        self.mOverrrideM3dViewDisplayMode = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00708\"></a><span class=\"lineno\">  708</span>&#160;        self.mPrevDisplayStyle = omui.M3dView.kGouraudShaded <span class=\"comment\"># Track previous display style of override set</span></div>\n\
<div class=\"line\"><a name=\"l00709\"></a><span class=\"lineno\">  709</span>&#160;        self.mFilterDrawNothing = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00710\"></a><span class=\"lineno\">  710</span>&#160;        self.mFilterDrawSelected = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00711\"></a><span class=\"lineno\">  711</span>&#160;        self.mEnableSRGBWrite = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l00712\"></a><span class=\"lineno\">  712</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00713\"></a><span class=\"lineno\">  713</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00714\"></a><span class=\"lineno\">  714</span>&#160;    <span class=\"keyword\">def </span>__del__(self):</div>\n\
<div class=\"line\"><a name=\"l00715\"></a><span class=\"lineno\">  715</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mShaderOverride <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00716\"></a><span class=\"lineno\">  716</span>&#160;            shaderMgr = omr.MRenderer.getShaderManager()</div>\n\
<div class=\"line\"><a name=\"l00717\"></a><span class=\"lineno\">  717</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> shaderMgr <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00718\"></a><span class=\"lineno\">  718</span>&#160;                shaderMgr.releaseShader(self.mShaderOverride)</div>\n\
<div class=\"line\"><a name=\"l00719\"></a><span class=\"lineno\">  719</span>&#160;            self.mShaderOverride = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00720\"></a><span class=\"lineno\">  720</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00721\"></a><span class=\"lineno\">  721</span>&#160;    <span class=\"keyword\">def </span>setRenderTargets(self, targets):</div>\n\
<div class=\"line\"><a name=\"l00722\"></a><span class=\"lineno\">  722</span>&#160;        self.mTargets = targets</div>\n\
<div class=\"line\"><a name=\"l00723\"></a><span class=\"lineno\">  723</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00724\"></a><span class=\"lineno\">  724</span>&#160;    <span class=\"keyword\">def </span>targetOverrideList(self):</div>\n\
<div class=\"line\"><a name=\"l00725\"></a><span class=\"lineno\">  725</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00726\"></a><span class=\"lineno\">  726</span>&#160;            <span class=\"keywordflow\">return</span> [ self.mTargets[kMyColorTarget], self.mTargets[kMyDepthTarget] ]</div>\n\
<div class=\"line\"><a name=\"l00727\"></a><span class=\"lineno\">  727</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00728\"></a><span class=\"lineno\">  728</span>&#160;    </div>\n\
<div class=\"line\"><a name=\"l00729\"></a><span class=\"lineno\">  729</span>&#160;    <span class=\"comment\"># Indicate whether to enable SRGB write</span></div>\n\
<div class=\"line\"><a name=\"l00730\"></a><span class=\"lineno\">  730</span>&#160;    <span class=\"keyword\">def </span>enableSRGBWrite(self):</div>\n\
<div class=\"line\"><a name=\"l00731\"></a><span class=\"lineno\">  731</span>&#160;        <span class=\"keywordflow\">return</span> self.mEnableSRGBWrite</div>\n\
<div class=\"line\"><a name=\"l00732\"></a><span class=\"lineno\">  732</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00733\"></a><span class=\"lineno\">  733</span>&#160;    <span class=\"comment\"># Sample of accessing the view to get a camera path and using that as</span></div>\n\
<div class=\"line\"><a name=\"l00734\"></a><span class=\"lineno\">  734</span>&#160;    <span class=\"comment\"># the camera override. Other camera paths or direct matrix setting</span></div>\n\
<div class=\"line\"><a name=\"l00735\"></a><span class=\"lineno\">  735</span>&#160;    <span class=\"keyword\">def </span>cameraOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00736\"></a><span class=\"lineno\">  736</span>&#160;        <span class=\"keywordflow\">if</span> len(self.mPanelName) &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00737\"></a><span class=\"lineno\">  737</span>&#160;            view = omui.M3dView.getM3dViewFromModelPanel(self.mPanelName)</div>\n\
<div class=\"line\"><a name=\"l00738\"></a><span class=\"lineno\">  738</span>&#160;            self.mCameraOverride.mCameraPath = view.getCamera()</div>\n\
<div class=\"line\"><a name=\"l00739\"></a><span class=\"lineno\">  739</span>&#160;            <span class=\"keywordflow\">return</span> self.mCameraOverride</div>\n\
<div class=\"line\"><a name=\"l00740\"></a><span class=\"lineno\">  740</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00741\"></a><span class=\"lineno\">  741</span>&#160;        print(<span class=\"stringliteral\">&quot;\\t&quot;</span> + self.mName + <span class=\"stringliteral\">&quot;: Query custom scene camera override -- no override set&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00742\"></a><span class=\"lineno\">  742</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00743\"></a><span class=\"lineno\">  743</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00744\"></a><span class=\"lineno\">  744</span>&#160;    <span class=\"comment\"># Depending on what is required either the scene filter will return whether</span></div>\n\
<div class=\"line\"><a name=\"l00745\"></a><span class=\"lineno\">  745</span>&#160;    <span class=\"comment\"># to draw the opaque, transparent of non-shaded (UI) items.</span></div>\n\
<div class=\"line\"><a name=\"l00746\"></a><span class=\"lineno\">  746</span>&#160;    <span class=\"keyword\">def </span>renderFilterOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00747\"></a><span class=\"lineno\">  747</span>&#160;        <span class=\"keywordflow\">return</span> self.mSceneFilter</div>\n\
<div class=\"line\"><a name=\"l00748\"></a><span class=\"lineno\">  748</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00749\"></a><span class=\"lineno\">  749</span>&#160;    <span class=\"comment\"># Example display mode override. In this example we override so that</span></div>\n\
<div class=\"line\"><a name=\"l00750\"></a><span class=\"lineno\">  750</span>&#160;    <span class=\"comment\"># the scene will always be drawn in shaded mode and in bounding box</span></div>\n\
<div class=\"line\"><a name=\"l00751\"></a><span class=\"lineno\">  751</span>&#160;    <span class=\"comment\"># mode (bounding boxes will also be drawn). This is fact not a</span></div>\n\
<div class=\"line\"><a name=\"l00752\"></a><span class=\"lineno\">  752</span>&#160;    <span class=\"comment\"># &#39;regular&#39; viewport display mode available from the viewport menus.</span></div>\n\
<div class=\"line\"><a name=\"l00753\"></a><span class=\"lineno\">  753</span>&#160;    <span class=\"keyword\">def </span>displayModeOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00754\"></a><span class=\"lineno\">  754</span>&#160;        <span class=\"keywordflow\">if</span> self.mOverrideDisplayMode:</div>\n\
<div class=\"line\"><a name=\"l00755\"></a><span class=\"lineno\">  755</span>&#160;            <span class=\"keywordflow\">return</span> ( omr.MSceneRender.kBoundingBox | omr.MSceneRender.kShaded )</div>\n\
<div class=\"line\"><a name=\"l00756\"></a><span class=\"lineno\">  756</span>&#160;        <span class=\"keywordflow\">return</span> omr.MSceneRender.kNoDisplayModeOverride</div>\n\
<div class=\"line\"><a name=\"l00757\"></a><span class=\"lineno\">  757</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00758\"></a><span class=\"lineno\">  758</span>&#160;    <span class=\"comment\"># Example Lighting mode override. In this example</span></div>\n\
<div class=\"line\"><a name=\"l00759\"></a><span class=\"lineno\">  759</span>&#160;    <span class=\"comment\"># the override would set to draw with only selected lights.</span></div>\n\
<div class=\"line\"><a name=\"l00760\"></a><span class=\"lineno\">  760</span>&#160;    <span class=\"keyword\">def </span>lightModeOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00761\"></a><span class=\"lineno\">  761</span>&#160;        <span class=\"keywordflow\">if</span> self.mOverrideLightingMode:</div>\n\
<div class=\"line\"><a name=\"l00762\"></a><span class=\"lineno\">  762</span>&#160;            <span class=\"keywordflow\">return</span> omr.MSceneRender.kSelectedLights</div>\n\
<div class=\"line\"><a name=\"l00763\"></a><span class=\"lineno\">  763</span>&#160;        <span class=\"keywordflow\">return</span> omr.MSceneRender.kNoLightingModeOverride</div>\n\
<div class=\"line\"><a name=\"l00764\"></a><span class=\"lineno\">  764</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00765\"></a><span class=\"lineno\">  765</span>&#160;    <span class=\"comment\"># Return shadow override. For the UI pass we don&#39;t want to compute shadows.</span></div>\n\
<div class=\"line\"><a name=\"l00766\"></a><span class=\"lineno\">  766</span>&#160;    <span class=\"keyword\">def </span>shadowEnableOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00767\"></a><span class=\"lineno\">  767</span>&#160;        <span class=\"keywordflow\">if</span> (self.mSceneFilter &amp; omr.MSceneRender.kRenderShadedItems) == 0:</div>\n\
<div class=\"line\"><a name=\"l00768\"></a><span class=\"lineno\">  768</span>&#160;            <span class=\"keywordflow\">return</span> <span class=\"keyword\">False</span>  <span class=\"comment\"># UI doesn&#39;t need shadows</span></div>\n\
<div class=\"line\"><a name=\"l00769\"></a><span class=\"lineno\">  769</span>&#160;        <span class=\"comment\"># For all other cases, just use whatever is currently set</span></div>\n\
<div class=\"line\"><a name=\"l00770\"></a><span class=\"lineno\">  770</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00771\"></a><span class=\"lineno\">  771</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00772\"></a><span class=\"lineno\">  772</span>&#160;    <span class=\"comment\"># Example culling mode override. When enable</span></div>\n\
<div class=\"line\"><a name=\"l00773\"></a><span class=\"lineno\">  773</span>&#160;    <span class=\"comment\"># this example would force to cull backfacing</span></div>\n\
<div class=\"line\"><a name=\"l00774\"></a><span class=\"lineno\">  774</span>&#160;    <span class=\"comment\"># polygons.</span></div>\n\
<div class=\"line\"><a name=\"l00775\"></a><span class=\"lineno\">  775</span>&#160;    <span class=\"keyword\">def </span>cullingOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00776\"></a><span class=\"lineno\">  776</span>&#160;        <span class=\"keywordflow\">if</span> self.mOverrideCullingMode:</div>\n\
<div class=\"line\"><a name=\"l00777\"></a><span class=\"lineno\">  777</span>&#160;            <span class=\"keywordflow\">return</span> omr.MSceneRender.kCullBackFaces</div>\n\
<div class=\"line\"><a name=\"l00778\"></a><span class=\"lineno\">  778</span>&#160;        <span class=\"keywordflow\">return</span> omr.MSceneRender.kNoCullingOverride</div>\n\
<div class=\"line\"><a name=\"l00779\"></a><span class=\"lineno\">  779</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00780\"></a><span class=\"lineno\">  780</span>&#160;    <span class=\"comment\"># Per scene operation pre-render.</span></div>\n\
<div class=\"line\"><a name=\"l00781\"></a><span class=\"lineno\">  781</span>&#160;    <span class=\"comment\"># In this example the display style for the given panel / view</span></div>\n\
<div class=\"line\"><a name=\"l00782\"></a><span class=\"lineno\">  782</span>&#160;    <span class=\"comment\"># M3dView is set to be consistent with the draw override</span></div>\n\
<div class=\"line\"><a name=\"l00783\"></a><span class=\"lineno\">  783</span>&#160;    <span class=\"comment\"># for the scene operation.</span></div>\n\
<div class=\"line\"><a name=\"l00784\"></a><span class=\"lineno\">  784</span>&#160;    <span class=\"keyword\">def </span>preRender(self):</div>\n\
<div class=\"line\"><a name=\"l00785\"></a><span class=\"lineno\">  785</span>&#160;        <span class=\"keywordflow\">if</span> self.mOverrrideM3dViewDisplayMode:</div>\n\
<div class=\"line\"><a name=\"l00786\"></a><span class=\"lineno\">  786</span>&#160;            <span class=\"keywordflow\">if</span> len(self.mPanelName) &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00787\"></a><span class=\"lineno\">  787</span>&#160;                view = omui.M3dView.getM3dViewFromModelPanel(self.mPanelName)</div>\n\
<div class=\"line\"><a name=\"l00788\"></a><span class=\"lineno\">  788</span>&#160;                self.mPrevDisplayStyle = view.displayStyle();</div>\n\
<div class=\"line\"><a name=\"l00789\"></a><span class=\"lineno\">  789</span>&#160;                view.setDisplayStyle( omui.M3dView.kGouraudShaded )</div>\n\
<div class=\"line\"><a name=\"l00790\"></a><span class=\"lineno\">  790</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00791\"></a><span class=\"lineno\">  791</span>&#160;    <span class=\"comment\"># Post-render example.</span></div>\n\
<div class=\"line\"><a name=\"l00792\"></a><span class=\"lineno\">  792</span>&#160;    <span class=\"comment\"># In this example we can debug the resource handle of the active render target</span></div>\n\
<div class=\"line\"><a name=\"l00793\"></a><span class=\"lineno\">  793</span>&#160;    <span class=\"comment\"># after this operation. The matching for for the pre-render M3dView override</span></div>\n\
<div class=\"line\"><a name=\"l00794\"></a><span class=\"lineno\">  794</span>&#160;    <span class=\"comment\"># also resides here to restore the M3dView state.</span></div>\n\
<div class=\"line\"><a name=\"l00795\"></a><span class=\"lineno\">  795</span>&#160;    <span class=\"keyword\">def </span>postRender(self):</div>\n\
<div class=\"line\"><a name=\"l00796\"></a><span class=\"lineno\">  796</span>&#160;        <span class=\"keywordflow\">if</span> self.mDebugTargetResourceHandle:</div>\n\
<div class=\"line\"><a name=\"l00797\"></a><span class=\"lineno\">  797</span>&#160;            <span class=\"comment\"># Get the id&#39;s for the textures which are used as the color and</span></div>\n\
<div class=\"line\"><a name=\"l00798\"></a><span class=\"lineno\">  798</span>&#160;            <span class=\"comment\"># depth render targets. These id&#39;s could arbitrarily change</span></div>\n\
<div class=\"line\"><a name=\"l00799\"></a><span class=\"lineno\">  799</span>&#160;            <span class=\"comment\"># so they should not be held on to.</span></div>\n\
<div class=\"line\"><a name=\"l00800\"></a><span class=\"lineno\">  800</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets[kMyColorTarget] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00801\"></a><span class=\"lineno\">  801</span>&#160;                colorResourceHandle = self.mTargets[kMyColorTarget].resourceHandle()</div>\n\
<div class=\"line\"><a name=\"l00802\"></a><span class=\"lineno\">  802</span>&#160;                print(<span class=\"stringliteral\">&quot;\\t - Color target resource handle = &quot;</span> + str(colorResourceHandle))</div>\n\
<div class=\"line\"><a name=\"l00803\"></a><span class=\"lineno\">  803</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00804\"></a><span class=\"lineno\">  804</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets[kMyDepthTarget] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00805\"></a><span class=\"lineno\">  805</span>&#160;                depthStencilResourceHandle = self.mTargets[kMyDepthTarget].resourceHandle()</div>\n\
<div class=\"line\"><a name=\"l00806\"></a><span class=\"lineno\">  806</span>&#160;                print(<span class=\"stringliteral\">&quot;\\t - Depth target resource handle = &quot;</span> + str(depthStencilResourceHandle))</div>\n\
<div class=\"line\"><a name=\"l00807\"></a><span class=\"lineno\">  807</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00808\"></a><span class=\"lineno\">  808</span>&#160;        <span class=\"keywordflow\">if</span> self.mOverrrideM3dViewDisplayMode:</div>\n\
<div class=\"line\"><a name=\"l00809\"></a><span class=\"lineno\">  809</span>&#160;            <span class=\"keywordflow\">if</span> len(self.mPanelName) &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00810\"></a><span class=\"lineno\">  810</span>&#160;                view = omui.M3dView.getM3dViewFromModelPanel(self.mPanelName)</div>\n\
<div class=\"line\"><a name=\"l00811\"></a><span class=\"lineno\">  811</span>&#160;                view.setDisplayStyle( self.mPrevDisplayStyle )</div>\n\
<div class=\"line\"><a name=\"l00812\"></a><span class=\"lineno\">  812</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00813\"></a><span class=\"lineno\">  813</span>&#160;    <span class=\"comment\"># Object type exclusions example.</span></div>\n\
<div class=\"line\"><a name=\"l00814\"></a><span class=\"lineno\">  814</span>&#160;    <span class=\"comment\"># In this example we want to hide cameras</span></div>\n\
<div class=\"line\"><a name=\"l00815\"></a><span class=\"lineno\">  815</span>&#160;    <span class=\"keyword\">def </span>getObjectTypeExclusions(self):</div>\n\
<div class=\"line\"><a name=\"l00816\"></a><span class=\"lineno\">  816</span>&#160;        <span class=\"comment\"># Example of hiding by type.</span></div>\n\
<div class=\"line\"><a name=\"l00817\"></a><span class=\"lineno\">  817</span>&#160;        <span class=\"keywordflow\">return</span> omr.MFrameContext.kExcludeCameras</div>\n\
<div class=\"line\"><a name=\"l00818\"></a><span class=\"lineno\">  818</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00819\"></a><span class=\"lineno\">  819</span>&#160;    <span class=\"comment\"># Example scene override logic.</span></div>\n\
<div class=\"line\"><a name=\"l00820\"></a><span class=\"lineno\">  820</span>&#160;    <span class=\"comment\"># In this example, the scene to draw can be filtered by a returned</span></div>\n\
<div class=\"line\"><a name=\"l00821\"></a><span class=\"lineno\">  821</span>&#160;    <span class=\"comment\"># selection list. If an empty selection list is returned then we can</span></div>\n\
<div class=\"line\"><a name=\"l00822\"></a><span class=\"lineno\">  822</span>&#160;    <span class=\"comment\"># essentially disable scene drawing. The other option coded here</span></div>\n\
<div class=\"line\"><a name=\"l00823\"></a><span class=\"lineno\">  823</span>&#160;    <span class=\"comment\"># is to look at the current active selection list and return that.</span></div>\n\
<div class=\"line\"><a name=\"l00824\"></a><span class=\"lineno\">  824</span>&#160;    <span class=\"comment\"># This results in only rendering what has been selected by the user</span></div>\n\
<div class=\"line\"><a name=\"l00825\"></a><span class=\"lineno\">  825</span>&#160;    <span class=\"comment\"># If this filtering is required across more than one operation it</span></div>\n\
<div class=\"line\"><a name=\"l00826\"></a><span class=\"lineno\">  826</span>&#160;    <span class=\"comment\"># is better to precompute these values in the setup phase of</span></div>\n\
<div class=\"line\"><a name=\"l00827\"></a><span class=\"lineno\">  827</span>&#160;    <span class=\"comment\"># override and cache the information per operation as required.</span></div>\n\
<div class=\"line\"><a name=\"l00828\"></a><span class=\"lineno\">  828</span>&#160;    <span class=\"keyword\">def </span>objectSetOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00829\"></a><span class=\"lineno\">  829</span>&#160;        self.mSelectionList.clear()</div>\n\
<div class=\"line\"><a name=\"l00830\"></a><span class=\"lineno\">  830</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00831\"></a><span class=\"lineno\">  831</span>&#160;        <span class=\"comment\"># If you set this to True you can make the</span></div>\n\
<div class=\"line\"><a name=\"l00832\"></a><span class=\"lineno\">  832</span>&#160;        <span class=\"comment\"># scene draw draw no part of the scene, only the</span></div>\n\
<div class=\"line\"><a name=\"l00833\"></a><span class=\"lineno\">  833</span>&#160;        <span class=\"comment\"># additional UI elements</span></div>\n\
<div class=\"line\"><a name=\"l00834\"></a><span class=\"lineno\">  834</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00835\"></a><span class=\"lineno\">  835</span>&#160;        <span class=\"keywordflow\">if</span> self.mFilterDrawNothing:</div>\n\
<div class=\"line\"><a name=\"l00836\"></a><span class=\"lineno\">  836</span>&#160;            <span class=\"keywordflow\">return</span> self.mSelectionList</div>\n\
<div class=\"line\"><a name=\"l00837\"></a><span class=\"lineno\">  837</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00838\"></a><span class=\"lineno\">  838</span>&#160;        <span class=\"comment\"># Turn this on to query the active list and only</span></div>\n\
<div class=\"line\"><a name=\"l00839\"></a><span class=\"lineno\">  839</span>&#160;        <span class=\"comment\"># use that for drawing</span></div>\n\
<div class=\"line\"><a name=\"l00840\"></a><span class=\"lineno\">  840</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00841\"></a><span class=\"lineno\">  841</span>&#160;        <span class=\"keywordflow\">if</span> self.mFilterDrawSelected:</div>\n\
<div class=\"line\"><a name=\"l00842\"></a><span class=\"lineno\">  842</span>&#160;            selList = om.MGlobal.getActiveSelectionList()</div>\n\
<div class=\"line\"><a name=\"l00843\"></a><span class=\"lineno\">  843</span>&#160;            <span class=\"keywordflow\">if</span> selList.length() &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00844\"></a><span class=\"lineno\">  844</span>&#160;                iter = om.MItSelectionList(selList)</div>\n\
<div class=\"line\"><a name=\"l00845\"></a><span class=\"lineno\">  845</span>&#160;                <span class=\"keywordflow\">while</span> <span class=\"keywordflow\">not</span> iter.isDone():</div>\n\
<div class=\"line\"><a name=\"l00846\"></a><span class=\"lineno\">  846</span>&#160;                    comp = iter.getComponent()</div>\n\
<div class=\"line\"><a name=\"l00847\"></a><span class=\"lineno\">  847</span>&#160;                    self.mSelectionList.add( comp[0], comp[1] )</div>\n\
<div class=\"line\"><a name=\"l00848\"></a><span class=\"lineno\">  848</span>&#160;                    next(iter)</div>\n\
<div class=\"line\"><a name=\"l00849\"></a><span class=\"lineno\">  849</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00850\"></a><span class=\"lineno\">  850</span>&#160;            <span class=\"keywordflow\">if</span> self.mSelectionList.length() &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l00851\"></a><span class=\"lineno\">  851</span>&#160;                print(<span class=\"stringliteral\">&quot;\\t&quot;</span> + self.name() + <span class=\"stringliteral\">&quot; : Filtering render with active object list&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00852\"></a><span class=\"lineno\">  852</span>&#160;                <span class=\"keywordflow\">return</span> self.mSelectionList</div>\n\
<div class=\"line\"><a name=\"l00853\"></a><span class=\"lineno\">  853</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00854\"></a><span class=\"lineno\">  854</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00855\"></a><span class=\"lineno\">  855</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00856\"></a><span class=\"lineno\">  856</span>&#160;    <span class=\"comment\"># Custom clear override.</span></div>\n\
<div class=\"line\"><a name=\"l00857\"></a><span class=\"lineno\">  857</span>&#160;    <span class=\"comment\"># Depending on whether we are drawing the &quot;UI&quot; or &quot;non-UI&quot;</span></div>\n\
<div class=\"line\"><a name=\"l00858\"></a><span class=\"lineno\">  858</span>&#160;    <span class=\"comment\"># parts of the scene we will clear different channels.</span></div>\n\
<div class=\"line\"><a name=\"l00859\"></a><span class=\"lineno\">  859</span>&#160;    <span class=\"comment\"># Color is never cleared since there is a separate operation</span></div>\n\
<div class=\"line\"><a name=\"l00860\"></a><span class=\"lineno\">  860</span>&#160;    <span class=\"comment\"># to clear the background.</span></div>\n\
<div class=\"line\"><a name=\"l00861\"></a><span class=\"lineno\">  861</span>&#160;    <span class=\"keyword\">def </span>clearOperation(self):</div>\n\
<div class=\"line\"><a name=\"l00862\"></a><span class=\"lineno\">  862</span>&#160;        clearOp = self.mClearOperation</div>\n\
<div class=\"line\"><a name=\"l00863\"></a><span class=\"lineno\">  863</span>&#160;        <span class=\"keywordflow\">if</span> (self.mSceneFilter &amp; (omr.MSceneRender.kRenderOpaqueShadedItems | omr.MSceneRender.kRenderTransparentShadedItems | omr.MSceneRender.kRenderUIItems)) != 0:</div>\n\
<div class=\"line\"><a name=\"l00864\"></a><span class=\"lineno\">  864</span>&#160;            clearOp.setClearGradient(<span class=\"keyword\">False</span>)</div>\n\
<div class=\"line\"><a name=\"l00865\"></a><span class=\"lineno\">  865</span>&#160;        <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l00866\"></a><span class=\"lineno\">  866</span>&#160;            <span class=\"comment\"># Force a gradient clear with some sample colors.</span></div>\n\
<div class=\"line\"><a name=\"l00867\"></a><span class=\"lineno\">  867</span>&#160;            <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00868\"></a><span class=\"lineno\">  868</span>&#160;            val1 = [ 0.0, 0.2, 0.8, 1.0 ]</div>\n\
<div class=\"line\"><a name=\"l00869\"></a><span class=\"lineno\">  869</span>&#160;            val2 = [ 0.5, 0.4, 0.1, 1.0 ]</div>\n\
<div class=\"line\"><a name=\"l00870\"></a><span class=\"lineno\">  870</span>&#160;            clearOp.setClearColor(val1)</div>\n\
<div class=\"line\"><a name=\"l00871\"></a><span class=\"lineno\">  871</span>&#160;            clearOp.setClearColor2(val2)</div>\n\
<div class=\"line\"><a name=\"l00872\"></a><span class=\"lineno\">  872</span>&#160;            clearOp.setClearGradient(<span class=\"keyword\">True</span>)</div>\n\
<div class=\"line\"><a name=\"l00873\"></a><span class=\"lineno\">  873</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00874\"></a><span class=\"lineno\">  874</span>&#160;        clearOp.setMask(self.mClearMask)</div>\n\
<div class=\"line\"><a name=\"l00875\"></a><span class=\"lineno\">  875</span>&#160;        <span class=\"keywordflow\">return</span> clearOp</div>\n\
<div class=\"line\"><a name=\"l00876\"></a><span class=\"lineno\">  876</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00877\"></a><span class=\"lineno\">  877</span>&#160;    <span class=\"comment\"># Example of setting a shader override.</span></div>\n\
<div class=\"line\"><a name=\"l00878\"></a><span class=\"lineno\">  878</span>&#160;    <span class=\"comment\"># Some variations are presented based on some member flags:</span></div>\n\
<div class=\"line\"><a name=\"l00879\"></a><span class=\"lineno\">  879</span>&#160;    <span class=\"comment\"># - Use a stock shader or not</span></div>\n\
<div class=\"line\"><a name=\"l00880\"></a><span class=\"lineno\">  880</span>&#160;    <span class=\"comment\"># - Attach pre and post shader instance callbacks</span></div>\n\
<div class=\"line\"><a name=\"l00881\"></a><span class=\"lineno\">  881</span>&#160;    <span class=\"comment\"># - Use a shadow shader</span></div>\n\
<div class=\"line\"><a name=\"l00882\"></a><span class=\"lineno\">  882</span>&#160;    <span class=\"keyword\">def </span>shaderOverride(self):</div>\n\
<div class=\"line\"><a name=\"l00883\"></a><span class=\"lineno\">  883</span>&#160;        <span class=\"keywordflow\">if</span> self.mUseShaderOverride:</div>\n\
<div class=\"line\"><a name=\"l00884\"></a><span class=\"lineno\">  884</span>&#160;            <span class=\"keywordflow\">if</span> self.mShaderOverride <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00885\"></a><span class=\"lineno\">  885</span>&#160;                shaderManager = omr.MRenderer.getShaderManager()</div>\n\
<div class=\"line\"><a name=\"l00886\"></a><span class=\"lineno\">  886</span>&#160;                <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> shaderManager <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00887\"></a><span class=\"lineno\">  887</span>&#160;                    preCallBack = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00888\"></a><span class=\"lineno\">  888</span>&#160;                    postCallBack = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00889\"></a><span class=\"lineno\">  889</span>&#160;                    <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mUseStockShaderOverride:</div>\n\
<div class=\"line\"><a name=\"l00890\"></a><span class=\"lineno\">  890</span>&#160;                        <span class=\"keywordflow\">if</span> self.mUseShadowShader:</div>\n\
<div class=\"line\"><a name=\"l00891\"></a><span class=\"lineno\">  891</span>&#160;                            <span class=\"comment\"># This shader has parameters which can be updated</span></div>\n\
<div class=\"line\"><a name=\"l00892\"></a><span class=\"lineno\">  892</span>&#160;                            <span class=\"comment\"># by the attached pre-callback.</span></div>\n\
<div class=\"line\"><a name=\"l00893\"></a><span class=\"lineno\">  893</span>&#160;                            preCallBack = shaderOverrideCallbackBindLightingInfo</div>\n\
<div class=\"line\"><a name=\"l00894\"></a><span class=\"lineno\">  894</span>&#160;                            self.mShaderOverride = shaderManager.getEffectsFileShader(<span class=\"stringliteral\">&quot;MayaBlinnDirectionalLightShadow&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>, <span class=\"keywordtype\">None</span>, <span class=\"keyword\">True</span>, preCallBack, postCallBack)</div>\n\
<div class=\"line\"><a name=\"l00895\"></a><span class=\"lineno\">  895</span>&#160;                        <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l00896\"></a><span class=\"lineno\">  896</span>&#160;                            <span class=\"comment\"># Use a sample Gooch shader</span></div>\n\
<div class=\"line\"><a name=\"l00897\"></a><span class=\"lineno\">  897</span>&#160;                            <span class=\"keywordflow\">if</span> self.mAttachPrePostShaderCallback:</div>\n\
<div class=\"line\"><a name=\"l00898\"></a><span class=\"lineno\">  898</span>&#160;                                preCallBack = shaderOverridePreDrawCallback</div>\n\
<div class=\"line\"><a name=\"l00899\"></a><span class=\"lineno\">  899</span>&#160;                            <span class=\"keywordflow\">if</span> self.mAttachPrePostShaderCallback:</div>\n\
<div class=\"line\"><a name=\"l00900\"></a><span class=\"lineno\">  900</span>&#160;                                postCallBack = shaderOverridePostDrawCallback</div>\n\
<div class=\"line\"><a name=\"l00901\"></a><span class=\"lineno\">  901</span>&#160;                            self.mShaderOverride = shaderManager.getEffectsFileShader(<span class=\"stringliteral\">&quot;Gooch&quot;</span>, <span class=\"stringliteral\">&quot;&quot;</span>, <span class=\"keywordtype\">None</span>, <span class=\"keyword\">True</span>, preCallBack, postCallBack)</div>\n\
<div class=\"line\"><a name=\"l00902\"></a><span class=\"lineno\">  902</span>&#160;                    <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l00903\"></a><span class=\"lineno\">  903</span>&#160;                        <span class=\"comment\"># Use a stock shader available from the shader manager</span></div>\n\
<div class=\"line\"><a name=\"l00904\"></a><span class=\"lineno\">  904</span>&#160;                        <span class=\"comment\"># In this case the stock Blinn shader.</span></div>\n\
<div class=\"line\"><a name=\"l00905\"></a><span class=\"lineno\">  905</span>&#160;                        <span class=\"keywordflow\">if</span> self.mAttachPrePostShaderCallback:</div>\n\
<div class=\"line\"><a name=\"l00906\"></a><span class=\"lineno\">  906</span>&#160;                            preCallBack = shaderOverridePreDrawCallback</div>\n\
<div class=\"line\"><a name=\"l00907\"></a><span class=\"lineno\">  907</span>&#160;                        <span class=\"keywordflow\">if</span> self.mAttachPrePostShaderCallback:</div>\n\
<div class=\"line\"><a name=\"l00908\"></a><span class=\"lineno\">  908</span>&#160;                            postCallBack = shaderOverridePostDrawCallback</div>\n\
<div class=\"line\"><a name=\"l00909\"></a><span class=\"lineno\">  909</span>&#160;                        self.mShaderOverride = shaderManager.getStockShader( omr.MShaderManager.k3dBlinnShader, preCallBack, postCallBack)</div>\n\
<div class=\"line\"><a name=\"l00910\"></a><span class=\"lineno\">  910</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00911\"></a><span class=\"lineno\">  911</span>&#160;                        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mShaderOverride <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00912\"></a><span class=\"lineno\">  912</span>&#160;                            print(<span class=\"stringliteral\">&quot;\\t&quot;</span> + self.name() + <span class=\"stringliteral\">&quot; : Set stock shader override &quot;</span> + str(omr.MShaderManager.k3dBlinnShader))</div>\n\
<div class=\"line\"><a name=\"l00913\"></a><span class=\"lineno\">  913</span>&#160;                            diffColor = [0.0, 0.4, 1.0, 1.0]</div>\n\
<div class=\"line\"><a name=\"l00914\"></a><span class=\"lineno\">  914</span>&#160;                            <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l00915\"></a><span class=\"lineno\">  915</span>&#160;                                self.mShaderOverride.setParameter(<span class=\"stringliteral\">&quot;diffuseColor&quot;</span>, diffColor)</div>\n\
<div class=\"line\"><a name=\"l00916\"></a><span class=\"lineno\">  916</span>&#160;                            <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l00917\"></a><span class=\"lineno\">  917</span>&#160;                                print(<span class=\"stringliteral\">&quot;Could not set diffuseColor on shader&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l00918\"></a><span class=\"lineno\">  918</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00919\"></a><span class=\"lineno\">  919</span>&#160;            <span class=\"keywordflow\">return</span> self.mShaderOverride</div>\n\
<div class=\"line\"><a name=\"l00920\"></a><span class=\"lineno\">  920</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00921\"></a><span class=\"lineno\">  921</span>&#160;        <span class=\"comment\"># No override so return None</span></div>\n\
<div class=\"line\"><a name=\"l00922\"></a><span class=\"lineno\">  922</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00923\"></a><span class=\"lineno\">  923</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00924\"></a><span class=\"lineno\">  924</span>&#160;    <span class=\"keyword\">def </span>hasUIDrawables(self):</div>\n\
<div class=\"line\"><a name=\"l00925\"></a><span class=\"lineno\">  925</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l00926\"></a><span class=\"lineno\">  926</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00927\"></a><span class=\"lineno\">  927</span>&#160;    <span class=\"comment\"># Pre UI draw</span></div>\n\
<div class=\"line\"><a name=\"l00928\"></a><span class=\"lineno\">  928</span>&#160;    <span class=\"keyword\">def </span>addPreUIDrawables(self, drawManager, frameContext):</div>\n\
<div class=\"line\"><a name=\"l00929\"></a><span class=\"lineno\">  929</span>&#160;        drawManager.beginDrawable()</div>\n\
<div class=\"line\"><a name=\"l00930\"></a><span class=\"lineno\">  930</span>&#160;        drawManager.setColor( om.MColor( (0.1, 0.5, 0.95) ) )</div>\n\
<div class=\"line\"><a name=\"l00931\"></a><span class=\"lineno\">  931</span>&#160;        drawManager.setFontSize( omr.MUIDrawManager.kSmallFontSize )</div>\n\
<div class=\"line\"><a name=\"l00932\"></a><span class=\"lineno\">  932</span>&#160;        drawManager.text( om.MPoint( -2, 2, -2 ), <span class=\"stringliteral\">&quot;Pre UI draw test in Scene operation&quot;</span>, omr.MUIDrawManager.kRight )</div>\n\
<div class=\"line\"><a name=\"l00933\"></a><span class=\"lineno\">  933</span>&#160;        drawManager.line( om.MPoint( -2, 0, -2 ), om.MPoint( -2, 2, -2 ) )</div>\n\
<div class=\"line\"><a name=\"l00934\"></a><span class=\"lineno\">  934</span>&#160;        drawManager.setColor( om.MColor( (1.0, 1.0, 1.0) ) )</div>\n\
<div class=\"line\"><a name=\"l00935\"></a><span class=\"lineno\">  935</span>&#160;        drawManager.sphere( om.MPoint( -2, 2, -2 ), 0.8, <span class=\"keyword\">False</span> )</div>\n\
<div class=\"line\"><a name=\"l00936\"></a><span class=\"lineno\">  936</span>&#160;        drawManager.setColor( om.MColor( (0.1, 0.5, 0.95, 0.4) ) )</div>\n\
<div class=\"line\"><a name=\"l00937\"></a><span class=\"lineno\">  937</span>&#160;        drawManager.sphere( om.MPoint( -2, 2, -2 ), 0.8, <span class=\"keyword\">True</span> )</div>\n\
<div class=\"line\"><a name=\"l00938\"></a><span class=\"lineno\">  938</span>&#160;        drawManager.endDrawable()</div>\n\
<div class=\"line\"><a name=\"l00939\"></a><span class=\"lineno\">  939</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00940\"></a><span class=\"lineno\">  940</span>&#160;    <span class=\"comment\"># Post UI draw</span></div>\n\
<div class=\"line\"><a name=\"l00941\"></a><span class=\"lineno\">  941</span>&#160;    <span class=\"keyword\">def </span>addPostUIDrawables(self, drawManager, frameContext):</div>\n\
<div class=\"line\"><a name=\"l00942\"></a><span class=\"lineno\">  942</span>&#160;        drawManager.beginDrawable()</div>\n\
<div class=\"line\"><a name=\"l00943\"></a><span class=\"lineno\">  943</span>&#160;        drawManager.setColor( om.MColor( (0.05, 0.95, 0.34) ) )</div>\n\
<div class=\"line\"><a name=\"l00944\"></a><span class=\"lineno\">  944</span>&#160;        drawManager.setFontSize( omr.MUIDrawManager.kSmallFontSize )</div>\n\
<div class=\"line\"><a name=\"l00945\"></a><span class=\"lineno\">  945</span>&#160;        drawManager.text( om.MPoint( 2, 2, 2 ), <span class=\"stringliteral\">&quot;Post UI draw test in Scene operation&quot;</span>, omr.MUIDrawManager.kLeft )</div>\n\
<div class=\"line\"><a name=\"l00946\"></a><span class=\"lineno\">  946</span>&#160;        drawManager.line( om.MPoint( 2, 0, 2), om.MPoint( 2, 2, 2 ) )</div>\n\
<div class=\"line\"><a name=\"l00947\"></a><span class=\"lineno\">  947</span>&#160;        drawManager.setColor( om.MColor( (1.0, 1.0, 1.0) ) )</div>\n\
<div class=\"line\"><a name=\"l00948\"></a><span class=\"lineno\">  948</span>&#160;        drawManager.sphere( om.MPoint( 2, 2, 2 ), 0.8, <span class=\"keyword\">False</span> )</div>\n\
<div class=\"line\"><a name=\"l00949\"></a><span class=\"lineno\">  949</span>&#160;        drawManager.setColor( om.MColor( (0.05, 0.95, 0.34, 0.4) ) )</div>\n\
<div class=\"line\"><a name=\"l00950\"></a><span class=\"lineno\">  950</span>&#160;        drawManager.sphere( om.MPoint( 2, 2, 2 ), 0.8, <span class=\"keyword\">True</span> )</div>\n\
<div class=\"line\"><a name=\"l00951\"></a><span class=\"lineno\">  951</span>&#160;        drawManager.endDrawable()</div>\n\
<div class=\"line\"><a name=\"l00952\"></a><span class=\"lineno\">  952</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00953\"></a><span class=\"lineno\">  953</span>&#160;    <span class=\"keyword\">def </span>panelName(self):</div>\n\
<div class=\"line\"><a name=\"l00954\"></a><span class=\"lineno\">  954</span>&#160;        <span class=\"keywordflow\">return</span> self.mPanelName</div>\n\
<div class=\"line\"><a name=\"l00955\"></a><span class=\"lineno\">  955</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00956\"></a><span class=\"lineno\">  956</span>&#160;    <span class=\"keyword\">def </span>setPanelName(self, name):</div>\n\
<div class=\"line\"><a name=\"l00957\"></a><span class=\"lineno\">  957</span>&#160;        self.mPanelName = name</div>\n\
<div class=\"line\"><a name=\"l00958\"></a><span class=\"lineno\">  958</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00959\"></a><span class=\"lineno\">  959</span>&#160;    <span class=\"keyword\">def </span>viewRectangle(self):</div>\n\
<div class=\"line\"><a name=\"l00960\"></a><span class=\"lineno\">  960</span>&#160;        <span class=\"keywordflow\">return</span> self.mViewRectangle</div>\n\
<div class=\"line\"><a name=\"l00961\"></a><span class=\"lineno\">  961</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00962\"></a><span class=\"lineno\">  962</span>&#160;    <span class=\"keyword\">def </span>setViewRectangle(self, rect):</div>\n\
<div class=\"line\"><a name=\"l00963\"></a><span class=\"lineno\">  963</span>&#160;        self.mViewRectangle = rect</div>\n\
<div class=\"line\"><a name=\"l00964\"></a><span class=\"lineno\">  964</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00965\"></a><span class=\"lineno\">  965</span>&#160;    <span class=\"keyword\">def </span>colorTarget(self):</div>\n\
<div class=\"line\"><a name=\"l00966\"></a><span class=\"lineno\">  966</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00967\"></a><span class=\"lineno\">  967</span>&#160;            <span class=\"keywordflow\">return</span> self.mTargets[kMyColorTarget]</div>\n\
<div class=\"line\"><a name=\"l00968\"></a><span class=\"lineno\">  968</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00969\"></a><span class=\"lineno\">  969</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00970\"></a><span class=\"lineno\">  970</span>&#160;    <span class=\"keyword\">def </span>depthTarget(self):</div>\n\
<div class=\"line\"><a name=\"l00971\"></a><span class=\"lineno\">  971</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l00972\"></a><span class=\"lineno\">  972</span>&#160;            <span class=\"keywordflow\">return</span> self.mTargets[kMyDepthTarget]</div>\n\
<div class=\"line\"><a name=\"l00973\"></a><span class=\"lineno\">  973</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l00974\"></a><span class=\"lineno\">  974</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00975\"></a><span class=\"lineno\">  975</span>&#160;    <span class=\"keyword\">def </span>setEnableSRGBWriteFlag(self, val):</div>\n\
<div class=\"line\"><a name=\"l00976\"></a><span class=\"lineno\">  976</span>&#160;        self.mEnableSRGBWrite = val</div>\n\
<div class=\"line\"><a name=\"l00977\"></a><span class=\"lineno\">  977</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00978\"></a><span class=\"lineno\">  978</span>&#160;    <span class=\"keyword\">def </span>enableSRGBWriteFlag(self):</div>\n\
<div class=\"line\"><a name=\"l00979\"></a><span class=\"lineno\">  979</span>&#160;        <span class=\"keywordflow\">return</span> self.mEnableSRGBWrite</div>\n\
<div class=\"line\"><a name=\"l00980\"></a><span class=\"lineno\">  980</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00981\"></a><span class=\"lineno\">  981</span>&#160;<span class=\"comment\">###################################################################</span></div>\n\
<div class=\"line\"><a name=\"l00982\"></a><span class=\"lineno\">  982</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00983\"></a><span class=\"lineno\">  983</span>&#160;<span class=\"comment\">#   Custom user operation. One approach to adding a pre and</span></div>\n\
<div class=\"line\"><a name=\"l00984\"></a><span class=\"lineno\">  984</span>&#160;<span class=\"comment\">#   post scene operations. In this approach only 1 operation</span></div>\n\
<div class=\"line\"><a name=\"l00985\"></a><span class=\"lineno\">  985</span>&#160;<span class=\"comment\">#   is reused twice with local state as to when it is being</span></div>\n\
<div class=\"line\"><a name=\"l00986\"></a><span class=\"lineno\">  986</span>&#160;<span class=\"comment\">#   used. Another approach which may be more suitable for when</span></div>\n\
<div class=\"line\"><a name=\"l00987\"></a><span class=\"lineno\">  987</span>&#160;<span class=\"comment\">#   global state is changed is to create 2 instances of this</span></div>\n\
<div class=\"line\"><a name=\"l00988\"></a><span class=\"lineno\">  988</span>&#160;<span class=\"comment\">#   operation and keep global state on the override instead of</span></div>\n\
<div class=\"line\"><a name=\"l00989\"></a><span class=\"lineno\">  989</span>&#160;<span class=\"comment\">#   locally here.</span></div>\n\
<div class=\"line\"><a name=\"l00990\"></a><span class=\"lineno\">  990</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00991\"></a><span class=\"lineno\">  991</span>&#160;<span class=\"comment\">#   The cost of an override is very small so creating more instances</span></div>\n\
<div class=\"line\"><a name=\"l00992\"></a><span class=\"lineno\">  992</span>&#160;<span class=\"comment\">#   can provide a clearer and cleaner render loop logic.</span></div>\n\
<div class=\"line\"><a name=\"l00993\"></a><span class=\"lineno\">  993</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l00994\"></a><span class=\"lineno\">  994</span>&#160;<span class=\"keyword\">class </span>viewRenderUserOperation(omr.MUserRenderOperation):</div>\n\
<div class=\"line\"><a name=\"l00995\"></a><span class=\"lineno\">  995</span>&#160;    <span class=\"keyword\">def </span>__init__(self, name):</div>\n\
<div class=\"line\"><a name=\"l00996\"></a><span class=\"lineno\">  996</span>&#160;        omr.MUserRenderOperation.__init__(self, name)</div>\n\
<div class=\"line\"><a name=\"l00997\"></a><span class=\"lineno\">  997</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l00998\"></a><span class=\"lineno\">  998</span>&#160;        <span class=\"comment\"># 3D viewport panel name, if any</span></div>\n\
<div class=\"line\"><a name=\"l00999\"></a><span class=\"lineno\">  999</span>&#160;        self.mPanelName = <span class=\"stringliteral\">&quot;&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01000\"></a><span class=\"lineno\"> 1000</span>&#160;        <span class=\"comment\"># Camera override</span></div>\n\
<div class=\"line\"><a name=\"l01001\"></a><span class=\"lineno\"> 1001</span>&#160;        self.mCameraOverride = omr.MCameraOverride()</div>\n\
<div class=\"line\"><a name=\"l01002\"></a><span class=\"lineno\"> 1002</span>&#160;        <span class=\"comment\"># Viewport rectangle override</span></div>\n\
<div class=\"line\"><a name=\"l01003\"></a><span class=\"lineno\"> 1003</span>&#160;        self.mViewRectangle = om.MFloatPoint(0.0, 0.0, 1.0, 1.0) <span class=\"comment\"># 100 % of target size</span></div>\n\
<div class=\"line\"><a name=\"l01004\"></a><span class=\"lineno\"> 1004</span>&#160;        <span class=\"comment\"># Available targets</span></div>\n\
<div class=\"line\"><a name=\"l01005\"></a><span class=\"lineno\"> 1005</span>&#160;        self.mTargets = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01006\"></a><span class=\"lineno\"> 1006</span>&#160;        <span class=\"comment\"># sRGB write flag</span></div>\n\
<div class=\"line\"><a name=\"l01007\"></a><span class=\"lineno\"> 1007</span>&#160;        self.fEnableSRGBWriteFlag = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01008\"></a><span class=\"lineno\"> 1008</span>&#160;        <span class=\"comment\"># Draw an extra label</span></div>\n\
<div class=\"line\"><a name=\"l01009\"></a><span class=\"lineno\"> 1009</span>&#160;        self.fDrawLabel = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01010\"></a><span class=\"lineno\"> 1010</span>&#160;        <span class=\"comment\"># Use camera override</span></div>\n\
<div class=\"line\"><a name=\"l01011\"></a><span class=\"lineno\"> 1011</span>&#160;        self.fUserCameraOverride = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01012\"></a><span class=\"lineno\"> 1012</span>&#160;        <span class=\"comment\"># Debugging flags</span></div>\n\
<div class=\"line\"><a name=\"l01013\"></a><span class=\"lineno\"> 1013</span>&#160;        self.fDebugDrawContext = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01014\"></a><span class=\"lineno\"> 1014</span>&#160;        self.fDebugLightingInfo = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01015\"></a><span class=\"lineno\"> 1015</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01016\"></a><span class=\"lineno\"> 1016</span>&#160;    <span class=\"keyword\">def </span>execute(self, drawContext):</div>\n\
<div class=\"line\"><a name=\"l01017\"></a><span class=\"lineno\"> 1017</span>&#160;        <span class=\"comment\"># Sample code to debug pass information</span></div>\n\
<div class=\"line\"><a name=\"l01018\"></a><span class=\"lineno\"> 1018</span>&#160;        debugPassInformation = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01019\"></a><span class=\"lineno\"> 1019</span>&#160;        <span class=\"keywordflow\">if</span> debugPassInformation:</div>\n\
<div class=\"line\"><a name=\"l01020\"></a><span class=\"lineno\"> 1020</span>&#160;            passCtx = drawContext.getPassContext()</div>\n\
<div class=\"line\"><a name=\"l01021\"></a><span class=\"lineno\"> 1021</span>&#160;            passId = passCtx.passIdentifier()</div>\n\
<div class=\"line\"><a name=\"l01022\"></a><span class=\"lineno\"> 1022</span>&#160;            passSem = passCtx.passSemantics()</div>\n\
<div class=\"line\"><a name=\"l01023\"></a><span class=\"lineno\"> 1023</span>&#160;            print(<span class=\"stringliteral\">&quot;viewRenderUserOperation: drawing in pass[&quot;</span> + str(passId) + <span class=\"stringliteral\">&quot;], semantic[&quot;</span> + str(passSem) + <span class=\"stringliteral\">&quot;]&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01024\"></a><span class=\"lineno\"> 1024</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01025\"></a><span class=\"lineno\"> 1025</span>&#160;        <span class=\"comment\"># Example code to find the active override.</span></div>\n\
<div class=\"line\"><a name=\"l01026\"></a><span class=\"lineno\"> 1026</span>&#160;        <span class=\"comment\"># This is not necessary if the operations just keep a reference</span></div>\n\
<div class=\"line\"><a name=\"l01027\"></a><span class=\"lineno\"> 1027</span>&#160;        <span class=\"comment\"># to the override, but this demonstrates how this</span></div>\n\
<div class=\"line\"><a name=\"l01028\"></a><span class=\"lineno\"> 1028</span>&#160;        <span class=\"comment\"># contextual information can be extracted.</span></div>\n\
<div class=\"line\"><a name=\"l01029\"></a><span class=\"lineno\"> 1029</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01030\"></a><span class=\"lineno\"> 1030</span>&#160;        overrideName = omr.MRenderer.activeRenderOverride()</div>\n\
<div class=\"line\"><a name=\"l01031\"></a><span class=\"lineno\"> 1031</span>&#160;        overrideFunc = omr.MRenderer.findRenderOverride( overrideName )</div>\n\
<div class=\"line\"><a name=\"l01032\"></a><span class=\"lineno\"> 1032</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01033\"></a><span class=\"lineno\"> 1033</span>&#160;        <span class=\"comment\"># Some sample code to debug lighting information in the MDrawContext</span></div>\n\
<div class=\"line\"><a name=\"l01034\"></a><span class=\"lineno\"> 1034</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01035\"></a><span class=\"lineno\"> 1035</span>&#160;        <span class=\"keywordflow\">if</span> self.fDebugLightingInfo:</div>\n\
<div class=\"line\"><a name=\"l01036\"></a><span class=\"lineno\"> 1036</span>&#160;            printDrawContextLightInfo( drawContext )</div>\n\
<div class=\"line\"><a name=\"l01037\"></a><span class=\"lineno\"> 1037</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01038\"></a><span class=\"lineno\"> 1038</span>&#160;        <span class=\"comment\"># Some sample code to debug other MDrawContext information</span></div>\n\
<div class=\"line\"><a name=\"l01039\"></a><span class=\"lineno\"> 1039</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01040\"></a><span class=\"lineno\"> 1040</span>&#160;        <span class=\"keywordflow\">if</span> self.fDebugDrawContext:</div>\n\
<div class=\"line\"><a name=\"l01041\"></a><span class=\"lineno\"> 1041</span>&#160;            matrix = drawContext.getMatrix(omr.MFrameContext.kWorldMtx)</div>\n\
<div class=\"line\"><a name=\"l01042\"></a><span class=\"lineno\"> 1042</span>&#160;            print(<span class=\"stringliteral\">&quot;World matrix is: &quot;</span> + str(matrix))</div>\n\
<div class=\"line\"><a name=\"l01043\"></a><span class=\"lineno\"> 1043</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01044\"></a><span class=\"lineno\"> 1044</span>&#160;            viewDirection = drawContext.getTuple(omr.MFrameContext.kViewDirection)</div>\n\
<div class=\"line\"><a name=\"l01045\"></a><span class=\"lineno\"> 1045</span>&#160;            print(<span class=\"stringliteral\">&quot;Viewdirection is: &quot;</span> + str(viewDirection))</div>\n\
<div class=\"line\"><a name=\"l01046\"></a><span class=\"lineno\"> 1046</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01047\"></a><span class=\"lineno\"> 1047</span>&#160;            box = drawContext.getSceneBox()</div>\n\
<div class=\"line\"><a name=\"l01048\"></a><span class=\"lineno\"> 1048</span>&#160;            print(<span class=\"stringliteral\">&quot;Screen box is: &quot;</span> + str(box))</div>\n\
<div class=\"line\"><a name=\"l01049\"></a><span class=\"lineno\"> 1049</span>&#160;            print(<span class=\"stringliteral\">&quot;\\tcenter=&quot;</span> + str(box.center))</div>\n\
<div class=\"line\"><a name=\"l01050\"></a><span class=\"lineno\"> 1050</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01051\"></a><span class=\"lineno\"> 1051</span>&#160;            vpdim = drawContext.getViewportDimensions()</div>\n\
<div class=\"line\"><a name=\"l01052\"></a><span class=\"lineno\"> 1052</span>&#160;            print(<span class=\"stringliteral\">&quot;Viewport dimension: &quot;</span> + str(vpdim))</div>\n\
<div class=\"line\"><a name=\"l01053\"></a><span class=\"lineno\"> 1053</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01054\"></a><span class=\"lineno\"> 1054</span>&#160;        <span class=\"comment\">#  Draw some addition things for scene draw</span></div>\n\
<div class=\"line\"><a name=\"l01055\"></a><span class=\"lineno\"> 1055</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01056\"></a><span class=\"lineno\"> 1056</span>&#160;        <span class=\"keywordflow\">if</span> len(self.mPanelName) &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l01057\"></a><span class=\"lineno\"> 1057</span>&#160;            view = omui.M3dView.getM3dViewFromModelPanel(self.mPanelName)</div>\n\
<div class=\"line\"><a name=\"l01058\"></a><span class=\"lineno\"> 1058</span>&#160;            <span class=\"comment\">## Get the current viewport and scale it relative to that</span></div>\n\
<div class=\"line\"><a name=\"l01059\"></a><span class=\"lineno\"> 1059</span>&#160;            <span class=\"comment\">##</span></div>\n\
<div class=\"line\"><a name=\"l01060\"></a><span class=\"lineno\"> 1060</span>&#160;            targetSize = drawContext.getRenderTargetSize()</div>\n\
<div class=\"line\"><a name=\"l01061\"></a><span class=\"lineno\"> 1061</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01062\"></a><span class=\"lineno\"> 1062</span>&#160;            <span class=\"keywordflow\">if</span> self.fDrawLabel:</div>\n\
<div class=\"line\"><a name=\"l01063\"></a><span class=\"lineno\"> 1063</span>&#160;                testString = <span class=\"stringliteral\">&quot;Drawing with override: &quot;</span></div>\n\
<div class=\"line\"><a name=\"l01064\"></a><span class=\"lineno\"> 1064</span>&#160;                testString += overrideFunc.name()</div>\n\
<div class=\"line\"><a name=\"l01065\"></a><span class=\"lineno\"> 1065</span>&#160;                pos = om.MPoint(0.0, 0.0, 0.0)</div>\n\
<div class=\"line\"><a name=\"l01066\"></a><span class=\"lineno\"> 1066</span>&#160;                glColor3f( 1.0, 1.0, 1.0 )</div>\n\
<div class=\"line\"><a name=\"l01067\"></a><span class=\"lineno\"> 1067</span>&#160;                view.drawText( testString, pos )</div>\n\
<div class=\"line\"><a name=\"l01068\"></a><span class=\"lineno\"> 1068</span>&#160;        </div>\n\
<div class=\"line\"><a name=\"l01069\"></a><span class=\"lineno\"> 1069</span>&#160;    <span class=\"keyword\">def </span>cameraOverride(self):</div>\n\
<div class=\"line\"><a name=\"l01070\"></a><span class=\"lineno\"> 1070</span>&#160;        <span class=\"keywordflow\">if</span> self.fUserCameraOverride:</div>\n\
<div class=\"line\"><a name=\"l01071\"></a><span class=\"lineno\"> 1071</span>&#160;            <span class=\"keywordflow\">if</span> len(self.mPanelName) &gt; 0:</div>\n\
<div class=\"line\"><a name=\"l01072\"></a><span class=\"lineno\"> 1072</span>&#160;                view = omui.M3dView.getM3dViewFromModelPanel(self.mPanelName)</div>\n\
<div class=\"line\"><a name=\"l01073\"></a><span class=\"lineno\"> 1073</span>&#160;                self.mCameraOverride.mCameraPath = view.getCamera()</div>\n\
<div class=\"line\"><a name=\"l01074\"></a><span class=\"lineno\"> 1074</span>&#160;                <span class=\"keywordflow\">return</span> self.mCameraOverride</div>\n\
<div class=\"line\"><a name=\"l01075\"></a><span class=\"lineno\"> 1075</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01076\"></a><span class=\"lineno\"> 1076</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01077\"></a><span class=\"lineno\"> 1077</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01078\"></a><span class=\"lineno\"> 1078</span>&#160;    <span class=\"keyword\">def </span>targetOverrideList(self):</div>\n\
<div class=\"line\"><a name=\"l01079\"></a><span class=\"lineno\"> 1079</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01080\"></a><span class=\"lineno\"> 1080</span>&#160;            <span class=\"keywordflow\">return</span> [ self.mTargets[kMyColorTarget], self.mTargets[kMyDepthTarget] ]</div>\n\
<div class=\"line\"><a name=\"l01081\"></a><span class=\"lineno\"> 1081</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01082\"></a><span class=\"lineno\"> 1082</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01083\"></a><span class=\"lineno\"> 1083</span>&#160;    <span class=\"keyword\">def </span>enableSRGBWrite(self):</div>\n\
<div class=\"line\"><a name=\"l01084\"></a><span class=\"lineno\"> 1084</span>&#160;        <span class=\"keywordflow\">return</span> self.fEnableSRGBWriteFlag</div>\n\
<div class=\"line\"><a name=\"l01085\"></a><span class=\"lineno\"> 1085</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01086\"></a><span class=\"lineno\"> 1086</span>&#160;    <span class=\"keyword\">def </span>hasUIDrawables(self):</div>\n\
<div class=\"line\"><a name=\"l01087\"></a><span class=\"lineno\"> 1087</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l01088\"></a><span class=\"lineno\"> 1088</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01089\"></a><span class=\"lineno\"> 1089</span>&#160;    <span class=\"keyword\">def </span>addUIDrawables(self, drawManager, frameContext):</div>\n\
<div class=\"line\"><a name=\"l01090\"></a><span class=\"lineno\"> 1090</span>&#160;        drawManager.beginDrawable()</div>\n\
<div class=\"line\"><a name=\"l01091\"></a><span class=\"lineno\"> 1091</span>&#160;        drawManager.setColor( om.MColor( (0.95, 0.5, 0.1) ) )</div>\n\
<div class=\"line\"><a name=\"l01092\"></a><span class=\"lineno\"> 1092</span>&#160;        drawManager.text( om.MPoint( 0, 2, 0 ), <span class=\"stringliteral\">&quot;UI draw test in user operation&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l01093\"></a><span class=\"lineno\"> 1093</span>&#160;        drawManager.line( om.MPoint( 0, 0, 0), om.MPoint( 0, 2, 0 ) )</div>\n\
<div class=\"line\"><a name=\"l01094\"></a><span class=\"lineno\"> 1094</span>&#160;        drawManager.setColor( om.MColor( (1.0, 1.0, 1.0) ) )</div>\n\
<div class=\"line\"><a name=\"l01095\"></a><span class=\"lineno\"> 1095</span>&#160;        drawManager.sphere( om.MPoint( 0, 2, 0 ), 0.8, <span class=\"keyword\">False</span> )</div>\n\
<div class=\"line\"><a name=\"l01096\"></a><span class=\"lineno\"> 1096</span>&#160;        drawManager.setColor( om.MColor( (0.95, 0.5, 0.1, 0.4) ) )</div>\n\
<div class=\"line\"><a name=\"l01097\"></a><span class=\"lineno\"> 1097</span>&#160;        drawManager.sphere( om.MPoint( 0, 2, 0 ), 0.8, <span class=\"keyword\">True</span> )</div>\n\
<div class=\"line\"><a name=\"l01098\"></a><span class=\"lineno\"> 1098</span>&#160;        drawManager.endDrawable()</div>\n\
<div class=\"line\"><a name=\"l01099\"></a><span class=\"lineno\"> 1099</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01100\"></a><span class=\"lineno\"> 1100</span>&#160;    <span class=\"keyword\">def </span>setRenderTargets(self, targets):</div>\n\
<div class=\"line\"><a name=\"l01101\"></a><span class=\"lineno\"> 1101</span>&#160;        self.mTargets = targets</div>\n\
<div class=\"line\"><a name=\"l01102\"></a><span class=\"lineno\"> 1102</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01103\"></a><span class=\"lineno\"> 1103</span>&#160;    <span class=\"keyword\">def </span>setEnableSRGBWriteFlag(self, val):</div>\n\
<div class=\"line\"><a name=\"l01104\"></a><span class=\"lineno\"> 1104</span>&#160;        self.fEnableSRGBWriteFlag = val</div>\n\
<div class=\"line\"><a name=\"l01105\"></a><span class=\"lineno\"> 1105</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01106\"></a><span class=\"lineno\"> 1106</span>&#160;    <span class=\"keyword\">def </span>panelName(self):</div>\n\
<div class=\"line\"><a name=\"l01107\"></a><span class=\"lineno\"> 1107</span>&#160;        <span class=\"keywordflow\">return</span> self.mPanelName</div>\n\
<div class=\"line\"><a name=\"l01108\"></a><span class=\"lineno\"> 1108</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01109\"></a><span class=\"lineno\"> 1109</span>&#160;    <span class=\"keyword\">def </span>setPanelName(self, name):</div>\n\
<div class=\"line\"><a name=\"l01110\"></a><span class=\"lineno\"> 1110</span>&#160;        self.mPanelName = name</div>\n\
<div class=\"line\"><a name=\"l01111\"></a><span class=\"lineno\"> 1111</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01112\"></a><span class=\"lineno\"> 1112</span>&#160;    <span class=\"keyword\">def </span>viewRectangle(self):</div>\n\
<div class=\"line\"><a name=\"l01113\"></a><span class=\"lineno\"> 1113</span>&#160;        <span class=\"keywordflow\">return</span> self.mViewRectangle</div>\n\
<div class=\"line\"><a name=\"l01114\"></a><span class=\"lineno\"> 1114</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01115\"></a><span class=\"lineno\"> 1115</span>&#160;    <span class=\"keyword\">def </span>setViewRectangle(self, rect):</div>\n\
<div class=\"line\"><a name=\"l01116\"></a><span class=\"lineno\"> 1116</span>&#160;        self.mViewRectangle = rect</div>\n\
<div class=\"line\"><a name=\"l01117\"></a><span class=\"lineno\"> 1117</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01118\"></a><span class=\"lineno\"> 1118</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01119\"></a><span class=\"lineno\"> 1119</span>&#160;<span class=\"comment\">###################################################################</span></div>\n\
<div class=\"line\"><a name=\"l01120\"></a><span class=\"lineno\"> 1120</span>&#160;<span class=\"comment\">#   Sample custom render override class.</span></div>\n\
<div class=\"line\"><a name=\"l01121\"></a><span class=\"lineno\"> 1121</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01122\"></a><span class=\"lineno\"> 1122</span>&#160;<span class=\"comment\">#   Is responsible for setting up the render loop operations and</span></div>\n\
<div class=\"line\"><a name=\"l01123\"></a><span class=\"lineno\"> 1123</span>&#160;<span class=\"comment\">#   updating resources for each frame render as well as any</span></div>\n\
<div class=\"line\"><a name=\"l01124\"></a><span class=\"lineno\"> 1124</span>&#160;<span class=\"comment\">#   rendering options.</span></div>\n\
<div class=\"line\"><a name=\"l01125\"></a><span class=\"lineno\"> 1125</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01126\"></a><span class=\"lineno\"> 1126</span>&#160;<span class=\"comment\">#   By default the plugin will perform a number of operations</span></div>\n\
<div class=\"line\"><a name=\"l01127\"></a><span class=\"lineno\"> 1127</span>&#160;<span class=\"comment\">#   in order to:</span></div>\n\
<div class=\"line\"><a name=\"l01128\"></a><span class=\"lineno\"> 1128</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01129\"></a><span class=\"lineno\"> 1129</span>&#160;<span class=\"comment\">#   1) Draw a procedurally generated background</span></div>\n\
<div class=\"line\"><a name=\"l01130\"></a><span class=\"lineno\"> 1130</span>&#160;<span class=\"comment\">#   2) Draw the non-UI parts of the scene using internal logic.</span></div>\n\
<div class=\"line\"><a name=\"l01131\"></a><span class=\"lineno\"> 1131</span>&#160;<span class=\"comment\">#   3) Threshold the scene</span></div>\n\
<div class=\"line\"><a name=\"l01132\"></a><span class=\"lineno\"> 1132</span>&#160;<span class=\"comment\">#   4) Blur the thresholded output</span></div>\n\
<div class=\"line\"><a name=\"l01133\"></a><span class=\"lineno\"> 1133</span>&#160;<span class=\"comment\">#   5) Combine the thresholded output with the original scene (resulting</span></div>\n\
<div class=\"line\"><a name=\"l01134\"></a><span class=\"lineno\"> 1134</span>&#160;<span class=\"comment\">#      in a &quot;glow&quot;)</span></div>\n\
<div class=\"line\"><a name=\"l01135\"></a><span class=\"lineno\"> 1135</span>&#160;<span class=\"comment\">#   6a) Draw the UI parts of the scene using internal logic.</span></div>\n\
<div class=\"line\"><a name=\"l01136\"></a><span class=\"lineno\"> 1136</span>&#160;<span class=\"comment\">#   6b) Perform an option custom user operation for additional UI.</span></div>\n\
<div class=\"line\"><a name=\"l01137\"></a><span class=\"lineno\"> 1137</span>&#160;<span class=\"comment\">#   7) Draw the 2D HUD</span></div>\n\
<div class=\"line\"><a name=\"l01138\"></a><span class=\"lineno\"> 1138</span>&#160;<span class=\"comment\">#   8) &#39;Present&#39; the final output</span></div>\n\
<div class=\"line\"><a name=\"l01139\"></a><span class=\"lineno\"> 1139</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01140\"></a><span class=\"lineno\"> 1140</span>&#160;<span class=\"comment\">#   A number of intermediate render targets are created to hold contents</span></div>\n\
<div class=\"line\"><a name=\"l01141\"></a><span class=\"lineno\"> 1141</span>&#160;<span class=\"comment\">#   which are passed from operation to operation.</span></div>\n\
<div class=\"line\"><a name=\"l01142\"></a><span class=\"lineno\"> 1142</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01143\"></a><span class=\"lineno\"> 1143</span>&#160;<span class=\"keyword\">class </span>viewRenderOverride(omr.MRenderOverride):</div>\n\
<div class=\"line\"><a name=\"l01144\"></a><span class=\"lineno\"> 1144</span>&#160;    <span class=\"keyword\">def </span>__init__(self, name):</div>\n\
<div class=\"line\"><a name=\"l01145\"></a><span class=\"lineno\"> 1145</span>&#160;        omr.MRenderOverride.__init__(self, name)</div>\n\
<div class=\"line\"><a name=\"l01146\"></a><span class=\"lineno\"> 1146</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01147\"></a><span class=\"lineno\"> 1147</span>&#160;        <span class=\"comment\"># UI name which will show up in places</span></div>\n\
<div class=\"line\"><a name=\"l01148\"></a><span class=\"lineno\"> 1148</span>&#160;        <span class=\"comment\"># like the viewport &#39;Renderer&#39; menu</span></div>\n\
<div class=\"line\"><a name=\"l01149\"></a><span class=\"lineno\"> 1149</span>&#160;        self.mUIName = <span class=\"stringliteral\">&quot;Sample VP2 Renderer Override&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01150\"></a><span class=\"lineno\"> 1150</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01151\"></a><span class=\"lineno\"> 1151</span>&#160;        <span class=\"comment\"># Operation lists</span></div>\n\
<div class=\"line\"><a name=\"l01152\"></a><span class=\"lineno\"> 1152</span>&#160;        self.mRenderOperations = []</div>\n\
<div class=\"line\"><a name=\"l01153\"></a><span class=\"lineno\"> 1153</span>&#160;        self.mRenderOperationNames = []</div>\n\
<div class=\"line\"><a name=\"l01154\"></a><span class=\"lineno\"> 1154</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01155\"></a><span class=\"lineno\"> 1155</span>&#160;        <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(kNumberOfOps):</div>\n\
<div class=\"line\"><a name=\"l01156\"></a><span class=\"lineno\"> 1156</span>&#160;            self.mRenderOperations.append(<span class=\"keywordtype\">None</span>)</div>\n\
<div class=\"line\"><a name=\"l01157\"></a><span class=\"lineno\"> 1157</span>&#160;            self.mRenderOperationNames.append(<span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01158\"></a><span class=\"lineno\"> 1158</span>&#160;        self.mCurrentOperation = -1</div>\n\
<div class=\"line\"><a name=\"l01159\"></a><span class=\"lineno\"> 1159</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01160\"></a><span class=\"lineno\"> 1160</span>&#160;        <span class=\"comment\"># Shared render target list</span></div>\n\
<div class=\"line\"><a name=\"l01161\"></a><span class=\"lineno\"> 1161</span>&#160;        self.mTargetOverrideNames = []</div>\n\
<div class=\"line\"><a name=\"l01162\"></a><span class=\"lineno\"> 1162</span>&#160;        self.mTargetDescriptions = []</div>\n\
<div class=\"line\"><a name=\"l01163\"></a><span class=\"lineno\"> 1163</span>&#160;        self.mTargets = []</div>\n\
<div class=\"line\"><a name=\"l01164\"></a><span class=\"lineno\"> 1164</span>&#160;        self.mTargetSupportsSRGBWrite = []</div>\n\
<div class=\"line\"><a name=\"l01165\"></a><span class=\"lineno\"> 1165</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01166\"></a><span class=\"lineno\"> 1166</span>&#160;        <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(kTargetCount):</div>\n\
<div class=\"line\"><a name=\"l01167\"></a><span class=\"lineno\"> 1167</span>&#160;            self.mTargetOverrideNames.append(<span class=\"stringliteral\">&quot;&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01168\"></a><span class=\"lineno\"> 1168</span>&#160;            self.mTargetDescriptions.append(<span class=\"keywordtype\">None</span>)</div>\n\
<div class=\"line\"><a name=\"l01169\"></a><span class=\"lineno\"> 1169</span>&#160;            self.mTargets.append(<span class=\"keywordtype\">None</span>)</div>\n\
<div class=\"line\"><a name=\"l01170\"></a><span class=\"lineno\"> 1170</span>&#160;            self.mTargetSupportsSRGBWrite.append(<span class=\"keyword\">False</span>)</div>\n\
<div class=\"line\"><a name=\"l01171\"></a><span class=\"lineno\"> 1171</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01172\"></a><span class=\"lineno\"> 1172</span>&#160;        <span class=\"comment\"># Init target information for the override</span></div>\n\
<div class=\"line\"><a name=\"l01173\"></a><span class=\"lineno\"> 1173</span>&#160;        sampleCount = 1 <span class=\"comment\"># no multi-sampling</span></div>\n\
<div class=\"line\"><a name=\"l01174\"></a><span class=\"lineno\"> 1174</span>&#160;        colorFormat = omr.MRenderer.kR8G8B8A8_UNORM</div>\n\
<div class=\"line\"><a name=\"l01175\"></a><span class=\"lineno\"> 1175</span>&#160;        depthFormat = omr.MRenderer.kD24S8</div>\n\
<div class=\"line\"><a name=\"l01176\"></a><span class=\"lineno\"> 1176</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01177\"></a><span class=\"lineno\"> 1177</span>&#160;        <span class=\"comment\"># There are 3 render targets used for the entire override:</span></div>\n\
<div class=\"line\"><a name=\"l01178\"></a><span class=\"lineno\"> 1178</span>&#160;        <span class=\"comment\"># 1. Color</span></div>\n\
<div class=\"line\"><a name=\"l01179\"></a><span class=\"lineno\"> 1179</span>&#160;        <span class=\"comment\"># 2. Depth</span></div>\n\
<div class=\"line\"><a name=\"l01180\"></a><span class=\"lineno\"> 1180</span>&#160;        <span class=\"comment\"># 3. Intermediate target to perform target blurs</span></div>\n\
<div class=\"line\"><a name=\"l01181\"></a><span class=\"lineno\"> 1181</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01182\"></a><span class=\"lineno\"> 1182</span>&#160;        self.mTargetOverrideNames   [kMyColorTarget] = <span class=\"stringliteral\">&quot;__viewRenderOverrideCustomColorTarget__&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01183\"></a><span class=\"lineno\"> 1183</span>&#160;        self.mTargetDescriptions    [kMyColorTarget] = omr.MRenderTargetDescription(self.mTargetOverrideNames[kMyColorTarget], 256, 256, sampleCount, colorFormat, 0, <span class=\"keyword\">False</span>)</div>\n\
<div class=\"line\"><a name=\"l01184\"></a><span class=\"lineno\"> 1184</span>&#160;        self.mTargets               [kMyColorTarget] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01185\"></a><span class=\"lineno\"> 1185</span>&#160;        self.mTargetSupportsSRGBWrite[kMyColorTarget] = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01186\"></a><span class=\"lineno\"> 1186</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01187\"></a><span class=\"lineno\"> 1187</span>&#160;        self.mTargetOverrideNames   [kMyDepthTarget] = <span class=\"stringliteral\">&quot;__viewRenderOverrideCustomDepthTarget__&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01188\"></a><span class=\"lineno\"> 1188</span>&#160;        self.mTargetDescriptions    [kMyDepthTarget] = omr.MRenderTargetDescription(self.mTargetOverrideNames[kMyDepthTarget], 256, 256, sampleCount, depthFormat, 0, <span class=\"keyword\">False</span>)</div>\n\
<div class=\"line\"><a name=\"l01189\"></a><span class=\"lineno\"> 1189</span>&#160;        self.mTargets               [kMyDepthTarget] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01190\"></a><span class=\"lineno\"> 1190</span>&#160;        self.mTargetSupportsSRGBWrite[kMyDepthTarget] = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01191\"></a><span class=\"lineno\"> 1191</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01192\"></a><span class=\"lineno\"> 1192</span>&#160;        self.mTargetOverrideNames   [kMyBlurTarget] = <span class=\"stringliteral\">&quot;__viewRenderOverrideBlurTarget__&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01193\"></a><span class=\"lineno\"> 1193</span>&#160;        self.mTargetDescriptions    [kMyBlurTarget]= omr.MRenderTargetDescription(self.mTargetOverrideNames[kMyBlurTarget], 256, 256, sampleCount, colorFormat, 0, <span class=\"keyword\">False</span>)</div>\n\
<div class=\"line\"><a name=\"l01194\"></a><span class=\"lineno\"> 1194</span>&#160;        self.mTargets               [kMyBlurTarget] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01195\"></a><span class=\"lineno\"> 1195</span>&#160;        self.mTargetSupportsSRGBWrite[kMyBlurTarget] = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01196\"></a><span class=\"lineno\"> 1196</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01197\"></a><span class=\"lineno\"> 1197</span>&#160;        <span class=\"comment\"># Set to True to split UI and non-UI draw</span></div>\n\
<div class=\"line\"><a name=\"l01198\"></a><span class=\"lineno\"> 1198</span>&#160;        self.mSplitUIDraw = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01199\"></a><span class=\"lineno\"> 1199</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01200\"></a><span class=\"lineno\"> 1200</span>&#160;        <span class=\"comment\"># For debugging</span></div>\n\
<div class=\"line\"><a name=\"l01201\"></a><span class=\"lineno\"> 1201</span>&#160;        self.mDebugOverride = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01202\"></a><span class=\"lineno\"> 1202</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01203\"></a><span class=\"lineno\"> 1203</span>&#160;        <span class=\"comment\"># Default do full effects</span></div>\n\
<div class=\"line\"><a name=\"l01204\"></a><span class=\"lineno\"> 1204</span>&#160;        self.mSimpleRendering = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01205\"></a><span class=\"lineno\"> 1205</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01206\"></a><span class=\"lineno\"> 1206</span>&#160;        <span class=\"comment\"># Override is for this panel</span></div>\n\
<div class=\"line\"><a name=\"l01207\"></a><span class=\"lineno\"> 1207</span>&#160;        self.mPanelName = <span class=\"stringliteral\">&quot;&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01208\"></a><span class=\"lineno\"> 1208</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01209\"></a><span class=\"lineno\"> 1209</span>&#160;    <span class=\"keyword\">def </span>__del__(self):</div>\n\
<div class=\"line\"><a name=\"l01210\"></a><span class=\"lineno\"> 1210</span>&#160;        targetMgr = omr.MRenderer.getRenderTargetManager()</div>\n\
<div class=\"line\"><a name=\"l01211\"></a><span class=\"lineno\"> 1211</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01212\"></a><span class=\"lineno\"> 1212</span>&#160;        <span class=\"comment\"># Delete any targets created</span></div>\n\
<div class=\"line\"><a name=\"l01213\"></a><span class=\"lineno\"> 1213</span>&#160;        <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(kTargetCount):</div>\n\
<div class=\"line\"><a name=\"l01214\"></a><span class=\"lineno\"> 1214</span>&#160;            self.mTargetDescriptions[i] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01215\"></a><span class=\"lineno\"> 1215</span>&#160;            </div>\n\
<div class=\"line\"><a name=\"l01216\"></a><span class=\"lineno\"> 1216</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mTargets[i] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01217\"></a><span class=\"lineno\"> 1217</span>&#160;                <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> targetMgr <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01218\"></a><span class=\"lineno\"> 1218</span>&#160;                    targetMgr.releaseRenderTarget(self.mTargets[i])</div>\n\
<div class=\"line\"><a name=\"l01219\"></a><span class=\"lineno\"> 1219</span>&#160;                self.mTargets[i] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01220\"></a><span class=\"lineno\"> 1220</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01221\"></a><span class=\"lineno\"> 1221</span>&#160;        self.cleanup()</div>\n\
<div class=\"line\"><a name=\"l01222\"></a><span class=\"lineno\"> 1222</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01223\"></a><span class=\"lineno\"> 1223</span>&#160;        <span class=\"comment\"># Delete all the operations. This will release any</span></div>\n\
<div class=\"line\"><a name=\"l01224\"></a><span class=\"lineno\"> 1224</span>&#160;        <span class=\"comment\"># references to other resources used per operation</span></div>\n\
<div class=\"line\"><a name=\"l01225\"></a><span class=\"lineno\"> 1225</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01226\"></a><span class=\"lineno\"> 1226</span>&#160;        <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(kNumberOfOps):</div>\n\
<div class=\"line\"><a name=\"l01227\"></a><span class=\"lineno\"> 1227</span>&#160;            self.mRenderOperations[i] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01228\"></a><span class=\"lineno\"> 1228</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01229\"></a><span class=\"lineno\"> 1229</span>&#160;        <span class=\"comment\"># Clean up callbacks</span></div>\n\
<div class=\"line\"><a name=\"l01230\"></a><span class=\"lineno\"> 1230</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01231\"></a><span class=\"lineno\"> 1231</span>&#160;        <span class=\"comment\"># PYAPI_TODO if (mRendererChangeCB)</span></div>\n\
<div class=\"line\"><a name=\"l01232\"></a><span class=\"lineno\"> 1232</span>&#160;            <span class=\"comment\"># PYAPI_TODO MMessage::removeCallback(mRendererChangeCB)</span></div>\n\
<div class=\"line\"><a name=\"l01233\"></a><span class=\"lineno\"> 1233</span>&#160;        <span class=\"comment\"># PYAPI_TODO if (mRenderOverrideChangeCB)</span></div>\n\
<div class=\"line\"><a name=\"l01234\"></a><span class=\"lineno\"> 1234</span>&#160;            <span class=\"comment\"># PYAPI_TODO MMessage::removeCallback(mRenderOverrideChangeCB)</span></div>\n\
<div class=\"line\"><a name=\"l01235\"></a><span class=\"lineno\"> 1235</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01236\"></a><span class=\"lineno\"> 1236</span>&#160;    <span class=\"comment\"># Return that this plugin supports both GL and DX draw APIs</span></div>\n\
<div class=\"line\"><a name=\"l01237\"></a><span class=\"lineno\"> 1237</span>&#160;    <span class=\"keyword\">def </span>supportedDrawAPIs(self):</div>\n\
<div class=\"line\"><a name=\"l01238\"></a><span class=\"lineno\"> 1238</span>&#160;        <span class=\"keywordflow\">return</span> ( omr.MRenderer.kOpenGL | omr.MRenderer.kDirectX11 | omr.MRenderer.kOpenGLCoreProfile )</div>\n\
<div class=\"line\"><a name=\"l01239\"></a><span class=\"lineno\"> 1239</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01240\"></a><span class=\"lineno\"> 1240</span>&#160;    <span class=\"comment\"># Initialize &quot;iterator&quot;. We keep a list of operations indexed</span></div>\n\
<div class=\"line\"><a name=\"l01241\"></a><span class=\"lineno\"> 1241</span>&#160;    <span class=\"comment\"># by mCurrentOperation. Set to 0 to point to the first operation.</span></div>\n\
<div class=\"line\"><a name=\"l01242\"></a><span class=\"lineno\"> 1242</span>&#160;    <span class=\"keyword\">def </span>startOperationIterator(self):</div>\n\
<div class=\"line\"><a name=\"l01243\"></a><span class=\"lineno\"> 1243</span>&#160;        self.mCurrentOperation = 0</div>\n\
<div class=\"line\"><a name=\"l01244\"></a><span class=\"lineno\"> 1244</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l01245\"></a><span class=\"lineno\"> 1245</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01246\"></a><span class=\"lineno\"> 1246</span>&#160;    <span class=\"comment\"># Return an operation indicated by mCurrentOperation</span></div>\n\
<div class=\"line\"><a name=\"l01247\"></a><span class=\"lineno\"> 1247</span>&#160;    <span class=\"keyword\">def </span>renderOperation(self):</div>\n\
<div class=\"line\"><a name=\"l01248\"></a><span class=\"lineno\"> 1248</span>&#160;        <span class=\"keywordflow\">if</span> self.mCurrentOperation &gt;= 0 <span class=\"keywordflow\">and</span> self.mCurrentOperation &lt; kNumberOfOps:</div>\n\
<div class=\"line\"><a name=\"l01249\"></a><span class=\"lineno\"> 1249</span>&#160;            <span class=\"keywordflow\">while</span> self.mRenderOperations[self.mCurrentOperation] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01250\"></a><span class=\"lineno\"> 1250</span>&#160;                self.mCurrentOperation = self.mCurrentOperation+1</div>\n\
<div class=\"line\"><a name=\"l01251\"></a><span class=\"lineno\"> 1251</span>&#160;                <span class=\"keywordflow\">if</span> self.mCurrentOperation &gt;= kNumberOfOps:</div>\n\
<div class=\"line\"><a name=\"l01252\"></a><span class=\"lineno\"> 1252</span>&#160;                    <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01253\"></a><span class=\"lineno\"> 1253</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01254\"></a><span class=\"lineno\"> 1254</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mRenderOperations[self.mCurrentOperation] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01255\"></a><span class=\"lineno\"> 1255</span>&#160;                <span class=\"keywordflow\">if</span> self.mDebugOverride:</div>\n\
<div class=\"line\"><a name=\"l01256\"></a><span class=\"lineno\"> 1256</span>&#160;                    print(<span class=\"stringliteral\">&quot;\\t&quot;</span> + self.name() + <span class=\"stringliteral\">&quot;Queue render operation[&quot;</span> + str(self.mCurrentOperation) + <span class=\"stringliteral\">&quot;] = (&quot;</span> + self.mRenderOperations[self.mCurrentOperation].name() + <span class=\"stringliteral\">&quot;)&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01257\"></a><span class=\"lineno\"> 1257</span>&#160;                <span class=\"keywordflow\">return</span> self.mRenderOperations[self.mCurrentOperation]</div>\n\
<div class=\"line\"><a name=\"l01258\"></a><span class=\"lineno\"> 1258</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01259\"></a><span class=\"lineno\"> 1259</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01260\"></a><span class=\"lineno\"> 1260</span>&#160;    <span class=\"comment\"># Advance &quot;iterator&quot; to next operation</span></div>\n\
<div class=\"line\"><a name=\"l01261\"></a><span class=\"lineno\"> 1261</span>&#160;    <span class=\"keyword\">def </span>nextRenderOperation(self):</div>\n\
<div class=\"line\"><a name=\"l01262\"></a><span class=\"lineno\"> 1262</span>&#160;        self.mCurrentOperation = self.mCurrentOperation + 1</div>\n\
<div class=\"line\"><a name=\"l01263\"></a><span class=\"lineno\"> 1263</span>&#160;        <span class=\"keywordflow\">if</span> self.mCurrentOperation &lt; kNumberOfOps:</div>\n\
<div class=\"line\"><a name=\"l01264\"></a><span class=\"lineno\"> 1264</span>&#160;            <span class=\"keywordflow\">return</span> <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l01265\"></a><span class=\"lineno\"> 1265</span>&#160;        <span class=\"keywordflow\">return</span> <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01266\"></a><span class=\"lineno\"> 1266</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01267\"></a><span class=\"lineno\"> 1267</span>&#160;    <span class=\"comment\"># Update the render targets that are required for the entire override.</span></div>\n\
<div class=\"line\"><a name=\"l01268\"></a><span class=\"lineno\"> 1268</span>&#160;    <span class=\"comment\"># References to these targets are set on the individual operations as</span></div>\n\
<div class=\"line\"><a name=\"l01269\"></a><span class=\"lineno\"> 1269</span>&#160;    <span class=\"comment\"># required so that they will send their output to the appropriate location.</span></div>\n\
<div class=\"line\"><a name=\"l01270\"></a><span class=\"lineno\"> 1270</span>&#160;    <span class=\"keyword\">def </span>updateRenderTargets(self):</div>\n\
<div class=\"line\"><a name=\"l01271\"></a><span class=\"lineno\"> 1271</span>&#160;        <span class=\"keywordflow\">if</span> self.mDebugOverride:</div>\n\
<div class=\"line\"><a name=\"l01272\"></a><span class=\"lineno\"> 1272</span>&#160;            print(<span class=\"stringliteral\">&quot;\\t&quot;</span> + self.name() + <span class=\"stringliteral\">&quot;: Set output render target overrides: color=&quot;</span> + self.mTargetDescriptions[kMyColorTarget].name() + <span class=\"stringliteral\">&quot;, depth=&quot;</span> + self.mTargetDescriptions[kMyDepthTarget].name())</div>\n\
<div class=\"line\"><a name=\"l01273\"></a><span class=\"lineno\"> 1273</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01274\"></a><span class=\"lineno\"> 1274</span>&#160;        <span class=\"comment\"># Get the current output target size as specified by the</span></div>\n\
<div class=\"line\"><a name=\"l01275\"></a><span class=\"lineno\"> 1275</span>&#160;        <span class=\"comment\"># renderer. If it has changed then the targets need to be</span></div>\n\
<div class=\"line\"><a name=\"l01276\"></a><span class=\"lineno\"> 1276</span>&#160;        <span class=\"comment\"># resized to match.</span></div>\n\
<div class=\"line\"><a name=\"l01277\"></a><span class=\"lineno\"> 1277</span>&#160;        targetSize = omr.MRenderer.outputTargetSize()</div>\n\
<div class=\"line\"><a name=\"l01278\"></a><span class=\"lineno\"> 1278</span>&#160;        targetWidth = targetSize[0]</div>\n\
<div class=\"line\"><a name=\"l01279\"></a><span class=\"lineno\"> 1279</span>&#160;        targetHeight = targetSize[1]</div>\n\
<div class=\"line\"><a name=\"l01280\"></a><span class=\"lineno\"> 1280</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01281\"></a><span class=\"lineno\"> 1281</span>&#160;        <span class=\"comment\">#if self.mTargetDescriptions[kMyColorTarget].width() != targetWidth or self.mTargetDescriptions[kMyColorTarget].height() != targetHeight:</span></div>\n\
<div class=\"line\"><a name=\"l01282\"></a><span class=\"lineno\"> 1282</span>&#160;            <span class=\"comment\"># A resize occured</span></div>\n\
<div class=\"line\"><a name=\"l01283\"></a><span class=\"lineno\"> 1283</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01284\"></a><span class=\"lineno\"> 1284</span>&#160;        <span class=\"comment\"># Note that the render target sizes could be set to be</span></div>\n\
<div class=\"line\"><a name=\"l01285\"></a><span class=\"lineno\"> 1285</span>&#160;        <span class=\"comment\"># smaller than the size used by the renderer. In this case</span></div>\n\
<div class=\"line\"><a name=\"l01286\"></a><span class=\"lineno\"> 1286</span>&#160;        <span class=\"comment\"># a final present will generally stretch the output.</span></div>\n\
<div class=\"line\"><a name=\"l01287\"></a><span class=\"lineno\"> 1287</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01288\"></a><span class=\"lineno\"> 1288</span>&#160;        <span class=\"comment\"># Update size value for all target descriptions kept</span></div>\n\
<div class=\"line\"><a name=\"l01289\"></a><span class=\"lineno\"> 1289</span>&#160;        <span class=\"keywordflow\">for</span> targetId <span class=\"keywordflow\">in</span> range(kTargetCount):</div>\n\
<div class=\"line\"><a name=\"l01290\"></a><span class=\"lineno\"> 1290</span>&#160;            self.mTargetDescriptions[targetId].setWidth( targetWidth )</div>\n\
<div class=\"line\"><a name=\"l01291\"></a><span class=\"lineno\"> 1291</span>&#160;            self.mTargetDescriptions[targetId].setHeight( targetHeight )</div>\n\
<div class=\"line\"><a name=\"l01292\"></a><span class=\"lineno\"> 1292</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01293\"></a><span class=\"lineno\"> 1293</span>&#160;        <span class=\"comment\"># Keep track of whether the main color target can support sRGB write</span></div>\n\
<div class=\"line\"><a name=\"l01294\"></a><span class=\"lineno\"> 1294</span>&#160;        colorTargetSupportsSGRBWrite = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01295\"></a><span class=\"lineno\"> 1295</span>&#160;        <span class=\"comment\"># Uncomment this to debug if targets support sRGB write.</span></div>\n\
<div class=\"line\"><a name=\"l01296\"></a><span class=\"lineno\"> 1296</span>&#160;        sDebugSRGBWrite = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01297\"></a><span class=\"lineno\"> 1297</span>&#160;        <span class=\"comment\"># Enable to testing unordered write access</span></div>\n\
<div class=\"line\"><a name=\"l01298\"></a><span class=\"lineno\"> 1298</span>&#160;        testUnorderedWriteAccess = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01299\"></a><span class=\"lineno\"> 1299</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01300\"></a><span class=\"lineno\"> 1300</span>&#160;        <span class=\"comment\"># Either acquire a new target if it didn&#39;t exist before, resize</span></div>\n\
<div class=\"line\"><a name=\"l01301\"></a><span class=\"lineno\"> 1301</span>&#160;        <span class=\"comment\"># the current target.</span></div>\n\
<div class=\"line\"><a name=\"l01302\"></a><span class=\"lineno\"> 1302</span>&#160;        targetManager = omr.MRenderer.getRenderTargetManager()</div>\n\
<div class=\"line\"><a name=\"l01303\"></a><span class=\"lineno\"> 1303</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> targetManager <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01304\"></a><span class=\"lineno\"> 1304</span>&#160;            <span class=\"keywordflow\">if</span> sDebugSRGBWrite:</div>\n\
<div class=\"line\"><a name=\"l01305\"></a><span class=\"lineno\"> 1305</span>&#160;                <span class=\"keywordflow\">if</span> omr.MRenderer.drawAPI() != omr.MRenderer.kOpenGL:</div>\n\
<div class=\"line\"><a name=\"l01306\"></a><span class=\"lineno\"> 1306</span>&#160;                    <span class=\"comment\"># Sample code to scan all available targetgs for sRGB write support</span></div>\n\
<div class=\"line\"><a name=\"l01307\"></a><span class=\"lineno\"> 1307</span>&#160;                    <span class=\"keywordflow\">for</span> i <span class=\"keywordflow\">in</span> range(omr.MRenderer.kNumberOfRasterFormats):</div>\n\
<div class=\"line\"><a name=\"l01308\"></a><span class=\"lineno\"> 1308</span>&#160;                        <span class=\"keywordflow\">if</span> targetManager.formatSupportsSRGBWrite(i):</div>\n\
<div class=\"line\"><a name=\"l01309\"></a><span class=\"lineno\"> 1309</span>&#160;                            print(<span class=\"stringliteral\">&quot;Format &quot;</span> + str(i) + <span class=\"stringliteral\">&quot; supports SRGBwrite&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01310\"></a><span class=\"lineno\"> 1310</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01311\"></a><span class=\"lineno\"> 1311</span>&#160;            <span class=\"keywordflow\">for</span> targetId <span class=\"keywordflow\">in</span> range(kTargetCount):</div>\n\
<div class=\"line\"><a name=\"l01312\"></a><span class=\"lineno\"> 1312</span>&#160;                <span class=\"comment\"># Check to see if the format supports sRGB write.</span></div>\n\
<div class=\"line\"><a name=\"l01313\"></a><span class=\"lineno\"> 1313</span>&#160;                <span class=\"comment\"># Set unordered write access flag if test enabled.</span></div>\n\
<div class=\"line\"><a name=\"l01314\"></a><span class=\"lineno\"> 1314</span>&#160;                supportsSRGBWrite = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01315\"></a><span class=\"lineno\"> 1315</span>&#160;                <span class=\"keywordflow\">if</span> omr.MRenderer.drawAPI() != omr.MRenderer.kOpenGL:</div>\n\
<div class=\"line\"><a name=\"l01316\"></a><span class=\"lineno\"> 1316</span>&#160;                    supportsSRGBWrite = targetManager.formatSupportsSRGBWrite( self.mTargetDescriptions[targetId].rasterFormat() )</div>\n\
<div class=\"line\"><a name=\"l01317\"></a><span class=\"lineno\"> 1317</span>&#160;                    self.mTargetSupportsSRGBWrite[targetId] = supportsSRGBWrite</div>\n\
<div class=\"line\"><a name=\"l01318\"></a><span class=\"lineno\"> 1318</span>&#160;                self.mTargetDescriptions[targetId].setAllowsUnorderedAccess( testUnorderedWriteAccess )</div>\n\
<div class=\"line\"><a name=\"l01319\"></a><span class=\"lineno\"> 1319</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01320\"></a><span class=\"lineno\"> 1320</span>&#160;                <span class=\"comment\"># Keep track of whether the main color target can support sRGB write</span></div>\n\
<div class=\"line\"><a name=\"l01321\"></a><span class=\"lineno\"> 1321</span>&#160;                <span class=\"keywordflow\">if</span> targetId == kMyColorTarget:</div>\n\
<div class=\"line\"><a name=\"l01322\"></a><span class=\"lineno\"> 1322</span>&#160;                    colorTargetSupportsSGRBWrite = supportsSRGBWrite</div>\n\
<div class=\"line\"><a name=\"l01323\"></a><span class=\"lineno\"> 1323</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01324\"></a><span class=\"lineno\"> 1324</span>&#160;                <span class=\"keywordflow\">if</span> sDebugSRGBWrite:</div>\n\
<div class=\"line\"><a name=\"l01325\"></a><span class=\"lineno\"> 1325</span>&#160;                    <span class=\"keywordflow\">if</span> targetId == kMyColorTarget <span class=\"keywordflow\">or</span> targetId == kMyBlurTarget:</div>\n\
<div class=\"line\"><a name=\"l01326\"></a><span class=\"lineno\"> 1326</span>&#160;                        print(<span class=\"stringliteral\">&quot;Color target &quot;</span> + str(targetId) + <span class=\"stringliteral\">&quot; supports sRGB write = &quot;</span> + str(supportsSRGBWrite))</div>\n\
<div class=\"line\"><a name=\"l01327\"></a><span class=\"lineno\"> 1327</span>&#160;                    <span class=\"comment\"># This would be expected to fail.</span></div>\n\
<div class=\"line\"><a name=\"l01328\"></a><span class=\"lineno\"> 1328</span>&#160;                    <span class=\"keywordflow\">if</span> targetId == kMyDepthTarget:</div>\n\
<div class=\"line\"><a name=\"l01329\"></a><span class=\"lineno\"> 1329</span>&#160;                        print(<span class=\"stringliteral\">&quot;Depth target supports sRGB write = &quot;</span> + str(supportsSRGBWrite))</div>\n\
<div class=\"line\"><a name=\"l01330\"></a><span class=\"lineno\"> 1330</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01331\"></a><span class=\"lineno\"> 1331</span>&#160;                <span class=\"comment\"># Create a new target</span></div>\n\
<div class=\"line\"><a name=\"l01332\"></a><span class=\"lineno\"> 1332</span>&#160;                <span class=\"keywordflow\">if</span> self.mTargets[targetId] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01333\"></a><span class=\"lineno\"> 1333</span>&#160;                    self.mTargets[targetId] = targetManager.acquireRenderTarget( self.mTargetDescriptions[targetId] )</div>\n\
<div class=\"line\"><a name=\"l01334\"></a><span class=\"lineno\"> 1334</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01335\"></a><span class=\"lineno\"> 1335</span>&#160;                <span class=\"comment\"># &quot;Update&quot; using a description will resize as necessary</span></div>\n\
<div class=\"line\"><a name=\"l01336\"></a><span class=\"lineno\"> 1336</span>&#160;                <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l01337\"></a><span class=\"lineno\"> 1337</span>&#160;                    self.mTargets[targetId].updateDescription( self.mTargetDescriptions[targetId] )</div>\n\
<div class=\"line\"><a name=\"l01338\"></a><span class=\"lineno\"> 1338</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01339\"></a><span class=\"lineno\"> 1339</span>&#160;                <span class=\"keywordflow\">if</span> testUnorderedWriteAccess <span class=\"keywordflow\">and</span> <span class=\"keywordflow\">not</span> self.mTargets[targetId] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01340\"></a><span class=\"lineno\"> 1340</span>&#160;                    returnDesc = self.mTargets[targetId].targetDescription()</div>\n\
<div class=\"line\"><a name=\"l01341\"></a><span class=\"lineno\"> 1341</span>&#160;                    self.mTargetDescriptions[targetId].setAllowsUnorderedAccess( returnDesc.allowsUnorderedAccess() )</div>\n\
<div class=\"line\"><a name=\"l01342\"></a><span class=\"lineno\"> 1342</span>&#160;                    print(<span class=\"stringliteral\">&quot;Acquire target[&quot;</span> + returnDesc.name() + <span class=\"stringliteral\">&quot;] with unordered access = &quot;</span> + str(returnDesc.allowsUnorderedAccess()) + <span class=\"stringliteral\">&quot;. Should fail if attempting with depth target = &quot;</span> + str(targetId == kMyDepthTarget))</div>\n\
<div class=\"line\"><a name=\"l01343\"></a><span class=\"lineno\"> 1343</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01344\"></a><span class=\"lineno\"> 1344</span>&#160;        <span class=\"comment\"># Update the render targets on the individual operations</span></div>\n\
<div class=\"line\"><a name=\"l01345\"></a><span class=\"lineno\"> 1345</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01346\"></a><span class=\"lineno\"> 1346</span>&#160;        <span class=\"comment\"># Set the targets on the operations. For simplicity just</span></div>\n\
<div class=\"line\"><a name=\"l01347\"></a><span class=\"lineno\"> 1347</span>&#160;        <span class=\"comment\"># passing over the set of all targets used for the frame</span></div>\n\
<div class=\"line\"><a name=\"l01348\"></a><span class=\"lineno\"> 1348</span>&#160;        <span class=\"comment\"># to each operation.</span></div>\n\
<div class=\"line\"><a name=\"l01349\"></a><span class=\"lineno\"> 1349</span>&#160;        <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01350\"></a><span class=\"lineno\"> 1350</span>&#160;        quadOp = self.mRenderOperations[kBackgroundBlit]</div>\n\
<div class=\"line\"><a name=\"l01351\"></a><span class=\"lineno\"> 1351</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> quadOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01352\"></a><span class=\"lineno\"> 1352</span>&#160;            quadOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01353\"></a><span class=\"lineno\"> 1353</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01354\"></a><span class=\"lineno\"> 1354</span>&#160;        sceneOp = self.mRenderOperations[kMaya3dSceneRender]</div>\n\
<div class=\"line\"><a name=\"l01355\"></a><span class=\"lineno\"> 1355</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> sceneOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01356\"></a><span class=\"lineno\"> 1356</span>&#160;            sceneOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01357\"></a><span class=\"lineno\"> 1357</span>&#160;            sceneOp.setEnableSRGBWriteFlag( colorTargetSupportsSGRBWrite )</div>\n\
<div class=\"line\"><a name=\"l01358\"></a><span class=\"lineno\"> 1358</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01359\"></a><span class=\"lineno\"> 1359</span>&#160;        opaqueSceneOp = self.mRenderOperations[kMaya3dSceneRenderOpaque]</div>\n\
<div class=\"line\"><a name=\"l01360\"></a><span class=\"lineno\"> 1360</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> opaqueSceneOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01361\"></a><span class=\"lineno\"> 1361</span>&#160;            opaqueSceneOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01362\"></a><span class=\"lineno\"> 1362</span>&#160;            opaqueSceneOp.setEnableSRGBWriteFlag( colorTargetSupportsSGRBWrite )</div>\n\
<div class=\"line\"><a name=\"l01363\"></a><span class=\"lineno\"> 1363</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01364\"></a><span class=\"lineno\"> 1364</span>&#160;        transparentSceneOp = self.mRenderOperations[kMaya3dSceneRenderTransparent]</div>\n\
<div class=\"line\"><a name=\"l01365\"></a><span class=\"lineno\"> 1365</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> transparentSceneOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01366\"></a><span class=\"lineno\"> 1366</span>&#160;            transparentSceneOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01367\"></a><span class=\"lineno\"> 1367</span>&#160;            transparentSceneOp.setEnableSRGBWriteFlag( colorTargetSupportsSGRBWrite )</div>\n\
<div class=\"line\"><a name=\"l01368\"></a><span class=\"lineno\"> 1368</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01369\"></a><span class=\"lineno\"> 1369</span>&#160;        uiSceneOp = self.mRenderOperations[kMaya3dSceneRenderUI]</div>\n\
<div class=\"line\"><a name=\"l01370\"></a><span class=\"lineno\"> 1370</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> uiSceneOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01371\"></a><span class=\"lineno\"> 1371</span>&#160;            uiSceneOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01372\"></a><span class=\"lineno\"> 1372</span>&#160;            uiSceneOp.setEnableSRGBWriteFlag( <span class=\"keyword\">False</span> ) <span class=\"comment\"># Don&#39;t enable sRGB write for UI</span></div>\n\
<div class=\"line\"><a name=\"l01373\"></a><span class=\"lineno\"> 1373</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01374\"></a><span class=\"lineno\"> 1374</span>&#160;        quadOp2 = self.mRenderOperations[kPostOperation1]</div>\n\
<div class=\"line\"><a name=\"l01375\"></a><span class=\"lineno\"> 1375</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> quadOp2 <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01376\"></a><span class=\"lineno\"> 1376</span>&#160;            quadOp2.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01377\"></a><span class=\"lineno\"> 1377</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01378\"></a><span class=\"lineno\"> 1378</span>&#160;        quadOp3 = self.mRenderOperations[kPostOperation2]</div>\n\
<div class=\"line\"><a name=\"l01379\"></a><span class=\"lineno\"> 1379</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> quadOp3 <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01380\"></a><span class=\"lineno\"> 1380</span>&#160;            quadOp3.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01381\"></a><span class=\"lineno\"> 1381</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01382\"></a><span class=\"lineno\"> 1382</span>&#160;        userOp = self.mRenderOperations[kUserOpNumber]</div>\n\
<div class=\"line\"><a name=\"l01383\"></a><span class=\"lineno\"> 1383</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> userOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01384\"></a><span class=\"lineno\"> 1384</span>&#160;            userOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01385\"></a><span class=\"lineno\"> 1385</span>&#160;            userOp.setEnableSRGBWriteFlag( colorTargetSupportsSGRBWrite ) <span class=\"comment\"># Enable sRGB write for user ops</span></div>\n\
<div class=\"line\"><a name=\"l01386\"></a><span class=\"lineno\"> 1386</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01387\"></a><span class=\"lineno\"> 1387</span>&#160;        presentOp = self.mRenderOperations[kPresentOp]</div>\n\
<div class=\"line\"><a name=\"l01388\"></a><span class=\"lineno\"> 1388</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> presentOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01389\"></a><span class=\"lineno\"> 1389</span>&#160;            presentOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01390\"></a><span class=\"lineno\"> 1390</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01391\"></a><span class=\"lineno\"> 1391</span>&#160;        thresholdOp = self.mRenderOperations[kThresholdOp]</div>\n\
<div class=\"line\"><a name=\"l01392\"></a><span class=\"lineno\"> 1392</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> thresholdOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01393\"></a><span class=\"lineno\"> 1393</span>&#160;            thresholdOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01394\"></a><span class=\"lineno\"> 1394</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01395\"></a><span class=\"lineno\"> 1395</span>&#160;        horizBlur = self.mRenderOperations[kHorizBlurOp]</div>\n\
<div class=\"line\"><a name=\"l01396\"></a><span class=\"lineno\"> 1396</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> horizBlur <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01397\"></a><span class=\"lineno\"> 1397</span>&#160;            horizBlur.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01398\"></a><span class=\"lineno\"> 1398</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01399\"></a><span class=\"lineno\"> 1399</span>&#160;        vertBlur = self.mRenderOperations[kVertBlurOp]</div>\n\
<div class=\"line\"><a name=\"l01400\"></a><span class=\"lineno\"> 1400</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> vertBlur <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01401\"></a><span class=\"lineno\"> 1401</span>&#160;            vertBlur.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01402\"></a><span class=\"lineno\"> 1402</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01403\"></a><span class=\"lineno\"> 1403</span>&#160;        blendOp = self.mRenderOperations[kBlendOp]</div>\n\
<div class=\"line\"><a name=\"l01404\"></a><span class=\"lineno\"> 1404</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> blendOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01405\"></a><span class=\"lineno\"> 1405</span>&#160;            blendOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01406\"></a><span class=\"lineno\"> 1406</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01407\"></a><span class=\"lineno\"> 1407</span>&#160;        hudOp = self.mRenderOperations[kHUDBlit]</div>\n\
<div class=\"line\"><a name=\"l01408\"></a><span class=\"lineno\"> 1408</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> hudOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01409\"></a><span class=\"lineno\"> 1409</span>&#160;            hudOp.setRenderTargets(self.mTargets)</div>\n\
<div class=\"line\"><a name=\"l01410\"></a><span class=\"lineno\"> 1410</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01411\"></a><span class=\"lineno\"> 1411</span>&#160;        <span class=\"keywordflow\">return</span> (<span class=\"keywordflow\">not</span> self.mTargets[kMyColorTarget] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span> <span class=\"keywordflow\">and</span> <span class=\"keywordflow\">not</span> self.mTargets[kMyDepthTarget] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span> <span class=\"keywordflow\">and</span> <span class=\"keywordflow\">not</span> self.mTargets[kMyBlurTarget] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>)</div>\n\
<div class=\"line\"><a name=\"l01412\"></a><span class=\"lineno\"> 1412</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01413\"></a><span class=\"lineno\"> 1413</span>&#160;    <span class=\"comment\"># &quot;setup&quot; will be called for each frame update.</span></div>\n\
<div class=\"line\"><a name=\"l01414\"></a><span class=\"lineno\"> 1414</span>&#160;    <span class=\"comment\"># Here we set up the render loop logic and allocate any necessary resources.</span></div>\n\
<div class=\"line\"><a name=\"l01415\"></a><span class=\"lineno\"> 1415</span>&#160;    <span class=\"comment\"># The render loop logic setup is done by setting up a list of</span></div>\n\
<div class=\"line\"><a name=\"l01416\"></a><span class=\"lineno\"> 1416</span>&#160;    <span class=\"comment\"># render operations which will be returned by the &quot;iterator&quot; calls.</span></div>\n\
<div class=\"line\"><a name=\"l01417\"></a><span class=\"lineno\"> 1417</span>&#160;    <span class=\"keyword\">def </span>setup(self, destination ):</div>\n\
<div class=\"line\"><a name=\"l01418\"></a><span class=\"lineno\"> 1418</span>&#160;        <span class=\"keywordflow\">if</span> self.mDebugOverride:</div>\n\
<div class=\"line\"><a name=\"l01419\"></a><span class=\"lineno\"> 1419</span>&#160;            print(self.name() + <span class=\"stringliteral\">&quot; : Perform setup with panel [&quot;</span> + destination + <span class=\"stringliteral\">&quot;]&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01420\"></a><span class=\"lineno\"> 1420</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01421\"></a><span class=\"lineno\"> 1421</span>&#160;        <span class=\"comment\"># As an example, we keep track of the active 3d viewport panel</span></div>\n\
<div class=\"line\"><a name=\"l01422\"></a><span class=\"lineno\"> 1422</span>&#160;        <span class=\"comment\"># if any exists. This information is passed to the operations</span></div>\n\
<div class=\"line\"><a name=\"l01423\"></a><span class=\"lineno\"> 1423</span>&#160;        <span class=\"comment\"># in case they require accessing the current 3d view (M3dView).</span></div>\n\
<div class=\"line\"><a name=\"l01424\"></a><span class=\"lineno\"> 1424</span>&#160;        self.mPanelName = destination</div>\n\
<div class=\"line\"><a name=\"l01425\"></a><span class=\"lineno\"> 1425</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01426\"></a><span class=\"lineno\"> 1426</span>&#160;        <span class=\"comment\"># Track changes to the renderer and override for this viewport (nothing</span></div>\n\
<div class=\"line\"><a name=\"l01427\"></a><span class=\"lineno\"> 1427</span>&#160;        <span class=\"comment\"># will be printed unless mDebugOverride is True)</span></div>\n\
<div class=\"line\"><a name=\"l01428\"></a><span class=\"lineno\"> 1428</span>&#160;        <span class=\"comment\"># PYAPI_TODO if (!mRendererChangeCB)</span></div>\n\
<div class=\"line\"><a name=\"l01429\"></a><span class=\"lineno\"> 1429</span>&#160;            <span class=\"comment\"># PYAPI_TODO mRendererChangeCB = MUiMessage::add3dViewRendererChangedCallback(destination, sRendererChangeFunc, (void*)mDebugOverride)</span></div>\n\
<div class=\"line\"><a name=\"l01430\"></a><span class=\"lineno\"> 1430</span>&#160;        <span class=\"comment\"># PYAPI_TODO if (!mRenderOverrideChangeCB)</span></div>\n\
<div class=\"line\"><a name=\"l01431\"></a><span class=\"lineno\"> 1431</span>&#160;            <span class=\"comment\"># PYAPI_TODO mRenderOverrideChangeCB = MUiMessage::add3dViewRenderOverrideChangedCallback(destination, sRenderOverrideChangeFunc, (void*)mDebugOverride)</span></div>\n\
<div class=\"line\"><a name=\"l01432\"></a><span class=\"lineno\"> 1432</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01433\"></a><span class=\"lineno\"> 1433</span>&#160;        <span class=\"keywordflow\">if</span> self.mRenderOperations[kPresentOp] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01434\"></a><span class=\"lineno\"> 1434</span>&#160;            <span class=\"comment\"># Sample of a &quot;simple&quot; render loop.</span></div>\n\
<div class=\"line\"><a name=\"l01435\"></a><span class=\"lineno\"> 1435</span>&#160;            <span class=\"comment\"># &quot;Simple&quot; means a scene draw + HUD + present to viewport</span></div>\n\
<div class=\"line\"><a name=\"l01436\"></a><span class=\"lineno\"> 1436</span>&#160;            <span class=\"keywordflow\">if</span> self.mSimpleRendering:</div>\n\
<div class=\"line\"><a name=\"l01437\"></a><span class=\"lineno\"> 1437</span>&#160;                self.mSplitUIDraw = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01438\"></a><span class=\"lineno\"> 1438</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01439\"></a><span class=\"lineno\"> 1439</span>&#160;                self.mRenderOperations[kBackgroundBlit] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01440\"></a><span class=\"lineno\"> 1440</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01441\"></a><span class=\"lineno\"> 1441</span>&#160;                self.mRenderOperationNames[kMaya3dSceneRender] = <span class=\"stringliteral\">&quot;__MySimpleSceneRender&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01442\"></a><span class=\"lineno\"> 1442</span>&#160;                sceneOp = simpleViewRenderSceneRender( self.mRenderOperationNames[kMaya3dSceneRender] )</div>\n\
<div class=\"line\"><a name=\"l01443\"></a><span class=\"lineno\"> 1443</span>&#160;                self.mRenderOperations[kMaya3dSceneRender] = sceneOp</div>\n\
<div class=\"line\"><a name=\"l01444\"></a><span class=\"lineno\"> 1444</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01445\"></a><span class=\"lineno\"> 1445</span>&#160;                <span class=\"comment\"># NULL out any additional opertions used for the &quot;complex&quot; render loop</span></div>\n\
<div class=\"line\"><a name=\"l01446\"></a><span class=\"lineno\"> 1446</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderOpaque] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01447\"></a><span class=\"lineno\"> 1447</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderTransparent] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01448\"></a><span class=\"lineno\"> 1448</span>&#160;                self.mRenderOperations[kThresholdOp] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01449\"></a><span class=\"lineno\"> 1449</span>&#160;                self.mRenderOperations[kHorizBlurOp] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01450\"></a><span class=\"lineno\"> 1450</span>&#160;                self.mRenderOperations[kVertBlurOp] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01451\"></a><span class=\"lineno\"> 1451</span>&#160;                self.mRenderOperations[kPostOperation1] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01452\"></a><span class=\"lineno\"> 1452</span>&#160;                self.mRenderOperations[kPostOperation2] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01453\"></a><span class=\"lineno\"> 1453</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderUI] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01454\"></a><span class=\"lineno\"> 1454</span>&#160;                self.mRenderOperations[kUserOpNumber] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01455\"></a><span class=\"lineno\"> 1455</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01456\"></a><span class=\"lineno\"> 1456</span>&#160;                self.mRenderOperations[kHUDBlit] = viewRenderHUDOperation()</div>\n\
<div class=\"line\"><a name=\"l01457\"></a><span class=\"lineno\"> 1457</span>&#160;                self.mRenderOperationNames[kHUDBlit] = self.mRenderOperations[kHUDBlit].name()</div>\n\
<div class=\"line\"><a name=\"l01458\"></a><span class=\"lineno\"> 1458</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01459\"></a><span class=\"lineno\"> 1459</span>&#160;                self.mRenderOperationNames[kPresentOp] = <span class=\"stringliteral\">&quot;__MyPresentTarget&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01460\"></a><span class=\"lineno\"> 1460</span>&#160;                self.mRenderOperations[kPresentOp] = viewRenderPresentTarget( self.mRenderOperationNames[kPresentOp] )</div>\n\
<div class=\"line\"><a name=\"l01461\"></a><span class=\"lineno\"> 1461</span>&#160;                self.mRenderOperationNames[kPresentOp] = self.mRenderOperations[kPresentOp].name()</div>\n\
<div class=\"line\"><a name=\"l01462\"></a><span class=\"lineno\"> 1462</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01463\"></a><span class=\"lineno\"> 1463</span>&#160;            <span class=\"comment\"># Sample which performs the full &quot;complex&quot; render loop</span></div>\n\
<div class=\"line\"><a name=\"l01464\"></a><span class=\"lineno\"> 1464</span>&#160;            <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01465\"></a><span class=\"lineno\"> 1465</span>&#160;            <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l01466\"></a><span class=\"lineno\"> 1466</span>&#160;                rect = om.MFloatPoint(0.0, 0.0, 1.0, 1.0)</div>\n\
<div class=\"line\"><a name=\"l01467\"></a><span class=\"lineno\"> 1467</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01468\"></a><span class=\"lineno\"> 1468</span>&#160;                <span class=\"comment\"># Pre scene quad render to render a procedurally drawn background</span></div>\n\
<div class=\"line\"><a name=\"l01469\"></a><span class=\"lineno\"> 1469</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01470\"></a><span class=\"lineno\"> 1470</span>&#160;                self.mRenderOperationNames[kBackgroundBlit] = <span class=\"stringliteral\">&quot;__MyPreQuadRender&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01471\"></a><span class=\"lineno\"> 1471</span>&#160;                quadOp = viewRenderQuadRender( self.mRenderOperationNames[kBackgroundBlit] )</div>\n\
<div class=\"line\"><a name=\"l01472\"></a><span class=\"lineno\"> 1472</span>&#160;                quadOp.setShader( viewRenderQuadRender.kPre_MandelBrot ) <span class=\"comment\"># We use a shader override to render the background</span></div>\n\
<div class=\"line\"><a name=\"l01473\"></a><span class=\"lineno\"> 1473</span>&#160;                quadOp.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01474\"></a><span class=\"lineno\"> 1474</span>&#160;                self.mRenderOperations[kBackgroundBlit] = quadOp</div>\n\
<div class=\"line\"><a name=\"l01475\"></a><span class=\"lineno\"> 1475</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01476\"></a><span class=\"lineno\"> 1476</span>&#160;                <span class=\"comment\"># Set up scene draw operations</span></div>\n\
<div class=\"line\"><a name=\"l01477\"></a><span class=\"lineno\"> 1477</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01478\"></a><span class=\"lineno\"> 1478</span>&#160;                <span class=\"comment\"># This flag indicates that we wish to split up the scene draw into</span></div>\n\
<div class=\"line\"><a name=\"l01479\"></a><span class=\"lineno\"> 1479</span>&#160;                <span class=\"comment\"># opaque, transparent, and UI passes.</span></div>\n\
<div class=\"line\"><a name=\"l01480\"></a><span class=\"lineno\"> 1480</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01481\"></a><span class=\"lineno\"> 1481</span>&#160;                <span class=\"comment\"># If we don&#39;t split up the UI from the opaque and transparent,</span></div>\n\
<div class=\"line\"><a name=\"l01482\"></a><span class=\"lineno\"> 1482</span>&#160;                <span class=\"comment\"># the UI will have the &quot;glow&quot; effect applied to it. Instead</span></div>\n\
<div class=\"line\"><a name=\"l01483\"></a><span class=\"lineno\"> 1483</span>&#160;                <span class=\"comment\"># splitting up will allow the UI to draw after the &quot;glow&quot; effect</span></div>\n\
<div class=\"line\"><a name=\"l01484\"></a><span class=\"lineno\"> 1484</span>&#160;                <span class=\"comment\"># has been applied.</span></div>\n\
<div class=\"line\"><a name=\"l01485\"></a><span class=\"lineno\"> 1485</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01486\"></a><span class=\"lineno\"> 1486</span>&#160;                self.mSplitUIDraw = <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l01487\"></a><span class=\"lineno\"> 1487</span>&#160;                self.mRenderOperations[kMaya3dSceneRender] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01488\"></a><span class=\"lineno\"> 1488</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderOpaque] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01489\"></a><span class=\"lineno\"> 1489</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderTransparent] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01490\"></a><span class=\"lineno\"> 1490</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderUI] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01491\"></a><span class=\"lineno\"> 1491</span>&#160;                <span class=\"keywordflow\">if</span> self.mSplitUIDraw:</div>\n\
<div class=\"line\"><a name=\"l01492\"></a><span class=\"lineno\"> 1492</span>&#160;                    <span class=\"comment\"># opaque</span></div>\n\
<div class=\"line\"><a name=\"l01493\"></a><span class=\"lineno\"> 1493</span>&#160;                    sceneOp = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01494\"></a><span class=\"lineno\"> 1494</span>&#160;                    sDrawOpaque = <span class=\"keyword\">True</span> <span class=\"comment\"># can disable if desired</span></div>\n\
<div class=\"line\"><a name=\"l01495\"></a><span class=\"lineno\"> 1495</span>&#160;                    <span class=\"keywordflow\">if</span> sDrawOpaque:</div>\n\
<div class=\"line\"><a name=\"l01496\"></a><span class=\"lineno\"> 1496</span>&#160;                        self.mRenderOperationNames[kMaya3dSceneRenderOpaque] = <span class=\"stringliteral\">&quot;__MyStdSceneRenderOpaque&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01497\"></a><span class=\"lineno\"> 1497</span>&#160;                        clearMask = omr.MClearOperation.kClearDepth | omr.MClearOperation.kClearStencil</div>\n\
<div class=\"line\"><a name=\"l01498\"></a><span class=\"lineno\"> 1498</span>&#160;                        sceneOp = viewRenderSceneRender( self.mRenderOperationNames[kMaya3dSceneRenderOpaque], omr.MSceneRender.kRenderOpaqueShadedItems, clearMask )</div>\n\
<div class=\"line\"><a name=\"l01499\"></a><span class=\"lineno\"> 1499</span>&#160;                        sceneOp.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01500\"></a><span class=\"lineno\"> 1500</span>&#160;                        self.mRenderOperations[kMaya3dSceneRenderOpaque] = sceneOp</div>\n\
<div class=\"line\"><a name=\"l01501\"></a><span class=\"lineno\"> 1501</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01502\"></a><span class=\"lineno\"> 1502</span>&#160;                    <span class=\"comment\"># transparent, clear nothing since needs to draw on top of opaque</span></div>\n\
<div class=\"line\"><a name=\"l01503\"></a><span class=\"lineno\"> 1503</span>&#160;                    sDrawTransparent = <span class=\"keyword\">True</span> <span class=\"comment\"># can disable if desired</span></div>\n\
<div class=\"line\"><a name=\"l01504\"></a><span class=\"lineno\"> 1504</span>&#160;                    <span class=\"keywordflow\">if</span> sDrawTransparent:</div>\n\
<div class=\"line\"><a name=\"l01505\"></a><span class=\"lineno\"> 1505</span>&#160;                        self.mRenderOperationNames[kMaya3dSceneRenderTransparent] = <span class=\"stringliteral\">&quot;__MyStdSceneRenderTransparent&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01506\"></a><span class=\"lineno\"> 1506</span>&#160;                        clearMask = omr.MClearOperation.kClearDepth | omr.MClearOperation.kClearStencil</div>\n\
<div class=\"line\"><a name=\"l01507\"></a><span class=\"lineno\"> 1507</span>&#160;                        <span class=\"keywordflow\">if</span> sDrawOpaque:</div>\n\
<div class=\"line\"><a name=\"l01508\"></a><span class=\"lineno\"> 1508</span>&#160;                            clearMask = omr.MClearOperation.kClearNone</div>\n\
<div class=\"line\"><a name=\"l01509\"></a><span class=\"lineno\"> 1509</span>&#160;                        sceneOp = viewRenderSceneRender( self.mRenderOperationNames[kMaya3dSceneRenderTransparent], omr.MSceneRender.kRenderTransparentShadedItems, clearMask )</div>\n\
<div class=\"line\"><a name=\"l01510\"></a><span class=\"lineno\"> 1510</span>&#160;                        sceneOp.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01511\"></a><span class=\"lineno\"> 1511</span>&#160;                        self.mRenderOperations[kMaya3dSceneRenderTransparent] = sceneOp</div>\n\
<div class=\"line\"><a name=\"l01512\"></a><span class=\"lineno\"> 1512</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01513\"></a><span class=\"lineno\"> 1513</span>&#160;                    <span class=\"comment\"># ui, don&#39;t clear depth since we need it for drawing ui correctly</span></div>\n\
<div class=\"line\"><a name=\"l01514\"></a><span class=\"lineno\"> 1514</span>&#160;                    self.mRenderOperationNames[kMaya3dSceneRenderUI] = <span class=\"stringliteral\">&quot;__MyStdSceneRenderUI&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01515\"></a><span class=\"lineno\"> 1515</span>&#160;                    clearMask = omr.MClearOperation.kClearDepth | omr.MClearOperation.kClearStencil</div>\n\
<div class=\"line\"><a name=\"l01516\"></a><span class=\"lineno\"> 1516</span>&#160;                    <span class=\"keywordflow\">if</span> sDrawOpaque <span class=\"keywordflow\">or</span> sDrawTransparent:</div>\n\
<div class=\"line\"><a name=\"l01517\"></a><span class=\"lineno\"> 1517</span>&#160;                        clearMask = omr.MClearOperation.kClearStencil</div>\n\
<div class=\"line\"><a name=\"l01518\"></a><span class=\"lineno\"> 1518</span>&#160;                    sceneOp = viewRenderSceneRender( self.mRenderOperationNames[kMaya3dSceneRenderUI], omr.MSceneRender.kRenderUIItems, clearMask )</div>\n\
<div class=\"line\"><a name=\"l01519\"></a><span class=\"lineno\"> 1519</span>&#160;                    sceneOp.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01520\"></a><span class=\"lineno\"> 1520</span>&#160;                    self.mRenderOperations[kMaya3dSceneRenderUI] = sceneOp</div>\n\
<div class=\"line\"><a name=\"l01521\"></a><span class=\"lineno\"> 1521</span>&#160;                <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l01522\"></a><span class=\"lineno\"> 1522</span>&#160;                    <span class=\"comment\"># will draw all of opaque, transparent and ui at once</span></div>\n\
<div class=\"line\"><a name=\"l01523\"></a><span class=\"lineno\"> 1523</span>&#160;                    self.mRenderOperationNames[kMaya3dSceneRender] = <span class=\"stringliteral\">&quot;__MyStdSceneRender&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01524\"></a><span class=\"lineno\"> 1524</span>&#160;                    clearMask = omr.MClearOperation.kClearDepth | omr.MClearOperation.kClearStencil</div>\n\
<div class=\"line\"><a name=\"l01525\"></a><span class=\"lineno\"> 1525</span>&#160;                    sceneOp = viewRenderSceneRender( self.mRenderOperationNames[kMaya3dSceneRender], omr.MSceneRender.kNoSceneFilterOverride, clearMask )</div>\n\
<div class=\"line\"><a name=\"l01526\"></a><span class=\"lineno\"> 1526</span>&#160;                    sceneOp.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01527\"></a><span class=\"lineno\"> 1527</span>&#160;                    self.mRenderOperations[kMaya3dSceneRender] = sceneOp</div>\n\
<div class=\"line\"><a name=\"l01528\"></a><span class=\"lineno\"> 1528</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01529\"></a><span class=\"lineno\"> 1529</span>&#160;                <span class=\"comment\"># Set up operations which will perform a threshold and a blur on the thresholded</span></div>\n\
<div class=\"line\"><a name=\"l01530\"></a><span class=\"lineno\"> 1530</span>&#160;                <span class=\"comment\"># render target. Also included is an operation to blend the non-UI scene</span></div>\n\
<div class=\"line\"><a name=\"l01531\"></a><span class=\"lineno\"> 1531</span>&#160;                <span class=\"comment\"># render target with the output of this set of operations (thresholded blurred scene)</span></div>\n\
<div class=\"line\"><a name=\"l01532\"></a><span class=\"lineno\"> 1532</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01533\"></a><span class=\"lineno\"> 1533</span>&#160;                self.mRenderOperationNames[kThresholdOp] = <span class=\"stringliteral\">&quot;__ThresholdColor&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01534\"></a><span class=\"lineno\"> 1534</span>&#160;                quadThreshold = viewRenderQuadRender( self.mRenderOperationNames[kThresholdOp] )</div>\n\
<div class=\"line\"><a name=\"l01535\"></a><span class=\"lineno\"> 1535</span>&#160;                quadThreshold.setShader( viewRenderQuadRender.kScene_Threshold ) <span class=\"comment\"># Use threshold shader</span></div>\n\
<div class=\"line\"><a name=\"l01536\"></a><span class=\"lineno\"> 1536</span>&#160;                quadThreshold.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01537\"></a><span class=\"lineno\"> 1537</span>&#160;                self.mRenderOperations[kThresholdOp] = quadThreshold</div>\n\
<div class=\"line\"><a name=\"l01538\"></a><span class=\"lineno\"> 1538</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01539\"></a><span class=\"lineno\"> 1539</span>&#160;                self.mRenderOperationNames[kHorizBlurOp] = <span class=\"stringliteral\">&quot;__HorizontalBlur&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01540\"></a><span class=\"lineno\"> 1540</span>&#160;                quadHBlur = viewRenderQuadRender( self.mRenderOperationNames[kHorizBlurOp] )</div>\n\
<div class=\"line\"><a name=\"l01541\"></a><span class=\"lineno\"> 1541</span>&#160;                quadHBlur.setShader( viewRenderQuadRender.kScene_BlurHoriz ) <span class=\"comment\"># Use horizontal blur shader</span></div>\n\
<div class=\"line\"><a name=\"l01542\"></a><span class=\"lineno\"> 1542</span>&#160;                quadHBlur.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01543\"></a><span class=\"lineno\"> 1543</span>&#160;                self.mRenderOperations[kHorizBlurOp] = quadHBlur</div>\n\
<div class=\"line\"><a name=\"l01544\"></a><span class=\"lineno\"> 1544</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01545\"></a><span class=\"lineno\"> 1545</span>&#160;                self.mRenderOperationNames[kVertBlurOp] = <span class=\"stringliteral\">&quot;__VerticalBlur&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01546\"></a><span class=\"lineno\"> 1546</span>&#160;                quadVBlur = viewRenderQuadRender( self.mRenderOperationNames[kVertBlurOp] )</div>\n\
<div class=\"line\"><a name=\"l01547\"></a><span class=\"lineno\"> 1547</span>&#160;                quadVBlur.setShader( viewRenderQuadRender.kScene_BlurVert ) <span class=\"comment\"># Use vertical blur shader</span></div>\n\
<div class=\"line\"><a name=\"l01548\"></a><span class=\"lineno\"> 1548</span>&#160;                quadVBlur.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01549\"></a><span class=\"lineno\"> 1549</span>&#160;                self.mRenderOperations[kVertBlurOp] = quadVBlur</div>\n\
<div class=\"line\"><a name=\"l01550\"></a><span class=\"lineno\"> 1550</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01551\"></a><span class=\"lineno\"> 1551</span>&#160;                self.mRenderOperationNames[kBlendOp] = <span class=\"stringliteral\">&quot;__SceneBlurBlend&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01552\"></a><span class=\"lineno\"> 1552</span>&#160;                quadBlend = viewRenderQuadRender( self.mRenderOperationNames[kBlendOp] )</div>\n\
<div class=\"line\"><a name=\"l01553\"></a><span class=\"lineno\"> 1553</span>&#160;                quadBlend.setShader( viewRenderQuadRender.kSceneBlur_Blend ) <span class=\"comment\"># Use color blend shader</span></div>\n\
<div class=\"line\"><a name=\"l01554\"></a><span class=\"lineno\"> 1554</span>&#160;                quadBlend.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01555\"></a><span class=\"lineno\"> 1555</span>&#160;                self.mRenderOperations[kBlendOp] = quadBlend</div>\n\
<div class=\"line\"><a name=\"l01556\"></a><span class=\"lineno\"> 1556</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01557\"></a><span class=\"lineno\"> 1557</span>&#160;                <span class=\"comment\"># Sample custom operation which will peform a custom &quot;scene render&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01558\"></a><span class=\"lineno\"> 1558</span>&#160;                <span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01559\"></a><span class=\"lineno\"> 1559</span>&#160;                self.mRenderOperationNames[kUserOpNumber] = <span class=\"stringliteral\">&quot;__MyCustomSceneRender&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01560\"></a><span class=\"lineno\"> 1560</span>&#160;                userOp = viewRenderUserOperation( self.mRenderOperationNames[kUserOpNumber] )</div>\n\
<div class=\"line\"><a name=\"l01561\"></a><span class=\"lineno\"> 1561</span>&#160;                userOp.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01562\"></a><span class=\"lineno\"> 1562</span>&#160;                self.mRenderOperations[kUserOpNumber] = userOp</div>\n\
<div class=\"line\"><a name=\"l01563\"></a><span class=\"lineno\"> 1563</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01564\"></a><span class=\"lineno\"> 1564</span>&#160;                wantPostQuadOps = <span class=\"keyword\">False</span></div>\n\
<div class=\"line\"><a name=\"l01565\"></a><span class=\"lineno\"> 1565</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01566\"></a><span class=\"lineno\"> 1566</span>&#160;                <span class=\"comment\"># Some sample post scene quad render operations</span></div>\n\
<div class=\"line\"><a name=\"l01567\"></a><span class=\"lineno\"> 1567</span>&#160;                <span class=\"comment\"># a. Monochrome quad render with custom shader</span></div>\n\
<div class=\"line\"><a name=\"l01568\"></a><span class=\"lineno\"> 1568</span>&#160;                self.mRenderOperationNames[kPostOperation1] = <span class=\"stringliteral\">&quot;__PostOperation1&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01569\"></a><span class=\"lineno\"> 1569</span>&#160;                quadOp2 = viewRenderQuadRender( self.mRenderOperationNames[kPostOperation1] )</div>\n\
<div class=\"line\"><a name=\"l01570\"></a><span class=\"lineno\"> 1570</span>&#160;                quadOp2.setShader( viewRenderQuadRender.kPost_EffectMonochrome )</div>\n\
<div class=\"line\"><a name=\"l01571\"></a><span class=\"lineno\"> 1571</span>&#160;                quadOp2.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01572\"></a><span class=\"lineno\"> 1572</span>&#160;                <span class=\"keywordflow\">if</span> wantPostQuadOps:</div>\n\
<div class=\"line\"><a name=\"l01573\"></a><span class=\"lineno\"> 1573</span>&#160;                    self.mRenderOperations[kPostOperation1] = quadOp2</div>\n\
<div class=\"line\"><a name=\"l01574\"></a><span class=\"lineno\"> 1574</span>&#160;                <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l01575\"></a><span class=\"lineno\"> 1575</span>&#160;                    self.mRenderOperations[kPostOperation1] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01576\"></a><span class=\"lineno\"> 1576</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01577\"></a><span class=\"lineno\"> 1577</span>&#160;                <span class=\"comment\"># b. Invert quad render with custom shader</span></div>\n\
<div class=\"line\"><a name=\"l01578\"></a><span class=\"lineno\"> 1578</span>&#160;                self.mRenderOperationNames[kPostOperation2] = <span class=\"stringliteral\">&quot;__PostOperation2&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01579\"></a><span class=\"lineno\"> 1579</span>&#160;                quadOp3 = viewRenderQuadRender( self.mRenderOperationNames[kPostOperation2] )</div>\n\
<div class=\"line\"><a name=\"l01580\"></a><span class=\"lineno\"> 1580</span>&#160;                quadOp3.setShader( viewRenderQuadRender.kPost_EffectInvert )</div>\n\
<div class=\"line\"><a name=\"l01581\"></a><span class=\"lineno\"> 1581</span>&#160;                quadOp3.setViewRectangle(rect)</div>\n\
<div class=\"line\"><a name=\"l01582\"></a><span class=\"lineno\"> 1582</span>&#160;                <span class=\"keywordflow\">if</span> wantPostQuadOps:</div>\n\
<div class=\"line\"><a name=\"l01583\"></a><span class=\"lineno\"> 1583</span>&#160;                    self.mRenderOperations[kPostOperation2] = quadOp3</div>\n\
<div class=\"line\"><a name=\"l01584\"></a><span class=\"lineno\"> 1584</span>&#160;                <span class=\"keywordflow\">else</span>:</div>\n\
<div class=\"line\"><a name=\"l01585\"></a><span class=\"lineno\"> 1585</span>&#160;                    self.mRenderOperations[kPostOperation2] = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01586\"></a><span class=\"lineno\"> 1586</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01587\"></a><span class=\"lineno\"> 1587</span>&#160;                <span class=\"comment\"># &quot;Present&quot; opertion which will display the target for viewports.</span></div>\n\
<div class=\"line\"><a name=\"l01588\"></a><span class=\"lineno\"> 1588</span>&#160;                <span class=\"comment\"># Operation is a no-op for batch rendering as there is no on-screen</span></div>\n\
<div class=\"line\"><a name=\"l01589\"></a><span class=\"lineno\"> 1589</span>&#160;                <span class=\"comment\"># buffer to send the result to.</span></div>\n\
<div class=\"line\"><a name=\"l01590\"></a><span class=\"lineno\"> 1590</span>&#160;                self.mRenderOperationNames[kPresentOp] = <span class=\"stringliteral\">&quot;__MyPresentTarget&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01591\"></a><span class=\"lineno\"> 1591</span>&#160;                self.mRenderOperations[kPresentOp] = viewRenderPresentTarget( self.mRenderOperationNames[kPresentOp] )</div>\n\
<div class=\"line\"><a name=\"l01592\"></a><span class=\"lineno\"> 1592</span>&#160;                self.mRenderOperationNames[kPresentOp] = self.mRenderOperations[kPresentOp].name()</div>\n\
<div class=\"line\"><a name=\"l01593\"></a><span class=\"lineno\"> 1593</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01594\"></a><span class=\"lineno\"> 1594</span>&#160;                <span class=\"comment\"># A preset 2D HUD render operation</span></div>\n\
<div class=\"line\"><a name=\"l01595\"></a><span class=\"lineno\"> 1595</span>&#160;                self.mRenderOperations[kHUDBlit] = viewRenderHUDOperation()</div>\n\
<div class=\"line\"><a name=\"l01596\"></a><span class=\"lineno\"> 1596</span>&#160;                self.mRenderOperationNames[kHUDBlit] = self.mRenderOperations[kHUDBlit].name()</div>\n\
<div class=\"line\"><a name=\"l01597\"></a><span class=\"lineno\"> 1597</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01598\"></a><span class=\"lineno\"> 1598</span>&#160;        gotTargets = <span class=\"keyword\">True</span></div>\n\
<div class=\"line\"><a name=\"l01599\"></a><span class=\"lineno\"> 1599</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mSimpleRendering:</div>\n\
<div class=\"line\"><a name=\"l01600\"></a><span class=\"lineno\"> 1600</span>&#160;            <span class=\"comment\"># Update any of the render targets which will be required</span></div>\n\
<div class=\"line\"><a name=\"l01601\"></a><span class=\"lineno\"> 1601</span>&#160;            gotTargets = self.updateRenderTargets()</div>\n\
<div class=\"line\"><a name=\"l01602\"></a><span class=\"lineno\"> 1602</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01603\"></a><span class=\"lineno\"> 1603</span>&#160;            <span class=\"comment\"># Set the name of the panel on operations which may use the panel</span></div>\n\
<div class=\"line\"><a name=\"l01604\"></a><span class=\"lineno\"> 1604</span>&#160;            <span class=\"comment\"># name to find out the associated M3dView.</span></div>\n\
<div class=\"line\"><a name=\"l01605\"></a><span class=\"lineno\"> 1605</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mRenderOperations[kMaya3dSceneRender] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01606\"></a><span class=\"lineno\"> 1606</span>&#160;                self.mRenderOperations[kMaya3dSceneRender].setPanelName( self.mPanelName )</div>\n\
<div class=\"line\"><a name=\"l01607\"></a><span class=\"lineno\"> 1607</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mRenderOperations[kMaya3dSceneRenderOpaque] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01608\"></a><span class=\"lineno\"> 1608</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderOpaque].setPanelName( self.mPanelName )</div>\n\
<div class=\"line\"><a name=\"l01609\"></a><span class=\"lineno\"> 1609</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mRenderOperations[kMaya3dSceneRenderTransparent] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01610\"></a><span class=\"lineno\"> 1610</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderTransparent].setPanelName( self.mPanelName )</div>\n\
<div class=\"line\"><a name=\"l01611\"></a><span class=\"lineno\"> 1611</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mRenderOperations[kMaya3dSceneRenderUI] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01612\"></a><span class=\"lineno\"> 1612</span>&#160;                self.mRenderOperations[kMaya3dSceneRenderUI].setPanelName( self.mPanelName )</div>\n\
<div class=\"line\"><a name=\"l01613\"></a><span class=\"lineno\"> 1613</span>&#160;            <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> self.mRenderOperations[kUserOpNumber] <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01614\"></a><span class=\"lineno\"> 1614</span>&#160;                self.mRenderOperations[kUserOpNumber].setPanelName( self.mPanelName )</div>\n\
<div class=\"line\"><a name=\"l01615\"></a><span class=\"lineno\"> 1615</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01616\"></a><span class=\"lineno\"> 1616</span>&#160;        self.mCurrentOperation = -1</div>\n\
<div class=\"line\"><a name=\"l01617\"></a><span class=\"lineno\"> 1617</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01618\"></a><span class=\"lineno\"> 1618</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> gotTargets:</div>\n\
<div class=\"line\"><a name=\"l01619\"></a><span class=\"lineno\"> 1619</span>&#160;            <span class=\"keywordflow\">raise</span> ValueError</div>\n\
<div class=\"line\"><a name=\"l01620\"></a><span class=\"lineno\"> 1620</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01621\"></a><span class=\"lineno\"> 1621</span>&#160;    <span class=\"comment\"># End of frame cleanup. For now just clears out any data on operations which may</span></div>\n\
<div class=\"line\"><a name=\"l01622\"></a><span class=\"lineno\"> 1622</span>&#160;    <span class=\"comment\"># change from frame to frame (render target, output panel name etc)</span></div>\n\
<div class=\"line\"><a name=\"l01623\"></a><span class=\"lineno\"> 1623</span>&#160;    <span class=\"keyword\">def </span>cleanup(self):</div>\n\
<div class=\"line\"><a name=\"l01624\"></a><span class=\"lineno\"> 1624</span>&#160;        <span class=\"keywordflow\">if</span> self.mDebugOverride:</div>\n\
<div class=\"line\"><a name=\"l01625\"></a><span class=\"lineno\"> 1625</span>&#160;            print(self.name() + <span class=\"stringliteral\">&quot; : Perform cleanup. panelname=&quot;</span> + self.mPanelName)</div>\n\
<div class=\"line\"><a name=\"l01626\"></a><span class=\"lineno\"> 1626</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01627\"></a><span class=\"lineno\"> 1627</span>&#160;        quadOp = self.mRenderOperations[kPostOperation1]</div>\n\
<div class=\"line\"><a name=\"l01628\"></a><span class=\"lineno\"> 1628</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> quadOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01629\"></a><span class=\"lineno\"> 1629</span>&#160;            quadOp.setRenderTargets(<span class=\"keywordtype\">None</span>)</div>\n\
<div class=\"line\"><a name=\"l01630\"></a><span class=\"lineno\"> 1630</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01631\"></a><span class=\"lineno\"> 1631</span>&#160;        quadOp = self.mRenderOperations[kPostOperation2]</div>\n\
<div class=\"line\"><a name=\"l01632\"></a><span class=\"lineno\"> 1632</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> quadOp <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01633\"></a><span class=\"lineno\"> 1633</span>&#160;            quadOp.setRenderTargets(<span class=\"keywordtype\">None</span>)</div>\n\
<div class=\"line\"><a name=\"l01634\"></a><span class=\"lineno\"> 1634</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01635\"></a><span class=\"lineno\"> 1635</span>&#160;        <span class=\"comment\"># Reset the active view</span></div>\n\
<div class=\"line\"><a name=\"l01636\"></a><span class=\"lineno\"> 1636</span>&#160;        self.mPanelName = <span class=\"stringliteral\">&quot;&quot;</span></div>\n\
<div class=\"line\"><a name=\"l01637\"></a><span class=\"lineno\"> 1637</span>&#160;        <span class=\"comment\"># Reset current operation</span></div>\n\
<div class=\"line\"><a name=\"l01638\"></a><span class=\"lineno\"> 1638</span>&#160;        self.mCurrentOperation = -1</div>\n\
<div class=\"line\"><a name=\"l01639\"></a><span class=\"lineno\"> 1639</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01640\"></a><span class=\"lineno\"> 1640</span>&#160;    <span class=\"keyword\">def </span>panelName(self):</div>\n\
<div class=\"line\"><a name=\"l01641\"></a><span class=\"lineno\"> 1641</span>&#160;        <span class=\"keywordflow\">return</span> self.mPanelName</div>\n\
<div class=\"line\"><a name=\"l01642\"></a><span class=\"lineno\"> 1642</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01643\"></a><span class=\"lineno\"> 1643</span>&#160;    <span class=\"keyword\">def </span>setSimpleRendering(self, flag):</div>\n\
<div class=\"line\"><a name=\"l01644\"></a><span class=\"lineno\"> 1644</span>&#160;        self.mSimpleRendering = flag</div>\n\
<div class=\"line\"><a name=\"l01645\"></a><span class=\"lineno\"> 1645</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01646\"></a><span class=\"lineno\"> 1646</span>&#160;    <span class=\"keyword\">def </span>uiName(self):</div>\n\
<div class=\"line\"><a name=\"l01647\"></a><span class=\"lineno\"> 1647</span>&#160;        <span class=\"keywordflow\">return</span> self.mUIName</div>\n\
<div class=\"line\"><a name=\"l01648\"></a><span class=\"lineno\"> 1648</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01649\"></a><span class=\"lineno\"> 1649</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01650\"></a><span class=\"lineno\"> 1650</span>&#160;viewRenderOverrideInstance = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01651\"></a><span class=\"lineno\"> 1651</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01652\"></a><span class=\"lineno\"> 1652</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01653\"></a><span class=\"lineno\"> 1653</span>&#160;<span class=\"comment\">#   Register an override and associated command</span></div>\n\
<div class=\"line\"><a name=\"l01654\"></a><span class=\"lineno\"> 1654</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01655\"></a><span class=\"lineno\"> 1655</span>&#160;<span class=\"keyword\">def </span>initializePlugin(obj):</div>\n\
<div class=\"line\"><a name=\"l01656\"></a><span class=\"lineno\"> 1656</span>&#160;    plugin = om.MFnPlugin(obj) </div>\n\
<div class=\"line\"><a name=\"l01657\"></a><span class=\"lineno\"> 1657</span>&#160;    <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l01658\"></a><span class=\"lineno\"> 1658</span>&#160;        <span class=\"keyword\">global</span> viewRenderOverrideInstance</div>\n\
<div class=\"line\"><a name=\"l01659\"></a><span class=\"lineno\"> 1659</span>&#160;        viewRenderOverrideInstance = viewRenderOverride( <span class=\"stringliteral\">&quot;my_viewRenderOverride&quot;</span> )</div>\n\
<div class=\"line\"><a name=\"l01660\"></a><span class=\"lineno\"> 1660</span>&#160;        omr.MRenderer.registerOverride(viewRenderOverrideInstance)</div>\n\
<div class=\"line\"><a name=\"l01661\"></a><span class=\"lineno\"> 1661</span>&#160;    <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l01662\"></a><span class=\"lineno\"> 1662</span>&#160;        sys.stderr.write(<span class=\"stringliteral\">&quot;registerOverride\\n&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01663\"></a><span class=\"lineno\"> 1663</span>&#160;        <span class=\"keywordflow\">raise</span></div>\n\
<div class=\"line\"><a name=\"l01664\"></a><span class=\"lineno\"> 1664</span>&#160;</div>\n\
<div class=\"line\"><a name=\"l01665\"></a><span class=\"lineno\"> 1665</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01666\"></a><span class=\"lineno\"> 1666</span>&#160;<span class=\"comment\">#   When uninitializing the plugin, make sure to deregister the</span></div>\n\
<div class=\"line\"><a name=\"l01667\"></a><span class=\"lineno\"> 1667</span>&#160;<span class=\"comment\">#   override and then delete the instance which is being kept here.</span></div>\n\
<div class=\"line\"><a name=\"l01668\"></a><span class=\"lineno\"> 1668</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01669\"></a><span class=\"lineno\"> 1669</span>&#160;<span class=\"comment\">#   Also remove the command used to set options on the override</span></div>\n\
<div class=\"line\"><a name=\"l01670\"></a><span class=\"lineno\"> 1670</span>&#160;<span class=\"comment\">#</span></div>\n\
<div class=\"line\"><a name=\"l01671\"></a><span class=\"lineno\"> 1671</span>&#160;<span class=\"keyword\">def </span>uninitializePlugin(obj):</div>\n\
<div class=\"line\"><a name=\"l01672\"></a><span class=\"lineno\"> 1672</span>&#160;    plugin = om.MFnPlugin(obj) </div>\n\
<div class=\"line\"><a name=\"l01673\"></a><span class=\"lineno\"> 1673</span>&#160;    <span class=\"keywordflow\">try</span>:</div>\n\
<div class=\"line\"><a name=\"l01674\"></a><span class=\"lineno\"> 1674</span>&#160;        <span class=\"keyword\">global</span> viewRenderOverrideInstance</div>\n\
<div class=\"line\"><a name=\"l01675\"></a><span class=\"lineno\"> 1675</span>&#160;        <span class=\"keywordflow\">if</span> <span class=\"keywordflow\">not</span> viewRenderOverrideInstance <span class=\"keywordflow\">is</span> <span class=\"keywordtype\">None</span>:</div>\n\
<div class=\"line\"><a name=\"l01676\"></a><span class=\"lineno\"> 1676</span>&#160;            omr.MRenderer.deregisterOverride(viewRenderOverrideInstance)</div>\n\
<div class=\"line\"><a name=\"l01677\"></a><span class=\"lineno\"> 1677</span>&#160;            viewRenderOverrideInstance = <span class=\"keywordtype\">None</span></div>\n\
<div class=\"line\"><a name=\"l01678\"></a><span class=\"lineno\"> 1678</span>&#160;    <span class=\"keywordflow\">except</span>:</div>\n\
<div class=\"line\"><a name=\"l01679\"></a><span class=\"lineno\"> 1679</span>&#160;        sys.stderr.write(<span class=\"stringliteral\">&quot;deregisterOverride\\n&quot;</span>)</div>\n\
<div class=\"line\"><a name=\"l01680\"></a><span class=\"lineno\"> 1680</span>&#160;        <span class=\"keywordflow\">raise</span></div>\n\
<div class=\"line\"><a name=\"l01681\"></a><span class=\"lineno\"> 1681</span>&#160;</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";