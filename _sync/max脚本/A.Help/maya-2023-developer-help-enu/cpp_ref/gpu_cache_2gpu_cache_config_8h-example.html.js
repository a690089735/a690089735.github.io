var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: gpuCache/gpuCacheConfig.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_config_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: gpuCache/gpuCacheConfig.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheConfig.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _gpuCacheConfig_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _gpuCacheConfig_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2018 Autodesk, Inc. All rights reserved. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stddef.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MColor.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;functional&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Specializing std::hash for MHWRender::MGeometry::Semantic and MHWRender::MGeometry::DataType</span></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>std {</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span> &lt;&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>hash&lt;MHWRender::MGeometry::Semantic&gt; {</div>\n\
<div class=\"line\">        std::size_t operator()(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4\">MHWRender::MGeometry::Semantic</a>&amp; k)<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::hash&lt;int&gt;()(k);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span> &lt;&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>hash&lt;MHWRender::MGeometry::DataType&gt; {</div>\n\
<div class=\"line\">        std::size_t operator()(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MHWRender::MGeometry::DataType</a>&amp; k)<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> std::hash&lt;int&gt;()(k);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// combiner taken from N3876 / boost::hash_combine</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> hash_combine(<span class=\"keywordtype\">size_t</span>&amp; seed, <span class=\"keyword\">const</span> T&amp; v)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::hash&lt;T&gt; hasher;</div>\n\
<div class=\"line\">    seed ^= hasher(v) + 0x9e3779b9 + (seed &lt;&lt; 6) + (seed &gt;&gt; 2);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> It&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> std::size_t hash_range(It first, It last)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::size_t seed = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; first != last; ++first)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hash_combine(seed, *first);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> seed;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>shared_array : <span class=\"keyword\">public</span> std::shared_ptr&lt;T&gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> T element_type;</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">explicit</span> shared_array(T* p = 0)</div>\n\
<div class=\"line\">        :std::shared_ptr&lt;T&gt;(p, std::default_delete&lt;T[]&gt;())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> reset(T* p = 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::shared_ptr&lt;T&gt;::reset(p, std::default_delete&lt;T[]&gt;());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    element_type&amp; operator[](<span class=\"keywordtype\">size_t</span> _Idx)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{   <span class=\"comment\">// return reference to object</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (std::shared_ptr&lt;T&gt;::get()[_Idx]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLASS Config</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *============================================================================*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Flags that control the configuration of the gpuCache plug-in at</span></div>\n\
<div class=\"line\"><span class=\"comment\">// compile time.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>Config</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>: </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> refresh();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- constants -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya default color constants.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> kDefaultGrayColor;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> kDefaultTransparency;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Wireframe line styles</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> kLineStippleShortDashed;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> kLineStippleDotted;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Display filter name</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> kDisplayFilter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- static member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> VP2OverrideAPI {</div>\n\
<div class=\"line\">        kMPxSubSceneOverride,</div>\n\
<div class=\"line\">        kMPxDrawOverride</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"comment\">// Controls which API is used to draw into Viewport 2.0.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> VP2OverrideAPI vp2OverrideAPI();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Controls whether UV coordinates are used. When used they are</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// computed when baking, they loaded in memory by the cache reader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and they are used whenever the material requires it. When</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// disabled, none of these steps are taken and the node therefore</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// uses less memory.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> isIgnoringUVs();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Minimum number of vertices that a shape must contain before we</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// decide to use VBOs. This is a heuristic to avoid allocating too</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// many VBOs, which ends causing performance problems on some</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// platforms (i.e. on Mac in particular). The assumption is that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for small objects, using vertex arrays is just as efficient.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> minVertsForVBOs();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Maximum number of VBOs that will be allocated. This is a</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// heuristic to avoid allocating too many VBOs, which ends causing</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// some catastrophic performance problems on some platforms</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (i.e. on Mac in particular).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> maxVBOCount();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Maximum total size of the VBOs that the gpuCache plug-in will</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// allocate (measured in bytes). This is a heuristic to avoid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// allocating too many VBOs, which ends causing some catastrophic</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// performance problems on some platforms where over allocation</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// causes VBOs to be evicted to main memory thus increasing the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// total memory usage of Maya.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> maxVBOSize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Indicates whether we should switch to using vertex arrays to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// draw the geometry when running low on video memory and there is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// not enough video memory available to keep more VBOs around from</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// frame to frame. The alternative is to use temporary VBOs that</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// immediately get deleted after each draw. This allows one to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// benchmark which approach is faster on a given platform.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> useVertexArrayWhenVRAMIsLow();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Indicates whether we should use vertex arrays, instead of VBOs,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to draw the geometry when performing OpenGL picking. This</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// allows one to benchmark which approach is faster on a given</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// platform.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> useVertexArrayForGLPicking();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Indicates whether we should avoid using vertex arrays and use</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// GL primitives instead.. This is used mainly to avoid</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// graphic device driver bugs.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> useGLPrimitivesInsteadOfVA();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Indicates whether we need to emulate two-sided lighting on the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// current graphic card. On some graphic cards, OpenGL two-sided</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// lighting can be 10 to 20X slower than one-sided lighting and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// emulation ends-up being faster. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> emulateTwoSidedLighting();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Threshold values that controls whether OpenGL picking or</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// raster-based picking should be used. Above this</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// value, we use raster-based picking.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> openGLPickingWireframeThreshold();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> openGLPickingSurfaceThreshold();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Indicates whether we will load cache files in the background.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Control is returned to Maya GUI thread immediately.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// A separate TBB worker thread will load the cache file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> backgroundReading();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The time interval between two idle refresh commands when reading</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the cache file in background. (Milliseconds)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> backgroundReadingRefresh();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Indicates whether we will support hardware instancing in Viewport 2.0</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Viewport 2.0 will make use of the instancing API for identical render items.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (e.g. glDrawElementsInstanced in OpenGL).</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is on by default. &quot;GPU Instancing&quot; in Hardware Renderer 2.0 Settings</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// should also be enabled. Otherwise, this switch will not take effect.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> useHardwareInstancing();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The minimum number of identical render items that we will start treat them</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// as instances. This is the threshold that trigger hardware instancing.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> hardwareInstancingThreshold();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize the Config. It will read hardware parameters and set all fields.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> initialize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sInitialized;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultVP2OverrideAPI;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDefaultIsIgnoringUVs;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultMinVertsForVBOs;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultMaxVBOCount;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultMaxVBOSize;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDefaultUseVertexArrayWhenVRAMIsLow;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDefaultUseVertexArrayForGLPicking;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDefaultUseGLPrimitivesInsteadOfVA;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDefaultEmulateTwoSidedLighting;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultOpenGLPickingWireframeThreshold;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultOpenGLPickingSurfaceThreshold;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDefaultBackgroundReading;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultBackgroundReadingRefresh;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sDefaultUseHardwareInstancing;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sDefaultHardwareInstancingThreshold;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sVP2OverrideAPI;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sIsIgnoringUVs;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sMinVertsForVBOs;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sMaxVBOCount;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sMaxVBOSize;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sUseVertexArrayWhenVRAMIsLow;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sUseVertexArrayForGLPicking;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sUseGLPrimitivesInsteadOfVA;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sEmulateTwoSidedLighting;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sOpenGLPickingWireframeThreshold;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sOpenGLPickingSurfaceThreshold;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sBackgroundReading;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sBackgroundReadingRefresh;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sUseHardwareInstancing;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">size_t</span> sHardwareInstancingThreshold;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// namespace GPUCache</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";