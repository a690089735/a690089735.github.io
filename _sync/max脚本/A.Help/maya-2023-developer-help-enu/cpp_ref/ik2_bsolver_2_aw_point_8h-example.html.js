var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n\
      <title>C++ API Reference: ik2Bsolver/AwPoint.h</title>\n\
      \n\
	  \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
      \n\
    \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'ik2_bsolver_2_aw_point_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>C++ API Reference: ik2Bsolver/AwPoint.h</h1>\n\
         </div>\n\
\n\
<div id=\"top\"><!-- do not remove this div, it is closed by doxygen! -->\n\
\n\
<!-- end header part -->\n\
<!-- Generated by Doxygen 1.8.10 -->\n\
\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Related&#160;Pages</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
      <li>\n\
        <div id=\"MSearchBox\" class=\"MSearchBoxInactive\">\n\
        <span class=\"left\">\n\
          <img id=\"MSearchSelect\" src=\"cpp_ref/search/mag_sel.png\" onmouseover=\"return searchBox.OnSearchSelectShow()\" onmouseout=\"return searchBox.OnSearchSelectHide()\" alt=\"\">\n\
          <input type=\"text\" id=\"MSearchField\" value=\"Search\" accesskey=\"S\" onfocus=\"searchBox.OnSearchFieldFocus(true)\" onblur=\"searchBox.OnSearchFieldFocus(false)\" onkeyup=\"searchBox.OnSearchFieldChange(event)\">\n\
          </span><span class=\"right\">\n\
            <a id=\"MSearchClose\" href=\"javascript:searchBox.CloseResultsWindow()\"><img id=\"MSearchCloseImg\" border=\"0\" src=\"cpp_ref/search/close.png\" alt=\"\"></a>\n\
          </span>\n\
        </div>\n\
      </li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<!-- window showing the filter options -->\n\
\n\
\n\
<!-- iframe showing the search results (closed by default) -->\n\
\n\
\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">ik2Bsolver/AwPoint.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _AwPoint</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _AwPoint</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  CLASS:    AwPoint</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  CLASS DESCRIPTION (AwPoint)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  By expressing a point (a location in 3-space) in homogeneous</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  coordinates we can express the three transformations (translate,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rotate and scale) that can be applied to it as matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  multiplications.  In homogeneous coordinates, the cartesian point</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  P(x, y, z) is represented as P(W*x, W*y, W*z, W) for any scale</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  factor W != 0.  Therefor given a homogeneous-coordinate</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  representation for a point P(X, Y, Z, W), we can find the 3D</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  cartesian coordinate representation for the point as x = X/W, y =</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Y/W and z = Z/W.  In general W == 1.0, so the division won&#39;t be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  required.  However, some NURBS code sets W to be non-unit to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  acheive certain numerical effects!  The methods cartesianizeIt()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  and cartesian() make the division necessary to return a point that</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  has w == 1.0.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  (Above paraphrased from Foley and Van Dam, Vol 1. p 250)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwMath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;AwVector.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AwPoint {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    AwPoint(); </div>\n\
<div class=\"line\">    AwPoint(<span class=\"keyword\">const</span> AwPoint &amp;); </div>\n\
<div class=\"line\">    AwPoint(<span class=\"keyword\">const</span> AwVector &amp;); </div>\n\
<div class=\"line\">    AwPoint(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz = 0.0, <span class=\"keywordtype\">double</span> ww = 1.0); </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef COMPILE_OUTSIDE_MAYA</span></div>\n\
<div class=\"line\">    AwPoint(<span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> &amp;); </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    ~AwPoint(); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwPoint &amp;operator=(<span class=\"keyword\">const</span> AwPoint &amp;); </div>\n\
<div class=\"line\">    AwPoint &amp;set(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz = 0.0, <span class=\"keywordtype\">double</span> ww = 1.0); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> &amp;operator[](<span class=\"keywordtype\">size_t</span> i); </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> operator[](<span class=\"keywordtype\">size_t</span> i) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwPoint operator+(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwPoint operator-(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwVector operator-(<span class=\"keyword\">const</span> AwPoint &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    AwPoint operator*(<span class=\"keyword\">const</span> AwMatrix &amp;right) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator==(<span class=\"keyword\">const</span> AwPoint &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator!=(<span class=\"keyword\">const</span> AwPoint &amp;) <span class=\"keyword\">const</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwPoint cartesian() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    AwPoint &amp;cartesianize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AwPoint &amp;setToProduct(<span class=\"keyword\">const</span> AwPoint &amp;left, <span class=\"keyword\">const</span> AwMatrix &amp;right); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;operator&lt;&lt;(ostream &amp;os, <span class=\"keyword\">const</span> AwPoint &amp;); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AwPoint origin;  <span class=\"comment\">// The point (0, 0, 0).</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> x, y, z, w;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    AwVector cartesianSub(<span class=\"keyword\">const</span> AwPoint &amp;) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    AwPoint cartesianAdd(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    AwPoint cartesianSub(<span class=\"keyword\">const</span> AwVector &amp;) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//  Inline methods</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint::AwPoint()</div>\n\
<div class=\"line\">: x(0.0), y(0.0), z(0.0), w(1.0)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint::AwPoint(<span class=\"keyword\">const</span> AwPoint &amp;pt)</div>\n\
<div class=\"line\">: x(pt.x), y(pt.y), z(pt.z), w(pt.w)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint::AwPoint(<span class=\"keyword\">const</span> AwVector &amp;v)</div>\n\
<div class=\"line\">: x(v.x), y(v.y), z(v.z), w(1.0)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint::AwPoint(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz, <span class=\"keywordtype\">double</span> ww)</div>\n\
<div class=\"line\">: x(xx), y(yy), z(zz), w(ww)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef COMPILE_OUTSIDE_MAYA</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint::AwPoint(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> &amp;pt)</div>\n\
<div class=\"line\">: x(pt.x), y(pt.y), z(pt.z), w(pt.w)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint::~AwPoint()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint &amp;AwPoint::set(<span class=\"keywordtype\">double</span> xx, <span class=\"keywordtype\">double</span> yy, <span class=\"keywordtype\">double</span> zz, <span class=\"keywordtype\">double</span> ww)</div>\n\
<div class=\"line\">{ x = xx; y = yy; z = zz; w = ww; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint &amp;AwPoint::operator=(<span class=\"keyword\">const</span> AwPoint &amp;src)</div>\n\
<div class=\"line\">{ x = src.x; y = src.y; z = src.z; w = src.w; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> &amp;AwPoint::operator[](<span class=\"keywordtype\">size_t</span> i)</div>\n\
<div class=\"line\">{ <span class=\"keywordflow\">return</span> (&amp;x)[i]; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> AwPoint::operator[](<span class=\"keywordtype\">size_t</span> i)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> (&amp;x)[i]; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint AwPoint::operator+(<span class=\"keyword\">const</span> AwVector &amp;v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">if</span> (w == 1.0) <span class=\"keywordflow\">return</span> AwPoint(x+v.x, y+v.y, z+v.z);</div>\n\
<div class=\"line\">  <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> cartesianAdd(v); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint AwPoint::operator-(<span class=\"keyword\">const</span> AwVector &amp;v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">if</span> (w == 1.0) <span class=\"keywordflow\">return</span> AwPoint(x-v.x, y-v.y, z-v.z);</div>\n\
<div class=\"line\">  <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> cartesianSub(v); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwVector AwPoint::operator-(<span class=\"keyword\">const</span> AwPoint &amp;o)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">if</span> (w == 1.0 &amp;&amp; o.w == 1.0) <span class=\"keywordflow\">return</span> AwVector(x-o.x, y-o.y, z-o.z);</div>\n\
<div class=\"line\">  <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> cartesianSub(o); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> AwPoint::operator==(<span class=\"keyword\">const</span> AwPoint &amp;p)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span>( x == p.x &amp;&amp; y == p.y &amp;&amp; z == p.z &amp;&amp; w == p.w); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> AwPoint::operator!=(<span class=\"keyword\">const</span> AwPoint &amp;otherPoint)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ <span class=\"keywordflow\">return</span> !(*<span class=\"keyword\">this</span> == otherPoint); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> AwPoint AwPoint::cartesian()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{ AwPoint temp(*<span class=\"keyword\">this</span>); <span class=\"keywordflow\">return</span> temp.cartesianize(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* _AwPoint */</span><span class=\"preprocessor\"></span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
<!-- start footer part -->\n\
\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";